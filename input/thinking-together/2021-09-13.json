[
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1631520851.004400",
        "client_msg_id": "2a16e971-b7c5-4743-b586-3fa3a68f665c",
        "text": "Minecraft is a game where you have a model of a world, you can move around to look at different pieces of it, and manipulate it by doing certain actions (whose number and complexity grow over time)\n\nIf you replaced the “model of the world” with a “directory”, “moving around to look at different pieces of it” with “clicking and scrolling in an IDE” and “doing certain action” with “adding\/editing code”, then you get an open-ended game we call programming :slightly_smiling_face:. I used Minecraft here as a reference for two reasons:\n1. “Adding\/editing code” is all or nothing-- I’d prefer a growing set of manipulation operations (like several minecraft mods add) to avoid boilerplate without the user needing to know in advance about every operation to understand the model\n2. Minecraft operations\/views are built around certain guarantees of the “model” (usually how different cubes will interact). In programming, the directory is so unconstrained we barely think about it; the only constraint (assumed) is that the files in the directories respect their extensions, so becomes a facsimile for some distributed AST.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631142763.129900",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+I2v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Minecraft is a game where you have a model of a world, you can move around to look at different pieces of it, and manipulate it by doing certain actions (whose number and complexity grow over time)\n\nIf you replaced the “model of the world” with a “directory”, “moving around to look at different pieces of it” with “clicking and scrolling in an IDE” and “doing certain action” with “adding\/editing code”, then you get an open-ended game we call programming "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". I used Minecraft here as a reference for two reasons:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“Adding\/editing code” is all or nothing-- I’d prefer a growing set of manipulation operations (like several minecraft mods add) to avoid boilerplate without the user needing to know in advance about every operation to understand the model"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Minecraft operations\/views are built around certain guarantees of the “model” (usually how different cubes will interact). In programming, the directory is so unconstrained we barely think about it; the only constraint (assumed) is that the files in the directories respect their extensions, so becomes a facsimile for some distributed AST."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1631522890.004600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1631522965.000000"
        },
        "client_msg_id": "8d7ec075-a84e-4972-934e-87e116a770d6",
        "text": "I'd say a Minecraft world is a \"world\" or an \"open system\" (in the sense that it has state and I\/O), not a \"model of a world\". The latter phrase suggests it's trying to accurately emulate (model) something external.\n\n&gt; Minecraft operations\/views are built around certain guarantees of the “model”\nRight, I'd describe that as \"the state obeys a schema\" and \"the interactions obey a protocol\". The aforementioned *Poly* aspires to be a language for schemas and protocols :slightly_smiling_face: (but it's not well-developed yet)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631142763.129900",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fCyre",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say a Minecraft world is a \"world\" or an \"open system\" (in the sense that it has state and I\/O), not a \"model of a world\". The latter phrase suggests it's trying to accurately emulate (model) something external.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Minecraft operations\/views are built around certain guarantees of the “model”"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nRight, I'd describe that as \"the state obeys a schema\" and \"the interactions obey a protocol\". The aforementioned "
                            },
                            {
                                "type": "text",
                                "text": "Poly",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " aspires to be a language for schemas and protocols "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " (but it's not well-developed yet)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1631524731.004900",
        "client_msg_id": "6b7b1a1f-b85e-4a90-a1c8-82c7da4fc264",
        "text": "Hi <@UC2A2ARPT>! I would point you to the concept of Virtual Time of VPRI for this I found this <https:\/\/news.ycombinator.com\/item?id=16655336> and to be more specific this: <https:\/\/blog.acolyer.org\/2015\/08\/20\/virtual-time\/>\nI hope this is relevant to you",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4a\/8t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "! I would point you to the concept of Virtual Time of VPRI for this I found this "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=16655336"
                            },
                            {
                                "type": "text",
                                "text": " and to be more specific this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.acolyer.org\/2015\/08\/20\/virtual-time\/"
                            },
                            {
                                "type": "text",
                                "text": "\nI hope this is relevant to you"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1631525981.005100",
        "client_msg_id": "12e0a2d2-9187-4443-b2f0-c153c2defdf3",
        "text": "As far as I understand current \"industrial consensus\" on exceptions\/errors (disclaimer: I'm biased and not \"deeply immersed\" into industry) it goes like this. There are conceptually two kinds of errors: sorta expected and recoverable ones (file not found and alike) and unexpected and (practically) unrecoverable (OOM and alike). For the first it's advised to use just regular return values, preferably wrapped into an ADT (aka enum) like `Option`\/`Maybe`, `Result`\/`Either` occasionally custom one. For the second kind it's advised to just \"panic\" (with optional mechanism to still handle the panic if you absolutely required to do so).\n\nAdditionally I'm personally a fan of type systems that make effects explicit, in particular which code can raise errors\/exceptions and which is pure (thus only prone to panics due to unrecoverable hardware\/OS constraints).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4tU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As far as I understand current \"industrial consensus\" on exceptions\/errors (disclaimer: I'm biased and not \"deeply immersed\" into industry) it goes like this. There are conceptually two kinds of errors: sorta expected and recoverable ones (file not found and alike) and unexpected and (practically) unrecoverable (OOM and alike). For the first it's advised to use just regular return values, preferably wrapped into an ADT (aka enum) like "
                            },
                            {
                                "type": "text",
                                "text": "Option",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "Maybe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "Result",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "Either",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " occasionally custom one. For the second kind it's advised to just \"panic\" (with optional mechanism to still handle the panic if you absolutely required to do so).\n\nAdditionally I'm personally a fan of type systems that make effects explicit, in particular which code can raise errors\/exceptions and which is pure (thus only prone to panics due to unrecoverable hardware\/OS constraints)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1631526087.005300",
        "client_msg_id": "b51d6405-e6f8-4f06-bc1f-247c2eaea843",
        "text": "As another side note, some languages go as far to avoid exceptions as returning 0 upon division by 0 (Pony). :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hX+Nv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As another side note, some languages go as far to avoid exceptions as returning 0 upon division by 0 (Pony). "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631533446.005900",
        "client_msg_id": "a5ca730f-3795-4fae-8e88-9e514f3679eb",
        "text": "<@UG0EL18H3> thanks for _Beyond Being There_! In particular, I've often thought we haven't done nearly enough with the idea of batching up communications.\n\n(Analogously, not nearly enough games have explored Diplomacy's idea of batching up moves.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lQs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " thanks for _Beyond Being There_! In particular, I've often thought we haven't done nearly enough with the idea of batching up communications.\n\n(Analogously, not nearly enough games have explored Diplomacy's idea of batching up moves.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1631533939.006100",
        "client_msg_id": "9c179cb4-ac99-4752-a7e0-79116390792a",
        "text": "Ouch. As far as I can see, that's never correct and often an unrecoverable mistake. Ideally, I'd want to special return values for integer division, one for 0\/0 and one for n\/0 with n != 0. If that's too much, make 0\/0 equal to one and have only one special return value.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hC8N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ouch. As far as I can see, that's never correct and often an unrecoverable mistake. Ideally, I'd want to special return values for integer division, one for 0\/0 and one for n\/0 with n != 0. If that's too much, make 0\/0 equal to one and have only one special return value."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1631551187.006400",
        "client_msg_id": "3d56ac05-5e1b-486b-870a-6c911dd02f45",
        "text": "Virtual Time is when I think about this spectrum the most. Most obvious in stream\/tick-based languages like ChucK and frameworks like MediaPipe. They're basically for-loops over time increments, but having no control over their passage—only the choice of what to do every time your code is awoken—makes time visceral to me in a way that the for-loop wouldn't. They tend to de-emphasize anything that happens out of the steady march of time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vLvw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Virtual Time is when I think about this spectrum the most. Most obvious in stream\/tick-based languages like ChucK and frameworks like MediaPipe. They're basically for-loops over time increments, but having no control over their passage—only the choice of what to do every time your code is awoken—makes time visceral to me in a way that the for-loop wouldn't. They tend to de-emphasize anything that happens out of the steady march of time."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Also, <@UC2A2ARPT>, is it a coincidence that you started this thread a day before Wolfram came at the same question from the physics side? <https:\/\/writings.stephenwolfram.com\/2021\/09\/even-beyond-physics-introducing-multicomputation-as-a-fourth-general-paradigm-for-theoretical-science\/>\n\n&gt; It’s common in this paradigm to discuss time—but normally it’s just treated as a variable in the equations, and one hopes that to find out what will happen at some arbitrary time one can just substitute the appropriate value for that variable into some formula derived by solving the equations. … In other words, that the passage of time can be an irreducible process, and it can take an irreducible amount of computational work to predict what a system will do at some particular time in the future.",
        "files": [
            {
                "id": "F02E290K5PY",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1tspx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ", is it a coincidence that you started this thread a day before Wolfram came at the same question from the physics side? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/writings.stephenwolfram.com\/2021\/09\/even-beyond-physics-introducing-multicomputation-as-a-fourth-general-paradigm-for-theoretical-science\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s common in this paradigm to discuss time—but normally it’s just treated as a variable in the equations, and one hopes that to find out what will happen at some arbitrary time one can just substitute the appropriate value for that variable into some formula derived by solving the equations. … In other words, that the passage of time can be an irreducible process, and it can take an irreducible amount of computational work to predict what a system will do at some particular time in the future."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1631551336.006600",
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "beers",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "UMVFWPZ36"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631560756.007400",
        "client_msg_id": "7b3ddba1-9ef0-43ff-beb7-0d0a4ce9022c",
        "text": "The table in this image here is _really_ interesting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GLr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The table in this image here is "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " interesting."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631561817.007600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1631561926.000000"
        },
        "client_msg_id": "5ff781db-2d17-4512-90ee-d097f0604daf",
        "text": "&gt; In the ordinary computational paradigm, time in effect progresses in a linear way, corresponding to the successive computation of the next state of the system from the previous one. But in the multicomputational paradigm there is no longer just a single thread of time; instead one can think of every possible path through the multiway system as defining a different interwoven thread of time.\nThis \"multicomputational\" paradigm offers an interesting aesthetic of time to consider. What would a programming system look\/feel like that not only gave you an explicit grasp on the passage of time in computation, but that allowed you to explore multiple\/all paths that diverge based on (say) _wiggle room_ in the determinism of the program.\n\nHere's a really dumb way to fumble this idea into something I could play with: What if in Hest, instead of a data point having a concrete value (say: 5), a data point could contain some sort of \"open\" value. As the \"open\" data point travelled through the program graph and encountered some conditional node, it would satisfy all sides of the conditional, and produce more \"open\" output points to travel along each outgoing path. Maybe the breadth of \"open\"ness for those output points could then be narrowed, so the \"open\" value would only represent something that could satisfy the branch it took (eg: if the conditional was \"&lt; 10\", then the point on one side now knows that it needs to be a number that's between -∞ and 9.9…, and the point on the other side knows it's either not a number or a number between 10 and ∞). You could zoom out and see how far each of those \"open\" points could travel before they were narrowed into oblivion. Would couple nicely with the idea that the points leave a visible trail as they travel that fades out after a while.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v5Jv",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the ordinary computational paradigm, time in effect progresses in a linear way, corresponding to the successive computation of the next state of the system from the previous one. But in the multicomputational paradigm there is no longer just a single thread of time; instead one can think of every possible path through the multiway system as defining a different interwoven thread of time."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis \"multicomputational\" paradigm offers an interesting aesthetic of time to consider. What would a programming system look\/feel like that not only gave you an explicit grasp on the passage of time in computation, but that allowed you to explore multiple\/all paths that diverge based on (say) "
                            },
                            {
                                "type": "text",
                                "text": "wiggle room",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the determinism of the program.\n\nHere's a really dumb way to fumble this idea into something I could play with: What if in Hest, instead of a data point having a concrete value (say: 5), a data point could contain some sort of \"open\" value. As the \"open\" data point travelled through the program graph and encountered some conditional node, it would satisfy all sides of the conditional, and produce more \"open\" output points to travel along each outgoing path. Maybe the breadth of \"open\"ness for those output points could then be narrowed, so the \"open\" value would only represent something that could satisfy the branch it took (eg: if the conditional was \"< 10\", then the point on one side now knows that it needs to be a number that's between -∞ and 9.9…, and the point on the other side knows it's either not a number or a number between 10 and ∞). You could zoom out and see how far each of those \"open\" points could travel before they were narrowed into oblivion. Would couple nicely with the idea that the points leave a visible trail as they travel that fades out after a while."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1631562687.008000",
        "client_msg_id": "fd5c2ad6-5ca8-4576-b661-dfd282d9a172",
        "text": "That’s a fully realized data flow graph",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dcr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s a fully realized data flow graph"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1631562933.008200",
        "client_msg_id": "185ff3e5-e796-4f42-807b-fb6a85810e14",
        "text": "It does seem like it would just be a data flow graph. I'm having trouble understanding the importance of \"time\" in this focus. Is it just the aspect of observability?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BVw5r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does seem like it would just be a data flow graph. I'm having trouble understanding the importance of \"time\" in this focus. Is it just the aspect of observability?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1631563010.008400",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1631563022.000000"
        },
        "client_msg_id": "ae453d74-923b-4908-abda-9f65143ec54a",
        "text": "(layered over static control flow analysis)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zq3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(layered over static control flow analysis)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1631565515.009000",
        "client_msg_id": "e0941b1c-4072-4c03-99bd-420fadb3052f",
        "text": "<@UC2A2ARPT> You may have read about it already, but if you take that execution model and rotate it 90º, you'd get Propagators \/ Truth Maintenance Systems, attempts by Sussman's students to do massively parallel computation in a future where \"we'll eventually be buying processors by the bushel and laying them down like concrete.\"\n\nIn Propagators, the computation to perform any particular answer is implemented redundantly by implementations of various speeds and qualities, and answers are represented as intervals that close as various branches finish. So computation doesn't _proceed_ so much as _settle_, which seems like an interesting angle for this thread's time theme. I haven't found any practical uses for this model in today's world, but it sure is fun to play in!\n\nAnyway, I learned about it from <https:\/\/www.youtube.com\/watch?v=O3tVctB_VSU|this lecture> which I summarized <http:\/\/alltom.com\/pages\/best-lectures\/#we-really-dont-know|here>. There's a paper on propagators <https:\/\/groups.csail.mit.edu\/mac\/users\/gjs\/propagators\/|here>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Gerry Sussman - We Really Don't Know How to Compute!",
                "title_link": "https:\/\/www.youtube.com\/watch?v=O3tVctB_VSU",
                "author_name": "Colin Reckons",
                "author_link": "https:\/\/www.youtube.com\/user\/colinmcd94",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/O3tVctB_VSU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Gerry Sussman - We Really Don't Know How to Compute!",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/O3tVctB_VSU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=O3tVctB_VSU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=O3tVctB_VSU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PR9+D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " You may have read about it already, but if you take that execution model and rotate it 90º, you'd get Propagators \/ Truth Maintenance Systems, attempts by Sussman's students to do massively parallel computation in a future where \"we'll eventually be buying processors by the bushel and laying them down like concrete.\"\n\nIn Propagators, the computation to perform any particular answer is implemented redundantly by implementations of various speeds and qualities, and answers are represented as intervals that close as various branches finish. So computation doesn't "
                            },
                            {
                                "type": "text",
                                "text": "proceed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " so much as "
                            },
                            {
                                "type": "text",
                                "text": "settle",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which seems like an interesting angle for this thread's time theme. I haven't found any practical uses for this model in today's world, but it sure is fun to play in!\n\nAnyway, I learned about it from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=O3tVctB_VSU",
                                "text": "this lecture"
                            },
                            {
                                "type": "text",
                                "text": " which I summarized "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/alltom.com\/pages\/best-lectures\/#we-really-dont-know",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": ". There's a paper on propagators "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/groups.csail.mit.edu\/mac\/users\/gjs\/propagators\/",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1631565650.009300",
        "client_msg_id": "54138ea6-8a68-461f-8aac-d9ea243ae36d",
        "text": "(Plenty of \"But that's just…\" <http:\/\/lambda-the-ultimate.org\/node\/3250|on LTU> already)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Ser",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Plenty of \"But that's just…\" "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lambda-the-ultimate.org\/node\/3250",
                                "text": "on LTU"
                            },
                            {
                                "type": "text",
                                "text": " already)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631578550.009800",
        "client_msg_id": "37df7987-e450-4865-9585-5cabe9f8c103",
        "text": "<@UEBG0NPDK> <@UFPPABQ7P> Ah, yes. Right. * eyes dart back and forth *\n\nWhat's the state of the art when it comes to visualizing data flow analysis?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XChfk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " Ah, yes. Right. * eyes dart back and forth *\n\nWhat's the state of the art when it comes to visualizing data flow analysis?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631578830.010300",
        "client_msg_id": "3f96228d-7905-4ec8-8d1e-dcd850e5dad0",
        "text": "<@UFPPABQ7P> Maybe the role of time isn't important. I don't know either. It's just sort of.. me looking at the toys and buckets I've got in my sandbox and wondering what happens if I build the sand castle on top of the Tonka truck.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yY4HQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " Maybe the role of time isn't important. I don't know either. It's just sort of.. me looking at the toys and buckets I've got in my sandbox and wondering what happens if I build the sand castle on top of the Tonka truck."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1631579119.010500",
        "client_msg_id": "8a8fee7e-4fff-4f82-9be1-fec589ca679f",
        "text": "Fair enough!\nIf we're just talking about anything and everything, then I'd suggest mashing up what you're thinking about with music and rhythm as means for recall and intuitive understanding. For example, when you study to music, both the material and the music being listened to enable recall in both directions. I have been really interested in generative music that follows me through my tasks in the day—switching energy levels between activities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uZRh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair enough!\nIf we're just talking about anything and everything, then I'd suggest mashing up what you're thinking about with music and rhythm as means for recall and intuitive understanding. For example, when you study to music, both the material and the music being listened to enable recall in both directions. I have been really interested in generative music that follows me through my tasks in the day—switching energy levels between activities."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631590915.011100",
        "client_msg_id": "c61f0241-ca40-4bcf-b039-8f92b1e39fde",
        "text": "More on the _feeling of time in execution:_\n\nOne thing that looping (especially while-loops) with side effects lets you do is repeatedly apply some process to the same piece of data, over and over.\n\nYou can't do that with map. Typically can't do that with reduce (depending on implementation). Vaguely recall that this is why transducers are stateful.\n\nIt's a kind of repetition that is inherently about transformation through time, since it's irreducibly successive.\n\nAlso, makes me think of using the descriptors _timeful\/timeless_ (compare with stateful\/stateless).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XcenO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More on the "
                            },
                            {
                                "type": "text",
                                "text": "feeling of time in execution:",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne thing that looping (especially while-loops) with side effects lets you do is repeatedly apply some process to the same piece of data, over and over.\n\nYou can't do that with map. Typically can't do that with reduce (depending on implementation). Vaguely recall that this is why transducers are stateful.\n\nIt's a kind of repetition that is inherently about transformation through time, since it's irreducibly successive.\n\nAlso, makes me think of using the descriptors "
                            },
                            {
                                "type": "text",
                                "text": "timeful\/timeless",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (compare with stateful\/stateless)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URLP9FWR3",
        "type": "message",
        "ts": "1631600828.011300",
        "client_msg_id": "aba7ea84-539f-4eb9-9372-a9433d26ce4b",
        "text": "How about papers by women?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0ef81b346e0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0ef81b346e05d3079b02932034de0196.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Alex",
            "real_name": "Alex",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "lxyxpx",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0d0b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about papers by women?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URLP9FWR3",
        "type": "message",
        "ts": "1631600882.011500",
        "client_msg_id": "404bf5b8-9427-476e-b815-6c782848ea81",
        "text": "If we only read stuff by people from a very particular background then that's really going to limit things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0ef81b346e0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0ef81b346e05d3079b02932034de0196.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Alex",
            "real_name": "Alex",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "lxyxpx",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "usC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we only read stuff by people from a very particular background then that's really going to limit things."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URLP9FWR3",
        "type": "message",
        "ts": "1631600927.011700",
        "client_msg_id": "ca03da71-7846-4ecd-aae0-2fdb32722f2e",
        "text": "Can we get to the stage that reeling of a long list of male influences is a bit embarrassing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0ef81b346e0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0ef81b346e05d3079b02932034de0196.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Alex",
            "real_name": "Alex",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "lxyxpx",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sojCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can we get to the stage that reeling of a long list of male influences is a bit embarrassing?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]