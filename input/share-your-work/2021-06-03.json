[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1622738819.038300",
        "client_msg_id": "89e20540-6cc0-4dd9-8b8a-1af0504d9069",
        "text": "Plain text is many things.. it may be useful to discuss the different aspects independently.\n\n1. Plain text as a storage encoding: In theory anything can be encoded as text (worst case you just base64 encode it) but I don't think it is useful to call such an object \"plain text\".\n2. Plain text as a UI: This is what I think we often mean when saying something is \"just text\". The UI consists of lines of characters. Often there are symbols and whitespace as special markers. Words and literals often mean something useful in the subject domain. We navigate this space with the cursor and probably many editor shortcuts.\n    a. Plain text diffs: This is an idea within text-as-UI. When comparing two objects, we compare the plain text representations. This means all encoding artifacts are diffed, whether useful or not (whitespace, order of lines, ...)\nI agree that you can always store stuff in plain text - even if you want to represent a graph with nodes, metadata, and links, you could figure out a JSON or XML encoding for it. However, if we're giving up #2 above, because all editing will be done via special projectional editors, how much value do we get in preserving #1? Sure you could check it into git and view the _line-by-line diffs_, but they would be meaningless, no? With some work the plain text encoding could be carefully crafted so the diffs are somewhat meaningful, but I feel this is a losing battle. Richer projections cannot be displayed by line diffing tools. Objects in the text file cannot be given identity (note many clever hacks such as patience-diff, that try and localize linear diffs to the correct _function definition_). So in the end the line diff might end up being less and less useful, perhaps even hold us back from implementing richer projections (\"oh that will ruin the line diff\")?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1622561472.032400",
        "parent_user_id": "U01TEJCSQ3Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zzg1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Plain text is many things.. it may be useful to discuss the different aspects independently.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Plain text as a storage encoding: In theory anything can be encoded as text (worst case you just base64 encode it) but I don't think it is useful to call such an object \"plain text\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Plain text as a UI: This is what I think we often mean when saying something is \"just text\". The UI consists of lines of characters. Often there are symbols and whitespace as special markers. Words and literals often mean something useful in the subject domain. We navigate this space with the cursor and probably many editor shortcuts."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Plain text diffs: This is an idea within text-as-UI. When comparing two objects, we compare the plain text representations. This means all encoding artifacts are diffed, whether useful or not (whitespace, order of lines, ...)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI agree that you can always store stuff in plain text - even if you want to represent a graph with nodes, metadata, and links, you could figure out a JSON or XML encoding for it. However, if we're giving up #2 above, because all editing will be done via special projectional editors, how much value do we get in preserving #1? Sure you could check it into git and view the "
                            },
                            {
                                "type": "text",
                                "text": "line-by-line diffs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but they would be meaningless, no? With some work the plain text encoding could be carefully crafted so the diffs are somewhat meaningful, but I feel this is a losing battle. Richer projections cannot be displayed by line diffing tools. Objects in the text file cannot be given identity (note many clever hacks such as patience-diff, that try and localize linear diffs to the correct "
                            },
                            {
                                "type": "text",
                                "text": "function definition",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). So in the end the line diff might end up being less and less useful, perhaps even hold us back from implementing richer projections (\"oh that will ruin the line diff\")?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U01TEJCSQ3Y",
                    "UPD5QQW81",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1622769994.043600",
        "client_msg_id": "68aa9606-e97d-429b-a135-74dee9ff7e8e",
        "text": "<https:\/\/futureofcoding.org\/episodes\/050|Episode 50> (:birthday:) of the Future of Coding podcast is out now.\n\nToday, the guest is <https:\/\/maryrosecook.com|Mary Rose Cook>, among whose thousand-and-one side projects you'll find <http:\/\/islalanguage.org|Isla> and <http:\/\/codelauren.com|Code Lauren>. Both are experimental programming environments with their own bespoke languages, focussed on learnability and visualization. In the case of Code Lauren, we also see another theme of Mary's work — taking the largely invisible processing done by compilers \/ interpreters and making it visible and interactive. Mary also made a totally awful game that I hate so much, but to find out what that is you'll just have to listen to the show (or read the largely unedited transcript — again, sorry Jack).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1622769994.043600",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1622881893.057500",
        "reply_users": [
            "UC2A2ARPT",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1622784780.054500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1622881893.057500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gHP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/050",
                                "text": "Episode 50"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "emoji",
                                "name": "birthday",
                                "unicode": "1f382"
                            },
                            {
                                "type": "text",
                                "text": ") of the Future of Coding podcast is out now.\n\nToday, the guest is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/maryrosecook.com",
                                "text": "Mary Rose Cook"
                            },
                            {
                                "type": "text",
                                "text": ", among whose thousand-and-one side projects you'll find "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/islalanguage.org",
                                "text": "Isla"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/codelauren.com",
                                "text": "Code Lauren"
                            },
                            {
                                "type": "text",
                                "text": ". Both are experimental programming environments with their own bespoke languages, focussed on learnability and visualization. In the case of Code Lauren, we also see another theme of Mary's work — taking the largely invisible processing done by compilers \/ interpreters and making it visible and interactive. Mary also made a totally awful game that I hate so much, but to find out what that is you'll just have to listen to the show (or read the largely unedited transcript — again, sorry Jack)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "USH01JEDQ",
                    "U015TBQ2091",
                    "UG0EL18H3",
                    "UJBAJNFLK",
                    "UA14TGLTC",
                    "U013ZLJARC7",
                    "UBN9AFS0N",
                    "U01GV0YCYAG",
                    "U01DX39SB33",
                    "U013866H7LY",
                    "UFPRPSA4S",
                    "UJ6LDMMN0"
                ],
                "count": 12
            },
            {
                "name": "heart",
                "users": [
                    "U01GV0YCYAG",
                    "UDQBTJ211",
                    "U01ULEWACPP",
                    "UG0EL18H3",
                    "U013866H7LY",
                    "UJBAJNFLK",
                    "UJ6LDMMN0",
                    "UMZPHLAAW"
                ],
                "count": 8
            },
            {
                "name": "headphones",
                "users": [
                    "U01ULEWACPP",
                    "U85HCL7JP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01TEJCSQ3Y",
        "type": "message",
        "ts": "1622770208.043900",
        "client_msg_id": "1efdd0bb-39b2-4350-8f70-4e894edfe81a",
        "text": "For sure. Diffs are a clear example a general issue. If you encode something to text, you also have to decide if you want the encoded text to be useful in some way that a binary file would not be. If you do choose that, we think you're prone to importing constraints from \"text land\" into whatever it is you're building. If you want to get away from the constraints imposed by text, you also give up corresponding aspects of text that make it convenient - they seem to go together.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdd15259e699",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/dd15259e699053f907ea7f5f474e81fc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Allen Webster",
            "display_name": "Allen Webster",
            "team": "T5TCAFTA9",
            "name": "yoyo4thdimention",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1622561472.032400",
        "parent_user_id": "U01TEJCSQ3Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KTo3o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For sure. Diffs are a clear example a general issue. If you encode something to text, you also have to decide if you want the encoded text to be useful in some way that a binary file would not be. If you do choose that, we think you're prone to importing constraints from \"text land\" into whatever it is you're building. If you want to get away from the constraints imposed by text, you also give up corresponding aspects of text that make it convenient - they seem to go together."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1622770790.054000",
        "client_msg_id": "046AD3CC-A94E-44F0-B16D-AE88772840D6",
        "text": "Just wanted to put out there that I was actually super excited about queuing when I first heard about hest and was a bit sad to see it considered a problem. Having bits of data wait for other bits to arrive and often be super useful and hard to express in normal languages, so I thought it would be a really nice abstraction to have by default.\n\nI do get that having to try to time everything could be problematic. And I get not wanting to have action at a distance. So I wanted to just offer a perhaps silly not thought through suggestion. If things did queue by default, you could have it so that a point arriving at a destination can have an effect. So maybe we have two edges converging and a point arriving along edge A turns edge B into a Hyper Faster edge. Basically, like it is sitting on some pressure plate that activates it. Or maybe it could instead start a timer that if not interrupted will send that point off to be destroyed. \n\nThese sorts of mechanisms are similar to techniques in more advanced red stone contraptions so, they are pretty grounded in physical reality which I take it is one thing you kind of want to keep. \n\nJust wanted to throw some ideas out there because I think that queuing can be super powerful and opens up so many different programming abilities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16eVA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just wanted to put out there that I was actually super excited about queuing when I first heard about hest and was a bit sad to see it considered a problem. Having bits of data wait for other bits to arrive and often be super useful and hard to express in normal languages, so I thought it would be a really nice abstraction to have by default.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI do get that having to try to time everything could be problematic. And I get not wanting to have action at a distance. So I wanted to just offer a perhaps silly not thought through suggestion. If things did queue by default, you could have it so that a point arriving at a destination can have an effect. So maybe we have two edges converging and a point arriving along edge A turns edge B into a Hyper Faster edge. Basically, like it is sitting on some pressure plate that activates it. Or maybe it could instead start a timer that if not interrupted will send that point off to be destroyed. \n\nThese sorts of mechanisms are similar to techniques in more advanced red stone contraptions so, they are pretty grounded in physical reality which I take it is one thing you kind of want to keep. \n\nJust wanted to throw some ideas out there because I think that queuing can be super powerful and opens up so many different programming abilities."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1622784780.054500",
        "client_msg_id": "ba5d63e4-5458-453d-a62f-7267d1c06d58",
        "text": "If you feel like signal boosting, here's <https:\/\/twitter.com\/spiralganglion\/status\/1400630621517455361|my tweet> about the episode :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1622769994.043600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XMwMS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you feel like signal boosting, here's "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1400630621517455361",
                                "text": "my tweet"
                            },
                            {
                                "type": "text",
                                "text": " about the episode :)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]