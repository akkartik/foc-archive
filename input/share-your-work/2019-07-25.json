[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564041432.068400",
        "client_msg_id": "a3e8ccc1-0b1f-4dcb-b11b-7aa58ffff529",
        "text": "JS is an intrinsically fragile language. It is incompatible with all the known research on proving programs correct, which is going on in Academia. I don't mind if it is JS under the hood in order to run in the browser; that is a current requirement (which may be relaxed in the future as WebASM evolves). The two main things that will distinguish the next generation of programming languages is 1) creating an ecosystem of interchangeable parts, and 2) drastically reducing the chance for error by the human programmer, which means both on the front side, by having the compiler make it very difficult to make an error, and also when an error does happen make it trivial to fix it.\n\nIf your code doesn't work, it doesn't matter how pretty\/fun it was to make. If nobody can understand your work, or you can't easily share it, then the world will continue to accumulate billions of lines of code. There is so much code today, yet it is very hard to use. So many dependencies crop up, that the final size of projects that one would think would be modest can be staggering.\n\nIn the regard of interchangeable parts, the software field is way behind the hardware guys. They put in chips all the time that have clear specifications on how they are to be wired up, and they have delivered more than a million to 1 price\/performance improvement over the last 25 years. Can software even claim 10:1  improvement over the last 25 years?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563882502.002000",
        "parent_user_id": "UEH5JQS0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7SG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JS is an intrinsically fragile language. It is incompatible with all the known research on proving programs correct, which is going on in Academia. I don't mind if it is JS under the hood in order to run in the browser; that is a current requirement (which may be relaxed in the future as WebASM evolves). The two main things that will distinguish the next generation of programming languages is 1) creating an ecosystem of interchangeable parts, and 2) drastically reducing the chance for error by the human programmer, which means both on the front side, by having the compiler make it very difficult to make an error, and also when an error does happen make it trivial to fix it.\n\nIf your code doesn't work, it doesn't matter how pretty\/fun it was to make. If nobody can understand your work, or you can't easily share it, then the world will continue to accumulate billions of lines of code. There is so much code today, yet it is very hard to use. So many dependencies crop up, that the final size of projects that one would think would be modest can be staggering.\n\nIn the regard of interchangeable parts, the software field is way behind the hardware guys. They put in chips all the time that have clear specifications on how they are to be wired up, and they have delivered more than a million to 1 price\/performance improvement over the last 25 years. Can software even claim 10:1  improvement over the last 25 years?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFS53UWE5",
        "type": "message",
        "ts": "1564067734.068700",
        "client_msg_id": "833af4da-702c-4920-91bc-40c7a149005b",
        "text": "If you come to strange loop this year I'll be giving a talk on the history of RGB and color spaces! :) Not PL related, but still quite interesting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a88832bbbfe7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-12\/1359700849458_a88832bbbfe7c26df530_72.jpg",
            "first_name": "John",
            "real_name": "John Austin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kleptine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563986156.058500",
        "parent_user_id": "UL3EE9WR1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EWx0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you come to strange loop this year I'll be giving a talk on the history of RGB and color spaces! :) Not PL related, but still quite interesting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1564068649.068900",
        "client_msg_id": "41f01b88-7600-4040-b6af-866363927bbb",
        "text": "I’ll try and find some things later..do you have a contact outside this slack? An email might be more appropriate for editing suggestions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563892209.006100",
        "parent_user_id": "UKFNXF0F9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Sd7z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ll try and find some things later..do you have a contact outside this slack? An email might be more appropriate for editing suggestions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1564068906.069100",
        "text": "<mailto:taowen@gmail.com|taowen@gmail.com>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563892209.006100",
        "parent_user_id": "UKFNXF0F9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "43Zy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "mailto:taowen@gmail.com",
                                "text": "taowen@gmail.com"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Hey, I've been working on a language to specify serverless systems and I just started playing around with making it visual.  Would love some feedback on these mocks.  The goal of Strat is to specify how your code packages talk to each other in the cloud without specifying infrastructure details, then the Strat compiler builds out your infra for you.  The textual representation (which would be isomorphic with the visual one) can be seen here: <https:\/\/strat.world>.  The biggest delta between Strat and other visual languages is Strat doesn't care about computation; it lets other programming languages handle that domain.",
        "files": [
            {
                "id": "FLU8MTS5C",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UJKC8B0QN",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dyZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, I've been working on a language to specify serverless systems and I just started playing around with making it visual.  Would love some feedback on these mocks.  The goal of Strat is to specify how your code packages talk to each other in the cloud without specifying infrastructure details, then the Strat compiler builds out your infra for you.  The textual representation (which would be isomorphic with the visual one) can be seen here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/strat.world"
                            },
                            {
                                "type": "text",
                                "text": ".  The biggest delta between Strat and other visual languages is Strat doesn't care about computation; it lets other programming languages handle that domain."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1564075369.071100",
        "edited": {
            "user": "UJKC8B0QN",
            "ts": "1564075418.000000"
        },
        "client_msg_id": "73c605fe-5875-4a57-9e13-d23483a09d78",
        "thread_ts": "1564075369.071100",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1577856728.347600",
        "reply_users": [
            "UC2A2ARPT",
            "UFLN9JFRT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1564119216.073000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564119415.073200"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1577856728.347600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564077685.071600",
        "client_msg_id": "8ec2e481-bc7e-4288-a41e-5fa68e298830",
        "text": "<@UEQ6M68H0> — Let's move the conversation about JS to <#C5T9GPWFL|thinking-together>, and save this thread for discussion of Nodes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563882502.002000",
        "parent_user_id": "UEH5JQS0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nehsx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " — Let's move the conversation about JS to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ", and save this thread for discussion of Nodes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564114538.071800",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1564114715.000000"
        },
        "client_msg_id": "3802afac-08bd-429b-b002-c6e05346b9b7",
        "text": "<http:\/\/nodes.io|nodes.io> has done a fantastic job of integrating many underlying technologies into a graphical format. This is to be greatly commended. Compared to another language like Maraca, which cannot do 12 \/ -3 without getting a compiler error (an indication of its very early stage of completion), <http:\/\/nodes.io|nodes.io> has been used to make things for paying clients, which is a trial by fire that is a sign of maturity and good coverage. My criticism of using JS as its user facing language is specific to <http:\/\/nodes.io|nodes.io>, and not a general condemnation of JS. JS is mandatory in 99% of web work, and everyone is either using it directly or transpiling to it. That is the commercial reality of 2019. In coming years that may change of course.  I think the <http:\/\/nodes.io|nodes.io> product needs a better user facing language else the project will be very blunted in its success. If you put a whole ton of frameworks and graphical aids on top of JS, are you really fixing much? You will be pinned down by the OOP model that is intrinsic to JS. People are using closures constantly in JS nowadays, how on earth are you going to represent that in the data model? Closures are deadly for data flow work because now you have code that has a bundled of data specific to it, and the whole closure is on object on the heap, which is neither code nor data but some fusion. The more fancy concepts you use from an OOP language, the harder it gets to represent it graphically, because the purity of your data \/ code separation is being muddled. And i haven't mentioned dynamic code which some people like to do, where you build a string of JS and then execute it... there are a lot of people advocating using JS as if it was LISP.  I would say the only major flaw in Filemaker Pro is its lousy user facing language, which is archaic and very clumsy, almost back to HyperTalk in age. The rest of filemaker is fantastic. So the scripting language one picks is incredibly important. Syntax does matter.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563882502.002000",
        "parent_user_id": "UEH5JQS0J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LXc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            },
                            {
                                "type": "text",
                                "text": " has done a fantastic job of integrating many underlying technologies into a graphical format. This is to be greatly commended. Compared to another language like Maraca, which cannot do 12 \/ -3 without getting a compiler error (an indication of its very early stage of completion), "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            },
                            {
                                "type": "text",
                                "text": " has been used to make things for paying clients, which is a trial by fire that is a sign of maturity and good coverage. My criticism of using JS as its user facing language is specific to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            },
                            {
                                "type": "text",
                                "text": ", and not a general condemnation of JS. JS is mandatory in 99% of web work, and everyone is either using it directly or transpiling to it. That is the commercial reality of 2019. In coming years that may change of course.  I think the "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nodes.io",
                                "text": "nodes.io"
                            },
                            {
                                "type": "text",
                                "text": " product needs a better user facing language else the project will be very blunted in its success. If you put a whole ton of frameworks and graphical aids on top of JS, are you really fixing much? You will be pinned down by the OOP model that is intrinsic to JS. People are using closures constantly in JS nowadays, how on earth are you going to represent that in the data model? Closures are deadly for data flow work because now you have code that has a bundled of data specific to it, and the whole closure is on object on the heap, which is neither code nor data but some fusion. The more fancy concepts you use from an OOP language, the harder it gets to represent it graphically, because the purity of your data \/ code separation is being muddled. And i haven't mentioned dynamic code which some people like to do, where you build a string of JS and then execute it... there are a lot of people advocating using JS as if it was LISP.  I would say the only major flaw in Filemaker Pro is its lousy user facing language, which is archaic and very clumsy, almost back to HyperTalk in age. The rest of filemaker is fantastic. So the scripting language one picks is incredibly important. Syntax does matter."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564114905.072900",
        "client_msg_id": "93641ce4-7b01-439a-915e-ca351694286f",
        "text": "seems kinda neat, the Dark project is about server side stuff, be sure to see what they are up to. Tools like this really simplify what can be a daunting configuration task.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tCx55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "seems kinda neat, the Dark project is about server side stuff, be sure to see what they are up to. Tools like this really simplify what can be a daunting configuration task."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564119216.073000",
        "client_msg_id": "217a255e-91b2-4ea2-ae15-36f08eca1456",
        "text": "It's hard to offer much GUI advice just based on this one picture. You're using color to keep things differentiated, which is nice. It looks like things are paused so that you can inspect data flowing over the wire, which is great.\n\nSo much of what makes or breaks a visual programming tool is in the moment-to-moment interaction, so be sure you leave yourself plenty of time and energy to invest in that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564075369.071100",
        "parent_user_id": "UJKC8B0QN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wHc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's hard to offer much GUI advice just based on this one picture. You're using color to keep things differentiated, which is nice. It looks like things are paused so that you can inspect data flowing over the wire, which is great.\n\nSo much of what makes or breaks a visual programming tool is in the moment-to-moment interaction, so be sure you leave yourself plenty of time and energy to invest in that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564119415.073200",
        "client_msg_id": "167bab93-76f2-4ebb-acd1-b7338e7a3dbf",
        "text": "I would also suggest considering how things might look in the worst case scenario. With only 9 nodes, arranged in 3 discrete flows, things are clear and simple. But what happens when you need to wire up something far more complex? How do you debug the system when something goes wrong? What does it look like when your text fields \/ labels are much longer? How easy\/fluid is it to select multiple things and move them around? How do people learn the GUI? These are just some of the things that will need to be answered as you advance the design. Once those questions are answered, and you've prototyped or built something based on that thinking, you should share it here for more feedback :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564075369.071100",
        "parent_user_id": "UJKC8B0QN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+TDYi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would also suggest considering how things might look in the worst case scenario. With only 9 nodes, arranged in 3 discrete flows, things are clear and simple. But what happens when you need to wire up something far more complex? How do you debug the system when something goes wrong? What does it look like when your text fields \/ labels are much longer? How easy\/fluid is it to select multiple things and move them around? How do people learn the GUI? These are just some of the things that will need to be answered as you advance the design. Once those questions are answered, and you've prototyped or built something based on that thinking, you should share it here for more feedback "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    }
]