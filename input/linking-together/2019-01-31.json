[
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1548929974.132900",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1548930125.000000"
        },
        "client_msg_id": "8800939f-942d-421c-b536-634c0337c6dd",
        "text": "I don't agree :smile:\n\nIMHO 2d node-edge diagrams are considerably more structurally constrained than text. It's counter intuitive because moving things around a canvas feels like freedom but \"visual connectivity\" and \"spatial layout\", are actually false additional constraints on the abstract thought-stuff that is programming. It is these constraints that cause hairball structures that are simple to understand in text.\n\nIn the general case, node-edge diagrams of \"the entire truth\" of any system rarely work. Instead, you need a narrow goal of what you want to communicate and then pick and choose the relationships to show. A diagram has to be some kind of lie to be effective.\n\n3d adds another dimension that can reduce some types of ambiguity like intersections but it's still adding false constraints i.e. line of sight and distance and the necessity that you now must move through the scene to comprehend it because our perception is still limited to a 2d projection with a touch of depth perception.\n\nIMHO where vpl goes wrong is thinking that a single visual metaphor can be the ground-truth and as versatile as text. Instead we should be thinking in terms of multiple task specific views. Think of how we design buildings, multiple views at different abstractions, different 2d projections, different content e.g. wiring diagrams, sewage diagrams, 3d renders, fly-throughs, physical models etc. Trying to do all the tasks through one visual metaphor would be brutal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Wx4K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't agree "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIMHO 2d node-edge diagrams are considerably more structurally constrained than text. It's counter intuitive because moving things around a canvas feels like freedom but \"visual connectivity\" and \"spatial layout\", are actually false additional constraints on the abstract thought-stuff that is programming. It is these constraints that cause hairball structures that are simple to understand in text.\n\nIn the general case, node-edge diagrams of \"the entire truth\" of any system rarely work. Instead, you need a narrow goal of what you want to communicate and then pick and choose the relationships to show. A diagram has to be some kind of lie to be effective.\n\n3d adds another dimension that can reduce some types of ambiguity like intersections but it's still adding false constraints i.e. line of sight and distance and the necessity that you now must move through the scene to comprehend it because our perception is still limited to a 2d projection with a touch of depth perception.\n\nIMHO where vpl goes wrong is thinking that a single visual metaphor can be the ground-truth and as versatile as text. Instead we should be thinking in terms of multiple task specific views. Think of how we design buildings, multiple views at different abstractions, different 2d projections, different content e.g. wiring diagrams, sewage diagrams, 3d renders, fly-throughs, physical models etc. Trying to do all the tasks through one visual metaphor would be brutal."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1548944428.135500",
        "client_msg_id": "28A70E6D-CC6A-4387-BEE7-1E767D35D927",
        "text": "The analogy of multiple diagrams for buildings is cool <@UFD2JRE58> . Have you thought of some specific diagrams for code? Or what would mean wiring\/sewage\/etc for code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mCE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The analogy of multiple diagrams for buildings is cool "
                            },
                            {
                                "type": "user",
                                "user_id": "UFD2JRE58"
                            },
                            {
                                "type": "text",
                                "text": " . Have you thought of some specific diagrams for code? Or what would mean wiring\/sewage\/etc for code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1548944991.136100",
        "client_msg_id": "85984200-76c7-4573-bfca-3e99cc80f5f0",
        "text": "The additional diagrams I get a lot of value from are call-graphs. This includes both from static analysis and run-time tracing (they can be very different in practice). I'd much prefer to work with text but when I want to understand how a function is used by different high level processes then they are vital.\n\nI have actually built a tool for this for C# that I'm kind of getting around to releasing. I would normally use doxygen to generate call-graphs but it hasn't kept pace with language features. What I also wanted was some interactivity to filter out parts of the graph and focus on what I wanted.\n\nThe call-graph for a parser I was working on...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p8vrB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The additional diagrams I get a lot of value from are call-graphs. This includes both from static analysis and run-time tracing (they can be very different in practice). I'd much prefer to work with text but when I want to understand how a function is used by different high level processes then they are vital.\n\nI have actually built a tool for this for C# that I'm kind of getting around to releasing. I would normally use doxygen to generate call-graphs but it hasn't kept pace with language features. What I also wanted was some interactivity to filter out parts of the graph and focus on what I wanted.\n\nThe call-graph for a parser I was working on..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1548960515.136400",
        "client_msg_id": "25f02f7f-4313-43bd-b730-a527726ac155",
        "text": "&gt; Think of how we design buildings, multiple views at different abstractions, different 2d projections, different content e.g. wiring diagrams, sewage diagrams, 3d renders, fly-throughs, physical models etc. Trying to do all the tasks through one visual metaphor would be brutal.\n\nYeah, this is pretty much the train I'm on. I take this sort of stuff as a given, because I work for a company that teaches industrial systems troubleshooting. I've been bathing in hydraulic schematics, process diagrams, ladder logic, and their ilk for over a decade now. It's not uncommon to come across a binder full of schematics that is &gt;6 inches deep, many thousands of diagrams, all for one machine. Those paper artifacts are legacy — these days, we have really, really good software tools for working with fiendishly complex suites of schematics. Looking at that world, and then looking at what we call \"visual\" programming, just makes me laugh with sadness.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OjVf",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Think of how we design buildings, multiple views at different abstractions, different 2d projections, different content e.g. wiring diagrams, sewage diagrams, 3d renders, fly-throughs, physical models etc. Trying to do all the tasks through one visual metaphor would be brutal."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYeah, this is pretty much the train I'm on. I take this sort of stuff as a given, because I work for a company that teaches industrial systems troubleshooting. I've been bathing in hydraulic schematics, process diagrams, ladder logic, and their ilk for over a decade now. It's not uncommon to come across a binder full of schematics that is >6 inches deep, many thousands of diagrams, all for one machine. Those paper artifacts are legacy — these days, we have really, really good software tools for working with fiendishly complex suites of schematics. Looking at that world, and then looking at what we call \"visual\" programming, just makes me laugh with sadness."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1548960989.136600",
        "client_msg_id": "aa1e4c50-be06-4004-9634-136a60e70760",
        "text": "In addition to the \"what the visual code looks like\" angle, which <@UFD2JRE58> :100:% nailed, there's the \"what it feels like to draw visual code\". I think video games and 3d modelling tools and DAWs (music production tools) set the bar for this stuff. Any visual language that doesn't let you feel like you're _flying_ is probably off the mark.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O4IJr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In addition to the \"what the visual code looks like\" angle, which "
                            },
                            {
                                "type": "user",
                                "user_id": "UFD2JRE58"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "100",
                                "unicode": "1f4af"
                            },
                            {
                                "type": "text",
                                "text": "% nailed, there's the \"what it feels like to draw visual code\". I think video games and 3d modelling tools and DAWs (music production tools) set the bar for this stuff. Any visual language that doesn't let you feel like you're "
                            },
                            {
                                "type": "text",
                                "text": "flying",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is probably off the mark."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1548961158.136800",
        "client_msg_id": "2f988057-a4bb-4930-8ced-25c3902672a9",
        "text": "Cool <@UFD2JRE58>! please share your tool when is ready or sharing the progress would be great to see the kind of diagrams that will be available",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548773912.119400",
        "parent_user_id": "UFD2JRE58",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yDHG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool "
                            },
                            {
                                "type": "user",
                                "user_id": "UFD2JRE58"
                            },
                            {
                                "type": "text",
                                "text": "! please share your tool when is ready or sharing the progress would be great to see the kind of diagrams that will be available"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFD2JRE58"
                ],
                "count": 1
            }
        ]
    }
]