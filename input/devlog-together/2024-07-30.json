[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722394157.118809",
        "client_msg_id": "7316de76-59a7-4e99-aded-c8e8d17b8959",
        "text": "I’m in the process of writing a transpiler that spits out Drawware 0D kernel code in various languages (like Python, Lisp, JS, WASM, etc.) from a higher-than-HLL. I’m using a very simple “circuit” to regression test (Larson Scanner, as seen on T.V. Knight Rider). Current status and “working paper”: <https:\/\/programmingsimplicity.substack.com\/p\/2024-07-30-diagram-compiler-status?r=1egdky>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722394157.118809",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1722449832.884979",
        "reply_users": [
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1722396141.376109"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1722449832.884979"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e0ca86d-7f69-46c1-8836-6052d14ab89b_1094x501.png",
                "image_width": 1094,
                "image_height": 501,
                "image_bytes": 38230,
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/2024-07-30-diagram-compiler-status?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/2024-07-30-diagram-compiler-status?r=1egdky",
                "fallback": "2024-07-30-Diagram Compiler Status",
                "text": "This project creates a working “Larson scanner” (seen on the T.V.",
                "title": "2024-07-30-Diagram Compiler Status",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/2024-07-30-diagram-compiler-status?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9tGXW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m in the process of writing a transpiler that spits out Drawware 0D kernel code in various languages (like Python, Lisp, JS, WASM, etc.) from a higher-than-HLL. I’m using a very simple “circuit” to regression test (Larson Scanner, as seen on T.V. Knight Rider). Current status and “working paper”: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/2024-07-30-diagram-compiler-status?r=1egdky"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "UJBAJNFLK",
                    "UFEQUBNNT",
                    "U02E4DAQGSZ"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1722396141.376109",
        "client_msg_id": "993c39e6-12a8-4796-b592-40844546b42d",
        "text": "I _think_ that this might be interesting to FoC’ers because: it demonstrates various techniques (t2t, 0D, feedback with queues, etc.) that aren’t common in Functional Programming. These _techniques_ might inspire ideas of what is possible in the FoC realm, beyond the usual more-programming-using-only-the-function-based-paradigm. I, also, believe that VPLs and DPLs are ignored for at least 2 reasons: (1) it’s believed to be very hard to parse diagrams, and, (2) text says it all, what more could there be???. This progress report quietly attacks both mis-beliefs. (1) Parsing diagrams - in 2024 - is sooo easy that even someone like me can do it. (2) Feedback loops and structured message-passing produce efficient ways to express certain idioms that can’t be expressed - easily - in textual form, hence, are roundly avoided, hence, causing inadequate simplicity of design in certain problem domains.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722394157.118809",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ul6gT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "text",
                                "text": "think",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that this might be interesting to FoC’ers because: it demonstrates various techniques (t2t, 0D, feedback with queues, etc.) that aren’t common in Functional Programming. These "
                            },
                            {
                                "type": "text",
                                "text": "techniques",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might inspire ideas of what is possible in the FoC realm, beyond the usual more-programming-using-only-the-function-based-paradigm. I, also, believe that VPLs and DPLs are ignored for at least 2 reasons: (1) it’s believed to be very hard to parse diagrams, and, (2) text says it all, what more could there be???. This progress report quietly attacks both mis-beliefs. (1) Parsing diagrams - in 2024 - is sooo easy that even someone like me can do it. (2) Feedback loops and structured message-passing produce efficient ways to express certain idioms that can’t be expressed - easily - in textual form, hence, are roundly avoided, hence, causing inadequate simplicity of design in certain problem domains."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]