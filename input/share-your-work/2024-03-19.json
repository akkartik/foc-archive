[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1710840011.424789",
        "client_msg_id": "4d1f8336-7dcd-4793-8aee-ff686fcd1a9f",
        "text": "Thought process in quick steps (glad to elaborate):\n1. `z^2+c` is the heart of a Mandelbrot set, so where is it?  Blue box.\n2. Click on it.  Click Edit Composition.  Input on left.  Output on right.  Tangle in the middle from product being intrinsically two dimensional.  So wires coming in and wires coming out is always going to overlap.  Doesn't need to be as much but...\n3. Why a \"2\" slider?  Oh, instead of summing two xyi terms.  Fine.  How do we iterate?  Click Exit edit composition.\n4. Hmm.  Z goes in and Z comes out.  Um, okay?  What's this \"&gt;\" node.  Red \"Break\".  This grey box is a loop.  Repeated 1024 times.\n5. What is `$a &gt; 511.0 ? 0.0 : $a - log2(log2(dot($b,$b))) + 4.0`?  I wouldn't exactly call whatever comes out of that Iterations.  Where does it go?\n6. Through `0.5 + 0.5*cos( 3.0 + $a*0.15 + vec3(0.0,0.6,1.0))`.  And that cycles the colors somehow to the output.  Can I attach a slider to input b?\n7. Doesn't seem so.  After making a constant and dragging an arrow over, my cursor turns to a not allowed state.\n8. And then going back to the top we define some vector variables.  With the scene position, scroll wheel state, and x\/y coordinate (UV) being accounted for.  I see.  \n9. It is a bit funny that we have both arrows and named variables for wiring things together.\n10. Likewise, we have both diagrams and symbolic expressions.  Reminded a bit of Max.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710665671.072109",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VSEtl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thought process in quick steps (glad to elaborate):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "z^2+c",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is the heart of a Mandelbrot set, so where is it?  Blue box."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Click on it.  Click Edit Composition.  Input on left.  Output on right.  Tangle in the middle from product being intrinsically two dimensional.  So wires coming in and wires coming out is always going to overlap.  Doesn't need to be as much but..."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Why a \"2\" slider?  Oh, instead of summing two xyi terms.  Fine.  How do we iterate?  Click Exit edit composition."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Hmm.  Z goes in and Z comes out.  Um, okay?  What's this \">\" node.  Red \"Break\".  This grey box is a loop.  Repeated 1024 times."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "$a > 511.0 ? 0.0 : $a - log2(log2(dot($b,$b))) + 4.0",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "?  I wouldn't exactly call whatever comes out of that Iterations.  Where does it go?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Through "
                                    },
                                    {
                                        "type": "text",
                                        "text": "0.5 + 0.5*cos( 3.0 + $a*0.15 + vec3(0.0,0.6,1.0))",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ".  And that cycles the colors somehow to the output.  Can I attach a slider to input b?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Doesn't seem so.  After making a constant and dragging an arrow over, my cursor turns to a not allowed state."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "And then going back to the top we define some vector variables.  With the scene position, scroll wheel state, and x\/y coordinate (UV) being accounted for.  I see.  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It is a bit funny that we have both arrows and named variables for wiring things together."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Likewise, we have both diagrams and symbolic expressions.  Reminded a bit of Max."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U0123H7JRDM",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1710843062.211859",
        "client_msg_id": "19C20F8D-577C-4F86-BFE8-22EA5A4283B9",
        "text": "Thanks for your feedback, I'll provide answers later today\/evening",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710665671.072109",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kIDuE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for your feedback, I'll provide answers later today\/evening"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1710865678.512349",
        "client_msg_id": "47c863a8-c908-4065-b158-a0852dba9790",
        "text": "I collected and summarized the answers to my question about programming-adjacent games:\n\n<https:\/\/marianoguerra.org\/posts\/playing-with-code-programming-adjacent-games\/|Playing with Code: Programming-Adjacent Games>\n\nCorrections welcome!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710865678.512349",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1718398622.332849",
        "reply_users": [
            "U055WH5D8DQ",
            "UBN9AFS0N",
            "U05M5A8E0NT",
            "U078ANJN7V2"
        ],
        "replies": [
            {
                "user": "U055WH5D8DQ",
                "ts": "1710924005.557469"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1710936411.475169"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713884282.700629"
            },
            {
                "user": "U078ANJN7V2",
                "ts": "1718398622.332849"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/marianoguerra.org\/posts\/playing-with-code-programming-adjacent-games\/",
                "service_icon": "https:\/\/marianoguerra.org\/favicon.ico",
                "ts": 1710860167,
                "id": 1,
                "original_url": "https:\/\/marianoguerra.org\/posts\/playing-with-code-programming-adjacent-games\/",
                "fallback": "Mariano Guerra's Log: Playing with Code: Programming-Adjacent Games",
                "text": "Some weeks ago I was working on some explorable explanation for binary operators and I started thinking if there was any interesting work on making programming interactive, interesting, even fun.\nI as",
                "title": "Playing with Code: Programming-Adjacent Games",
                "title_link": "https:\/\/marianoguerra.org\/posts\/playing-with-code-programming-adjacent-games\/",
                "service_name": "Mariano Guerra's Log"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+kClT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I collected and summarized the answers to my question about programming-adjacent games:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/marianoguerra.org\/posts\/playing-with-code-programming-adjacent-games\/",
                                "text": "Playing with Code: Programming-Adjacent Games"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCorrections welcome!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "UMHG81CBH",
                    "U049T6YAAGG",
                    "UA14TGLTC",
                    "UMV4B97GT",
                    "U06BUK2M2RH",
                    "U018S42NMMM",
                    "US370TRJA",
                    "U05M5A8E0NT"
                ],
                "count": 8
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "U013ZLJARC7",
                    "U06BUK2M2RH"
                ],
                "count": 4
            },
            {
                "name": "bow",
                "users": [
                    "US370TRJA"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "For those situations where there's a need to automatically generate a unique color for each item in a set, I've figured out a formula that yields a good distribution based on the oklch color space. The attached document has some pretty infographics.\n\nYou can also see the <https:\/\/typst.app\/project\/roIpfK0qpTfEMeHW-rIfpK|source code of the document> in Typst. Typst is already the future of programming.",
        "files": [
            {
                "id": "F06QPL5TLRF",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U04SAJZ155H",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bfMK8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For those situations where there's a need to automatically generate a unique color for each item in a set, I've figured out a formula that yields a good distribution based on the oklch color space. The attached document has some pretty infographics.\n\nYou can also see the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/typst.app\/project\/roIpfK0qpTfEMeHW-rIfpK",
                                "text": "source code of the document"
                            },
                            {
                                "type": "text",
                                "text": " in Typst. Typst is already the future of programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1710870944.759009",
        "client_msg_id": "71ea133c-1e94-428c-a116-3b1330a9b47d",
        "thread_ts": "1710870944.759009",
        "reply_count": 8,
        "reply_users_count": 5,
        "latest_reply": "1716755345.217119",
        "reply_users": [
            "URKQXRCAC",
            "U05597GCDDK",
            "U04SAJZ155H",
            "UBKNXPBAB",
            "U02QC0PPER3"
        ],
        "replies": [
            {
                "user": "URKQXRCAC",
                "ts": "1710882036.642629"
            },
            {
                "user": "U05597GCDDK",
                "ts": "1710893291.552999"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710895540.679229"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710895960.422439"
            },
            {
                "user": "U05597GCDDK",
                "ts": "1710899479.373949"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1710911140.082209"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710942448.874089"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1716755345.217119"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1710871309.855659",
        "client_msg_id": "8df72ef3-badf-4b89-9b61-e90296257a90",
        "text": "Now a little analysis now that the thoughts have had a little time to distill.\n\nRegarding (10): Sometimes expressions, especially math heavy ones are good, other times not.  The real sweet spot is easily switching between formats.  Being able, for example, to get a slider for a constant.   Or fold something unwieldy like the product of imaginary numbers.\n\nAlso, consider allowing for vectorized computations similar to how shaders do it.  Feed many wires in, get many wires out.\n\nRegarding (9): Names are best for things that you want to just sort of be in the air around you.\n\nRegarding (4): Instead of iterated loops, you can get the same effect by being able to nest a copy of a box within itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710665671.072109",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wkPwJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now a little analysis now that the thoughts have had a little time to distill.\n\nRegarding (10): Sometimes expressions, especially math heavy ones are good, other times not.  The real sweet spot is easily switching between formats.  Being able, for example, to get a slider for a constant.   Or fold something unwieldy like the product of imaginary numbers.\n\nAlso, consider allowing for vectorized computations similar to how shaders do it.  Feed many wires in, get many wires out.\n\nRegarding (9): Names are best for things that you want to just sort of be in the air around you.\n\nRegarding (4): Instead of iterated loops, you can get the same effect by being able to nest a copy of a box within itself."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1710875917.516499",
        "edited": {
            "user": "U0123H7JRDM",
            "ts": "1710875945.000000"
        },
        "client_msg_id": "25E30600-129C-48ED-BB5D-19A7F3743863",
        "text": "1.blue boxes are \"compositions\" , which are reusable groups of nodes. These can be made from scratch or by selecting multiple node using shift and drag and press the \"create composition\" button. \n   \n2. I am not the best at Math, and I am thinking about finding a different way of representing such a calculation. Writing it in code is more clear I think than all the lines :-). How can the calculation itself be simplified?\n   \n3. The itertion is done by the for-node and the break-node is used to stop iterating depending on some condition. The diamond node with the \">\" is the condition node together with the container which it connects to. These containers need better visual representations to make more clear what they are doing (the for-node and condition containers).\n4. yes, see the above. I don't understand you last comment regarding nesting nodes within themselves. Do you mean using recursion instead of loops?\n   \n5. (and 6&7) This is taken from <https:\/\/iquilezles.org\/articles\/msetsmooth\/|https:\/\/iquilezles.org\/articles\/msetsmooth\/> .. it is a smoother iteration count for coloring the mandelbrot set. I've used a \"custom glsl expression\"-node as a hacky escape hatch. With this you can enter raw glsl code where $a and $b reference the input thumbs. Thumb $a expects a float and thumb $b expects a vec2. I want to make it more clear what type a thumb is expecting and also be able to specify the thumbs for this custom node-type (and others as well). Because $b is a vec2 you can't connect a value-node to it. I've changed the example on codeflowcanvas so that compositions are used instead of custom-nodes. Now the params from the calculations can be changed on the fly. \nThe value-node-type has editable min\/step\/max parameters by the way.. if you click the numbers below the sliders you can edit them.\n   \n8. true, I haven't find a good way to working around the need of named variables. If nodes needed to be connected to variables with wires this would become a big mess I think. In my other flow-type (the \"flow-based-programming inspired\"-flow) there's a button which shows the hidden connections from nodes which reference variables. I haven't had a chance to add that functionality in the gl-flow as well. It could help I think.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710665671.072109",
        "parent_user_id": "U0123H7JRDM",
        "attachments": [
            {
                "image_url": "https:\/\/iquilezles.org\/logo.jpg",
                "image_width": 1920,
                "image_height": 1080,
                "image_bytes": 350132,
                "from_url": "https:\/\/iquilezles.org\/articles\/msetsmooth\/",
                "service_icon": "https:\/\/iquilezles.org\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/iquilezles.org\/articles\/msetsmooth\/",
                "fallback": "Inigo Quilez",
                "text": "Articles on computer graphics, math and art",
                "title": "Inigo Quilez",
                "title_link": "https:\/\/iquilezles.org\/articles\/msetsmooth\/",
                "service_name": "iquilezles.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fBV8L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1.blue boxes are \"compositions\" , which are reusable groups of nodes. These can be made from scratch or by selecting multiple node using shift and drag and press the \"create composition\" button. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "   \n2. I am not the best at Math, and I am thinking about finding a different way of representing such a calculation. Writing it in code is more clear I think than all the lines :-). How can the calculation itself be simplified?\n   \n3. The itertion is done by the for-node and the break-node is used to stop iterating depending on some condition. The diamond node with the \">\" is the condition node together with the container which it connects to. These containers need better visual representations to make more clear what they are doing (the for-node and condition containers).\n4. yes, see the above. I don't understand you last comment regarding nesting nodes within themselves. Do you mean using recursion instead of loops?\n   \n5. (and 6&7) This is taken from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/iquilezles.org\/articles\/msetsmooth\/",
                                "text": "https:\/\/iquilezles.org\/articles\/msetsmooth\/"
                            },
                            {
                                "type": "text",
                                "text": " .. it is a smoother iteration count for coloring the mandelbrot set. I've used a \"custom glsl expression\"-node as a hacky escape hatch. With this you can enter raw glsl code where $a and $b reference the input thumbs. Thumb $a expects a float and thumb $b expects a vec2. I want to make it more clear what type a thumb is expecting and also be able to specify the thumbs for this custom node-type (and others as well). Because $b is a vec2 you can't connect a value-node to it. I've changed the example on codeflowcanvas so that compositions are used instead of custom-nodes. Now the params from the calculations can be changed on the fly. \nThe value-node-type has editable min\/step\/max parameters by the way.. if you click the numbers below the sliders you can edit them.\n   \n8. true, I haven't find a good way to working around the need of named variables. If nodes needed to be connected to variables with wires this would become a big mess I think. In my other flow-type (the \"flow-based-programming inspired\"-flow) there's a button which shows the hidden connections from nodes which reference variables. I haven't had a chance to add that functionality in the gl-flow as well. It could help I think."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "URKQXRCAC",
        "type": "message",
        "ts": "1710882036.642629",
        "client_msg_id": "8029B578-3606-4947-A54F-26B4127ED90C",
        "text": "<@U04SAJZ155H> interesting read. For me as a colour blind person, the 50 colours are very hard to distinguish. So be aware when using them. How do other colour blinds see this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a55b20870fb9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-23\/6253994675665_a55b20870fb92473e7e8_72.png",
            "first_name": "Erik",
            "real_name": "Erik Stel",
            "display_name": "Erik Stel",
            "team": "T5TCAFTA9",
            "name": "foc572",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kee\/T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U04SAJZ155H"
                            },
                            {
                                "type": "text",
                                "text": " interesting read"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " For me as a colour blind person, the 50 colours are very hard to distinguish"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " So be aware when using them"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " How do other colour blinds see this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I'm not aware of being colour blind (but everyone has to find out sometime I guess?) but I also find the colours quite similar. E.g. I perceive the runs I've marked in the screenshot below as being extremely similar, to the point that it looks like a repeating pattern to me. Marking them out with arrows shows how the colour does change, to the point that the colour at the end of my perceived \"run\" is somewhat different from the starting colour - maybe laying them out in this ordered fashion isn't showing them off in an ideal situation?",
        "files": [
            {
                "id": "F06R1LHHRAL",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05597GCDDK",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TFNaP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not aware of being colour blind (but everyone has to find out sometime I guess?) but I also find the colours quite similar. E.g. I perceive the runs I've marked in the screenshot below as being extremely similar, to the point that it looks like a repeating pattern to me. Marking them out with arrows shows how the colour does change, to the point that the colour at the end of my perceived \"run\" is somewhat different from the starting colour - maybe laying them out in this ordered fashion isn't showing them off in an ideal situation?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1710893291.552999",
        "client_msg_id": "d284800b-b6d4-423e-a265-93331301bf26",
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H"
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710895540.679229",
        "client_msg_id": "0d3071b7-7f60-47a4-9c60-9c6b0b83d1ff",
        "text": "<@URKQXRCAC> Even with excellent color vision, 50 colors are hard to distinguish. To me the first 14 colors look especially distinct. The point is not to construct 50 clearly distinct colors, because that's an impossible task, but to make an infinite series, which happens to repeat itself after 50 colors. I justify the repetition because after 50 colors, you can't distinguish the colors anyway, even if you use a more complex algorithm that has a period of more than 50.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kipIw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "URKQXRCAC"
                            },
                            {
                                "type": "text",
                                "text": " Even with excellent color vision, 50 colors are hard to distinguish. To me the first 14 colors look especially distinct. The point is not to construct 50 clearly distinct colors, because that's an impossible task, but to make an infinite series, which happens to repeat itself after 50 colors. I justify the repetition because after 50 colors, you can't distinguish the colors anyway, even if you use a more complex algorithm that has a period of more than 50."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05597GCDDK",
                    "URKQXRCAC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710895960.422439",
        "client_msg_id": "2134e211-3e24-4792-9187-e72ef7a0331d",
        "text": "<@U05597GCDDK> The formula shows some patterning that is especially appearant when laying the colors out in 7 columns. The illustration has 10 columns, which is why you have to draw the diagonal arrows. Avoiding patterning is a non-goal. The colors unavoidably get similar after a while, but they are as distinct as possible, as you can see when layed out ordered in the color wheel on the next pages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+l8jJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05597GCDDK"
                            },
                            {
                                "type": "text",
                                "text": " The formula shows some patterning that is especially appearant when laying the colors out in 7 columns. The illustration has 10 columns, which is why you have to draw the diagonal arrows. Avoiding patterning is a non-goal. The colors unavoidably get similar after a while, but they are as distinct as possible, as you can see when layed out ordered in the color wheel on the next pages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1710899479.373949",
        "client_msg_id": "9a2f95a3-dc38-4e54-81ec-656776198146",
        "text": "Right, that makes sense - thanks for clarifying!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "07fbb70c0e39",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-28\/5179303716261_07fbb70c0e3980e07e51_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Buckmaster",
            "display_name": "Daniel Buckmaster",
            "team": "T5TCAFTA9",
            "name": "mail397",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aw8L1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, that makes sense - thanks for clarifying!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1710911140.082209",
        "client_msg_id": "e6545b23-650a-4c31-8473-e7f4a3baea17",
        "text": "That’s a fun investigation. In case you didn’t know, coming up with schemes of colors for different items (“categorical variables”) is a well-established &amp; difficult problem in graphic design &amp; data visualization. See, for instance, the eleven palettes that D3 includes: <https:\/\/d3js.org\/d3-scale-chromatic\/categorical>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710870944.759009",
        "parent_user_id": "U04SAJZ155H",
        "attachments": [
            {
                "from_url": "https:\/\/d3js.org\/d3-scale-chromatic\/categorical",
                "service_icon": "https:\/\/d3js.org\/logo.png",
                "id": 1,
                "original_url": "https:\/\/d3js.org\/d3-scale-chromatic\/categorical",
                "fallback": "Categorical schemes | D3 by Observable",
                "text": "The JavaScript library for bespoke data visualization",
                "title": "Categorical schemes | D3 by Observable",
                "title_link": "https:\/\/d3js.org\/d3-scale-chromatic\/categorical",
                "service_name": "d3js.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OmMbj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s a fun investigation. In case you didn’t know, coming up with schemes of colors for different items (“categorical variables”) is a well-established & difficult problem in graphic design & data visualization. See, for instance, the eleven palettes that D3 includes: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/d3js.org\/d3-scale-chromatic\/categorical"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "URKQXRCAC"
                ],
                "count": 2
            }
        ]
    }
]