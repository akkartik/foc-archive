[
    {
        "user": "UNE30DK8U",
        "type": "message",
        "ts": "1607203309.185400",
        "edited": {
            "user": "UNE30DK8U",
            "ts": "1607203348.000000"
        },
        "client_msg_id": "3c701ab5-1f7c-407c-bce4-ac51215a1dcf",
        "text": "Yeah, I meant Deleuze's commentary on Leibniz in particular! <https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gebc7a30055b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ebc7a30055b0c4d52c13d435f89383de.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Lukas Schwab",
            "display_name": "Lukas Schwab",
            "team": "T5TCAFTA9",
            "name": "lukas.schwab",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606079753.078900",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "service_name": "University of Minnesota Press",
                "title": "The Fold",
                "title_link": "https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold",
                "text": "In The Fold, Gilles Deleuze argues that Leibniz’s writings constitute the grounding elements of a Baroque philosophy and of theories for analyzing contemporary arts and science. A model for expression in contemporary aesthetics, the concept of the monad is viewed in terms of folds of space, movement, and time. Similarly, the world is interpreted as a body of infinite folds and surfaces that twist and weave through compressed time and space. According to Deleuze, Leibniz also anticipates contemporary views of event and history as multifaceted combinations of signs in motion and of the “modern” subject as nomadic, always in the process of becoming.",
                "fallback": "University of Minnesota Press: The Fold",
                "thumb_url": "https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold\/image_large",
                "from_url": "https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold",
                "thumb_width": 400,
                "thumb_height": 600,
                "service_icon": "https:\/\/www.upress.umn.edu\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6HQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I meant Deleuze's commentary on Leibniz in particular! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.upress.umn.edu\/book-division\/books\/the-fold"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1607237197.201100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607237872.000000"
        },
        "client_msg_id": "f3a7f037-ed66-4c97-8b73-23fc8618b42b",
        "text": "Have people seen many programming languages where *Sets* are represented as functions from X → Bool and (more importantly) *Lists* are represented as functions from Int → X? And I mean they're _truly_ just functions: all of the operations upon them are just operations upon functions, and thus they might be repurposed for other uses as well. Javascript and Lua _kind of_ do this, except their philosophy is more like \"all collections are just dictionaries\", where a dictionary is a heavily-restricted class of function.\n\nThis approach (\"all collections are just functions\") seems like a versatile foundation (especially in the context of the semantics of the programming language I'm working on), so I've been digging into the ramifications of it lately. My biggest challenge so far is figuring out how to identify for which functions operations like set union and intersection are computable. Depending on how the function is constructed\/defined, it seems like it could be quite hard to figure out a static \"safety check\". I want these operations to be well-defined even on *recursively-defined* functions, so it's not as simple as \"ensure the function definition is just a finite list of cases\" (i.e, a dictionary).\n\nThis doesn't seem unreasonable: Datalog works this way. Datalog predicates are recursively-defined functions from X → Bool (i.e. sets) that obey certain constraints so that queries upon them are answerable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1607330121.226200",
        "reply_users": [
            "UN9SCH5RD",
            "UFZFETUH1",
            "UCGAK10LS",
            "UFB8STN7K",
            "U016VUZGUUQ",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UN9SCH5RD",
                "ts": "1607239949.201400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607239978.201600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607240102.201800"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1607245145.202100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607246234.202400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607248137.203000"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1607277265.207200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607293615.213000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607293817.215500"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1607320659.217200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1607326678.217400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607328696.222400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1607329762.222600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1607329842.222800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607330022.225100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1607330121.226200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Z8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have people seen many programming languages where "
                            },
                            {
                                "type": "text",
                                "text": "Sets",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are represented as functions from X → Bool and (more importantly) "
                            },
                            {
                                "type": "text",
                                "text": "Lists",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are represented as functions from Int → X? And I mean they're "
                            },
                            {
                                "type": "text",
                                "text": "truly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just functions: all of the operations upon them are just operations upon functions, and thus they might be repurposed for other uses as well. Javascript and Lua "
                            },
                            {
                                "type": "text",
                                "text": "kind of",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do this, except their philosophy is more like \"all collections are just dictionaries\", where a dictionary is a heavily-restricted class of function.\n\nThis approach (\"all collections are just functions\") seems like a versatile foundation (especially in the context of the semantics of the programming language I'm working on), so I've been digging into the ramifications of it lately. My biggest challenge so far is figuring out how to identify for which functions operations like set union and intersection are computable. Depending on how the function is constructed\/defined, it seems like it could be quite hard to figure out a static \"safety check\". I want these operations to be well-defined even on "
                            },
                            {
                                "type": "text",
                                "text": "recursively-defined",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions, so it's not as simple as \"ensure the function definition is just a finite list of cases\" (i.e, a dictionary).\n\nThis doesn't seem unreasonable: Datalog works this way. Datalog predicates are recursively-defined functions from X → Bool (i.e. sets) that obey certain constraints so that queries upon them are answerable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607239949.201400",
        "client_msg_id": "2d778a19-1a97-4b79-b179-b3e180e6daee",
        "text": "clojure",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eX8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "clojure"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607239978.201600",
        "client_msg_id": "d9f441c1-3994-419f-84fd-0934754c5a24",
        "text": "well, not sure about \"representation\" but sets, lists and maps in clojure are also functions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+w68",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "well, not sure about \"representation\" but sets, lists and maps in clojure are also functions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607240102.201800",
        "client_msg_id": "d9b52d86-48d0-4180-b4eb-e4336b54c1a3",
        "text": "being a function simply means that you can apply parameters to them and they return a value. The semantics is what you would imagine they should do (applying 0 to a list returns the first element, etc)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vY\/Fw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "being a function simply means that you can apply parameters to them and they return a value. The semantics is what you would imagine they should do (applying 0 to a list returns the first element, etc)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    }
]