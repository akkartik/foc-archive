[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1661846358.747919",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1661846608.000000"
        },
        "client_msg_id": "10c4f2c9-6505-4e69-9b35-9e54cfd803c3",
        "text": "I am trying to fix something that <@UK3LH8CF5> said on here. In particular\n\n&gt;  There doesn't seem to be a way of building up higher level abstractions [on <http:\/\/Observablehq.com|Observablehq.com>] at the moment and saving and reusing them.\nWhile is not technically true, because you can plug in a Firebase and build what you like, but that is *waaay* to involved for prototyping. Also once you did that nobody can fork your notebook and still get access to the backend, or they can, but the whole thing ends up inappropriately insecure.  So the point stands that to do that well requires a fair amount of expertise. So I am fixing that.\n\nI am building a low config realtime multi-tenant state abstraction that supports end user forking and federated access. So you can build abstraction on Observable, but also so you can start to develop cross platform realtime workflows. In addition, anybody who uses that store can fork the containing notebook and still access their data, so it supports end user (re) programming. Furthermore it is a sane security model, that has per user isolation so forks can't steal access unrelated users data.\n\nI can talk about it now coz I can see the end and its totally possible! A forkable notebook realtime statestore is coming to Observable soon!\n\n<https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661846358.747919",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1662730710.010499",
        "reply_users": [
            "UK3LH8CF5",
            "U02E4DAQGSZ"
        ],
        "replies": [
            {
                "user": "UK3LH8CF5",
                "ts": "1661904199.439269"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1662024380.308209"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1662033071.186019"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1662631802.524429"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1662730710.010499"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC",
                "ts": "1659475446.182609",
                "author_id": "UK3LH8CF5",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C03RR0W5DGC",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C03RR0W5DGC",
                        "ts": "1659475446.182609",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "SeB8",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "user",
                                                    "user_id": "U02E4DAQGSZ"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "Yeah, I think its cool. But not quite the level of change I think we need. "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them."
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things."
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC",
                "fallback": "[August 2nd, 2022 2:24 PM] jimmyhmiller: <@U02E4DAQGSZ>\nYeah, I think its cool. But not quite the level of change I think we need. \n\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. \n\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them.\n\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things.",
                "text": "<@U02E4DAQGSZ>\nYeah, I think its cool. But not quite the level of change I think we need. \n\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. \n\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them.\n\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things.",
                "author_name": "Jimmy Miller",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UK3LH8CF5",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_48.jpg",
                "author_subname": "Jimmy Miller",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qWWy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am trying to fix something that "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " said on here. In particular\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " There doesn't seem to be a way of building up higher level abstractions [on "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/Observablehq.com",
                                "text": "Observablehq.com"
                            },
                            {
                                "type": "text",
                                "text": "] at the moment and saving and reusing them."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhile is not technically true, because you can plug in a Firebase and build what you like, but that is "
                            },
                            {
                                "type": "text",
                                "text": "waaay",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to involved for prototyping. Also once you did that nobody can fork your notebook and still get access to the backend, or they can, but the whole thing ends up inappropriately insecure.  So the point stands that to do that well requires a fair amount of expertise. So I am fixing that.\n\nI am building a low config realtime multi-tenant state abstraction that supports end user forking and federated access. So you can build abstraction on Observable, but also so you can start to develop cross platform realtime workflows. In addition, anybody who uses that store can fork the containing notebook and still access their data, so it supports end user (re) programming. Furthermore it is a sane security model, that has per user isolation so forks can't steal access unrelated users data.\n\nI can talk about it now coz I can see the end and its totally possible! A forkable notebook realtime statestore is coming to Observable soon!\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&cid=C03RR0W5DGC"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "USJ9LD0E4",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1661849985.706409",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1661849989.000000"
        },
        "client_msg_id": "0a8edc71-572c-4dd7-b79d-759f940ede1a",
        "text": "That describes what one can do with it, indeed. But what I found more fascinating is the custom tools that help one develop and extend Leibniz itself. What is the name for that? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660736904.516849",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x5B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That describes what one can do with it, indeed. But what I found more fascinating is the custom tools that help one develop and extend Leibniz itself. What is the name for that? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1661853674.879339",
        "client_msg_id": "c19b8ed6-efe7-47f7-8f90-2eb80d69c4ea",
        "text": "That was actually my main personal discovery in the process of developing Leibniz. I started out with a first implementation in Racket. I had a Scheme background, and Racket has a lot of support for developing languages, so it seemed like a good choice. And if you consider development tools a separate subject, as most of us do, it is. Implementing my first design of Leibniz in Racket (using Emacs as my IDE) was a good experience overall. But *improving* on the initial design, iteratively, turned out to be very frustrating. I had two nested edit-compile-run cycles, one for Racket and one for Leibniz, and no other tools than print statements for looking at the internal data structures of my implementation. That was way too cumbersome to handle. When I discovered Pharo (by accident), I immediately saw that a live environment is what I wanted. So I started my second implementation in Pharo, which at that time contained a precursor of today's Glamorous Toolkit that was already very useful. Since then it only got better.\nMy current point of view is: you can't design a language without in parallel developing an IDE for that language. And that becomes an important criterion for choosing a platform.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660736904.516849",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Rtyo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was actually my main personal discovery in the process of developing Leibniz. I started out with a first implementation in Racket. I had a Scheme background, and Racket has a lot of support for developing languages, so it seemed like a good choice. And if you consider development tools a separate subject, as most of us do, it is. Implementing my first design of Leibniz in Racket (using Emacs as my IDE) was a good experience overall. But "
                            },
                            {
                                "type": "text",
                                "text": "improving",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on the initial design, iteratively, turned out to be very frustrating. I had two nested edit-compile-run cycles, one for Racket and one for Leibniz, and no other tools than print statements for looking at the internal data structures of my implementation. That was way too cumbersome to handle. When I discovered Pharo (by accident), I immediately saw that a live environment is what I wanted. So I started my second implementation in Pharo, which at that time contained a precursor of today's Glamorous Toolkit that was already very useful. Since then it only got better.\nMy current point of view is: you can't design a language without in parallel developing an IDE for that language. And that becomes an important criterion for choosing a platform."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "Functions render as forms.",
        "files": [
            {
                "id": "F0413M5QREC",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U71PMQ1V0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xpfb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Functions render as forms."
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "user": "U71PMQ1V0",
            "type": "message",
            "ts": "1660072464.687169",
            "client_msg_id": "ac9cfe7f-e589-43c7-bfa1-aa2f4efac3d2",
            "text": "I've been working on <https:\/\/www.scattered-thoughts.net\/writing\/the-program-is-the-database-is-the-interface>. The demo uses clojurescript at the moment, but I'm currently working on replacing it with a (poorly implemented) language where every value in a `defs` remembers where it came from and can be directly edited. This will mean that eg in the todo example, the text will be directly editable wherever it appears rather than having to add an explicit set-text action.",
            "team": "T5TCAFTA9",
            "thread_ts": "1660072464.687169",
            "reply_count": 6,
            "reply_users_count": 3,
            "latest_reply": "1662758332.224529",
            "reply_users": [
                "UJBAJNFLK",
                "U71PMQ1V0",
                "UHWC9PXBL"
            ],
            "replies": [
                {
                    "user": "UJBAJNFLK",
                    "ts": "1660135445.329789"
                },
                {
                    "user": "U71PMQ1V0",
                    "ts": "1660173423.383219"
                },
                {
                    "user": "U71PMQ1V0",
                    "ts": "1661750345.897869"
                },
                {
                    "user": "U71PMQ1V0",
                    "ts": "1661902620.583519"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1662229844.063079"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1662758332.224529"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "T4Lrf",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I've been working on "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/www.scattered-thoughts.net\/writing\/the-program-is-the-database-is-the-interface"
                                },
                                {
                                    "type": "text",
                                    "text": ". The demo uses clojurescript at the moment, but I'm currently working on replacing it with a (poorly implemented) language where every value in a "
                                },
                                {
                                    "type": "text",
                                    "text": "defs",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " remembers where it came from and can be directly edited. This will mean that eg in the todo example, the text will be directly editable wherever it appears rather than having to add an explicit set-text action."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1661902620.583519",
        "client_msg_id": "b545c035-2bd1-4d32-a00d-5c9b04e4d254",
        "thread_ts": "1660072464.687169",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "U02PDVC9CNT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1661904199.439269",
        "client_msg_id": "f7c47493-7ce1-4097-a8af-55cd41f58ef9",
        "text": "Super excited to see what you make!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661846358.747919",
        "parent_user_id": "U02E4DAQGSZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qz3O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Super excited to see what you make!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]