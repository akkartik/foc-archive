[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1725089239.744069",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1725089380.000000"
        },
        "client_msg_id": "dc00adbb-3c7a-45a1-aad7-3529b3cca1aa",
        "text": "triplets, to me, is another representation of a graph. You have the Turing tarpit equivalent issue that everything can be transformed into a graph, so its expressivity is not a problem.\n\nBut the question is about *knowledge\". Graphs are great for static knowledge (Marid, captiol-of etc.), but real world knowledge often has temporal and spatial element to it. You can kinda tack it on within (graphs can represent anything!) but I think these things need their own 1st class treatment (like the brain does). \"Bob lives next\" door fact has in implicit _today_ tacked on it, as opposed to objects are subjective to gravity which is nearer universal.\n\nEverything is a timeseries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725007782.404059",
        "parent_user_id": "U018S42NMMM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCB1H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "triplets, to me, is another representation of a graph. You have the Turing tarpit equivalent issue that everything can be transformed into a graph, so its expressivity is not a problem.\n\nBut the question is about *knowledge\". Graphs are great for static knowledge (Marid, captiol-of etc.), but real world knowledge often has temporal and spatial element to it. You can kinda tack it on within (graphs can represent anything!) but I think these things need their own 1st class treatment (like the brain does). \"Bob lives next\" door fact has in implicit "
                            },
                            {
                                "type": "text",
                                "text": "today",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tacked on it, as opposed to objects are subjective to gravity which is nearer universal.\n\nEverything is a timeseries."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U07K29VEDTM"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1725121374.752729",
        "client_msg_id": "7B22F5E7-DFA6-4A16-9A66-86C12EFB33F4",
        "text": "Backing up:\n\nThe primary goal of the project is to make a wiki that is nice to read. To that end, there's a build script that adds things like indexes and backlinks, maybe more stuff in the future.\n\nThe secondary goal is to make a wiki that is easy enough to write, for now, via GitHub. It doesn't have to be perfect, it's fine if it's a bit clunky. This will probably change — later.\n\nThe (distant) third goal is that people can check out the repo locally, and run the build script on their own machine. They might want to see how their writing will be processed without having to loop through GitHub. Or they might want to hack on the stylesheet, or the build script, or add some new dimension to the project that I haven't conceived of.\n\nThe (even more distant) fourth goal is to allow people to do stuff from the third goal without needing to run the \"canonical\" build script. One possibility here is that, if the build script is really simple, people might be able to rewrite the build script in other languages. The original build script would still be canonical — it's the one that GitHub runs, after all — but if a 90% (or 50%) port sufficed for whatever \"third goal\" thing someone wanted to do, that'd be cool and good and fun.\n\nI have been sharing my thoughts about that distant fourth goal because I find it winsome. There's a Rosetta Code quality to it that makes me wonder a bit. It puts interesting pressure on how I think about the canonical build script, which I've found oddly productive.\n\nWhat I haven't communicated very well is that I'm still trying to get the primary and secondary goals accomplished, and I'm not ready to get bogged down in considering the fourth goal. I mustn't let myself get distracted by it, because — and I can't stress this enough — the third and fourth goals are not essential to the success of the project.\n\nSo by all means, I love that you're playing in the space of that fourth goal. I'd just invite you to treat it as play, and not feel like you need to, say, change my mind about any of it. I don't have a strong sense of what's going on at that level yet, because I'm still trying to achieve the top two goals. Also, when considering that fourth goal, I invite you to think of the build script as a throwaway thing. I'd like there to be a canonical _social_ understanding of the build script. If we somehow lost all the implementations, we'd just build a new one that did mostly the same thing. If it didn't quite work, we'd tweak it. I have no interest in treating the code or its execution as a source of truth, because the truth is just \"do we like reading this wiki?\" and that's going to change over time, and it's not a single concrete thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zzdkZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Backing up:\n\nThe primary goal of the project is to make a wiki that is nice to read. To that end, there's a build script that adds things like indexes and backlinks, maybe more stuff in the future"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe secondary goal is to make a wiki that is easy enough to write, for now, via GitHub. It doesn't have to be perfect, it's fine if it's a bit clunky. This will probably change — later"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe (distant) third goal is that people can check out the repo locally, and run the build script on their own machine. They might want to see how their writing will be processed without having to loop through GitHub. Or they might want to hack on the stylesheet, or the build script, or add some new dimension to the project that I haven't conceived of"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe (even more distant) fourth goal is to allow people to do stuff from the third goal without needing to run the \"canonical\" build script. One possibility here is that, if the build script is really simple, people might be able to rewrite the build script in other languages"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " The original build script would still be canonical — it's the one that GitHub runs, after all — but if a 90% (or 50%) port sufficed for whatever \"third goal\" thing someone wanted to do, that'd be cool and good and fun"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have been sharing my thoughts about that distant fourth goal because I find it winsome"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " There's a Rosetta Code quality to it that makes me wonder a bit"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It puts interesting pressure on how I think about the canonical build script, which I've found oddly productive"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhat I haven't communicated very well is that I'm still trying to get the primary and secondary goals accomplished, and I'm not ready to get bogged down in considering the fourth goal. I mustn't let myself get distracted by it, because — and I can't stress this enough — the third and fourth goals are not essential to the success of the project.\n\nSo by all means, I love that you're playing in the space of that fourth goal"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I'd just invite you to treat it as play, and not feel like you need to, say, change my mind about any of it. I don't have a strong sense of what's going on at that level yet, because I'm still trying to achieve the top two goals. Also, when considering that fourth goal, I invite you to think of the build script as a throwaway thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I'd like there to be a canonical "
                            },
                            {
                                "type": "text",
                                "text": "social",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " understanding of the build script"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If we somehow lost all the implementations, we'd just build a new one that did mostly the same thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If it didn't quite work, we'd tweak it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I have no interest in treating the code or its execution as a source of truth, because the truth is just \"do we like reading this wiki?\" and that's going to change over time, and it's not a single concrete thing"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1725122398.627819",
        "client_msg_id": "D4F141DA-CFD5-4781-9038-76728136499B",
        "text": "Triples give you a pretty good First Order Logic, which Relational Database Theory gives us a really nice way of translating into the Relational Algebra, which is an executable data query language.\n\nI’m not waving my hands all that much when I say that a relational language is mathematically the best possible compromise between expressivity and computability.\n\nSince this is “Future of Coding”, and we are concerned with things like presentation and tooling, we should I think be happy to present triple stores as tables with nullable columns.\n\nThat can accomodate your concerns about the dimensionality of the world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725007782.404059",
        "parent_user_id": "U018S42NMMM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ed\/\/U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Triples give you a pretty good First Order Logic, which Relational Database Theory gives us a really nice way of translating into the Relational Algebra, which is an executable data query language.\n\nI’m not waving my hands all that much when I say that a relational language is mathematically the best possible compromise between expressivity and computability.\n\nSince this is “Future of Coding”, and we are concerned with things like presentation and tooling, we should I think be happy to present triple stores as tables with nullable columns.\n\nThat can accomodate your concerns about the dimensionality of the world."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U018S42NMMM"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1725160636.476039",
        "client_msg_id": "6a1ede04-2f5a-48f0-9c43-e28a0d424ff7",
        "text": "Does anyone have thoughts about equality vs ordering in maps\/sets?\n\nI have some pondering here - <https:\/\/www.scattered-thoughts.net\/log\/0048\/#zest-ordering> but the decision tree at the end is the main thing:\n\n• Order isn't observable at all.\n• Iteration order is either non-deterministic or expensive.\n• Determism can be manually recovered by storing both a map and a list of keys, but at the cost of storing two copies of each key.\n• Order is observable.\n• Order doesn't affect equality.\n    ◦ Equality is not extensional ie `a == b` does not imply that `f(a) == f(b)`.\n    ◦ If `[a: 0, b: 1] == [b: 1, a: 0]` then we must have `struct[a: i64, b: i64] == struct[b: i64, a: i64]`, but we still have to remember that the field order is different, which implies that type equality can't rely on interning and pointer comparison.\n• Order affects equality.\n    ◦ Sets become surprising \/ less useful.\n    ◦ If I want to add query planning, I can't promise that `f(db) == optimize-query(f)(db)`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725160636.476039",
        "reply_count": 15,
        "reply_users_count": 6,
        "latest_reply": "1725434632.714179",
        "reply_users": [
            "U71PMQ1V0",
            "UCUSW7WVD",
            "UQ706GB9U",
            "U6KQ2S410",
            "U8A5MS6R1",
            "U02E4DAQGSZ"
        ],
        "replies": [
            {
                "user": "U71PMQ1V0",
                "ts": "1725160650.213549"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1725160671.159679"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1725183143.956889"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1725211871.599639"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1725223394.407399"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1725243105.721099"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1725293514.204999"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1725299418.857169"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1725304537.760049"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1725305432.135749"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1725396449.014829"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1725396826.788009"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1725396951.701829"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1725427193.422599"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1725434632.714179"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pHLLf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have thoughts about equality vs ordering in maps\/sets?\n\nI have some pondering here - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.scattered-thoughts.net\/log\/0048\/#zest-ordering"
                            },
                            {
                                "type": "text",
                                "text": " but the decision tree at the end is the main thing:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Order isn't observable at all."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Iteration order is either non-deterministic or expensive."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Determism can be manually recovered by storing both a map and a list of keys, but at the cost of storing two copies of each key."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Order is observable."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Order doesn't affect equality."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Equality is not extensional ie "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a == b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " does not imply that "
                                    },
                                    {
                                        "type": "text",
                                        "text": "f(a) == f(b)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If "
                                    },
                                    {
                                        "type": "text",
                                        "text": "[a: 0, b: 1] == [b: 1, a: 0]",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " then we must have "
                                    },
                                    {
                                        "type": "text",
                                        "text": "struct[a: i64, b: i64] == struct[b: i64, a: i64]",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", but we still have to remember that the field order is different, which implies that type equality can't rely on interning and pointer comparison."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Order affects equality."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Sets become surprising \/ less useful."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If I want to add query planning, I can't promise that "
                                    },
                                    {
                                        "type": "text",
                                        "text": "f(db) == optimize-query(f)(db)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1725160650.213549",
        "client_msg_id": "e1c46ef4-0905-48a5-8abf-729f568b0297",
        "text": "Good job collapsing the tree slack :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725160636.476039",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lfkye",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good job collapsing the tree slack "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1725160671.159679",
        "client_msg_id": "5b1fca3d-ef2f-4b98-a256-fbfbcddc4a0d",
        "text": "```* Order isn't observable at all.\n  * Iteration order is either non-deterministic or expensive.\n  * Determism can be manually recovered by storing both a map and a list of keys, but at the cost of storing two copies of each key.\n* Order is observable.\n  * Order doesn't affect equality.\n    * Equality is not extensional ie `a == b` does not imply that `f(a) == f(b)`.\n    * If `[a: 0, b: 1] == [b: 1, a: 0]` then we must have `struct[a: i64, b: i64] == struct[b: i64, a: i64]`, but we still have to remember that the field order is different, which implies that type equality can't rely on interning and pointer comparison.\n  * Order affects equality.\n    * Sets become surprising \/ less useful.\n    * If I want to add query planning, I can't promise that `f(db) == optimize-query(f)(db)`.```\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1725160636.476039",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pr1VS",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* Order isn't observable at all.\n  * Iteration order is either non-deterministic or expensive.\n  * Determism can be manually recovered by storing both a map and a list of keys, but at the cost of storing two copies of each key.\n* Order is observable.\n  * Order doesn't affect equality.\n    * Equality is not extensional ie `a == b` does not imply that `f(a) == f(b)`.\n    * If `[a: 0, b: 1] == [b: 1, a: 0]` then we must have `struct[a: i64, b: i64] == struct[b: i64, a: i64]`, but we still have to remember that the field order is different, which implies that type equality can't rely on interning and pointer comparison.\n  * Order affects equality.\n    * Sets become surprising \/ less useful.\n    * If I want to add query planning, I can't promise that `f(db) == optimize-query(f)(db)`."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    }
]