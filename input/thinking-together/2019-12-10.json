[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1575965597.271000",
        "client_msg_id": "ca945eb3-791b-4861-ad33-83e1867ca783",
        "text": "Scrub that, the original thread has recovered!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575925983.235300",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0nO1R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scrub that, the original thread has recovered!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1575965923.271200",
        "client_msg_id": "124030b3-573b-466b-a8dc-5e534aa8d62f",
        "text": "Like an addict, I gave up on peer approval several times and I believe that I've finally given it up for good. It's a really tough one to shake. I've wasted so much time and energy on it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575912122.225300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8o0yG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like an addict, I gave up on peer approval several times and I believe that I've finally given it up for good. It's a really tough one to shake. I've wasted so much time and energy on it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1575966326.271400",
        "client_msg_id": "65783acf-c3cf-4945-bb3e-4000400eb7a7",
        "text": "Ironically, my peers have changed as a result to others who have done the same: those whose target demographic for their work is \"everyone\". \n\nNow I'm in danger of seeking _their_ approval instead, by attending events like the London meetups and the Convivial Computing workshop!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575912122.225300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9L4y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ironically, my peers have changed as a result to others who have done the same: those whose target demographic for their work is \"everyone\". \n\nNow I'm in danger of seeking _their_ approval instead, by attending events like the London meetups and the Convivial Computing workshop!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": ":hand::skin-tone-2: Working on Flowcode here. Very early stage, so there isn’t much there yet in terms of documentation, intros, blog posts, but a working prototype is available at <http:\/\/flowcode.kwaia.com|flowcode.kwaia.com>.",
        "files": [
            {
                "id": "FRGPQMS5N",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UJVEPCVT6",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fQ9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "hand",
                                "unicode": "270b-1f3fb",
                                "skin_tone": 2
                            },
                            {
                                "type": "text",
                                "text": " Working on Flowcode here. Very early stage, so there isn’t much there yet in terms of documentation, intros, blog posts, but a working prototype is available at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/flowcode.kwaia.com",
                                "text": "flowcode.kwaia.com"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1575968830.271700",
        "client_msg_id": "fc4b25f2-289a-4482-aa60-f37ecc588bfd",
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575974277.272200",
        "client_msg_id": "763585d9-0ed6-4f66-a107-29b13fb052e4",
        "text": "<@UC2A2ARPT> \"_insincerely graphical\"_ nice!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cb5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " \""
                            },
                            {
                                "type": "text",
                                "text": "insincerely graphical\" ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "nice!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575974343.272400",
        "edited": {
            "user": "UF89Z7SRF",
            "ts": "1575974406.000000"
        },
        "client_msg_id": "135a983d-1909-49dc-acdb-ce4a14fc5528",
        "text": "I mentioned reactable elsewhere, it's old hat really, but I think it's _way_ ahead of it's time as a visual dataflow language <https:\/\/en.wikipedia.org\/wiki\/Reactable>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f6hj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mentioned reactable elsewhere, it's old hat really, but I think it's "
                            },
                            {
                                "type": "text",
                                "text": "way",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ahead of it's time as a visual dataflow language "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Reactable"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575974433.272800",
        "client_msg_id": "6ae0ed2f-0dab-47f9-9c4e-69bd57ac9d9e",
        "text": "multi-user, plus proximity, relative orientation is meaningful",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B8B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "multi-user, plus proximity, relative orientation is meaningful"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575974734.273000",
        "client_msg_id": "522ee7f1-5990-40bf-8549-9f57c7eb2997",
        "text": "I wonder if there is really such a thing as a 'general purpose' language, as any computer language will always have a set of purposes\/affordances built into its design. Maybe we mean a low level 'systems language'?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QMM=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if there is really such a thing as a 'general purpose' language, as any computer language will always have a set of purposes\/affordances built into its design. Maybe we mean a low level 'systems language'?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1575985940.273200",
        "client_msg_id": "980c0e5b-23a1-48d5-bd74-15867a6a422f",
        "text": "<@U6FKVSVCK> is working on a general purpose node-based visual programming language: <https:\/\/lynxtool.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lqr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " is working on a general purpose node-based visual programming language: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lynxtool.com\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U6FKVSVCK",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1575987833.274300",
        "client_msg_id": "8D8133D6-1011-44C2-B706-7B7820D42DCE",
        "text": "Yeah, Lynx looks very interesting. Really good design thinking there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ueD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, Lynx looks very interesting. Really good design thinking there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1575988143.279800",
        "client_msg_id": "04BCB009-CD9D-487F-B652-4954DF8BFD28",
        "text": "<@UF89Z7SRF> I take \"general purpose\" to mean something like \"readily Turing-complete\". It's a statement about capability. Max\/MSP isn't fully general purpose because you can't easily do recursion. Reactable is a neat UI, but there's no reprogramability within that UI — it's always a synthesizer, never a JSON parser, can't use it to clone Tetris.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f5YcS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " I take \"general purpose\" to mean something like \"readily Turing-complete\". It's a statement about capability. Max\/MSP isn't fully general purpose because you can't easily do recursion. Reactable is a neat UI, but there's no reprogramability within that UI — it's always a synthesizer, never a JSON parser, can't use it to clone Tetris."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1575988294.282100",
        "client_msg_id": "E3FEF5D3-A80F-4AF7-A019-0FA41BEBDF06",
        "text": "(Good you mentioned Reactable, though. It's exciting and worth appreciating for a lot of reasons, despite not being a general language)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JpIWp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Good you mentioned Reactable, though. It's exciting and worth appreciating for a lot of reasons, despite not being a general language)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1575989512.282800",
        "client_msg_id": "7ad2779f-41fe-4837-9d3d-e90c3ba8dd23",
        "text": "<@UF89Z7SRF> I take \"general purpose\" to mean it is used in multiple disparate domains by more than one community. No language is best for all domains. Python is general purpose without being a low-level systems language.\n\nThere are many domain-specific languages that are Turing-complete, and powerful enough to be used outside their domain, but probably never will be. (Like my language Curv.) Are these languages general purpose? At best they are aspirationally general purpose.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7CbPc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " I take \"general purpose\" to mean it is used in multiple disparate domains by more than one community. No language is best for all domains. Python is general purpose without being a low-level systems language.\n\nThere are many domain-specific languages that are Turing-complete, and powerful enough to be used outside their domain, but probably never will be. (Like my language Curv.) Are these languages general purpose? At best they are aspirationally general purpose."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UKB1S7ZMY",
        "type": "message",
        "ts": "1575989637.283000",
        "client_msg_id": "3c350595-90b4-4e8d-b186-a77959f79bc6",
        "text": "What are the ways (if any) visual languages show recursion? Have any done recursion over time in the FRP sense (precisely defining the future of values in terms of the current value of other values)? Steve's paper is a good illustration of why that's useful: <https:\/\/2018.splashcon.org\/details\/rebls-2018-papers\/7\/Explicitly-Comprehensible-Functional-Reactive-Programming>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7ec9a7d1fc78",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-15\/838161930967_7ec9a7d1fc785cc9b389_72.jpg",
            "first_name": "",
            "real_name": "Adriaan Leijnse",
            "display_name": "Adriaan Leijnse",
            "team": "T5TCAFTA9",
            "name": "adriaan.leijnse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "attachments": [
            {
                "title": "Explicitly Comprehensible Functional Reactive Programming (REBLS 2018 ) - SPLASH 2018",
                "title_link": "https:\/\/2018.splashcon.org\/details\/rebls-2018-papers\/7\/Explicitly-Comprehensible-Functional-Reactive-Programming",
                "text": "5th Workshop on Reactive and Event-based Languages &amp; Systems Reactive programming and event-based programming are two closely related programming styles that are becoming ever more important with the advent of advanced HPC technology and the ever increasing requirement for our applications to run on the web or on collaborating mobile devices. A number of publications on middleware and language design — so-called reactive and event-based languages and systems (REBLS) — have already seen the light, but the field still raises several questions. For example, the interaction with mainstrea ...",
                "fallback": "Explicitly Comprehensible Functional Reactive Programming (REBLS 2018 ) - SPLASH 2018",
                "image_url": "https:\/\/2018.splashcon.org\/getImage\/orig\/photo-0.jpg",
                "from_url": "https:\/\/2018.splashcon.org\/details\/rebls-2018-papers\/7\/Explicitly-Comprehensible-Functional-Reactive-Programming",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 2084885,
                "service_icon": "https:\/\/2018.splashcon.org\/favicon.ico",
                "service_name": "2018.splashcon.org",
                "id": 1,
                "original_url": "https:\/\/2018.splashcon.org\/details\/rebls-2018-papers\/7\/Explicitly-Comprehensible-Functional-Reactive-Programming"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R8mri",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are the ways (if any) visual languages show recursion? Have any done recursion over time in the FRP sense (precisely defining the future of values in terms of the current value of other values)? Steve's paper is a good illustration of why that's useful: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/2018.splashcon.org\/details\/rebls-2018-papers\/7\/Explicitly-Comprehensible-Functional-Reactive-Programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575990981.283300",
        "client_msg_id": "1d401625-03af-4c34-84b0-1942f54e4dc3",
        "text": "<@UJN1TAYEQ> A fair point but I've seen Max\/MSP applied to a range of domains, e.g. analysing EEG data, audio synthesis, mapping sensors to actuators to make live interfaces.. all involving working with signals\/data flows, but applied to a variety of domains. I think it's somewhere between domain-specific and general purpose.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+A8DV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " A fair point but I've seen Max\/MSP applied to a range of domains, e.g. analysing EEG data, audio synthesis, mapping sensors to actuators to make live interfaces.. all involving working with signals\/data flows, but applied to a variety of domains. I think it's somewhere between domain-specific and general purpose."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575991085.283500",
        "client_msg_id": "b8aea43a-9a72-4881-b61e-40f648bcdb66",
        "text": "Reactable is definitely domain-specific though, agreed <@UC2A2ARPT>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "me9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reactable is definitely domain-specific though, agreed "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575991147.283700",
        "client_msg_id": "8436292d-95e8-429f-aca8-bcd05f754bcb",
        "text": "I agree with <@UJN1TAYEQ> that Turing completeness (or maybe best to say equivalence, as we don't have infinite storage) can be a bit of a red herring",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y5=gL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " that Turing completeness (or maybe best to say equivalence, as we don't have infinite storage) can be a bit of a red herring"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF89Z7SRF",
        "type": "message",
        "ts": "1575991201.283900",
        "client_msg_id": "812369c4-46af-4ca1-82ac-0b81cb33d917",
        "text": "But then again it's difficult to write patches about patches in Max\/MSP, whereas it's quite easy to write scripts about scripts in python",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g238c7e5ef9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e238c7e5ef9cea787f00d937aadeb6ed.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Alex McLean",
            "display_name": "yaxu",
            "team": "T5TCAFTA9",
            "name": "alex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RCchc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But then again it's difficult to write patches about patches in Max\/MSP, whereas it's quite easy to write scripts about scripts in python"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "URC5MU2AZ",
        "type": "message",
        "ts": "1575992501.284100",
        "client_msg_id": "1f2001fa-09fd-4dea-8cb7-02e18a63c702",
        "text": "Came across <https:\/\/github.com\/yudai\/gotty> ... I think this direction is the way to go. Screensharing is kind of silly when what you really want to share is a terminal (ie, text) that the consumer should be able to format at arbitrary resolution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2ab01717445",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2ab0171744564df5b57138d2f081cbe7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "",
            "real_name": "Brandon Hudgeons",
            "display_name": "Brandon Hudgeons",
            "team": "T5TCAFTA9",
            "name": "brandon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wfS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Came across "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/yudai\/gotty"
                            },
                            {
                                "type": "text",
                                "text": " ... I think this direction is the way to go. Screensharing is kind of silly when what you really want to share is a terminal (ie, text) that the consumer should be able to format at arbitrary resolution."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bangbang",
                "users": [
                    "UN89MTTML"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1575999812.302200",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1575999982.000000"
        },
        "client_msg_id": "9882a2f3-2b3e-4fb9-9467-7196f4c8f402",
        "text": "Hi guys!\nI have an idea, I believe it must exists but can’t figure out the exact keywords.\n\nFirst, let me enumerate the keywords which I think are related:\n• Transactions\n• OO\n• Eventstreams\n• “Transactions in OO” or “Transactions with Eventstreams”\n• Async &amp; Concurrent computation\n• Erlang \/ Akka\n• STM (too low level?)\nI want to create an object graph (or eventstream graph?) where objects do not have direct reference to each other, they only communicate via messages. Objects are nodes and there is an edge from o1 to o2 if o2 is subscribed to o1 (o1 dispatches events which o2 listens to). Objects supposed to be “Processes” similar to erlang, objects are some kind of an “Async Computation”.\n\nHere comes the “new” stuff:\n\nThere is also a root “StateManager” node which is subscribed to messages contain data about “UPDATING EXISTING IDENTITIES” like “SetGlobalScore &lt;amount&gt;“, any “Async Computation” (object) which directly depends on changing data must subscribe to this root node.\n\nIf any data gets altered it does not happen immediately but via transactions. The computation which comes up with the new piece of data and wants to share it sends a message to the root “StateManager” node which handles the update.\nIt must check if the data is in use somewhere down in the dependency graph (which I think might be a DAG with the exception of root node): if it is used, the computation might be interrupted (which is more like an exception in my mind) and the whole state might be rolled back to proper state or “handled properly”. If it is not used the state just can be updated: the root emits the message and it propagates down.\n\nThis is just the core idea and quite vague, but the general goal is to add some safety to concurrent programming.\n\nAh, and I’d like to do that everywhere, not just on server side but on client as well! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "reply_count": 15,
        "reply_users_count": 4,
        "latest_reply": "1576568476.031200",
        "reply_users": [
            "UC2A2ARPT",
            "UL3CJ7YKC",
            "UCUSW7WVD",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1576002587.303700"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576007860.304400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1576010402.309100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1576010643.309300"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576011596.309800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576042756.351400"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576065642.364100"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576066473.368300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576220663.395200"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576240475.002400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576383926.011700"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576419341.012400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576461342.017200"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576546875.024600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576568476.031200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HoP4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi guys!\nI have an idea, I believe it must exists but can’t figure out the exact keywords.\n\nFirst, let me enumerate the keywords which I think are related:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Transactions"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "OO"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Eventstreams"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“Transactions in OO” or “Transactions with Eventstreams”"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Async & Concurrent computation"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Erlang \/ Akka"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "STM (too low level?)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI want to create an object graph (or eventstream graph?) where objects do not have direct reference to each other, they only communicate via messages. Objects are nodes and there is an edge from o1 to o2 if o2 is subscribed to o1 (o1 dispatches events which o2 listens to). Objects supposed to be “Processes” similar to erlang, objects are some kind of an “Async Computation”.\n\nHere comes the “new” stuff:\n\nThere is also a root “StateManager” node which is subscribed to messages contain data about “UPDATING EXISTING IDENTITIES” like “SetGlobalScore <amount>“, any “Async Computation” (object) which directly depends on changing data must subscribe to this root node.\n\nIf any data gets altered it does not happen immediately but via transactions. The computation which comes up with the new piece of data and wants to share it sends a message to the root “StateManager” node which handles the update.\nIt must check if the data is in use somewhere down in the dependency graph (which I think might be a DAG with the exception of root node): if it is used, the computation might be interrupted (which is more like an exception in my mind) and the whole state might be rolled back to proper state or “handled properly”. If it is not used the state just can be updated: the root emits the message and it propagates down.\n\nThis is just the core idea and quite vague, but the general goal is to add some safety to concurrent programming.\n\nAh, and I’d like to do that everywhere, not just on server side but on client as well! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575999932.302500",
        "client_msg_id": "f9a2bfdf-f28b-4af8-893e-aff4543a6fc7",
        "text": "orleans seems to be close to it: <https:\/\/dotnet.github.io\/orleans\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999932.302500",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1576021604.312900",
        "reply_users": [
            "UL3CJ7YKC",
            "UBN9AFS0N"
        ],
        "replies": [
            {
                "user": "UL3CJ7YKC",
                "ts": "1576000198.303000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576000800.303500"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576021604.312900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Ze",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "orleans seems to be close to it: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dotnet.github.io\/orleans\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1575999990.302900",
        "client_msg_id": "17de1241-4a7f-422f-a409-714544c7988b",
        "text": "Checking!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m2N4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Checking!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576000198.303000",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1576000239.000000"
        },
        "client_msg_id": "b23f1c0d-b048-4e8c-a721-e48366a3fe7b",
        "text": "Is it supposed to work on client side as well (standalone) ? I can’t see that as an use case at the first glance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999932.302500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lKLFu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it supposed to work on client side as well (standalone) ? I can’t see that as an use case at the first glance."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576000800.303500",
        "client_msg_id": "a6a38745-c100-453a-bdff-297237f3ce37",
        "text": "no, it's mostly for backends",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999932.302500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d6V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "no, it's mostly for backends"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1576002587.303700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1576002593.000000"
        },
        "client_msg_id": "82679df1-1522-4812-beeb-394f7bcfc91a",
        "text": "This sounds a little bit like π-calculus — <https:\/\/en.wikipedia.org\/wiki\/Π-calculus> — but with a bit more stuff added on top.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUnLW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This sounds a little bit like π-calculus — "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Π-calculus"
                            },
                            {
                                "type": "text",
                                "text": " — but with a bit more stuff added on top."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1576006989.304200",
        "client_msg_id": "52c09225-8615-45df-811a-0f7976c77d00",
        "text": "&gt; <@UF89Z7SRF> it's difficult to write patches about patches in Max\/MSP\nReminds me of the previous discussion about \"visual\" vs \"linguistic\" thinking. Linguistic thinking emphasizes words, syntax, hierarchy, while visual thinking emphasizes images, shape\/texture\/colour, spacial relationships, and part\/whole relationships. I've thought about how to turn my project Curv from a text based to a visual language, and that's one direction. I also thought about recasting Curv as a term-rewrite system, so that programs can be manipulated as data, so that more of the Curv system can be written in Curv. But that latter idea moves Curv even farther into the realm of linguistic representation. It's challenging to reconcile that with redesigning Curv as a visual language, where 2D layout and spacial relationships are the primary organizing principle, and rich, non-linear visual imagery replaces words as the means of signifying concepts. How does pattern matching work in a visual language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3sCq",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " it's difficult to write patches about patches in Max\/MSP"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of the previous discussion about \"visual\" vs \"linguistic\" thinking. Linguistic thinking emphasizes words, syntax, hierarchy, while visual thinking emphasizes images, shape\/texture\/colour, spacial relationships, and part\/whole relationships. I've thought about how to turn my project Curv from a text based to a visual language, and that's one direction. I also thought about recasting Curv as a term-rewrite system, so that programs can be manipulated as data, so that more of the Curv system can be written in Curv. But that latter idea moves Curv even farther into the realm of linguistic representation. It's challenging to reconcile that with redesigning Curv as a visual language, where 2D layout and spacial relationships are the primary organizing principle, and rich, non-linear visual imagery replaces words as the means of signifying concepts. How does pattern matching work in a visual language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576007860.304400",
        "client_msg_id": "d02f314a-c709-4ba6-ae8b-0cbcebc18f8f",
        "text": "Ty, I’ll check it out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/m5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ty, I’ll check it out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576009389.307100",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1576009421.000000"
        },
        "client_msg_id": "72cf9369-0731-4bab-a2cb-1a03bb0d9cfc",
        "text": "Another thing: I am curious how do you resonate with “Erlang + BEAM + OTP vs Java + JVM + Akka” stacks?\n\nI have almost 0 knowledge on it, read some basic articles on the comparison, but I’d really like to see what are your thoughts on that in this channel.\n\nAny theoretical or practical pennies are welcome :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "reply_count": 12,
        "reply_users_count": 3,
        "latest_reply": "1576062271.354600",
        "reply_users": [
            "UBN9AFS0N",
            "UL3CJ7YKC",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1576015974.311300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576016019.311500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576016047.311700"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576016091.311900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576016337.312300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576016371.312500"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576022117.317800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1576026127.343000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576053831.352400"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1576061560.354100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576062233.354400"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1576062271.354600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rpDAA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thing: I am curious how do you resonate with “Erlang + BEAM + OTP vs Java + JVM + Akka” stacks?\n\nI have almost 0 knowledge on it, read some basic articles on the comparison, but I’d really like to see what are your thoughts on that in this channel.\n\nAny theoretical or practical pennies are welcome "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "> programs can be manipulated as data\n> How does pattern matching work in a visual language?\nIn Lynx, all data, including functions, are passed through wires to the call sites that work on them. Basically, it's straight-up functional programming with a loose equivalence between \"variables\" and \"wires\". There isn't really a need for pattern matching.\n\nBasically it looks like this:",
        "files": [
            {
                "id": "FR52Z98CS",
                "mode": "tombstone"
            },
            {
                "id": "FR52Z91U2",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U6FKVSVCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ens",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "programs can be manipulated as data\nHow does pattern matching work in a visual language?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Lynx, all data, including functions, are passed through wires to the call sites that work on them. Basically, it's straight-up functional programming with a loose equivalence between \"variables\" and \"wires\". There isn't really a need for pattern matching.\n\nBasically it looks like this:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1576009717.308300",
        "client_msg_id": "17fe0792-3a9a-4403-a457-d91817954cbc",
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR"
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1576009764.308900",
        "client_msg_id": "74c6a0eb-aef3-4c11-88ce-bb4f66bf7359",
        "text": "The labels are added for clarity and to show correspondence to the syntactic representation, but the labels aren't semantically meaningful (or required)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S3j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The labels are added for clarity and to show correspondence to the syntactic representation, but the labels aren't semantically meaningful (or required)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1576010402.309100",
        "client_msg_id": "9fd05851-8580-4a32-8274-414fee6aaca5",
        "text": "<@UC2A2ARPT> you've got me reading Milner's tutorial at <http:\/\/www.lfcs.inf.ed.ac.uk\/reports\/91\/ECS-LFCS-91-180\/ECS-LFCS-91-180.ps>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y1nNd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " you've got me reading Milner's tutorial at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.lfcs.inf.ed.ac.uk\/reports\/91\/ECS-LFCS-91-180\/ECS-LFCS-91-180.ps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1576010643.309300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1576010694.000000"
        },
        "client_msg_id": "9c4cd836-73b7-4f3f-af6a-9ab7ce58bc13",
        "text": "Let me know what you think. I've only gone as far as buying his book (&lt;https:\/\/archive.org\/details\/communicatingmob00robi&gt;) and reading the first few chapters. _So many things..._",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MlH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me know what you think. I've only gone as far as buying his book ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.org\/details\/communicatingmob00robi"
                            },
                            {
                                "type": "text",
                                "text": ") and reading the first few chapters. "
                            },
                            {
                                "type": "text",
                                "text": "So many things...",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576011596.309800",
        "client_msg_id": "724c62ff-fa0a-46ed-b67a-2ba95dc59a42",
        "text": "Seems useful for pi calculus:\n<https:\/\/www.youtube.com\/watch?v=WO8rGA8AjD0>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "1 - Introduction to Pi Calculus",
                "title_link": "https:\/\/www.youtube.com\/watch?v=WO8rGA8AjD0",
                "author_name": "Jake Gillberg",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC_ZTjtesw3tARDala42iFvA",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/WO8rGA8AjD0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: 1 - Introduction to Pi Calculus",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/WO8rGA8AjD0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=WO8rGA8AjD0",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=WO8rGA8AjD0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HcK6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems useful for pi calculus:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=WO8rGA8AjD0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1576012049.310100",
        "client_msg_id": "4ba9a21e-968d-4f59-b8c5-969228413945",
        "text": "<@U6FKVSVCK> What you show above is good for writing functions over scalar values. Pattern matching is useful for decomposing data structures. Lynx has lists. I assume there is a general N-list constructor: N wires in, 1 wire out. An N-list pattern would be the reverse: 1 wire in, N wires out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uZf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " What you show above is good for writing functions over scalar values. Pattern matching is useful for decomposing data structures. Lynx has lists. I assume there is a general N-list constructor: N wires in, 1 wire out. An N-list pattern would be the reverse: 1 wire in, N wires out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1576012561.310300",
        "client_msg_id": "3f8d0132-9300-4ddb-9344-b599e4656f5d",
        "text": "<@UJN1TAYEQ> I don't (currently) opt for lisp's homoiconicity approach— `list` is its own data type distinct from expressions (though that's not necessarily set in stone). So there will be natural functions over lists (append, reverse, extract, ...), and functions over functions (map, apply, reduce, ...); and eventually introspection functions on functions, which will probably work like graph-walking ops.\n\nBut a list\/tree\/struct\/etc. can flow through those wires just as easily as a scalar. In the above diagrams, there are already wires carrying functions to their application sites.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kAQu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I don't (currently) opt for lisp's homoiconicity approach— "
                            },
                            {
                                "type": "text",
                                "text": "list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is its own data type distinct from expressions (though that's not necessarily set in stone). So there will be natural functions over lists (append, reverse, extract, ...), and functions over functions (map, apply, reduce, ...); and eventually introspection functions on functions, which will probably work like graph-walking ops.\n\nBut a list\/tree\/struct\/etc. can flow through those wires just as easily as a scalar. In the above diagrams, there are already wires carrying functions to their application sites."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Ops on composite structures:",
        "files": [
            {
                "id": "FRHUZNLJ1",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U6FKVSVCK",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iq9tJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ops on composite structures:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1576012750.310900",
        "client_msg_id": "A3957FB8-E819-48F2-87DF-32515009FEDC",
        "thread_ts": "1575957899.255600",
        "parent_user_id": "UPDJV04FR"
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576015974.311300",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1576016242.000000"
        },
        "client_msg_id": "bfa5723b-a333-4b52-9e60-4c84d8cd19ab",
        "text": "the BEAM has green threads, preemptive multitasking for processes, and per process heaps\/GC.\n\nthe JVM doesn't have native green threads, actors build on top are cooperative and has a global heap. I can expand if you want :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KG4GS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the BEAM has green threads, preemptive multitasking for processes, and per process heaps\/GC.\n\nthe JVM doesn't have native green threads, actors build on top are cooperative and has a global heap. I can expand if you want "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576016019.311500",
        "client_msg_id": "0ea8a47a-ff17-49ca-8a21-8c40fc62bfa3",
        "text": "also the BEAM is immutable, messages are copied when sent, actors on the JVM can send mutable objects and then you loose some guarantees, because another actor can corrupt your state.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Eno",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also the BEAM is immutable, messages are copied when sent, actors on the JVM can send mutable objects and then you loose some guarantees, because another actor can corrupt your state."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576016047.311700",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1576016281.000000"
        },
        "client_msg_id": "7ba5fe20-eff7-400c-9180-392fcbf27631",
        "text": "the BEAM has builtin process monitoring, and transparent processes (you can send a message to a process identifier without caring if it's in the same node or somewhere else), builtin clustering through distributed erlang.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f6m0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the BEAM has builtin process monitoring, and transparent processes (you can send a message to a process identifier without caring if it's in the same node or somewhere else), builtin clustering through distributed erlang."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576016091.311900",
        "client_msg_id": "c5fd249a-4bb2-4cfb-ba6c-4955fdbc6c08",
        "text": "most of BEAM features have some JVM equivalents, but the BEAM is built from the ground up to solve those problems",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R5f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "most of BEAM features have some JVM equivalents, but the BEAM is built from the ground up to solve those problems"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576016337.312300",
        "client_msg_id": "4037e9f9-4bca-4962-aeef-f4fd5a899c35",
        "text": "akka (jvm) and orleans (.net) are the closest things, personally I like orleans more",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Ep",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "akka (jvm) and orleans (.net) are the closest things, personally I like orleans more"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1576016371.312500",
        "client_msg_id": "70f14a60-bc29-40e4-84ad-bb55b21c82fe",
        "text": "but I'm not really used to the .net ecosystem so it's hard to try for me. But F# looks really interesting",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nmPRy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but I'm not really used to the .net ecosystem so it's hard to try for me. But F# looks really interesting"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576021604.312900",
        "client_msg_id": "07884c1b-2249-47b3-83f6-11aa59e2449e",
        "text": "ty",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999932.302500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qm1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ty"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1576022117.317800",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1576022205.000000"
        },
        "client_msg_id": "5526b1df-1b1e-436a-a3ce-70b342e65c29",
        "text": "<@UBN9AFS0N> Ahh that is really useful! Especially the fact orleans is something similar! Thanks a lot!\n\nCould you please expand on these? :)\n• “Actors build on top are *cooperative*”\n• “messages are copied when sent” - how is that not possible on jvm\/akka? It is, right? Or with some downside opposed to the erlang version?\n• “most of BEAM features have some JVM equivalents, but the BEAM is built from the ground up to solve those problems” - Is it possible that on the long run virtually all features will be implemented on JVM and with the perf + ecosystem difference BEAM will slowly fade away? If you would not bet on that, why?\n• “I like orleans more” - that is interesting! Why is that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fz2J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " Ahh that is really useful! Especially the fact orleans is something similar! Thanks a lot!\n\nCould you please expand on these? :)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“Actors build on top are "
                                    },
                                    {
                                        "type": "text",
                                        "text": "cooperative",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "”"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“messages are copied when sent” - how is that not possible on jvm\/akka? It is, right? Or with some downside opposed to the erlang version?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“most of BEAM features have some JVM equivalents, but the BEAM is built from the ground up to solve those problems” - Is it possible that on the long run virtually all features will be implemented on JVM and with the perf + ecosystem difference BEAM will slowly fade away? If you would not bet on that, why?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“I like orleans more” - that is interesting! Why is that?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UP6G25H35",
        "type": "message",
        "ts": "1576025152.342800",
        "edited": {
            "user": "UP6G25H35",
            "ts": "1576026191.000000"
        },
        "client_msg_id": "4ae30851-3116-40d4-a65b-11a3f6323790",
        "text": "Low-code\/no code\/red-lang\/spreadsheets etc - I have been thinking about no-code apps etc, the problem of how to make programming more accessible. When it comes to making programming more accessible, one challenge that I see is combining the UI, data store and calculations. It is a challenge to combine these in a way that is accessible to the masses. An example of the challenge is no-code applications. There are many no-code applications that make it easy to edit the UI and data store. They offer an easy to use solution with very little learning. But don't make calculations available. A similar problem with most low-code applications, the calculations part of low code applications is typically not accessible in the way that a spreadsheet is, for example. ... Or there is red-lang, it does a good job of linking UI and calculations, but the data store is, as far as I can tell, a regular external database.  ... Or take a spreadsheet, it is good at data storage and calculations, these are both accessible with very little learning, but the UI is a problem, you can't create a regular UI with a spreadsheet, you need to use the grid. Or look at scratch (drag and drop coding) it makes calculations and game style UI available, you can create complex games with it, I was surprised how complex, and it is easy to learn, but does not do data storage or data i\/o style UI. .... The hard thing looks to be making UI, data store and calculations work as one. So the calculations can do validation and control writes to the data store. So the calculations are able to produce a responsive UI that guides the user. So the data from the data store is visible and editable in the UI.  ... it looks to be a hard problem to make the UI, data store and calculations work together. It can be a challenge to do this in a good programming language, and very hard to create something that is easy for people to learn.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "57dceb337de9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-12\/870368572213_57dceb337de9d471d315_72.jpg",
            "first_name": "Eddy",
            "real_name": "Eddy Parkinson",
            "display_name": "Eddy Parkinson",
            "team": "T5TCAFTA9",
            "name": "eddyparkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1576197372.390200",
        "reply_users": [
            "UEBG0NPDK",
            "ULM3U6275",
            "UP6G25H35",
            "UEQ6M68H0",
            "UE6EFEPTQ"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1576026755.343300"
            },
            {
                "user": "ULM3U6275",
                "ts": "1576032315.346600"
            },
            {
                "user": "ULM3U6275",
                "ts": "1576032569.350400"
            },
            {
                "user": "UP6G25H35",
                "ts": "1576037009.351200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576043072.351700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1576043137.351900"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1576055863.352700"
            },
            {
                "user": "UP6G25H35",
                "ts": "1576110073.370400"
            },
            {
                "user": "UP6G25H35",
                "ts": "1576110315.370600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1576110375.370800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1576197372.390200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eUp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Low-code\/no code\/red-lang\/spreadsheets etc - I have been thinking about no-code apps etc, the problem of how to make programming more accessible. When it comes to making programming more accessible, one challenge that I see is combining the UI, data store and calculations. It is a challenge to combine these in a way that is accessible to the masses. An example of the challenge is no-code applications. There are many no-code applications that make it easy to edit the UI and data store. They offer an easy to use solution with very little learning. But don't make calculations available. A similar problem with most low-code applications, the calculations part of low code applications is typically not accessible in the way that a spreadsheet is, for example. ... Or there is red-lang, it does a good job of linking UI and calculations, but the data store is, as far as I can tell, a regular external database.  ... Or take a spreadsheet, it is good at data storage and calculations, these are both accessible with very little learning, but the UI is a problem, you can't create a regular UI with a spreadsheet, you need to use the grid. Or look at scratch (drag and drop coding) it makes calculations and game style UI available, you can create complex games with it, I was surprised how complex, and it is easy to learn, but does not do data storage or data i\/o style UI. .... The hard thing looks to be making UI, data store and calculations work as one. So the calculations can do validation and control writes to the data store. So the calculations are able to produce a responsive UI that guides the user. So the data from the data store is visible and editable in the UI.  ... it looks to be a hard problem to make the UI, data store and calculations work together. It can be a challenge to do this in a good programming language, and very hard to create something that is easy for people to learn."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "URDRJEWS0",
                    "UPDJV04FR"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1576026127.343000",
        "client_msg_id": "ea82d211-497d-46ea-9550-1bd082acb99c",
        "text": "In Erlang\/BEAM the runtime partitions the memory into isolated heaps. Cross heap references are not possible. All code evaluation is done by the runtime so all objects created only refer to the local heap. If you send something over to another heap, it is copied. This is similar to how Unix processes have isolated heaps.\n\nThe JVM is one big heap and any object cam refer to any other object anywhere. The runtime itself doesn't prevent any references. Now if you implement a framework on top that creates partitioned heaps and allows copying - you can only get so far. There will always be holes and once you use any shared library outside your framework, all bets are off. This kind of isolation is very hard to retrofit. Python has the same limitation (as Java).\n\nA similar thing happens with lightweight threads. The Erlang runtime decides which heap\/process (each heap is associated with a process) gets to run for how many steps. Then it can run another process for some steps. The multiplexing is preemptive so no tight loop can starve other processes. With user threads in Java, the code is supposed to call `yield` or something like that every so often and only then control goes back to the main loop which will schedule another thread. You can have starvation and latency spikes. Again this is hard to retrofit. The only preemptive scheduling available in JVM uses the (heavy) system threads.\n\nFWIW, I think the Erlang isolated heap lightweight process model is great. Go copied the lightweight process (with preemptive scheduling) but it still uses a single heap.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576009389.307100",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P0hPJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Erlang\/BEAM the runtime partitions the memory into isolated heaps. Cross heap references are not possible. All code evaluation is done by the runtime so all objects created only refer to the local heap. If you send something over to another heap, it is copied. This is similar to how Unix processes have isolated heaps.\n\nThe JVM is one big heap and any object cam refer to any other object anywhere. The runtime itself doesn't prevent any references. Now if you implement a framework on top that creates partitioned heaps and allows copying - you can only get so far. There will always be holes and once you use any shared library outside your framework, all bets are off. This kind of isolation is very hard to retrofit. Python has the same limitation (as Java).\n\nA similar thing happens with lightweight threads. The Erlang runtime decides which heap\/process (each heap is associated with a process) gets to run for how many steps. Then it can run another process for some steps. The multiplexing is preemptive so no tight loop can starve other processes. With user threads in Java, the code is supposed to call "
                            },
                            {
                                "type": "text",
                                "text": "yield",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or something like that every so often and only then control goes back to the main loop which will schedule another thread. You can have starvation and latency spikes. Again this is hard to retrofit. The only preemptive scheduling available in JVM uses the (heavy) system threads.\n\nFWIW, I think the Erlang isolated heap lightweight process model is great. Go copied the lightweight process (with preemptive scheduling) but it still uses a single heap."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1576026755.343300",
        "client_msg_id": "5d7b87af-122a-4ee1-b1bd-0962151b3684",
        "text": "Take a look at Eve: <http:\/\/witheve.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "attachments": [
            {
                "title": "Eve",
                "title_link": "http:\/\/witheve.com\/",
                "text": "Eve: Programming designed for humans.",
                "fallback": "Eve",
                "from_url": "http:\/\/witheve.com\/",
                "service_name": "witheve.com",
                "id": 1,
                "original_url": "http:\/\/witheve.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JEV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Take a look at Eve: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/witheve.com\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1576030892.343600",
        "client_msg_id": "d6653525-6127-4ef4-b2ce-bf7e79cd0cd1",
        "text": "<@UR482RFPY> just came across this <http:\/\/tomasp.net\/academic\/papers\/inforich\/inforich-msr.pdf> . Seems to be a decent amount of work in this area in F#",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575413468.408200",
        "parent_user_id": "UR482RFPY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BTy2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UR482RFPY"
                            },
                            {
                                "type": "text",
                                "text": " just came across this "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/tomasp.net\/academic\/papers\/inforich\/inforich-msr.pdf"
                            },
                            {
                                "type": "text",
                                "text": " . Seems to be a decent amount of work in this area in F#"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UR482RFPY",
        "type": "message",
        "ts": "1576031213.343800",
        "client_msg_id": "103a6aba-f49e-46ef-bd54-d6b842109fb9",
        "text": "Thanks <@UMVFWPZ36>, I'll check it out",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0c567409952",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0c5674099527c19ca0eccac4f2309515.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Paul Butler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "paulgb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575413468.408200",
        "parent_user_id": "UR482RFPY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0UB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": ", I'll check it out"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1576032315.346600",
        "client_msg_id": "27F5A06C-ABE8-4172-8F17-25FF72414347",
        "text": "You’ve hit the nail on the head. Every FoC project I’m aware of misses the mark on some combination of UI, storage, or “calculation”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0gsY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You’ve hit the nail on the head. Every FoC project I’m aware of misses the mark on some combination of UI, storage, or “calculation”."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1576032569.350400",
        "client_msg_id": "188B88DD-2017-4760-9753-E8A7E082FAE2",
        "text": "I would add that (I suspect) the reason for this is that none are focused on reusability, which is why they don’t consider having to reimplement the missing aspects as a problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mip",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would add that (I suspect) the reason for this is that none are focused on reusability, which is why they don’t consider having to reimplement the missing aspects as a problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT",
                    "UKP3B2J5D",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1576034225.351000",
        "client_msg_id": "3978BC99-E2C4-4539-B9CC-D7CD7407CFBA",
        "text": "Anarchists unite!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575912122.225300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UyNT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anarchists unite!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bomb",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UP6G25H35",
        "type": "message",
        "ts": "1576037009.351200",
        "client_msg_id": "5cea17e7-40eb-4b9b-91c0-4facfd459bdf",
        "text": "<@ULM3U6275> I assume you mean code reuse. Code reuse is an interesting problem. Thinking about it, it is almost as if code reuse makes the problem hard. e.g. a database is code, a button is code, string search is code. They all tend to exist separately from each other. I suspect some of this is standards for the data. They all have data that goes in\/out, they need the right data to work correctly. .... interesting topic, I will think about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "57dceb337de9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-12\/870368572213_57dceb337de9d471d315_72.jpg",
            "first_name": "Eddy",
            "real_name": "Eddy Parkinson",
            "display_name": "Eddy Parkinson",
            "team": "T5TCAFTA9",
            "name": "eddyparkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "90WY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " I assume you mean code reuse. Code reuse is an interesting problem. Thinking about it, it is almost as if code reuse makes the problem hard. e.g. a database is code, a button is code, string search is code. They all tend to exist separately from each other. I suspect some of this is standards for the data. They all have data that goes in\/out, they need the right data to work correctly. .... interesting topic, I will think about it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1576042756.351400",
        "client_msg_id": "ed408837-02cf-4c49-9c43-58293258a740",
        "text": "My Beads language does this type of subscription system, with dependency analysis. Dependency analysis was really put forth in PROLOG, and we haven't seen much of it for a very long time. You are entirely correct that this approach solves some, but not all, issues of concurrent programming. It works wonders for multiplayer games, but does not solve the issue of contradictory transactions, which in business is not really done outside of bitcoin-like stuff, because once you transfer money to a bank account, there is nothing stopping the party from further transferring it; so one in general business does not presume unwindability. Traditionally you issue a credit or debit to cancel out the prior transaction, but you don't erase anything ever.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XJ8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My Beads language does this type of subscription system, with dependency analysis. Dependency analysis was really put forth in PROLOG, and we haven't seen much of it for a very long time. You are entirely correct that this approach solves some, but not all, issues of concurrent programming. It works wonders for multiplayer games, but does not solve the issue of contradictory transactions, which in business is not really done outside of bitcoin-like stuff, because once you transfer money to a bank account, there is nothing stopping the party from further transferring it; so one in general business does not presume unwindability. Traditionally you issue a credit or debit to cancel out the prior transaction, but you don't erase anything ever."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1576043072.351700",
        "client_msg_id": "b030d2db-0fe7-4c4c-b491-3a951e827a58",
        "text": "<@UP6G25H35> I believe you are correct that the core problem holding back reuseability of code is the lack of a general purpose, extendable, data structure standard that allows differing modules to share and add information without disturbing other modules' functions. VB6 surprisingly got very close to this system by having little tables, and you could add fields to existing things. Java allowed you to add properties, and achieves some semblance of  extensibility, but its clumsiness made the perusal of data structures (i believe they call it reflection in the Java universe) painful. It is indeed a very interesting topic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iD\/Ns",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP6G25H35"
                            },
                            {
                                "type": "text",
                                "text": " I believe you are correct that the core problem holding back reuseability of code is the lack of a general purpose, extendable, data structure standard that allows differing modules to share and add information without disturbing other modules' functions. VB6 surprisingly got very close to this system by having little tables, and you could add fields to existing things. Java allowed you to add properties, and achieves some semblance of  extensibility, but its clumsiness made the perusal of data structures (i believe they call it reflection in the Java universe) painful. It is indeed a very interesting topic."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP6G25H35"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1576043137.351900",
        "client_msg_id": "193351e4-4682-4eec-b0de-86e5478cd929",
        "text": "Myself i am building my system for the new hardware in the pipeline which requires a new model of computation, as RAM will become non-volatile.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1576025152.342800",
        "parent_user_id": "UP6G25H35",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Myself i am building my system for the new hardware in the pipeline which requires a new model of computation, as RAM will become non-volatile."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]