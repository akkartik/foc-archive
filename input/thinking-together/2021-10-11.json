[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1633940541.319300",
        "client_msg_id": "c833e4df-7341-406f-bb23-94bed0dd1d23",
        "text": "I created a language with similar ideas a while ago, it's almost complete: <https:\/\/github.com\/marianoguerra\/interfix>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "GitHub - marianoguerra\/interfix: an experimental programming language for the erlang vm that is actually useful",
                "title_link": "https:\/\/github.com\/marianoguerra\/interfix",
                "text": "an experimental programming language for the erlang vm that is actually useful - GitHub - marianoguerra\/interfix: an experimental programming language for the erlang vm that is actually useful",
                "fallback": "GitHub: GitHub - marianoguerra\/interfix: an experimental programming language for the erlang vm that is actually useful",
                "image_url": "https:\/\/opengraph.githubassets.com\/71efae758328409f36c5c17e541cd29676e27d757a87e4af6b26ae8082b8276b\/marianoguerra\/interfix",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https:\/\/github.com\/marianoguerra\/interfix",
                "image_bytes": 91669,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/marianoguerra\/interfix"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEq79",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I created a language with similar ideas a while ago, it's almost complete: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/marianoguerra\/interfix"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "open_mouth",
                "users": [
                    "UCGAK10LS",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1633945296.319900",
        "client_msg_id": "c856fe5e-d51b-4134-adfb-55e7f8d337a1",
        "text": "<@U025PBD75TM> technically the purpose of _predictive_ Machine Learning models is to _generalize_ (somewhat) beyond what they saw in the training data. And indeed they are evaluated on data they never saw in training. But in reality this generalization goes only this far, and not really applicable to kinda \"open world\" scenarios like driving.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633370115.276200",
        "parent_user_id": "U02FYPLHU67",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NdRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U025PBD75TM"
                            },
                            {
                                "type": "text",
                                "text": " technically the purpose of "
                            },
                            {
                                "type": "text",
                                "text": "predictive",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Machine Learning models is to "
                            },
                            {
                                "type": "text",
                                "text": "generalize",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (somewhat) beyond what they saw in the training data. And indeed they are evaluated on data they never saw in training. But in reality this generalization goes only this far, and not really applicable to kinda \"open world\" scenarios like driving."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1633945505.320100",
        "client_msg_id": "6cf5c7ec-a70d-48e9-94bf-21ae4b8229b1",
        "text": "I'm sorry but did you reinvent Agda's Mixfix syntax? :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "unCu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm sorry but did you reinvent Agda's Mixfix syntax? "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1633946551.320300",
        "client_msg_id": "1609c8c3-0e77-44e8-a4d2-4ff436b60ab0",
        "text": "never saw it, so coinvented :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g+G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "never saw it, so coinvented "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "U027P92A0N5"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1633946599.320500",
        "client_msg_id": "2914f7b6-5c5b-4f44-8b86-20bc311e7e0c",
        "text": "interfix doesn't require the underscores",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qxirs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interfix doesn't require the underscores"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1633951681.320800",
        "client_msg_id": "9cdc062f-93e8-4351-ab12-66edd9598f85",
        "text": "Just to check, I understood that there will be a dedicated couple of days or weekend for doing the reviews, kind of like a small event. Is that correct, or are we supposed to do the reviews as we go? I kind of liked the idea of dedicated time to focus on it, all of us.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tpwT\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just to check, I understood that there will be a dedicated couple of days or weekend for doing the reviews, kind of like a small event. Is that correct, or are we supposed to do the reviews as we go? I kind of liked the idea of dedicated time to focus on it, all of us."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02FYPLHU67",
        "type": "message",
        "ts": "1633951807.321000",
        "edited": {
            "user": "U02FYPLHU67",
            "ts": "1633951870.000000"
        },
        "client_msg_id": "f4a60532-3f2b-4760-988b-e9e9944f417b",
        "text": "You can call me a convert and subscribe me to your heresy :stuck_out_tongue:\n\nI've always been convinced of the need to reduce the syntax needed in formal end-user languages, and decoupling parameters from their exact position is a basic tool for that; passing parameters by name instead of position was an improvement in post-C languages, so it's easy to imagine what benefits that style can bring.\n\nI'll go deeper into heresy: in a visual environment (think e.g. a spreadsheet or graphical design tool), _you don't even need the function name to be adjacent to the parameters_; the environment itself can suggest the list of nearby locally available values that are compatible with the function's input types, and the user chooses which one is appropriate. Applying functions becomes a point&amp;click interaction rather than recalling which syntax I need.\n\nThis can even depend on named parameters. Think of an IDE where, when you're passing a parameter to a function, \"intellisense\" suggests all nearby variables in scope with the right type that could be used for that parameter. Conversely, you could select a value and type a parameter name over it, and it could suggest function names that use that type of the value with that parameter name as a role for the value, so that the user to choose the most adequate suggested function. How many less API reference queries would it take for the user of this system?\n\nIn this style of coding, the structure of connections is more important than the concrete syntax of the text you create them with. In my opinion visual languages are the ones that can benefit the most from this separation between structure and placement, as perfect placement of values w.r.t. functions in a graphical environment is more difficult than with raw text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "da03e6d17065",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-28\/2536072635510_da03e6d17065db49a1d3_72.jpg",
            "first_name": "Diego",
            "real_name": "Diego Moya",
            "display_name": "dialmove",
            "team": "T5TCAFTA9",
            "name": "dialmove",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ozmH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can call me a convert and subscribe me to your heresy "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI've always been convinced of the need to reduce the syntax needed in formal end-user languages, and decoupling parameters from their exact position is a basic tool for that; passing parameters by name instead of position was an improvement in post-C languages, so it's easy to imagine what benefits that style can bring.\n\nI'll go deeper into heresy: in a visual environment (think e.g. a spreadsheet or graphical design tool), "
                            },
                            {
                                "type": "text",
                                "text": "you don't even need the function name to be adjacent to the parameters",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; the environment itself can suggest the list of nearby locally available values that are compatible with the function's input types, and the user chooses which one is appropriate. Applying functions becomes a point&click interaction rather than recalling which syntax I need.\n\nThis can even depend on named parameters. Think of an IDE where, when you're passing a parameter to a function, \"intellisense\" suggests all nearby variables in scope with the right type that could be used for that parameter. Conversely, you could select a value and type a parameter name over it, and it could suggest function names that use that type of the value with that parameter name as a role for the value, so that the user to choose the most adequate suggested function. How many less API reference queries would it take for the user of this system?\n\nIn this style of coding, the structure of connections is more important than the concrete syntax of the text you create them with. In my opinion visual languages are the ones that can benefit the most from this separation between structure and placement, as perfect placement of values w.r.t. functions in a graphical environment is more difficult than with raw text."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1633952281.321400",
        "client_msg_id": "dc6fc735-f266-4267-ad31-12208748cb74",
        "text": "there will be one week to do and submit the reviews, probably by the end of november",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9mjs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there will be one week to do and submit the reviews, probably by the end of november"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUB7RA7PF"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1633954775.321600",
        "client_msg_id": "1e6d3bcb-3c9e-4077-bf65-e979dbe10683",
        "text": "Yes, me too , but I am very happy with the pre-review that Kartik did. It certainly will help me to get more out of the reviews and preventing install-issues.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lRbcy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, me too , but I am very happy with the pre-review that Kartik did. It certainly will help me to get more out of the reviews and preventing install-issues."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUB7RA7PF"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633957607.322100",
        "client_msg_id": "534bfd9f-fa27-4708-a1c8-2f8ccc6eff35",
        "text": "Vaguely related: <https:\/\/lobste.rs\/s\/jol24u\/better_operator_precedence|https:\/\/lobste.rs\/s\/jol24u\/better_operator_precedence>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dr8c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Vaguely related: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lobste.rs\/s\/jol24u\/better_operator_precedence",
                                "text": "https:\/\/lobste.rs\/s\/jol24u\/better_operator_precedence"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633957771.322300",
        "client_msg_id": "546686ca-5d26-4d96-8746-dbeaa663c4e4",
        "text": "&gt; However, that call would match nothing, so you'd get a compile time error.\n&gt; \n<@UCGAK10LS> could you explain how? I imagined it'd match both.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fGqGX",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, that call would match nothing, so you'd get a compile time error.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " could you explain how? I imagined it'd match both."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1633989791.322600",
        "client_msg_id": "4e872a01-0781-43f9-98a2-55115bcb792f",
        "text": "Natural languages split into synthetic (eg Russian, Turkish) and analytic (eg English, Chinese) languages (very roughly). Synthetic languages do a lot of agglunitation and morphology, for example they have cases like accusative or locative and lots of agreement. Analytic languages don't bother much with aggrement and morphology (which is also why NLP on English always starts off so easily). But that comes with a price: English has a relatively fixed word order, whereas in Russian you can basically order the words in your sentence almost any way you like.\n\nSo from that we learn that in order to avoid ambiguity, if we could tag the tokens in our programming language with a 'case', we could get away with much more free token order in each statement.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "70bt9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Natural languages split into synthetic (eg Russian, Turkish) and analytic (eg English, Chinese) languages (very roughly). Synthetic languages do a lot of agglunitation and morphology, for example they have cases like accusative or locative and lots of agreement. Analytic languages don't bother much with aggrement and morphology (which is also why NLP on English always starts off so easily). But that comes with a price: English has a relatively fixed word order, whereas in Russian you can basically order the words in your sentence almost any way you like.\n\nSo from that we learn that in order to avoid ambiguity, if we could tag the tokens in our programming language with a 'case', we could get away with much more free token order in each statement."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMVFWPZ36",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633991515.323000",
        "client_msg_id": "8231907a-87e6-46d1-a2cb-09ef9582299b",
        "text": "<@U01AD80KMLK> Do you mean we could let the programmer choose the order of tokens for each function call? If so, I'd consider that an anti-feature, because now there are many syntaxes for the same call, and we can no longer exploit our \"shape recognition\" capabilities to quickly identify a function. There's merit to only allowing the _definer_ of the function to choose the token order. But perhaps I'm missing your point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6OoE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01AD80KMLK"
                            },
                            {
                                "type": "text",
                                "text": " Do you mean we could let the programmer choose the order of tokens for each function call? If so, I'd consider that an anti-feature, because now there are many syntaxes for the same call, and we can no longer exploit our \"shape recognition\" capabilities to quickly identify a function. There's merit to only allowing the "
                            },
                            {
                                "type": "text",
                                "text": "definer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the function to choose the token order. But perhaps I'm missing your point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1633991584.323200",
        "client_msg_id": "81b56553-8e75-4df0-8a6d-386e6d8f26f4",
        "text": "Yes, that was my suggestion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, that was my suggestion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633991647.323400",
        "client_msg_id": "d83b0829-e1a8-44d8-a67e-1054213ec1a2",
        "text": "Do you think there are benefits to that level of freedom? Would it help Russians write more readable code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cKX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you think there are benefits to that level of freedom? Would it help Russians write more readable code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633992465.323600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633992558.000000"
        },
        "client_msg_id": "510cae56-fa6f-41c9-99f7-8d3a5a4173cd",
        "text": "<@ULYDR7EP3> We've probably got different ideas about the underlying semantics. If I had to guess, you're thinking of each symbol in the sequence `(a b c)` as a _value_. In contrast, I was thinking of each symbol as a \"piece of syntax\" that helps identify which function to call.\n\nUnder your interpretation, `(fun1 fun2 var3)` is ambiguous, because it could be interpreted as passing the symbolic value \"fun2\" to the fun1 function, or as passing the symbolic value \"fun1\" to the fun2 function.\n\nUnder my interpretation, there is no function definition with the signature `(fun1 fun2 .)`, so you get a compile-time error.\n\nBut since starting this thread, I've actually been trending towards the first interpretation. It might turn out to be \"nicer\" in practice, especially as an alternative to passing strings around everywhere. But I think you'd now want\/need variable references to be distinguished from symbols, using the `&amp;` syntax as you mentioned, or even just the parentheses (after all, a variable reference is just a function call with zero arguments). So a function call would look like `fun1 (a) (b)` or `fun1 &amp;a &amp;b`. Though I've been thinking about a more lightweight syntax inspired by Rust's lifetime syntax: `fun1 'a 'b`. It's probably necessary to avoid parentheses\/syntax hell.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/9EmJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULYDR7EP3"
                            },
                            {
                                "type": "text",
                                "text": " We've probably got different ideas about the underlying semantics. If I had to guess, you're thinking of each symbol in the sequence "
                            },
                            {
                                "type": "text",
                                "text": "(a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a "
                            },
                            {
                                "type": "text",
                                "text": "value",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". In contrast, I was thinking of each symbol as a \"piece of syntax\" that helps identify which function to call.\n\nUnder your interpretation, "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 fun2 var3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is ambiguous, because it could be interpreted as passing the symbolic value \"fun2\" to the fun1 function, or as passing the symbolic value \"fun1\" to the fun2 function.\n\nUnder my interpretation, there is no function definition with the signature "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 fun2 .)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", so you get a compile-time error.\n\nBut since starting this thread, I've actually been trending towards the first interpretation. It might turn out to be \"nicer\" in practice, especially as an alternative to passing strings around everywhere. But I think you'd now want\/need variable references to be distinguished from symbols, using the "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax as you mentioned, or even just the parentheses (after all, a variable reference is just a function call with zero arguments). So a function call would look like "
                            },
                            {
                                "type": "text",
                                "text": "fun1 (a) (b)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "fun1 &a &b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Though I've been thinking about a more lightweight syntax inspired by Rust's lifetime syntax: "
                            },
                            {
                                "type": "text",
                                "text": "fun1 'a 'b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It's probably necessary to avoid parentheses\/syntax hell."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULYDR7EP3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633993018.324100",
        "client_msg_id": "bad05507-5672-4dba-8070-99f1ba5be523",
        "text": "Since we're all wild heretic here: How about capitalization carrying syntactic significance? Small initial letter means it's part of the invoked function name, e.g. `fun1 Fun2 Var3` means invoke fun1 with fun2 and var3 as arguments, while `Fun1 fun2 Var3` means to invoke fun2.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3g6i6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since we're all wild heretic here: How about capitalization carrying syntactic significance? Small initial letter means it's part of the invoked function name, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "fun1 Fun2 Var3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " means invoke fun1 with fun2 and var3 as arguments, while "
                            },
                            {
                                "type": "text",
                                "text": "Fun1 fun2 Var3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " means to invoke fun2."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633993107.324300",
        "client_msg_id": "52120ea0-58d9-4250-9192-11b270234b0b",
        "text": "So essentially, capital first letter instead of `&amp;`. The heretical part would be to have the first character (or all characters) in identifiers be case insensitive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LZ2gQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So essentially, capital first letter instead of "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The heretical part would be to have the first character (or all characters) in identifiers be case insensitive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633993341.324500",
        "client_msg_id": "260d6a68-51c7-47c6-9b7e-a957cbfdd60b",
        "text": "Would that be giving special treatment to Latin-based alphabets though? It would be nice to support arbitrary Unicode. Imagine asking someone writing in Hiragana to start their words with an English letter!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+4o+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would that be giving special treatment to Latin-based alphabets though? It would be nice to support arbitrary Unicode. Imagine asking someone writing in Hiragana to start their words with an English letter!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULYDR7EP3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633993514.324700",
        "client_msg_id": "fa5fe6e8-70bc-497e-866b-f1080a9ceda0",
        "text": "Also, that proposal wouldn't work with symbols like `+` and `*`. But I do like the sneakiness of it :wink:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+LD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, that proposal wouldn't work with symbols like "
                            },
                            {
                                "type": "text",
                                "text": "+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But I do like the sneakiness of it "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633995899.324900",
        "client_msg_id": "470b6c54-012e-474b-b5c4-7f5223d96b54",
        "text": "True. \"First character in Katakana or upper-case Latin!\" :-D",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SeH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "True. \"First character in Katakana or upper-case Latin!\" :-D"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633997151.325200",
        "client_msg_id": "cb7a24d5-b5a6-4886-b536-1641962d5bbb",
        "text": "<@U02FYPLHU67> I think there's a lot of merit to ensuring identical function calls have an identical visual structure. Readability\/skimmability is one of my key concerns. I am definitely interested in smart IDEs, but I'm not sure that _requiring_ the use of a smart IDE to specify arguments (rather than having a rigid syntax) is a good thing. If you had this, I'd hope the manipulations would be immediately serialized back into a rigid textual form that is easily skimmable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wL3k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02FYPLHU67"
                            },
                            {
                                "type": "text",
                                "text": " I think there's a lot of merit to ensuring identical function calls have an identical visual structure. Readability\/skimmability is one of my key concerns. I am definitely interested in smart IDEs, but I'm not sure that "
                            },
                            {
                                "type": "text",
                                "text": "requiring",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the use of a smart IDE to specify arguments (rather than having a rigid syntax) is a good thing. If you had this, I'd hope the manipulations would be immediately serialized back into a rigid textual form that is easily skimmable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1634015682.325500",
        "client_msg_id": "baf61d36-21bd-478c-9ee9-227e057012e4",
        "text": "<@UJBAJNFLK> To enable the writing of expressions like `(2 + 3 + 4)`, I'm now wondering if I can extend my proposed function call syntax to something based on *regexes*. For example, to parse the aforementioned expression you might be able to write a function signature like:\n`&amp;x (+ &amp;y)* = ...`\n\nAnd then `&amp;y` would be assigned a *list* of numbers, rather than a single number.\n\nOf course, regular expressions aren't known for being easy to understand. Perhaps I could find a somewhat simpler pattern language that still allows the description of arbitrary-length expressions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8z9NF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " To enable the writing of expressions like "
                            },
                            {
                                "type": "text",
                                "text": "(2 + 3 + 4)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I'm now wondering if I can extend my proposed function call syntax to something based on "
                            },
                            {
                                "type": "text",
                                "text": "regexes",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". For example, to parse the aforementioned expression you might be able to write a function signature like:\n"
                            },
                            {
                                "type": "text",
                                "text": "&x (+ &y)* = ...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnd then "
                            },
                            {
                                "type": "text",
                                "text": "&y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would be assigned a "
                            },
                            {
                                "type": "text",
                                "text": "list",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of numbers, rather than a single number.\n\nOf course, regular expressions aren't known for being easy to understand. Perhaps I could find a somewhat simpler pattern language that still allows the description of arbitrary-length expressions."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]