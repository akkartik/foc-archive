[
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1595969930.426800",
        "client_msg_id": "64ef71eb-f609-4807-95e6-9545ef9450b4",
        "text": "I've been trying to put more of my work into words, so I've built a blog. I've started at the beginning and quite simply and hope to expand to more interesting topics in the future. Let me know what you think of this first post (it has some interactive code examples for everyone who likes to play around :wink: ).\n<https:\/\/irreactive.com\/declarative-apis>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595969930.426800",
        "reply_count": 14,
        "reply_users_count": 6,
        "latest_reply": "1596059642.435900",
        "reply_users": [
            "UEP7RL0HX",
            "UFZFETUH1",
            "U010328JA1E",
            "UJ6LDMMN0",
            "U013ZLJARC7",
            "UBSMEUXAA"
        ],
        "replies": [
            {
                "user": "UEP7RL0HX",
                "ts": "1595970905.428300"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1595971159.428500"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1595971271.428800"
            },
            {
                "user": "U010328JA1E",
                "ts": "1595984769.429200"
            },
            {
                "user": "UEP7RL0HX",
                "ts": "1596006228.430200"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1596006610.430400"
            },
            {
                "user": "UEP7RL0HX",
                "ts": "1596007062.430600"
            },
            {
                "user": "UEP7RL0HX",
                "ts": "1596007170.430800"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1596011371.432100"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1596024225.433000"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1596032300.433400"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1596035106.434000"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1596041038.434200"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1596059642.435900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1596059642.435900",
        "attachments": [
            {
                "service_name": "Irreactive",
                "title": "Improving Declarative APIs for Graphics with Types",
                "title_link": "https:\/\/irreactive.com\/declarative-apis",
                "text": "Declarative APIs are the future. Types make them much easier and fun to work with. Read more to get an intuition for types in this usecase!",
                "fallback": "Irreactive: Improving Declarative APIs for Graphics with Types",
                "image_url": "https:\/\/irreactive.com\/images\/declarative-apis\/thumbnail.jpg",
                "ts": 1595919600,
                "from_url": "https:\/\/irreactive.com\/declarative-apis",
                "image_width": 444,
                "image_height": 250,
                "image_bytes": 49837,
                "service_icon": "https:\/\/irreactive.com\/assets\/apple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/irreactive.com\/declarative-apis"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ndTI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been trying to put more of my work into words, so I've built a blog. I've started at the beginning and quite simply and hope to expand to more interesting topics in the future. Let me know what you think of this first post (it has some interactive code examples for everyone who likes to play around "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": " ).\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/irreactive.com\/declarative-apis"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEP7RL0HX",
        "type": "message",
        "ts": "1595970905.428300",
        "client_msg_id": "e9943a6e-0e42-4a68-82b2-d0109f2baab5",
        "text": "Does your approach have an advantage over the following declarative approach:\n\nrectangle\n   filled = blue\n   length = 50\n   height = 30\n   x = 200\n   y = 300\n\ncircle\n   outlined = red\n   radius = 20\n   x = 100\n   y = 100",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4c54a8f7c01",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c4c54a8f7c01b3e22a1e82ae29c85f70.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "Dan Swirsky",
            "display_name": "Dan Swirsky",
            "team": "T5TCAFTA9",
            "name": "dswirsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595969930.426800",
        "parent_user_id": "UFZFETUH1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Rs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does your approach have an advantage over the following declarative approach:\n\nrectangle\n   filled = blue\n   length = 50\n   height = 30\n   x = 200\n   y = 300\n\ncircle\n   outlined = red\n   radius = 20\n   x = 100\n   y = 100"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1595971159.428500",
        "edited": {
            "user": "UFZFETUH1",
            "ts": "1595971168.000000"
        },
        "client_msg_id": "e525ee88-d8bd-4c8f-adc2-0d759c7f8fd8",
        "text": "Well, that's a great declarative API too! I guess you're saying that in your case of this API, you don't need the distinction between Stencils and Pictures, because you can just use the 'outlined' or 'filled' field, right?\n\nIt's useful to have this distinction, because you sometimes want to make a stencil from two objects, for example a rectangle and a circle on top of each other, and then outline that once.\n\nSo that'd be something like:\n```outlined \"red\"\n  (superimposedStencils\n    [ circle 20\n    , rectangle 100 100\n    ]\n  )```\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595969930.426800",
        "parent_user_id": "UFZFETUH1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ok6d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, that's a great declarative API too! I guess you're saying that in your case of this API, you don't need the distinction between Stencils and Pictures, because you can just use the 'outlined' or 'filled' field, right?\n\nIt's useful to have this distinction, because you sometimes want to make a stencil from two objects, for example a rectangle and a circle on top of each other, and then outline that once.\n\nSo that'd be something like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "outlined \"red\"\n  (superimposedStencils\n    [ circle 20\n    , rectangle 100 100\n    ]\n  )"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1595971271.428800",
        "client_msg_id": "41bd5b77-150b-4093-9270-1bfaa6528f13",
        "text": "And even if you don't need to be able to superimpose stencils, you'd still want to check that either 'outlined' or 'filled' is set at compile time. Presumably using types. And wrapping is then just another way of adding parameters.\n\nI'll be writing more about that soon, though. So stay tuned :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595969930.426800",
        "parent_user_id": "UFZFETUH1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And even if you don't need to be able to superimpose stencils, you'd still want to check that either 'outlined' or 'filled' is set at compile time. Presumably using types. And wrapping is then just another way of adding parameters.\n\nI'll be writing more about that soon, though. So stay tuned "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U010328JA1E",
        "type": "message",
        "ts": "1595984769.429200",
        "client_msg_id": "85b95420-c450-4fba-ae6d-44d1747d9b3d",
        "text": "if you haven't seen it <@UFZFETUH1>: <https:\/\/medium.com\/@stevekrouse\/types-are-shapes-d6af1e83192f>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga47904aa9b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a47904aa9b4359ffea837d58cd82cfb0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Ricardo",
            "real_name": "Ricardo Medina",
            "display_name": "Ricardo Medina",
            "team": "T5TCAFTA9",
            "name": "rickmedina205",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595969930.426800",
        "parent_user_id": "UFZFETUH1",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Types are shapes — a graphical programming exploration",
                "title_link": "https:\/\/medium.com\/@stevekrouse\/types-are-shapes-d6af1e83192f",
                "text": "Type theory is notoriously difficult to understand. To make it easier for beginners, MIT’s Scratch programming language uses shapes as a…",
                "fallback": "Medium: Types are shapes — a graphical programming exploration",
                "image_url": "https:\/\/miro.medium.com\/max\/1160\/1*qgVl22wL2BaZHP5tJTXG1A.png",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "7 min read",
                        "short": true
                    }
                ],
                "ts": 1502213338,
                "from_url": "https:\/\/medium.com\/@stevekrouse\/types-are-shapes-d6af1e83192f",
                "image_width": 524,
                "image_height": 250,
                "image_bytes": 50056,
                "service_icon": "https:\/\/cdn-images-1.medium.com\/fit\/c\/152\/152\/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https:\/\/medium.com\/@stevekrouse\/types-are-shapes-d6af1e83192f"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FJtZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you haven't seen it "
                            },
                            {
                                "type": "user",
                                "user_id": "UFZFETUH1"
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/@stevekrouse\/types-are-shapes-d6af1e83192f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UFZFETUH1"
                ],
                "count": 1
            }
        ]
    }
]