[
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560956303.158200",
        "client_msg_id": "39c83c1e-42af-4cdb-8fbd-8fdb9fba9af6",
        "text": "Here in video 1.2, here <https:\/\/youtu.be\/p54Hd7AmVFU?t=2520>, he says \"You can map a set to itself in many ways, you can interchange element\" and he does a shuffle with his hands.\n\nFirst a basic question\n1. Were talking about sets in terms of set theory, not sets as they appear in programming languages correct? i'm not aware of any places where they differ, but set theory might contain some additional axioms (is that the right word?).\n\nNow back to a more direct question about when he says \"you can interchange an element\"\n2. As i understand it, set's deal with just membership, interchange implies changing order, so trying to change the order in a set would do nothing right? but is that the same as identity? I had identity as simply the idea that a -&gt; a. This would seem to imply that a-&gt;b-&gt;a contains the identity function for a of -&gt;b-&gt;a",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Category Theory 1.2: What is a category?",
                "title_link": "https:\/\/youtu.be\/p54Hd7AmVFU?t=2520",
                "author_name": "Bartosz Milewski",
                "author_link": "https:\/\/www.youtube.com\/user\/DrBartosz",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/p54Hd7AmVFU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Category Theory 1.2: What is a category?",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/p54Hd7AmVFU?start=2520&feature=oembed&start=2520&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/p54Hd7AmVFU?t=2520",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/p54Hd7AmVFU?t=2520"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eYIb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here in video 1.2, here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/p54Hd7AmVFU?t=2520"
                            },
                            {
                                "type": "text",
                                "text": ", he says \"You can map a set to itself in many ways, you can interchange element\" and he does a shuffle with his hands.\n\nFirst a basic question\n1. Were talking about sets in terms of set theory, not sets as they appear in programming languages correct? i'm not aware of any places where they differ, but set theory might contain some additional axioms (is that the right word?).\n\nNow back to a more direct question about when he says \"you can interchange an element\"\n2. As i understand it, set's deal with just membership, interchange implies changing order, so trying to change the order in a set would do nothing right? but is that the same as identity? I had identity as simply the idea that a -> a. This would seem to imply that a->b->a contains the identity function for a of ->b->a"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF2GNRUTV",
        "type": "message",
        "ts": "1560971610.167200",
        "client_msg_id": "6cab6ed4-fa2d-41b1-8bb0-276a73540d22",
        "text": "<@UJNJQD2AC> \/\/ disclaimer, dont take my words as gossip but I think I can help some\n\n1. yes, when Milewski says “set” he is referring to a mathematical set (math-set) and not the data structure set (programming-set) we use in programming. there is overlap in an intuitive (hand wavy) understanding of these two definitions math-set and programming-set. BUT! in math-set you would not delete a element like you would in programming-set. some concrete examples: an ex of a math-set is `all integers` and a programming-set is `[\"a\",\"b\",\"c\"]`.\n\n2. here, when we start talking about functions on sets we are more in group (etc) theory in my mind. Take the math-set of `all integers`, there are many (infinite) functions that take this set back to itself. one function, call it `f` we define to be `a + b` where `a` and `b` are any elements in our set of `all integers`. so `f` is a function that maps `all integers` to `all integers` because any a+b will give us a result that exists in our set! (this is similar to the moment where Milewski talks about how element of groups are always compossible). you can see that this `f` is NOT the identity function for our set despite it being a function that maps the set to itself. *this is an example of what I think Milewski means when you can have functions that “interchange” elements on sets and the answer to your question*. back to the identity function. Im not sure how operations play a role here... is `a + 0` the identity function in the category theory sense? what about `a * 1`?\n\nHope this helps or maybe prompts new questions :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g49320ca20ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/649320ca20cacd083cf9225990f990b0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Cedric Cogell",
            "display_name": "cogell",
            "team": "T5TCAFTA9",
            "name": "cedric.cogell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560971610.167200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1560972209.168700",
        "reply_users": [
            "UF2GNRUTV"
        ],
        "replies": [
            {
                "user": "UF2GNRUTV",
                "ts": "1560972209.168700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "29Ok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " \/\/ disclaimer, dont take my words as gossip but I think I can help some\n\n1. yes, when Milewski says “set” he is referring to a mathematical set (math-set) and not the data structure set (programming-set) we use in programming. there is overlap in an intuitive (hand wavy) understanding of these two definitions math-set and programming-set. BUT! in math-set you would not delete a element like you would in programming-set. some concrete examples: an ex of a math-set is "
                            },
                            {
                                "type": "text",
                                "text": "all integers",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and a programming-set is "
                            },
                            {
                                "type": "text",
                                "text": "[\"a\",\"b\",\"c\"]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n2. here, when we start talking about functions on sets we are more in group (etc) theory in my mind. Take the math-set of "
                            },
                            {
                                "type": "text",
                                "text": "all integers",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", there are many (infinite) functions that take this set back to itself. one function, call it "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we define to be "
                            },
                            {
                                "type": "text",
                                "text": "a + b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are any elements in our set of "
                            },
                            {
                                "type": "text",
                                "text": "all integers",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". so "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a function that maps "
                            },
                            {
                                "type": "text",
                                "text": "all integers",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "all integers",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " because any a+b will give us a result that exists in our set! (this is similar to the moment where Milewski talks about how element of groups are always compossible). you can see that this "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is NOT the identity function for our set despite it being a function that maps the set to itself. "
                            },
                            {
                                "type": "text",
                                "text": "this is an example of what I think Milewski means when you can have functions that “interchange” elements on sets and the answer to your question",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". back to the identity function. Im not sure how operations play a role here... is "
                            },
                            {
                                "type": "text",
                                "text": "a + 0",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the identity function in the category theory sense? what about "
                            },
                            {
                                "type": "text",
                                "text": "a * 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n\nHope this helps or maybe prompts new questions "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UJK8MKYAZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1560971769.168200",
        "client_msg_id": "3403c96b-6f43-496b-9dfb-583860b11897",
        "text": "That helps, <@UF2GNRUTV>. i appreciate the feedback.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hbR4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That helps, "
                            },
                            {
                                "type": "user",
                                "user_id": "UF2GNRUTV"
                            },
                            {
                                "type": "text",
                                "text": ". i appreciate the feedback."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UF2GNRUTV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UF2GNRUTV",
        "type": "message",
        "ts": "1560972209.168700",
        "client_msg_id": "99cbac73-fd65-4771-8a69-98a5dde4b169",
        "text": "I hide the fact that a math-set could very well be a finite set of things. futhermore that `[\"a\", \"b\", \"c\"]` is a completely valid math-set. BUT you would not delete an item on this math-set and have the “same set” like you would if you did: ```\n\/\/ javascript\nconst myProgrammingSet = new Set();\nmyProgrammingSet.add(\"a\");\nmyProgrammingSet.add(\"b\");\nmyProgrammingSet.delete(\"a\");\nconsole.log(myProgrammingSet); \/\/ {\"a\"}```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g49320ca20ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/649320ca20cacd083cf9225990f990b0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Cedric Cogell",
            "display_name": "cogell",
            "team": "T5TCAFTA9",
            "name": "cedric.cogell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560971610.167200",
        "parent_user_id": "UF2GNRUTV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=N2PI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hide the fact that a math-set could very well be a finite set of things. futhermore that "
                            },
                            {
                                "type": "text",
                                "text": "[\"a\", \"b\", \"c\"]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a completely valid math-set. BUT you would not delete an item on this math-set and have the “same set” like you would if you did: "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/\/ javascript\nconst myProgrammingSet = new Set();\nmyProgrammingSet.add(\"a\");\nmyProgrammingSet.add(\"b\");\nmyProgrammingSet.delete(\"a\");\nconsole.log(myProgrammingSet); \/\/ {\"a\"}"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF2GNRUTV",
        "type": "message",
        "ts": "1560980665.170400",
        "client_msg_id": "5b9d12ee-b99f-43fa-af4f-8a79d2418c41",
        "text": "one example of Category Theory in the programming wild: <https:\/\/pijul.org\/manual\/theory.html#theory>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g49320ca20ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/649320ca20cacd083cf9225990f990b0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Cedric Cogell",
            "display_name": "cogell",
            "team": "T5TCAFTA9",
            "name": "cedric.cogell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aVxPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one example of Category Theory in the programming wild: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pijul.org\/manual\/theory.html#theory"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560998974.193700",
        "client_msg_id": "10705b2e-ba8c-48b8-adfd-d51e201b774c",
        "text": "<@UJNJQD2AC> 1. Plain mathy sets.  Like a set with three things in it {A, B, C} .  For the sake of discussion, we will be fine sticking to finite sets.  (The interesting qualities of infinite sets aren't going to be relevant.)\n\n2. Sets are unordered.  Interchange *does not* exactly mean changing order — but there is a connection.  Remember what a function from {A, B, C} to {A, B, C} does.  It tells you what A goes to, what B goes to, and what C goes to.  One function is {A ↦ B, B ↦ C, C ↦ A}.  Another is {A ↦ B, B ↦ A, C ↦ A}.  For short, we can *use* order to name these functions.  Let [BCA] = {A ↦ B, B ↦ C, C ↦ A} and let [BAA] = {A ↦ B, B ↦ A, C ↦ A}.  In this [xyz] notation, x is what A goes to, y is what B goes to, and z is what C goes to.  What's the identity function? [ABC].  Play with some compositions [BCA][BAA] = [AAB].  (Here I mean [BCA] followed by [BAA].)  Do another [BCA][BCA] = [CAB].  [CAB][BCA] = [ABC].\n\nSomething extra subtle is going on here.  Given an set {A, B, C} – unordered, you can use an ordered list [xyz] :: {A, B, C} → {A, B, C} to represent *function* on {A, B, C}.  An \"interchange\" (or permutation) is a function which has all three elements as values.  So [BCA] is a permutation and [BAA] is not.  A bunch of permutations of the set closed under composition is called a \"group.\"  There are a few groups over the set with three elements, but the group of all the permutations is the fun one <https:\/\/en.wikipedia.org\/wiki\/Dihedral_group_of_order_6.>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560998974.193700",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1561049841.204200",
        "reply_users": [
            "UJNJQD2AC"
        ],
        "replies": [
            {
                "user": "UJNJQD2AC",
                "ts": "1561049841.204200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6o\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " 1. Plain mathy sets.  Like a set with three things in it {A, B, C} .  For the sake of discussion, we will be fine sticking to finite sets.  (The interesting qualities of infinite sets aren't going to be relevant.)\n\n2. Sets are unordered.  Interchange "
                            },
                            {
                                "type": "text",
                                "text": "does not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exactly mean changing order — but there is a connection.  Remember what a function from {A, B, C} to {A, B, C} does.  It tells you what A goes to, what B goes to, and what C goes to.  One function is {A ↦ B, B ↦ C, C ↦ A}.  Another is {A ↦ B, B ↦ A, C ↦ A}.  For short, we can "
                            },
                            {
                                "type": "text",
                                "text": "use",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " order to name these functions.  Let [BCA] = {A ↦ B, B ↦ C, C ↦ A} and let [BAA] = {A ↦ B, B ↦ A, C ↦ A}.  In this [xyz] notation, x is what A goes to, y is what B goes to, and z is what C goes to.  What's the identity function? [ABC].  Play with some compositions [BCA][BAA] = [AAB].  (Here I mean [BCA] followed by [BAA].)  Do another [BCA][BCA] = [CAB].  [CAB][BCA] = [ABC].\n\nSomething extra subtle is going on here.  Given an set {A, B, C} – unordered, you can use an ordered list [xyz] :: {A, B, C} → {A, B, C} to represent "
                            },
                            {
                                "type": "text",
                                "text": "function",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on {A, B, C}.  An \"interchange\" (or permutation) is a function which has all three elements as values.  So [BCA] is a permutation and [BAA] is not.  A bunch of permutations of the set closed under composition is called a \"group.\"  There are a few groups over the set with three elements, but the group of all the permutations is the fun one "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Dihedral_group_of_order_6."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UF2GNRUTV",
                    "UHWC9PXBL",
                    "UJNJQD2AC",
                    "UL7M7H5GD"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJNJQD2AC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1560999412.196000",
        "client_msg_id": "d9f7065b-4cbe-4e62-99af-1110bf738f59",
        "text": "<@UF2GNRUTV> Pushouts are neat.  Funny that they point to the Yoneda lemma as a \"starting\" point. But if you want to go there, read this <https:\/\/www.math3ma.com\/blog\/the-yoneda-lemma> and the related posts.  The Yoneda Perspective <https:\/\/www.math3ma.com\/blog\/the-yoneda-perspective> nails the intuition \"mathematical objects are completely determined by their relationships to other objects.\"  Basically the Yoneda Lemma formalizes that perspective.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560999412.196000",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1561040900.202000",
        "reply_users": [
            "UF2GNRUTV"
        ],
        "replies": [
            {
                "user": "UF2GNRUTV",
                "ts": "1561040900.202000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "The Yoneda Lemma",
                "title_link": "https:\/\/www.math3ma.com\/blog\/the-yoneda-lemma",
                "text": "Welcome to our third and final installment on the Yoneda lemma! In the past couple of weeks, we've slowly unraveled the mathematics behind the Yoneda perspective, i.e. the categorical maxim that an object is completely determined by its relationships to other objects. Last week we divided this maxim into two points...",
                "fallback": "The Yoneda Lemma",
                "thumb_url": "https:\/\/uploads-ssl.webflow.com\/5b1d427ae0c922e912eda447\/5b4cae242d24ef139b47e9f8_webflow%20thumbnail.jpg",
                "from_url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-lemma",
                "thumb_width": 940,
                "thumb_height": 473,
                "service_name": "math3ma.com",
                "id": 1,
                "original_url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-lemma"
            },
            {
                "title": "The Yoneda Perspective",
                "title_link": "https:\/\/www.math3ma.com\/blog\/the-yoneda-perspective",
                "text": "In the words of Dan Piponi, it \"is the hardest trivial thing in mathematics.\" The nLab catalogues it as \"elementary but deep and central,\" while Emily Riehl nominates it as \"arguably the most important result in category theory.\" Yet as Tom Leinster has pointed out, \"many people find it quite bewildering.\" And what are they referring to?",
                "fallback": "The Yoneda Perspective",
                "thumb_url": "https:\/\/uploads-ssl.webflow.com\/5b1d427ae0c922e912eda447\/5b4cae242d24ef139b47e9f8_webflow%20thumbnail.jpg",
                "from_url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-perspective",
                "thumb_width": 940,
                "thumb_height": 473,
                "service_name": "math3ma.com",
                "id": 2,
                "original_url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-perspective"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF2GNRUTV"
                            },
                            {
                                "type": "text",
                                "text": " Pushouts are neat.  Funny that they point to the Yoneda lemma as a \"starting\" point. But if you want to go there, read this "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-lemma"
                            },
                            {
                                "type": "text",
                                "text": " and the related posts.  The Yoneda Perspective "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.math3ma.com\/blog\/the-yoneda-perspective"
                            },
                            {
                                "type": "text",
                                "text": " nails the intuition \"mathematical objects are completely determined by their relationships to other objects.\"  Basically the Yoneda Lemma formalizes that perspective."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]