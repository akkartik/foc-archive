[
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593156847.478300",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1593156858.000000"
        },
        "client_msg_id": "81f14104-eaa1-462b-a913-b6886ec0a081",
        "text": "Thanks for going into the details. I don't want to hijack this Slack\/thread with programming language minutia, but I'm a PL nerd so I'm always curious to see what new features there are in various languages.\n\nI'm writing Scala for my day job and I've also used Haskell, Standard ML and Erlang for personal projects. They all have pattern matching constructs and pretty much all of them expose the same set of features you're talking about, with slight variations of course. From this point of view, at least, this PEP follows \"industry standards\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CMQNa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for going into the details. I don't want to hijack this Slack\/thread with programming language minutia, but I'm a PL nerd so I'm always curious to see what new features there are in various languages.\n\nI'm writing Scala for my day job and I've also used Haskell, Standard ML and Erlang for personal projects. They all have pattern matching constructs and pretty much all of them expose the same set of features you're talking about, with slight variations of course. From this point of view, at least, this PEP follows \"industry standards\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1593157374.478600",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593157474.000000"
        },
        "client_msg_id": "dc2951fa-9296-4989-b27d-85f352197ec6",
        "text": "This type of complex domain specific language with all of its tricks and traps is probably a mistake. For those rare instances when it would be used, you have now added 50 pages in the reference manual to explain all the subtleties. This type of feature is exactly the kind of thing Guido was constantly refusing to add. Now that he has left his position as BDFL, the complexification committee will take care of ruining Python. That's okay, i designed my Beads language as the evolution of Python by simplification, it can only help me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bxM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This type of complex domain specific language with all of its tricks and traps is probably a mistake. For those rare instances when it would be used, you have now added 50 pages in the reference manual to explain all the subtleties. This type of feature is exactly the kind of thing Guido was constantly refusing to add. Now that he has left his position as BDFL, the complexification committee will take care of ruining Python. That's okay, i designed my Beads language as the evolution of Python by simplification, it can only help me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593158757.478900",
        "client_msg_id": "4e8ceafa-241c-4919-8627-db0421b26c44",
        "text": "If anything, this feature is in general abused, rather than seldomly used. I quite like it to be honest, but I find it more useful in a language with static typing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bEn4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If anything, this feature is in general abused, rather than seldomly used. I quite like it to be honest, but I find it more useful in a language with static typing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593159488.479100",
        "client_msg_id": "ff9a1ea4-cfdf-4800-8065-73515a02c2f0",
        "text": "Strangely, Guido is one of the PEP authors :smile: Also there is resistance to the PEP from some core Python folk, so lets see where this goes.\n\nI like the idea of pattern matching too. Having it from the start in a language means other features were designed with it in mind. In Python it is being added later so it's going to be more complex to make it seem to fit. Consider the `except E as e` syntax - it's already kind of a pattern match using just isinstance. Would we not want matching to work identically in that syntax as well? IIRC you can have destructuring assignment in Erlang and put constants on the left, roughly `\"red\", a = f()` - this only matches and binds iff f() returns \"red\" as the first item in a pair. There's no such thing in Python, but you can have only free variables on the left that always get bound. Should that also work now, given the unpacking pattern can use `case [\"red\", a]` ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IcJxm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Strangely, Guido is one of the PEP authors "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " Also there is resistance to the PEP from some core Python folk, so lets see where this goes.\n\nI like the idea of pattern matching too. Having it from the start in a language means other features were designed with it in mind. In Python it is being added later so it's going to be more complex to make it seem to fit. Consider the "
                            },
                            {
                                "type": "text",
                                "text": "except E as e",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax - it's already kind of a pattern match using just isinstance. Would we not want matching to work identically in that syntax as well? IIRC you can have destructuring assignment in Erlang and put constants on the left, roughly "
                            },
                            {
                                "type": "text",
                                "text": "\"red\", a = f()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - this only matches and binds iff f() returns \"red\" as the first item in a pair. There's no such thing in Python, but you can have only free variables on the left that always get bound. Should that also work now, given the unpacking pattern can use "
                            },
                            {
                                "type": "text",
                                "text": "case [\"red\", a]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1593174608.479600",
        "client_msg_id": "7f19199e-0f66-48ce-8cad-c15ea868f383",
        "text": "My first impression is much like <@U8A5MS6R1>'s: this is going to add a lot of complexity to Python, and is likely to become a nightmare for Python teachers. To add a criticism to <@U8A5MS6R1>'s list: `Point(x, y)` not only looks like a constructor but isn't, it also interprets arguments in a different way from a constructor. Sure, one would expect Python programmers to ensure that a class' `__init__` and `__match__` are semantically compatible, but I bet we will see many classes whose `__init__` allows more variations than `__match__` . And I also bet that people will try to use `class(**args)` as a pattern and expect `class` to be bound to the class object.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M7i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first impression is much like "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": "'s: this is going to add a lot of complexity to Python, and is likely to become a nightmare for Python teachers. To add a criticism to "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": "'s list: "
                            },
                            {
                                "type": "text",
                                "text": "Point(x, y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not only looks like a constructor but isn't, it also interprets arguments in a different way from a constructor. Sure, one would expect Python programmers to ensure that a class' "
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "init",
                                "style": {
                                    "italic": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "__match__",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are semantically compatible, but I bet we will see many classes whose "
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "init",
                                "style": {
                                    "italic": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " allows more variations than "
                            },
                            {
                                "type": "text",
                                "text": "__match__",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . And I also bet that people will try to use "
                            },
                            {
                                "type": "text",
                                "text": "class(**args)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a pattern and expect "
                            },
                            {
                                "type": "text",
                                "text": "class",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be bound to the class object."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593176908.480100",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1593176952.000000"
        },
        "client_msg_id": "32a7e6fc-4fcb-4f26-a8c8-f978b9a8fed4",
        "text": "Luna is now called Enso and they are starting from scratch: <https:\/\/medium.com\/@enso_org\/enso-dev-blog-19th-june-2020-335e528d50b>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1593221097.494800",
        "reply_users": [
            "UP28ETUSE",
            "UC2A2ARPT",
            "UBN9AFS0N",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UP28ETUSE",
                "ts": "1593177089.480400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1593181592.483800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1593183742.485500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1593183802.485800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1593183906.486100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1593188563.490900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1593193166.491800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1593221097.494800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Enso Dev Blog — 19th June 2020",
                "title_link": "https:\/\/medium.com\/@enso_org\/enso-dev-blog-19th-june-2020-335e528d50b",
                "text": "Welcome to the inaugural Enso devblog. In this series, we will share the latest updates from the development of Enso (formerly Luna), a…",
                "fallback": "Medium: Enso Dev Blog — 19th June 2020",
                "image_url": "https:\/\/miro.medium.com\/freeze\/max\/1000\/1*35kALPUkwLyNIEtAwwbRYA.gif",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "7 min read",
                        "short": true
                    }
                ],
                "ts": 1593176324,
                "from_url": "https:\/\/medium.com\/@enso_org\/enso-dev-blog-19th-june-2020-335e528d50b",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 20416,
                "service_icon": "https:\/\/cdn-images-1.medium.com\/fit\/c\/152\/152\/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https:\/\/medium.com\/@enso_org\/enso-dev-blog-19th-june-2020-335e528d50b"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H920",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Luna is now called Enso and they are starting from scratch: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/@enso_org\/enso-dev-blog-19th-june-2020-335e528d50b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593177089.480400",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1593177104.000000"
        },
        "client_msg_id": "53f1749a-d047-4cf4-8544-ec4e8c3aa425",
        "text": "Not to be confused with another Enso, which seems dead now: <http:\/\/enso-lang.org\/> They seem to share the etymology, though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Enso",
                "title_link": "http:\/\/enso-lang.org\/",
                "text": "Your description goes here",
                "fallback": "Enso",
                "from_url": "http:\/\/enso-lang.org\/",
                "service_name": "enso-lang.org",
                "id": 1,
                "original_url": "http:\/\/enso-lang.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yz\/gf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to be confused with another Enso, which seems dead now: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/enso-lang.org\/"
                            },
                            {
                                "type": "text",
                                "text": " They seem to share the etymology, though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJKKBAMLL",
        "type": "message",
        "ts": "1593179045.480800",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1593179133.000000"
        },
        "client_msg_id": "436c06ef-5883-400d-bd01-833553227a56",
        "text": "<@UC2A2ARPT> ^^ ripe for innovation. I do :100: agree that current voice interfaces are disappointing. This is perfect, just where I personally want them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9db1f76eed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-12\/662675221668_6b9db1f76eed746965ca_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Peak",
            "display_name": "Steve",
            "team": "T5TCAFTA9",
            "name": "steve727",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593073685.439700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q48Wa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " ^^ ripe for innovation. I do "
                            },
                            {
                                "type": "emoji",
                                "name": "100",
                                "unicode": "1f4af"
                            },
                            {
                                "type": "text",
                                "text": " agree that current voice interfaces are disappointing. This is perfect, just where I personally want them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593181592.483800",
        "client_msg_id": "341F4D25-1181-404C-BFE6-565795B993E3",
        "text": "&gt; For example, the GUI was slow, based on SVGs, and integrated with the Atom editor. It would be difficult, if not impossible, to get the performance we wanted building on that foundation.\n&gt; \nThis feels like a dodge. You can do wickedly complex stuff with SVG and maintain buttery 60. So I'm thinking this has more to do with their architecture (building on Atom instead of just Electron?) than the underlying tech.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4hNCB",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, the GUI was slow, based on SVGs, and integrated with the Atom editor. It would be difficult, if not impossible, to get the performance we wanted building on that foundation.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis feels like a dodge. You can do wickedly complex stuff with SVG and maintain buttery 60. So I'm thinking this has more to do with their architecture (building on Atom instead of just Electron?) than the underlying tech."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593183742.485500",
        "client_msg_id": "e730d33b-6b4b-4016-a78b-d52b02fb048b",
        "text": "<https:\/\/twitter.com\/pcwalton\/status\/1266049915848777730>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/pcwalton|@pcwalton>: Work-in-progress GL4\/compute shader branch of Pathfinder brings the paris-30k.svg stress test (50,000 paths) from ~15 FPS to ~20 FPS on my MacBook Pro’s Radeon Pro 560, while CPU time falls from 60 ms to 8 ms. More performance work to come :)",
                "ts": 1590684796,
                "author_name": "Patrick Walton",
                "author_link": "https:\/\/twitter.com\/pcwalton\/status\/1266049915848777730",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/619088718\/twitter-icon_normal.jpeg",
                "author_subname": "@pcwalton",
                "text": "Work-in-progress GL4\/compute shader branch of Pathfinder brings the paris-30k.svg stress test (50,000 paths) from ~15 FPS to ~20 FPS on my MacBook Pro’s Radeon Pro 560, while CPU time falls from 60 ms to 8 ms. More performance work to come :)",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/pcwalton\/status\/1266049915848777730",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/pcwalton\/status\/1266049915848777730",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L3Aw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/pcwalton\/status\/1266049915848777730"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593183802.485800",
        "client_msg_id": "d81f5ee2-8849-4694-9b2f-e6e24913da44",
        "text": "<https:\/\/twitter.com\/pcwalton\/status\/1250557429189763073>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/pcwalton|@pcwalton>: Pathfinder (branch I'll push later today) rendering the MPVG paris-30k demo.\n\n(That CPU performance is improvable, I'm sure, though it's already fairly fast for 50K paths at max AA quality and likely a good bit of it is just the price I pay for GL3\/WebGL compatibility.) <https:\/\/pbs.twimg.com\/media\/EVre4VTU0AEC7tY.jpg>",
                "ts": 1586991100,
                "author_name": "Patrick Walton",
                "author_link": "https:\/\/twitter.com\/pcwalton\/status\/1250557429189763073",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/619088718\/twitter-icon_normal.jpeg",
                "author_subname": "@pcwalton",
                "text": "Pathfinder (branch I'll push later today) rendering the MPVG paris-30k demo.\n\n(That CPU performance is improvable, I'm sure, though it's already fairly fast for 50K paths at max AA quality and likely a good bit of it is just the price I pay for GL3\/WebGL compatibility.) <https:\/\/pbs.twimg.com\/media\/EVre4VTU0AEC7tY.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/pcwalton\/status\/1250557429189763073",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EVre4VTU0AEC7tY.jpg",
                "image_width": 1182,
                "image_height": 1200,
                "image_bytes": 446341,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/pcwalton\/status\/1250557429189763073",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c5UtF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/pcwalton\/status\/1250557429189763073"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1593183906.486100",
        "client_msg_id": "7115bef9-6347-4beb-a4f1-a4728628c6ac",
        "text": "it will eventually ship on firefox",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fp2f7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it will eventually ship on firefox"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593188563.490900",
        "client_msg_id": "F2420519-8436-40E1-80A5-622815088330",
        "text": "Right, but that's a GPU SVG implementation. If you're making something that looks like Luna\/Enso, you can go super fast just by being slightly clever about how you touch the DOM. No need for GPU, vdom, etc.\n\nAnyways, this is OT.\n\nFor Enso, I like the look of their UI for ports around the nodes. Hard to tell from the GIFs on my phone, but it looks like you can't see variable declarations in the graph, just in the text view. That feels like a weakness, but I'm sure they have a plan in mind. Glad to hear they'll be posting regular updates!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, but that's a GPU SVG implementation. If you're making something that looks like Luna\/Enso, you can go super fast just by being slightly clever about how you touch the DOM. No need for GPU, vdom, etc.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Anyways, this is OT.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "For Enso, I like the look of their UI for ports around the nodes. Hard to tell from the GIFs on my phone, but it looks like you can't see variable declarations in the graph, just in the text view. That feels like a weakness, but I'm sure they have a plan in mind. Glad to hear they'll be posting regular updates!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593192337.491400",
        "client_msg_id": "e21184bf-b2dd-40da-854f-6784949b8510",
        "text": "I think a fundamental limitation is also you can only match over a key\/value like structure. E.g. you can't match `case Regex('a.*b')` - the inner pattern is not sent to the class, but the class is supposed to return a 'static data field like' structure. So this also will cause problems if you have a few expensive computed properties - are you know supposed to generate and return all of them? What if the caller is only matching one?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PX5xJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a fundamental limitation is also you can only match over a key\/value like structure. E.g. you can't match "
                            },
                            {
                                "type": "text",
                                "text": "case Regex('a.*b')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - the inner pattern is not sent to the class, but the class is supposed to return a 'static data field like' structure. So this also will cause problems if you have a few expensive computed properties - are you know supposed to generate and return all of them? What if the caller is only matching one?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593193166.491800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593208033.000000"
        },
        "client_msg_id": "236975FE-BCB2-4C4D-8188-7BE8769C0A4B",
        "text": "<https:\/\/twitter.com\/enso_org\/status\/1276550780347179010|https:\/\/twitter.com\/enso_org\/status\/1276550780347179010>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/enso_org|@enso_org>: What do you want to hear about in the next devblog? <https:\/\/twitter.com\/enso_org\/status\/1276492210293354497>",
                "ts": 1593188397,
                "author_name": "Enso (formerly Luna)",
                "author_link": "https:\/\/twitter.com\/enso_org\/status\/1276550780347179010",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1276175817400291335\/zvrNeVit_normal.jpg",
                "author_subname": "@enso_org",
                "text": "What do you want to hear about in the next devblog? <https:\/\/twitter.com\/enso_org\/status\/1276492210293354497>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/enso_org\/status\/1276550780347179010",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/enso_org\/status\/1276550780347179010",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MNF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/enso_org\/status\/1276550780347179010",
                                "text": "https:\/\/twitter.com\/enso_org\/status\/1276550780347179010"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1593195952.492100",
        "client_msg_id": "f3202d55-edc3-4f95-9a55-89bc30a5e9ff",
        "text": "BTW, this discussion made me think of <https:\/\/dl.acm.org\/doi\/10.1145\/1639949.1640133|this paper> which basically says that destructuring or pattern-matching objects makes no sense at all. TL;DR: Objects expose only their behavior (via methods), but not their internal data structures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qt=k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "BTW, this discussion made me think of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/1639949.1640133",
                                "text": "this paper"
                            },
                            {
                                "type": "text",
                                "text": " which basically says that destructuring or pattern-matching objects makes no sense at all. TL;DR: Objects expose only their behavior (via methods), but not their internal data structures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593201054.492300",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1593201557.000000"
        },
        "client_msg_id": "7ee69a4a-4522-45e5-a8cf-c7f431235f67",
        "text": "<@U8A5MS6R1> for your regex example, it might be possible to do something like:\n\n```pattern = Regex('a.*b')\nmatch 'aaaab':\n    case pattern(matched, capturingGroup1, etc): pass```\nRegarding your other point, about expensive computations, the PEP says this:\n\n&gt; There is no requirement that the attributes on the proxy object be the same type or value as the attributes of the original object; one envisioned use case is for expensive-to-compute properties to be computed lazily on the proxy object via property getters.\nAlso, your concerns about pattern matching for exceptions and assignments are well founded, but it seems to me that they can add these capabilities later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qmeP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " for your regex example, it might be possible to do something like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pattern = Regex('a.*b')\nmatch 'aaaab':\n    case pattern(matched, capturingGroup1, etc): pass"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding your other point, about expensive computations, the PEP says this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is no requirement that the attributes on the proxy object be the same type or value as the attributes of the original object; one envisioned use case is for expensive-to-compute properties to be computed lazily on the proxy object via property getters."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, your concerns about pattern matching for exceptions and assignments are well founded, but it seems to me that they can add these capabilities later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593201391.492500",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1593201524.000000"
        },
        "client_msg_id": "2521858a-0d33-4312-8c7d-dd7a92a34a8c",
        "text": "<@UJBAJNFLK> that's a good paper, but pattern matching does not preclude data abstraction, just as using lists and dictionaries does not preclude it. At some point we have to inspect data and patttern matching helps there. Without this, we'd have to ban `return` or `yield` and write our programs in a completely continuation-passing style, which would be quite hard to understand.\n\nI feel that once you'll be able to play with it, you'll like it more, unless you've already used pattern matching in some other language and decided it was a bad idea there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Khe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " that's a good paper, but pattern matching does not preclude data abstraction, just as using lists and dictionaries does not preclude it. At some point we have to inspect data and patttern matching helps there. Without this, we'd have to ban "
                            },
                            {
                                "type": "text",
                                "text": "return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "yield",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and write our programs in a completely continuation-passing style, which would be quite hard to understand.\n\nI feel that once you'll be able to play with it, you'll like it more, unless you've already used pattern matching in some other language and decided it was a bad idea there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593205285.493000",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1593205317.000000"
        },
        "client_msg_id": "da9b7002-1017-4bce-acbd-98537da5a2de",
        "text": "<@UP28ETUSE> that seems quite a roundabout way to do regexes, consider if you had multiple cases, you wouldn't be able to write literal regexes inline and have to alias them via new variable names. The PEP also says `__match__`  should be a class or static method, so we'll be creating one class per regex.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E106",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP28ETUSE"
                            },
                            {
                                "type": "text",
                                "text": " that seems quite a roundabout way to do regexes, consider if you had multiple cases, you wouldn't be able to write literal regexes inline and have to alias them via new variable names. The PEP also says "
                            },
                            {
                                "type": "text",
                                "text": "__match__",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  should be a class or static method, so we'll be creating one class per regex."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593205414.493300",
        "client_msg_id": "4005b3fd-1014-4bac-a75c-5dd2fb03eef0",
        "text": "May main issue though is the seeming arbitrary mixing of 'capture variables' (lvalues) and variables as references. E.g. `a = f()` is clear and `a.b = f()` kinda follows. But `case a` is totally different from `case a.b` - in the latter case it's a reference, the the former case `a` is a name to be bound.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ITmh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "May main issue though is the seeming arbitrary mixing of 'capture variables' (lvalues) and variables as references. E.g. "
                            },
                            {
                                "type": "text",
                                "text": "a = f()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is clear and "
                            },
                            {
                                "type": "text",
                                "text": "a.b = f()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " kinda follows. But "
                            },
                            {
                                "type": "text",
                                "text": "case a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is totally different from "
                            },
                            {
                                "type": "text",
                                "text": "case a.b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - in the latter case it's a reference, the the former case "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a name to be bound."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593205749.493500",
        "client_msg_id": "364a36f4-aaa4-4c23-8710-dca13717ad4a",
        "text": "Honestly if all lvalues were tagged or separated, this would be much more acceptable to me. e.g. `case Point as x,y` or `case Point(?x, ?y)`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jh+c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly if all lvalues were tagged or separated, this would be much more acceptable to me. e.g. "
                            },
                            {
                                "type": "text",
                                "text": "case Point as x,y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "case Point(?x, ?y)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593205893.493700",
        "client_msg_id": "79e93b7e-8a26-4673-b660-4e5d50197105",
        "text": "I guess you can tag the other case, although it's not enforced: `case .a.b` would work instead of `case a.b`. And I get your point, but on the other hand, the main purpose of pattern matching is to introduce new bindings, so the main use case should introduce as little syntax as possible, I think.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cVYQp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess you can tag the other case, although it's not enforced: "
                            },
                            {
                                "type": "text",
                                "text": "case .a.b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would work instead of "
                            },
                            {
                                "type": "text",
                                "text": "case a.b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". And I get your point, but on the other hand, the main purpose of pattern matching is to introduce new bindings, so the main use case should introduce as little syntax as possible, I think."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1593205978.493900",
        "client_msg_id": "87e5d19d-0e3c-4cd5-86ec-fb3f30d6c100",
        "text": "Also, regarding regexes. I haven't seen any language that supports both passing arguments and binding values in a pattern. That would be interesting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7y8x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, regarding regexes. I haven't seen any language that supports both passing arguments and binding values in a pattern. That would be interesting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593208251.494300",
        "client_msg_id": "ae791c61-9fc3-4c87-8303-273b49f1ae16",
        "text": "I'm used to graphics programs (2d and 3d), video editors, DAWs, and other environments where the arrangement of elements has an effect on the outcome. When it comes to code, I also prefer laying out my own code, rather than using a linter. I dislike the auto-layout feature of Max\/MSP (though I think they could do a _ton_ to improve their GUI regardless).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593105659.452700",
        "parent_user_id": "U01448TH3PG",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NU2f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm used to graphics programs (2d and 3d), video editors, DAWs, and other environments where the arrangement of elements has an effect on the outcome. When it comes to code, I also prefer laying out my own code, rather than using a linter. I dislike the auto-layout feature of Max\/MSP (though I think they could do a "
                            },
                            {
                                "type": "text",
                                "text": "ton",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to improve their GUI regardless)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1593208721.494500",
        "client_msg_id": "555fc964-1b2c-4413-816e-48fa92423523",
        "text": "I guess you could tag the other case.\n\nI also think these are warts: in places where both `x` and `x()` are valid, the `x` part means the same exact thing. But here one is a new name and one is a reference. What if I wanted to match a specific point at a known x,y? `case Point(x, y)` wont work, but I feel it should work, given I can do `case \"hello\"` and have the value match. Literals and predefined constants get special features here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ccg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess you could tag the other case.\n\nI also think these are warts: in places where both "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "x()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are valid, the "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " part means the same exact thing. But here one is a new name and one is a reference. What if I wanted to match a specific point at a known x,y? "
                            },
                            {
                                "type": "text",
                                "text": "case Point(x, y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " wont work, but I feel it should work, given I can do "
                            },
                            {
                                "type": "text",
                                "text": "case \"hello\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and have the value match. Literals and predefined constants get special features here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1593221097.494800",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593222603.000000"
        },
        "client_msg_id": "5610b0e3-959f-4fdb-8144-ef60e272c183",
        "text": "In the immortal words of Fred Brooks, \"plan to throw one away\". However, they must have burned some capital working for the last 2 years on this project. Doing it in Poland instead of SV means probably only 1\/3rd the cost, but 5 people at 40k\/year for 2 years is an estimated $400K USD. Red\/Rebol is to my knowledge the best funded project on the FoC project list, they are concentrating on Crypto smart contract programming as their \"home\" domain.\n\nEnso is now going down a tunnel where their system requires them to build the entire stack including editor, debugger, etc. That means more work and an even bigger project. I have some concerns about projects which don't build programs and projects and then work backwards from a project to figure out the best tool to make that project. Trying to design in a single direction is fraught with peril IMHO. All ladders connect two points in space, and one is typically looking for least complex connection between A and B, so one must go back and forth between A and B to optimize the path. This shuttling approach is very expensive in time and effort, but I think product design always works this way. I just saw the Ford F150 announcement, and they had a team of people going camping with their customers, and visiting jobsites, so that they could add in the features that were wanted and needed. The new F150 announcement underwhelmed people, because it was incremental, but in terms of ergonomics they really moved forward solidly towards a product that was more useful to their customers. They even considered the issue of the controls surfaces being usable by people with gloves on. So the knobs and controls are huge. I am helping a friend who is designing a hearing assistive device that is both hardware and software, and you have to make the controls extra big for seniors. I have always made my controls extra big and occasionally gotten hate mail from young punks who ridiculed the jumbo size. That's one thing i am a bit concerned about in the node and wire visual programming world is that they often expect high acuity in order to distinguish the tiny spatial differences between output #1 and output #2.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NUL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the immortal words of Fred Brooks, \"plan to throw one away\". However, they must have burned some capital working for the last 2 years on this project. Doing it in Poland instead of SV means probably only 1\/3rd the cost, but 5 people at 40k\/year for 2 years is an estimated $400K USD. Red\/Rebol is to my knowledge the best funded project on the FoC project list, they are concentrating on Crypto smart contract programming as their \"home\" domain.\n\nEnso is now going down a tunnel where their system requires them to build the entire stack including editor, debugger, etc. That means more work and an even bigger project. I have some concerns about projects which don't build programs and projects and then work backwards from a project to figure out the best tool to make that project. Trying to design in a single direction is fraught with peril IMHO. All ladders connect two points in space, and one is typically looking for least complex connection between A and B, so one must go back and forth between A and B to optimize the path. This shuttling approach is very expensive in time and effort, but I think product design always works this way. I just saw the Ford F150 announcement, and they had a team of people going camping with their customers, and visiting jobsites, so that they could add in the features that were wanted and needed. The new F150 announcement underwhelmed people, because it was incremental, but in terms of ergonomics they really moved forward solidly towards a product that was more useful to their customers. They even considered the issue of the controls surfaces being usable by people with gloves on. So the knobs and controls are huge. I am helping a friend who is designing a hearing assistive device that is both hardware and software, and you have to make the controls extra big for seniors. I have always made my controls extra big and occasionally gotten hate mail from young punks who ridiculed the jumbo size. That's one thing i am a bit concerned about in the node and wire visual programming world is that they often expect high acuity in order to distinguish the tiny spatial differences between output #1 and output #2."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK500AGQ4",
        "type": "message",
        "ts": "1593225852.497700",
        "client_msg_id": "389648d9-8c59-4c28-8231-f690d082b582",
        "text": "any suggestions on a good front-end library\/framework for making drag and drop interactive OOP UIs? for example, <http:\/\/e.ga|a> workspace of objects, and clicking a method inside an object then clicking on other objects to pass them as arguments. lots of these exist for specific languages, I'm sure, but if I wanted to make one for my own language, what would I use?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g87b7201c4f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/687b7201c4f7653ccc0ec77826fc51d7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Spencer Baugh",
            "display_name": "Spencer Baugh",
            "team": "T5TCAFTA9",
            "name": "spencerbaugh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "reply_count": 20,
        "reply_users_count": 7,
        "latest_reply": "1593323351.017900",
        "reply_users": [
            "UCUSW7WVD",
            "UK500AGQ4",
            "UFLN9JFRT",
            "UEQ6M68H0",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "U0123H7JRDM"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1593227832.497800"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1593228175.498000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1593229056.498200"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1593237352.498800"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1593237408.499600"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1593237490.000100"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1593261738.000800"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1593270370.001000"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1593270461.001200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1593274446.009800"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1593277064.010900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1593277722.011100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1593281212.011400"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1593283091.011800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1593286245.012200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1593287298.012500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1593292147.012900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1593313408.014900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1593318249.015400"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1593323351.017900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fx+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "any suggestions on a good front-end library\/framework for making drag and drop interactive OOP UIs? for example, "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/e.ga",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " workspace of objects, and clicking a method inside an object then clicking on other objects to pass them as arguments. lots of these exist for specific languages, I'm sure, but if I wanted to make one for my own language, what would I use?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593227832.497800",
        "client_msg_id": "8e98ee71-a0bf-40da-a8d7-91e74e756ea9",
        "text": "Wouldn't it depend on what language you built your own language in?\n\nWould a general GUI library help?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6ZoJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouldn't it depend on what language you built your own language in?\n\nWould a general GUI library help?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK500AGQ4",
        "type": "message",
        "ts": "1593228175.498000",
        "client_msg_id": "8e99b7a8-e7c8-4f8f-bb26-b69dfcbe8482",
        "text": "It would depend, but I assume most of the suggestions would be web libraries\/frameworks, which could probably be made to work with any language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g87b7201c4f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/687b7201c4f7653ccc0ec77826fc51d7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Spencer Baugh",
            "display_name": "Spencer Baugh",
            "team": "T5TCAFTA9",
            "name": "spencerbaugh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5uP+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would depend, but I assume most of the suggestions would be web libraries\/frameworks, which could probably be made to work with any language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1593229056.498200",
        "client_msg_id": "e22293dd-9bdf-4df5-bceb-be74640bf99a",
        "text": "GUI libraries are typically still native, due to performance concerns. Maybe that will change in future.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UcZM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "GUI libraries are typically still native, due to performance concerns. Maybe that will change in future."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593237352.498800",
        "client_msg_id": "56891628-2B3F-419C-AD76-2AD3C83546C5",
        "text": "Agreed GUI libraries are native.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BAk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed GUI libraries are native."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593237408.499600",
        "client_msg_id": "0D30CCA0-1291-478E-9ACE-4B5DA7AB9712",
        "text": "But it sounds like you are trying to describe a polyglot Visual Basic ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GW6c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it sounds like you are trying to describe a polyglot Visual Basic ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1593237490.000100",
        "client_msg_id": "8B29F834-5C79-49DB-B310-7CB692940409",
        "text": "Which language are you using Spencer?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DS=m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which language are you using Spencer?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]