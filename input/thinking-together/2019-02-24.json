[
    {
        "user": "UDJ2TKB99",
        "type": "message",
        "ts": "1551032079.032900",
        "edited": {
            "user": "UDJ2TKB99",
            "ts": "1551032098.000000"
        },
        "client_msg_id": "030866F3-0B96-4FCE-940F-44262FCF64DC",
        "text": "I finally listened to and enjoyed that Ted Nelson talk that <@U85HCL7JP> shared a while back: <https:\/\/www.youtube.com\/watch?v=JN1IBkAcJ1E>\n\nI don’t feel it’s so useful in terms of ideas, but it’s a fascinating portrait of a visionary who hasn’t succeeded in bringing his ideas into the world during his travels through a very interesting part of history.\n\nWhile he’s still obviously stubborn, he came across as more charming than I remembered, then I laughed out loud when he hung a lantern on it and said he’d finally taken Dale Carnegie to heart",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7acd71947ea2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-04\/2564854327154_7acd71947ea203e9a69b_72.jpg",
            "first_name": "Joe",
            "real_name": "Joe Trellick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551032079.032900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1551116888.060900",
        "reply_users": [
            "UD3AK9JRF"
        ],
        "replies": [
            {
                "user": "UD3AK9JRF",
                "ts": "1551116888.060900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Tools &amp; Craft: Ted Nelson",
                "title_link": "https:\/\/www.youtube.com\/watch?v=JN1IBkAcJ1E",
                "author_name": "Notion",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCoSvlWS5XcwaSzIcbuJ-Ysg",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/JN1IBkAcJ1E\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Tools & Craft: Ted Nelson",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/JN1IBkAcJ1E?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=JN1IBkAcJ1E",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=JN1IBkAcJ1E"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jLk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I finally listened to and enjoyed that Ted Nelson talk that "
                            },
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " shared a while back: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=JN1IBkAcJ1E"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don’t feel it’s so useful in terms of ideas, but it’s a fascinating portrait of a visionary who hasn’t succeeded in bringing his ideas into the world during his travels through a very interesting part of history.\n\nWhile he’s still obviously stubborn, he came across as more charming than I remembered, then I laughed out loud when he hung a lantern on it and said he’d finally taken Dale Carnegie to heart"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551037436.044100",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551037480.000000"
        },
        "client_msg_id": "1fb37bc4-393f-4af2-abe7-2312e9cb49c8",
        "text": "<@UCUSW7WVD> (branching my thread from  <#CC2JRGVLK|introduce-yourself>) Can you offer examples of \"existing languages [being] highly constrained in their degrees of freedom\"? I usually find human language alone inadequate to discuss these matters, so I need to see specific examples.\n\nBut yeah, we need to see programming language design itself as a multi-layered thing; indeed I see my task as helping to architect an entire ecosystem of languages. Decomposing a compiler and its standard libraries into many parts is insufficient, because you're still viewing it as one language (really two languages, the language being compiled and the implementation language - the implementation language shouldn't be that important, but without interoperability, it is).\n\nIt's *wasteful* to design a new standard library for every new language, *wasteful* not to share common parts between languages, and in addition I think a big reason interoperability is hard is *because* we haven't learned how to share these things. (Interestingly, I hold to a \"waste not, want not\" philosophy in everyday life, as in PL design.)\n\nI created LES and Loyc trees in that spirit. Because they are so general, they have disadvantages as syntax trees - they are not specialized for your specific circumstances and aren't suitable in all situations.* Yet because it was designed for all programming languages, it avoids common impedance-mismatches - for example e.g. most languages disagree about what \"identifiers\" and \"literals\" are, but LESv3 says \"anything goes\" so it is naturally compatible with everything. I think every compiler could find a use for these without the usual impedence mismatches you'd usually suffer when crossing language boundaries. Regardless of the syntax or semantics of your language, you can use LES as a text format to express internal compiler data structures, or accept it as an input format so users can combine your language with preprocessors like LeMP.\n\n(* Note that you could, though, generate wrapper types to wrap Loyc trees in a language-specific manner, or implement an interface like ILNode so that although your syntax trees aren't Loyc trees, they can be consumed as if they were.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551037436.044100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1551117168.061200",
        "reply_users": [
            "UFB8STN7K",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UFB8STN7K",
                "ts": "1551037764.044400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1551117168.061200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vKYD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " (branching my thread from  "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CC2JRGVLK"
                            },
                            {
                                "type": "text",
                                "text": ") Can you offer examples of \"existing languages [being] highly constrained in their degrees of freedom\"? I usually find human language alone inadequate to discuss these matters, so I need to see specific examples.\n\nBut yeah, we need to see programming language design itself as a multi-layered thing; indeed I see my task as helping to architect an entire ecosystem of languages. Decomposing a compiler and its standard libraries into many parts is insufficient, because you're still viewing it as one language (really two languages, the language being compiled and the implementation language - the implementation language shouldn't be that important, but without interoperability, it is).\n\nIt's "
                            },
                            {
                                "type": "text",
                                "text": "wasteful",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to design a new standard library for every new language, "
                            },
                            {
                                "type": "text",
                                "text": "wasteful",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not to share common parts between languages, and in addition I think a big reason interoperability is hard is "
                            },
                            {
                                "type": "text",
                                "text": "because",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we haven't learned how to share these things. (Interestingly, I hold to a \"waste not, want not\" philosophy in everyday life, as in PL design.)\n\nI created LES and Loyc trees in that spirit. Because they are so general, they have disadvantages as syntax trees - they are not specialized for your specific circumstances and aren't suitable in all situations.* Yet because it was designed for all programming languages, it avoids common impedance-mismatches - for example e.g. most languages disagree about what \"identifiers\" and \"literals\" are, but LESv3 says \"anything goes\" so it is naturally compatible with everything. I think every compiler could find a use for these without the usual impedence mismatches you'd usually suffer when crossing language boundaries. Regardless of the syntax or semantics of your language, you can use LES as a text format to express internal compiler data structures, or accept it as an input format so users can combine your language with preprocessors like LeMP.\n\n(* Note that you could, though, generate wrapper types to wrap Loyc trees in a language-specific manner, or implement an interface like ILNode so that although your syntax trees aren't Loyc trees, they can be consumed as if they were.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UD43R8ZFV"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1551037764.044400",
        "client_msg_id": "feeb5a7e-bfc6-4822-a77e-422a2fd51ad9",
        "text": "How does your particular decomposition of the compiler compare to other approaches like Roslyn? <https:\/\/github.com\/dotnet\/roslyn\/wiki\/Roslyn%20Overview>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551037436.044100",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZLX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How does your particular decomposition of the compiler compare to other approaches like Roslyn? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dotnet\/roslyn\/wiki\/Roslyn%20Overview"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551039004.057700",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551158964.000000"
        },
        "client_msg_id": "02e2dbca-ffed-4f41-9458-8a15f400f18b",
        "text": "<@UFB8STN7K> \"How does your particular decomposition of the compiler compare to other approaches like Roslyn?\" I started Enhanced C# back when Roslyn was \"shared source\" - you could see the code but not contribute. Roslyn inspired me - I took the \"red and green tree\" idea (later discarding the red tree as green trees are usually enough), and like Roslyn, my Loyc Syntax library has a universal Token format which is a tuple of (token type, start, end, value reference).\n\nUnlike Roslyn,\n\n• I've only tackled the syntax side of things in code (LLLPG and LeMP are preprocessors, not full compilers) while Roslyn includes full compilers. (Rest assured, I want to go far beyond syntax, but taking the time to get things right is more important.)\n• I created a common interface, IParsingService, supported by all three languages (EC#, LESv2, LESv3), which decomposes parsing into lexing and parsing stages. (Roslyn probably has something similar, but it's probably less generalized.)\n• Roslyn encodes detailed information down to the level of each character in a source file, i.e. it preserves the \"parse tree\", whereas my design only keeps the \"abstract\" syntax tree. It can recreate a semantically identical program from a Loyc tree, but cannot actually reproduce the original code.\n• I wrote a universal algorithm for associating comments and line breaks with syntax subtrees. The EC# and LES parsers are unaware of comments; after parsing they simply invoke the algorithm to merge the previously \"discarded\" comments into the final syntax tree.\n• Roslyn has far more manpower and so can afford to more specialization. I use the universal token type _directly_ in my three parsers instead of specializing. And I built everything out of Loyc trees rather than having specialized per-language trees. (This choice is useful and convenient in some ways and suboptimal in other ways; in future languages, I would introduce Loyc-tree wrappers or specialized syntax trees that implement ILNode).\n• Roslyn is designed specifically for .NET, whereas I chose .NET because it seemed to me like the least-bad choice available (and probably still is.) So much as I'm invested in .NET, I want ports to other languages, I just don't really have time to do them.\n• (Added) Enhanced C# is a dramatically different design than C# itself. While it supports the same syntax (except C# 7 due to factors such as a lack of time), it also supports a bunch of additional syntax. Due to these design (and non-design) differences, Roslyn's C# parser is over 10,000 lines, but mine is about 2,000 lines of code.\n• (Added) Roslyn is long-winded - A `SimpleMemberAccessExpression` doesn't seem so simple when you give it a name like that! Loyc relies on... what do you call it when your code\/data looks like what it represents? I mean, not only is the addition operator called `'+`, but its native textual representation is like `x + y`. I shake my head every time somebody creates a system that doesn't work somewhat like this (admittedly `Loyc.Syntax.CodeSymbols` defines an English name for each operator, due to limitations of C#.) By contrast, Roslyn defines `BinaryExpressionSyntax` nodes where `node.IsKind(SyntaxKind.PlusToken)`is true, or something like that.\n• (Added) C# and VB are statement-based, whereas EC# is expression-based, and Loyc trees don't distinguish expressions from statements.\n\nIn summary, Roslyn has much broader capabilities, as you'd expect a big team can do, but it shares less code between its compilers... and is long-winded.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iP9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " \"How does your particular decomposition of the compiler compare to other approaches like Roslyn?\" I started Enhanced C# back when Roslyn was \"shared source\" - you could see the code but not contribute. Roslyn inspired me - I took the \"red and green tree\" idea (later discarding the red tree as green trees are usually enough), and like Roslyn, my Loyc Syntax library has a universal Token format which is a tuple of (token type, start, end, value reference).\n\nUnlike Roslyn,\n\n• I've only tackled the syntax side of things in code (LLLPG and LeMP are preprocessors, not full compilers) while Roslyn includes full compilers. (Rest assured, I want to go far beyond syntax, but taking the time to get things right is more important.)\n• I created a common interface, IParsingService, supported by all three languages (EC#, LESv2, LESv3), which decomposes parsing into lexing and parsing stages. (Roslyn probably has something similar, but it's probably less generalized.)\n• Roslyn encodes detailed information down to the level of each character in a source file, i.e. it preserves the \"parse tree\", whereas my design only keeps the \"abstract\" syntax tree. It can recreate a semantically identical program from a Loyc tree, but cannot actually reproduce the original code.\n• I wrote a universal algorithm for associating comments and line breaks with syntax subtrees. The EC# and LES parsers are unaware of comments; after parsing they simply invoke the algorithm to merge the previously \"discarded\" comments into the final syntax tree.\n• Roslyn has far more manpower and so can afford to more specialization. I use the universal token type "
                            },
                            {
                                "type": "text",
                                "text": "directly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in my three parsers instead of specializing. And I built everything out of Loyc trees rather than having specialized per-language trees. (This choice is useful and convenient in some ways and suboptimal in other ways; in future languages, I would introduce Loyc-tree wrappers or specialized syntax trees that implement ILNode).\n• Roslyn is designed specifically for .NET, whereas I chose .NET because it seemed to me like the least-bad choice available (and probably still is.) So much as I'm invested in .NET, I want ports to other languages, I just don't really have time to do them.\n• (Added) Enhanced C# is a dramatically different design than C# itself. While it supports the same syntax (except C# 7 due to factors such as a lack of time), it also supports a bunch of additional syntax. Due to these design (and non-design) differences, Roslyn's C# parser is over 10,000 lines, but mine is about 2,000 lines of code.\n• (Added) Roslyn is long-winded - A "
                            },
                            {
                                "type": "text",
                                "text": "SimpleMemberAccessExpression",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " doesn't seem so simple when you give it a name like that! Loyc relies on... what do you call it when your code\/data looks like what it represents? I mean, not only is the addition operator called "
                            },
                            {
                                "type": "text",
                                "text": "'+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but its native textual representation is like "
                            },
                            {
                                "type": "text",
                                "text": "x + y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I shake my head every time somebody creates a system that doesn't work somewhat like this (admittedly "
                            },
                            {
                                "type": "text",
                                "text": "Loyc.Syntax.CodeSymbols",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " defines an English name for each operator, due to limitations of C#.) By contrast, Roslyn defines "
                            },
                            {
                                "type": "text",
                                "text": "BinaryExpressionSyntax",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " nodes where "
                            },
                            {
                                "type": "text",
                                "text": "node.IsKind(SyntaxKind.PlusToken)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "is true, or something like that.\n• (Added) C# and VB are statement-based, whereas EC# is expression-based, and Loyc trees don't distinguish expressions from statements.\n\nIn summary, Roslyn has much broader capabilities, as you'd expect a big team can do, but it shares less code between its compilers... and is long-winded."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UFB8STN7K",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]