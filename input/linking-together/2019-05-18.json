[
    {
        "user": "UJM9NG84Q",
        "type": "message",
        "ts": "1558199564.010900",
        "client_msg_id": "572F6818-3F24-4142-AF6F-4DED11B1A3D0",
        "text": "Is an executable spec a programming language that looks spec-like? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4791f7f49bc",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/74791f7f49bc26afa271eced90cda37c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "",
            "real_name": "Ian Bicking",
            "display_name": "Ian Bicking",
            "team": "T5TCAFTA9",
            "name": "ian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558125688.007600",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CkvN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is an executable spec a programming language that looks spec-like?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1558213573.011100",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1558213616.000000"
        },
        "client_msg_id": "ee6bfbab-a06d-4bdc-b761-e23a967ceb2b",
        "text": "yes, an executable spec is just a very concise programming language that leans towards the declarative, and has a minimum of \"fat\" in terms of extraneous words. I measure projects by how many words are typed into the computer, as line count is highly misleading due to some languages being more vertical than horizontal. I consider spec-only languages to be a giant waste of time because with almost the same level of effort you can build the product, so why bother with a non-executable intermediary? The other objection i have with TLA+ is that it doesn't include a graphical model, and since the majority of words of code in a typical graphical interactive product relates to drawing, specifications which don't cover visual appearance are thus only partial specifications, and not conducive to improving productivity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558125688.007600",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XRRDJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, an executable spec is just a very concise programming language that leans towards the declarative, and has a minimum of \"fat\" in terms of extraneous words. I measure projects by how many words are typed into the computer, as line count is highly misleading due to some languages being more vertical than horizontal. I consider spec-only languages to be a giant waste of time because with almost the same level of effort you can build the product, so why bother with a non-executable intermediary? The other objection i have with TLA+ is that it doesn't include a graphical model, and since the majority of words of code in a typical graphical interactive product relates to drawing, specifications which don't cover visual appearance are thus only partial specifications, and not conducive to improving productivity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1558241473.014700",
        "client_msg_id": "b5001937-643f-4f37-a144-ce0059117f2f",
        "text": "Idris is not an executable spec language. Idris has some features inherited from proof assistants, but is again a totally insufficient language in which to express visual concepts, much less access a database. If you only have a computational program, Coq, Idris, and all the academic languages look promising, but i find Academia's willful ignoring of the last 30 years of personal computer evolution, which is a steady progression towards full-on bitmap graphics and internet\/database access to be puzzling, to the point of being annoying.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BVHbN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Idris is not an executable spec language. Idris has some features inherited from proof assistants, but is again a totally insufficient language in which to express visual concepts, much less access a database. If you only have a computational program, Coq, Idris, and all the academic languages look promising, but i find Academia's willful ignoring of the last 30 years of personal computer evolution, which is a steady progression towards full-on bitmap graphics and internet\/database access to be puzzling, to the point of being annoying."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UCKRZS3DZ",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1558248733.021500",
        "client_msg_id": "1d6e0710-8cf9-461d-96c2-cbd79e53bb1f",
        "text": "Interesting to see the term executable specifications brought up. One of the major use cases for Glamorous Toolkit is exactly this one. We found that, like <@UEQ6M68H0> is saying, we need a complete platform underneath combined with an expressive user interface. In our case, we use the Pharo language\/runtime as the underlying platform.\n\nThe idea of a specification is that it is simpler to understand than the real system. Now, if the specification is executable, what is the difference between that and a real system. Our answer is that there does not need to be one. However, various technical considerations might impose differences, such as having only certain languages supported in the target deployment environment.  Even in this case, the specification can replace the documentation and can be traced to the actual implementation, too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Vh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting to see the term executable specifications brought up. One of the major use cases for Glamorous Toolkit is exactly this one. We found that, like "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " is saying, we need a complete platform underneath combined with an expressive user interface. In our case, we use the Pharo language\/runtime as the underlying platform.\n\nThe idea of a specification is that it is simpler to understand than the real system. Now, if the specification is executable, what is the difference between that and a real system. Our answer is that there does not need to be one. However, various technical considerations might impose differences, such as having only certain languages supported in the target deployment environment.  Even in this case, the specification can replace the documentation and can be traced to the actual implementation, too."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]