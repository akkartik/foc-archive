[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1595577451.283500",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1595577484.000000"
        },
        "client_msg_id": "8880fb4c-7cea-478c-bca9-5a388fee53bc",
        "text": "Spot on <@U01661S9F34>! I am usually figuring out some core incidental algorithm and experiencing that familiar feeling of having to do 'the thing that gets me to the thing' - the incidental complexity.  If not that, I'm adding some new feature that I never anticipated.\nHaving written my first text editor recently, I can attest to it being a perfect example.  It's really easy to display text, parse input and change it.  A day or 2 of work.  Then the problem becomes the gap between your simple implementation and all the professional editors you use....  Pretty soon you are working on transactional operations, syntax coloring, performance, etc.....",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BSVd4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Spot on "
                            },
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": "! I am usually figuring out some core incidental algorithm and experiencing that familiar feeling of having to do 'the thing that gets me to the thing' - the incidental complexity.  If not that, I'm adding some new feature that I never anticipated.\nHaving written my first text editor recently, I can attest to it being a perfect example.  It's really easy to display text, parse input and change it.  A day or 2 of work.  Then the problem becomes the gap between your simple implementation and all the professional editors you use....  Pretty soon you are working on transactional operations, syntax coloring, performance, etc....."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "this is sage advice for everyone’s marketing pages!",
        "files": [
            {
                "id": "F018D0SG8M6",
                "mode": "tombstone"
            },
            {
                "id": "F017GDDKH38",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S+20",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is sage advice for everyone’s marketing pages!"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1595598824.289600",
        "client_msg_id": "0B1D0210-D7DF-4C56-8310-9952F9E1411C",
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1595602759.290300",
        "client_msg_id": "fc45d1ca-fd52-4ec2-9b05-eadb851fd790",
        "text": "My response to \"Why Racket\/Lisp\" is that these claims are true for other powerful, expressive language families as well. You need to seriously look at the Haskell and APL language families to understand the full picture (APL includes J and K).\n• \"Lisp is concise\" (compared to Java). Okay, I find Lisp verbose and klunky. Haskell programs are half the size of Lisp programs, and APL is far more concise than Haskell.\n• \"Everything is an expression\" (compared to Python). True, but Lisp is still an imperative language where most expressions are statements executed for their side effects. This claim is more true of Haskell and APL, where more of the work is done using true expressions (that have no side effects and return values). APL invented \"map\/reduce\" style programming, where pure functions applied to bulk data replace imperative loops, and the APL family still supports this style much better than any other language.\n• Composability: \"Since expressions are nestable, anything in the language can be combined with nearly anything else.\" Definitely a core strength of Lisp, but Haskell beats Lisp in this category by a large margin. If you only know Lisp, you can't even see the composability gap, you need to learn Haskell to understand what is missing. The APL family lags behind Scheme\/Racket and Haskell due to the distinction it makes between functions and values. Common Lisp also lags behind Scheme and its descendents due to the distinction between functions and values.\n• \"Every expression is either a single value or a list. Single values are things like numbers and strings and hash tables.\" This is meant to point out that lists are a universal data structure, and there are a ton of list operations, which you leverage if you use lists to structure data. Good point. But, this also points out one of the composability failures of the Lisp family: character strings are atoms. In the Haskell and APL language families, a string is a list of characters, so all of those available list operations also apply to strings. By contrast, Scheme has length and string-length; reverse and string-reverse; and so on and so on. In APL, everything is an array, and APL takes this idea of a universal data structure much farther than Lisp does.\n• \"Functional programming\". Haskell owns this space.\n• \"Macros\". The Lisp family owns this space. It's worth noting that due to its greater expressive power, Haskell programmers use functions in situations where Lisp programmers are forced to use macros instead. Haskell has lazy evaluation built in. In Lisp, control structures such as 'if' and 'and', which evaluate their arguments lazily, must be macros, not functions. Macros are not first class values, so there is a loss of composability relative to Haskell.\n• \"Create new programming languages\". Racket owns this space.\n• Externalities: libraries, documentation, tooling, community: If the language is good enough, these factors are more important than language design. I think Lisp family languages beat the traditional functional and array languages in this category.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ct3VS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My response to \"Why Racket\/Lisp\" is that these claims are true for other powerful, expressive language families as well. You need to seriously look at the Haskell and APL language families to understand the full picture (APL includes J and K).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Lisp is concise\" (compared to Java). Okay, I find Lisp verbose and klunky. Haskell programs are half the size of Lisp programs, and APL is far more concise than Haskell."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Everything is an expression\" (compared to Python). True, but Lisp is still an imperative language where most expressions are statements executed for their side effects. This claim is more true of Haskell and APL, where more of the work is done using true expressions (that have no side effects and return values). APL invented \"map\/reduce\" style programming, where pure functions applied to bulk data replace imperative loops, and the APL family still supports this style much better than any other language."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Composability: \"Since expressions are nestable, anything in the language can be combined with nearly anything else.\" Definitely a core strength of Lisp, but Haskell beats Lisp in this category by a large margin. If you only know Lisp, you can't even see the composability gap, you need to learn Haskell to understand what is missing. The APL family lags behind Scheme\/Racket and Haskell due to the distinction it makes between functions and values. Common Lisp also lags behind Scheme and its descendents due to the distinction between functions and values."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Every expression is either a single value or a list. Single values are things like numbers and strings and hash tables.\" This is meant to point out that lists are a universal data structure, and there are a ton of list operations, which you leverage if you use lists to structure data. Good point. But, this also points out one of the composability failures of the Lisp family: character strings are atoms. In the Haskell and APL language families, a string is a list of characters, so all of those available list operations also apply to strings. By contrast, Scheme has length and string-length; reverse and string-reverse; and so on and so on. In APL, everything is an array, and APL takes this idea of a universal data structure much farther than Lisp does."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Functional programming\". Haskell owns this space."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Macros\". The Lisp family owns this space. It's worth noting that due to its greater expressive power, Haskell programmers use functions in situations where Lisp programmers are forced to use macros instead. Haskell has lazy evaluation built in. In Lisp, control structures such as 'if' and 'and', which evaluate their arguments lazily, must be macros, not functions. Macros are not first class values, so there is a loss of composability relative to Haskell."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Create new programming languages\". Racket owns this space."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Externalities: libraries, documentation, tooling, community: If the language is good enough, these factors are more important than language design. I think Lisp family languages beat the traditional functional and array languages in this category."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595603452.291700",
        "client_msg_id": "8B8FAEE4-F245-453C-B628-1839F35D0E58",
        "text": "i agree with pretty much all of your points, <@UJN1TAYEQ> . i just meant that i see a lot of projects with description pages that read like the lisp flattery described above",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hm6\/X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i agree with pretty much all of your points, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " . i just meant that i see a lot of projects with description pages that read like the lisp flattery described above"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595604347.298300",
        "client_msg_id": "e99420ba-11bd-426c-a190-a94d6c99d0ab",
        "text": "Is there a parsing technique where you either make explicit which parts of the input are ignored and what the escape patterns are? Or parsing techniques where you selectively pick only parts of the input to begin with? (I realize that sounds like regular expressions as parsers, which I know is usually not a good idea — any other techniques beyond regex?)\n\nExample: many programming languages skip comments in the lexer. Or think of string literals, where it pretty much doesn't matter what's inside the string, as long as you play by the escaping rules. If you take the strings example further, these strings often get parsed by a different parser at a different time, for instance when the string is a number or a date, or perhaps a regex.\n\nIs there anything that makes these different \"stages\" of parsing explicit? (I'm obviously looking for a concept I don't know a name for…)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "reply_count": 36,
        "reply_users_count": 8,
        "latest_reply": "1597783509.112700",
        "reply_users": [
            "U5STGTB3J",
            "UT60XSVCN",
            "UCUSW7WVD",
            "UUB7RA7PF",
            "UP28ETUSE",
            "UK3LH8CF5",
            "U01661S9F34",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1595604500.298700"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1595604595.298900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595604718.300900"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1595604859.301700"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595604870.301900"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1595604941.302100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595604943.302300"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595604985.302500"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1595605022.302900"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595605067.303100"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1595606130.303300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595606631.303900"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595606894.304100"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595606933.304600"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595606948.304900"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595606979.305100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595607171.305300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595607399.305500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595608371.305700"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1595609131.305900"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595609395.306100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595609957.306500"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595613185.307400"
            },
            {
                "user": "U01661S9F34",
                "ts": "1595618569.308900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595622020.310000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595622478.310200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1595625150.342700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595661754.374900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595819368.409600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595825057.409800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595904145.414700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595904308.414900"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595921270.418000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595922964.418200"
            },
            {
                "user": "UP28ETUSE",
                "ts": "1595940920.422100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1597783509.112700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dOvU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a parsing technique where you either make explicit which parts of the input are ignored and what the escape patterns are? Or parsing techniques where you selectively pick only parts of the input to begin with? (I realize that sounds like regular expressions as parsers, which I know is usually not a good idea — any other techniques beyond regex?)\n\nExample: many programming languages skip comments in the lexer. Or think of string literals, where it pretty much doesn't matter what's inside the string, as long as you play by the escaping rules. If you take the strings example further, these strings often get parsed by a different parser at a different time, for instance when the string is a number or a date, or perhaps a regex.\n\nIs there anything that makes these different \"stages\" of parsing explicit? (I'm obviously looking for a concept I don't know a name for…)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595604500.298700",
        "client_msg_id": "179f70ff-e0f5-4eef-b10f-aa0f1c8182f5",
        "text": "Let me jump right in and say that I'm aware of parser combinators, which allow you to have different parsers composed of different components that can stand in for different languages, e.g. the host language + the date formatter language used in particular string literals. However, there isn't really a way to just skip over the \"I don't care about what's in here\" strings without breaking the whole parser, or is there?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "URNl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me jump right in and say that I'm aware of parser combinators, which allow you to have different parsers composed of different components that can stand in for different languages, e.g. the host language + the date formatter language used in particular string literals. However, there isn't really a way to just skip over the \"I don't care about what's in here\" strings without breaking the whole parser, or is there?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595604595.298900",
        "client_msg_id": "0fc83ffc-a043-446e-becc-eee4aafe79a5",
        "text": "Isn't this the difference between lexing and parsing as you alluded to yourself?\n\nOtherwise, you can set it up as a pipeline, I guess. Do you have a more concrete example?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U9x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't this the difference between lexing and parsing as you alluded to yourself?\n\nOtherwise, you can set it up as a pipeline, I guess. Do you have a more concrete example?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595604718.300900",
        "client_msg_id": "5d0db050-d1b1-4eb0-a412-e5763caa4988",
        "text": "Yeah, I don't think so. If you skip over some text you want to make sure there isn't a `#` in there that disables everything you're parsing. And so on.\n\nThis is a key difference between tools and languages, IMO. Tools can be opt-in (though they don't have to be). But languages have to be all or nothing.\n\nIn Mu I tried as far as possible to do everything with partial on-demand syntax sugar. But there's still 2 points at which I need to draw a line and start parsing everything from scratch.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "spG7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I don't think so. If you skip over some text you want to make sure there isn't a "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in there that disables everything you're parsing. And so on.\n\nThis is a key difference between tools and languages, IMO. Tools can be opt-in (though they don't have to be). But languages have to be all or nothing.\n\nIn Mu I tried as far as possible to do everything with partial on-demand syntax sugar. But there's still 2 points at which I need to draw a line and start parsing everything from scratch."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595604721.301200",
        "client_msg_id": "ebf0e6a6-cca7-4931-b29a-35842fcf2834",
        "text": "<https:\/\/github.com\/koka-lang\/libhandler|https:\/\/github.com\/koka-lang\/libhandler>\nThis is a pretty cool hack. It's funny how much is possible if you're willing to break the language a bit. (I recall Duff style coroutines)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604721.301200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1595604817.301500",
        "reply_users": [
            "UT60XSVCN"
        ],
        "replies": [
            {
                "user": "UT60XSVCN",
                "ts": "1595604817.301500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "koka-lang\/libhandler",
                "text": "Libhandler implements algebraic effects and handlers in portable C99. Monads for free in C.",
                "title": "koka-lang\/libhandler",
                "footer": "<https:\/\/github.com\/koka-lang\/libhandler|koka-lang\/libhandler>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1497894499,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "100",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "C",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/koka-lang\/libhandler",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vfN+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/koka-lang\/libhandler",
                                "text": "https:\/\/github.com\/koka-lang\/libhandler"
                            },
                            {
                                "type": "text",
                                "text": "\nThis is a pretty cool hack. It's funny how much is possible if you're willing to break the language a bit. (I recall Duff style coroutines)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UHWC9PXBL",
                    "UP28ETUSE"
                ],
                "count": 2
            },
            {
                "name": "ok_hand",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "thinking_face",
                "users": [
                    "U01661S9F34",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595604817.301500",
        "client_msg_id": "09dfa229-b8cc-4760-962c-c824f4d03159",
        "text": "Also, it seems people have different definitions of \"portable\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604721.301200",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jq0Ak",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, it seems people have different definitions of \"portable\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1595604859.301700",
        "client_msg_id": "e9627bc7-c332-4226-86d0-a2c361f46c5c",
        "text": "I am no expert in parsing but I don't see why you couldn't postpone parsing of string insides for later, as long as you can tell where the string starts and end? For that you would need to care about escaping, but that is it. But I guess I am getting smth wrong here?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wi=B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am no expert in parsing but I don't see why you couldn't postpone parsing of string insides for later, as long as you can tell where the string starts and end? For that you would need to care about escaping, but that is it. But I guess I am getting smth wrong here?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595604870.301900",
        "client_msg_id": "af001e66-7183-4633-a029-2d710c9b8096",
        "text": "<@UT60XSVCN> The difference between lexing and parsing is not what I mean, although I understand that my examples fit that.\n\nHow about parsing source code where comments also have a certain structure — the compiler\/interpreter doesn't care about the comments, a documentation generator doesn't care about the source code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7TLY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UT60XSVCN"
                            },
                            {
                                "type": "text",
                                "text": " The difference between lexing and parsing is not what I mean, although I understand that my examples fit that.\n\nHow about parsing source code where comments also have a certain structure — the compiler\/interpreter doesn't care about the comments, a documentation generator doesn't care about the source code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595604941.302100",
        "client_msg_id": "d70e61e6-8de7-469e-a989-50128214467c",
        "text": "So is the problem that you'd want to reuse the original parser for both the compiler and the documentation generator?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7af9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So is the problem that you'd want to reuse the original parser for both the compiler and the documentation generator?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595604943.302300",
        "client_msg_id": "56e3f59f-6ff0-43db-b6ba-090a66fa3584",
        "text": "<@UUB7RA7PF> Yes, exactly, it's done all the time. I guess I'm looking for formalisms around that. Are there formalisms about escaping?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/LiV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " Yes, exactly, it's done all the time. I guess I'm looking for formalisms around that. Are there formalisms about escaping?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1595604985.302500",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1595605015.000000"
        },
        "client_msg_id": "0edcca05-8780-4732-a155-3a56b0dbd475",
        "text": "I've bumped into this while I wrote a JSON parser in Standard ML, just for fun. I wanted the String and Number lexers to be pluggable. This won't help you much, but I decided to call them paralexers, because they sit beside and help the overall lexing phase.\n\nI'd love to know if there's an established term for this type of parameterized lexers\/parsers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x2Tp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've bumped into this while I wrote a JSON parser in Standard ML, just for fun. I wanted the String and Number lexers to be pluggable. This won't help you much, but I decided to call them paralexers, because they sit beside and help the overall lexing phase.\n\nI'd love to know if there's an established term for this type of parameterized lexers\/parsers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1595605022.302900",
        "client_msg_id": "8cf89756-f4aa-49c9-b735-c3ae76c672aa",
        "text": "Not exactly what you are looking for, but I thought this was related enough to link to. The idea is a microgrammer where you just define the parts you care about and ignore everything else.\n\n\n<https:\/\/blog.acolyer.org\/2016\/05\/31\/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Ri=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not exactly what you are looking for, but I thought this was related enough to link to. The idea is a microgrammer where you just define the parts you care about and ignore everything else.\n\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.acolyer.org\/2016\/05\/31\/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595605067.303100",
        "client_msg_id": "fd711f14-2e20-49b8-89b6-871293fbb16a",
        "text": "<@UK3LH8CF5> Uh, yes, that sounds interesting. I'll take a look. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U8+C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " Uh, yes, that sounds interesting. I'll take a look. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1595606130.303300",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1595606281.000000"
        },
        "client_msg_id": "0ad41a45-625d-434b-a601-af28b55fabdd",
        "text": "<@U5STGTB3J> I don't know of any formalisms, but here is couple of simple things we all see in practice:\n• Defined delimiters with defined escaping mechanism. Example: strings.\n• Defined delimiters with no escaping mechanism. Example: multiline comments in C++ (\/* *\/)  (not 100% sure about this but I think they can't be escaped).\n• If line starts with special sequence, whole line is considered as a thing. This is really just a specialized case of defined delimiters with no escaping mechanism, where ending delimiter is newline. Example: line comments.\nI have been playing with this lately because in compiler\/parser we are building, we currently have the need to parse blocks of JS without actually parsing the JS -&gt; so I would say the same challenge as you are having.\nWe decided to go with simple solution for now: Defined delimiters with no escaping mechanism. In our case we are going with `{=js` as starting delimiter and `js=}` as end delimiter. While situation could in theory happen where developer wants to have such sequence (`js=}`) in their code inside this JS block, as a part of string for example, I don't think it is a real problem in practice, and it can be easily circumvented (by breaking down the string or adding some whitespace or so on). So we basically parse these blocks as strings, and then process them later in the pipeline (some of them we even just copy paste and never process -&gt; but those are implementation details now).\n\nAs more advanced step, I see doing the following: once our parser hits the `{=js` , we switch to JS parser and let it parse whatever follows, JS statement by JS statement. After each JS statement, we can check if there is `=js}`  after if, and if so, we stop with parsing JS and continue with our parser. I believe JSX does something similar, although maybe somewhat simpler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uz4n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I don't know of any formalisms, but here is couple of simple things we all see in practice:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Defined delimiters with defined escaping mechanism. Example: strings."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Defined delimiters with no escaping mechanism. Example: multiline comments in C++ (\/* *\/)  (not 100% sure about this but I think they can't be escaped)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If line starts with special sequence, whole line is considered as a thing. This is really just a specialized case of defined delimiters with no escaping mechanism, where ending delimiter is newline. Example: line comments."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI have been playing with this lately because in compiler\/parser we are building, we currently have the need to parse blocks of JS without actually parsing the JS -> so I would say the same challenge as you are having.\nWe decided to go with simple solution for now: Defined delimiters with no escaping mechanism. In our case we are going with "
                            },
                            {
                                "type": "text",
                                "text": "{=js",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as starting delimiter and "
                            },
                            {
                                "type": "text",
                                "text": "js=}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as end delimiter. While situation could in theory happen where developer wants to have such sequence ("
                            },
                            {
                                "type": "text",
                                "text": "js=}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") in their code inside this JS block, as a part of string for example, I don't think it is a real problem in practice, and it can be easily circumvented (by breaking down the string or adding some whitespace or so on). So we basically parse these blocks as strings, and then process them later in the pipeline (some of them we even just copy paste and never process -> but those are implementation details now).\n\nAs more advanced step, I see doing the following: once our parser hits the "
                            },
                            {
                                "type": "text",
                                "text": "{=js",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , we switch to JS parser and let it parse whatever follows, JS statement by JS statement. After each JS statement, we can check if there is "
                            },
                            {
                                "type": "text",
                                "text": "=js}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  after if, and if so, we stop with parsing JS and continue with our parser. I believe JSX does something similar, although maybe somewhat simpler."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595606631.303900",
        "client_msg_id": "2509a186-653b-4e34-a04e-856feff7e6ee",
        "text": "You're right, this is something I've done many times but never seen a formalism for.\n\nI just searched for 'hierarchical parsing' and the best I could find was <https:\/\/alandix.com\/blog\/2011\/03\/12\/hierarchical-grammars-for-more-human-like-compiler-parsing|https:\/\/alandix.com\/blog\/2011\/03\/12\/hierarchical-grammars-for-more-human-like-compiler-parsing>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lBjs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You're right, this is something I've done many times but never seen a formalism for.\n\nI just searched for 'hierarchical parsing' and the best I could find was "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/alandix.com\/blog\/2011\/03\/12\/hierarchical-grammars-for-more-human-like-compiler-parsing",
                                "text": "https:\/\/alandix.com\/blog\/2011\/03\/12\/hierarchical-grammars-for-more-human-like-compiler-parsing"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1595606894.304100",
        "client_msg_id": "5c395c1b-07b9-4569-86fe-d65726d66a1c",
        "text": "I think the formalism is called Island Grammar: <https:\/\/en.wikipedia.org\/wiki\/Island_grammar>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "538g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the formalism is called Island Grammar: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Island_grammar"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1595606933.304600",
        "client_msg_id": "e722eb7b-e243-4560-9d70-3b440621e2c3",
        "text": "Also: <https:\/\/theantlrguy.atlassian.net\/wiki\/spaces\/ANTLR3\/pages\/2687313\/Island+Grammars+Under+Parser+Control>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+su3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/theantlrguy.atlassian.net\/wiki\/spaces\/ANTLR3\/pages\/2687313\/Island+Grammars+Under+Parser+Control"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595606948.304900",
        "client_msg_id": "73c92ffa-2c2e-4765-b773-c6edc7f1f989",
        "text": "<@UUB7RA7PF> Thanks, yes, that describes the cases for common text-based languages.\n\nWhile we're at it, I'd also add the arguably simpler ways configuration files use tabs and newlines or sometimes \\0 for structure. And I'd also mention fixed-size and length-based encoding used in some lower-level network protocols.\n\nTotally get your challenges with JS. I'm actually looking at this from the other end — when you design a language (which in my case is more about data description than about programming at the moment), which of those formalisms should you use when? What are the benefits and drawbacks of each approach?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hut",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, yes, that describes the cases for common text-based languages.\n\nWhile we're at it, I'd also add the arguably simpler ways configuration files use tabs and newlines or sometimes \\0 for structure. And I'd also mention fixed-size and length-based encoding used in some lower-level network protocols.\n\nTotally get your challenges with JS. I'm actually looking at this from the other end — when you design a language (which in my case is more about data description than about programming at the moment), which of those formalisms should you use when? What are the benefits and drawbacks of each approach?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595606979.305100",
        "client_msg_id": "a9314055-fe44-42fb-820e-271a905ac4ba",
        "text": "<@UCUSW7WVD> Uh, the references in that one look promising… thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Im3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Uh, the references in that one look promising… thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595607171.305300",
        "client_msg_id": "36fa8297-3b54-4148-8ca1-4d2a0e8821b1",
        "text": "<@UP28ETUSE> Huh, never heard of Island Grammars before.\n\nAnd oh, I guess template languages would've been a much better example to go with… :face_palm:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=6\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP28ETUSE"
                            },
                            {
                                "type": "text",
                                "text": " Huh, never heard of Island Grammars before.\n\nAnd oh, I guess template languages would've been a much better example to go with… "
                            },
                            {
                                "type": "emoji",
                                "name": "face_palm",
                                "unicode": "1f926"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595607399.305500",
        "client_msg_id": "b9c6ca25-5319-4b9f-960a-b47471ecfc3d",
        "text": "This is great. Thanks everyone for trying to follow my weird train of thought and coming up with all these pointers. (Please keep going if you find anything else! Just wanted to show my appreciation as this is one of those things where a forum like this can really help; basically LMGTFY when you don't know the terms to search for.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X0lr+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is great. Thanks everyone for trying to follow my weird train of thought and coming up with all these pointers. (Please keep going if you find anything else! Just wanted to show my appreciation as this is one of those things where a forum like this can really help; basically LMGTFY when you don't know the terms to search for.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UP28ETUSE",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595608371.305700",
        "client_msg_id": "c144c7f1-6ca8-438a-a5b6-18ab24910caa",
        "text": "It's actually interesting to think of lexing vs parsing as a single point in a more general space of possibilities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "63Imb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's actually interesting to think of lexing vs parsing as a single point in a more general space of possibilities."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1595609131.305900",
        "client_msg_id": "d090f136-932c-4988-a2db-bd9d5b261028",
        "text": "<@U5STGTB3J> Aha got it, interesting that you are looking at it from that perspective: I would love to hear more about this if you manage to formalize this or write something!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zazjY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " Aha got it, interesting that you are looking at it from that perspective: I would love to hear more about this if you manage to formalize this or write something!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595609395.306100",
        "client_msg_id": "1bfb67d9-4f64-448d-a377-40a2f4f233b7",
        "text": "<@UCUSW7WVD> Not sure what you mean, but it sounds intriguing. For me lexing and parsing are just about regular vs. context-free. But you seem to look at how these are often separate stages…? In that space I like the idea of micro-pass parsing, here's a good intro with links to relevant papers: <https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "SIGPLAN Blog",
                "title": "My First Fifteen Compilers",
                "title_link": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/",
                "text": "We sometimes think of the number of passes in a compiler as a measure of the compiler’s complexity. But what if we could make compiler development more approachable by fully embracing the id…",
                "fallback": "SIGPLAN Blog: My First Fifteen Compilers",
                "image_url": "https:\/\/blog.sigplan.org\/wp-content\/uploads\/2019\/07\/shutterstock_306120221.jpg",
                "image_width": 393,
                "image_height": 250,
                "ts": 1562677203,
                "from_url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/",
                "image_bytes": 5880099,
                "id": 1,
                "original_url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F7u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Not sure what you mean, but it sounds intriguing. For me lexing and parsing are just about regular vs. context-free. But you seem to look at how these are often separate stages…? In that space I like the idea of micro-pass parsing, here's a good intro with links to relevant papers: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.sigplan.org\/2019\/07\/09\/my-first-fifteen-compilers\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595609957.306500",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1595610092.000000"
        },
        "client_msg_id": "94bc7d74-ec02-4e81-b409-0d4fc7b6e408",
        "text": "At the risk of derailing the thread, another concept I'd like to see as a \"single point in a more general space of possibilities\" is compile-time vs. run-time. It feels similar on a very abstract level.\n\nIf you think about it, there are more \"times\" than just the two: macro-expansion, compilation (perhaps with several stages of lowering into IL\/IRs), static analysis, linking all fall into compile-time, and then at runtime we have configuration (as long as the config file doesn't change), execution (as long as the process is running), session (e.g. as long as a user is logged in), run-loop (as long as a single run loop or frame is processed), stack frame, instruction, etc.\n\nWhat if type systems wouldn't (just) slice the space into possible values at runtime, but also across all these \"stages\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e37G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At the risk of derailing the thread, another concept I'd like to see as a \"single point in a more general space of possibilities\" is compile-time vs. run-time. It feels similar on a very abstract level.\n\nIf you think about it, there are more \"times\" than just the two: macro-expansion, compilation (perhaps with several stages of lowering into IL\/IRs), static analysis, linking all fall into compile-time, and then at runtime we have configuration (as long as the config file doesn't change), execution (as long as the process is running), session (e.g. as long as a user is logged in), run-loop (as long as a single run loop or frame is processed), stack frame, instruction, etc.\n\nWhat if type systems wouldn't (just) slice the space into possible values at runtime, but also across all these \"stages\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1595613185.307400",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1595613248.000000"
        },
        "client_msg_id": "c239967b-6b4f-4930-8d0e-1955e7b7716c",
        "text": "<@U5STGTB3J> I _believe_ what you're describing is called multi-stage programming (<https:\/\/en.wikipedia.org\/wiki\/Multi-stage_programming>). I don't have experience with it, but it looks like it might not exactly cover what we normally call runtime. However, it splits the compilation phase into multiple stages, so one stage is the program for a subsequent stage, and so on.\n\nHaving said that, I agree that sometimes it's not easy to explain some programs by splitting them just into compile-time and runtime. For example, an embedded DSL implementation might include a static analysis phase, but it's static only relative to the DSL, not to the host language. Similarly it might even contain a compile-time phase which is run as part of the meta-program runtime.\n\nIn addition, besides the classical compile time and runtime, I also like to think about _developer time_. There's a lot of computation happening at developer time and I guess what a lot of people in this community are trying to do is to improve exactly this phase.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "98\/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I "
                            },
                            {
                                "type": "text",
                                "text": "believe",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what you're describing is called multi-stage programming ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Multi-stage_programming"
                            },
                            {
                                "type": "text",
                                "text": "). I don't have experience with it, but it looks like it might not exactly cover what we normally call runtime. However, it splits the compilation phase into multiple stages, so one stage is the program for a subsequent stage, and so on.\n\nHaving said that, I agree that sometimes it's not easy to explain some programs by splitting them just into compile-time and runtime. For example, an embedded DSL implementation might include a static analysis phase, but it's static only relative to the DSL, not to the host language. Similarly it might even contain a compile-time phase which is run as part of the meta-program runtime.\n\nIn addition, besides the classical compile time and runtime, I also like to think about "
                            },
                            {
                                "type": "text",
                                "text": "developer time",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". There's a lot of computation happening at developer time and I guess what a lot of people in this community are trying to do is to improve exactly this phase."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595618569.308900",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595618592.000000"
        },
        "client_msg_id": "c617b2c2-0b54-4329-a417-6df05a4208ec",
        "text": "I'm a big fan of mutli-stage programming theory. You can also look at this through the dimension of location. Instead of \"compile time\" vs. \"runtime\", you have, \"does this computation run on the developer machine or the deployment machine?\"\n\ncompilation is just computation. It's all a mater of when and where different parts of a computation are run. There is no reason it can't be separated on both time and space dimensions... (I'm a static types person, but thinking this way made me hate dynamic typing less. I realized they are equivalent and it's a just an engineering trade-off about where the checking runs :stuck_out_tongue: )\n\nAt the risk of losing some important subtleties of the project, I think <@UCUSW7WVD>'s Mu project can be seen as an effective multi-stage programming system. It's one of the things I really like about that project :heart:. Mu attempts to make sure all the stages are distinct, user understandable (and theoretically verifiable) and only build upon earlier stages (no inter-stage recursion, a problem that macro systems run into).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6=\/PA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a big fan of mutli-stage programming theory. You can also look at this through the dimension of location. Instead of \"compile time\" vs. \"runtime\", you have, \"does this computation run on the developer machine or the deployment machine?\"\n\ncompilation is just computation. It's all a mater of when and where different parts of a computation are run. There is no reason it can't be separated on both time and space dimensions... (I'm a static types person, but thinking this way made me hate dynamic typing less. I realized they are equivalent and it's a just an engineering trade-off about where the checking runs "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " )\n\nAt the risk of losing some important subtleties of the project, I think "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "'s Mu project can be seen as an effective multi-stage programming system. It's one of the things I really like about that project "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            },
                            {
                                "type": "text",
                                "text": ". Mu attempts to make sure all the stages are distinct, user understandable (and theoretically verifiable) and only build upon earlier stages (no inter-stage recursion, a problem that macro systems run into)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U5STGTB3J"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595622020.310000",
        "client_msg_id": "a47e31c9-4e1b-4351-82b6-344948242cd7",
        "text": "<@U5STGTB3J> Yeah my thought was not very well-formed. Basic idea: I tend to visualize parsers as scans over streams that emit some sort of artifact as a side-effect. (Hence my original answer bluntly in the negative.) Hierarchical grammars seem to be scans that emit a stream as a side-effect, a stream that can itself be parsed by a different grammar. I've been doing this naturally for as long as I can remember.\n\nLexing feels like this sort of thing, a stream of bytes turned into a stream of tokens.\n\nCompiler passes also feel vaguely in the same family\/framework, though they of course can emit whole new languages (whether IR or VM bytecode or native code) as a side-effect. Nanopass is nice, but doesn't feel quite as rigorous as the taxonomy of languages and the correspondence results between classes of languages and automata.\n\nIn general, we humans seem to be good at creating and reasoning about formal systems in isolation. We have precious few results (to my knowledge) that apply to _arbitrary combinations_ of formal systems. Every seam between formal systems (wormhole between universes) is a non-linearity that makes things harder to reason about. This is basically why my kick lately is minimizing the number of inter-language seams rather than maximizing intra-language power.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8c7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " Yeah my thought was not very well-formed. Basic idea: I tend to visualize parsers as scans over streams that emit some sort of artifact as a side-effect. (Hence my original answer bluntly in the negative.) Hierarchical grammars seem to be scans that emit a stream as a side-effect, a stream that can itself be parsed by a different grammar. I've been doing this naturally for as long as I can remember.\n\nLexing feels like this sort of thing, a stream of bytes turned into a stream of tokens.\n\nCompiler passes also feel vaguely in the same family\/framework, though they of course can emit whole new languages (whether IR or VM bytecode or native code) as a side-effect. Nanopass is nice, but doesn't feel quite as rigorous as the taxonomy of languages and the correspondence results between classes of languages and automata.\n\nIn general, we humans seem to be good at creating and reasoning about formal systems in isolation. We have precious few results (to my knowledge) that apply to "
                            },
                            {
                                "type": "text",
                                "text": "arbitrary combinations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of formal systems. Every seam between formal systems (wormhole between universes) is a non-linearity that makes things harder to reason about. This is basically why my kick lately is minimizing the number of inter-language seams rather than maximizing intra-language power."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595622478.310200",
        "client_msg_id": "8c42a89e-34a2-42b3-9ce8-b53f64316f35",
        "text": "Looks like you've been noodling at this for a while now! <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1580798784083500>. I'd love to hear where the journey of the past few months (passing through a wormhole between pre- and post-pandemic universes) has taken you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1580798784083500",
                "fallback": "[February 3rd, 2020 10:46 PM] stefanlesser: Example: I have a UTF-8 encoded string that holds an XML document. I run a super-simple parser (scanner) over it that cuts it into .tag(String) and .text(String) values — all characters that used to be between &lt; and &gt; end up in .tags, everything else in .texts. Nothing more.\n\nNow in a separate step I take all the .tags and run another super-simple parser on the contents of each tag. If it starts with \/, the .tag is transformed into an .endTag, if not it’s transformed into a .startTag.\n\nIn another separate step I take all .startTags and run another super-simple parser on their contents to split tagName from attributes. Etc. You get the pattern.\n\nWhat weird way of parsing have I just reinvented?\nThis is not a quiz. I’m trying to figure out what this is called so I can search for articles that do something like this.",
                "ts": "1580798784.083500",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Example: I have a UTF-8 encoded string that holds an XML document. I run a super-simple parser (scanner) over it that cuts it into .tag(String) and .text(String) values — all characters that used to be between &lt; and &gt; end up in .tags, everything else in .texts. Nothing more.\n\nNow in a separate step I take all the .tags and run another super-simple parser on the contents of each tag. If it starts with \/, the .tag is transformed into an .endTag, if not it’s transformed into a .startTag.\n\nIn another separate step I take all .startTags and run another super-simple parser on their contents to split tagName from attributes. Etc. You get the pattern.\n\nWhat weird way of parsing have I just reinvented?\nThis is not a quiz. I’m trying to figure out what this is called so I can search for articles that do something like this.",
                "author_name": "Stefan Lesser",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U5STGTB3J",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1580798784083500",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ec5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like you've been noodling at this for a while now! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1580798784083500"
                            },
                            {
                                "type": "text",
                                "text": ". I'd love to hear where the journey of the past few months (passing through a wormhole between pre- and post-pandemic universes) has taken you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1595625150.342700",
        "client_msg_id": "CE8C0FF4-E24C-42C4-BCEC-4D74F9DE61C2",
        "text": "You’re dangerously good with search, <@UCUSW7WVD>.\n\nWell, this parser thing is just a side project that keeps coming up every few months, usually when I get to a point where I need to either import or export some arbitrary data in some arbitrary format. I always try to take another stab at solving it properly before I go back to just using a library or cobbling something together myself. So, unfortunately I have to admit that I haven’t spend the last few months on just that and therefore haven’t made much progress. :-)\n\nWhat I’m mostly trying to do is to transfer what I learned about cognitive science (categorization, metaphorical structuring, image schemas — the stuff you hear me talk about a lot here) to system and interface design. I’m practically trying to pull off what GoF did with Design Patterns in architecture from Christopher Alexander, but with Image Schemas in cognitive semantics from George Lakoff. Well, that’s the big dream. If I only get 5% there, it’ll be great.\n\nTo turn this rather theoretical endeavor into something more practical and technical, I’m currently trying to build a thinking tool that covers important parts of an individual’s personal knowledge management process. Think note taking, second brain, roam cult, digital garden. But trying to go a little beyond the “bi-directional links is how your brain works”.\n\nIt all comes together at designing the data model, both from a technical perspective (which isn’t that difficult) and from a user interface\/experience perspective. I want end users without technical experience to ultimately build and modify the data model themselves — without having to understand what a data model is. I think I described it better here: <https:\/\/stefan-lesser.com\/2019\/12\/06\/structure-and-behavior\/|https:\/\/stefan-lesser.com\/2019\/12\/06\/structure-and-behavior\/>\n\nLong story short: some of that image schema and metaphor stuff gave me some ideas and I’m trying to validate them. First just for myself, building something that improves my own process. If you see me pick up blogging again later this year it could mean that it worked…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595604347.298300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6s9r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You’re dangerously good with search, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nWell, this parser thing is just a side project that keeps coming up every few months, usually when I get to a point where I need to either import or export some arbitrary data in some arbitrary format. I always try to take another stab at solving it properly before I go back to just using a library or cobbling something together myself. So, unfortunately I have to admit that I haven’t spend the last few months on just that and therefore haven’t made much progress. :-)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "What I’m mostly trying to do is to transfer what I learned about cognitive science (categorization, metaphorical structuring, image schemas — the stuff you hear me talk about a lot here) to system and interface design. I’m practically trying to pull off what GoF did with Design Patterns in architecture from Christopher Alexander, but with Image Schemas in cognitive semantics from George Lakoff. Well, that’s the big dream. If I only get 5% there, it’ll be great.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nTo turn this rather theoretical endeavor into something more practical and technical, I’m currently trying to build a thinking tool that covers important parts of an individual’s personal knowledge management process. Think note taking, second brain, roam cult, digital garden. But trying to go a little beyond the “bi-directional links is how your brain works”.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "It all comes together at designing the data model, both from a technical perspective (which isn’t that difficult) and from a user interface\/experience perspective. I want end users without technical experience to ultimately build and modify the data model themselves — without having to understand what a data model is. I think I described it better here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefan-lesser.com\/2019\/12\/06\/structure-and-behavior\/",
                                "text": "https:\/\/stefan-lesser.com\/2019\/12\/06\/structure-and-behavior\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Long story short: some of that image schema and metaphor stuff gave me some ideas and I’m trying to validate them. First just for myself, building something that improves my own process. If you see me pick up blogging again later this year it could mean that it worked…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595628356.371600",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595628507.000000"
        },
        "client_msg_id": "aa45b261-1e9d-48a3-a89c-125b0511d734",
        "text": "Spinning off the <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1595442804152100|thread about Flash>, got me thinking about UX paradigms and animation tools.\n\nFlash had a layer based workflow with an interface to a scripting language.\nPhotoshop and After Effects are also layer based in a similar way.\n\nI remember when <https:\/\/www.foundry.com\/products\/nuke|Nuke> came out. It was a Node and Wire system as opposed to layers. The interesting thing was that Nuke had a steeper learning curve, but allowed you to do more complex things than you could do with After Effects.\n\nThere was some hype about Nuke overtaking After Effects, but it never did. They both exist and have found success in different niches. Nuke has become standard for \"more industrial\" \/ bigger Hollywood productions, but After Effects dominates the \"lower end\" consumer motion graphics market.\n\nSimilarly, I don't think I've ever seen a Node and Wire version of Photoshop.\n\nI think there might be a similar dichotomy in the world of audio software, but I'm not nearly as familiar with that industry.\n\nInterestingly, there is an increasing interest in Node and Wire systems in the game engine world: Unreal Blueprints, The Unity Bolt system that was recently posted, et...\n\n3D modeling software like Maya, Cinema4d, and Blender have had Node and Wire systems for years (and seem to be increasingly putting more features into those interfaces.)\n\nThe outlier here is 3D Studio Max, which has historically used a layer based system (Technically it was a modifier stack, but it was a similar idea.)\n\nLooking at non-programming products with Node and Wire UI's through a \"visual programming\" lense have given me an interesting analogy:\n\nIf you think of \"Node and Wire\" or \"Layer\/Stack based\" as visual programming language UX, then these products can be analogous to programming languages with similar syntax but with different standard libraries for a domain.\n\nOr in the case of \"Node\" vs. \"Layer\/Stack\", different syntax for the same standard library.\n\nThis community has a lot of experience with Node and Wire UI's, so I'd like to get your thoughts.\n\nRelating this back to the discussion about Flash as an intro to programming tool, and <@ULK0Z4MPV>'s comment, Is Node and Wire not the best way to introduce programming from a pedagogical perspective?\n\nMaybe there is something fundamental about a stack based or \"layers\" based system that makes it easier for non-programmers to understand?\n\nConversely, What would a Node-and-Wire version of a Vector art program look like?\nWould it be useful or convivial?\nDoes something like this already exist and I am just not aware of it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1595886551.413900",
        "reply_users": [
            "UC2A2ARPT",
            "U01661S9F34",
            "ULK0Z4MPV",
            "UJ6LDMMN0",
            "U016VUZGUUQ",
            "UE0ETTCG7"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1595635830.372500"
            },
            {
                "user": "U01661S9F34",
                "ts": "1595636882.373000"
            },
            {
                "user": "U01661S9F34",
                "ts": "1595636953.373200"
            },
            {
                "user": "U01661S9F34",
                "ts": "1595638378.373500"
            },
            {
                "user": "ULK0Z4MPV",
                "ts": "1595638660.373800"
            },
            {
                "user": "ULK0Z4MPV",
                "ts": "1595638714.374000"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1595778791.388600"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1595789202.397100"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1595886181.413400"
            },
            {
                "user": "ULK0Z4MPV",
                "ts": "1595886281.413700"
            },
            {
                "user": "ULK0Z4MPV",
                "ts": "1595886551.413900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b9lLL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Spinning off the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1595442804152100",
                                "text": "thread about Flash"
                            },
                            {
                                "type": "text",
                                "text": ", got me thinking about UX paradigms and animation tools.\n\nFlash had a layer based workflow with an interface to a scripting language.\nPhotoshop and After Effects are also layer based in a similar way.\n\nI remember when "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.foundry.com\/products\/nuke",
                                "text": "Nuke"
                            },
                            {
                                "type": "text",
                                "text": " came out. It was a Node and Wire system as opposed to layers. The interesting thing was that Nuke had a steeper learning curve, but allowed you to do more complex things than you could do with After Effects.\n\nThere was some hype about Nuke overtaking After Effects, but it never did. They both exist and have found success in different niches. Nuke has become standard for \"more industrial\" \/ bigger Hollywood productions, but After Effects dominates the \"lower end\" consumer motion graphics market.\n\nSimilarly, I don't think I've ever seen a Node and Wire version of Photoshop.\n\nI think there might be a similar dichotomy in the world of audio software, but I'm not nearly as familiar with that industry.\n\nInterestingly, there is an increasing interest in Node and Wire systems in the game engine world: Unreal Blueprints, The Unity Bolt system that was recently posted, et...\n\n3D modeling software like Maya, Cinema4d, and Blender have had Node and Wire systems for years (and seem to be increasingly putting more features into those interfaces.)\n\nThe outlier here is 3D Studio Max, which has historically used a layer based system (Technically it was a modifier stack, but it was a similar idea.)\n\nLooking at non-programming products with Node and Wire UI's through a \"visual programming\" lense have given me an interesting analogy:\n\nIf you think of \"Node and Wire\" or \"Layer\/Stack based\" as visual programming language UX, then these products can be analogous to programming languages with similar syntax but with different standard libraries for a domain.\n\nOr in the case of \"Node\" vs. \"Layer\/Stack\", different syntax for the same standard library.\n\nThis community has a lot of experience with Node and Wire UI's, so I'd like to get your thoughts.\n\nRelating this back to the discussion about Flash as an intro to programming tool, and "
                            },
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": "'s comment, Is Node and Wire not the best way to introduce programming from a pedagogical perspective?\n\nMaybe there is something fundamental about a stack based or \"layers\" based system that makes it easier for non-programmers to understand?\n\nConversely, What would a Node-and-Wire version of a Vector art program look like?\nWould it be useful or convivial?\nDoes something like this already exist and I am just not aware of it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1595635830.372500",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1595635835.000000"
        },
        "client_msg_id": "a5e31086-09b4-4352-963e-23b641851533",
        "text": "&gt; Conversely, What would a Node-and-Wire version of a Vector art program look like?\nThis is, basically, what I'm building: <https:\/\/ivanish.ca\/hest-time-travel\/>\n\n(Apologies for continually posting the same dang link again and again, but it's the only public-facing writing I've done about this project so far)\n\nThe thing I'm interested in isn't just putting a node and wire programming interface into a graphics program, but putting a graphics program into a node and wire programming interface.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4SM",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Conversely, What would a Node-and-Wire version of a Vector art program look like?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis is, basically, what I'm building: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ivanish.ca\/hest-time-travel\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(Apologies for continually posting the same dang link again and again, but it's the only public-facing writing I've done about this project so far)\n\nThe thing I'm interested in isn't just putting a node and wire programming interface into a graphics program, but putting a graphics program into a node and wire programming interface."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34",
                    "UA14TGLTC",
                    "UE0ETTCG7"
                ],
                "count": 3
            },
            {
                "name": "eyes",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595636882.373000",
        "client_msg_id": "77f95748-44d6-4f4e-a0db-7b6e3283fa19",
        "text": "&gt; The thing I'm interested in isn't just putting a node and wire programming interface into a graphics program, but putting a graphics program into a node and wire programming interface.\nThat is in line with what I was referring to when I said, \"these products can be analogous to programming languages with similar syntax but with different standard libraries for a domain.\"\nI feel like there is a strong connection between the \"standard library\" for a textual programming language, and the \"set of features\" of a visual programming language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=N0L",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thing I'm interested in isn't just putting a node and wire programming interface into a graphics program, but putting a graphics program into a node and wire programming interface."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat is in line with what I was referring to when I said, \"these products can be analogous to programming languages with similar syntax but with different standard libraries for a domain.\"\nI feel like there is a strong connection between the \"standard library\" for a textual programming language, and the \"set of features\" of a visual programming language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595636953.373200",
        "client_msg_id": "6a90db18-4a38-47b9-98b5-4eff3a44beef",
        "text": "Re-reading this post, I realize that I rambled and meandered a lot. It was a bit of idea vomit. My apologies. :flushed:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UAR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re-reading this post, I realize that I rambled and meandered a lot. It was a bit of idea vomit. My apologies. "
                            },
                            {
                                "type": "emoji",
                                "name": "flushed",
                                "unicode": "1f633"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01661S9F34",
        "type": "message",
        "ts": "1595638378.373500",
        "client_msg_id": "ca2d279d-133c-4743-bb57-5d19935403e9",
        "text": "<@UC2A2ARPT> reading your link. IIRC, Your breadth-first model is also how Hardware Design languages like Verilog and VHDL work (they are essentially modeling current through a bunch of tiny wires to model a chip)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "19925410efa8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-28\/1196019819111_19925410efa8da86ae13_72.jpg",
            "first_name": "",
            "real_name": "Ray Imber",
            "display_name": "Ray Imber",
            "team": "T5TCAFTA9",
            "name": "rayimber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s3=g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " reading your link. IIRC, Your breadth-first model is also how Hardware Design languages like Verilog and VHDL work (they are essentially modeling current through a bunch of tiny wires to model a chip)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1595638660.373800",
        "client_msg_id": "86abc54f-ce75-450e-a835-fc0a32349e9b",
        "text": "I admit I don't fully understand the post, but here's some idea vomit in response. Typically I see layers with 2d programs and wires with 3d (although 3rd programs typically use layers as well). Maybe it's simple and easy to do 2d transformations via layers, and I think it's easy to maintain a mental model of 2d space as well. 3d space is a bit harder to reason about, like if I build this staircase, is there enough space above you to not hit your head? And at the same time is it short enough to fit inside the room? Are the steps themselves a good height for climbing? Maybe more information can be held and transformed via nodes and wires in this case? And 2d programs stick with layers because they don't need that level of complexity?\n:shrug:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xBqW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I admit I don't fully understand the post, but here's some idea vomit in response. Typically I see layers with 2d programs and wires with 3d (although 3rd programs typically use layers as well). Maybe it's simple and easy to do 2d transformations via layers, and I think it's easy to maintain a mental model of 2d space as well. 3d space is a bit harder to reason about, like if I build this staircase, is there enough space above you to not hit your head? And at the same time is it short enough to fit inside the room? Are the steps themselves a good height for climbing? Maybe more information can be held and transformed via nodes and wires in this case? And 2d programs stick with layers because they don't need that level of complexity?\n"
                            },
                            {
                                "type": "emoji",
                                "name": "shrug",
                                "unicode": "1f937"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U01661S9F34",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "ULK0Z4MPV",
        "type": "message",
        "ts": "1595638714.374000",
        "edited": {
            "user": "ULK0Z4MPV",
            "ts": "1595639132.000000"
        },
        "client_msg_id": "6c56b635-72fe-4e79-9b6c-d8bf3b94a166",
        "text": "I'm excited to see where Hest goes with the way it merges the graphics with the node programming. I always imagined a nodes and wires vector program would typically have the nodes tacked on the side and produce things similar to p5.js \/ processing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84fdccb39d9b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-07\/1111736156419_84fdccb39d9b31c2626b_72.jpg",
            "first_name": "",
            "real_name": "Ryan King",
            "display_name": "Ryan King",
            "team": "T5TCAFTA9",
            "name": "ryan.king1809",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595628356.371600",
        "parent_user_id": "U01661S9F34",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Z3j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm excited to see where Hest goes with the way it merges the graphics with the node programming. I always imagined a nodes and wires vector program would typically have the nodes tacked on the side and produce things similar to p5.js \/ processing"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]