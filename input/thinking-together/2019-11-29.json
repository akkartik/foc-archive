[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575016839.299600",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1575016985.000000"
        },
        "client_msg_id": "b7d47f27-64ce-4e17-911e-cd7c5d75c35c",
        "text": "don't know if I follow, but isn't this related to session types? \"In complex distributed systems communicating participants agree on a protocol to follow, specifying type and direction of data exchanged.\n•Session types are a type formalism used to model structured communication-based programming.\n•Guarantee privacy,communication safety and session fidelity\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gl=Ny",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "don't know if I follow, but isn't this related to session types? \"In complex distributed systems communicating participants agree on a protocol to follow, specifying type and direction of data exchanged.\n•Session types are a type formalism used to model structured communication-based programming.\n•Guarantee privacy,communication safety and session fidelity\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575016884.299800",
        "client_msg_id": "8e22fb50-4e43-4cc4-ab70-e5ecbe75b8d3",
        "text": "also pony's type system helps \"Pony doesn’t have locks nor atomic operations or anything like that. Instead, the type system ensures at compile time that your concurrent program can never have data races. So you can write highly concurrent code and never get it wrong.\" <https:\/\/www.ponylang.io>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "attachments": [
            {
                "title": "Pony",
                "title_link": "https:\/\/www.ponylang.io\/",
                "text": "Pony - High Performance Actor Programming",
                "fallback": "Pony",
                "from_url": "https:\/\/www.ponylang.io\/",
                "thumb_url": "https:\/\/www.ponylang.io\/images\/logo.png",
                "thumb_width": 128,
                "thumb_height": 128,
                "service_icon": "https:\/\/www.ponylang.io\/images\/favicon.ico",
                "service_name": "ponylang.io",
                "id": 1,
                "original_url": "https:\/\/www.ponylang.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wOZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also pony's type system helps \"Pony doesn’t have locks nor atomic operations or anything like that. Instead, the type system ensures at compile time that your concurrent program can never have data races. So you can write highly concurrent code and never get it wrong.\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ponylang.io"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575016939.300100",
        "client_msg_id": "689b707c-a48e-4443-a5e4-693e79e92a38",
        "text": "erlang makes it simpler, the code inside an actor in single threaded and the message inbox serializes messages sent to it so you don't have to lock anything, just use many actors and you take advantage of multiple cores",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u3OF6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "erlang makes it simpler, the code inside an actor in single threaded and the message inbox serializes messages sent to it so you don't have to lock anything, just use many actors and you take advantage of multiple cores"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1575047479.306800",
        "client_msg_id": "ac037980-de26-4de1-800d-0805fc8789b6",
        "text": "Maybe most programs could be vastly simpler. MS Windows has enough code to fill enough textbooks that would stack up as tall as a sky scraper -- hundreds of millions of lines of code. And then Kay makes an operating system (STEPS) that has all the fundamental tools for authoring and web browsing, with only 20 thousand LOC.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zn=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe most programs could be vastly simpler. MS Windows has enough code to fill enough textbooks that would stack up as tall as a sky scraper -- hundreds of millions of lines of code. And then Kay makes an operating system (STEPS) that has all the fundamental tools for authoring and web browsing, with only 20 thousand LOC."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1575047538.307400",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1575047551.000000"
        },
        "client_msg_id": "30fa0285-f3c2-4f47-97d6-14250797b9af",
        "text": "I'll let this 18min video argue the rest:\n\n<https:\/\/youtu.be\/tb0_V7Tc5MU|https:\/\/youtu.be\/tb0_V7Tc5MU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Software -- past and future | Charles H. Moore | TEDxDavidsonAcademy",
                "title_link": "https:\/\/youtu.be\/tb0_V7Tc5MU",
                "author_name": "TEDx Talks",
                "author_link": "https:\/\/www.youtube.com\/user\/TEDxTalks",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/tb0_V7Tc5MU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Software -- past and future | Charles H. Moore | TEDxDavidsonAcademy",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/tb0_V7Tc5MU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/tb0_V7Tc5MU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/tb0_V7Tc5MU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pl=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll let this 18min video argue the rest:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/tb0_V7Tc5MU",
                                "text": "https:\/\/youtu.be\/tb0_V7Tc5MU"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1575047953.312200",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1575048019.000000"
        },
        "client_msg_id": "F34DA87C-0C66-405B-8E59-0C6B373CA0E7",
        "text": "How about `Link` only checking for URL equality (that’s what I would expect from a dedicated `Link` class or type) and offering a `.toString()` method or something like that to make it super easy to drop down into `String` and its comparison behavior. \n\nLeaving some control over what is wanted to the developer seems better than having “magic” behavior that will end up as surprising and unwanted in some cases.\n\nYour http\/s example sounds like you might want to offer easy ways to get to parts of the URL (scheme, host, path + components, query) as well so people can easily combine the parts they care for when caching. I’d say http and https are different URLs and treating them the same is asking for trouble, but with easy access to just the host and path you can build a straightforward cache without any confusion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OHJOg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about "
                            },
                            {
                                "type": "text",
                                "text": "Link",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " only checking for URL equality (that’s what I would expect from a dedicated "
                            },
                            {
                                "type": "text",
                                "text": "Link",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " class or type) and offering a "
                            },
                            {
                                "type": "text",
                                "text": ".toString()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " method or something like that to make it super easy to drop down into "
                            },
                            {
                                "type": "text",
                                "text": "String",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and its comparison behavior. \n\nLeaving some control over what is wanted to the developer seems better than having “magic” behavior that will end up as surprising and unwanted in some cases.\n\nYour http\/s example sounds like you might want to offer easy ways to get to parts of the URL (scheme, host, path + components, query) as well so people can easily combine the parts they care for when caching. I’d say http and https are different URLs and treating them the same is asking for trouble, but with easy access to just the host and path you can build a straightforward cache without any confusion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575048555.312500",
        "client_msg_id": "29c72265-3608-4059-8c66-e7a55fe1a063",
        "text": "<@U5STGTB3J> I find the comparisson by url to be the most common sense one, but not as common sense as when I did the first aggregation and the MIT links where not aggregating together and I went on a quest to find why equality was broken on my system before noticing that they all pointed to a different url (something that is not immediatly visible, only hovering over two or more links with the same label *may* make you notice it)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JEQO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I find the comparisson by url to be the most common sense one, but not as common sense as when I did the first aggregation and the MIT links where not aggregating together and I went on a quest to find why equality was broken on my system before noticing that they all pointed to a different url (something that is not immediatly visible, only hovering over two or more links with the same label "
                            },
                            {
                                "type": "text",
                                "text": "may",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " make you notice it)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1575048934.315200",
        "client_msg_id": "AEF655A8-AAAF-4F04-8BE3-18CFC722C5E6",
        "text": "<@UBN9AFS0N> It does certainly show how tiny little details make our jobs so complex: so many choices to make, so many expectations to break, so many things to be opinionated about…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iZp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " It does certainly show how tiny little details make our jobs so complex: so many choices to make, so many expectations to break, so many things to be opinionated about…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1575048965.315400",
        "client_msg_id": "e8bdb164-ed6e-4a63-a883-469f27eb6649",
        "text": "yep, the one that's common sense tripped me at the first attempt to use it :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y3Ybl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yep, the one that's common sense tripped me at the first attempt to use it "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1575070607.315700",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1575070624.000000"
        },
        "client_msg_id": "77fed21b-7521-4b81-be21-fce57ae05001",
        "text": "In the Beads language i redesigned the syntax for regular expressions, and it transpiles 1:1 with existing syntax, but uses a much easier to read syntax. Regular expressions are no match for the fancy Parse operator in Red, or the fabulous Icon string matching language (a sequel to SNOBOL and SPITBOL), but for use with JS, being able to define regular expressions more gracefully is a nice feature IMHO. The horrible original syntax was motivated by the intense pressure on the original unix designers to keep character count low as they typed on a model 33 teletype.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v90g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the Beads language i redesigned the syntax for regular expressions, and it transpiles 1:1 with existing syntax, but uses a much easier to read syntax. Regular expressions are no match for the fancy Parse operator in Red, or the fabulous Icon string matching language (a sequel to SNOBOL and SPITBOL), but for use with JS, being able to define regular expressions more gracefully is a nice feature IMHO. The horrible original syntax was motivated by the intense pressure on the original unix designers to keep character count low as they typed on a model 33 teletype."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]