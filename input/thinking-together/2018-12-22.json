[
    {
        "user": "UEZE9M2TU",
        "type": "message",
        "ts": "1545467751.028600",
        "client_msg_id": "79490275-CC40-4E4C-97B4-C097E446E897",
        "text": "I think Google Docs uses OT",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "48bcc44b41f7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-22\/510548569779_48bcc44b41f70ed4f9a3_72.png",
            "first_name": "Colton",
            "real_name": "Colton Pierson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "colton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545429792.023600",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/GU+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think Google Docs uses OT"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1545509426.029000",
        "client_msg_id": "72755c3c-599f-4ccc-bde4-660fee86e631",
        "text": "I think Notes was one of the first apps to switch to CloudKit instead of CoreData syncing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545429792.023600",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YC4f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think Notes was one of the first apps to switch to CloudKit instead of CoreData syncing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1545512403.029700",
        "client_msg_id": "fa94ec30-d278-4a56-8895-78c09cb3461e",
        "text": "A CCC talk that might be of interest to folks here: “Taming the Chaos: Can we build systems that actually work?” <https:\/\/fahrplan.events.ccc.de\/congress\/2018\/Fahrplan\/events\/9647.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545512403.029700",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1545571392.032200",
        "reply_users": [
            "UEDDR6L5Q",
            "UEGFXUK3M"
        ],
        "replies": [
            {
                "user": "UEDDR6L5Q",
                "ts": "1545518987.030300"
            },
            {
                "user": "UEGFXUK3M",
                "ts": "1545571392.032200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bCg=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A CCC talk that might be of interest to folks here: “Taming the Chaos: Can we build systems that actually work?” "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fahrplan.events.ccc.de\/congress\/2018\/Fahrplan\/events\/9647.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UEDDR6L5Q",
        "thread_ts": "1545387390.005400",
        "root": {
            "user": "UEDDR6L5Q",
            "type": "message",
            "ts": "1545387390.005400",
            "edited": {
                "user": "UEDDR6L5Q",
                "ts": "1545389607.000000"
            },
            "client_msg_id": "90335ada-5dab-4b07-a0ae-5e3e03051273",
            "text": "Have people here given much consideration to structured concurrency? I haven't spent a huge amount of time writing multithreaded\/async code, and so hadn't given it much thought. I apologise if this is all old news to many of you...\n\nI came across this article that makes a strong case that most of our current primitives have a similar effect on flow control to `goto`. It then presents the analogous solution. (N.B. others have named the same concept different things - `bundle`, `scope`, `nursery`, maybe others...). Notably this approach would seem to map to visual representation far more easily than promises\/arbitrary thread spawning\/...\n\n<https:\/\/vorpus.org\/blog\/notes-on-structured-concurrency-or-go-statement-considered-harmful>\n\nFor related links, including to videos on the topic, see <http:\/\/250bpm.com\/blog:137>\n\nAside: the term 'structured' seems too generic for what people actually mean. AFAICT, in the context here\/of `goto`s, 'structured' always means 'hierarchically structured', despite other types of structure existing.",
            "team": "T5TCAFTA9",
            "thread_ts": "1545387390.005400",
            "reply_count": 34,
            "reply_users_count": 9,
            "latest_reply": "1546870511.277000",
            "reply_users": [
                "U5TCAFTD3",
                "UEDDR6L5Q",
                "UA14TGLTC",
                "UCUSW7WVD",
                "UC21F8Q48",
                "U6KQ2S410",
                "U8A5MS6R1",
                "UEH6T3RJB",
                "UC2A2ARPT"
            ],
            "replies": [
                {
                    "user": "U5TCAFTD3",
                    "ts": "1545389544.008600"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545391051.009100"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545391467.009400"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545392205.010700"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545406255.014400"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545406303.014600"
                },
                {
                    "user": "U5TCAFTD3",
                    "ts": "1545407337.014900"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545407597.015100"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1545408888.015800"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545411249.016400"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1545411748.016700"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545412360.017100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545412653.017300"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1545412867.017500"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545415061.018000"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545416565.019000"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1545425345.020700"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1545426587.021100"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1545427721.022100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1545429790.023400"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1545431418.024200"
                },
                {
                    "user": "UEH6T3RJB",
                    "ts": "1545432761.024800"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1545434594.025200"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1545441860.025700"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1545454520.026400"
                },
                {
                    "user": "UEDDR6L5Q",
                    "ts": "1545518721.029800"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1545547365.031100"
                },
                {
                    "user": "U5TCAFTD3",
                    "ts": "1545560064.031400"
                },
                {
                    "user": "UEH6T3RJB",
                    "ts": "1545565826.031800"
                },
                {
                    "user": "UEH6T3RJB",
                    "ts": "1545566669.032000"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1545591624.032600"
                },
                {
                    "user": "UEH6T3RJB",
                    "ts": "1545607917.033000"
                },
                {
                    "user": "U6KQ2S410",
                    "ts": "1545612357.033200"
                },
                {
                    "user": "UC21F8Q48",
                    "ts": "1546870511.277000"
                }
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1546870511.277000",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "c\/7F9",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Have people here given much consideration to structured concurrency? I haven't spent a huge amount of time writing multithreaded\/async code, and so hadn't given it much thought. I apologise if this is all old news to many of you...\n\nI came across this article that makes a strong case that most of our current primitives have a similar effect on flow control to "
                                },
                                {
                                    "type": "text",
                                    "text": "goto",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ". It then presents the analogous solution. (N.B. others have named the same concept different things - "
                                },
                                {
                                    "type": "text",
                                    "text": "bundle",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ", "
                                },
                                {
                                    "type": "text",
                                    "text": "scope",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ", "
                                },
                                {
                                    "type": "text",
                                    "text": "nursery",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ", maybe others...). Notably this approach would seem to map to visual representation far more easily than promises\/arbitrary thread spawning\/...\n\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/vorpus.org\/blog\/notes-on-structured-concurrency-or-go-statement-considered-harmful"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nFor related links, including to videos on the topic, see "
                                },
                                {
                                    "type": "link",
                                    "url": "http:\/\/250bpm.com\/blog:137"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nAside: the term 'structured' seems too generic for what people actually mean. AFAICT, in the context here\/of "
                                },
                                {
                                    "type": "text",
                                    "text": "goto",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "s, 'structured' always means 'hierarchically structured', despite other types of structure existing."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1545518721.029800",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1545518832.000000"
        },
        "client_msg_id": "10f913c5-642f-4504-987b-3cd01a00fbb2",
        "text": "Going down this rabbit hole of concurrency models led me to a few more things I thought I'd share:\n\n- a couple of more detailed descriptions of using realtalk by <@UCL9Q87P0> (<https:\/\/rsnous.com\/posts\/notes-from-dynamicland-geokit\/>, <https:\/\/rsnous.com\/posts\/notes-from-dynamicland-programming-raspberry-pis\/>)\n\n- Linda\/tuple space\/blackboard models (<https:\/\/www.computer.org\/csdl\/proceedings\/hicss\/1997\/7734\/01\/7734010379.pdf>, <http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.39.8004&amp;rep=rep1&amp;type=pdf>)\n\n- Ivan Sutherland talking about his research on hardware that will make async\/'self-timed' processing a more natural fit (<https:\/\/www.youtube.com\/watch?v=aXVUoT_objA>)\n\n- (and a couple-hundred other pages, but I thought I'd prioritize!)",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Ivan Sutherland - \"How Quantized Should a Digital System Be?\"",
                "title_link": "https:\/\/www.youtube.com\/watch?v=aXVUoT_objA",
                "author_name": "UNC Computer Science",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCnrOdrBW4qYm8p12w9KNvkA",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/aXVUoT_objA\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Ivan Sutherland - \"How Quantized Should a Digital System Be?\"",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/aXVUoT_objA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=aXVUoT_objA",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=aXVUoT_objA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0SlDm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Going down this rabbit hole of concurrency models led me to a few more things I thought I'd share:\n\n- a couple of more detailed descriptions of using realtalk by "
                            },
                            {
                                "type": "user",
                                "user_id": "UCL9Q87P0"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rsnous.com\/posts\/notes-from-dynamicland-geokit\/"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rsnous.com\/posts\/notes-from-dynamicland-programming-raspberry-pis\/"
                            },
                            {
                                "type": "text",
                                "text": ")\n\n- Linda\/tuple space\/blackboard models ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.computer.org\/csdl\/proceedings\/hicss\/1997\/7734\/01\/7734010379.pdf"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.39.8004&amp;rep=rep1&amp;type=pdf",
                                "text": "http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.39.8004&rep=rep1&type=pdf"
                            },
                            {
                                "type": "text",
                                "text": ")\n\n- Ivan Sutherland talking about his research on hardware that will make async\/'self-timed' processing a more natural fit ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=aXVUoT_objA"
                            },
                            {
                                "type": "text",
                                "text": ")\n\n- (and a couple-hundred other pages, but I thought I'd prioritize!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1545518987.030300",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1545519056.000000"
        },
        "client_msg_id": "97c74b30-3e97-434b-b0cd-3a0bcb70b39d",
        "text": "I'm slightly amused that the introduction page on the linked website \"Rigorous Engineering of Mainstream Systems\" loads for a split second then immediately goes blank, removing all content but the nav header... (<https:\/\/www.cl.cam.ac.uk\/~pes20\/rems\/index-intro.html>)\nEDIT: the context page does the same, and the papers page duplicates the nav header",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545512403.029700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F5V5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm slightly amused that the introduction page on the linked website \"Rigorous Engineering of Mainstream Systems\" loads for a split second then immediately goes blank, removing all content but the nav header... ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cl.cam.ac.uk\/~pes20\/rems\/index-intro.html"
                            },
                            {
                                "type": "text",
                                "text": ")\nEDIT: the context page does the same, and the papers page duplicates the nav header"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1545526539.030800",
        "client_msg_id": "3890967e-87f7-4d9d-9a02-67a47e5bd1b7",
        "text": "Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545429792.023600",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SXzyt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1545547365.031100",
        "client_msg_id": "2116195f-2cc2-43d6-b635-a50ef2da90bd",
        "text": "<@U6KQ2S410> <@U5TCAFTD3> In a way, the ordering of statements and side-effects comes back to the problem of the granularity of the IO monad and really compositionality itself.... taking the thought train... a stop down memory lane, the dread at learning that when you have `f(g(), h())` in C, the order in which `g` and `h` get called is undefined!\n\nIt all boils down to expressing intentions.  Is there a bug which isn't a mismatch between what we wrote and what we meant?  Can tools help identify the subtle interactions (causally or otherwise) without getting in the way?  I suppose being able to clearly express the differences is an essential prerequisite.\n\nSo much client work amounts to pinning down the basic design of things... Is there one of these or many of them?  Do it go with one of those or many of them?  When do they get put together?  Who needs to sign off on it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545387390.005400",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F70i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " In a way, the ordering of statements and side-effects comes back to the problem of the granularity of the IO monad and really compositionality itself.... taking the thought train... a stop down memory lane, the dread at learning that when you have "
                            },
                            {
                                "type": "text",
                                "text": "f(g(), h())",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in C, the order in which "
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "h",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " get called is undefined!\n\nIt all boils down to expressing intentions.  Is there a bug which isn't a mismatch between what we wrote and what we meant?  Can tools help identify the subtle interactions (causally or otherwise) without getting in the way?  I suppose being able to clearly express the differences is an essential prerequisite.\n\nSo much client work amounts to pinning down the basic design of things... Is there one of these or many of them?  Do it go with one of those or many of them?  When do they get put together?  Who needs to sign off on it?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]