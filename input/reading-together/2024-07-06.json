[
    {
        "user": "U07BWTYKJQG",
        "type": "message",
        "ts": "1720254838.939829",
        "edited": {
            "user": "U07BWTYKJQG",
            "ts": "1720255114.000000"
        },
        "client_msg_id": "4f3ecb3a-9a3e-422a-8f88-d34eb376f719",
        "text": "Ah, I see the connection! And I see how tests are a good aid for this. My take on tests is that everyone who cares about their software being correct should do them, because I don't believe anyone can make and maintain correct software, so tests will be useful to show how and where you fail. But also they don't give correctness under typical use and definitely not security (read: correctness) under adversarial conditions. And and they don't give robustness, but also i'm not quite sure what robustness is really but i think my software should have it\n\n>  OP is much cleaner\nMore formal at least, your writing is very clear.\n\nI feel like there's a tension between formal correctness and robustness. The whole \"correctness and efficiency only\" goal of current software methods means we don't think about what happens after faults or memory vulnerabilities. I think I'd like to have correctness despite faults, which is different from what Robust-first computing seems to do? I'm not sure",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gab6480f198d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ab6480f198d285d8f1c8d27be7c7ad13.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "Polly",
            "real_name": "Polly",
            "display_name": "Polly",
            "team": "T5TCAFTA9",
            "name": "pollyboutet",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1720203029.699949",
        "parent_user_id": "U07BWTYKJQG",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WgbtO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I see the connection! And I see how tests are a good aid for this. My take on tests is that everyone who cares about their software being correct should do them, because I don't believe anyone can make and maintain correct software, so tests will be useful to show how and where you fail. But also they don't give correctness under typical use and definitely not security (read: correctness) under adversarial conditions. And and they don't give robustness, but also i'm not quite sure what robustness is really but i think my software should have it\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " OP is much cleaner"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More formal at least, your writing is very clear.\n\nI feel like there's a tension between formal correctness and robustness. The whole \"correctness and efficiency only\" goal of current software methods means we don't think about what happens after faults or memory vulnerabilities. I think I'd like to have correctness despite faults, which is different from what Robust-first computing seems to do? I'm not sure"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]