[
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1549337888.101700",
        "edited": {
            "user": "UCGR73CAY",
            "ts": "1549337901.000000"
        },
        "client_msg_id": "4a37b3f3-9c27-4d0a-9329-d8855f48b9e4",
        "text": "Hey everyone. I've been quiet for a while, but I finally have something to show for my time working on my language Mech the last couple of months. Last I showed it off here I had a video demo of a bouncing balls program. Shortly after that video I tore everything out and made a more realistic runtime. After about 4 months of work I'm back to where I was then, feature wise, but now the foundation is more stable and you can actually play with it in the browser:\n\n<http:\/\/mech-lang.gitlab.io\/try\/>\n\nClick compile and the bouncing ball program compiles. Then click start timer to set the balls in motion. You can click in the canvas area to add more balls. Click pause to stop them. Step forward and back moves through the transaction history.\n\nI don't really have a user guide done yet, but I have a list of expression that I know work, so you can get an idea of what's possible from this: <https:\/\/gitlab.com\/mech-lang\/syntax\/blob\/master\/tests\/compiler.rs>\n\nThe main idea is that each block of code reads from or writes to a set of global tables, denoted by hashtags. When all the input to a block is available, that block will execute the operations defined therein, and then writes data out to the global tables with a set operator `:=`. Blocks re-execute every time its inputs change, providing a reactive, live feel. You can also gate a block's execution on a specific column with the `~` operator, which will cause a block to run _only_ if the associated column changes.\n\nRight now, there are a ton of language features I haven't implemented yet. What I have implemented are basic math, operators, some inequality operators, logic operators, table construction syntax, and indexing operators. I'd like to make sure these operators are rock solid before I move on to anything else. I'm hoping some intrepid people here can test drive what I have now to find cases that don't work. For now, you can see program output in the Chrome console by clicking on \"View Core\". If you find any code that explodes or produces unexpected output, please let me know by filing an issue here: <https:\/\/github.com\/mech-lang\/mech\/issues>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549337888.101700",
        "reply_count": 14,
        "reply_users_count": 7,
        "latest_reply": "1550045351.008900",
        "reply_users": [
            "UAL7940NM",
            "UBN9AFS0N",
            "U5TCAFTD3",
            "UCGR73CAY",
            "UFPPABQ7P",
            "UFS53UWE5",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UAL7940NM",
                "ts": "1549353447.102200"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549356309.102500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549356314.102700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1549360513.103300"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1549372466.103500"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1549385034.104700"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1549443564.105300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1549443743.105500"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1549465321.105800"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1549465381.106000"
            },
            {
                "user": "UFS53UWE5",
                "ts": "1549726983.106700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1549873079.000200"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1549986882.001600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1550045351.008900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1550054938.000000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7zo2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey everyone. I've been quiet for a while, but I finally have something to show for my time working on my language Mech the last couple of months. Last I showed it off here I had a video demo of a bouncing balls program. Shortly after that video I tore everything out and made a more realistic runtime. After about 4 months of work I'm back to where I was then, feature wise, but now the foundation is more stable and you can actually play with it in the browser:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/mech-lang.gitlab.io\/try\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nClick compile and the bouncing ball program compiles. Then click start timer to set the balls in motion. You can click in the canvas area to add more balls. Click pause to stop them. Step forward and back moves through the transaction history.\n\nI don't really have a user guide done yet, but I have a list of expression that I know work, so you can get an idea of what's possible from this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/mech-lang\/syntax\/blob\/master\/tests\/compiler.rs"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe main idea is that each block of code reads from or writes to a set of global tables, denoted by hashtags. When all the input to a block is available, that block will execute the operations defined therein, and then writes data out to the global tables with a set operator "
                            },
                            {
                                "type": "text",
                                "text": ":=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Blocks re-execute every time its inputs change, providing a reactive, live feel. You can also gate a block's execution on a specific column with the "
                            },
                            {
                                "type": "text",
                                "text": "~",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operator, which will cause a block to run "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if the associated column changes.\n\nRight now, there are a ton of language features I haven't implemented yet. What I have implemented are basic math, operators, some inequality operators, logic operators, table construction syntax, and indexing operators. I'd like to make sure these operators are rock solid before I move on to anything else. I'm hoping some intrepid people here can test drive what I have now to find cases that don't work. For now, you can see program output in the Chrome console by clicking on \"View Core\". If you find any code that explodes or produces unexpected output, please let me know by filing an issue here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mech-lang\/mech\/issues"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U85HCL7JP",
                    "UCKRZS3DZ",
                    "U5TCAFTD3",
                    "UEGFXUK3M",
                    "UCXR52MU2"
                ],
                "count": 5
            },
            {
                "name": "heart",
                "users": [
                    "UFPPABQ7P",
                    "UD43R8ZFV"
                ],
                "count": 2
            },
            {
                "name": "tada",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1549353447.102200",
        "edited": {
            "user": "UAL7940NM",
            "ts": "1549353468.000000"
        },
        "client_msg_id": "24f579fb-71b5-401c-9846-500555d4684b",
        "text": "I get an error: ```Error importing `index.js`: ReferenceError: \"BigUint64Array is not defined\"``` (Using the latest firefox)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549337888.101700",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YIh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I get an error: "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Error importing `index.js`: ReferenceError: \"BigUint64Array is not defined\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": " (Using the latest firefox)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]