[
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696405467.259399",
        "edited": {
            "user": "U05SU27S1M2",
            "ts": "1696405483.000000"
        },
        "client_msg_id": "ccdfd044-b3ea-4bca-961a-06fe50c5e230",
        "text": "<@U03R0B9U1GD> that's great! I talked with the original organisers about this though and they were really open about the fact that they needed to disassociate their work from the arts for the sake of their careers. That's why they called it 'live programming' rather than 'live coding' - they wanted to create a new community that was separate from the existing community focussed on applications in the performing arts. That's totally understandable, but it's been a bit sad to see it drift away from acknowledging that community exists at all. To be fair there are probably similar separating forces on the other side.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t93KA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03R0B9U1GD"
                            },
                            {
                                "type": "text",
                                "text": " that's great! I talked with the original organisers about this though and they were really open about the fact that they needed to disassociate their work from the arts for the sake of their careers. That's why they called it 'live programming' rather than 'live coding' - they wanted to create a new community that was separate from the existing community focussed on applications in the performing arts. That's totally understandable, but it's been a bit sad to see it drift away from acknowledging that community exists at all. To be fair there are probably similar separating forces on the other side."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696405762.084449",
        "client_msg_id": "d7b791a5-1042-4877-b231-594ea5108324",
        "text": "<@U013ZLJARC7> Yep agreed that formal languages are required to communicate algorithms precisely, but again I don't think Binder's argument is that mathematics is bad or anything like that. It's more that people have worked with algorithms in different ways in the past, and that there are a lot of possibilities for the future. I'm a bit surprised to see pushback for this idea here - isn't that what the 'future of coding' is about?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Mtry",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " Yep agreed that formal languages are required to communicate algorithms precisely, but again I don't think Binder's argument is that mathematics is bad or anything like that. It's more that people have worked with algorithms in different ways in the past, and that there are a lot of possibilities for the future. I'm a bit surprised to see pushback for this idea here - isn't that what the 'future of coding' is about?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696405948.673509",
        "edited": {
            "user": "U05SU27S1M2",
            "ts": "1696405969.000000"
        },
        "client_msg_id": "9e8c2113-7343-46d5-be2f-955be7342810",
        "text": "I'm not personally interested in LLMs at all though.. I'm too old to really engage with another 'AI' wave. I'm here for the more general idea of looking at the history of language and algorithms as a way to see and work beyond contemporary assumptions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JzHI8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not personally interested in LLMs at all though.. I'm too old to really engage with another 'AI' wave. I'm here for the more general idea of looking at the history of language and algorithms as a way to see and work beyond contemporary assumptions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1696406735.112799",
        "client_msg_id": "73439979-c627-4ec8-abd0-6578e4646cfb",
        "text": "As others mentioned above, we have only the extended description to go by without reading the text. The description (which I agree was likely not written by the author) leans in the direction to which I’m reacting. I’ll be happy to read your more accurate review of the book! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YkBQa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As others mentioned above, we have only the extended description to go by without reading the text. The description (which I agree was likely not written by the author) leans in the direction to which I’m reacting. I’ll be happy to read your more accurate review of the book! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MTMF6Y4W",
        "type": "message",
        "ts": "1696407722.236939",
        "client_msg_id": "932d5f7f-a773-4e20-a8c4-c26165833d35",
        "text": "It really depends on how the eraser works. I'm assuming it \"replaces\" colored pixels. Is that right?\nIf so, displaying it as \"fill the space with clear\" could be intuitive. Where it could get very messy, is how it goes into the color picker. Inside a wheel gives you a broken color model. transparent (0 opacity) and erase have different meanings if you have any options between 0 and 100%. Maybe as an explicit preset \"color\"? Though I don't know if that gives you a new button problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e4fc5f2a2c70",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-24\/5478852762419_e4fc5f2a2c70210c1841_72.png",
            "first_name": "Ibro",
            "real_name": "Ibro C.",
            "display_name": "ibro",
            "team": "T5TCAFTA9",
            "name": "foc214",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1695985652.960179",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CPINk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It really depends on how the eraser works. I'm assuming it \"replaces\" colored pixels. Is that right?\nIf so, displaying it as \"fill the space with clear\" could be intuitive. Where it could get very messy, is how it goes into the color picker. Inside a wheel gives you a broken color model. transparent (0 opacity) and erase have different meanings if you have any options between 0 and 100%. Maybe as an explicit preset \"color\"? Though I don't know if that gives you a new button problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04DZ850WRW",
        "type": "message",
        "ts": "1696409565.899819",
        "client_msg_id": "c062dc1a-6f98-46fe-86bb-b039a2a06429",
        "text": "Also a big fan! Happy to discuss the ideas. I think people are kind of trying to implement it in IOT but somehow missing the point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga02c280f586",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a02c280f586228f9531d32cf32df63aa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Maximilian",
            "real_name": "Maximilian Ernestus",
            "display_name": "Maximilian Ernestus",
            "team": "T5TCAFTA9",
            "name": "maximilian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688790912.594619",
        "parent_user_id": "U04UE0GNFU6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "scmYB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also a big fan! Happy to discuss the ideas. I think people are kind of trying to implement it in IOT but somehow missing the point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05T675LXTM",
        "type": "message",
        "ts": "1696410113.191029",
        "edited": {
            "user": "U05T675LXTM",
            "ts": "1696410226.000000"
        },
        "client_msg_id": "ef28e012-c60c-42f2-b55c-570df72c458b",
        "text": "Some thoughts re: ‘67 Considered Harmful’:\n*Superparentheses*:\nLove the discussion about this topic :stuck_out_tongue:. Haskell has `$` which means ‘opening parenthesis that is closed by the end of the line’ which gets a bit close to the idea of a ‘super opening parenthesis’.\n\n*C and GOTO:* \nC came out after this paper, and its `goto` statement was neutered: It only allows _local_ jumps (remaining in the same function) and only to hard-coded labels (though <https:\/\/gcc.gnu.org\/onlinedocs\/gcc-4.8.0\/gcc\/Labels-as-Values.html#Labels-as-Values|a common GCC compiler extension> extends this to allow dynamic labels).\nThe closest C gets to unrestricted GOTO is `setjmp`\/`longjmp`; but here the _callee decides_ where you jump to (just like with exceptions) so you can really only jump up on the stack, making them slightly less painful to reason about.\nNeither gets used a lot: I mainly know the `goto sosueme` idiom from a few of the talks of Alexei Alexandrescu in which he uses it in a hot code path because the resulting machine code is better optimized. And `setjmp`\/`longjmp` is used in some places to emulate exceptions or coroutines in plain C, but whenever the OS provides higher-level abstractions to use here they are preferred (just like how OS support for threading is better than rolling your own spin-locks).\n\nEDIT: Also, love your relentless efforts to add the Dijkstra sting every time :joy:. Editing this episode must have taken painfully long :bow:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03a8b27d1b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/03a8b27d1b4c45a494af444dfa332248.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Qqwy",
            "real_name": "Qqwy \/ Marten",
            "display_name": "Qqwy \/ Marten",
            "team": "T5TCAFTA9",
            "name": "w-m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1696557670.440869",
        "reply_users": [
            "UUB7RA7PF",
            "U05T675LXTM",
            "U013ZLJARC7",
            "USH01JEDQ",
            "UBKNXPBAB",
            "U05UN1152MC",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UUB7RA7PF",
                "ts": "1696410865.843279"
            },
            {
                "user": "U05T675LXTM",
                "ts": "1696411402.578489"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1696416692.138509"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1696423634.756839"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1696487211.427249"
            },
            {
                "user": "U05UN1152MC",
                "ts": "1696533995.785469"
            },
            {
                "user": "U05UN1152MC",
                "ts": "1696534167.817249"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1696557670.440869"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IR\/8G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some thoughts re: ‘67 Considered Harmful’:\n"
                            },
                            {
                                "type": "text",
                                "text": "Superparentheses",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\nLove the discussion about this topic "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": ". Haskell has "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which means ‘opening parenthesis that is closed by the end of the line’ which gets a bit close to the idea of a ‘super opening parenthesis’.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "C and GOTO: ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nC came out after this paper, and its "
                            },
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " statement was neutered: It only allows "
                            },
                            {
                                "type": "text",
                                "text": "local",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " jumps (remaining in the same function) and only to hard-coded labels (though "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gcc.gnu.org\/onlinedocs\/gcc-4.8.0\/gcc\/Labels-as-Values.html#Labels-as-Values",
                                "text": "a common GCC compiler extension"
                            },
                            {
                                "type": "text",
                                "text": " extends this to allow dynamic labels).\nThe closest C gets to unrestricted GOTO is "
                            },
                            {
                                "type": "text",
                                "text": "setjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "longjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; but here the "
                            },
                            {
                                "type": "text",
                                "text": "callee decides ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "where you jump to (just like with exceptions) so you can really only jump up on the stack, making them slightly less painful to reason about.\nNeither gets used a lot: I mainly know the "
                            },
                            {
                                "type": "text",
                                "text": "goto sosueme ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "idiom from a few of the talks of Alexei Alexandrescu in which he uses it in a hot code path because the resulting machine code is better optimized. And "
                            },
                            {
                                "type": "text",
                                "text": "setjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "longjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used in some places to emulate exceptions or coroutines in plain C, but whenever the OS provides higher-level abstractions to use here they are preferred (just like how OS support for threading is better than rolling your own spin-locks).\n\nEDIT: Also, love your relentless efforts to add the Dijkstra sting every time "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": ". Editing this episode must have taken painfully long "
                            },
                            {
                                "type": "emoji",
                                "name": "bow",
                                "unicode": "1f647"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05UBCXHWM6",
                    "UK3LH8CF5"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1696410865.843279",
        "client_msg_id": "04993956-8a04-4ffe-bf77-75fa0b639ba3",
        "text": "I love that `$` in haskell, if it was gone I would cry! (And implement my own)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mx\/w1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love that "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in haskell, if it was gone I would cry! (And implement my own)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05T675LXTM",
                    "U03R0B9U1GD",
                    "U05UBCXHWM6"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05T675LXTM",
        "type": "message",
        "ts": "1696411106.324219",
        "edited": {
            "user": "U05T675LXTM",
            "ts": "1696411478.000000"
        },
        "client_msg_id": "8f71edb8-530d-4a34-a89f-f7cc326ba043",
        "text": "And making a separate topic for the second half of the episode about the list of other ‘things considered harmful’ because it is mostly separate from the previous discussion ^_^’:\n• Most of your takes are actually luke-warm, in my opinion. :slightly_smiling_face: \n• Agile (with capital A) considered harmful: 100% agree with your discussion here.\n• Dependency Injection considered harmful: I disagree. You can definitely use it too much and it would be better if people would approach it from the dependency inversion principle side, but it definitely is better than tightly coupling your code on implementation details. And related to that, I’d like to add:\n• Inheritance considered harmful: Why do we still teach new programmers how to do inheritance? Besides ‘prefer composition over inheritance’, have we not learned in the last 20-ish years that doing polymorphism based on interfaces\/traits creates much more maintainable code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03a8b27d1b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/03a8b27d1b4c45a494af444dfa332248.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Qqwy",
            "real_name": "Qqwy \/ Marten",
            "display_name": "Qqwy \/ Marten",
            "team": "T5TCAFTA9",
            "name": "w-m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696411106.324219",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1696829953.278619",
        "reply_users": [
            "U016VUZGUUQ",
            "U05T675LXTM",
            "UK3LH8CF5",
            "UFEQUBNNT"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1696432317.545359"
            },
            {
                "user": "U05T675LXTM",
                "ts": "1696506685.651479"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1696620851.546679"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1696829953.278619"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+LVTJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And making a separate topic for the second half of the episode about the list of other ‘things considered harmful’ because it is mostly separate from the previous discussion ^_^’:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most of your takes are actually luke-warm, in my opinion. "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "slightly_smiling_face",
                                        "unicode": "1f642"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Agile (with capital A) considered harmful: 100% agree with your discussion here."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Dependency Injection considered harmful: I disagree. You can definitely use it too much and it would be better if people would approach it from the dependency inversion principle side, but it definitely is better than tightly coupling your code on implementation details. And related to that, I’d like to add:"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Inheritance considered harmful: Why do we still teach new programmers how to do inheritance? Besides ‘prefer composition over inheritance’, have we not learned in the last 20-ish years that doing polymorphism based on interfaces\/traits creates much more maintainable code?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U05T675LXTM",
        "type": "message",
        "ts": "1696411402.578489",
        "client_msg_id": "bf08a945-19b2-4a26-b9f8-299632eca319",
        "text": "Same here. For people coming from other languages: you might know `|&gt;` and maybe `&lt;|`. (F#, Scala, Elixir, Elm, PureScript, … have them). `$` is `&lt;|` . The Haskell version of `|&gt;` is known as `&amp;`  which is mainly useful if you want to split a long expression over multiple lines (and read it top-to-bottom).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03a8b27d1b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/03a8b27d1b4c45a494af444dfa332248.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "Qqwy",
            "real_name": "Qqwy \/ Marten",
            "display_name": "Qqwy \/ Marten",
            "team": "T5TCAFTA9",
            "name": "w-m",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "guhj4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Same here. For people coming from other languages: you might know "
                            },
                            {
                                "type": "text",
                                "text": "|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and maybe "
                            },
                            {
                                "type": "text",
                                "text": "<|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (F#, Scala, Elixir, Elm, PureScript, … have them). "
                            },
                            {
                                "type": "text",
                                "text": "$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "<|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . The Haskell version of "
                            },
                            {
                                "type": "text",
                                "text": "|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is known as "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  which is mainly useful if you want to split a long expression over multiple lines (and read it top-to-bottom)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U05UBCXHWM6",
                    "U05UN1152MC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1696412964.617229",
        "client_msg_id": "690f90b3-6093-4b5c-9a05-31dd1e06dc24",
        "text": "I've quoted a couple of bits from the introduction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OhMpR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've quoted a couple of bits from the introduction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1696414344.112129",
        "client_msg_id": "04d10456-3466-4ef5-ab0f-dfc5a698e76f",
        "text": "<@U05SU27S1M2> That's interesting, thanks! Some people don't realise that art and science are often more intertwined than they seem. It's not one or the other",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696238261.245689",
        "parent_user_id": "U05SU27S1M2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "srtL8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05SU27S1M2"
                            },
                            {
                                "type": "text",
                                "text": " That's interesting, thanks! Some people don't realise that art and science are often more intertwined than they seem. It's not one or the other"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U05SU27S1M2",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1696416692.138509",
        "client_msg_id": "03dbd3a0-0af3-46b6-806d-09bc9ab6c700",
        "text": "`goto` turns up in many, many places where performance matters. Here are ~5 pages of hits for `goto` in the Linux kernel, for example:\n\n<https:\/\/github.com\/search?q=repo%3Atorvalds%2Flinux+goto&amp;type=code&amp;p=1>\n\nDijkstra could make his argument only because he didn’t do much of this kind of work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z1XzS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " turns up in many, many places where performance matters. Here are ~5 pages of hits for "
                            },
                            {
                                "type": "text",
                                "text": "goto",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the Linux kernel, for example:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/search?q=repo%3Atorvalds%2Flinux+goto&type=code&p=1"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDijkstra could make his argument only because he didn’t do much of this kind of work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1696423634.756839",
        "client_msg_id": "3CBF286C-4C5C-4698-BF37-94268DCE8647",
        "text": "I quit this episode due to the audio hijinks",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lXK0W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I quit this episode due to the audio hijinks"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04717WKH5K",
        "type": "message",
        "ts": "1696425904.760429",
        "client_msg_id": "0b256761-cf67-4c63-b383-8d6b302a1cd3",
        "text": "I'm mostly a lurker here, and find that in many cases my response to posts is limited to \"add this to my `toRead` queue for when I can devote the time it deserves\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g415c1650fb0",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/415c1650fb0f17d5a8b182fa4f4d17d7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "brett",
            "real_name": "brett g porter",
            "display_name": "brett g porter",
            "team": "T5TCAFTA9",
            "name": "brett130",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696372253.199409",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1R3B2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm mostly a lurker here, and find that in many cases my response to posts is limited to \"add this to my "
                            },
                            {
                                "type": "text",
                                "text": "toRead",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " queue for when I can devote the time it deserves\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U03R0B9U1GD",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1696432317.545359",
        "client_msg_id": "c6563a0c-107a-499f-b7d5-ff96e4fff329",
        "text": "People are doing dependency injection without dependency inversion? Why? How?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696411106.324219",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LQVc9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People are doing dependency injection without dependency inversion? Why? How?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1696443574.095669",
        "client_msg_id": "1a28e06e-b11e-43cd-b8ab-998420f3aefc",
        "text": "I haven't seen so much of the general thematic discussion threads recently as I used to remember. However I personally appreciate being about to dip in every so often and still keep up to date.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696372253.199409",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HwNIc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't seen so much of the general thematic discussion threads recently as I used to remember. However I personally appreciate being about to dip in every so often and still keep up to date."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1696487211.427249",
        "client_msg_id": "f3405d0d-bfb2-4185-be8a-27e4871b6f5d",
        "text": "<@USH01JEDQ> Me too!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696410113.191029",
        "parent_user_id": "U05T675LXTM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PUj94",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USH01JEDQ"
                            },
                            {
                                "type": "text",
                                "text": " Me too!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]