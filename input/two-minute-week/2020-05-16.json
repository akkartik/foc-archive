[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1589623524.384700",
        "client_msg_id": "c236c088-fac9-4b91-a420-78bfb2189706",
        "text": "The current system probably is limited in its applications because it doesn't have \"control-inputs\", I think I could implement these by adding observable properties in a task. I am going to that explore that idea further. <@UUQ2EQW21> how is this implemented in your application?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589540394.327600",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4d=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The current system probably is limited in its applications because it doesn't have \"control-inputs\", I think I could implement these by adding observable properties in a task. I am going to that explore that idea further. "
                            },
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " how is this implemented in your application?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "In the meantime I want to share another screenshot to show a bit more of the other applications of the flow-editor : here the flow-editor is used to create a flow which controls a react-native app. When you press save in the editor a json file is stored on the local file system and triggers the rebuild of the reactnative-app. The flow flow contains both the navigational structure and the form definitions as well as the calculations. The flow-editor runs locally here (using node.js).",
        "files": [
            {
                "id": "F013QST0MTP",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U0123H7JRDM",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NUZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the meantime I want to share another screenshot to show a bit more of the other applications of the flow-editor : here the flow-editor is used to create a flow which controls a react-native app. When you press save in the editor a json file is stored on the local file system and triggers the rebuild of the reactnative-app. The flow flow contains both the navigational structure and the form definitions as well as the calculations. The flow-editor runs locally here (using node.js)."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1589627753.385600",
        "client_msg_id": "3787db61-1487-4e6c-9fa4-f3cbabfc917c",
        "thread_ts": "1589540394.327600",
        "parent_user_id": "U0123H7JRDM"
    },
    {
        "text": "Here is my weekly update.   Apart from some work on the internals to better represent time events, I spent some time on writing a little visualiser to help me understand scheduling.  I hope it will also end up being a nice additional tool for the end user to see what's going on too.  I really need some full days to work on some of the more interesting problems, and an hour or so a day (my usual schedule) is not cutting it at the moment :(",
        "files": [
            {
                "id": "F013SGX9UNN",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jw3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is my weekly update.   Apart from some work on the internals to better represent time events, I spent some time on writing a little visualiser to help me understand scheduling.  I hope it will also end up being a nice additional tool for the end user to see what's going on too.  I really need some full days to work on some of the more interesting problems, and an hour or so a day (my usual schedule) is not cutting it at the moment :("
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1589660842.386100",
        "client_msg_id": "45ac959c-69a1-41b2-838f-66f074a57577",
        "thread_ts": "1589660842.386100",
        "reply_count": 11,
        "reply_users_count": 4,
        "latest_reply": "1590083386.409400",
        "reply_users": [
            "U0123H7JRDM",
            "UUQ2EQW21",
            "UNGNT3BKR",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "U0123H7JRDM",
                "ts": "1589698152.388200"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1589718551.393800"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1589721272.397000"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1589732641.398800"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1589732907.399300"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1589732962.399700"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1589733232.399900"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1589782409.403200"
            },
            {
                "user": "UNGNT3BKR",
                "ts": "1589788652.403400"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1589793838.404000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1590083386.409400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U0123H7JRDM"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "USY1SDM8D",
                    "UC2A2ARPT"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1589661771.386400",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1589661781.000000"
        },
        "client_msg_id": "7dc2da12-6f9f-4b1b-b2f6-6fb63fc36d28",
        "text": "Hi <@U0123H7JRDM>, I think my approach is quite different to yours.  Essentially I have a directed graph.  Once per frame, I read the output node(s) and they try to 'compute'.  First they look at their inputs, and if any of them are 'flow data' or 'control data', they are checked to see if they are current.  If not, the graph walks further up and evaluates until the node inputs are 'current'.  Then it can be computed.  So it's very much a 'pull' architecture.\nI have 3 basic types of 'pins' on my nodes.\n• Flow Data.  This is like a big bundle of data arrays.  The node is expected to work on all data streams it receives in each compute step.  For music, these arrays are typically buffers of audio data; often with 1 buffer per note of polyphony.  \n• Control Data. These are also bundles of arrays, but typically contain control information, such as modulation curves.  It is just convenient for me to separate the concept of control from data.\n• Parameters.  These are just data values such as float, int, etc.  They can be connected to other nodes, but they are not 'evaluated' to satisfy graph compute.  They are considered 'always valid', but that doesn't mean that the node won't walk back up the connection chain of the parameter to find the source value.\nIt should be considered prototype\/research code, but you can see the graph Compute function here: <https:\/\/github.com\/cmaughan\/nodegraph\/blob\/master\/src\/model\/graph.cpp>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589540394.327600",
        "parent_user_id": "U0123H7JRDM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+bp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": ", I think my approach is quite different to yours.  Essentially I have a directed graph.  Once per frame, I read the output node(s) and they try to 'compute'.  First they look at their inputs, and if any of them are 'flow data' or 'control data', they are checked to see if they are current.  If not, the graph walks further up and evaluates until the node inputs are 'current'.  Then it can be computed.  So it's very much a 'pull' architecture.\nI have 3 basic types of 'pins' on my nodes.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Flow Data.  This is like a big bundle of data arrays.  The node is expected to work on all data streams it receives in each compute step.  For music, these arrays are typically buffers of audio data; often with 1 buffer per note of polyphony.  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Control Data. These are also bundles of arrays, but typically contain control information, such as modulation curves.  It is just convenient for me to separate the concept of control from data."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Parameters.  These are just data values such as float, int, etc.  They can be connected to other nodes, but they are not 'evaluated' to satisfy graph compute.  They are considered 'always valid', but that doesn't mean that the node won't walk back up the connection chain of the parameter to find the source value."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It should be considered prototype\/research code, but you can see the graph Compute function here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cmaughan\/nodegraph\/blob\/master\/src\/model\/graph.cpp"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1589698152.388200",
        "client_msg_id": "4AAED76D-541F-4C41-ADD6-2E6DBF36130C",
        "text": "What is your end goal? Do you want to be able to develop vst's with your engine which can be used in daw's like ableton or something more standalone? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589660842.386100",
        "parent_user_id": "UUQ2EQW21",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c00",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What is your end goal? Do you want to be able to develop vst's with your engine which can be used in daw's like ableton or something more standalone? "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]