[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1564388777.031900",
        "client_msg_id": "b061a5b8-798e-4ef6-890f-dcf9e1fcc3f7",
        "text": "<http:\/\/www.loper-os.org\/?p=568>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EBkPR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.loper-os.org\/?p=568"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cry",
                "users": [
                    "UJVEPCVT6",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1564389035.032200",
        "client_msg_id": "de6b6191-0f03-4ee3-8de3-d5fb0cd67b15",
        "text": "\"Jobs supposedly claimed that he intended his personal computer to be a “bicycle for the mind.” But what he really sold us was a (fairly comfortable) train for the mind. A train which goes only where rails have been laid down\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wAu2w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Jobs supposedly claimed that he intended his personal computer to be a “bicycle for the mind.” But what he really sold us was a (fairly comfortable) train for the mind. A train which goes only where rails have been laid down\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJG7QQQJW",
                    "UA14TGLTC",
                    "UHWC9PXBL",
                    "UE0ETTCG7",
                    "U8A5MS6R1",
                    "UJCHWTMH6",
                    "UAVCC2X70"
                ],
                "count": 7
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1564389159.032400",
        "client_msg_id": "8750a6e0-2381-45c0-ab54-93587ea8fed1",
        "text": "\"All of the extra features in a more feature-rich system like SuperCard (or even VB) are not harmless. There is a fundamental difference, especially for a child, between a system which you can fully wrap your mind around and one with countless mystery knobs.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MZN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"All of the extra features in a more feature-rich system like SuperCard (or even VB) are not harmless. There is a fundamental difference, especially for a child, between a system which you can fully wrap your mind around and one with countless mystery knobs.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1564404452.033100",
        "client_msg_id": "daf5a9f0-17ff-4ca7-a4c2-7f43e3b6056d",
        "text": "That's so nice! I really appreciate the sentiment and vote of confidence! I feel very lucky to have found everyone in this community. The internet can be a magical place",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564263042.389500",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yvx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's so nice! I really appreciate the sentiment and vote of confidence! I feel very lucky to have found everyone in this community. The internet can be a magical place"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1564405631.033600",
        "client_msg_id": "469cd821-2610-4b7b-ab6a-97ebc41e9de1",
        "text": "That was a fun conversation to read through! Thanks for the thought provoking questions. I do have thoughts here, but am mostly off the grid this week so I will let them percolate a bit more and get back to this convo early next week when I have time to sit down and write them...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564268114.478600",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VUstY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was a fun conversation to read through! Thanks for the thought provoking questions. I do have thoughts here, but am mostly off the grid this week so I will let them percolate a bit more and get back to this convo early next week when I have time to sit down and write them..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJ75RMFT",
        "type": "message",
        "ts": "1564411671.034900",
        "client_msg_id": "3803cba8-a53e-4d07-9e57-a1234dd54daf",
        "text": "For those interested, I wrote about my highlights from Curry On: <http:\/\/jschuster.org\/blog\/2019\/07\/29\/highlights-from-curry-on-2019\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9f40eca738a7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-13\/693369079316_9f40eca738a7ae7412c0_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Schuster",
            "display_name": "Jonathan Schuster",
            "team": "T5TCAFTA9",
            "name": "jonathan.p.schuster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564411671.034900",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1565474060.263600",
        "reply_users": [
            "U8A5MS6R1",
            "UE1JQM9HQ",
            "UDKTZSD6H",
            "UKJ75RMFT"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1564425071.040100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1564432597.041000"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1564714078.155500"
            },
            {
                "user": "UKJ75RMFT",
                "ts": "1565474060.263600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QFUT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For those interested, I wrote about my highlights from Curry On: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jschuster.org\/blog\/2019\/07\/29\/highlights-from-curry-on-2019\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJUQESQ1Z",
                    "U8A5MS6R1",
                    "UJBAJNFLK"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UJUQESQ1Z",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1564417113.035800",
        "client_msg_id": "49989074-66ba-4558-8788-02c29e87d223",
        "text": "<https:\/\/www.forbes.com\/sites\/cognitiveworld\/2019\/07\/29\/the-future-will-be-formulated-using-category-theory>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1564435178.041600",
        "reply_users": [
            "U8A5MS6R1",
            "UGLSY9X3J",
            "UE6EFEPTQ",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1564421645.038300"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1564423342.038500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564423345.038700"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1564423366.039000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1564423373.039200"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1564423382.039500"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1564423395.039700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435178.041600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Forbes",
                "title": "The Future Will Be Formulated Using Category Theory",
                "title_link": "https:\/\/www.forbes.com\/sites\/cognitiveworld\/2019\/07\/29\/the-future-will-be-formulated-using-category-theory",
                "text": "A new approach to defining and designing systems is coming.",
                "fallback": "Forbes: The Future Will Be Formulated Using Category Theory",
                "image_url": "https:\/\/thumbor.forbes.com\/thumbor\/600x315\/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F5d3e1c87090f4300070dd366%2F960x0.jpg",
                "from_url": "https:\/\/www.forbes.com\/sites\/cognitiveworld\/2019\/07\/29\/the-future-will-be-formulated-using-category-theory",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 41972,
                "service_icon": "https:\/\/www.forbes.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.forbes.com\/sites\/cognitiveworld\/2019\/07\/29\/the-future-will-be-formulated-using-category-theory"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xA=F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.forbes.com\/sites\/cognitiveworld\/2019\/07\/29\/the-future-will-be-formulated-using-category-theory"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1564418480.037900",
        "client_msg_id": "5bcde4be-527a-420c-b76d-d4415a8f5218",
        "text": "If you wanted to justify the claim “functional programming and PL theory are useful tools to learn”, how would you do it? What concepts and skills would you point to, and what real-world examples\/applications would you use to demonstrate the usefulness of FP?\n\nFor example, “Can Programming Be Liberated from the von Neumann Style” and “Why Functional Programming Matters” both use higher-order functions\/composition on lists\/trees to prove the point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "reply_count": 14,
        "reply_users_count": 4,
        "latest_reply": "1564569519.112000",
        "reply_users": [
            "UFB8STN7K",
            "UC2A2ARPT",
            "UEQ6M68H0",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UFB8STN7K",
                "ts": "1564418550.038000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435232.041800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435338.042000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435384.042200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435683.042400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435815.042700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564435866.042900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1564436342.043200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564472631.053500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564473195.053800"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1564483972.058900"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1564515330.081200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564544351.098300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1564569519.112000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H=yvr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you wanted to justify the claim “functional programming and PL theory are useful tools to learn”, how would you do it? What concepts and skills would you point to, and what real-world examples\/applications would you use to demonstrate the usefulness of FP?\n\nFor example, “Can Programming Be Liberated from the von Neumann Style” and “Why Functional Programming Matters” both use higher-order functions\/composition on lists\/trees to prove the point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1564418550.038000",
        "client_msg_id": "1dcd8b3e-b86c-4319-a9f1-9db87f85bd13",
        "text": "Distinctly not looking for arguments like “Scala\/Rust\/etc. have a functional flavor, and companies use them, therefore you should learn FP”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mWRX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Distinctly not looking for arguments like “Scala\/Rust\/etc. have a functional flavor, and companies use them, therefore you should learn FP”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1564421645.038300",
        "client_msg_id": "4f5b4f68-766a-4944-a736-7023ca63a75e",
        "text": "&gt; Category theory is both an interesting object of philosophical study, and a potentially powerful formal tool for philosophical investigations of concepts such as space, system, and even truth.\n\nIsn't this really over the top?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PVaHL",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Category theory is both an interesting object of philosophical study, and a potentially powerful formal tool for philosophical investigations of concepts such as space, system, and even truth."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIsn't this really over the top?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1564423342.038500",
        "client_msg_id": "e504937e-534f-4874-940c-7fe66467b961",
        "text": "yeah, well its Forbes …",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BIWi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, well its Forbes …"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1564423345.038700",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1564423440.000000"
        },
        "client_msg_id": "9784464d-6382-4a56-b78f-6902f4346df8",
        "text": "This article and associated video gave me a massive dose of WTF?! Even more than when I normally visit anything on that dreadful site.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n1d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This article and associated video gave me a massive dose of WTF?! Even more than when I normally visit anything on that dreadful site."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1564423366.039000",
        "client_msg_id": "c0aa2ed9-7dc6-45c0-aded-0bc94a430bc4",
        "text": "no offense to them, they’re not really accurate keepers of science &amp; tech generally speaking",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fhq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "no offense to them, they’re not really accurate keepers of science & tech generally speaking"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1564423373.039200",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1564423375.000000"
        },
        "client_msg_id": "e52fabd5-bb6b-485a-a355-810156e3394e",
        "text": "or anything?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pBd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or anything?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1564423382.039500",
        "client_msg_id": "3dae9bda-46db-464e-8aaa-1d7e0e0401df",
        "text": "even Wired and other pop “science” publications routinely overhype things + get details wrong",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GvPqY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "even Wired and other pop “science” publications routinely overhype things + get details wrong"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1564423395.039700",
        "client_msg_id": "dd7cb09b-c5e3-486b-ba80-6e24ad2757a8",
        "text": "Quanta is a bit better <https:\/\/www.quantamagazine.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "Quanta Magazine",
                "title": "Quanta Magazine - Illuminating Science | Quanta Magazine",
                "title_link": "https:\/\/www.quantamagazine.org\/",
                "text": "Illuminating mathematics, physics, biology and computer science research through public service journalism.",
                "fallback": "Quanta Magazine: Quanta Magazine - Illuminating Science | Quanta Magazine",
                "image_url": "https:\/\/d2r55xnwy6nx47.cloudfront.net\/uploads\/2013\/07\/QM-About-1200x630.jpg",
                "from_url": "https:\/\/www.quantamagazine.org\/",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 32324,
                "service_icon": "https:\/\/www.quantamagazine.org\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/www.quantamagazine.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7cvV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quanta is a bit better "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.quantamagazine.org\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UGLSY9X3J",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1564425071.040100",
        "client_msg_id": "5fb0c419-c15d-4364-b159-38e9e4629afe",
        "text": "This is fantastic - thank you!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564411671.034900",
        "parent_user_id": "UKJ75RMFT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kygcL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is fantastic - thank you!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1564432597.041000",
        "client_msg_id": "5bd6caac-6e02-46bc-85d0-a35d6b318368",
        "text": "Thanks for the summary, Jonathan.\n\nI very much like the detailed descriptions, especially the one for the talk of Thomas, which I did not see yet (but definitely will soon).\n\nAlso, I am glad you found the moldable development presentation at least intriguing. And, thanks for the explicit concerns, too! I will address what I understood to be the issues. I’d be very happy to follow up with more details, should you (or anyone else) find it interesting.\n\nI think the crux of the misunderstandings lies in your observation that `Most of his demos seemed to be about visualizing data, but when I'm trying to understand a piece of code, I find that it's usually the algorithm that's hard to understand`. Nothing about software has an intrinsic representation because everything is just data, and data is shapeless. The representation is what we deemed important, and so the limitation is mostly in our imagination.\n\nDuring the demo, I actually showed a few algorithms. Just in the first inspectors, I actually showed the inner workings of two algorithms: One showed how to find the nearest neighborhood position to place a new circle in a layout. The other one was the inner rope data structure of a text editor. Both of these visualizations were shown in an inspector showing some objects. However, let’s take the latter. It is important for performance reasons for the rope tree to be balanced, and when it’s not you want to look at those cases in details. This visualization is useful exactly for that purpose. While the inspector shows the current data structure, having it update (for example, by embedding the inspector in a debugger), helps you spot the places that are worth investigating. We created that visualization exactly because we had a couple of those cases.\n\nBut, later on I showed a couple of more algorithms. One was about computing price discounts. In that case, I showed an inspector visualizing a decorator pattern. Indeed, we visualized objects, but the objects reified the actual algorithm. This is the key. As soon as we want to visualize something, we need to make it first class. This exercises our design in a way that testing does not and, even though we program in a Smalltalk system, we often write declarative or functional code made out of explicit objects.\n\nAnd there was an example showing a kind of a workflow showing actors and messages exchanged. In order to show the arrows of how messages propagate, we reified the messages. The picture we show in the visualization was actually drawn on a whiteboard together with the business people when we brainstormed about the algorithm. Because we wanted to preserve the presentation, we ended up reifying messages as first class concepts, which then led to better debugability, too.\n\nDoes this address some of the concerns? Mind you, these kind of conversations are highly precious for our team. We work like this since years, and it’s sometimes hard to convey what we learnt. So, any challenge is actually a boost :slightly_smiling_face:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564411671.034900",
        "parent_user_id": "UKJ75RMFT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "04BdF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the summary, Jonathan.\n\nI very much like the detailed descriptions, especially the one for the talk of Thomas, which I did not see yet (but definitely will soon).\n\nAlso, I am glad you found the moldable development presentation at least intriguing. And, thanks for the explicit concerns, too! I will address what I understood to be the issues. I’d be very happy to follow up with more details, should you (or anyone else) find it interesting.\n\nI think the crux of the misunderstandings lies in your observation that "
                            },
                            {
                                "type": "text",
                                "text": "Most of his demos seemed to be about visualizing data, but when I'm trying to understand a piece of code, I find that it's usually the algorithm that's hard to understand",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Nothing about software has an intrinsic representation because everything is just data, and data is shapeless. The representation is what we deemed important, and so the limitation is mostly in our imagination.\n\nDuring the demo, I actually showed a few algorithms. Just in the first inspectors, I actually showed the inner workings of two algorithms: One showed how to find the nearest neighborhood position to place a new circle in a layout. The other one was the inner rope data structure of a text editor. Both of these visualizations were shown in an inspector showing some objects. However, let’s take the latter. It is important for performance reasons for the rope tree to be balanced, and when it’s not you want to look at those cases in details. This visualization is useful exactly for that purpose. While the inspector shows the current data structure, having it update (for example, by embedding the inspector in a debugger), helps you spot the places that are worth investigating. We created that visualization exactly because we had a couple of those cases.\n\nBut, later on I showed a couple of more algorithms. One was about computing price discounts. In that case, I showed an inspector visualizing a decorator pattern. Indeed, we visualized objects, but the objects reified the actual algorithm. This is the key. As soon as we want to visualize something, we need to make it first class. This exercises our design in a way that testing does not and, even though we program in a Smalltalk system, we often write declarative or functional code made out of explicit objects.\n\nAnd there was an example showing a kind of a workflow showing actors and messages exchanged. In order to show the arrows of how messages propagate, we reified the messages. The picture we show in the visualization was actually drawn on a whiteboard together with the business people when we brainstormed about the algorithm. Because we wanted to preserve the presentation, we ended up reifying messages as first class concepts, which then led to better debugability, too.\n\nDoes this address some of the concerns? Mind you, these kind of conversations are highly precious for our team. We work like this since years, and it’s sometimes hard to convey what we learnt. So, any challenge is actually a boost "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435178.041600",
        "client_msg_id": "63baa431-d85a-47c0-b4a9-bad8bb710dc3",
        "text": "Quanta has a good podcast. (Used to be a great podcast, but I liked the old host a lot better than the new host.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564417113.035800",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZF5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quanta has a good podcast. (Used to be a great podcast, but I liked the old host a lot better than the new host.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435232.041800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436599.000000"
        },
        "client_msg_id": "eb34205e-9a14-48a9-af19-e4874a2407b7",
        "text": "I'd argue that FP isn't useful (because _that's, like, my opinion, man_) and then look for weaknesses in my argument.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xP9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd argue that FP isn't useful (because "
                            },
                            {
                                "type": "text",
                                "text": "that's, like, my opinion, man",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") and then look for weaknesses in my argument."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435338.042000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436961.000000"
        },
        "client_msg_id": "a861119f-1a48-466b-9d37-ede4dbbb1f1b",
        "text": "The most successful arguments in favor of FP that I've encountered came from Rich Hickey and Joe Armstrong talks, describing how they arrived at the philosophies that support the design of Clojure and Erlang.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zYrv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most successful arguments in favor of FP that I've encountered came from Rich Hickey and Joe Armstrong talks, describing how they arrived at the philosophies that support the design of Clojure and Erlang."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435384.042200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436654.000000"
        },
        "client_msg_id": "481ffc47-986a-48f4-85f9-a6c8def13bb5",
        "text": "Simple Made Easy, for instance, seems to be the gateway drug that gets a lot of people hooked on FP. So an answer to your question might be found in there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tJfRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Simple Made Easy, for instance, seems to be the gateway drug that gets a lot of people hooked on FP. So an answer to your question might be found in there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435683.042400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436677.000000"
        },
        "client_msg_id": "410d6d8f-e096-4353-91f4-e4b38a16e4d3",
        "text": "When it comes to concepts, skills, real world examples.. that's actually the point where I fall off the FP train. I've found it's easier to justify the benefits of writing all your code in C, getting a lot more intimate with registers and memory allocation and nurturing the skill of mechanical sympathy, doing any advanced data manipulation yourself — rather than leaving all that to the compiler and benefitting from a language that lets you explicitly label your algebraic data types (etc).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N5jEv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When it comes to concepts, skills, real world examples.. that's actually the point where I fall off the FP train. I've found it's easier to justify the benefits of writing all your code in C, getting a lot more intimate with registers and memory allocation and nurturing the skill of mechanical sympathy, doing any advanced data manipulation yourself — rather than leaving all that to the compiler and benefitting from a language that lets you explicitly label your algebraic data types (etc)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435815.042700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436768.000000"
        },
        "client_msg_id": "614cad5c-ae71-47f3-9ed6-f8315e7f36d0",
        "text": "Being aware of category theory and abstract algebra... being able to know when you need to use an abelian group (eg: for perf reasons) — that's valuable. But once you have that theoretical knowledge, you can leverage it in whatever language you want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5HO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Being aware of category theory and abstract algebra... being able to know when you need to use an abelian group (eg: for perf reasons) — that's valuable. But once you have that theoretical knowledge, you can leverage it in whatever language you want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564435866.042900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436787.000000"
        },
        "client_msg_id": "7e86d309-a978-4be3-9435-f71810889b4d",
        "text": "People typically seem to learn that theory at the same time they learn Haskell, so I think the benefits of the former are conferred upon the latter (not undeservedly, since Haskell does allow you to be a lot more explicit about your algebra than most languages). But there's nothing stopping you from taking \"FP, The Good Parts\" and doing it in whatever language\/paradigm you want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7iBT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People typically seem to learn that theory at the same time they learn Haskell, so I think the benefits of the former are conferred upon the latter (not undeservedly, since Haskell does allow you to be a lot more explicit about your algebra than most languages). But there's nothing stopping you from taking \"FP, The Good Parts\" and doing it in whatever language\/paradigm you want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564436342.043200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564436883.000000"
        },
        "client_msg_id": "da13983f-758f-4fe6-aac2-8f88e07f5f18",
        "text": "So to answer your question, I'd say the concepts to know are things like.. associativity, commutativity, set theory, a tiny bit of group theory... and things like the joy (and pain) of a pure function, the pain (and joy) of a side effect, etc. The motivating examples are things like.. the difficulty of unit testing stateful code vs pure code, the ease (and joy) of finding analogies between things like sets, and vectors, and maps, and functions (in the math sense), and functions (in the colloquial C\/Java sense) when you know about concepts like fixed points, functors, the hyperoperation sequence, etc.\n\nThere's nothing really in there that is conceptually under the umbrella of FP — it's just math, and FP just makes good use of math — but a good education in FP should probably teach you all of that math stuff.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NfUX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to answer your question, I'd say the concepts to know are things like.. associativity, commutativity, set theory, a tiny bit of group theory... and things like the joy (and pain) of a pure function, the pain (and joy) of a side effect, etc. The motivating examples are things like.. the difficulty of unit testing stateful code vs pure code, the ease (and joy) of finding analogies between things like sets, and vectors, and maps, and functions (in the math sense), and functions (in the colloquial C\/Java sense) when you know about concepts like fixed points, functors, the hyperoperation sequence, etc.\n\nThere's nothing really in there that is conceptually under the umbrella of FP — it's just math, and FP just makes good use of math — but a good education in FP should probably teach you all of that math stuff."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564438776.045200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1564439453.000000"
        },
        "client_msg_id": "48c282d6-ccdb-4d40-bce8-f48604423c9f",
        "text": "<@UCUSW7WVD> This article is wonderful. I've been wrestling with both aesthetics in the design of Hest, since there are several features that need the never-miss-a-frame smoothness of a video game (eg: panning and zooming and playing in the editor), and some that need the don't-do-work for battery efficiency (eg: shut down the never-miss-a-frame run loops if we can tell that they aren't going to produce any changes), and some that need a different kind of don't-do-work for the sake of fast execution (eg: running end user code as fast as possible, but in a way that is still perfectly deterministic and behaves identically to the slow-motion debug execution). It's been really hard to balance these aesthetics, since these various features that need different aesthetics all touch the same data, so the possibility space for how I can represent that data is wildly constrained. Can't use flat lists and iterate over everything every frame (great for frame rate, terrible for full-speed execution), can't store relationships between entities (great for full-speed, terrible for worst-case), can't use partial application, can't use per-entity caching...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564374914.030200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+AZF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " This article is wonderful. I've been wrestling with both aesthetics in the design of Hest, since there are several features that need the never-miss-a-frame smoothness of a video game (eg: panning and zooming and playing in the editor), and some that need the don't-do-work for battery efficiency (eg: shut down the never-miss-a-frame run loops if we can tell that they aren't going to produce any changes), and some that need a different kind of don't-do-work for the sake of fast execution (eg: running end user code as fast as possible, but in a way that is still perfectly deterministic and behaves identically to the slow-motion debug execution). It's been really hard to balance these aesthetics, since these various features that need different aesthetics all touch the same data, so the possibility space for how I can represent that data is wildly constrained. Can't use flat lists and iterate over everything every frame (great for frame rate, terrible for full-speed execution), can't store relationships between entities (great for full-speed, terrible for worst-case), can't use partial application, can't use per-entity caching..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1564439544.045600",
        "client_msg_id": "f4123829-d09a-420f-ab77-48c0416ae356",
        "text": "Also, can't use floats (great for perf, terrible for determinism), can't use computable reals (great for determinism, terrible for worst-case perf) — that's a real kick in the shins.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564374914.030200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GLdo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, can't use floats (great for perf, terrible for determinism), can't use computable reals (great for determinism, terrible for worst-case perf) — that's a real kick in the shins."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564439950.050500",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1564440491.000000"
        },
        "client_msg_id": "C39F8725-8865-440E-A428-0A5158346B15",
        "text": "I'm often wondering about Uncle Bob's Transformation Priority Premise (extract here: <https:\/\/medium.com\/@zolipeto\/extract-of-uncle-bobs-transformation-priority-premise-post-85ab20216fb1> )\n\nNow I am wondering if it is approachable from another angle: using structured programmings 'Sequence, Selection, Iteration' as building blocks (maybe with some extansion eg. State). \n\nWDYT? Is there any research on that? <@UDKTZSD6H>\n\nFor example I'd say these transformations would make sense:\nnil -&gt; Sequence\nSequence -&gt; Selection (+State to branch on &amp; StateSetter before Selection happens) \nSelection -&gt; Iteration\n\nSo I'd be interesred how structured programmings building blocks behave and relate when we use TDD or when we just refactor a piece of code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564439950.050500",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1564521516.083000",
        "reply_users": [
            "UHWC9PXBL",
            "UL3CJ7YKC"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1564503741.077100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564503796.077300"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1564521516.083000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5b7gN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm often wondering about Uncle Bob's Transformation Priority Premise (extract here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/@zolipeto\/extract-of-uncle-bobs-transformation-priority-premise-post-85ab20216fb1"
                            },
                            {
                                "type": "text",
                                "text": " )\n\nNow I am wondering if it is approachable from another angle: using structured programmings 'Sequence, Selection, Iteration' as building blocks (maybe with some extansion eg. State). \n\nWDYT? Is there any research on that? "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFor example I'd say these transformations would make sense:\nnil -> Sequence\nSequence -> Selection (+State to branch on & StateSetter before Selection happens) \nSelection -> Iteration\n\nSo I'd be interesred how structured programmings building blocks behave and relate when we use TDD or when we just refactor a piece of code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564446042.052200",
        "client_msg_id": "9bd6e95a-a5d1-4b04-9865-e5686ce56ad0",
        "text": "Has anyone here (particularly Forth folks like <@UHPAERALD>) heard of sourceless programming? I came across the term in <https:\/\/news.ycombinator.com\/item?id=20550656>, and the best description I can find for it is in some of the slides of <https:\/\/docs.google.com\/presentation\/d\/1wL2eqf7eHGEybsK0C4MUB4ibP1z6voyhgYfUSNhuBQA\/edit>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "reply_count": 25,
        "reply_users_count": 6,
        "latest_reply": "1564811160.195900",
        "reply_users": [
            "UDKTZSD6H",
            "UAVCC2X70",
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UHWC9PXBL",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UDKTZSD6H",
                "ts": "1564449748.052500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564454001.052900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1564498172.073500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1564498228.073900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564504276.077500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1564507053.078600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564521956.083200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1564522217.083600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564542293.097600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564599969.115100"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1564713697.155200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564725863.156500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564728564.157300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564728823.157600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1564730635.160400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564773495.169000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564775373.170800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564775512.172900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564778306.181200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564778563.181500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564787696.189800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564801790.195100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564802851.195400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564810378.195700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564811160.195900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=HF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone here (particularly Forth folks like "
                            },
                            {
                                "type": "user",
                                "user_id": "UHPAERALD"
                            },
                            {
                                "type": "text",
                                "text": ") heard of sourceless programming? I came across the term in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=20550656"
                            },
                            {
                                "type": "text",
                                "text": ", and the best description I can find for it is in some of the slides of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.google.com\/presentation\/d\/1wL2eqf7eHGEybsK0C4MUB4ibP1z6voyhgYfUSNhuBQA\/edit"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "mag",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1564449748.052500",
        "client_msg_id": "05963ffd-e466-4687-a3a8-51ca03950584",
        "text": "This looks very intriguing. About to crash now, but will definitely share here if I unearth something.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UMA+j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks very intriguing. About to crash now, but will definitely share here if I unearth something."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564454001.052900",
        "client_msg_id": "8d3924b5-5390-4822-9801-5ed9b2e80a51",
        "text": "I don't have time to read this yet, but this is what I found: <https:\/\/www.google.com\/amp\/s\/trollheaven.wordpress.com\/2018\/12\/28\/can-do-forth-this-an-introduction-into-sourceless-programming\/amp\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "service_name": "trollheaven",
                "service_url": "http:\/\/trollheaven.wordpress.com",
                "title": "“Can do Forth this?” – an introduction into sourceless programming",
                "title_link": "https:\/\/www.google.com\/amp\/s\/trollheaven.wordpress.com\/2018\/12\/28\/can-do-forth-this-an-introduction-into-sourceless-programming\/amp\/",
                "author_name": "Manuel Rodriguez",
                "author_link": "https:\/\/trollheaven.wordpress.com\/author\/aa5new\/",
                "text": "Beginners in Forth are asking usually what the features of Forth are. They are familiar with mainstream languages like C++ and are interested in doing the same with Forth. A typical question is for example how to manipulate an image or how to get access to a file. The surprising answer to most of these questions is, that Forth can&rsquo;t do it. That means, C++ is better than Forth and Forth lacks on everything.\nIn a normal comparison of computer languages, this is equal to find out which language is better and which not. Beginners in Forth are very fast in declaring Forth as a looser language, because it&rsquo;s doesn&rsquo;t have anything. Forth is some kind of empty space. It doesn&rsquo;t provide libraries, github doesn&rsquo;t hosts Forth project, Forth can&rsquo;t print out a simple number and so on. So what is the deal? Why was a programming language invented which has in contrast to C++ no features?\nLet us go a step back and find out what Forth is. Forth is a certain type of virtual machine. It is a minimalistic one. In contrast to register based virtual machines, Forth doesn&rsquo;t have registers. So the question is not, what has Forth to offer, the question is what is missing in Forth. Very much is missing. Forth is some kind spirit who always denies:\n&ndash; Forth is not a compiled programming language\n&ndash; Forth doesn&rsquo;t provides libraries\n&ndash; Forth has no multitasking option\n&ndash; provides no object-oriented features\n&ndash; has no strings like in C++\n&ndash; Forth CPUs doesn&rsquo;t have floating point operation\n&ndash; no texteditor is available in Forth\n&ndash; has no fast graphic subsystem\n&ndash; has no extended documentation\n&ndash; and many more features, which are not there\nLet us describe a scenario in which a programming language which doesn&rsquo;t provide anything make sense. Suppose the idea is to drop anything and start from scratch. Forth will be your friend in such a situation. Forth forces the programmer to invent everything. That means, if somebody needs object-oriented programming or multitasking, he has to write a Forth library from scratch. He will be the first programmer ever who is trying so. And even a library is available like mini-oof.fs a real Forth developer will ignore it and writes his own library which is simpler.\nThe mainstream programming ecosystem can be described as some kind of building game. The developers have realized large scale operating systems, programming languages, compilers, libraries and manuals. If somebody is starting new with C++ he stands on the shoulder of giants. That means, he is using the existing programs to build on top something useful. Forth is working the other way around. In the past, nearly nothing was created. Forth is equal to a void. That means, everything has to build from scratch. Forth can be called a permanent prototyping project in which everything is under investigation. There is no consensus, which kind of cpu is right, which kind of Forth VM is the right or how to program something in Forth. Even inside the Forth community, nobody trust anybody. 10 Forth programmers in the same room, will use 10 different cpu. Everybody invented from scratch and incompatible to other cpu.\nLet us compare the C++ ecosystem with Forth. In C++ one programmer create a new library, and he is trying to convince the rest of the developers to use this library. An example is the SFML game library which is a quasi standard in C++ game development. On top of SFML many 2d games were created in the past and the idea is to add more features to SFML and improve the existing documentation. In Forth no SFML like library is availab e and it won&rsquo;t be realized in the future. Because it is unclear how to program such a library. That means, Forth developers have no thought about the problem in the past, and if they done so, they haven&rsquo;t found an answer. In general, Forth can be described as a NOT programming language. That means, the answer to each question is that it&rsquo;s not available and it won&rsquo;t work with Forth. In contrast, C++ can be described as YES programming language. That means, if somebody is trying to build a computergame with C++ he will find somebody who can help him, he will find a manual about the subject and existing sourcecode.\nThe advantage of Forth over existing mainstream programming languages is, that Forth has a built-in innovation rule. If Forth itself doesn&rsquo;t provide anything, this is equal to reinvent the wheel. Forth can be classified as a system which has to be built for the future. If the CPU is not invented, if the compiler is not available, if the graphics subsystem is not there, then the developer has the obligation to build all these things. He can do so without respect to the past. He won&rsquo;t destroy something which is already there, because Forth doesn&rsquo;t provide a standard or existing sourcecode which works. All Forth repositories at github are broken or malfunction, that means, the existing Forth VM and the example sokoban games are malfunction software. They are not working and they are working to slow. The same is true for the EP32 softcore Forth chip and the J1 Forth CPU. It is broken-down hardware which has to replaced by something which is working.\nThe idea of permanent innovation is nothing new for the computer industry. From the beginning Silicon Valley was very innovative. And many large companies from the past were going bankrupt because of missing reinventing their own. One example was Borland, which has produced the famous Turbo Pascal compiler. The only company in SIlicon Valley which can&rsquo;t go bankrupt is Forth Inc. A company which is grouped around the stackbased Forth language is according to the definition not focused on a certain kind of technology. Instead a Forth related company has to invent all the products from scratch. Selling Forth is some kind of memorandum of understanding, it is a plan to develop the technology later. Forth is some kind of perhaps language. Perhaps, it is possible to use Forth on the smartphone. Perhaps it is possible to build a database with it. The details are unknown, they are not invented yet.\nIn contrast, the C++ ecosystem works the other way around. C++ is something which can be touched. The C++ sourcecode at github is already there. The C++ manual is already printed, the C++ programmers are already there and the software written in C++ is working great. C++ can be seen as a building, while Forth is some kind of black hole. Forth absorbs energy without giving something back.\nMissing sourcecode\nForth itself may have no shape, but sourcecode written in Forth can get archived. Thanks to the internet, the wayback machine and printed libraries it is possible to get an overview which Forth related software were written in the past. The surprising insight it, that the amount of codelines is small. It is surprising, because in contrast to assembly language Forth is a universal language. The same Forth sourcecode can be executed on any cpu. No matter which operating system or manufacturer was used.\nThat means, it make sense to write Firmwares, operating system and even application software in Forth. On the other hand, only a few developers have done so in the past. Even Firmware are seldom written in Forth. And most microcontrollers get programmed in C but not in Forth.",
                "fallback": "trollheaven Link: “Can do Forth this?” – an introduction into sourceless&nbsp;programming",
                "from_url": "https:\/\/www.google.com\/amp\/s\/trollheaven.wordpress.com\/2018\/12\/28\/can-do-forth-this-an-introduction-into-sourceless-programming\/amp\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/www.google.com\/amp\/s\/trollheaven.wordpress.com\/2018\/12\/28\/can-do-forth-this-an-introduction-into-sourceless-programming\/amp\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=zJh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have time to read this yet, but this is what I found: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.google.com\/amp\/s\/trollheaven.wordpress.com\/2018\/12\/28\/can-do-forth-this-an-introduction-into-sourceless-programming\/amp\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1564455729.053300",
        "client_msg_id": "49fabe49-e890-4ab9-a82b-4b369c542c17",
        "text": "Everyone needs a vacation.  Take your time.  :sunglasses:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564268114.478600",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uV1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Everyone needs a vacation.  Take your time.  "
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses",
                                "unicode": "1f60e"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]