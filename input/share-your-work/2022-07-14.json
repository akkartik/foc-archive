[
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1657858722.149469",
        "client_msg_id": "c9c5575a-7af4-481a-b4a2-667a03f4dfdb",
        "text": "This is really interesting. I could definitely see using something like this as an alternative to Blockly for a visual input interface, if it was open source. My only critique is that it's not obvious when parameters are alternative to one another, or what is making the box for selecting sub-elements disappear. That may be because I'm on a phone atm. Is there a facility for making declarations inside the editor and then using them later, and maintaining the connections between them so if they change the name in the declaration it changes everywhere? Those are some of the challenges I have run into with the tools I'm using.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656686558.134719",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SBgC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is really interesting. I could definitely see using something like this as an alternative to Blockly for a visual input interface, if it was open source. My only critique is that it's not obvious when parameters are alternative to one another, or what is making the box for selecting sub-elements disappear. That may be because I'm on a phone atm. Is there a facility for making declarations inside the editor and then using them later, and maintaining the connections between them so if they change the name in the declaration it changes everywhere? Those are some of the challenges I have run into with the tools I'm using."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1657861178.405909",
        "client_msg_id": "9ad7b747-496b-483e-9c58-c62da9bd9ff9",
        "text": "If you are interested in testing a prototype tutorial for me, for Blawx, check out <http:\/\/dev.blawx.com|dev.blawx.com>. create an account, click new project, wills tutorial, open the project, click code editor, and click Tutorial. My 11-year-old did it in 30 minutes. All feedback appreciated. It is user-friendly legal knowledge representation in goal-directed constraint answer set programming. But that sounds scary, the vibe is more like \"Scratch for Laws.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657861178.405909",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1657897637.652429",
        "reply_users": [
            "U02PDVC9CNT",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U02PDVC9CNT",
                "ts": "1657892177.382509"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1657896005.215559"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1657896087.510729"
            },
            {
                "user": "U02PDVC9CNT",
                "ts": "1657896232.646859"
            },
            {
                "user": "U02PDVC9CNT",
                "ts": "1657896310.622359"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1657897637.652429"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6WZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you are interested in testing a prototype tutorial for me, for Blawx, check out "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/dev.blawx.com",
                                "text": "dev.blawx.com"
                            },
                            {
                                "type": "text",
                                "text": ". create an account, click new project, wills tutorial, open the project, click code editor, and click Tutorial. My 11-year-old did it in 30 minutes. All feedback appreciated. It is user-friendly legal knowledge representation in goal-directed constraint answer set programming. But that sounds scary, the vibe is more like \"Scratch for Laws.\""
                            }
                        ]
                    }
                ]
            }
        ]
    }
]