[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1661329325.896099",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1661329530.000000"
        },
        "client_msg_id": "972b2038-f71f-4e3b-be3e-f375177d4a5c",
        "text": "&gt; I'm totally willing to grant that there are aspects of muscle memory in juggling or bicycling that you can't learn just from reading books. But I wouldn't put programming in the same category.\nI _would_ put it in the same category, very much as <@U03CEGR3HSL> said above, re: training\/teaching rather than explaining. Much of what makes for good programming in the large (architecture, decisions about API shape, knowing what\/how much to build when) is a matter of intuition that can't be reduced to a few rules of thumb I could write down. The best way I've found to transmit that stuff is by sitting together with someone who is doing the work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kVc",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm totally willing to grant that there are aspects of muscle memory in juggling or bicycling that you can't learn just from reading books. But I wouldn't put programming in the same category."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "text",
                                "text": "would",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " put it in the same category, very much as "
                            },
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " said above, re: training\/teaching rather than explaining. Much of what makes for good programming in the large (architecture, decisions about API shape, knowing what\/how much to build when) is a matter of intuition that can't be reduced to a few rules of thumb I could write down. The best way I've found to transmit that stuff is by sitting together with someone who is doing the work."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661344087.570649",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1661345133.000000"
        },
        "client_msg_id": "09ebc69b-f8b4-4349-bd4f-1d46c2488fc3",
        "text": "<@U013ZLJARC7> Would it change anything if I `s\/reading books\/following books with exercises`?\n\nI think much of the possibility of reading materials still lies untapped. They can be conveyor belts for accelerated change (<http:\/\/akkartik.name\/post\/silfen-paths>) I'd claim you in particular could make awesome interactive things for people to load up into Emacs, that reward intense study. But it's a heck of a lot of work and often doesn't seem worthwhile.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pw9j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " Would it change anything if I "
                            },
                            {
                                "type": "text",
                                "text": "s\/reading books\/following books with exercises",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n\nI think much of the possibility of reading materials still lies untapped. They can be conveyor belts for accelerated change ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/silfen-paths"
                            },
                            {
                                "type": "text",
                                "text": ") I'd claim you in particular could make awesome interactive things for people to load up into Emacs, that reward intense study. But it's a heck of a lot of work and often doesn't seem worthwhile."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1661348485.424419",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1661348622.000000"
        },
        "client_msg_id": "043bf742-1bf6-473e-b6ef-41abbb6eb8aa",
        "text": "Your chess example to me actually reinforces the point. How are people gaining a theory of chess? Not by memorizing propositional knowledge, but by performing moves and reflecting. \n\nThe theory in the case of chess playing isn't contained in that book. What is contained is a series of steps, that, coupled with our innate human abilities, can cause someone to gain a theory. That's the point. The theory is the know how. The theory only exists when instantiated by a human.\n\nFollowing books with exercises can help you gain a theory because it builds know-how. Naur's point is that since theory is a know-how, and know-how's rely on our skills and history, you won't have the same theory as the author.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TLkUT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your chess example to me actually reinforces the point. How are people gaining a theory of chess? Not by memorizing propositional knowledge, but by performing moves and reflecting. \n\nThe theory in the case of chess playing isn't contained in that book. What is contained is a series of steps, that, coupled with our innate human abilities, can cause someone to gain a theory. That's the point. The theory is the know how. The theory only exists when instantiated by a human.\n\nFollowing books with exercises can help you gain a theory because it builds know-how. Naur's point is that since theory is a know-how, and know-how's rely on our skills and history, you won't have the same theory as the author."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661350562.761579",
        "client_msg_id": "cbe7ad88-7a9f-4cd6-aa66-4edb533d611b",
        "text": "&gt; The theory in the case of chess playing isn't contained in that book. What is contained is a series of steps, that, coupled with our innate human abilities, can cause someone to gain a theory.\nI don't disagree there. Perhaps we're saying the same thing. My claim is that it is possible for the original authors to make it possible for future readers to build up a theory of a codebase in their heads.\n\n&gt; Naur's point is that since theory is a know-how, and know-how's rely on our skills and history, you won't have the same theory as the author.\nI don't particularly care that it's exactly the same. Is it close enough to make the same choices as the original authors? Codebases _are_ tolerant of some amount of error. (<http:\/\/akkartik.name\/post\/modularity>)\n\nThere's a spectrum here. Simple changes I make to my codebase will happen the same way whether I do them today or tomorrow. There's \"one right way\" to go with the grain of what's been built so far. More complex changes are more fragile, and I might do things one way today and another way if I'd attempted them yesterday. We all change, and the codebase isn't always right.\n\nPutting all these nuances together, my claim is: it is possible for a codebase to convey knowledge about itself to the extent that a diligent follower makes the same modifications as the original author in situations where the original author's actions would be relatively stable over a period of time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rCj4v",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The theory in the case of chess playing isn't contained in that book. What is contained is a series of steps, that, coupled with our innate human abilities, can cause someone to gain a theory."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't disagree there. Perhaps we're saying the same thing. My claim is that it is possible for the original authors to make it possible for future readers to build up a theory of a codebase in their heads.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Naur's point is that since theory is a know-how, and know-how's rely on our skills and history, you won't have the same theory as the author."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't particularly care that it's exactly the same. Is it close enough to make the same choices as the original authors? Codebases "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tolerant of some amount of error. ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/modularity"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nThere's a spectrum here. Simple changes I make to my codebase will happen the same way whether I do them today or tomorrow. There's \"one right way\" to go with the grain of what's been built so far. More complex changes are more fragile, and I might do things one way today and another way if I'd attempted them yesterday. We all change, and the codebase isn't always right.\n\nPutting all these nuances together, my claim is: it is possible for a codebase to convey knowledge about itself to the extent that a diligent follower makes the same modifications as the original author in situations where the original author's actions would be relatively stable over a period of time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1661352454.348989",
        "client_msg_id": "83354d81-3866-4e11-b6cb-72bccf5ac926",
        "text": "<@UCUSW7WVD> The best way for someone to learn a \"know how\" is to have a practical problem in the context of a project they care about, live with the pain of the problem for a bit, then find a solution. It's very hard for a book to provide the right prompts at the right times to induce someone to have this experience in their work life. An artificial set of problems in a book can be a version of this, but I would argue that it's strictly weaker because the book cannot tailor the prompts to what the student already knows. More generally, I would say that programming is largely a craft activity that has much more in common with carpentry than the culture around programming admits, and that we should encourage apprenticeship more than we do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uXfh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The best way for someone to learn a \"know how\" is to have a practical problem in the context of a project they care about, live with the pain of the problem for a bit, then find a solution. It's very hard for a book to provide the right prompts at the right times to induce someone to have this experience in their work life. An artificial set of problems in a book can be a version of this, but I would argue that it's strictly weaker because the book cannot tailor the prompts to what the student already knows. More generally, I would say that programming is largely a craft activity that has much more in common with carpentry than the culture around programming admits, and that we should encourage apprenticeship more than we do."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "USJ9LD0E4"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661354213.538869",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1661354547.000000"
        },
        "client_msg_id": "a073d929-4b1c-4154-ad5c-b58dfee0a54c",
        "text": "I can get behind that. To try to restate your point, it's _possible_, in principle, maybe, if we work really hard, that we can create nonlinear, choose your own adventure experiences that convey a lot of the theory of a codebase in the narrow way I characterized above. But they can't compete with the rich experience _outside_ the single narrow codebase that you would get when interacting with the right human to make changes to it. :100: Please tell me if I'm still blind to something you said.\n\nRecorded artifacts are strictly inferior to the right human. Right now a tiny fraction of people find the right mentor, while the vast mass of humanity does without. Scaling up mentorship is more important a problem to solve than helping people in the absence of a mentor. However, both problems are important. I'd prefer not to choose between them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AlT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can get behind that. To try to restate your point, it's "
                            },
                            {
                                "type": "text",
                                "text": "possible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", in principle, maybe, if we work really hard, that"
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "we can create nonlinear, choose your own adventure experiences that convey a lot of the theory of a codebase in the narrow way I characterized above. But they can't compete with the rich experience "
                            },
                            {
                                "type": "text",
                                "text": "outside",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the single narrow codebase that you would get when interacting with the right human to make changes to it. "
                            },
                            {
                                "type": "emoji",
                                "name": "100",
                                "unicode": "1f4af"
                            },
                            {
                                "type": "text",
                                "text": " Please tell me if I'm still blind to something you said.\n\nRecorded artifacts are strictly inferior to the right human. Right now a tiny fraction of people find the right mentor, while the vast mass of humanity does without. Scaling up mentorship is more important a problem to solve than helping people in the absence of a mentor. However, both problems are important. I'd prefer not to choose between them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1661355742.019529",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1661355777.000000"
        },
        "client_msg_id": "d081f450-8fbf-460c-97d3-58bf6f621986",
        "text": "&gt; I don’t particularly care that it’s exactly the same. Is it close enough to make the same choices as the original authors?\nIn many cases, yes. It is good enough. But being off by just a bit adds up over time. This is what Naur claims is the basis of decay in software. We also, have to realize the lossyness of passing on this information down the generations. The first person may get it approximately right enough, the next less so and less so all the way. That’s how we end up with massive legacy codebases for which no one has a theory.\n\n&gt; More complex changes are more fragile, and I might do things one way today and another way if I’d attempted them yesterday. We all change, and the codebase isn’t always right.\nYeah exactly. The codebase doesn’t contain the theory. We do. And we build and grow that theory over time. What is and isn’t a small change is relative to the theory we have. What is and isn’t a good change is relative to the theory we have, the purpose of this code, how it relates to the world around us. We are building that theory by programming.\n\n&gt; Putting all these nuances together, my claim is: it is possible for a codebase to convey knowledge about itself to the extent that a diligent follower makes the same modifications as the original author in situations where the original author’s actions would be relatively stable over a period of time.\nYeah. I think Naur would agree. The point is that the theory isn’t what is in the codebase. It is what is in the people. We can teach people, even via written documentation and they can form a theory that is good enough for many purposes. But the theory is in them, not on the paper.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eW2m",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t particularly care that it’s exactly the same. Is it close enough to make the same choices as the original authors?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn many cases, yes. It is good enough. But being off by just a bit adds up over time. This is what Naur claims is the basis of decay in software. We also, have to realize the lossyness of passing on this information down the generations. The first person may get it approximately right enough, the next less so and less so all the way. That’s how we end up with massive legacy codebases for which no one has a theory.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More complex changes are more fragile, and I might do things one way today and another way if I’d attempted them yesterday. We all change, and the codebase isn’t always right."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah exactly. The codebase doesn’t contain the theory. We do. And we build and grow that theory over time. What is and isn’t a small change is relative to the theory we have. What is and isn’t a good change is relative to the theory we have, the purpose of this code, how it relates to the world around us. We are building that theory by programming.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Putting all these nuances together, my claim is: it is possible for a codebase to convey knowledge about itself to the extent that a diligent follower makes the same modifications as the original author in situations where the original author’s actions would be relatively stable over a period of time."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah. I think Naur would agree. The point is that the theory isn’t what is in the codebase. It is what is in the people. We can teach people, even via written documentation and they can form a theory that is good enough for many purposes. But the theory is in them, not on the paper."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1661357167.014179",
        "client_msg_id": "3b1bb5e7-982d-4d8a-9fe3-459803b6fed7",
        "text": "Does this suggest that projects should be accompanied by programming exercises?\n\n\"Try changing sqlites interpreter to a classic relational algebra tree-walker instead. What was lost in the change?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iUvq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does this suggest that projects should be accompanied by programming exercises?\n\n\"Try changing sqlites interpreter to a classic relational algebra tree-walker instead. What was lost in the change?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661357300.759659",
        "client_msg_id": "d2bd91f1-17eb-4c3d-9674-928e173ea092",
        "text": "I think so, yes: <https:\/\/github.com\/akkartik\/mu\/pulls?q=is%3Apr+label%3A%22hello+%E2%98%BA%22+|https:\/\/github.com\/akkartik\/mu\/pulls?q=is%3Apr+label%3A%22hello+%E2%98%BA%22+>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hpqF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think so, yes: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/pulls?q=is%3Apr+label%3A%22hello+%E2%98%BA%22+",
                                "text": "https:\/\/github.com\/akkartik\/mu\/pulls?q=is%3Apr+label%3A%22hello+%E2%98%BA%22+"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1661399628.505289",
        "client_msg_id": "13fb5518-a47f-48b6-83c5-8c32f47ef3ae",
        "text": "This has a lot of parallels to this idea in legal knowledge representation that what you are encoding is not the law, but one or more persons' interpretation of it. Ensuring that people share the interpretation is the whole point of the tools I'm working on. But I have always had difficulty with the idea that there is know-how that cannot be communicated. The other version is implicit knowledge that cannot be made explicit. That it is communicated more efficiently in a non-declarative way seems not the same thing as uncommunicatable. You could still declaratively state all the principles and how they interact with one another. It's just horrifically difficult to do, and inefficient as a means of sharing the knowledge. Which is a good reason not to bother trying, so I agree with the prescription. I just don't think the disease is impossibility. Just deep inefficiency.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gBP1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This has a lot of parallels to this idea in legal knowledge representation that what you are encoding is not the law, but one or more persons' interpretation of it. Ensuring that people share the interpretation is the whole point of the tools I'm working on. But I have always had difficulty with the idea that there is know-how that cannot be communicated. The other version is implicit knowledge that cannot be made explicit. That it is communicated more efficiently in a non-declarative way seems not the same thing as uncommunicatable. You could still declaratively state all the principles and how they interact with one another. It's just horrifically difficult to do, and inefficient as a means of sharing the knowledge. Which is a good reason not to bother trying, so I agree with the prescription. I just don't think the disease is impossibility. Just deep inefficiency."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1661410771.606489",
        "client_msg_id": "b735071c-588a-4f77-a59c-1e56c926555f",
        "text": "I have heard stories of teams in various contexts (business, public policy, ...) use computer modelling as a means to reach precise agreement on their interpretation of some model. I'd love to see a first-hand experience report on this, all I have seen is vague references. I don't see it happening in science, in spite of a long history of computer modelling. Discussion in science happens around narratives about models (with mathematical equations if appropriate), but not about precise formal implementations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C6m+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have heard stories of teams in various contexts (business, public policy, ...) use computer modelling as a means to reach precise agreement on their interpretation of some model. I'd love to see a first-hand experience report on this, all I have seen is vague references. I don't see it happening in science, in spite of a long history of computer modelling. Discussion in science happens around narratives about models (with mathematical equations if appropriate), but not about precise formal implementations."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]