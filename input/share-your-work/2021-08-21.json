[
    {
        "user": "U01QUBNJSEQ",
        "type": "message",
        "ts": "1629565204.059600",
        "edited": {
            "user": "U01QUBNJSEQ",
            "ts": "1629572148.000000"
        },
        "client_msg_id": "23531133-8ef8-48d4-a374-de76ef4ef9b1",
        "text": "Thank you for sharing! I really love the idea of interactive formal theory as a strict generalization of traditional formal theory, with its own metatheory built on fundamental interface primitives. Hereafter are some thoughts on the primitives you proposed (and other things).\n\nYou said *transclusion* maps to the concept of variable in logic, but stripped of its naming mechanism. I wonder how you compensate for this loss? I believe having the ability to observe live updates through direct manipulation is not enough to capture the functionality of naming. Indeed there will often be an infinite domain of updates, and thus when you discover the system you cannot be sure that there isn't some particular update that results in different contents for the two regions. One solution would be to have clear visual indicators that distinguish transclusion from evaluation relations between regions, which might just be a manifestation of the special status of identity morphisms in category theory (which in turn correspond to the variables of type theory).\n\n*Evaluation* looks like reactive evaluation of (pure) functions. How do you represent the function itself though in this paradigm? Do you have some kind of intensional description, or is it purely extensional as in Conal Elliott's <https:\/\/www.youtube.com\/watch?v=faJ8N0giqzw|Tangible Functional Programming>, where you can only compose from a base of primitive combinators? Is it related to the problem you raise of devising a visualization for concrete static terms built with functions? This is something I've thought about as the \"generic notation problem\", and as you say I firmly believe there is no ideal solution. I would even argue that a large part of mathematical creativity boils down to finding optimal representations, in the sense that our brains can manipulate without too much pain adequately general classes of objects, given adequately general purposes.\n\nTo follow on your linear algebra examples, <https:\/\/www.youtube.com\/watch?v=kYB8IZa5AuE&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;index=3|3blue1brown explains> how matrices are a nice syntax for linear maps, given you're interested in performing calculations on them; but his dynamic animations of the plane as an infinite 2D grid are way better at giving you an intuition of the nature and regularities that characterize linear maps in the first place. And examples abound in the history of mathematics where the invention of a clever notation opened up a whole new area of inquiry (think of the birth of algebraic geometry with <https:\/\/en.wikipedia.org\/wiki\/Algebraic_geometry#Before_the_16th_century|cartesian coordinates>, or modern calculus with <https:\/\/en.wikipedia.org\/wiki\/Calculus#Modern|Leibniz's infinitesimals>).\n\nSo it even seems _counterproductive_ to me to look for a generic notation, since the more general the class of object it captures, the less efficient it will be for our brain to process. What we can do however, and this is somewhat of a trend here on FoC, is design a _system for building notations_. It could be some kind of API mediating between high-level graphical representations and their low-level logical encoding, a sort of \"Notation Server Protocol\". The only example I can think of that comes close to this is the <https:\/\/hal.inria.fr\/hal-01261698\/document|FIGUE engine> developed at INRIA for the (now abandoned) <https:\/\/www-sop.inria.fr\/croap\/ctcoq\/ctcoq-eng.html|CtCoq project>, which was quite visionary since it is now _25 years old_.\n\n*Varriers* remind me of the <https:\/\/web.eecs.umich.edu\/~comar\/livelits-tyde.pdf|livelits> of Hazel, although pushing the analogy would mean that they can themselves incorporate transclusions and evaluations, which might be too powerful for what you have in mind.\n\nTo conclude these lengthy reflections, a little bit of self-promotion: I am currently designing a visual language for building proofs in propositional logic, based on a biochemical metaphor of charged ions and cell membranes. For the moment I am more focused on its proof-theoretical properties, but it might prove to be quite intuitive if implemented right, and would make your language completely visual :slightly_smiling_face:. Interestingly its extension to predicate logic could also make use of the concept of transclusion...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc2773fc791e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-07\/7839204665394_bc2773fc791e2b5def2b_72.png",
            "first_name": "Pablo",
            "real_name": "Pablo Donato",
            "display_name": "Pablo Donato",
            "team": "T5TCAFTA9",
            "name": "pablo.donato",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1628924185.049200",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8\/p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for sharing! I really love the idea of interactive formal theory as a strict generalization of traditional formal theory, with its own metatheory built on fundamental interface primitives. Hereafter are some thoughts on the primitives you proposed (and other things).\n\nYou said "
                            },
                            {
                                "type": "text",
                                "text": "transclusion ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "maps to the concept of variable in logic, but stripped of its naming mechanism. I wonder how you compensate for this loss? I believe having the ability to observe live updates through direct manipulation is not enough to capture the functionality of naming. Indeed there will often be an infinite domain of updates, and thus when you discover the system you cannot be sure that there isn't some particular update that results in different contents for the two regions. One solution would be to have clear visual indicators that distinguish transclusion from evaluation relations between regions, which might just be a manifestation of the special status of identity morphisms in category theory (which in turn correspond to the variables of type theory).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Evaluation ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "looks like reactive evaluation of (pure) functions. How do you represent the function itself though in this paradigm? Do you have some kind of intensional description, or is it purely extensional as in Conal Elliott's "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=faJ8N0giqzw",
                                "text": "Tangible Functional Programming"
                            },
                            {
                                "type": "text",
                                "text": ", where you can only compose from a base of primitive combinators? Is it related to the problem you raise of devising a visualization for concrete static terms built with functions? This is something I've thought about as the \"generic notation problem\", and as you say I firmly believe there is no ideal solution. I would even argue that a large part of mathematical creativity boils down to finding optimal representations, in the sense that our brains can manipulate without too much pain adequately general classes of objects, given adequately general purposes.\n\nTo follow on your linear algebra examples, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=kYB8IZa5AuE&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&index=3",
                                "text": "3blue1brown explains"
                            },
                            {
                                "type": "text",
                                "text": " how matrices are a nice syntax for linear maps, given you're interested in performing calculations on them; but his dynamic animations of the plane as an infinite 2D grid are way better at giving you an intuition of the nature and regularities that characterize linear maps in the first place. And examples abound in the history of mathematics where the invention of a clever notation opened up a whole new area of inquiry (think of the birth of algebraic geometry with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Algebraic_geometry#Before_the_16th_century",
                                "text": "cartesian coordinates"
                            },
                            {
                                "type": "text",
                                "text": ", or modern calculus with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Calculus#Modern",
                                "text": "Leibniz's infinitesimals"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nSo it even seems "
                            },
                            {
                                "type": "text",
                                "text": "counterproductive",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to me to look for a generic notation, since the more general the class of object it captures, the less efficient it will be for our brain to process. What we can do however, and this is somewhat of a trend here on FoC, is design a "
                            },
                            {
                                "type": "text",
                                "text": "system for building notations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It could be some kind of API mediating between high-level graphical representations and their low-level logical encoding, a sort of \"Notation Server Protocol\". The only example I can think of that comes close to this is the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.inria.fr\/hal-01261698\/document",
                                "text": "FIGUE engine"
                            },
                            {
                                "type": "text",
                                "text": " developed at INRIA for the (now abandoned) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www-sop.inria.fr\/croap\/ctcoq\/ctcoq-eng.html",
                                "text": "CtCoq project"
                            },
                            {
                                "type": "text",
                                "text": ", which was quite visionary since it is now"
                            },
                            {
                                "type": "text",
                                "text": " 25 years old",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Varriers",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " remind me of the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/web.eecs.umich.edu\/~comar\/livelits-tyde.pdf",
                                "text": "livelits"
                            },
                            {
                                "type": "text",
                                "text": " of Hazel, although pushing the analogy would mean that they can themselves incorporate transclusions and evaluations, which might be too powerful for what you have in mind.\n\nTo conclude these lengthy reflections, a little bit of self-promotion: I am currently designing a visual language for building proofs in propositional logic, based on a biochemical metaphor of charged ions and cell membranes. For the moment I am more focused on its proof-theoretical properties, but it might prove to be quite intuitive if implemented right, and would make your language completely visual "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". Interestingly its extension to predicate logic could also make use of the concept of transclusion..."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]