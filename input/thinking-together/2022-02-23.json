[
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1645630152.475949",
        "client_msg_id": "5C75B1A7-EF79-4B3E-875B-96D57E2325B7",
        "text": "This seems relevant: <https:\/\/hackage.haskell.org\/package\/smallcheck|https:\/\/hackage.haskell.org\/package\/smallcheck>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "from_url": "https:\/\/hackage.haskell.org\/package\/smallcheck",
                "service_icon": "https:\/\/hackage.haskell.org\/static\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/hackage.haskell.org\/package\/smallcheck",
                "fallback": "Hackage: smallcheck",
                "text": "A property-based testing library",
                "title": "smallcheck",
                "title_link": "https:\/\/hackage.haskell.org\/package\/smallcheck",
                "service_name": "Hackage"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uXU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This seems relevant: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hackage.haskell.org\/package\/smallcheck",
                                "text": "https:\/\/hackage.haskell.org\/package\/smallcheck"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1645634062.257289",
        "client_msg_id": "ac5c97a1-c9e0-4763-b7bf-c17fc7097c03",
        "text": "<@U014WA16VNJ>\n&gt; provenance can largely ignore any context that isn’t deemed important for provenance\nIf you want complete provenance tracking, you can only throw away what you can prove to be unimportant. Which in today's common software environments isn't very much.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645278659.673989",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gQ0S1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U014WA16VNJ"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "provenance can largely ignore any context that isn’t deemed important for provenance"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want complete provenance tracking, you can only throw away what you can prove to be unimportant. Which in today's common software environments isn't very much."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U014WA16VNJ",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1645634234.034139",
        "client_msg_id": "022f7ded-221c-4208-8a0a-fb111946ca49",
        "text": "\"Property-based testing\" is the more general keyword to search for. QuickCheck is its best-known implementation, but theoretical work doesn't necessarily refer to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dRP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Property-based testing\" is the more general keyword to search for. QuickCheck is its best-known implementation, but theoretical work doesn't necessarily refer to it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1645635870.066779",
        "client_msg_id": "2711b938-3b63-42b8-b36a-fbca267dd011",
        "text": "Hopefully ‘property-based testing’ can help me find relevant research. It still seems slightly off what I’m looking for, but it’s closer. I’m less interested in programming languages here, and hoping there’s some more general mathematical work along these lines. I’d love to have a framework to talk about things like “a tree with a branching factor of 5”, “a partially ordered set”, “a directed graph containing a subgraph that is equivalent to a binary tree” and to talk about these general kinds of structures and properties with some formal notion(s) of “examples”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RK2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hopefully ‘property-based testing’ can help me find relevant research. It still seems slightly off what I’m looking for, but it’s closer. I’m less interested in programming languages here, and hoping there’s some more general mathematical work along these lines. I’d love to have a framework to talk about things like “a tree with a branching factor of 5”, “a partially ordered set”, “a directed graph containing a subgraph that is equivalent to a binary tree” and to talk about these general kinds of structures and properties with some formal notion(s) of “examples”."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1645670832.387419",
        "client_msg_id": "23ccf5d5-2525-426e-996a-7002d413af85",
        "text": "Nice! thanks for the screenshots!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643604696.171209",
        "parent_user_id": "U01HKV85Y1J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iWemf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice! thanks for the screenshots!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1645687334.914769",
        "client_msg_id": "59ab9953-084b-4b5c-ba7c-f9a93f39f885",
        "text": "It sounds to me like you want to use a model-checker too. If you give one a program and a condition, they're designed to give you example states the program can get into that satisfy the condition, but they're more general than that. If you input a model that describes graphs generally, and encode a condition that corresponds to \"branching factor of 5\" then a model-checker will give you an example of such a graph. Many examples, if you ask for them!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1645553705.079219",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hX3\/L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds to me like you want to use a model-checker too. If you give one a program and a condition, they're designed to give you example states the program can get into that satisfy the condition, but they're more general than that. If you input a model that describes graphs generally, and encode a condition that corresponds to \"branching factor of 5\" then a model-checker will give you an example of such a graph. Many examples, if you ask for them!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    }
]