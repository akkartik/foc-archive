[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1665905777.436949",
        "client_msg_id": "b7e698eb-37a2-442a-a8e0-b3d9e54b48ae",
        "text": "<@UKJGU23KP> Yes, exactly. But technology follows incentives. If someone (person or institution) profits (making money, not being sued) from a software assembly working fine for end users, then that someone will create the tools to deal with potential runtime warnings at build time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0h5b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " Yes, exactly. But technology follows incentives. If someone (person or institution) profits (making money, not being sued) from a software assembly working fine for end users, then that someone will create the tools to deal with potential runtime warnings at build time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1665905946.390279",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1665905970.000000"
        },
        "client_msg_id": "f46d7d2d-e655-4a14-9367-1f7f0bada283",
        "text": "<@UCUSW7WVD> The live programming environments from the 1970s and 1980s were indeed designed in a context where the person using the system was both the end user and a competent developer. So it's the user who is the manager of the top-level software assembly. BTW, the idea of free software (Stallman's famount printer driver story) goes back to the same context. Neither free software nor live environments have been adapted to today's context of software as an industrial product for non-expert users.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2JL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The live programming environments from the 1970s and 1980s were indeed designed in a context where the person using the system was both the end user and a competent developer. So it's the user who is the manager of the top-level software assembly. BTW, the idea of free software (Stallman's famount printer driver story) goes back to the same context. Neither free software nor live environments have been adapted to today's context of software as an industrial product for non-expert users."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1665917280.259979",
        "client_msg_id": "7ffb3950-cfc4-45d9-81c1-61676da1985a",
        "text": "<@UJBAJNFLK> I don’t agree that OSS developers aren’t responsible for their programs’ dependencies. They may not care about such responsibility, but then they’re irresponsible (and are making low-quality software). What is a true end-user’s problem is assembling *independent* programs into one they need, and that’s where the real hard-to-resolve impedances kick in (the OSS developers don’t have much incentive to cooperate, unless their userbases overlap totally; end-users usually don’t have the specialty to harmonize the programs). Note that these aren’t problems with dependencies, as the constituent programs can (and are meant to) function independently.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vXB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I don’t agree that OSS developers aren’t responsible for their programs’ dependencies. They may not care about such responsibility, but then they’re irresponsible (and are making low-quality software). What is a true end-user’s problem is assembling "
                            },
                            {
                                "type": "text",
                                "text": "independent",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programs into one they need, and that’s where the real hard-to-resolve impedances kick in (the OSS developers don’t have much incentive to cooperate, unless their userbases overlap totally; end-users usually don’t have the specialty to harmonize the programs). Note that these aren’t problems with dependencies, as the constituent programs can (and are meant to) function independently."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1665920379.333909",
        "client_msg_id": "30f58625-7928-4f21-a6bd-35de77fc6c40",
        "text": "Coding tools treat code as static structured text.\n\nUX design tools treat design as static vector-graphics with \"noodles for swapping a 1000 static states\" on top.\n\nCode is data that needs direct manipulation with instant feedback. That's what creative tools need to achieve.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665920379.333909",
        "reply_count": 15,
        "reply_users_count": 3,
        "latest_reply": "1666952533.474649",
        "reply_users": [
            "U03GBV8B58V",
            "U03LT7540HZ",
            "UM7034QUQ"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1665921091.079309"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1666118097.073859"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666118791.372879"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1666209854.105209"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666243399.104609"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1666286726.065539"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1666286765.961199"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666287385.379829"
            },
            {
                "user": "UM7034QUQ",
                "ts": "1666939907.148509"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666940507.066459"
            },
            {
                "user": "UM7034QUQ",
                "ts": "1666941744.212959"
            },
            {
                "user": "UM7034QUQ",
                "ts": "1666942247.144729"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666942987.284869"
            },
            {
                "user": "UM7034QUQ",
                "ts": "1666945443.158469"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1666952533.474649"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IJWIA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Coding tools treat code as static structured text.\n\nUX design tools treat design as static vector-graphics with \"noodles for swapping a 1000 static states\" on top.\n\nCode is data that needs direct manipulation with instant feedback. That's what creative tools need to achieve."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1665921091.079309",
        "client_msg_id": "9589ebaa-5f7b-4c19-8dd2-62a65d51ef14",
        "text": "To clarify, the \"direct manipulation of code\" needs to be supported as a visual canvas that shows the running product you're working on. The design tool needs to work back from there to materialize any direct manipulations you've made as corresponding code changes in real time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665920379.333909",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7x8V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To clarify, the \"direct manipulation of code\" needs to be supported as a visual canvas that shows the running product you're working on. The design tool needs to work back from there to materialize any direct manipulations you've made as corresponding code changes in real time."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1665926984.928439",
        "client_msg_id": "9e35b127-cdb3-430b-b21d-09a3154e7c42",
        "text": "<@U02028JHX37> Assembling software is an issue both for library dependencies and for \"independent program\" dependencies. In fact, there is little difference between the two other than the interface technology (linking vs. process calls). In both cases, the issue is not bad will nor incompetence, but insufficiencies in both the social structures and the technical infrastructure for software development. The only way an OSS developer can take full responsibility for dependencies is by maintaining forks of everything, and that's beyond most developers' means (but I suspect that this is what Microsoft etc. do).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ttw7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " Assembling software is an issue both for library dependencies and for \"independent program\" dependencies. In fact, there is little difference between the two other than the interface technology (linking vs. process calls). In both cases, the issue is not bad will nor incompetence, but insufficiencies in both the social structures and the technical infrastructure for software development. The only way an OSS developer can take full responsibility for dependencies is by maintaining forks of everything, and that's beyond most developers' means (but I suspect that this is what Microsoft etc. do)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1665927131.059919",
        "client_msg_id": "25f76a84-0b4b-4f4f-a274-b9d89ee5a1ee",
        "text": "What you can do depends on if the range is known, and what precision you want:\n• Less\/More: for steppers with &lt; ~15ish value\n• Min\/max: for defined ranges where the user wants short bursts\n• Accelerating hold: when the user wants precision in the beginning but the range is wide so holding is a good indicator they wanna go farther raster.\n• Copy from or value suggestion: when the user wants this value to match another (maybe something recent)\n• Speedometer\/pie: when the range is well known and there's some tradeoff to another value (ex: two values are constrained to equal 1). Often mixed with locking if &gt; 2 values are part of the constraint.\nSo lots of ways, have fun!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665483717.350009",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NmX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What you can do depends on if the range is known, and what precision you want:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Less\/More: for steppers with < ~15ish value"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Min\/max: for defined ranges where the user wants short bursts"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Accelerating hold: when the user wants precision in the beginning but the range is wide so holding is a good indicator they wanna go farther raster."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Copy from or value suggestion: when the user wants this value to match another (maybe something recent)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Speedometer\/pie: when the range is well known and there's some tradeoff to another value (ex: two values are constrained to equal 1). Often mixed with locking if > 2 values are part of the constraint."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo lots of ways, have fun!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1665928637.256419",
        "client_msg_id": "1fb580e6-a72a-4bca-9e78-964da284c778",
        "text": "Wow, great list <@UN57U8V53>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665483717.350009",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h=FCX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, great list "
                            },
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1665933150.897019",
        "client_msg_id": "acad6135-a63a-4299-9936-7ecfb998dc77",
        "text": "<@UJBAJNFLK> When some software has an explicit dependency, then surely the developer uses it consciously (of course, it often gets impractical for some transitive dependencies burrowed under many others). Now, assuming that such a dependency is used only by that one program (it's properly isolated, not being a shared library), then any defect should only come from the dependency itself or from the interaction between the dependency and the program. In the former case, the programmer should have chosen something that works; in the latter, it's probably his fault it doesn't work (unless it's a bug, in which case he unfortunately has to work around it). Yes, I know that in some environments, even isolated dependencies might clash (I've seen this happen with npm packages), but then, why bother using such environments?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HrKIX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " When some software has an explicit dependency, then surely the developer uses it consciously (of course, it often gets impractical for some transitive dependencies burrowed under many others). Now, assuming that such a dependency is used only by that one program (it's properly isolated, not being a shared library), then any defect should only come from the dependency itself or from the interaction between the dependency and the program. In the former case, the programmer should have chosen something that works; in the latter, it's probably his fault it doesn't work (unless it's a bug, in which case he unfortunately has to work around it). Yes, I know that in some environments, even isolated dependencies might clash (I've seen this happen with npm packages), but then, why bother using such environments?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1665937182.454149",
        "client_msg_id": "75b928ae-e41a-47c8-a06c-1783decbcc4a",
        "text": "<@U02028JHX37> The main issue in practice is dependencies evolving, breaking compatibility intentionally or through bugs creeping in.\nAn example from my own past: in the 1990s, I was part of the team that launched the Scientific Python ecosystem. Our main sustainability worry was \"what if Guido is hit by a bus?\" We had doubts about Python's survival chance for lack of community support. That turned out to be no issue: Python became immensely popular in the 2000s and developed a large developer community.\nBut then... Python 3 came along, and the Python developer community ended up actively killing Python 2. Lots of domain-specific scientific libraries (including one of my own: <https:\/\/github.com\/khinsen\/MMTK\/>) have become very hard to use because of everyone dropping support for Python 2. And we typically don't have the means for a porting effort to Python 3. So were we negligent in the 1990s for adopting Python 2 as a dependency?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+GvFk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " The main issue in practice is dependencies evolving, breaking compatibility intentionally or through bugs creeping in.\nAn example from my own past: in the 1990s, I was part of the team that launched the Scientific Python ecosystem. Our main sustainability worry was \"what if Guido is hit by a bus?\" We had doubts about Python's survival chance for lack of community support. That turned out to be no issue: Python became immensely popular in the 2000s and developed a large developer community.\nBut then... Python 3 came along, and the Python developer community ended up actively killing Python 2. Lots of domain-specific scientific libraries (including one of my own: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/khinsen\/MMTK\/"
                            },
                            {
                                "type": "text",
                                "text": ") have become very hard to use because of everyone dropping support for Python 2. And we typically don't have the means for a porting effort to Python 3. So were we negligent in the 1990s for adopting Python 2 as a dependency?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02028JHX37",
                    "UA14TGLTC",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1665937954.923249",
        "client_msg_id": "e4dda1e2-c519-498d-979c-6c8dc64f5f82",
        "text": "I see. Developing libraries is a risk in this regard (your userbase isn't really \"your\"). I had standalone \"binaries\" in mind (usually some pipeline utilities, but also more robust programs). These then depend only on the OS (or the shell).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VJe7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Developing libraries is a risk in this regard (your userbase isn't really \"your\"). I had standalone \"binaries\" in mind (usually some pipeline utilities, but also more robust programs). These then depend only on the OS (or the shell)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1665987651.463089",
        "client_msg_id": "1f0e4c96-b5f5-434f-a651-f44b5c40d520",
        "text": "Exactly. I have wondering for a while to what degree the success of Go is due to its build system encouraging dependency-free binaries. I don't care much about Go as a language, but I noticed that several of the most robust infrastructure software I depend on are written in Go: syncthing, go-ipfs (recently renamed kubo), rclone, gitea, perhaps more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1665807995.450199",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LXV0r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly. I have wondering for a while to what degree the success of Go is due to its build system encouraging dependency-free binaries. I don't care much about Go as a language, but I noticed that several of the most robust infrastructure software I depend on are written in Go: syncthing, go-ipfs (recently renamed kubo), rclone, gitea, perhaps more."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]