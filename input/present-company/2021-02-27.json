[
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1614422932.038500",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1614423105.000000"
        },
        "client_msg_id": "9a473f36-8f64-44a1-a757-4539dd947032",
        "text": "For implementation: Bitwise - a stream series where Per Vognsen implements a software-hardware stack from scratch, including a couple of languages. The languages he's creating are fairly low-level, but he brings up considerations that I think would be relevant for most languages.\n<https:\/\/github.com\/pervognsen\/bitwise\/>\n<https:\/\/www.youtube.com\/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "pervognsen\/bitwise",
                "title_link": "https:\/\/github.com\/pervognsen\/bitwise\/",
                "text": "Bitwise is an educational project where we create the software\/hardware stack for a computer from scratch. - pervognsen\/bitwise",
                "fallback": "GitHub: pervognsen\/bitwise",
                "thumb_url": "https:\/\/avatars.githubusercontent.com\/u\/123173?s=400&v=4",
                "from_url": "https:\/\/github.com\/pervognsen\/bitwise\/",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/pervognsen\/bitwise\/"
            },
            {
                "service_name": "YouTube",
                "title": "Bitwise",
                "title_link": "https:\/\/www.youtube.com\/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX",
                "text": "Share your videos with friends, family, and the world",
                "fallback": "YouTube: Bitwise",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/ZjwvMcP3Nf0\/hqdefault.jpg?sqp=-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ==&rs=AOn4CLBIQDU3AYh7X-8YOW_WgaeEmxTwuQ&days_since_epoch=18685",
                "from_url": "https:\/\/www.youtube.com\/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX",
                "thumb_width": 168,
                "thumb_height": 94,
                "service_icon": "https:\/\/www.youtube.com\/s\/desktop\/f1c5e957\/img\/favicon.ico",
                "id": 2,
                "original_url": "https:\/\/www.youtube.com\/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ogext",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For implementation: Bitwise - a stream series where Per Vognsen implements a software-hardware stack from scratch, including a couple of languages. The languages he's creating are fairly low-level, but he brings up considerations that I think would be relevant for most languages.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/pervognsen\/bitwise\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1614423303.038900",
        "client_msg_id": "1f05b757-f912-4755-a7e4-cf55b69019d3",
        "text": "The Jonathan Blow streams are often good, but past his design streams they're probably a bit too sparse in terms of insight for language development",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qaq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Jonathan Blow streams are often good, but past his design streams they're probably a bit too sparse in terms of insight for language development"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Hopefully this isn't too flame-war-like :smile:, but I'd also want to encourage the notion that \"performance is a feature\", particularly when you're creating software infrastructure such as a language compiler.\n(This is more relevant once you have a design\/prototype you're happy with and are going to make it available for public consumption.)\nESBuild provides an example of the importance of caring about performance in build tooling (pic attached). Speedups of this order of magnitude significantly improve the ways in which you can use the tool.",
        "files": [
            {
                "id": "F01PLFFJFAP",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UEDDR6L5Q",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hopefully this isn't too flame-war-like "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": ", but I'd also want to encourage the notion that \"performance is a feature\", particularly when you're creating software infrastructure such as a language compiler.\n(This is more relevant once you have a design\/prototype you're happy with and are going to make it available for public consumption.)\nESBuild provides an example of the importance of caring about performance in build tooling (pic attached). Speedups of this order of magnitude significantly improve the ways in which you can use the tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1614424245.039100",
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1614444803.039300",
        "client_msg_id": "25de3307-1222-433d-83c1-f40c23595739",
        "text": "Read SICP to understand how simpler a compiler can be and to make your own language with lisp notation.\n<https:\/\/mitpress.mit.edu\/sites\/default\/files\/sicp\/full-text\/book\/book.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NfUd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Read SICP to understand how simpler a compiler can be and to make your own language with lisp notation.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mitpress.mit.edu\/sites\/default\/files\/sicp\/full-text\/book\/book.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UEDDR6L5Q"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1614458267.039500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1614458330.000000"
        },
        "client_msg_id": "86d63630-4d1c-47d2-bf9a-640865617478",
        "text": "\"Modern Compiler Implementation in Java\" (also versions written for C, ML, etc) covers traditional compiler stuff, but delves really deep into specifics, various strategies for optimization (e.g. register coloring, loop unrolling, etc) and modeling different language paradigms at the low level.\n\nI thoroughly enjoyed this book more than others I've read (e.g. vs what's called \"The dragon book\")\n\n<https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description|https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "Google Books",
                "title": "Modern Compiler Implementation in Java",
                "title_link": "https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                "text": "This textbook explains all phases of a modern compiler: lexical analysis, parsing, abstract syntax, semantic actions, intermediate representations, instruction selection via tree matching, dataflow analysis, graph-colouring register allocation with coalescing, and runtime systems. It covers current techniques in code generation and register allocation, as well as functional and object-oriented languages, which are missing from most books on the topic. The author illustrates the most accepted and successful techniques in a concise way, rather than as an exhaustive catalogue of every possible variant. Detailed descriptions of the interfaces between modules of a compiler are illustrated with actual Java classes. A unique feature of the book is a well designed compiler implementation project in Java, including front-end and 'high-tech' back-end phases, so that students can build a complete working compiler in one semester. The textbook is meant for use in a one-semester first course for undergraduates in compiler design. Accompanying support software is available.",
                "fallback": "Google Books: Modern Compiler Implementation in Java",
                "from_url": "https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                "thumb_url": "https:\/\/books.google.com\/books\/content?id=EEyQQgAACAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE71lGT9gziwbvaePl-qR4JDZ_WCsLNgB5wnpQ54lBgeuCaQpNst4DVr3rRsYsg4IK65RrI1eMUMT-hFxtiU8C2uNShWrj6P1mYHy-51zU9Zmr_PoisrJK-sUfnAs_FDpi6UGmKb0",
                "thumb_width": 128,
                "thumb_height": 161,
                "service_icon": "https:\/\/books.google.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V0o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Modern Compiler Implementation in Java\" (also versions written for C, ML, etc) covers traditional compiler stuff, but delves really deep into specifics, various strategies for optimization (e.g. register coloring, loop unrolling, etc) and modeling different language paradigms at the low level.\n\nI thoroughly enjoyed this book more than others I've read (e.g. vs what's called \"The dragon book\")\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                                "text": "https:\/\/books.google.com\/books\/about\/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1614458647.039900",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1614458733.000000"
        },
        "client_msg_id": "b9051c6d-ff6c-4dc6-86fd-0f340be755be",
        "text": "&gt; SICP\nMIT recently put up the lecture series for this by the book authors: <https:\/\/www.youtube.com\/playlist?list=PLE18841CABEA24090>\nI'm about to go through it myself",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "MIT 6.001 Structure and Interpretation, 1986",
                "title_link": "https:\/\/www.youtube.com\/playlist?list=PLE18841CABEA24090",
                "text": "This course introduces students to the principles of computation. Upon completion of 6.001, students should be able to explain and apply the basic methods fr...",
                "fallback": "YouTube: MIT 6.001 Structure and Interpretation, 1986",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/2Op3QLzMgSY\/hqdefault.jpg?sqp=-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ==&rs=AOn4CLAbcDJ2Ck-AhIeH-rlZguhttTpvvQ&days_since_epoch=18685",
                "from_url": "https:\/\/www.youtube.com\/playlist?list=PLE18841CABEA24090",
                "thumb_width": 168,
                "thumb_height": 94,
                "service_icon": "https:\/\/www.youtube.com\/s\/desktop\/f1c5e957\/img\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/playlist?list=PLE18841CABEA24090"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=MX",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SICP"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MIT recently put up the lecture series for this by the book authors: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/playlist?list=PLE18841CABEA24090"
                            },
                            {
                                "type": "text",
                                "text": "\nI'm about to go through it myself"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1614459125.040600",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1614459265.000000"
        },
        "client_msg_id": "2911edd9-7b1f-4c58-bce8-c2c8a4ec7615",
        "text": "I also really enjoyed this one for an imperative (C-family) looking syntax with LISP semantics, and models the execution using continuation passing style *under the hood* (e.g. so you don't see it - like a language that has async and await syntax to make callbacks seem synchronous, but it's just that way by default with no extra syntax).\n\nThis provides for very interesting semantics that's not possible without CPS, such as being able to implement things that break or resume flow (e.g returns, exception-throwing, continuations), using plain old expressions that aren't baked into the compiler.\n\n<http:\/\/lisperator.net\/pltut\/|http:\/\/lisperator.net\/pltut\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Be3T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also really enjoyed this one for an imperative (C-family) looking syntax with LISP semantics, and models the execution using continuation passing style "
                            },
                            {
                                "type": "text",
                                "text": "under the hood",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (e.g. so you don't see it - like a language that has async and await syntax to make callbacks seem synchronous, but it's just that way by default with no extra syntax).\n\nThis provides for very interesting semantics that's not possible without CPS, such as being able to implement things that break or resume flow (e.g returns, exception-throwing, continuations), using plain old expressions that aren't baked into the compiler.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lisperator.net\/pltut\/",
                                "text": "http:\/\/lisperator.net\/pltut\/"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]