[
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1574160109.214800",
        "client_msg_id": "17eb1515-a55e-4917-b0db-41f2baebda02",
        "text": "I love this quote:\n\n&gt; Whenever we have a tree structure, it means that within this structure no piece of any unit is ever connected to other units, except through the medium of that unit as a whole.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nfS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this quote:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Whenever we have a tree structure, it means that within this structure no piece of any unit is ever connected to other units, except through the medium of that unit as a whole."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1574165711.219900",
        "client_msg_id": "42E0ADB9-1CE3-46E1-B5B8-6B11FC1C6AF0",
        "text": "Ok, so, can we talk about this for a bit? If you subscribe to the theory laid out in those two articles (unsurprisingly, much better in the one by Christopher Alexander), and if you believe that it can be applied to software, how does this change the way you design (as in architect — but that’s not a verb, as Alexander would say) systems?\n\nIn essence one possible conclusion is that we’ve been doing software architecture all wrong for decades, trying to cleanly separate everything into distinct layers or subsystems with as little overlap as possible, modeling everything as a tree, when it should be a semi-lattice.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gYDb=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, so, can we talk about this for a bit? If you subscribe to the theory laid out in those two articles (unsurprisingly, much better in the one by Christopher Alexander), and if you believe that it can be applied to software, how does this change the way you design (as in architect — but that’s not a verb, as Alexander would say) systems?\n\nIn essence one possible conclusion is that we’ve been doing software architecture all wrong for decades, trying to cleanly separate everything into distinct layers or subsystems with as little overlap as possible, modeling everything as a tree, when it should be a semi-lattice."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1574184067.220100",
        "client_msg_id": "f558dc18-b011-4ad6-84a9-cb0d3e11cbb8",
        "text": "That's basically what I've been saying! Come on in, the water's fine.\n\n<http:\/\/akkartik.name\/post\/modularity>\n<https:\/\/lobste.rs\/s\/rqgeej\/what_four_color_theorem_can_teach_us_about#c_zgjio7>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "What the Four Color Theorem Can Teach Us About Writing Software",
                "title_link": "https:\/\/lobste.rs\/s\/rqgeej\/what_four_color_theorem_can_teach_us_about#c_zgjio7",
                "text": "8 comments",
                "fallback": "What the Four Color Theorem Can Teach Us About Writing Software",
                "thumb_url": "https:\/\/lobste.rs\/apple-touch-icon-144.png",
                "from_url": "https:\/\/lobste.rs\/s\/rqgeej\/what_four_color_theorem_can_teach_us_about#c_zgjio7",
                "thumb_width": 144,
                "thumb_height": 144,
                "service_icon": "https:\/\/lobste.rs\/apple-touch-icon.png",
                "service_name": "lobste.rs",
                "id": 1,
                "original_url": "https:\/\/lobste.rs\/s\/rqgeej\/what_four_color_theorem_can_teach_us_about#c_zgjio7"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pQZx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's basically what I've been saying! Come on in, the water's fine.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/modularity"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lobste.rs\/s\/rqgeej\/what_four_color_theorem_can_teach_us_about#c_zgjio7"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1574189703.220400",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1574189735.000000"
        },
        "client_msg_id": "591eab53-3663-48b3-9bc4-a83762cf3cbf",
        "text": "I think microservices architecture (optimized for decoupled deployments) directly counters the tree (SOA optimized for minimal overlap) trend",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7QssI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think microservices architecture (optimized for decoupled deployments) directly counters the tree (SOA optimized for minimal overlap) trend"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1574189750.220800",
        "client_msg_id": "364ef62d-5521-4e91-8070-e9d9845106be",
        "text": "<@UN57U8V53> can you elaborate?!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ofVMK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": " can you elaborate?!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1574190301.221000",
        "client_msg_id": "f0298e86-e9cd-4798-9a54-e7813f4c4043",
        "text": "Sure:\n\nIn SOA everything had it’s neat little box where there were hierarchies of responsibilities and each service handled some (sub)responsibility that would never overlap with another.\n\nIn a microservices architecture--where any service can talk to any other service-- the tree model doesn’t exist anymore. Instead you have the possibility that anyone can depend on you (and vica versa). It’s way way harder to operationalize *because* you can’t visualize the entire system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o21cw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure:\n\nIn SOA everything had it’s neat little box where there were hierarchies of responsibilities and each service handled some (sub)responsibility that would never overlap with another.\n\nIn a microservices architecture--where any service can talk to any other service-- the tree model doesn’t exist anymore. Instead you have the possibility that anyone can depend on you (and vica versa). It’s way way harder to operationalize "
                            },
                            {
                                "type": "text",
                                "text": "because",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you can’t visualize the entire system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1574190491.221200",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1574190811.000000"
        },
        "client_msg_id": "f2199458-a9fd-4eb8-8e06-77170cd914eb",
        "text": "(FYI: I purposely am not referring to the hybrid\/tiered microservices architectures aka distributed SOA because they are mostly frankenstein monsters borne out of lack of tooling\/understanding of the tradeoffs before starting-- my perspective matches the one described here: <http:\/\/nealford.com\/downloads\/Evolutionary_Architecture_Keynote_by_Neal_Ford.pdf>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yxq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(FYI: I purposely am not referring to the hybrid\/tiered microservices architectures aka distributed SOA because they are mostly frankenstein monsters borne out of lack of tooling\/understanding of the tradeoffs before starting-- my perspective matches the one described here: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nealford.com\/downloads\/Evolutionary_Architecture_Keynote_by_Neal_Ford.pdf"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1574191377.221600",
        "client_msg_id": "2d223b48-e6b5-44fb-aeb9-3fda9681b8da",
        "text": "I'm still a little confused because I always thought microservices _were_ SOAs.\n\nIgnoring labels, I think you're comparing the ideal of one side with the reality of the other. We've been creating overly complex spaghetti architecture diagrams long before either of these terms were coined.\n\nBut I think I'm still not understanding you, so would appreciate further elaboration.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e1Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm still a little confused because I always thought microservices "
                            },
                            {
                                "type": "text",
                                "text": "were",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " SOAs.\n\nIgnoring labels, I think you're comparing the ideal of one side with the reality of the other. We've been creating overly complex spaghetti architecture diagrams long before either of these terms were coined.\n\nBut I think I'm still not understanding you, so would appreciate further elaboration."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1574195594.223400",
        "client_msg_id": "b868c758-9a90-4dc7-a324-6d9bebb9fb12",
        "text": "Hey, I have used a language a while ago (many years to be precise) called Dark Basic. It was useful to experiment with my first game programming but then I moved to C++. Have anyone used it ever? What did you think of it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574195594.223400",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1575112986.324800",
        "reply_users": [
            "U6BRN7A0Y",
            "UPVBV34EL",
            "UNBPP291C",
            "UDQBTJ211"
        ],
        "replies": [
            {
                "user": "U6BRN7A0Y",
                "ts": "1574223185.223900"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1574238962.224300"
            },
            {
                "user": "UNBPP291C",
                "ts": "1574258924.225400"
            },
            {
                "user": "UNBPP291C",
                "ts": "1574259109.225600"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1574263847.226000"
            },
            {
                "user": "UNBPP291C",
                "ts": "1574334567.286000"
            },
            {
                "user": "UPVBV34EL",
                "ts": "1574337101.286200"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1575112986.324800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iziB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, I have used a language a while ago (many years to be precise) called Dark Basic. It was useful to experiment with my first game programming but then I moved to C++. Have anyone used it ever? What did you think of it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574212062.223500",
        "client_msg_id": "1746f607-90f6-4d38-9459-5a312566e367",
        "text": "The Christopher Alexander essay is amazing. But no, we are not designing software wrong. This is explained by a section of Alexander's essay, starting with \"The tree is accessible mentally and easy to deal with. The semilattice is hard to keep before the mind's eye and therefore hard to deal with.\"\n\nMy point is that source code needs to be organized in a way that the human mind can comprehend, otherwise, it is not maintainable. On the other hand, it is fine if the output of an optimizing compiler is a big mess that you could not reasonably maintain by hand.\n\nIn the first article, consider that photo of the topologically optimized machine part. Do you want your source code to look like that? If the requirements change, can you modify that structure to meet the new requirement? Of course not, but that structure is the output of an optimizing \"topology\" compiler. The source code used to generate it is quite a bit simpler and more orderly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=joC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Christopher Alexander essay is amazing. But no, we are not designing software wrong. This is explained by a section of Alexander's essay, starting with \"The tree is accessible mentally and easy to deal with. The semilattice is hard to keep before the mind's eye and therefore hard to deal with.\"\n\nMy point is that source code needs to be organized in a way that the human mind can comprehend, otherwise, it is not maintainable. On the other hand, it is fine if the output of an optimizing compiler is a big mess that you could not reasonably maintain by hand.\n\nIn the first article, consider that photo of the topologically optimized machine part. Do you want your source code to look like that? If the requirements change, can you modify that structure to meet the new requirement? Of course not, but that structure is the output of an optimizing \"topology\" compiler. The source code used to generate it is quite a bit simpler and more orderly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1574218803.223700",
        "client_msg_id": "bb361e16-6607-49ef-84cf-7f7f613f22a5",
        "text": "I mostly agree; you don't have to see reality \"as it is\" to reason about it. It's just worth remembering that hierarchical decomposition is an approximation, and that other approximations are possible (see my links above).\n\nAll too often the response to a failure of hierarchy is to add more hierarchy. It's easy to confuse the map for the territory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574069038.213900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SLS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mostly agree; you don't have to see reality \"as it is\" to reason about it. It's just worth remembering that hierarchical decomposition is an approximation, and that other approximations are possible (see my links above).\n\nAll too often the response to a failure of hierarchy is to add more hierarchy. It's easy to confuse the map for the territory."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6BRN7A0Y",
        "type": "message",
        "ts": "1574223185.223900",
        "client_msg_id": "7f3d1f3c-019e-44c3-845b-b38b42dc0cbd",
        "text": "No, but love the name!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gee6ec3be3e3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/eee6ec3be3e3176ff1e1119301630812.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Paul",
            "real_name": "Paul Biggar",
            "display_name": "pbiggar",
            "team": "T5TCAFTA9",
            "name": "pbiggar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574195594.223400",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/If",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, but love the name!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]