[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1651490405.173189",
        "client_msg_id": "7f3a0486-4245-432d-9b88-3a9a8ccc5a84",
        "text": "<https:\/\/www.interaction-design.org\/literature\/article\/design-for-the-future-but-balance-it-with-your-users-present#:~:text=Maya%20is%20an%20abbreviation%20for,able%20to%20accept%20and%20embrace.|The MAYA Principle>\n\nLoewy’s secret was essential to design for the future – but delivering the future gradually. He designed his famous logos, some of the most recognizable cars of the 40s, 50s, and 60s, refrigerators, and locomotives for his users’ present needs and skills while pushing the boundaries of design and technology beyond his users’ expectations. He called this approach the MAYA principle. Maya is an abbreviation for “*Most Advanced. Yet Acceptable.*” which means that Loewy sought to give his users the most advanced design, but not more advanced than what they were able to accept and embrace. Loewy believed that:\n\n&gt; _\"The adult public's taste is not necessarily ready to accept the logical solutions to their requirements if the solution implies too vast a departure from what they have been conditioned into accepting as the norm.\"_\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651490405.173189",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1651569042.741649",
        "reply_users": [
            "UBN9AFS0N"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1651569042.741649"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9bUie",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.interaction-design.org\/literature\/article\/design-for-the-future-but-balance-it-with-your-users-present#:~:text=Maya%20is%20an%20abbreviation%20for,able%20to%20accept%20and%20embrace.",
                                "text": "The MAYA Principle"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLoewy’s secret was essential to design for the future – but delivering the future gradually. He designed his famous logos, some of the most recognizable cars of the 40s, 50s, and 60s, refrigerators, and locomotives for his users’ present needs and skills while pushing the boundaries of design and technology beyond his users’ expectations. He called this approach the MAYA principle. Maya is an abbreviation for “"
                            },
                            {
                                "type": "text",
                                "text": "Most Advanced. Yet Acceptable.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "” which means that Loewy sought to give his users the most advanced design, but not more advanced than what they were able to accept and embrace. Loewy believed that:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"The adult public's taste is not necessarily ready to accept the logical solutions to their requirements if the solution implies too vast a departure from what they have been conditioned into accepting as the norm.\"",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UJBAJNFLK",
                    "U02NU8FTL5N",
                    "U01AD80KMLK"
                ],
                "count": 4
            },
            {
                "name": "cake",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            },
            {
                "name": "amiga-tick",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "This is something discussed in “_The ‘Physics’ of Notation_” paper (<https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069|https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069>) . This screenshot below is referenced from from the “_Semiology of Graphics_”.\n\nThe former paper presents evidence that shape seems to be an important visual variable\n\n&gt; Of all visual variables, shape plays a special role in discriminating between symbols as it represents the primary basis on which we identify objects in the real world. In fact, theories of object recognition differ only to the extent that they consider object representations to be based only on shape or if other features are also involved [9], [78], [114]. For this reason, shape should be used as the primary visual variable for distinguishing between different semantic constructs.\n&gt; \nHierarchy and subsequently depth are other interesting visual variables:\n\n&gt; Hierarchy is one of the most effective ways of organizing complexity for human comprehension as it allows systems to be represented at different levels of detail, with complexity manageable at each level [30]. This supports top down understanding, which has been shown to improve understanding of SE diagrams [94]. Simon [125] proposed hierarchy as a general architecture for structuring complex systems.\n&gt; \nIn fact, its sublte but depth is something I have explored adding to the visual syntax of statecharts. Adding drop shadows to hierarchical\/parallel states and inset shadows to history states. The later is interesting since history states are deeply knowledable about the state they are in and inset highlights.\n",
        "files": [
            {
                "id": "F03E456QTND",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0378MDUG1Y",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2l0D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is something discussed in “"
                            },
                            {
                                "type": "text",
                                "text": "The ‘Physics’ of Notation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "” paper ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069"
                            },
                            {
                                "type": "text",
                                "text": ") . This screenshot below is referenced from from the “"
                            },
                            {
                                "type": "text",
                                "text": "Semiology of Graphics",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "”.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The former paper presents evidence that shape seems to be an important visual variable\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of all visual variables, shape plays a special role in discriminating between symbols as it represents the primary basis on which we identify objects in the real world. In fact, theories of object recognition differ only to the extent that they consider object representations to be based only on shape or if other features are also involved [9], [78], [114]. For this reason, shape should be used as the primary visual variable for distinguishing between different semantic constructs.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hierarchy and subsequently depth are other interesting visual variables:\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hierarchy is one of the most effective ways of organizing complexity for human comprehension as it allows systems to be represented at different levels of detail, with complexity manageable at each level [30]. This supports top down understanding, which has been shown to improve understanding of SE diagrams [94]. Simon [125] proposed hierarchy as a general architecture for structuring complex systems.\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In fact, its sublte but depth is something I have explored adding to the visual syntax of statecharts. Adding drop shadows to hierarchical\/parallel states and inset shadows to history states. The later is interesting since history states are deeply knowledable about the state they are in and inset highlights.\n"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1651504239.835459",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1651504618.000000"
        },
        "client_msg_id": "27588CF0-BA5F-4D3E-941E-B3D99E3324E8",
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069",
                "ts": "1647551973.870069",
                "author_id": "U0378MDUG1Y",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1647551973.870069",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "O6VN",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Haven’t seen anyone link this paper before “The ‘Physics’ of Notations: Toward a Scientific Basis for Constructing Visual Notations in Software Engineering”\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "It discusses the distinction between visual syntax and visual semantics and how visual syntax tends to be misused or underused in visual notations like UML. Great read, definitely one I’ll likely be referencing for a bit!\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238",
                                                    "text": "https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "Abstract:\n"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "rich_text_quote",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Visual notations form an integral part of the language of software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues of visual representation. In evaluating and comparing notations, details of visual syntax are rarely discussed. In designing notations, the majority of effort is spent on semantics, with graphical conventions largely an afterthought. Typically, no design rationale, scientific or otherwise, is provided for visual representation choices. While SE has developed mature methods for evaluating and designing semantics, it lacks equivalent methods for visual syntax. This paper defines a set of principles for designing cognitively effective visual notations: ones that are optimized for human communication and problem solving. Together these form a design theory, called the Physics of Notations as it focuses on the physical (perceptual) properties of notations rather than their logical (semantic) properties. The principles were synthesized from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate. They can be used to evaluate, compare, and improve existing visual notations as well as to construct new ones. The paper identifies serious design flaws in some of the leading SE notations, together with practical suggestions for improving them. It also showcases some examples of visual notation design excellence from SE and other fields."
                                                }
                                            ],
                                            "border": 0
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1647551973870069",
                "fallback": "[March 17th, 2022 2:19 PM] chris.shank.23: Haven’t seen anyone link this paper before “The ‘Physics’ of Notations: Toward a Scientific Basis for Constructing Visual Notations in Software Engineering”\n\nIt discusses the distinction between visual syntax and visual semantics and how visual syntax tends to be misused or underused in visual notations like UML. Great read, definitely one I’ll likely be referencing for a bit!\n\n<https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238|https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238>\n\nAbstract:\n\n&gt; Visual notations form an integral part of the language of software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues of visual representation. In evaluating and comparing notations, details of visual syntax are rarely discussed. In designing notations, the majority of effort is spent on semantics, with graphical conventions largely an afterthought. Typically, no design rationale, scientific or otherwise, is provided for visual representation choices. While SE has developed mature methods for evaluating and designing semantics, it lacks equivalent methods for visual syntax. This paper defines a set of principles for designing cognitively effective visual notations: ones that are optimized for human communication and problem solving. Together these form a design theory, called the Physics of Notations as it focuses on the physical (perceptual) properties of notations rather than their logical (semantic) properties. The principles were synthesized from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate. They can be used to evaluate, compare, and improve existing visual notations as well as to construct new ones. The paper identifies serious design flaws in some of the leading SE notations, together with practical suggestions for improving them. It also showcases some examples of visual notation design excellence from SE and other fields.",
                "text": "Haven’t seen anyone link this paper before “The ‘Physics’ of Notations: Toward a Scientific Basis for Constructing Visual Notations in Software Engineering”\n\nIt discusses the distinction between visual syntax and visual semantics and how visual syntax tends to be misused or underused in visual notations like UML. Great read, definitely one I’ll likely be referencing for a bit!\n\n<https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238|https:\/\/deptmedia.cnam.fr\/new\/spip.php?pdoc6238>\n\nAbstract:\n\n&gt; Visual notations form an integral part of the language of software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues of visual representation. In evaluating and comparing notations, details of visual syntax are rarely discussed. In designing notations, the majority of effort is spent on semantics, with graphical conventions largely an afterthought. Typically, no design rationale, scientific or otherwise, is provided for visual representation choices. While SE has developed mature methods for evaluating and designing semantics, it lacks equivalent methods for visual syntax. This paper defines a set of principles for designing cognitively effective visual notations: ones that are optimized for human communication and problem solving. Together these form a design theory, called the Physics of Notations as it focuses on the physical (perceptual) properties of notations rather than their logical (semantic) properties. The principles were synthesized from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate. They can be used to evaluate, compare, and improve existing visual notations as well as to construct new ones. The paper identifies serious design flaws in some of the leading SE notations, together with practical suggestions for improving them. It also showcases some examples of visual notation design excellence from SE and other fields.",
                "author_name": "Christopher Shank",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U0378MDUG1Y",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_48.png",
                "author_subname": "Christopher Shank",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Slack Conversation"
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651504485.251089",
        "client_msg_id": "4e6adda2-73c7-46f8-a949-914fa1f8dea5",
        "text": "I would love to have something more like \"zooming in to a different depth of hierarchy\" that I could use as an alternative to collapsible trees, e.g. Haven't found any free, easy to use libraries for it, yet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Dum",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would love to have something more like \"zooming in to a different depth of hierarchy\" that I could use as an alternative to collapsible trees, e.g. Haven't found any free, easy to use libraries for it, yet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U02U0AS3J49>  Harel had some ideas about this in his original paper on statecharts. Havent seen it implemented in any tools though. Seems to only be possible by using containment to visually represent hierarchy.\n\n",
        "files": [
            {
                "id": "F03E49ZSC5P",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0378MDUG1Y",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Go3m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": "  Harel had some ideas about this in his original paper on statecharts. Havent seen it implemented in any tools though. Seems to only be possible by using containment to visually represent hierarchy.\n\n"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1651504857.017549",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1651504964.000000"
        },
        "client_msg_id": "1425BCAD-BD29-4E84-AA0E-2A5593870A2F",
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651505036.978069",
        "client_msg_id": "473edaf5-f300-477d-b914-569e61f4d159",
        "text": "That diagram is almost identical to one I wrote in my notebook last year while thinking about a visual annotation for procedures. So strange that there is no open implementation of it. Beyond my skill, unfortunately.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rr\/CM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That diagram is almost identical to one I wrote in my notebook last year while thinking about a visual annotation for procedures. So strange that there is no open implementation of it. Beyond my skill, unfortunately."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1651505108.838489",
        "client_msg_id": "6c00f64a-3c13-4bbd-85ef-11b56aa60a6d",
        "text": "<@U02U0AS3J49> <@UAZT04VT4> posted about this today: <https:\/\/twitter.com\/paulsonnentag\/status\/1521111393613008901>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/twitter.com\/paulsonnentag\/status\/1521111393613008901",
                "ts": 1651496191,
                "image_url": "https:\/\/pbs.twimg.com\/media\/FRwOC9ZWUAADBZo.jpg",
                "image_width": 1199,
                "image_height": 720,
                "image_bytes": 60461,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/paulsonnentag\/status\/1521111393613008901",
                "fallback": "<https:\/\/twitter.com\/paulsonnentag|@paulsonnentag>: A :thread: of tools for building UIs with statecharts <https:\/\/pbs.twimg.com\/media\/FRwOC9ZWUAADBZo.jpg>",
                "text": "A :thread: of tools for building UIs with statecharts <https:\/\/pbs.twimg.com\/media\/FRwOC9ZWUAADBZo.jpg>",
                "author_name": "Paul Sonnentag (he\/him)",
                "author_link": "https:\/\/twitter.com\/paulsonnentag\/status\/1521111393613008901",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1040857466274107392\/DAwX0Q_W_normal.jpg",
                "author_subname": "@paulsonnentag",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "image_url": "https:\/\/pbs.twimg.com\/media\/FRwN_yPWUAQnni7.jpg",
                "image_width": 1186,
                "image_height": 1200,
                "image_bytes": 74319,
                "id": 2,
                "fallback": "1186x1200px image",
                "text": "<https:\/\/pbs.twimg.com\/media\/FRwN_yPWUAQnni7.jpg>"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tlt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " posted about this today: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/paulsonnentag\/status\/1521111393613008901"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651505831.254799",
        "client_msg_id": "d46b8684-70b2-4d8a-be19-0304f87a5fcd",
        "text": "Yeah, I showed someone the diagram, and they said \"congratulations, you have reinvented hierarchical state charts.\" I'm not persuaded what I want to do is exactly the same thing, though. The state of a program and the state of a process are not identical. The state of a program describes all possibilities. I need to be able to note when a process has gone outside the lines, and figure out how to return it to compliance. But the visual interface would be similar. I need access to the interface, not state machine editing tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VcEF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I showed someone the diagram, and they said \"congratulations, you have reinvented hierarchical state charts.\" I'm not persuaded what I want to do is exactly the same thing, though. The state of a program and the state of a process are not identical. The state of a program describes all possibilities. I need to be able to note when a process has gone outside the lines, and figure out how to return it to compliance. But the visual interface would be similar. I need access to the interface, not state machine editing tools."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1651518926.091159",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1651519247.000000"
        },
        "client_msg_id": "dc116b81-b7ba-4ad5-9a95-db4625707642",
        "text": "<@UCGAK10LS> Does knowing you'll need an operating system imply you know how to write one? Isn't all the tech we use to create with built on top of tech we are not experts in? Isn't it specialization that allows for advanced economies? If we are struggling to make headway into a new tech layer, could it be because we don't have sufficient precursor components\/layers?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650388220.757719",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lggCJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Does knowing you'll need an operating system imply you know how to write one? Isn't all the tech we use to create with built on top of tech we are not experts in? Isn't it specialization that allows for advanced economies? If we are struggling to make headway into a new tech layer, could it be because we don't have sufficient precursor components\/layers?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03DEDRSHJA",
        "type": "message",
        "ts": "1651530151.507669",
        "client_msg_id": "0746e008-65c3-43de-a536-54091f1d0854",
        "text": "*Visualizing data structures (e.g. in PostgreSQL)*\n\nWhen we think about the data structures our programs use or the execution flow of our programs, I’m pretty sure we all think visually and if we had to explain it to someone we would be drawing diagrams on a whiteboard. Yet pretty much all our coding and debugging is text-based. We are forced to visualize things in our minds.\n\nI’ve been debugging the PostgreSQL codebase to better understand how things work. I think a lot of people treat it like a scary magical black box, but it’s quite easy to debug a query’s execution path, and start to understand how it works.\n\nWhen we learn about databases, say from Andy Pavlo’s CMU database course, there are a bunch of core diagrams used to explain things. Like the parse tree, logical plan tree, physical plan tree, disk storage layout, btree\/bitmap\/hashmap index, etc.\n\nSo what I was thinking was to instrument the PostgreSQL C codebase (via LLVM-IR), and then visualize some of the key data structures and stores. Imagine how easy it would be to teach database internals, if you could type in a query, and then visually step through the actual execution of the query with visual diagrams. I would imagine that any PowerPoint slides and diagrams could be replaced by this visual interface with a slider and some filtering options for what to show.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3fe60a24aea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-30\/3463104458882_f3fe60a24aea2a0fe6a5_72.png",
            "first_name": "Vaughan",
            "real_name": "Vaughan Rouesnel",
            "display_name": "Vaughan Rouesnel",
            "team": "T5TCAFTA9",
            "name": "vrouesnel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651530151.507669",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1651729599.192149",
        "reply_users": [
            "U03E4LY27FS",
            "U013ZLJARC7",
            "UDQBTJ211",
            "U02E4DAQGSZ"
        ],
        "replies": [
            {
                "user": "U03E4LY27FS",
                "ts": "1651533647.171129"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1651560984.635089"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1651579878.499209"
            },
            {
                "user": "U03E4LY27FS",
                "ts": "1651635912.201219"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1651729599.192149"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HwDn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visualizing data structures (e.g. in PostgreSQL)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhen we think about the data structures our programs use or the execution flow of our programs, I’m pretty sure we all think visually and if we had to explain it to someone we would be drawing diagrams on a whiteboard. Yet pretty much all our coding and debugging is text-based. We are forced to visualize things in our minds.\n\nI’ve been debugging the PostgreSQL codebase to better understand how things work. I think a lot of people treat it like a scary magical black box, but it’s quite easy to debug a query’s execution path, and start to understand how it works.\n\nWhen we learn about databases, say from Andy Pavlo’s CMU database course, there are a bunch of core diagrams used to explain things. Like the parse tree, logical plan tree, physical plan tree, disk storage layout, btree\/bitmap\/hashmap index, etc.\n\nSo what I was thinking was to instrument the PostgreSQL C codebase (via LLVM-IR), and then visualize some of the key data structures and stores. Imagine how easy it would be to teach database internals, if you could type in a query, and then visually step through the actual execution of the query with visual diagrams. I would imagine that any PowerPoint slides and diagrams could be replaced by this visual interface with a slider and some filtering options for what to show."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "U01DBLH2DN1"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03E4LY27FS",
        "type": "message",
        "ts": "1651533647.171129",
        "client_msg_id": "CB4A4447-9599-46AA-A86B-B494ABD25AB6",
        "text": "Vaughan, I'd like to personally offer my services to help with this! I'm writing an AR\/VR application PoC for macOS\/iOS that reads, analyzes, renders, traces, and plays back an executed path through code. It sounds very much like the raw set of tools that might help to put this together. Is this something you might find interesting?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "98f0011b77c6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-28\/3450316621254_98f0011b77c61bbc241b_72.jpg",
            "first_name": "Ivan",
            "real_name": "Ivan Lugo",
            "display_name": "Ivan Lugo",
            "team": "T5TCAFTA9",
            "name": "iheartlappy486",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651530151.507669",
        "parent_user_id": "U03DEDRSHJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BD00",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Vaughan, I'd like to personally offer my services to help with this! I'm writing an AR\/VR application PoC for macOS\/iOS that reads, analyzes, renders, traces, and plays back an executed path through code. It sounds very much like the raw set of tools that might help to put this together. Is this something you might find interesting?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UA14TGLTC",
                    "U03DEDRSHJA",
                    "U02NU8FTL5N",
                    "UCUSW7WVD"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1651560984.635089",
        "client_msg_id": "5d9b4fe9-c966-4a20-9142-b21170a3e2b7",
        "text": "Showing traces and visual structures is great for understanding :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651530151.507669",
        "parent_user_id": "U03DEDRSHJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Khe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Showing traces and visual structures is great for understanding "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]