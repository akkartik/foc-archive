[
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1709408827.747779",
        "client_msg_id": "2D15EDA8-547D-4044-B751-FDED8CD8CB51",
        "text": "The last couple of weeks I've been mainly focussing on the editing\/creating of composition nodes in the visual programming system that I am building, which is more work than I expected. At least it's now possible to add input and output ports dynamically for existing compositions.\n\nSince I also wanted to have some fun (and procastinate) I decided to implement a zoomable mandelbrot fractal in the gl-flow app, which can be seen in this little video <https:\/\/youtu.be\/y71c1IBBBsk|https:\/\/youtu.be\/y71c1IBBBsk>. This also required some extra node-types and adjustments to the pull-based gl-flow engine. Like having support for a  for-loop-node which can be breaked out of depending on a condition. I implemented both the for-node as the condition as containers due to the way the pull-based engine works.\n\nTo give some background on the implementation of the pull-based flow engine which is used in the gl-flow app: the nodes get executed backwards starting at an end node and their output is glsl-code which can be run by a fragment shader on the gpu. So, the nodes themselves are not executed by the shader but the generated output is.\nThe spatial placement of the \"end-nodes\" is used to determine which node gets executed first and then the input nodes are executed backwards. A container is also an end-node. So, the contained nodes are executed in a code block.\n\nI think the fractal renderer works quite nicely but you can't zoom very deep because of precision issues. I might try to solve these in the future, but my goal is not to make the perfect visual shadertoy:blush:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709408827.747779",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1709495762.494049",
        "reply_users": [
            "UCUSW7WVD",
            "U0123H7JRDM"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1709495043.147559"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1709495762.494049"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/y71c1IBBBsk",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/y71c1IBBBsk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/y71c1IBBBsk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"mandelbrot fractal in my visual programming environment\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/youtu.be\/y71c1IBBBsk",
                "fallback": "YouTube Video: mandelbrot fractal in my visual programming environment",
                "title": "mandelbrot fractal in my visual programming environment",
                "title_link": "https:\/\/youtu.be\/y71c1IBBBsk",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https:\/\/www.youtube.com\/@maikelvandelisdonk7024",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7dFWd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The last couple of weeks I've been mainly focussing on the editing\/creating of composition nodes in the visual programming system that I am building, which is more work than I expected. At least it's now possible to add input and output ports dynamically for existing compositions.\n\nSince I also wanted to have some fun (and procastinate) I decided to implement a zoomable mandelbrot fractal in the gl-flow app, which can be seen in this little video "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/y71c1IBBBsk",
                                "text": "https:\/\/youtu.be\/y71c1IBBBsk"
                            },
                            {
                                "type": "text",
                                "text": ". This also required some extra node-types and adjustments to the pull-based gl-flow engine. Like having support for a  for-loop-node which can be breaked out of depending on a condition. I implemented both the for-node as the condition as containers due to the way the pull-based engine works.\n\nTo give some background on the implementation of the pull-based flow engine which is used in the gl-flow app: the nodes get executed backwards starting at an end node and their output is glsl-code which can be run by a fragment shader on the gpu. So, the nodes themselves are not executed by the shader but the generated output is.\nThe spatial placement of the \"end-nodes\" is used to determine which node gets executed first and then the input nodes are executed backwards. A container is also an end-node. So, the contained nodes are executed in a code block.\n\nI think the fractal renderer works quite nicely but you can't zoom very deep because of precision issues. I might try to solve these in the future, but my goal is not to make the perfect visual shadertoy"
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "boom",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]