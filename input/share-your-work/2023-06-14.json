[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1686737481.002109",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1686741995.000000"
        },
        "client_msg_id": "595bec02-4905-4d76-912b-d0c1fb3e988b",
        "text": "<@UCUSW7WVD>\n\nFYI, I think of this when I think about manipulation by compilers:\n\n```int plus97 (int x) {\n  return x + 99 - 2;\n}\n\nint pt1 (int x) {\n  return plus97 (plus97 (x));\n}```\n$ gcc -O3 -S pt1.c\n\nturns this into:\n\n```int pt1 (int x) {\n  return x + 194;\n}```\nThen, there’s git, diff, NiCaD Clone Detector (Cordy, Roy).\n\n[aside: the above quoted essay doesn’t actually contain a statement about “deduplication”, but, it does sound like something I would say.  I wonder what I was thinking when I wrote that? I wonder what it made you think?]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681811012.388819",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GZDSj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFYI, I think of this when I think about manipulation by compilers:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "int plus97 (int x) {\n  return x + 99 - 2;\n}\n\nint pt1 (int x) {\n  return plus97 (plus97 (x));\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n$ gcc -O3 -S pt1.c\n\nturns this into:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "int pt1 (int x) {\n  return x + 194;\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen, there’s git, diff, NiCaD Clone Detector (Cordy, Roy).\n\n[aside: the above quoted essay doesn’t actually contain a statement about “deduplication”, but, it does sound like something I would say.  I wonder what I was thinking when I wrote that? I wonder what it made you think?]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04BPBG8VN0",
        "type": "message",
        "ts": "1686749030.352669",
        "client_msg_id": "314be0db-5926-40f2-ae9c-a72e16ab0ad7",
        "text": "I’ve been sketching multiplayer UIs. Folks who came to the most recent London meet will recognise these from my demo. I’m trying not to converge on anything right now — how we interact with AI NPCs is still so open.\n\nI made a new one today, with spatial multiplayer chatrooms and an NPC inhabiting each. It’s on Twitter <https:\/\/twitter.com\/genmon\/status\/1668948562460266497>\n\nAn archive of all of my sketches, including a bonus gesture-controlled lamp <https:\/\/www.actsnotfacts.com\/made\/multiplayer>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4d2e6ef6a0bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-18\/4388330613974_4d2e6ef6a0bf918288b4_72.jpg",
            "first_name": "Matt",
            "real_name": "Matt Webb",
            "display_name": "Matt Webb",
            "team": "T5TCAFTA9",
            "name": "matt372",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686749030.352669",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1686769555.418149",
        "reply_users": [
            "U03R0B9U1GD"
        ],
        "replies": [
            {
                "user": "U03R0B9U1GD",
                "ts": "1686769555.418149"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/pbs.twimg.com\/tweet_video_thumb\/FylK_7mXoAMzJOz.jpg:large",
                "image_width": 800,
                "image_height": 450,
                "image_bytes": 15397,
                "from_url": "https:\/\/twitter.com\/genmon\/status\/1668948562460266497",
                "service_icon": "http:\/\/abs.twimg.com\/favicons\/twitter.2.ico",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/genmon\/status\/1668948562460266497",
                "fallback": "Twitter: Matt Webb :cherry_blossom::blossom::cherry_blossom: on Twitter",
                "text": "what if you had one chatroom with an AI for wild ideas... and another next door for a dose of reality?\n\nand you travel between AI NPC chatrooms like a spatial map?\n\nyeah and it's all multiplayer so your friends can be there too?\n\noh yes ALSO one of the rooms is haunted :ghost:",
                "title": "Matt Webb :cherry_blossom::blossom::cherry_blossom: on Twitter",
                "title_link": "https:\/\/twitter.com\/genmon\/status\/1668948562460266497",
                "service_name": "Twitter"
            },
            {
                "image_url": "https:\/\/www.actsnotfacts.com\/api\/og?heading=A+series+of+software+sketches+exploring+multiplayer+UI.&type=Made&mode=dark&image=https%3A%2F%2Fwww.actsnotfacts.com%2Fassets%2Fmade%2Fmultiplayer%2Fmultiplayer-cover.png",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 142663,
                "from_url": "https:\/\/www.actsnotfacts.com\/made\/multiplayer",
                "id": 2,
                "original_url": "https:\/\/www.actsnotfacts.com\/made\/multiplayer",
                "fallback": "Multiplayer sketches",
                "text": "A series of software sketches exploring multiplayer UI.",
                "title": "Multiplayer sketches",
                "title_link": "https:\/\/www.actsnotfacts.com\/made\/multiplayer",
                "service_name": "actsnotfacts.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1s7N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve been sketching multiplayer UIs. Folks who came to the most recent London meet will recognise these from my demo. I’m trying not to converge on anything right now — how we interact with AI NPCs is still so open.\n\nI made a new one today, with spatial multiplayer chatrooms and an NPC inhabiting each. It’s on Twitter "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/genmon\/status\/1668948562460266497"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAn archive of all of my sketches, including a bonus gesture-controlled lamp "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.actsnotfacts.com\/made\/multiplayer"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UQ2P2BYJU",
                    "U0275EZH3UN",
                    "UP00ZLX6G"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1686759649.942569",
        "client_msg_id": "9c3ad69e-4936-4e33-88d3-10d2e4078a59",
        "text": "I don't see it anymore at <https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-01-24-0D+Ideal+vs.+Reality>, but as I recall that page used to be much longer. Did you reorganize or something?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681811012.388819",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DK=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't see it anymore at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-01-24-0D+Ideal+vs.+Reality"
                            },
                            {
                                "type": "text",
                                "text": ", but as I recall that page used to be much longer. Did you reorganize or something?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1686759907.704059",
        "client_msg_id": "e5bfcb31-92a9-4ee4-9ede-c684a9509a38",
        "text": "Yes, constant folding works _really_ well in modern compilers. I think part of the reason is it's a one-sided optimization problem. There's never any costs so it's never a bad idea to do too much of it. So a compiler can blindly go chomping through the whole codebase. Deduplication is more complicated to implement and also has more risk. Folding two places together can make a program run slower by reducing opportunities for other optimizations compared to optimizing both sides separately.\n\n(Please let me know if I'm saying things you know, or things you know to be false. I haven't worked on compilers in many years.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681811012.388819",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O7V1h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, constant folding works "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " well in modern compilers. I think part of the reason is it's a one-sided optimization problem. There's never any costs so it's never a bad idea to do too much of it. So a compiler can blindly go chomping through the whole codebase. Deduplication is more complicated to implement and also has more risk. Folding two places together can make a program run slower by reducing opportunities for other optimizations compared to optimizing both sides separately.\n\n(Please let me know if I'm saying things you know, or things you know to be false. I haven't worked on compilers in many years.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1686769555.418149",
        "client_msg_id": "80a6634e-e07e-4d95-8b30-0dd25049bfe4",
        "text": "I really enjoyed your presentation Matt! I especially love the \"commute\" concept. I'd use that in a heartbeat :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1686749030.352669",
        "parent_user_id": "U04BPBG8VN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9hkPr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really enjoyed your presentation Matt! I especially love the \"commute\" concept. I'd use that in a heartbeat :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04C28QUSDN"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1686785699.849839",
        "client_msg_id": "2eab2adc-da1f-437c-9f79-8a80e8dce880",
        "text": "Hmm, I think this is an example of inlining, wherein constant-folding is but a subset.  Anyway, you have me wondering whether I’ve actually witnessed a compiler doing deduplication or if I’m inferring how it might be done.  We sucked information out of code during Y2K fixing, under-utilizing a technique called “Design Recovery”.  Using that technique would make deduplication “easy” (involving just rote work).  I detail that idea here <https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-14-Towards+Deduplication>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681811012.388819",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hAk6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I think this is an example of inlining, wherein constant-folding is but a subset.  Anyway, you have me wondering whether I’ve actually witnessed a compiler doing deduplication or if I’m inferring how it might be done.  We sucked information out of code during Y2K fixing, under-utilizing a technique called “Design Recovery”.  Using that technique would make deduplication “easy” (involving just rote work).  I detail that idea here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-06-14-Towards+Deduplication"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1686786660.362359",
        "client_msg_id": "a9dbf801-f9ff-4fd2-8a44-b55f112fb90f",
        "text": "2 points:\n\n• Inlining feels like the opposite of constant folding and deduplication. Increasing rather than decreasing code size.\n• It's a lot easier to create a transformer for a codebase you control than to create a compiler for arbitrary codebases. The latter has to be conservative in a thousand places and the consequences compound.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681811012.388819",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9qaI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2 points:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Inlining feels like the opposite of constant folding and deduplication. Increasing rather than decreasing code size."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It's a lot easier to create a transformer for a codebase you control than to create a compiler for arbitrary codebases. The latter has to be conservative in a thousand places and the consequences compound."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    }
                ]
            }
        ]
    }
]