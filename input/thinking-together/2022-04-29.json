[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1651219485.135869",
        "client_msg_id": "e699e779-30d4-48b4-afa9-ae6e998f2d91",
        "text": "lobsters has this idea of invitation tree: <https:\/\/lobste.rs\/u>\n\nas Kartik says, the user that registers the automation is responsible for it and all the tree up to the root, people don't let other people affect their image in the community, if a bot misbehaves the bot register will be pressured to take action by people up his\/her tree",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651205577.852149",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/E3ag",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lobsters has this idea of invitation tree: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lobste.rs\/u"
                            },
                            {
                                "type": "text",
                                "text": "\n\nas Kartik says, the user that registers the automation is responsible for it and all the tree up to the root, people don't let other people affect their image in the community, if a bot misbehaves the bot register will be pressured to take action by people up his\/her tree"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03CEGR3HSL",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1651219735.025349",
        "client_msg_id": "8db48ba0-cb1e-49ec-aee8-d236178ca655",
        "text": "My problem with layout is that the default is messy and requires active work to make it \"tidy\", with white space the default\/least effort option is the \"tidy\" one.\n\nI say it because I built a box and arrows[1] tool and I saw how much time was spent rearranging the layout for no functional reason.\n\nSame with the dashboard designer, it was free form, people spent ages aligning stuff (there layout had a meaning at least)\n\n[1] <https:\/\/www.event-fabric.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9myRZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My problem with layout is that the default is messy and requires active work to make it \"tidy\", with white space the default\/least effort option is the \"tidy\" one.\n\nI say it because I built a box and arrows[1] tool and I saw how much time was spent rearranging the layout for no functional reason.\n\nSame with the dashboard designer, it was free form, people spent ages aligning stuff (there layout had a meaning at least)\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.event-fabric.com\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1651251838.802439",
        "client_msg_id": "77299a59-9a12-427c-8741-9434cf154682",
        "text": "I've been rereading <https:\/\/www.bloomberg.com\/graphics\/2015-paul-ford-what-is-code> during my latest bout of introspection. It annoyed me out of all proportion when I first read it (even though I could and still can appreciate the craft that went into it), and with the benefit of hindsight (and having joined this forum 3 years later) I think I understand why: it's unabashedly about the _present_ of software, and by nature that endeavor makes a virtue to newcomers out of how things work today.\n\nOn the other hand, I argued the opposite direction over at <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1645838782428059?thread_ts=1645811249.437739>. So it seems to matter how vehemently I feel about the thing being taught to newcomers, whether I consider it important or irrelevant frippery.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VybqA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been rereading "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.bloomberg.com\/graphics\/2015-paul-ford-what-is-code"
                            },
                            {
                                "type": "text",
                                "text": " during my latest bout of introspection. It annoyed me out of all proportion when I first read it (even though I could and still can appreciate the craft that went into it), and with the benefit of hindsight (and having joined this forum 3 years later) I think I understand why: it's unabashedly about the "
                            },
                            {
                                "type": "text",
                                "text": "present",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of software, and by nature that endeavor makes a virtue to newcomers out of how things work today.\n\nOn the other hand, I argued the opposite direction over at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1645838782428059?thread_ts=1645811249.437739"
                            },
                            {
                                "type": "text",
                                "text": ". So it seems to matter how vehemently I feel about the thing being taught to newcomers, whether I consider it important or irrelevant frippery."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651252676.607269",
        "client_msg_id": "aef4f19d-92ad-4eaa-ac34-07ee23346db0",
        "text": "I think the main advantage of 2D in programming is not the ability to move or orient things, but the ability to zoom, which is way under-utilized. If I call a library function, I should be able to zoom in on the visual element for the call, and \"inside it\" see the code for the function. Zoom could make all kinds of nested graphs easier to navigate. Vlojure does a version of this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lF9+w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the main advantage of 2D in programming is not the ability to move or orient things, but the ability to zoom, which is way under-utilized. If I call a library function, I should be able to zoom in on the visual element for the call, and \"inside it\" see the code for the function. Zoom could make all kinds of nested graphs easier to navigate. Vlojure does a version of this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651252897.238529",
        "client_msg_id": "506d9ca0-b8c2-40d2-92ab-3ac1af9d152b",
        "text": "I also think that semantically meaningless position and orientation can be helpful, if that fits the metaphor of the tool, and allows the user to transfer their instincts effectively. The left side of my desk is to do, the right side is done, not because of the semantics of desks, but because there isn't one, so I can invent one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oVV6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also think that semantically meaningless position and orientation can be helpful, if that fits the metaphor of the tool, and allows the user to transfer their instincts effectively. The left side of my desk is to do, the right side is done, not because of the semantics of desks, but because there isn't one, so I can invent one."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651253297.958449",
        "client_msg_id": "78be1130-2632-499a-9bc0-27891e02dcde",
        "text": "The challenge with orienting things in 2D space is real, though. In Blawx I'm actively trying to limit how much code would be all together in one place. But even still, I find myself having to shove things out of the way when they grow over each other, e.g. It remains awkward at times.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1650895419.727169",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d1l\/p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The challenge with orienting things in 2D space is real, though. In Blawx I'm actively trying to limit how much code would be all together in one place. But even still, I find myself having to shove things out of the way when they grow over each other, e.g. It remains awkward at times."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651254426.150879",
        "client_msg_id": "5ec0eab8-c78f-40cc-901d-57a7a15db63d",
        "text": "Parsers generators allow you to write code that creates trees (usually), from a string of characters. So a way of creating a sort of abstractly 2D thing from a 1D representation. Is there an equivalent tool for generating representations from symbols arranged in 2D? A node-and-arrow parser generator, for example? Something in the graph database world?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1651272612.981879",
        "reply_users": [
            "U02U0AS3J49",
            "UBN9AFS0N",
            "UGWUJUZHT",
            "U03DNFDFYDA"
        ],
        "replies": [
            {
                "user": "U02U0AS3J49",
                "ts": "1651256716.907359"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1651259463.493579"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1651264590.697439"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1651269541.591509"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1651270332.069189"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1651272082.880249"
            },
            {
                "user": "U03DNFDFYDA",
                "ts": "1651272178.838069"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1651272612.981879"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/fl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Parsers generators allow you to write code that creates trees (usually), from a string of characters. So a way of creating a sort of abstractly 2D thing from a 1D representation. Is there an equivalent tool for generating representations from symbols arranged in 2D? A node-and-arrow parser generator, for example? Something in the graph database world?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651256716.907359",
        "client_msg_id": "666dcab3-b01b-4b20-9412-b4e2eb8086ae",
        "text": "I think a good small example would be a tool that allowed you to define linear graphemes, which is ironically both above (\"we don't process 2D images\") and below (\"we already have characters\") the scope of parser generators. Imagine describing \"two parallel straight lines of the same length connected at an obtuse angle by a constant radius curved line\" for the uppercase U. Are there tools for that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a good small example would be a tool that allowed you to define linear graphemes, which is ironically both above (\"we don't process 2D images\") and below (\"we already have characters\") the scope of parser generators. Imagine describing \"two parallel straight lines of the same length connected at an obtuse angle by a constant radius curved line\" for the uppercase U. Are there tools for that?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651259463.493579",
        "client_msg_id": "b24f7736-3f08-4af6-87c5-9115aff03736",
        "text": "A large example would be something that detects and parses UML diagrams on a whiteboard. Which seems very promising.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hCQ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A large example would be something that detects and parses UML diagrams on a whiteboard. Which seems very promising."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1651263627.037159",
        "client_msg_id": "237f1934-2db2-4336-a2d5-f6ffb18b34bd",
        "text": "Thank you for the lead. I hadn't heard of lobsters.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651205577.852149",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kysp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the lead. I hadn't heard of lobsters."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1651264590.697439",
        "client_msg_id": "b83b39b0-e27c-4e84-8961-af4b1692e258",
        "text": "Not sure it's what you are looking for but the cypher query language is kind of \"ascii art graph pattern matching\"\n\n\n```MATCH (nicole:Actor {name: 'Nicole Kidman'})-[:ACTED_IN]-&gt;(movie:Movie)\nWHERE movie.year &lt; $yearParameter\nRETURN movie```\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y5mkM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure it's what you are looking for but the cypher query language is kind of \"ascii art graph pattern matching\"\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MATCH (nicole:Actor {name: 'Nicole Kidman'})-[:ACTED_IN]->(movie:Movie)\nWHERE movie.year < $yearParameter\nRETURN movie"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1651269541.591509",
        "client_msg_id": "96d4315f-bd32-409a-aa79-cea8bd81a804",
        "text": "- FYI - there are 2 kinds of parser generators\n1. parser generators based on language definitions (YACC, LR(k), etc.)\n2. parser generators based on DSLs for specifying parsers (PEG, Ohm-JS, etc.)\n- DaS (Diagrams as Syntax) If you are interested in experiments, I would be glad to share\n- I argue that graphics is not the problem, but ascribing meaning (semantics) to the diagrams is the problem, start small and build up, e.g.\n\t- what does a “box” compile to?\n\t- what do boxes-with-ports-and-arrows compile to?\n\t-  what do concentric boxes compile to?\n- “we already have characters”\n\t- we use characters for IDEs (aka programming languages) only because mid-1900s hardware made it easier to grok grids of non-overlapping, small bitmaps",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kn+Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- FYI - there are 2 kinds of parser generators\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "parser generators based on language definitions (YACC, LR(k), etc.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "parser generators based on DSLs for specifying parsers (PEG, Ohm-JS, etc.)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- DaS (Diagrams as Syntax) If you are interested in experiments, I would be glad to share\n- I argue that graphics is not the problem, but ascribing meaning (semantics) to the diagrams is the problem, start small and build up, e.g.\n\t- what does a “box” compile to?\n\t- what do boxes-with-ports-and-arrows compile to?\n\t-  what do concentric boxes compile to?\n- “we already have characters”\n\t- we use characters for IDEs (aka programming languages) only because mid-1900s hardware made it easier to grok grids of non-overlapping, small bitmaps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1651270332.069189",
        "client_msg_id": "5fea4165-4846-4dde-a507-a9cc6e118cc6",
        "text": "I'm not clear what the difference is between a \"language definition\" and an expression in a \"DSL for specifying parsers\". But what I'd love to see is an example of 1 or 2 where the elements being parsed are graphical... lines, points, colours, shapes. Graphics is not a problem, agreed. And you can always roll-your-own in terms of parsing from some unusual user input. It's just a data tarnsformation. I'm just curious if the idea of parsing from graphical input has ever been abstracted in the way that is has for text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7A4=P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not clear what the difference is between a \"language definition\" and an expression in a \"DSL for specifying parsers\". But what I'd love to see is an example of 1 or 2 where the elements being parsed are graphical... lines, points, colours, shapes. Graphics is not a problem, agreed. And you can always roll-your-own in terms of parsing from some unusual user input. It's just a data tarnsformation. I'm just curious if the idea of parsing from graphical input has ever been abstracted in the way that is has for text."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1651272082.880249",
        "client_msg_id": "ecf82a98-376b-4d78-98fa-3d105aca4f76",
        "text": "like OCR but for symbols that aren’t necessarily characters :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jcdY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like OCR but for symbols that aren’t necessarily characters "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1651272178.838069",
        "client_msg_id": "a0d6f216-4214-4819-b839-d216d411a4bf",
        "text": "I’ve drawn thousands of whiteboards over the years… transcribing them into diagram drawing software is usually an opportunity to revisit, clarify and edit. :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve drawn thousands of whiteboards over the years… transcribing them into diagram drawing software is usually an opportunity to revisit, clarify and edit. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1651272612.981879",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1651272733.000000"
        },
        "client_msg_id": "8eee441f-9843-49d7-b83d-598159f2a270",
        "text": "collecting dust on my shelf\n- <https:\/\/link.springer.com\/book\/10.1007\/978-1-4612-1676-6>\n- (tc;dr)\n- all you really need is SVG + contains () + intersects () + connectedTo ()\n- see sections “Expressive Power” and “Ambiguity Detection” in <https:\/\/en.wikipedia.org\/wiki\/Parsing_expression_grammar>\n\t- PEG defines a *parser* in a top-down manner (TDPL), e.g. “if this matches, try to match this next”\n\t- LR(k) and LL(k) define *languages* in a bottom-up manner, e.g. “if this looks like a number, then bubble it upwards as a number” (regardless of the context) ; this is what is taught as “language  theory”, and is commonly understood to form the basis of parser generators\n\t- TDPL is order-dependent, Lx(k) is not order-dependent (but more restricted)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "attachments": [
            {
                "from_url": "https:\/\/link.springer.com\/book\/10.1007\/978-1-4612-1676-6",
                "service_icon": "https:\/\/link.springer.com\/springerlink-static\/1158445429\/images\/favicon\/app-icon-iphone@3x.png",
                "id": 1,
                "original_url": "https:\/\/link.springer.com\/book\/10.1007\/978-1-4612-1676-6",
                "fallback": "Visual Language Theory | SpringerLink",
                "text": "Kim Marriott Bernd Meyer Communication is one of the hallmarks of humans. When we think of hu man communication, most people first think of spoken and written lan guages. These are similar in that sym",
                "title": "Visual Language Theory | SpringerLink",
                "title_link": "https:\/\/link.springer.com\/book\/10.1007\/978-1-4612-1676-6",
                "service_name": "link.springer.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aKRtY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "collecting dust on my shelf\n- "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/book\/10.1007\/978-1-4612-1676-6"
                            },
                            {
                                "type": "text",
                                "text": "\n- (tc;dr)\n- all you really need is SVG + contains () + intersects () + connectedTo ()\n- see sections “Expressive Power” and “Ambiguity Detection” in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Parsing_expression_grammar"
                            },
                            {
                                "type": "text",
                                "text": "\n\t- PEG defines a "
                            },
                            {
                                "type": "text",
                                "text": "parser",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a top-down manner (TDPL), e.g. “if this matches, try to match this next”\n\t- LR(k) and LL(k) define "
                            },
                            {
                                "type": "text",
                                "text": "languages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a bottom-up manner, e.g. “if this looks like a number, then bubble it upwards as a number” (regardless of the context) ; this is what is taught as “language  theory”, and is commonly understood to form the basis of parser generators\n\t- TDPL is order-dependent, Lx(k) is not order-dependent (but more restricted)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    }
]