[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1733158319.337529",
        "client_msg_id": "d90ce53a-8834-45e2-a27e-57ebe5ecc269",
        "text": "neural architectures have random dropout in their training which makes them suitable to the probabilistic computational paradigm quite well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732785740.538069",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CxV+\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "neural architectures have random dropout in their training which makes them suitable to the probabilistic computational paradigm quite well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1733189243.194309",
        "client_msg_id": "fe50a3c3-94b9-4fb6-86f6-5da2823b79c4",
        "text": "&gt; Spanner\nAs a counterpoint, the cost of global strict serializability in spanner can be so high that you need caches and other denormalized stores for acceptable performance. Now, adding even one cache immediately defeats any consistency properties because (spanner + cache) does not have the same consistency as spanner alone. Also, you cant run analytics on spanner either so you need another copy in an analytics database. All these extensions introduce complexity into the system and need hand-written code to deal with consistency corner cases.\n\nIn fact I think the dbs that \"scale\" are a great example of how strong determinism doesn't scale. What I think would work better is give up strict serializability across the system, but _track_ the various inconsistencies. Maybe we can have a managed eventually consistent system (rather than an ad-hoc one). One way of doing this might be to allow different versions of the same object to exist in different parts of the system, but use version ids or logical timestamps to track the history and relation. Allow divergence where needed but use local rules to resolve them. This requires some core principles, like how to use logical timestamps across the entire system, but does not require the whole system itself to be serializable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732785740.538069",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DPPhU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Spanner"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAs a counterpoint, the cost of global strict serializability in spanner can be so high that you need caches and other denormalized stores for acceptable performance. Now, adding even one cache immediately defeats any consistency properties because (spanner + cache) does not have the same consistency as spanner alone. Also, you cant run analytics on spanner either so you need another copy in an analytics database. All these extensions introduce complexity into the system and need hand-written code to deal with consistency corner cases.\n\nIn fact I think the dbs that \"scale\" are a great example of how strong determinism doesn't scale. What I think would work better is give up strict serializability across the system, but "
                            },
                            {
                                "type": "text",
                                "text": "track",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the various inconsistencies. Maybe we can have a managed"
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "eventually consistent system (rather than an ad-hoc one). One way of doing this might be to allow different versions of the same object to exist in different parts of the system, but use version ids or logical timestamps to track the history and relation. Allow divergence where needed but use local rules to resolve them. This requires some core principles, like how to use logical timestamps across the entire system, but does not require the whole system itself to be serializable."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]