[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1704810140.277229",
        "client_msg_id": "d249ff4a-5d14-4668-bf44-ec4a0735568e",
        "text": "Thanks to <@UJBAJNFLK>'s stimulating comments, I expanded my thoughts on the use of the word 'practice' <https:\/\/guitarvydas.github.io\/2024\/01\/05\/Fumbling-Around-and-Applied-Science.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "from_url": "https:\/\/guitarvydas.github.io\/2024\/01\/05\/Fumbling-Around-and-Applied-Science.html",
                "ts": 1704412800,
                "id": 1,
                "original_url": "https:\/\/guitarvydas.github.io\/2024\/01\/05\/Fumbling-Around-and-Applied-Science.html",
                "fallback": "Computing Simplicity: Fumbling around and applied science",
                "text": "I see practice as two things: “fumbling around” Applied Science - also known as Engineering.",
                "title": "Fumbling around and applied science",
                "title_link": "https:\/\/guitarvydas.github.io\/2024\/01\/05\/Fumbling-Around-and-Applied-Science.html",
                "service_name": "Computing Simplicity"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R1mRj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks to "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "'s stimulating comments, I expanded my thoughts on the use of the word 'practice' "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2024\/01\/05\/Fumbling-Around-and-Applied-Science.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1704814255.940839",
        "client_msg_id": "680fba27-b12a-4d5e-ab67-f01438426a4f",
        "text": "&gt; What pairs with “fumbling around”? What inspires new avenues for “fumbling around”? What is a better phrase\/word for “fumbling around”?\n\"Fumbling around” to me sounds like opening up to our human capacity for insight through (serious) play. It has a connotation of unprofessionalism as you would expect in our results-oriented society. If we like it or not, that’s where most (all?) really good ideas come from. The kind you later think are totally obvious, and where it’s hard to see how we ever did it any other way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RvkYo",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What pairs with “fumbling around”? What inspires new avenues for “fumbling around”? What is a better phrase\/word for “fumbling around”?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\"Fumbling around” to me sounds like opening up to our human capacity for insight through (serious) play. It has a connotation of unprofessionalism as you would expect in our results-oriented society. If we like it or not, that’s where most (all?) really good ideas come from. The kind you later think are totally obvious, and where it’s hard to see how we ever did it any other way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1704815637.295189",
        "client_msg_id": "6ffc5a65-6c6b-4b98-bdb9-e273cb23d325",
        "text": "Fumbling around is a small-scale rapid-feedback cycle of learning (yin) and doing (yang). Science and engineering is the large-scale and slow version. Good ideas do indeed often come from fumbling around, because rapid feedback matters so much. But many of those ideas require refinement and combination with other ideas, both of which happen in the slow cycle. Reminder: we wouldn't be discussing anything here without lots of collective effort over many decades that went into semiconductors, electronic devices, their mass production, setting up network infrastructure, etc. You don't get any of this from just fumbling around.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6ATTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fumbling around is a small-scale rapid-feedback cycle of learning (yin) and doing (yang). Science and engineering is the large-scale and slow version. Good ideas do indeed often come from fumbling around, because rapid feedback matters so much. But many of those ideas require refinement and combination with other ideas, both of which happen in the slow cycle. Reminder: we wouldn't be discussing anything here without lots of collective effort over many decades that went into semiconductors, electronic devices, their mass production, setting up network infrastructure, etc. You don't get any of this from just fumbling around."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1704816107.519139",
        "client_msg_id": "db3967e3-0cac-402b-b1d2-0355a90a3e65",
        "text": "<@UGWUJUZHT>\n&gt; We believe, for no good reason, that all practical programming languages must be based on CPUs and assembler:\nDo we (i.e. some unspecified majority) really profoundly believe this? Or is it a necessary working hypothesis made by software people who have to make do with off-the-shelf hardware because, well, life is too short?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8B+vz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We believe, for no good reason, that all practical programming languages must be based on CPUs and assembler:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDo we (i.e. some unspecified majority) really profoundly believe this? Or is it a necessary working hypothesis made by software people who have to make do with off-the-shelf hardware because, well, life is too short?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03DNFDFYDA",
        "type": "message",
        "ts": "1704819243.374149",
        "client_msg_id": "619f7f18-22d0-41d2-8241-a48102a4864e",
        "text": "I think it's important to distinguish between computers-as-they-exist (i.e. mostly Von Neumann machines, internally incredibly complex but presenting a wildly oversimplified architectural model to the programmer\/OS...) from PL semantics, which are promises made in good faith that are kept surprisingly frequently (modulo UB)... Because the abstraction is not only necessary to our productivity, but also, like all abstractions, provides a point of agreement where one party can say \"I played by the rules and you didn't\" -- this one leaks, like all abstractions, but it's amazing how often it's valid to pretend the machine is simple",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f58a6508f111",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-29\/3447576657367_f58a6508f11105e0d0be_72.png",
            "first_name": "Alex",
            "real_name": "Alex Cruise",
            "display_name": "Alex Cruise",
            "team": "T5TCAFTA9",
            "name": "alex867",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nDwsn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's important to distinguish between computers-as-they-exist (i.e. mostly Von Neumann machines, internally incredibly complex but presenting a wildly oversimplified architectural model to the programmer\/OS...) from PL semantics, which are promises made in good faith that are kept surprisingly frequently (modulo UB)... Because the abstraction is not only necessary to our productivity, but also, like all abstractions, provides a point of agreement where one party can say \"I played by the rules and you didn't\" -- this one leaks, like all abstractions, but it's amazing how often it's valid to pretend the machine is simple"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1704823211.587789",
        "client_msg_id": "324cb372-1ad7-42bf-9d44-914ece584bc4",
        "text": "The scaling we have achieved through technology rests on a deal to trade understanding of _how_ it works for abstractions that somewhat reliably do _what_ we want them to do. Once you understand _what_ the interface does, then you can use it, even if you don’t understand _how_ it achieves that. This is what allows us to have few specialists that make sure things work reliably enough to an interface spec, and lots of generalists (or less specialized specialists) who can ignore the lower-level workings and use their freed up mental capacity to build on top of those interfaces instead.\n\nThere are all kinds of problems with that approach that we are incentivized to ignore:\n• It creates dependencies on those specialists that know _how_, which often translates into commercial relationships of some kind.\n• As lower levels in the stack mature and their interfaces work reliably enough, we are gradually concentrating expertise across fewer specialists. \n• Simultaneously, we increase dependencies on those interfaces, because more higher-level components rely on them.\n• Innovation moves up the stack, because that’s where almost everybody is “fumbling around” now; lower levels stagnate and become harder and more expensive to change.\nAnd then we end up stuck with artifacts from last century and can’t seem to get rid of them, because we can’t just reinvent and replace them. They’re carrying too much weight now. And so we keep using CPUs and assemblers and text editors.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6NcAc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The scaling we have achieved through technology rests on a deal to trade understanding of "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it works for abstractions that somewhat reliably do "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we want them to do. Once you understand "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the interface does, then you can use it, even if you don’t understand "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it achieves that. This is what allows us to have few specialists that make sure things work reliably enough to an interface spec, and lots of generalists (or less specialized specialists) who can ignore the lower-level workings and use their freed up mental capacity to build on top of those interfaces instead.\n\nThere are all kinds of problems with that approach that we are incentivized to ignore:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It creates dependencies on those specialists that know "
                                    },
                                    {
                                        "type": "text",
                                        "text": "how",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", which often translates into commercial relationships of some kind."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As lower levels in the stack mature and their interfaces work reliably enough, we are gradually concentrating expertise across fewer specialists. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Simultaneously, we increase dependencies on those interfaces, because more higher-level components rely on them."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Innovation moves up the stack, because that’s where almost everybody is “fumbling around” now; lower levels stagnate and become harder and more expensive to change."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnd then we end up stuck with artifacts from last century and can’t seem to get rid of them, because we can’t just reinvent and replace them. They’re carrying too much weight now. And so we keep using CPUs and assemblers and text editors."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U067RCH8NB0",
        "type": "message",
        "ts": "1704827175.922509",
        "client_msg_id": "de5062c9-24dd-435f-a2ed-a7b03fa2dc12",
        "text": "Interesting. Of that bullet list, the only one that actually seems like a problem to me is the last part of the last one:\n&gt; lower levels stagnate and become harder and more expensive to change.\nIt’s not at all clear to me why you think the others are _problems_. :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0f75aaf019c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0f75aaf019cc59e83fd3321b64a36508.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Chris",
            "real_name": "Chris Krycho",
            "display_name": "Chris Krycho",
            "team": "T5TCAFTA9",
            "name": "hello870",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1703941495.921419",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dfr2o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. Of that bullet list, the only one that actually seems like a problem to me is the last part of the last one:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lower levels stagnate and become harder and more expensive to change."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s not at all clear to me why you think the others are "
                            },
                            {
                                "type": "text",
                                "text": "problems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]