[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1599033869.086500",
        "client_msg_id": "815df3a9-68ee-45f4-a523-8d59a4f0ffb9",
        "text": "In addition to the very good Lakoff recommendation above, I'd add the work that <http:\/\/worrydream.com\/refs\/Hofstadter%20-%20Analogy%20as%20the%20Core%20of%20Cognition.pdf|Hofstadter> and <https:\/\/melaniemitchell.me|Melanie Mitchell> have done around analogies as the basic unit of understanding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598907017.049900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UcSX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In addition to the very good Lakoff recommendation above, I'd add the work that "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/refs\/Hofstadter%20-%20Analogy%20as%20the%20Core%20of%20Cognition.pdf",
                                "text": "Hofstadter"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/melaniemitchell.me",
                                "text": "Melanie Mitchell"
                            },
                            {
                                "type": "text",
                                "text": " have done around analogies as the basic unit of understanding."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "In terms of why trees are ubiquitous and graphs are not, I think there are two things at work here:\n1. We have a much easier term visually parsing, internalizing and imagining even very complex trees than heavily linked cyclic graphs. There's an entire sub-discipline of data visualization trying to help people understand the latter kind of data. This is one of the deep challenges of node-and-arrow visual programming systems.\n2. Although our internal representations are fuzzy and graph-y, the mechanisms we have to communicate those representations in speech and writing are linear and tree shaped (sequences of words representing recursive grammatical structures). This makes it very hard to express these kinds of structures using syntax, thus programming languages tied to textual representations are at a huge disadvantage when encoding graphs as literals. This is one of the deepest powers of node-and-arrow programming systems.\n\/cc <@UC2A2ARPT>",
        "files": [
            {
                "id": "F019H6BNAVD",
                "mode": "tombstone"
            },
            {
                "id": "F019URXKY5B",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Kud",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In terms of why trees are ubiquitous and graphs are not, I think there are two things at work here:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We have a much easier term visually parsing, internalizing and imagining even very complex trees than heavily linked cyclic graphs. There's an entire sub-discipline of data visualization trying to help people understand the latter kind of data. This is one of the deep challenges of node-and-arrow visual programming systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Although our internal representations are fuzzy and graph-y, the mechanisms we have to communicate those representations in speech and writing are linear and tree shaped (sequences of words representing recursive grammatical structures). This makes it very hard to express these kinds of structures using syntax, thus programming languages tied to textual representations are at a huge disadvantage when encoding graphs as literals. This is one of the deepest powers of node-and-arrow programming systems."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\/cc "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1599034947.086700",
        "thread_ts": "1598907017.049900",
        "parent_user_id": "UJNJQD2AC",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UJNJQD2AC",
                    "U8A5MS6R1",
                    "UAHHWT22U",
                    "US370TRJA"
                ],
                "count": 5
            },
            {
                "name": "+1",
                "users": [
                    "U01A0KANUUU",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1599069709.087700",
        "client_msg_id": "cdbe47e0-6704-42bb-ad48-2d25133f1569",
        "text": "I don't know anything in this vein, but as a musician and lover of games like Ocarina of Time and DDR\/Guitar Hero\/Before the Echo (nee Sequence), I've sometimes thought about it. I think music-as-programming has more of a home in video games than general programming, because the great difficulty seem to me to be the invention (and comprehension!) of grammars that map musical feature to semantic behavior.  The only method I've seen is essentially a complex keyboard shortcut: a specific sequence maps to a specific function, like the song fragments in Ocarina of Time or the spells in Before the Echo.\n\nIt's easy to imagine something like musical brainf*ck, or maybe a slightly more sophisticated macro system where the user develops a mapping of musical structure to program structure (e.g., this chord represents this variable; this melodic fragment following this chord represents this method call), but that's just regular programming with extra steps. Could be run to write a program that you can then perform, though, or to generate mappings aleatorically and use small programs as sight-reading material--or if you really hate yourself, write a JIT compiler that makes random mistakes when you do, so you have to perform the program perfectly to get it to compile correctly. These are all esoteric use cases, though.\n\nBut consider the limited expressivity of a musical language, like the hmmmmm system described in the link. This is why I think music + video games is a good combination. Imagine the grammar is provided and structures map to interesting behaviors--running, jumping, dashing, guarding, rolling, targeting enemies, attacking, casting spells--a musical interface could be a fun way of \"programming\" the world, or at least of improvisationally triggering simple scripts written in a user-friendly language. I like to imagine Hollow Knight-esque boss fights where the \"score\" of the fight is a set of musical+visual telegraphs that tell you what the boss is about to do, and your job as the player is to respond with an appropriate musical phrase (dodge\/guard\/attack). The record of the fight becomes a piece of music written as a structured improvisation between a computer and a human within the rules provided by the game developer\/composer.\n\nBut these are just pipe dreams. Like I said, I haven't seen music in programming systems, and for the difficulties of grammar, I don't think we're likely to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599008459.078600",
        "parent_user_id": "U01A0KANUUU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oYo1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know anything in this vein, but as a musician and lover of games like Ocarina of Time and DDR\/Guitar Hero\/Before the Echo (nee Sequence), I've sometimes thought about it. I think music-as-programming has more of a home in video games than general programming, because the great difficulty seem to me to be the invention (and comprehension!) of grammars that map musical feature to semantic behavior.  The only method I've seen is essentially a complex keyboard shortcut: a specific sequence maps to a specific function, like the song fragments in Ocarina of Time or the spells in Before the Echo.\n\nIt's easy to imagine something like musical brainf*ck, or maybe a slightly more sophisticated macro system where the user develops a mapping of musical structure to program structure (e.g., this chord represents this variable; this melodic fragment following this chord represents this method call), but that's just regular programming with extra steps. Could be run to write a program that you can then perform, though, or to generate mappings aleatorically and use small programs as sight-reading material--or if you really hate yourself, write a JIT compiler that makes random mistakes when you do, so you have to perform the program perfectly to get it to compile correctly. These are all esoteric use cases, though.\n\nBut consider the limited expressivity of a musical language, like the hmmmmm system described in the link. This is why I think music + video games is a good combination. Imagine the grammar is provided and structures map to interesting behaviors--running, jumping, dashing, guarding, rolling, targeting enemies, attacking, casting spells--a musical interface could be a fun way of \"programming\" the world, or at least of improvisationally triggering simple scripts written in a user-friendly language. I like to imagine Hollow Knight-esque boss fights where the \"score\" of the fight is a set of musical+visual telegraphs that tell you what the boss is about to do, and your job as the player is to respond with an appropriate musical phrase (dodge\/guard\/attack). The record of the fight becomes a piece of music written as a structured improvisation between a computer and a human within the rules provided by the game developer\/composer.\n\nBut these are just pipe dreams. Like I said, I haven't seen music in programming systems, and for the difficulties of grammar, I don't think we're likely to."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01A0KANUUU"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE0H4170F",
        "type": "message",
        "ts": "1599070210.092100",
        "client_msg_id": "d8a9c603-77ce-4210-950d-112638e9a634",
        "text": "Does anyone have tools \/ processes to recommend for rapidly iterating the design of a language? I’m looking for strategies to produce a document that captures the design, evolution, and potential variations of a language interface separate from implementation concerns. Good examples of this would also be very much appreciated!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2cfca823894",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/72cfca823894034e7bdbc31623c007d3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Charlie Roberts",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "charlie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "reply_count": 13,
        "reply_users_count": 8,
        "latest_reply": "1599511554.134100",
        "reply_users": [
            "U01A0KANUUU",
            "U016VUZGUUQ",
            "UE0H4170F",
            "UCGAK10LS",
            "U01A1C2K8MP",
            "U01286RNB70",
            "UCUSW7WVD",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "U01A0KANUUU",
                "ts": "1599072310.092200"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1599097905.093800"
            },
            {
                "user": "UE0H4170F",
                "ts": "1599112150.094600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1599117516.094900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1599117777.095100"
            },
            {
                "user": "U01A1C2K8MP",
                "ts": "1599172042.103300"
            },
            {
                "user": "U01286RNB70",
                "ts": "1599494618.126700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599495354.127000"
            },
            {
                "user": "U01286RNB70",
                "ts": "1599495700.127400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599498830.127900"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1599510512.130200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599510952.130400"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1599511554.134100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VQqu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have tools \/ processes to recommend for rapidly iterating the design of a language? I’m looking for strategies to produce a document that captures the design, evolution, and potential variations of a language interface separate from implementation concerns. Good examples of this would also be very much appreciated!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01A0KANUUU",
        "type": "message",
        "ts": "1599072310.092200",
        "client_msg_id": "5354ebfc-fdfe-46a0-9192-f4c1dc42578a",
        "text": "There is Gramada: <https:\/\/github.com\/hpi-swa\/Gramada>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gca7b3cd16bf",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ca7b3cd16bf67a61acaf224e2219929c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Eric Gade",
            "display_name": "Eric Gade",
            "team": "T5TCAFTA9",
            "name": "eric.gade",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hpi-swa\/Gramada",
                "title_link": "https:\/\/github.com\/hpi-swa\/Gramada",
                "text": "Gramada is an interactive development environment for programming languages defined in Ohm. It is based on Vivide and implemented in Squeak\/Smalltalk. - hpi-swa\/Gramada",
                "fallback": "GitHub: hpi-swa\/Gramada",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/8598281?s=400&v=4",
                "from_url": "https:\/\/github.com\/hpi-swa\/Gramada",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/hpi-swa\/Gramada"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Mwy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is Gramada: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/hpi-swa\/Gramada"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0H4170F",
                    "U01A1C2K8MP",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1599073673.092500",
        "client_msg_id": "70deec6b-271a-4586-846c-255bd1676620",
        "text": "<@U018LAH5QCT> Have you played patapon?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599008459.078600",
        "parent_user_id": "U01A0KANUUU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KYNkS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U018LAH5QCT"
                            },
                            {
                                "type": "text",
                                "text": " Have you played patapon?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1599073971.092700",
        "client_msg_id": "126cb5b5-fd05-4eba-9896-4482ed33186b",
        "text": "<@UT60XSVCN>. No, I haven't heard of it before now. It look pretty cool, and very similar to what I've imagined, if a little lacking in musical complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599008459.078600",
        "parent_user_id": "U01A0KANUUU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X0d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UT60XSVCN"
                            },
                            {
                                "type": "text",
                                "text": ". No, I haven't heard of it before now. It look pretty cool, and very similar to what I've imagined, if a little lacking in musical complexity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1599087126.093300",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1599087148.000000"
        },
        "client_msg_id": "be581f97-c441-4bd2-b37e-a8b72efa8fbb",
        "text": "<@U013ZLJARC7> \n\nThat's brilliant.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598907017.049900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XhM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " \n\nThat's brilliant."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1599097905.093800",
        "client_msg_id": "c5187176-012f-4f75-8d79-19e66fbf5a4f",
        "text": "I haven't used it, but PLT-Redex is a racket lang for roughly the same task. There's a series of lectures on how to use it on YouTube from (IIRC) the Oregon programming languages summer school. For anyone who has used it, I'm also very interested in your experience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kJJg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't used it, but PLT-Redex is a racket lang for roughly the same task. There's a series of lectures on how to use it on YouTube from (IIRC) the Oregon programming languages summer school. For anyone who has used it, I'm also very interested in your experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01A0KANUUU",
                    "UE0H4170F",
                    "U01A1C2K8MP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UE0H4170F",
        "type": "message",
        "ts": "1599112150.094600",
        "client_msg_id": "90d588c8-925a-41fb-9d45-fba956411021",
        "text": "These are both great systems that I hadn’t heard of, thanks! But I’m thinking of a high-level document, that uses purely speculative code examples (no implementation) to explore language design before diving into defining grammars or informal compiler design. To ask in a different way, if you asked a relatively novice programmer to create example programs informing the design of a new language, what would that document look like? What are effective language “sketches” and how do you show iteration and variation? I tend to just dive in and start implementing after writing down a few small code snippets, but I’m hoping that people here might have experience with other ways to approach design before beginning implementation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2cfca823894",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/72cfca823894034e7bdbc31623c007d3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Charlie Roberts",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "charlie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kvg64",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are both great systems that I hadn’t heard of, thanks! But I’m thinking of a high-level document, that uses purely speculative code examples (no implementation) to explore language design before diving into defining grammars or informal compiler design. To ask in a different way, if you asked a relatively novice programmer to create example programs informing the design of a new language, what would that document look like? What are effective language “sketches” and how do you show iteration and variation? I tend to just dive in and start implementing after writing down a few small code snippets, but I’m hoping that people here might have experience with other ways to approach design before beginning implementation."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]