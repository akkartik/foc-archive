[
    {
        "user": "U013BB9KZV1",
        "type": "message",
        "ts": "1605865961.256700",
        "client_msg_id": "9e0fb02b-6c87-4959-92e4-802a0dba98a8",
        "text": "I like an idea of treating code as data. Stared your project on github.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf9e84700672",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f9e84700672b282a3a132b339a76bd68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anton Volkov",
            "display_name": "Anton Volkov",
            "team": "T5TCAFTA9",
            "name": "choixer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=uix",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like an idea of treating code as data. Stared your project on github."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1605882877.256900",
        "client_msg_id": "582978ff-34ba-4f64-811d-cc8340fd5064",
        "text": "I realize, suddenly, that a dynamic variable is sort of the opposite of an exception.  There are probably a few fruitful things to learn from this analogy.\n\nAs for downsides, the main one that comes to mind are those few languages in which all variables have dynamic scope, which of course easily leads to unintentional capture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xd1V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I realize, suddenly, that a dynamic variable is sort of the opposite of an exception.  There are probably a few fruitful things to learn from this analogy.\n\nAs for downsides, the main one that comes to mind are those few languages in which all variables have dynamic scope, which of course easily leads to unintentional capture."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1605889324.257200",
        "client_msg_id": "889b106c-1cb0-416f-99f7-a84826d9d934",
        "text": "Another downside is that dynamic scoping plays badly with lazy evaluation.\n\nI've hit a bug with clojure when lazy chunks were trying to evaluate much later and from another place, so they saw the version of the variable other than one that was active when lazy chunks were created.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Wtw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another downside is that dynamic scoping plays badly with lazy evaluation.\n\nI've hit a bug with clojure when lazy chunks were trying to evaluate much later and from another place, so they saw the version of the variable other than one that was active when lazy chunks were created."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1605891697.257600",
        "client_msg_id": "22b5f8f5-ed19-4bb8-add0-e2c7576d06a1",
        "text": "I like the idea of EAV data as a building block for programming languages!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YfX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the idea of EAV data as a building block for programming languages!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1605893498.257800",
        "client_msg_id": "9a6aee70-2bf4-4264-a308-aa49c1c2bc06",
        "text": "You might have noticed that my model is IEAV. Each EAV tuple has a unique id, so tuples are addressable, too. You can assign attributes and do anything you do with normal entities.\n\nI use that to establish ordering of items, and I have a couple of other ideas as well. For example, you can represent diffs in IEAV by assigning added\/removed attribute to tuples.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OUXeI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might have noticed that my model is IEAV. Each EAV tuple has a unique id, so tuples are addressable, too. You can assign attributes and do anything you do with normal entities.\n\nI use that to establish ordering of items, and I have a couple of other ideas as well. For example, you can represent diffs in IEAV by assigning added\/removed attribute to tuples."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1605893853.258000",
        "client_msg_id": "2ff48095-db28-4e79-809a-49d7efd4c876",
        "text": "<@UA14TGLTC> you might be interested in my blog post about name resolution: <https:\/\/willcrichton.net\/notes\/specificity-programming-languages\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "attachments": [
            {
                "title": "              \"Do What I Mean\": Name Resolution in Programming Languages | Will Crichton            ",
                "title_link": "https:\/\/willcrichton.net\/notes\/specificity-programming-languages\/",
                "text": "Resolving names is a hard problem that permeates many aspects of programming like variable scoping, structured control flow, and method resolution. I show how a few core ideas underlie seemingly disparate parts of programming language design.",
                "fallback": "              \"Do What I Mean\": Name Resolution in Programming Languages | Will Crichton            ",
                "from_url": "https:\/\/willcrichton.net\/notes\/specificity-programming-languages\/",
                "service_name": "willcrichton.net",
                "id": 1,
                "original_url": "https:\/\/willcrichton.net\/notes\/specificity-programming-languages\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " you might be interested in my blog post about name resolution: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/willcrichton.net\/notes\/specificity-programming-languages\/"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]