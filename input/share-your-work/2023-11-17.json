[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1700234317.498879",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1700234427.000000"
        },
        "client_msg_id": "5d04154d-d525-46f7-857d-7c5188f51b07",
        "text": "<@U05PESXCC2E> <@UCUSW7WVD>  - more thoughts on Solid and Soup.\n\nIt's true that a decentralised database with standard data types - something like Solid\/Soup - fixes the issue with apps that they often store stuff in proprietary formats and\/or on their hidden databases. Which is a huge win for freeing data.\n\nSo imagine a collection of to-dos and a collection of events. And then you have your to-do app and your calendar app, because even though our data is \"free\", it's still not accessible except through an app.\n\nBut now you're juggling apps again, with their idiosyncracies and tendency to want to be THE app for each data type.\n\nBut each app has access now to the other's data. So the calendar can reference to-dos and the to-do list can reference events. Indeed, Wikipedia tells me that in Soup: the \"calendar could refer to names in the address book; a note in the notepad could be converted to an appointment\".\n\nSo we've got an odd situation, as you don't need two apps, really. Why not just make the calendar better and better at to-do lists, and notes? Now you get cross-type UX without app-flipping and having to re-learn each app.\n\nThis can be extended across the full range of types that Tim BL has in his Pods, or Apple had in their Soups. One app can be used for all data types, giving a cross-type consistent UX experience, where building up data from mashing up different types is core to the experience and designed to be as smooth as possible.\n\nIndeed, if you've only got one app, why not just call it the OS? Which brings you to the Itemized OS idea of Obenauer, and my own OS with no apps.\n\nSo Newton's OS could have just skipped the apps and done it this way. And Obenauer could look at building his OS on top of Solid!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ccpTh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05PESXCC2E"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "  - more thoughts on Solid and Soup.\n\nIt's true that a decentralised database with standard data types - something like Solid\/Soup - fixes the issue with apps that they often store stuff in proprietary formats and\/or on their hidden databases. Which is a huge win for freeing data.\n\nSo imagine a collection of to-dos and a collection of events. And then you have your to-do app and your calendar app, because even though our data is \"free\", it's still not accessible except through an app.\n\nBut now you're juggling apps again, with their idiosyncracies and tendency to want to be THE app for each data type.\n\nBut each app has access now to the other's data. So the calendar can reference to-dos and the to-do list can reference events. Indeed, Wikipedia tells me that in Soup: the \"calendar could refer to names in the address book; a note in the notepad could be converted to an appointment\".\n\nSo we've got an odd situation, as you don't need two apps, really. Why not just make the calendar better and better at to-do lists, and notes? Now you get cross-type UX without app-flipping and having to re-learn each app.\n\nThis can be extended across the full range of types that Tim BL has in his Pods, or Apple had in their Soups. One app can be used for all data types, giving a cross-type consistent UX experience, where building up data from mashing up different types is core to the experience and designed to be as smooth as possible.\n\nIndeed, if you've only got one app, why not just call it the OS? Which brings you to the Itemized OS idea of Obenauer, and my own OS with no apps.\n\nSo Newton's OS could have just skipped the apps and done it this way. And Obenauer could look at building his OS on top of Solid!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U018MHFH4HF"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1700235736.925989",
        "client_msg_id": "02f14f21-793a-4272-8573-a2f412a8c21e",
        "text": "I like it. Put it on your blog!\n\nTo be clear, I understand this angle is not the entirety of what Onex\/object.network is about. It's just the side facing the camera in your post. You're approaching the conversation from an interesting perspective.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H28lh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like it. Put it on your blog!\n\nTo be clear, I understand this angle is not the entirety of what Onex\/object.network is about. It's just the side facing the camera in your post. You're approaching the conversation from an interesting perspective."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1700238405.268729",
        "client_msg_id": "89f991e3-0d06-4b2f-8275-42983a3e8d9f",
        "text": "Thanks! :hugging_face:\n\nYes this is just a part of the whole, but it all hangs nicely together. Either look out for Part 2 or the existing articles do cover most of it.\n\nThe next step after the above is where I move what was the apps' internal logic - the bit where you need an app to \"animate\" each type of the zombie inert data in the database - into the data objects themselves, so that they become \"internally animated\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JeN1W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! "
                            },
                            {
                                "type": "emoji",
                                "name": "hugging_face",
                                "unicode": "1f917"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYes this is just a part of the whole, but it all hangs nicely together. Either look out for Part 2 or the existing articles do cover most of it.\n\nThe next step after the above is where I move what was the apps' internal logic - the bit where you need an app to \"animate\" each type of the zombie inert data in the database - into the data objects themselves, so that they become \"internally animated\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1700239699.884299",
        "client_msg_id": "81f0367d-552e-4b3f-a038-4763002bfa21",
        "text": "In the Solid model, you'd have Pods running this internal logic so things online can be alive and interact over the net without an application running on a browser, etc., to activate them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QEgAT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the Solid model, you'd have Pods running this internal logic so things online can be alive and interact over the net without an application running on a browser, etc., to activate them."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1700265850.548419",
        "edited": {
            "user": "U05PESXCC2E",
            "ts": "1700266013.000000"
        },
        "client_msg_id": "d608daab-35c4-49aa-becd-4a728df2fbeb",
        "text": "\"Why not just make the calendar better and better at to-do lists, and notes\" - I don't understand this part. You want a monolithic application that tries to be everything, badly? The todos and calendar UIs don't need to be apps, they can be components that apps use. Somewhere to store the data, and some UI to manipulate the data. Apps in this sense are just there to glue components together to make a larger, more specific UI. OpenDoc comes to mind. <https:\/\/en.wikipedia.org\/wiki\/OpenDoc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oFjzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Why not just make the calendar better and better at to-do lists, and notes\" - I don't understand this part. You want a monolithic application that tries to be everything, badly? The todos and calendar UIs don't need to be apps, they can be components that apps use. Somewhere to store the data, and some UI to manipulate the data. Apps in this sense are just there to glue components together to make a larger, more specific UI. OpenDoc comes to mind. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/OpenDoc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1700269581.389779",
        "client_msg_id": "d8e27838-0a29-4479-9bb6-b91efaa6f12d",
        "text": "Some other old tech\/new tech that comes to mind: <https:\/\/en.wikipedia.org\/wiki\/Common_Object_Request_Broker_Architecture>. <https:\/\/medium.com\/@samho1996\/microfrontend-with-module-federation-in-react-98b72b347238>. \"Module Federation is a system that allows you to use parts of an application in another application without having to import the entire application\", so that you don't necessarily need to write \"libraries\" or \"applications\". The module can be both.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZBHi+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some other old tech\/new tech that comes to mind: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Common_Object_Request_Broker_Architecture"
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/@samho1996\/microfrontend-with-module-federation-in-react-98b72b347238"
                            },
                            {
                                "type": "text",
                                "text": ". \"Module Federation is a system that allows you to use parts of an application in another application without having to import the entire application\", so that you don't necessarily need to write \"libraries\" or \"applications\". The module can be both."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "hey <@UDRF3ALP4>!  it does break, some things nicely supported but not everything.\n\ndue to our \"meld\" philosophy where we \"externalize the internal\", a lot of stuff simply works and you get the control you need with niceties where possible.\n\ni think the best (or perhaps easiest for me :grin:) way to explain it is to share a convo from our Discord, where one of our tribe who discovered MightyMeld was asking similar questions.",
        "files": [
            {
                "id": "F066QK31TCZ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U043DLCQUF3",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNQQC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey "
                            },
                            {
                                "type": "user",
                                "user_id": "UDRF3ALP4"
                            },
                            {
                                "type": "text",
                                "text": "!  it does break, some things nicely supported but not everything.\n\ndue to our \"meld\" philosophy where we \"externalize the internal\", a lot of stuff simply works and you get the control you need with niceties where possible.\n\ni think the best (or perhaps easiest for me "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            },
                            {
                                "type": "text",
                                "text": ") way to explain it is to share a convo from our Discord, where one of our tribe who discovered MightyMeld was asking similar questions."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1700272418.319879",
        "client_msg_id": "a8ec3e78-9da1-41fe-8785-1a4312df5c1b",
        "thread_ts": "1698867820.599199",
        "parent_user_id": "U043DLCQUF3"
    },
    {
        "text": "",
        "files": [
            {
                "id": "F066QK3MKMX",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U043DLCQUF3",
        "display_as_bot": false,
        "type": "message",
        "ts": "1700272422.870519",
        "client_msg_id": "b93cfc30-1e29-4f85-9da4-25766ee46e21",
        "thread_ts": "1698867820.599199",
        "parent_user_id": "U043DLCQUF3"
    },
    {
        "user": "U043DLCQUF3",
        "type": "message",
        "ts": "1700272457.124549",
        "client_msg_id": "a1b4f1d4-2150-49c1-add0-365b9a7bb108",
        "text": "more on the Discord (<https:\/\/discord.com\/invite\/GvUkXqGnHP>) but -- well this is the general approach",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "aab2f4b1d5f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-17\/6218471335908_aab2f4b1d5f5edd93304_72.jpg",
            "first_name": "Steven",
            "real_name": "Steven Schkolne",
            "display_name": "Steven Schkolne",
            "team": "T5TCAFTA9",
            "name": "steven316",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698867820.599199",
        "parent_user_id": "U043DLCQUF3",
        "attachments": [
            {
                "from_url": "https:\/\/discord.com\/invite\/GvUkXqGnHP",
                "id": 1,
                "original_url": "https:\/\/discord.com\/invite\/GvUkXqGnHP",
                "fallback": "Discord: Join the MightyMeld Discord Server!",
                "text": "Check out the MightyMeld community on Discord - hang out with 119 other members and enjoy free voice and text chat.",
                "title": "Join the MightyMeld Discord Server!",
                "title_link": "https:\/\/discord.com\/invite\/GvUkXqGnHP",
                "service_name": "Discord"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l1Hxm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "more on the Discord ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.com\/invite\/GvUkXqGnHP"
                            },
                            {
                                "type": "text",
                                "text": ") but -- well this is the general approach"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U043DLCQUF3",
        "type": "message",
        "ts": "1700272534.021229",
        "client_msg_id": "970e0be2-a6a7-456f-9c16-6b2ab41b4313",
        "text": "and yes this project is stupid, to think that it could work but lo and behold it seems to be working out. would love to hear your deeper thoughts, if you get some time to explore further cheers! :heart:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "aab2f4b1d5f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-17\/6218471335908_aab2f4b1d5f5edd93304_72.jpg",
            "first_name": "Steven",
            "real_name": "Steven Schkolne",
            "display_name": "Steven Schkolne",
            "team": "T5TCAFTA9",
            "name": "steven316",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698867820.599199",
        "parent_user_id": "U043DLCQUF3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X+\/LT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and yes this project is stupid, to think that it could work but lo and behold it seems to be working out. would love to hear your deeper thoughts, if you get some time to explore further cheers! "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]