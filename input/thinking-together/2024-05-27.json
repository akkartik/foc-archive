[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1716795014.869709",
        "client_msg_id": "1ab6e740-a15e-4ad0-b0f3-2f8e6a4f68d8",
        "text": "The other important thing about type systems is that they *do* let you ignore some details.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1715978541.417449",
        "parent_user_id": "U03HC3XHZGW",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Qkm\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other important thing about type systems is that they "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " let you ignore some details."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1716832997.950009",
        "client_msg_id": "95ad189f-9fda-460f-a3c5-265bc6fecb90",
        "text": "In something like prolog, terms can be nested. So I can express the idea \"Socrates believes that he is mortal\" with `bel ieves(socrates, mortal(socrates)).` Are there any popular database types that make it easy to have relations of arbitrary arity as parameters of other relations, without unduly adding to the complexity of the schema? Preferably with ungrounded statements and open-world negation? Is there some obvious reason why not? Is there a computational complexity problem that arises in the real world? RDF allows triples to be referenced, I believe, but you are limited to arity 2, which seems needlessly limiting. Labeled graphs have arbitrary arity for non-entities, but entities are limited to two, and you usually can't refer to an edge. It seems... weird to me. Is it just that we don't really have the efficient reasoners over those kinds of expressions, so it hasn't been useful?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1716832997.950009",
        "reply_count": 36,
        "reply_users_count": 6,
        "latest_reply": "1717182741.068059",
        "reply_users": [
            "U018S42NMMM",
            "U02U0AS3J49",
            "UDQBTJ211",
            "U01AD80KMLK",
            "U05PY5AQCA2",
            "UFEQUBNNT"
        ],
        "replies": [
            {
                "user": "U018S42NMMM",
                "ts": "1716896943.450559"
            },
            {
                "user": "U018S42NMMM",
                "ts": "1716896972.954899"
            },
            {
                "user": "U018S42NMMM",
                "ts": "1716897087.228829"
            },
            {
                "user": "U018S42NMMM",
                "ts": "1716897732.767749"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1716905209.016589"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1716930024.120729"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1717006192.015149"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717006338.559039"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1717006476.747499"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1717006594.100559"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1717006921.494119"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1717007065.386399"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1717007092.670899"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1717007154.877429"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1717007365.700159"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1717007376.687959"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717007595.628059"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717108290.114059"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717111273.665189"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1717116852.043579"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717117230.601369"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717117346.144229"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717124646.864589"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717125096.775079"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717125948.693559"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717126060.338729"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717127206.613369"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1717128658.159119"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1717128727.979669"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1717128855.513579"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717129027.057379"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717129104.148369"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717129245.444489"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717132374.515389"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1717169977.510959"
            },
            {
                "user": "U05PY5AQCA2",
                "ts": "1717182741.068059"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fxmMh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In something like prolog, terms can be nested. So I can express the idea \"Socrates believes that he is mortal\" with "
                            },
                            {
                                "type": "text",
                                "text": "bel ieves(socrates, mortal(socrates)).",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Are there any popular database types that make it easy to have relations of arbitrary arity as parameters of other relations, without unduly adding to the complexity of the schema? Preferably with ungrounded statements and open-world negation? Is there some obvious reason why not? Is there a computational complexity problem that arises in the real world? RDF allows triples to be referenced, I believe, but you are limited to arity 2, which seems needlessly limiting. Labeled graphs have arbitrary arity for non-entities, but entities are limited to two, and you usually can't refer to an edge. It seems... weird to me. Is it just that we don't really have the efficient reasoners over those kinds of expressions, so it hasn't been useful?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]