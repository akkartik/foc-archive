[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1598600333.181200",
        "client_msg_id": "3b6136b9-5f89-4c84-8148-0568e84d6de2",
        "text": "Both because it's germane to this topic and because Tristan asked me to share it with anyone who might be interested, here's a trailer for an upcoming Netflix film that's trying to spread the good word about the dangers of the attention economy paperclip maximizer:\n<https:\/\/www.youtube.com\/watch?v=uaaC57tcci0>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595686084.036400",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "The Social Dilemma | Official Trailer | Netflix",
                "title_link": "https:\/\/www.youtube.com\/watch?v=uaaC57tcci0",
                "author_name": "Netflix",
                "author_link": "https:\/\/www.youtube.com\/user\/NewOnNetflix",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/uaaC57tcci0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The Social Dilemma | Official Trailer | Netflix",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/uaaC57tcci0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=uaaC57tcci0",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=uaaC57tcci0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6nh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both because it's germane to this topic and because Tristan asked me to share it with anyone who might be interested, here's a trailer for an upcoming Netflix film that's trying to spread the good word about the dangers of the attention economy paperclip maximizer:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=uaaC57tcci0"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U014WA16VNJ",
                    "UJFN50C00"
                ],
                "count": 2
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1598601869.181500",
        "client_msg_id": "ef78da54-e059-44be-bcab-e7189aa8d2b6",
        "text": "<@U016LEA3J1H> It's interesting to see the phrase \"alternative model of embracing state and change\" when that's exactly what Rich is presenting in his various projects, relative to the normative approach taken by (say) most Java or C++ programs. I wonder if there's a better way to communicate that perspective. :thinking_face:\n\nSome of the problems here are a consequence of the kind of universe in which we happen to live: there's no central clock and all observations are local to the observer. Lambda calculus is a great way to model computation, but it is serial and operates within a single frame of reference. When we want to compute with multiple observers, which we very often do in a networked\/multicore world, additional theory is needed to make things sensible.\n\nMost approaches one encounters at the end of that road start to look more like biology, where there are -- using the terms in quotes because they're familiar, though not exactly correct -- \"objects\" with local \"threads\" that communicate via \"messages\". This can look like the <https:\/\/en.wikipedia.org\/wiki\/Actor_model|Actor model>, <https:\/\/dspace.mit.edu\/handle\/1721.1\/44215|propagators>, <https:\/\/en.wikipedia.org\/wiki\/Π-calculus|π-calculus>, or any number of other things, but they all share the idea that we're performing dataflow between \"processors\". (N.B. Nodes in a dataflow system can be thought of as lazy functions from inputs to outputs, possibly with local state, called incrementally by whatever execution engine is at work.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GLGIN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " It's interesting to see the phrase \"alternative model of embracing state and change\" when that's exactly what Rich is presenting in his various projects, relative to the normative approach taken by (say) most Java or C++ programs. I wonder if there's a better way to communicate that perspective. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSome of the problems here are a consequence of the kind of universe in which we happen to live: there's no central clock and all observations are local to the observer. Lambda calculus is a great way to model computation, but it is serial and operates within a single frame of reference. When we want to compute with multiple observers, which we very often do in a networked\/multicore world, additional theory is needed to make things sensible.\n\nMost approaches one encounters at the end of that road start to look more like biology, where there are -- using the terms in quotes because they're familiar, though not exactly correct -- \"objects\" with local \"threads\" that communicate via \"messages\". This can look like the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Actor_model",
                                "text": "Actor model"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dspace.mit.edu\/handle\/1721.1\/44215",
                                "text": "propagators"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Π-calculus",
                                "text": "π-calculus"
                            },
                            {
                                "type": "text",
                                "text": ", or any number of other things, but they all share the idea that we're performing dataflow between \"processors\". (N.B. Nodes in a dataflow system can be thought of as lazy functions from inputs to outputs, possibly with local state, called incrementally by whatever execution engine is at work.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1598609512.184100",
        "client_msg_id": "6CC41FCD-1AF2-46F6-B8A3-46EFEE4FB4FB",
        "text": "I’m sure there’s some zen-like state(!) of enlightenment one can eventually reach, where it becomes totally obvious that computation and state are one and the same. Something like the particle-wave duality in physics or so…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kPDA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m sure there’s some zen-like state(!) of enlightenment one can eventually reach, where it becomes totally obvious that computation and state are one and the same. Something like the particle-wave duality in physics or so…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UUK6Y29R8"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U019W8A1884",
        "type": "message",
        "ts": "1598636311.184900",
        "client_msg_id": "00aa5755-9529-4988-a1ff-19cb697cf6c9",
        "text": "My favorite way to think about this is data-phobia as a symptom\/consequence of our tools. Rich also once noted that prog lang and database designers are rarely the same people. Any major programming language has next to no definition of real-world-state, meaning that beyond mutable variables and data-structures ideas about persistence, querying data etc are missing. Arguably every programming language transforms data but it rarely has a rich idea of where this data comes from and where it will go? Real-world information is an afterthought for all major programming languages and if we buy into the medium being the message notion then the medium, code, only ever transforms some data that we usually can't see, because it's maybe to big to see or it's in format that we can't (usually) see in our tools (images, video, animation). Beyond that code is static. It transforms data but data can not be seen being transformed so again the tool, the language carries an implicit motivator for the programmer to write transformation code, not visualizations or comprehension tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9d297317a647",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-28\/1327009683269_9d297317a647a021921f_72.jpg",
            "first_name": "",
            "real_name": "Dennis Heihoff",
            "display_name": "Dennis Heihoff",
            "team": "T5TCAFTA9",
            "name": "kalavox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eCy7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My favorite way to think about this is data-phobia as a symptom\/consequence of our tools. Rich also once noted that prog lang and database designers are rarely the same people. Any major programming language has next to no definition of real-world-state, meaning that beyond mutable variables and data-structures ideas about persistence, querying data etc are missing. Arguably every programming language transforms data but it rarely has a rich idea of where this data comes from and where it will go? Real-world information is an afterthought for all major programming languages and if we buy into the medium being the message notion then the medium, code, only ever transforms some data that we usually can't see, because it's maybe to big to see or it's in format that we can't (usually) see in our tools (images, video, animation). Beyond that code is static. It transforms data but data can not be seen being transformed so again the tool, the language carries an implicit motivator for the programmer to write transformation code, not visualizations or comprehension tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "crying_cat_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1598649949.189300",
        "client_msg_id": "70080196-D953-42C0-AB68-E1F9907FA495",
        "text": "Pondering: how important is it for a making environment to be made from the same medium you’re making with if your main goal isn’t making interfaces?  The Jupyter ecosystem has come quite far despite relatively few people using it to write JS: <https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21|https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598649949.189300",
        "reply_count": 11,
        "reply_users_count": 7,
        "latest_reply": "1598875068.030500",
        "reply_users": [
            "US370TRJA",
            "UC2A2ARPT",
            "USH01JEDQ",
            "U013ZLJARC7",
            "UA14TGLTC",
            "U018LAH5QCT",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "US370TRJA",
                "ts": "1598650156.191200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1598651532.191400"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1598653195.194900"
            },
            {
                "user": "US370TRJA",
                "ts": "1598653695.202200"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1598685448.205300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1598693335.206400"
            },
            {
                "user": "U018LAH5QCT",
                "ts": "1598712981.207500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1598715276.208000"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1598780069.000300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1598858460.030100"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1598875068.030500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/CMastication|@CMastication>: Observation from Jupyter Land: The Jupyter ecosystem has a big headwind because the initial target audience for the tool (Julia, Python, R) has a small overlap with the tool\/skills needed to expand the ecosystem, namely Javascript. \n\nThat's not a criticism, just an observation.",
                "ts": 1598627979,
                "author_name": "JD Long",
                "author_link": "https:\/\/twitter.com\/CMastication\/status\/1299366037402587137",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1197275015160442880\/0XWPnVtS_normal.jpg",
                "author_subname": "@CMastication",
                "text": "Observation from Jupyter Land: The Jupyter ecosystem has a big headwind because the initial target audience for the tool (Julia, Python, R) has a small overlap with the tool\/skills needed to expand the ecosystem, namely Javascript. \n\nThat's not a criticism, just an observation.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qfI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pondering: how important is it for a making environment to be made from the same medium you’re making with if your main goal isn’t making interfaces?  The Jupyter ecosystem has come quite far despite relatively few people using it to write JS: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21",
                                "text": "https:\/\/twitter.com\/cmastication\/status\/1299366037402587137?s=21"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1598650156.191200",
        "client_msg_id": "1BE6C190-7F99-47EA-A3E2-B0A2909B2DE8",
        "text": "People have gone quite far with making r\/python libs to generate JavaScript, eg streamlit\/Plotly\/shiny  (for r)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9ZidD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People have gone quite far with making r\/python libs to generate JavaScript, eg streamlit\/Plotly\/shiny  (for r)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1598651532.191400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1598652341.000000"
        },
        "client_msg_id": "27f88e29-0a64-4a26-9f78-30e298f29b40",
        "text": "I'm not entirely sure what meaning you have for \"made from the same medium\". If it helps, some of the specific terms of art for _making the thing in itself_ are: meta-circularity (which is where a compiler is written in the language it compiles, like ClojureScript and gcc) and bootstrapping (which is, IIRC, where an interactive system is implemented entirely using things that can be edited from within that system at runtime, like some Smalltalk implementations). I'm going to assume you're referring to that sort of thing, perhaps in a slightly broader sense, which in my mind would include Jupyter being used to edit the same language it's implemented in.\n\nAs for how important it is — I would say it depends on what the goals of the environment are. It's a tradeoff.\n\nWithout knowing for sure what sense of \"interfaces\" you mean (GUIs? FFIs?), there are plenty of good reasons to do it, like the one mentioned in the tweet, or like wanting to prove that the system you're building is expressive enough to express itself (eg: if Jupyter could only handle ASCII, that would be a lack of expressive power needed to be a general JavaScript editor). On the other hand, there are a ton of reasons _not_ to do it — perf, often being the #1 cited reason I've seen, but also simplicity, in that you might not want to spend the effort to make your environment so expressive that it can express itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wP0c0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not entirely sure what meaning you have for \"made from the same medium\". If it helps, some of the specific terms of art for "
                            },
                            {
                                "type": "text",
                                "text": "making the thing in itself",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are: meta-circularity (which is where a compiler is written in the language it compiles, like ClojureScript and gcc) and bootstrapping (which is, IIRC, where an interactive system is implemented entirely using things that can be edited from within that system at runtime, like some Smalltalk implementations). I'm going to assume you're referring to that sort of thing, perhaps in a slightly broader sense, which in my mind would include Jupyter being used to edit the same language it's implemented in.\n\nAs for how important it is — I would say it depends on what the goals of the environment are. It's a tradeoff.\n\nWithout knowing for sure what sense of \"interfaces\" you mean (GUIs? FFIs?), there are plenty of good reasons to do it, like the one mentioned in the tweet, or like wanting to prove that the system you're building is expressive enough to express itself (eg: if Jupyter could only handle ASCII, that would be a lack of expressive power needed to be a general JavaScript editor). On the other hand, there are a ton of reasons "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to do it — perf, often being the #1 cited reason I've seen, but also simplicity, in that you might not want to spend the effort to make your environment so expressive that it can express itself."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "US370TRJA"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1598653195.194900",
        "client_msg_id": "ceb86f67-0c68-4177-8f34-0f44857519b7",
        "text": "That was PL302 in a four-minute lesson, nicely done",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5ho",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was PL302 in a four-minute lesson, nicely done"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1598653695.202200",
        "client_msg_id": "81ED7218-BF6A-416A-A8F7-81B5B5F3CBAB",
        "text": "Thanks for the very clear answer in spite of the slightly muddled question <@UC2A2ARPT> ! I feel like a big part of why I was drawn to VSCode (from sublime text) was knowing I could write extensions in JS instead of Python. \n\nRealizing that not every language\/ecosystem aspires\/has good ergonomics for used for  GUI\/editor toolmaking makes me think that if someone wanted to change the Jupyter situation, it may be more efficient trying to get JS devs curious about plugin-making then modifying Jupyter so that plugins could be written using the science scripting languages eg Python\/Julia\/R. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cvg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the very clear answer in spite of the slightly muddled question "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " ! I feel like a big part of why I was drawn to VSCode (from sublime text) was knowing I could write extensions in JS instead of Python. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Realizing that not every language\/ecosystem aspires\/has good ergonomics for used for  GUI\/editor toolmaking makes me think that if someone wanted to change the Jupyter situation, it may be more efficient trying to get JS devs curious about plugin-making then modifying Jupyter so that plugins could be written using the science scripting languages eg Python\/Julia\/R. "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]