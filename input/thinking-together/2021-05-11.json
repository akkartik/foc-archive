[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1620726749.204100",
        "client_msg_id": "e10e0d12-7390-4dc5-808a-60b00388763b",
        "text": "Interesting. So what's happening in stack languages these days? Any other active participants than Factor?\n\nI haven't followed this space for a long time, though I do have a past involvement with Forth (implemented my own and used it in the early 1980s on a Z80-based home computer) and PostScript (which I even used for scientific computing for a while when I realized that my printer was more powerful than the computer it was attached to).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619602565.130500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QiuZ1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. So what's happening in stack languages these days? Any other active participants than Factor?\n\nI haven't followed this space for a long time, though I do have a past involvement with Forth (implemented my own and used it in the early 1980s on a Z80-based home computer) and PostScript (which I even used for scientific computing for a while when I realized that my printer was more powerful than the computer it was attached to)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1620737688.205700",
        "client_msg_id": "A2B2D97C-A254-412D-9D32-60456D8BB6B1",
        "text": "there are two sides to the concatenative sven as far as i can tell: functional programmers who want better composition, and creative coders who like to use them to draw to canvas ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619602565.130500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iBNqm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there are two sides to the concatenative sven as far as i can tell: functional programmers who want better composition, and creative coders who like to use them to draw to canvas "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1620737698.206200",
        "client_msg_id": "C155FCD7-D409-4842-88EF-968B7F0D3DF0",
        "text": "<https:\/\/youtu.be\/_IgqJr8jG8M|https:\/\/youtu.be\/_IgqJr8jG8M> solid talk on the functional stuff",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619602565.130500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Stanford Seminar - Concatenative Programming: From Ivory to Metal",
                "title_link": "https:\/\/youtu.be\/_IgqJr8jG8M",
                "author_name": "stanfordonline",
                "author_link": "https:\/\/www.youtube.com\/user\/stanfordonline",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/_IgqJr8jG8M\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Stanford Seminar - Concatenative Programming: From Ivory to Metal",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/_IgqJr8jG8M?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/_IgqJr8jG8M",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/_IgqJr8jG8M"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wh9Ji",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/_IgqJr8jG8M",
                                "text": "https:\/\/youtu.be\/_IgqJr8jG8M"
                            },
                            {
                                "type": "text",
                                "text": " solid talk on the functional stuff"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1620800699.206700",
        "client_msg_id": "4cfd7e5f-a419-4453-bdff-bfc16ed33409",
        "text": "Composition is one nice aspect of concatenative languages. Another one I haven't seen discussed much is readability. No, that's not a joke. Of course you have to get used to reading the concatenative style, like you have to learn the fundamentals of any form of language to become proficient. But as a communication medium among people who are proficient, concatenative languages provide a lot of freedom for writing readable code, because there is almost no syntactic boilerplate, a lot of freedom for crafting identifiers, and  low overhead for introducing new ones. Lisps share those advantages, but not to the degree that Forth and descendants do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619602565.130500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9N8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Composition is one nice aspect of concatenative languages. Another one I haven't seen discussed much is readability. No, that's not a joke. Of course you have to get used to reading the concatenative style, like you have to learn the fundamentals of any form of language to become proficient. But as a communication medium among people who are proficient, concatenative languages provide a lot of freedom for writing readable code, because there is almost no syntactic boilerplate, a lot of freedom for crafting identifiers, and  low overhead for introducing new ones. Lisps share those advantages, but not to the degree that Forth and descendants do."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]