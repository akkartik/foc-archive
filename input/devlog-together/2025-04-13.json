[
    {
        "user": "U06NSFX5119",
        "type": "message",
        "ts": "1744549855.668569",
        "edited": {
            "user": "U06NSFX5119",
            "ts": "1744549941.000000"
        },
        "client_msg_id": "46cb21cd-d0be-4a2f-ac69-d3e8e4849bd1",
        "text": "Keep getting sidetracked by making little Lua libraries. This one implements Python-style f-strings in Lua. Pretty cool to have a language that lets you go this far with its syntax. With just a little bit of work this could be extended to implement <https:\/\/peps.python.org\/pep-0750\/|Python's template strings (PEP 750)> and then we could use Lua to make all sorts of DSLs. My initial motivation was easier printf debugging, though :sweat_smile:.\n\nI started working on this on an iPad with the Codea app, of all things. Was fun, but sadly I couldn't use any of the Bret Victor-inspired things they had in it since I wasn't using any of the app-specific libraries they had.\n\nThough putting aside the library, I think at this point the most interesting thing I did is actually making it possible to use it right on my website without having to install or download anything.\n\n<https:\/\/ezhik.jp\/f-string.lua\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "12fbfa333e62",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-10\/6768023333094_12fbfa333e62c9e20d74_72.png",
            "first_name": "Ezhik",
            "real_name": "Ezhik",
            "display_name": "Ezhik",
            "team": "T5TCAFTA9",
            "name": "futureofcoding.sla544",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1744549855.668569",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1744902011.684029",
        "reply_users": [
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1744902011.684029"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/ezhik.jp\/assets\/f-string.lua.png",
                "image_width": 1036,
                "image_height": 583,
                "image_bytes": 308915,
                "from_url": "https:\/\/ezhik.jp\/f-string.lua\/",
                "service_icon": "https:\/\/ezhik.jp\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/ezhik.jp\/f-string.lua\/",
                "fallback": "f-string.lua – ezhik.jp",
                "text": "A Python-like f-string implementation for Lua.",
                "title": "f-string.lua – ezhik.jp",
                "title_link": "https:\/\/ezhik.jp\/f-string.lua\/",
                "service_name": "ezhik.jp"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q37+a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Keep getting sidetracked by making little Lua libraries. This one implements Python-style f-strings in Lua. Pretty cool to have a language that lets you go this far with its syntax. With just a little bit of work this could be extended to implement "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/peps.python.org\/pep-0750\/",
                                "text": "Python's template strings (PEP 750)"
                            },
                            {
                                "type": "text",
                                "text": " and then we could use Lua to make all sorts of DSLs. My initial motivation was easier printf debugging, though "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI started working on this on an iPad with the Codea app, of all things. Was fun, but sadly I couldn't use any of the Bret Victor-inspired things they had in it since I wasn't using any of the app-specific libraries they had.\n\nThough putting aside the library, I think at this point the most interesting thing I did is actually making it possible to use it right on my website without having to install or download anything.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ezhik.jp\/f-string.lua\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1744561198.666559",
        "client_msg_id": "5cf370ea-4b58-4ca3-9c95-5a96ff055d09",
        "text": "If you enjoyed fooling with parsers, I would recommend looking into <http:\/\/ohmjs.org|OhmJS>. OhmJS (plus Ohm-editor) saves a lot of work when building parsers. A game changer. There is the other half, too - once you've parsed something, what do you do with the information? I've found that doing simple string-rewriting is very, very powerful, while sounding overly-restrictive on the surface. One can design and build whole new languages by transpiling them into existing languages for compilation (that's how I use my 't2t' and 'tmx' stuff). I consider the shell (\/bin\/bash, \/bin\/zsh, etc.) to be my IDE. PLs are just \"little tools\" that plug into the IDE. I don't have to stick to using one language. I can pick and choose. Transpiling a new language (or nano-DSL, or Diagrammatic Programming Language) into some other language fits neatly into this workflow. The fact that OhmJS is written in JS doesn't mean that you have to use JS. You can map XYZ to Lua (or whatever). I can supply a \/lot\/ more info, if this interests you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xDKD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you enjoyed fooling with parsers, I would recommend looking into "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ohmjs.org",
                                "text": "OhmJS"
                            },
                            {
                                "type": "text",
                                "text": ". OhmJS (plus Ohm-editor) saves a lot of work when building parsers. A game changer. There is the other half, too - once you've parsed something, what do you do with the information? I've found that doing simple string-rewriting is very, very powerful, while sounding overly-restrictive on the surface. One can design and build whole new languages by transpiling them into existing languages for compilation (that's how I use my 't2t' and 'tmx' stuff). I consider the shell (\/bin\/bash, \/bin\/zsh, etc.) to be my IDE. PLs are just \"little tools\" that plug into the IDE. I don't have to stick to using one language. I can pick and choose. Transpiling a new language (or nano-DSL, or Diagrammatic Programming Language) into some other language fits neatly into this workflow. The fact that OhmJS is written in JS doesn't mean that you have to use JS. You can map XYZ to Lua (or whatever). I can supply a \/lot\/ more info, if this interests you."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06NSFX5119",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]