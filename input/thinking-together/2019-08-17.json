[
    {
        "user": "UK69SS8LB",
        "type": "message",
        "ts": "1566030867.302200",
        "client_msg_id": "54771993-9da9-4519-be46-c7c5381f623d",
        "text": "Thanks for the find!\n\n&gt; a lot of times documentation flows don’t get the same kind of engineering toolchain love as something like source code would.\n\nI like what the author said here. It's more our obsession with text that prevents more prolific use of diagrams.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb61a4a4200",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3db61a4a42000b4ff62648c0979e8920.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Ken Kan",
            "display_name": "Ken Kan",
            "team": "T5TCAFTA9",
            "name": "kenhkan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1560992814.027900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HX1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the find!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a lot of times documentation flows don’t get the same kind of engineering toolchain love as something like source code would."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI like what the author said here. It's more our obsession with text that prevents more prolific use of diagrams."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1566037482.302500",
        "client_msg_id": "ad57bfec-70db-471e-afe6-c14c19a48232",
        "text": "I've realised that this approach to writing programs (transactions on shared state as opposed to message passing) is also heavily pushed within the Clojure community (though Clojure isn't event-driven by default). See: <https:\/\/clojure.org\/about\/state>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565594209.273300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rVI+q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've realised that this approach to writing programs (transactions on shared state as opposed to message passing) is also heavily pushed within the Clojure community (though Clojure isn't event-driven by default). See: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/clojure.org\/about\/state"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1566037620.302700",
        "client_msg_id": "d673a88d-7414-4080-a7e3-a13d97b5d087",
        "text": "Though more recently, Clojure's core.async library goes against this grain with a message-passing architecture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565594209.273300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2+m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though more recently, Clojure's core.async library goes against this grain with a message-passing architecture."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1566056848.303300",
        "client_msg_id": "58182825-f145-4636-8fcb-8cd1af807488",
        "text": "neat post: <https:\/\/www.sjm.io\/post\/forgotten-ideas-in-computer-science\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566056848.303300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1566062257.303500",
        "reply_users": [
            "UHDQ62M4P"
        ],
        "replies": [
            {
                "user": "UHDQ62M4P",
                "ts": "1566062257.303500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "The Forgotten Ideas in Computer Science Notes · Simon Morgan",
                "title_link": "https:\/\/www.sjm.io\/post\/forgotten-ideas-in-computer-science\/",
                "text": "Notes from Joe Armstrong's Code BEAM keynote.",
                "fallback": "The Forgotten Ideas in Computer Science Notes · Simon Morgan",
                "from_url": "https:\/\/www.sjm.io\/post\/forgotten-ideas-in-computer-science\/",
                "service_icon": "https:\/\/www.sjm.io\/\/favicon-16x16.png",
                "service_name": "sjm.io",
                "id": 1,
                "original_url": "https:\/\/www.sjm.io\/post\/forgotten-ideas-in-computer-science\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QT+fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "neat post: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.sjm.io\/post\/forgotten-ideas-in-computer-science\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1566062257.303500",
        "client_msg_id": "1307d018-d4ea-4d18-bdb2-0ea50cc9bb7b",
        "text": "For the record, I have used Linda Tuple Spaces already in 2 of my languages (Lobster and Aardappel).. you could say I am a fan :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566056848.303300",
        "parent_user_id": "UGLSY9X3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3XO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the record, I have used Linda Tuple Spaces already in 2 of my languages (Lobster and Aardappel).. you could say I am a fan "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566066801.303700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566066854.000000"
        },
        "client_msg_id": "e737e471-0b52-419b-a134-8c5448a4f749",
        "text": "core.async is a bit of an oddity. It was (IIRC) mainly the project of Tim Baldridge, who is no longer at Cognitect and no longer working on it. It was never properly _finished_, and has a bunch of bugs and shortcomings. I think there have been a handful of community projects that have done a better job at cracking the same nut.\n\nI'm not sure that I'd describe it as message passing. It's CSP, which is a more specific thing. If you say that CSP is a form of message passing, then you might as well lump in the actor model and Pi-Calculus and a few other things, and at that point a lot of meaning has been lost. After all, the interesting thing in core.async isn't the messages &amp; inboxes, it's the use of queues and the coordination mechanisms.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565594209.273300",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P5ABN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "core.async is a bit of an oddity. It was (IIRC) mainly the project of Tim Baldridge, who is no longer at Cognitect and no longer working on it. It was never properly "
                            },
                            {
                                "type": "text",
                                "text": "finished",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and has a bunch of bugs and shortcomings. I think there have been a handful of community projects that have done a better job at cracking the same nut.\n\nI'm not sure that I'd describe it as message passing. It's CSP, which is a more specific thing. If you say that CSP is a form of message passing, then you might as well lump in the actor model and Pi-Calculus and a few other things, and at that point a lot of meaning has been lost. After all, the interesting thing in core.async isn't the messages & inboxes, it's the use of queues and the coordination mechanisms."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566074521.305000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566080126.000000"
        },
        "client_msg_id": "131c52ee-3f5f-46b3-91aa-abbe546e0ca9",
        "text": "Folks who are working on languages\/tools with some sort of rewind \/ reverse execution \/ reversible computing feature... what are you doing, how are you doing it, and why?\n\n(Edit) Additionally: if you are doing the above, do you allow the running system's data or code to be edited? For instance, some traditional debuggers allow you to edit the state of variables when execution is paused. If you offer anything like that, how does that interact with your rewind\/reverse functionality? Does rewinding undo changes to data? How about code? Or does rewinding execute in reverse, using the just-edited code as if it had always existed?\n\nBonus round: In traditional debuggers for some languages, you can insert some sort of \"pause \/ debug\" statement into your code that pauses execution and initiates debugging. In your reversible language, can user code control the flow of time backward\/forward, or anything similarly _wild_ like that? If so, what's your philosophy \/ approach to handling paradoxes?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "reply_count": 27,
        "reply_users_count": 7,
        "latest_reply": "1568216445.280000",
        "reply_users": [
            "UE6EFEPTQ",
            "UEQ6M68H0",
            "UC2A2ARPT",
            "UA14TGLTC",
            "U5T9JLUAE",
            "UE3KC0VK6",
            "UN9R2KEUE"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1566075030.305400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566079150.305900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566080280.309200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566083607.310300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566084963.310900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1566131580.311600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1566131726.311800"
            },
            {
                "user": "U5T9JLUAE",
                "ts": "1566909898.471800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566914357.472000"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568140667.249800"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568140734.250700"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568140848.253700"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568140902.254700"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568140971.255700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1568150179.257800"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215517.273100"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215620.273800"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215650.274400"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568215669.274700"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215672.274900"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215694.275200"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215714.275500"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215861.275700"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568215868.275900"
            },
            {
                "user": "UN9R2KEUE",
                "ts": "1568216018.276100"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568216186.277400"
            },
            {
                "user": "UE3KC0VK6",
                "ts": "1568216445.280000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K+z\/T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Folks who are working on languages\/tools with some sort of rewind \/ reverse execution \/ reversible computing feature... what are you doing, how are you doing it, and why?\n\n(Edit) Additionally: if you are doing the above, do you allow the running system's data or code to be edited? For instance, some traditional debuggers allow you to edit the state of variables when execution is paused. If you offer anything like that, how does that interact with your rewind\/reverse functionality? Does rewinding undo changes to data? How about code? Or does rewinding execute in reverse, using the just-edited code as if it had always existed?\n\nBonus round: In traditional debuggers for some languages, you can insert some sort of \"pause \/ debug\" statement into your code that pauses execution and initiates debugging. In your reversible language, can user code control the flow of time backward\/forward, or anything similarly "
                            },
                            {
                                "type": "text",
                                "text": "wild",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like that? If so, what's your philosophy \/ approach to handling paradoxes?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566074584.305100",
        "client_msg_id": "1de9b0df-7006-40e2-9c9b-a7e0abd5367d",
        "text": "Have you looked at Blender? They've done a couple of major UI redesigns over the past decade, which I imagine involved a large amount of refactoring.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566020858.301100",
        "parent_user_id": "UC1TYP06P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8kNK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you looked at Blender? They've done a couple of major UI redesigns over the past decade, which I imagine involved a large amount of refactoring."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566075030.305400",
        "client_msg_id": "2fe7088b-61bd-4d8e-8ff1-762554b396b6",
        "text": "Start with \"why?\", please. :grinning:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dSw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Start with \"why?\", please. "
                            },
                            {
                                "type": "emoji",
                                "name": "grinning",
                                "unicode": "1f600"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566079150.305900",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1568175523.000000"
        },
        "client_msg_id": "79a4c03e-e65f-41fb-91ef-1afada28e12c",
        "text": "Time travel debugging was first demonstrated commercial in the C language \"omniscient debugger\", a brilliant work from 10 years ago that never got much attention. Now the mighty Microsoft has added this feature to their Visual Studio Enterprise product. It is also a commercial tool called \"rr\".  I haven't used these other products so i can't comment on how well they work. Some functional languages like Elm offer time travel debugging to some degree, because they are already storing the history of variables so it is relatively easy to offer this feature.\n\nI designed my Beads system on the idea that enabling this feature would be the greatest improvement in the debugging process one can make. So that is the \"why\". It is very tricky to implement efficiently, especially if you plan to offer this in shipping end user products, not just inside the lab. It is in shipping products that it is most needed in reality, because the number of bug reports from end users can be 10x or 100x what your internal QA team can find. And the inability to reproduce (and then fix) bugs has become so impossible for the big companies to keep up, that the bug databases for Adobe, Apple and MS are in the millions, and basically nothing much gets fixed. I just yesterday found a bug in Chrome where the Emoji variation selector to turn off automatic emoji promotion is broken, and it is been known for years.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wc+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Time travel debugging was first demonstrated commercial in the C language \"omniscient debugger\", a brilliant work from 10 years ago that never got much attention. Now the mighty Microsoft has added this feature to their Visual Studio Enterprise product. It is also a commercial tool called \"rr\".  I haven't used these other products so i can't comment on how well they work. Some functional languages like Elm offer time travel debugging to some degree, because they are already storing the history of variables so it is relatively easy to offer this feature.\n\nI designed my Beads system on the idea that enabling this feature would be the greatest improvement in the debugging process one can make. So that is the \"why\". It is very tricky to implement efficiently, especially if you plan to offer this in shipping end user products, not just inside the lab. It is in shipping products that it is most needed in reality, because the number of bug reports from end users can be 10x or 100x what your internal QA team can find. And the inability to reproduce (and then fix) bugs has become so impossible for the big companies to keep up, that the bug databases for Adobe, Apple and MS are in the millions, and basically nothing much gets fixed. I just yesterday found a bug in Chrome where the Emoji variation selector to turn off automatic emoji promotion is broken, and it is been known for years."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566080245.309000",
        "client_msg_id": "2fec7f06-554c-4899-8498-130c3df0e6b8",
        "text": "There have been some structural changes in the project comparison table, and I can't easily use the history to see what exactly and by whom, so please check your project is still accurately represented:\n<https:\/\/docs.google.com\/spreadsheets\/d\/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc\/edit#gid=0>\nAnd don't forget that it's wiki-like, so if you're not happy, don't get cross, change it to what you want!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566080245.309000",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1566084091.310700",
        "reply_users": [
            "UC2A2ARPT",
            "UE6EFEPTQ",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1566080311.309900"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566080322.310100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1566084091.310700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oIsCp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There have been some structural changes in the project comparison table, and I can't easily use the history to see what exactly and by whom, so please check your project is still accurately represented:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.google.com\/spreadsheets\/d\/12sTu7RT-s_QlAupY1v-3DfI1Mm9NEX5YMWWTDAKHLfc\/edit#gid=0"
                            },
                            {
                                "type": "text",
                                "text": "\nAnd don't forget that it's wiki-like, so if you're not happy, don't get cross, change it to what you want!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566080280.309200",
        "client_msg_id": "eb50e95e-a15d-49db-9df9-7da028a259d0",
        "text": "<@UEQ6M68H0> I feel that \"implement efficiently\" pain, yep!\n\nIn Beads, how does time travel work? What's the experience of using it like? Have you implemented it yet, or are you still working on the design?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E7a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I feel that \"implement efficiently\" pain, yep!\n\nIn Beads, how does time travel work? What's the experience of using it like? Have you implemented it yet, or are you still working on the design?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566080311.309800",
        "client_msg_id": "c4f429ae-8708-4590-ae89-c0fd4dd48a00",
        "text": "Although it would be polite to mention if you make changes to another's record. :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ajd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Although it would be polite to mention if you make changes to another's record. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566080311.309900",
        "client_msg_id": "812545c4-0c10-42ac-9b4b-de97c2eb8dc2",
        "text": "Sounds like you need a more powerful time-travel feature.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566080245.309000",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BEQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like you need a more powerful time-travel feature."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566080322.310100",
        "client_msg_id": "26455bec-2a99-4d8c-b5a5-924c5b36d449",
        "text": ":smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566080245.309000",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gomix",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566083607.310300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1566083730.000000"
        },
        "client_msg_id": "db2455fb-492a-4cfe-ac15-8c180d55f00a",
        "text": "Since the Beads language main purpose is to facilitate graphical interactive programs, merely rewinding the state doesn't cut it. You also have to show the state of the screen that corresponds to the internal state, so systems like Visual Studio which are tracking the minute changes to each memory address don't actually help that much. Most of the code in an interactive product revolves around drawing things, and responding to user input. For example, in a tic tac toe game, which is one of my shortest examples, the amount of computation is tiny; you have to check 8 different paths in the game to see if a play wins. So in my case the debugger is actually a second program in Beads watching the execution of a sub-program, the game. Not only is there reversal, but also time dilation and compression. Since i had this feature in mind at the start, i built the whole product around making sure that it would work. It is very easy to inject a feature which is non-reversible. A lot of the OOP paradigm works against you  in reversible systems, which is why there is no NEW or DISPOSE in my language. The big payoff in time travel is when you can do it so efficiently that the shipping product can keep the feature on, and thus when the user encounters a bug, they can send their breadcrumb trail to the developers and now you have 100% repeatability on bug reports. Apple and the big companies spend a fortune on time wasted not being able to repeat a problem, and net result of the inability to recreate the user's exact situation is that products are bug-ridden today. Nobody can afford to chase down an intermittent error, so companies have taken the very cynical tactic of using their customer base as their final QA, and waiting for a statistically significant number of error reports before they investigate and try to fix. That's no way to run an airline if you ask me. I want people to make products that are near perfect, and the only way to get near perfection is to guarantee repeatability, even when you have random numbers, multiple players in a game, flaky networks, etc.\n\nBut on the flip side, i hardly use the feature, because so far my sample programs are very small. The more animation your product does, the more you need slo-mo, reversing, etc. Flashy features like time travel debugging are very exciting, but it doesn't fix a bad design, or make a user interface clean and clear. A bad design is bad in both directions... I find that most of one's time in graphical products is spent making sure the design still looks good across a wide range of screen sizes. The Android space is mind-bogglingly broad in terms of hardware capabilities, with notches popping up in every odd location, and some wacky screen resolutions. I have spent 10 times more time on the screen layout features than time travel.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NN8p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since the Beads language main purpose is to facilitate graphical interactive programs, merely rewinding the state doesn't cut it. You also have to show the state of the screen that corresponds to the internal state, so systems like Visual Studio which are tracking the minute changes to each memory address don't actually help that much. Most of the code in an interactive product revolves around drawing things, and responding to user input. For example, in a tic tac toe game, which is one of my shortest examples, the amount of computation is tiny; you have to check 8 different paths in the game to see if a play wins. So in my case the debugger is actually a second program in Beads watching the execution of a sub-program, the game. Not only is there reversal, but also time dilation and compression. Since i had this feature in mind at the start, i built the whole product around making sure that it would work. It is very easy to inject a feature which is non-reversible. A lot of the OOP paradigm works against you  in reversible systems, which is why there is no NEW or DISPOSE in my language. The big payoff in time travel is when you can do it so efficiently that the shipping product can keep the feature on, and thus when the user encounters a bug, they can send their breadcrumb trail to the developers and now you have 100% repeatability on bug reports. Apple and the big companies spend a fortune on time wasted not being able to repeat a problem, and net result of the inability to recreate the user's exact situation is that products are bug-ridden today. Nobody can afford to chase down an intermittent error, so companies have taken the very cynical tactic of using their customer base as their final QA, and waiting for a statistically significant number of error reports before they investigate and try to fix. That's no way to run an airline if you ask me. I want people to make products that are near perfect, and the only way to get near perfection is to guarantee repeatability, even when you have random numbers, multiple players in a game, flaky networks, etc.\n\nBut on the flip side, i hardly use the feature, because so far my sample programs are very small. The more animation your product does, the more you need slo-mo, reversing, etc. Flashy features like time travel debugging are very exciting, but it doesn't fix a bad design, or make a user interface clean and clear. A bad design is bad in both directions... I find that most of one's time in graphical products is spent making sure the design still looks good across a wide range of screen sizes. The Android space is mind-bogglingly broad in terms of hardware capabilities, with notches popping up in every odd location, and some wacky screen resolutions. I have spent 10 times more time on the screen layout features than time travel."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566084091.310700",
        "client_msg_id": "2ada1986-24c1-43b5-87c8-2ef5a7fdac00",
        "text": "The new projects are piling up fast. I have invited some of the project teams to submit implementations of the tiny projects for which i have written a very tight spec; in this way people can compare apples to apples. In some cases like Dark, which is not intended to make client side products, those sample programs won't apply, but  it is highly informative to see how they would implement the same exact thing. Too many comparisons involve different source products.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566080245.309000",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "joxK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The new projects are piling up fast. I have invited some of the project teams to submit implementations of the tiny projects for which i have written a very tight spec; in this way people can compare apples to apples. In some cases like Dark, which is not intended to make client side products, those sample programs won't apply, but  it is highly informative to see how they would implement the same exact thing. Too many comparisons involve different source products."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566084963.310900",
        "client_msg_id": "856a96d8-d824-43a1-9ccd-218bf45e838e",
        "text": "When you are debugging a sorting function, you want to see what i call sub-atomic levels of detail, like what is the value of a variable before and after, or see the condition codes of a branching instruction. So maybe we can call one \"interaction rewind\" and \"instruction-level rewind\". Both have their uses, but a lot of people confuse the two as they are not interchangeable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566074521.305000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ivK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you are debugging a sorting function, you want to see what i call sub-atomic levels of detail, like what is the value of a variable before and after, or see the condition codes of a branching instruction. So maybe we can call one \"interaction rewind\" and \"instruction-level rewind\". Both have their uses, but a lot of people confuse the two as they are not interchangeable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC1TYP06P",
        "type": "message",
        "ts": "1566107919.311100",
        "client_msg_id": "bcf6f1c3-acc4-43f3-8949-0c02673d3d62",
        "text": "That’s an idea; they probably have. Will think about how to find the kinds of commits we’re looking for",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7a68744c2a2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b7a68744c2a288f24b931b3f65b832f9.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "",
            "real_name": "James Koppel",
            "display_name": "jkoppel",
            "team": "T5TCAFTA9",
            "name": "jkoppel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566020858.301100",
        "parent_user_id": "UC1TYP06P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "epTQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s an idea; they probably have. Will think about how to find the kinds of commits we’re looking for"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]