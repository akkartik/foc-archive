[
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1623830791.017000",
        "text": "what are good examples of embedded logic programming into other languages? All I can think of are \"prologs in lisp\"\n\n• <https:\/\/docs.racket-lang.org\/racklog\/>\n• <https:\/\/github.com\/clojure\/core.logic>\n• <https:\/\/franz.com\/support\/documentation\/current\/doc\/prolog.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623830791.017000",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1623850022.018700",
        "reply_users": [
            "UBN9AFS0N",
            "UJBAJNFLK",
            "U013ZLJARC7",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1623832955.017300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1623839207.017700"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1623846967.017900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1623850022.018700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "[June 15th, 2021 10:14 PM] jack529: One of the many reasons I prefer to embed logic programming into other languages rather than using PROLOG as such...",
                "ts": "1623820460.016400",
                "author_id": "U013ZLJARC7",
                "author_subname": "Jack Rusher",
                "channel_id": "C01AFFQP8A3",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "One of the many reasons I prefer to embed logic programming into other languages rather than using PROLOG as such...",
                "author_name": "Jack Rusher",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U013ZLJARC7",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/f4ae9e5b29386489b18b3bc6b1f41a22.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C01AFFQP8A3\/p1623820460016400?thread_ts=1623816794015800&cid=C01AFFQP8A3",
                "is_share": true,
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YoAz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what are good examples of embedded logic programming into other languages? All I can think of are \"prologs in lisp\"\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/docs.racket-lang.org\/racklog\/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/clojure\/core.logic"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/franz.com\/support\/documentation\/current\/doc\/prolog.html"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1623832955.017300",
        "client_msg_id": "5c0be1a6-5fe1-4824-a4c4-1940e6a73e3c",
        "text": "<http:\/\/minikanren.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623830791.017000",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v8j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/minikanren.org\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1623838240.017500",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1623848793.000000"
        },
        "client_msg_id": "4e082e6e-27d3-4664-8c41-a483168f4da4",
        "text": "Makes all the sense: the frustration.  Great to see the topic come up at this moment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623816794.015800",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6j5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes all the sense: the frustration.  Great to see the topic come up at this moment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1623839207.017700",
        "client_msg_id": "17235af7-7a26-4164-88cd-5757b52e6e55",
        "text": "Also Shen (<http:\/\/shenlanguage.org\/>), but, like miniKanren, it's one more Lisp on the list.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623830791.017000",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EY9T9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also Shen ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/shenlanguage.org\/"
                            },
                            {
                                "type": "text",
                                "text": "), but, like miniKanren, it's one more Lisp on the list."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1623846967.017900",
        "client_msg_id": "a9ac2c42-470c-425b-af2e-73fcf51d0ccf",
        "text": "Lisps are, generally speaking, the easiest languages in which to embed other languages, but there are good examples in many languages. As (I think) <@UBN9AFS0N> was gesturing toward, MiniKanren has been widely implemented. Here's are a pair of OCaml ones (<https:\/\/github.com\/JetBrains-Research\/OCanren|1>,<https:\/\/github.com\/StrykerKKD\/Logical|2>), the latter actually based on MicroKanren.\n\nMy favorite person for this sort of thing in Haskell and OCaml is Oleg Kiselyov, for example <http:\/\/okmij.org\/ftp\/Computation\/monads.html#LogicT|this> backtracking paper (co-authored with Friedman) and several others in that section of his site. See also: <http:\/\/okmij.org\/ftp\/kakuritu\/> for some tasty probabilistic programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623830791.017000",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PA=P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lisps are, generally speaking, the easiest languages in which to embed other languages, but there are good examples in many languages. As (I think) "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " was gesturing toward, MiniKanren has been widely implemented. Here's are a pair of OCaml ones ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/JetBrains-Research\/OCanren",
                                "text": "1"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/StrykerKKD\/Logical",
                                "text": "2"
                            },
                            {
                                "type": "text",
                                "text": "), the latter actually based on MicroKanren.\n\nMy favorite person for this sort of thing in Haskell and OCaml is Oleg Kiselyov, for example "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/okmij.org\/ftp\/Computation\/monads.html#LogicT",
                                "text": "this"
                            },
                            {
                                "type": "text",
                                "text": " backtracking paper (co-authored with Friedman) and several others in that section of his site. See also: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/okmij.org\/ftp\/kakuritu\/"
                            },
                            {
                                "type": "text",
                                "text": " for some tasty probabilistic programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1623850022.018700",
        "client_msg_id": "af77fba5-34ca-46f2-bd6f-b8d107f9f088",
        "text": "Ruby <https:\/\/github.com\/preston\/ruby-prolog> checking in <https:\/\/github.com\/wizardofosmium\/porolog>.  There are other older instances.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623830791.017000",
        "parent_user_id": "UN9SCH5RD",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "preston\/ruby-prolog",
                "title_link": "https:\/\/github.com\/preston\/ruby-prolog",
                "text": "A pure Ruby gem implemention of a Prolog-like DSL for AI and logical programming. - preston\/ruby-prolog",
                "fallback": "GitHub: preston\/ruby-prolog",
                "image_url": "https:\/\/opengraph.githubassets.com\/5c9f71394c47d424e85acdeb1b59046c12c8b18471b7dbb69340c59d2683c576\/preston\/ruby-prolog",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https:\/\/github.com\/preston\/ruby-prolog",
                "image_bytes": 98116,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/preston\/ruby-prolog"
            },
            {
                "service_name": "GitHub",
                "title": "wizardofosmium\/porolog",
                "title_link": "https:\/\/github.com\/wizardofosmium\/porolog",
                "text": "Plain Old Ruby Objects Prolog. Contribute to wizardofosmium\/porolog development by creating an account on GitHub.",
                "fallback": "GitHub: wizardofosmium\/porolog",
                "image_url": "https:\/\/repository-images.githubusercontent.com\/131847563\/b3754100-636a-11e9-995b-20d409b992c9",
                "from_url": "https:\/\/github.com\/wizardofosmium\/porolog",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 463056,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 2,
                "original_url": "https:\/\/github.com\/wizardofosmium\/porolog"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BLY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ruby "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/preston\/ruby-prolog"
                            },
                            {
                                "type": "text",
                                "text": " checking in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/wizardofosmium\/porolog"
                            },
                            {
                                "type": "text",
                                "text": ".  There are other older instances."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1623852518.019000",
        "client_msg_id": "0b2c2412-5017-4ce0-8074-38f26e620567",
        "text": "tl;dr Both SWI and Ciao modules explicitly export public predicates plus some complexity surrounding the passing other predicates \"meta predicates\" to the module.\n\nAnd here I was expecting something more along the lines of Ocaml's Parameterized Modules (aka Functors) <https:\/\/www.cs.cornell.edu\/courses\/cs3110\/2012sp\/lectures\/lec09-functors\/lec09.html>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623816794.015800",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JCf9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tl;dr Both SWI and Ciao modules explicitly export public predicates plus some complexity surrounding the passing other predicates \"meta predicates\" to the module.\n\nAnd here I was expecting something more along the lines of Ocaml's Parameterized Modules (aka Functors) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.cornell.edu\/courses\/cs3110\/2012sp\/lectures\/lec09-functors\/lec09.html"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]