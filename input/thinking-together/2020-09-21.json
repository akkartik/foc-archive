[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1600677014.067000",
        "client_msg_id": "d3827e51-6ff9-4be7-bd2f-ba0ef40808bb",
        "text": "<@UCUSW7WVD> Could you say a few more words about what you dislike in defining `square` as `dup *`? I always liked that sort of thing in FORTH, which is clouding my understanding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3j9B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Could you say a few more words about what you dislike in defining "
                            },
                            {
                                "type": "text",
                                "text": "square",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as "
                            },
                            {
                                "type": "text",
                                "text": "dup *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? I always liked that sort of thing in FORTH, which is clouding my understanding."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1600702839.067500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1600703068.000000"
        },
        "client_msg_id": "b4354a49-bb1f-41b2-a440-d77e47db518d",
        "text": "Me too! I always enjoy stack manipulation puzzles. This isn't about fixing something broken in Forth, but about seeing what part of Forth I can take with me to spreadsheets and example-oriented programming.\n\nI'm probably still failing to internalize the previous discussion at <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1599496562080600>, so this would be a great place for a rebuttal-by-screencast. Assume you've already run `(* 13 13)` (or its Forth equivalent) at your favorite REPL. How do you get from that expression to a definition of the function `square` in persistent form?\n\nThe assumption I'm making is that nobody calculates the square of 13 at the REPL by typing `13 dup *`. So it seems to me that we need some way to nudge people to massage `13 13 *` into a form that needs a single copy of the input(s).\n\nIt's just a thought experiment in the end. It's a frame of reference I'm taking on for the duration, and in the process I'm working against some of my own discomfort with spreadsheets and other 2D representations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1599496562080600",
                "fallback": "[September 7th, 2020 9:36 AM] garth: <https:\/\/news.ycombinator.com\/item?id=23811382|https:\/\/news.ycombinator.com\/item?id=23811382> great post on the lisp REPL’s difference from other REPLs. sidenote: can someone explain to me how lisp programmers go from talking to the REPL to updating the code in their source files? in talks and stuff it always seems to be with copy and paste. is that accurate?",
                "ts": "1599496562.080600",
                "author_id": "UHWC9PXBL",
                "author_subname": "Garth Goldwater",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "<https:\/\/news.ycombinator.com\/item?id=23811382|https:\/\/news.ycombinator.com\/item?id=23811382> great post on the lisp REPL’s difference from other REPLs. sidenote: can someone explain to me how lisp programmers go from talking to the REPL to updating the code in their source files? in talks and stuff it always seems to be with copy and paste. is that accurate?",
                "author_name": "Garth Goldwater",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UHWC9PXBL",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1599496562080600",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9vT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me too! I always enjoy stack manipulation puzzles. This isn't about fixing something broken in Forth, but about seeing what part of Forth I can take with me to spreadsheets and example-oriented programming.\n\nI'm probably still failing to internalize the previous discussion at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1599496562080600"
                            },
                            {
                                "type": "text",
                                "text": ", so this would be a great place for a rebuttal-by-screencast. Assume you've already run "
                            },
                            {
                                "type": "text",
                                "text": "(* 13 13)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (or its Forth equivalent) at your favorite REPL. How do you get from that expression to a definition of the function "
                            },
                            {
                                "type": "text",
                                "text": "square",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in persistent form?\n\nThe assumption I'm making is that nobody calculates the square of 13 at the REPL by typing "
                            },
                            {
                                "type": "text",
                                "text": "13 dup *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So it seems to me that we need some way to nudge people to massage "
                            },
                            {
                                "type": "text",
                                "text": "13 13 *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " into a form that needs a single copy of the input(s).\n\nIt's just a thought experiment in the end. It's a frame of reference I'm taking on for the duration, and in the process I'm working against some of my own discomfort with spreadsheets and other 2D representations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1600705869.068000",
        "client_msg_id": "b85fa6d1-ff18-4d95-9962-404a5a7f3221",
        "text": "This is an interesting question. When I look at `(* 13 13)` I see `169`. Or, to be more clear, when I see a form that operates only on _constants_, I think of it as a constant itself. So I would only execute a form like that one in a Lisp REPL using `eval-and-replace` semantics to calculate some constant I want to embed in the code. If, on the other had, I were planning to parameterize such a calculation I'd use a lambda (say, `#(* % %)` in Clojure notation), which lifts quite naturally to a `def` or `defn` if needed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w4ypl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is an interesting question. When I look at "
                            },
                            {
                                "type": "text",
                                "text": "(* 13 13)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I see "
                            },
                            {
                                "type": "text",
                                "text": "169",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Or, to be more clear, when I see a form that operates only on "
                            },
                            {
                                "type": "text",
                                "text": "constants",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I think of it as a constant itself. So I would only execute a form like that one in a Lisp REPL using "
                            },
                            {
                                "type": "text",
                                "text": "eval-and-replace",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " semantics to calculate some constant I want to embed in the code. If, on the other had, I were planning to parameterize such a calculation I'd use a lambda (say, "
                            },
                            {
                                "type": "text",
                                "text": "#(* % %)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Clojure notation), which lifts quite naturally to a "
                            },
                            {
                                "type": "text",
                                "text": "def",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "defn",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if needed."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1600710069.068300",
        "client_msg_id": "408892f9-c58a-4b10-8f7d-0f98c741a0d0",
        "text": "BTW, although I understand that you aren't trying to \"fix FORTH\" in any sense, some of what came up in these last few threads reminded me of this paper that talks about adding various functional programming constructs to FORTH starting from the fewest possible cominators:\n<http:\/\/soton.mpeforth.com\/flag\/jfar\/vol4\/no4\/article6.pdf>\n... and this classic about implementing a linear logic Lisp that compiles to FORTH:\n<https:\/\/hashingit.com\/elements\/research-resources\/1994-03-ForthStack.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2kK3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "BTW, although I understand that you aren't trying to \"fix FORTH\" in any sense, some of what came up in these last few threads reminded me of this paper that talks about adding various functional programming constructs to FORTH starting from the fewest possible cominators:\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/soton.mpeforth.com\/flag\/jfar\/vol4\/no4\/article6.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n... and this classic about implementing a linear logic Lisp that compiles to FORTH:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hashingit.com\/elements\/research-resources\/1994-03-ForthStack.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "Have there been similar approaches to this style of formatting? ",
        "files": [
            {
                "id": "F01BTLXH2JC",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UULA9D1GT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wfm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have there been similar approaches to this style of formatting? "
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1600718253.069500",
        "client_msg_id": "33BD9088-5DED-479F-82D7-9D4E29E22163",
        "thread_ts": "1600718253.069500",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1601106022.018800",
        "reply_users": [
            "UCUSW7WVD",
            "UULA9D1GT",
            "U013KEPEJ2H",
            "UDQBTJ211",
            "U013ZLJARC7"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1600718419.069800"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600719655.071100"
            },
            {
                "user": "U013KEPEJ2H",
                "ts": "1600720322.071600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1600721887.071900"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600722115.075500"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600722273.077700"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600722348.079200"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600722494.082000"
            },
            {
                "user": "UULA9D1GT",
                "ts": "1600722560.083800"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1600780444.096800"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1601106022.018800"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1600718419.069800",
        "client_msg_id": "7a08db95-a6d4-405d-9b06-c4c1e7947bb0",
        "text": "Should the division by 2 on line 106 be indented less? Just to make sure I'm following.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "093",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Should the division by 2 on line 106 be indented less? Just to make sure I'm following."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600719655.071100",
        "client_msg_id": "043D66DF-BE0D-418A-8CC6-E8181C0D0FD7",
        "text": "I put the line 106 division centered between the two parenthetically-cyan elements",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+eLb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I put the line 106 division centered between the two parenthetically-cyan elements"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013KEPEJ2H",
        "type": "message",
        "ts": "1600720322.071600",
        "edited": {
            "user": "U013KEPEJ2H",
            "ts": "1600722169.000000"
        },
        "client_msg_id": "cd400027-efb6-44d8-a5f3-99cd821c2299",
        "text": "i understand the limit of text editor means you cant have the `r` block actually parallel to the `l` block for the addition, but i'd find it more readable if lines 102\/103\/104 were atleast merged to give as much parallelism to the addition as possible?\n\nor put a different way, i'm taking it that the formatting of the division on new lines helps convey meaning by reference to traditional mathematic formatting... whereas, what meaning is being conveyed by putting the addition elements on new lines?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g39a9a5b84f2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/39a9a5b84f2368eac912ccb4a657ee5a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "",
            "real_name": "tj",
            "display_name": "tj",
            "team": "T5TCAFTA9",
            "name": "t22james",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y5W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i understand the limit of text editor means you cant have the "
                            },
                            {
                                "type": "text",
                                "text": "r",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " block actually parallel to the "
                            },
                            {
                                "type": "text",
                                "text": "l",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " block for the addition, but i'd find it more readable if lines 102\/103\/104 were atleast merged to give as much parallelism to the addition as possible?\n\nor put a different way, i'm taking it that the formatting of the division on new lines helps convey meaning by reference to traditional mathematic formatting... whereas, what meaning is being conveyed by putting the addition elements on new lines?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1600721887.071900",
        "client_msg_id": "907a612f-f0a0-42ca-a9a2-656a674279ab",
        "text": "<@UULA9D1GT> ohh, I see. Thanks. That makes sense and also seems like the major drawback here. (I know this isn't an answer to your question.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Oujj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UULA9D1GT"
                            },
                            {
                                "type": "text",
                                "text": " ohh, I see. Thanks. That makes sense and also seems like the major drawback here. (I know this isn't an answer to your question.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600722115.075500",
        "client_msg_id": "468C0EDC-2162-459D-8A51-7948508BD875",
        "text": "The rationale for 102-104 not merging is that I wanted each line to have only a single scale of operation — putting the left denominator on the same line as the right numerator reduces the negative space that assists the parsing of each chunk as visually separate ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rwy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The rationale for 102-104 not merging is that I wanted each line to have only a single scale of operation — putting the left denominator on the same line as the right numerator reduces the negative space that assists the parsing of each chunk as visually separate "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600722273.077700",
        "client_msg_id": "DCD9D659-1E79-4EF7-9698-4CEFCCCAF1BF",
        "text": "I want it to be clear that the left and right operands are rotationally symmetric around the plus — if I but the left denom and right numer on the same line the addition gets sort of hidden in the mixing of hierarchies",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EW5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want it to be clear that the left and right operands are rotationally symmetric around the plus — if I but the left denom and right numer on the same line the addition gets sort of hidden in the mixing of hierarchies"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600722348.079200",
        "client_msg_id": "49C4264D-4189-4348-9A61-2D601BD48564",
        "text": "This is all mostly for fun and is very much an critique of the inadequacies of text editors for math notation  ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uPP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is all mostly for fun and is very much an critique of the inadequacies of text editors for math notation  "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "smile",
                "users": [
                    "U013KEPEJ2H",
                    "UNV27TUKA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600722494.082000",
        "client_msg_id": "E843FE17-2AA8-4FA4-ACDA-6E84CE8995D5",
        "text": "I want the presented shape of the equation to be quickly parseable without having to remember which parentheses are paired as is common in single-line formulae",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BWlA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want the presented shape of the equation to be quickly parseable without having to remember which parentheses are paired as is common in single-line formulae"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UULA9D1GT",
        "type": "message",
        "ts": "1600722560.083800",
        "client_msg_id": "471B6491-6158-421D-AEFC-B3D234D4D8B2",
        "text": "Or if they are split into many separate variable definitions then the structure of the equation is even more obscured, requiring that sort of “thinking like a computer” to hold all disparate elements in mind",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2a7670ea20b3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-05\/972351691747_2a7670ea20b3372100b7_72.png",
            "first_name": "Gray",
            "real_name": "Gray Crawford",
            "display_name": "Gray",
            "team": "T5TCAFTA9",
            "name": "gray",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600718253.069500",
        "parent_user_id": "UULA9D1GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HUu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or if they are split into many separate variable definitions then the structure of the equation is even more obscured, requiring that sort of “thinking like a computer” to hold all disparate elements in mind"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600725204.087700",
        "client_msg_id": "33BF7DFD-1F0B-41B0-900C-3F1B75687EC3",
        "text": "this is vague and maybe irresponsible spitballing from a staying-on-topic perspective, but what if there was a kind of a stack shuffling operator, that split the stack n items down, and then pattern matched them back on top. so maybe you’d pass a series of symbols into it and transform the stack. eg ( n1 n2 — n1 n1 n2 )",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQLNZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is vague and maybe irresponsible spitballing from a staying-on-topic perspective, but what if there was a kind of a stack shuffling operator, that split the stack n items down, and then pattern matched them back on top. so maybe you’d pass a series of symbols into it and transform the stack. eg ( n1 n2 — n1 n1 n2 )"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600725235.088400",
        "client_msg_id": "C25C7BEC-98D5-4F26-B4C8-E19755F0BBC4",
        "text": "like... you could just pun the usual stack notation syntax ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DjD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like... you could just pun the usual stack notation syntax "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600725251.089100",
        "client_msg_id": "CC40D4F5-3CEE-489E-89C6-336E74469940",
        "text": "and from a ux perspective would feel a lot like drag and drop",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E9+3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and from a ux perspective would feel a lot like drag and drop"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600725297.090200",
        "client_msg_id": "3CE9455F-C351-45E7-9FE6-D71C379B96C7",
        "text": "would that break the ability to break apart programs anywhere? i’m not sure but i suspect not",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qqf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "would that break the ability to break apart programs anywhere? i’m not sure but i suspect not"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US6TKS2HW",
        "type": "message",
        "ts": "1600728073.090400",
        "client_msg_id": "489e6f0d-3749-4232-b6a6-2b5fad914e58",
        "text": "Recently stumbled into <https:\/\/withfig.com\/> which is trying to make the workflow of building custom tools easier.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "08d810dfba72",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-03\/891659417364_08d810dfba72ae74c1d2_72.jpg",
            "first_name": "",
            "real_name": "Raathi",
            "display_name": "Raathi",
            "team": "T5TCAFTA9",
            "name": "raathigesh92",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600195910.451200",
        "parent_user_id": "UE0ETTCG7",
        "attachments": [
            {
                "title": "Fig - Visual Apps &amp; Shortcuts for your Terminal",
                "title_link": "https:\/\/withfig.com\/",
                "text": "Fig is the App Store for your Terminal. Build visual apps that streamline Terminal workflows. Share apps with your team &amp; the community.",
                "fallback": "Fig - Visual Apps &amp; Shortcuts for your Terminal",
                "image_url": "https:\/\/withfig.com\/img\/fig_main_screenshot.png",
                "from_url": "https:\/\/withfig.com\/",
                "image_width": 303,
                "image_height": 250,
                "image_bytes": 596031,
                "service_icon": "https:\/\/withfig.com\/img\/icon-tmp-small.png",
                "service_name": "withfig.com",
                "id": 1,
                "original_url": "https:\/\/withfig.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0jqBs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recently stumbled into "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/withfig.com\/"
                            },
                            {
                                "type": "text",
                                "text": " which is trying to make the workflow of building custom tools easier."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1600756228.096200",
        "client_msg_id": "46f6c8a2-0f4a-4b36-adf7-789e70709c9a",
        "text": "<@UHWC9PXBL> you can do that in gforth with `{ n1 n2 } n1 n1 n2` syntax. (`{ ... }` introduces local bindings which you can reference at any point later.) I find it quite a useful feature when the word definition grows and juggles 3+ pieces of data",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600645382.040000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O5Sp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " you can do that in gforth with "
                            },
                            {
                                "type": "text",
                                "text": "{ n1 n2 } n1 n1 n2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax. ("
                            },
                            {
                                "type": "text",
                                "text": "{ ... }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " introduces local bindings which you can reference at any point later.) I find it quite a useful feature when the word definition grows and juggles 3+ pieces of data"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    }
]