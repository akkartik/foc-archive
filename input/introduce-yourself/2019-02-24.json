[
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551034989.002100",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551044337.000000"
        },
        "client_msg_id": "0753a2eb-1455-4b5b-967d-27326db40eec",
        "text": "<@UEQ6M68H0>, `#` is not intended to be a high-frequency character for humans - it might appear a lot in machine-generated code, but human-written code would use\n1. macros,\n2. LESv3 code, where you often use `.` instead of `#` as a \"C-like statement marker\" - the parser translates it to `#` - or\n3. languages such as Enhanced C# that use conventional keywords that are secretly translated to `#` internally.\n\nI think I chose `#` as a specialness marker because most languages _don't_ allow it in normal identifiers and don't use it as an operator either. I didn't want to step on existing toes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550368121.006600",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yo3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not intended to be a high-frequency character for humans - it might appear a lot in machine-generated code, but human-written code would use\n1. macros,\n2. LESv3 code, where you often use "
                            },
                            {
                                "type": "text",
                                "text": ".",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a \"C-like statement marker\" - the parser translates it to "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - or\n3. languages such as Enhanced C# that use conventional keywords that are secretly translated to "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " internally.\n\nI think I chose "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a specialness marker because most languages "
                            },
                            {
                                "type": "text",
                                "text": "don't",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " allow it in normal identifiers and don't use it as an operator either. I didn't want to step on existing toes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551041779.002800",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551041802.000000"
        },
        "client_msg_id": "d45959e8-5703-404e-9e6d-9bd1c80d14cc",
        "text": "\"the approaches to AI that are currently in vogue make a critical mistake: they focus way too much on _guessing_ what people want rather than _asking_ them what they want\"\n    Although this feels true, there's a lot to be said for just guessing - you can add it to a lot of existing products without much difficulty, and you can probably take it to market more quickly than if you needed to solve larger HCI\/PL problems. So I'd say past solutions have been valuable and useful, but now you're trying to take it to the \"next level\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544754436.089700",
        "parent_user_id": "UETJZ9V0T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lv6Cd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"the approaches to AI that are currently in vogue make a critical mistake: they focus way too much on "
                            },
                            {
                                "type": "text",
                                "text": "guessing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what people want rather than "
                            },
                            {
                                "type": "text",
                                "text": "asking",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " them what they want\"\n    Although this feels true, there's a lot to be said for just guessing - you can add it to a lot of existing products without much difficulty, and you can probably take it to market more quickly than if you needed to solve larger HCI\/PL problems. So I'd say past solutions have been valuable and useful, but now you're trying to take it to the \"next level\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551044745.004000",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551045039.000000"
        },
        "client_msg_id": "30e91b3c-7f58-4793-864a-fb857327b3f0",
        "text": "Hmm, I've been thinking that the key primitive we need is some form of reliable and performant reactivity, so that we build UIs in a declarative way that flows \"magically\" from the underlying data (before reactivity became popular, I framed it differently - I thought we needed \"propagating variables\". Almost the same thing except that I was trying to figure out how to support cyclic dependencies, like in a temperature converter, how to update the \"fahrenheit\" box when you change the \"celcius\" box and vice versa. I didn't entirely figure out that part...).\n\nWhile various other visual aids are useful, reactivity is the big thing in my mind. In this regard I suspect Vue.js is the best the JS world has so far (I have not enough experience to be sure.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544740548.088500",
        "parent_user_id": "UEQG5HC1W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iV8E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I've been thinking that the key primitive we need is some form of reliable and performant reactivity, so that we build UIs in a declarative way that flows \"magically\" from the underlying data (before reactivity became popular, I framed it differently - I thought we needed \"propagating variables\". Almost the same thing except that I was trying to figure out how to support cyclic dependencies, like in a temperature converter, how to update the \"fahrenheit\" box when you change the \"celcius\" box and vice versa. I didn't entirely figure out that part...).\n\nWhile various other visual aids are useful, reactivity is the big thing in my mind. In this regard I suspect Vue.js is the best the JS world has so far (I have not enough experience to be sure.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551045300.004700",
        "client_msg_id": "35645df7-8399-4424-8890-71eb06a12579",
        "text": "Hi Ivan - what's your motive for building a house in a remote forest with barely any internet? I live in Calgary btw, and wonder where this \"central\" Alberta is... like, a bit East of Edmonton?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1533405337.000033",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Dy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Ivan - what's your motive for building a house in a remote forest with barely any internet? I live in Calgary btw, and wonder where this \"central\" Alberta is... like, a bit East of Edmonton?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551067758.005200",
        "client_msg_id": "104bb59e-7533-44c6-a961-33641e65b1dc",
        "text": "At my current job - which involves some CUDA and nightmarishly tangled unportable code - I've been trying to find some time to look into Halide ( <http:\/\/halide-lang.org\/> ) as an alternative to standard CUDA, but other employees don't seem very interested (granted, I don't yet know if Halide is powerful enough for our purposes, but I want to at least find out.)\n\nAnyway, good luck Spencer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1536267783.000100",
        "parent_user_id": "UCNL0UQ90",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KCBqG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At my current job - which involves some CUDA and nightmarishly tangled unportable code - I've been trying to find some time to look into Halide ( "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/halide-lang.org\/"
                            },
                            {
                                "type": "text",
                                "text": " ) as an alternative to standard CUDA, but other employees don't seem very interested (granted, I don't yet know if Halide is powerful enough for our purposes, but I want to at least find out.)\n\nAnyway, good luck Spencer."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551069045.005400",
        "client_msg_id": "4ddfab09-6b88-42bb-afa6-b3107a4f6ab1",
        "text": "\"promiscuously adding dependencies\"\n\nAmen to that.... I instinctually resist adding dependencies to my programs. But why is that? Maybe a need to understand my system very well? Maybe the idea that it'll eventually have to be a web browser SPA and I don't want to rudely gobble up all the user's bandwidth? Maybe because my previous apps used to have to run on a 400MHz machine?\n\n\"you are more attuned to how you affect your environment. Your _externalities_\"\nPreach it brother! I think that's why I write a lot of documentation for my software, and where necessary, am concerned with backward and sometimes even forward compatibility... it's not _just_ that I want my software to be understood and liked, but that I don't want to waste other people's time either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1536962970.000100",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y6QE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"promiscuously adding dependencies\"\n\nAmen to that.... I instinctually resist adding dependencies to my programs. But why is that? Maybe a need to understand my system very well? Maybe the idea that it'll eventually have to be a web browser SPA and I don't want to rudely gobble up all the user's bandwidth? Maybe because my previous apps used to have to run on a 400MHz machine?\n\n\"you are more attuned to how you affect your environment. Your "
                            },
                            {
                                "type": "text",
                                "text": "externalities",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\"\nPreach it brother! I think that's why I write a lot of documentation for my software, and where necessary, am concerned with backward and sometimes even forward compatibility... it's not "
                            },
                            {
                                "type": "text",
                                "text": "just",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that I want my software to be understood and liked, but that I don't want to waste other people's time either."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551070179.005700",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551070223.000000"
        },
        "client_msg_id": "6b1e6385-b4fa-48ca-80bf-4450b3c4a1ea",
        "text": "\"I'm also very interested in the meta-problem of how to architect new technologies in a way that aligns people's and companies' incentives to increase their chances of getting developed and adopted.\"\n\nI'm interested to hear what you figure out! Us programming language designers have enough trouble convincing *each other* that our work is valuable. Persuading businessmen with power who only care about money... that's a whole other ball game.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540290578.000100",
        "parent_user_id": "UDJ2TKB99",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cHNI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"I'm also very interested in the meta-problem of how to architect new technologies in a way that aligns people's and companies' incentives to increase their chances of getting developed and adopted.\"\n\nI'm interested to hear what you figure out! Us programming language designers have enough trouble convincing "
                            },
                            {
                                "type": "text",
                                "text": "each other",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that our work is valuable. Persuading businessmen with power who only care about money... that's a whole other ball game."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551070345.006000",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551070380.000000"
        },
        "client_msg_id": "a77b7e54-ee0d-4570-9c14-7d5d3d6dbeb5",
        "text": "Oh yeah, Jetbrains MPS. It's one of those things that I keep thinking I really ought to learn about, but then... somehow... don't.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540825576.013200",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "plY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh yeah, Jetbrains MPS. It's one of those things that I keep thinking I really ought to learn about, but then... somehow... don't."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551071296.006600",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551071399.000000"
        },
        "client_msg_id": "537562ea-0767-4c80-8f19-32fc76c625cb",
        "text": "While it seems ridiculous that people with domain specific knowledge need to hire others to encode that knowledge, I think it will be necessary to offer some universal education to future children - not so much the traditional stuff like the syntax of Java and how to run javac, but \"computational thinking\", to think a bit more logically and to learn things that are more computer friendly (e.g. the line formula is commonly taught as y = mx + b, but ax + by + c = 0 generally works better in software. Bonus points if you know why.)\n\nI am a bit surprised, though, that nothing good enough to universally replace spreadsheets has caught on yet.\n\nMe, I want programming to *be* reinvented, but have decided that yes, I have a bunch of seemingly unique ideas I want to contribute, but I'd prefer to work mainly on core foundations - interop and lower-level stuff - and leave some of the reputedly more fun work, like visual programming interfaces, to others.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541621478.042100",
        "parent_user_id": "UDRKY9D3R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bmZPc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While it seems ridiculous that people with domain specific knowledge need to hire others to encode that knowledge, I think it will be necessary to offer some universal education to future children - not so much the traditional stuff like the syntax of Java and how to run javac, but \"computational thinking\", to think a bit more logically and to learn things that are more computer friendly (e.g. the line formula is commonly taught as y = mx + b, but ax + by + c = 0 generally works better in software. Bonus points if you know why.)\n\nI am a bit surprised, though, that nothing good enough to universally replace spreadsheets has caught on yet.\n\nMe, I want programming to "
                            },
                            {
                                "type": "text",
                                "text": "be",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reinvented, but have decided that yes, I have a bunch of seemingly unique ideas I want to contribute, but I'd prefer to work mainly on core foundations - interop and lower-level stuff - and leave some of the reputedly more fun work, like visual programming interfaces, to others."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1551073023.006900",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1551073445.000000"
        },
        "client_msg_id": "706e7b58-9bfb-44ad-bed2-9a0302123811",
        "text": "\"Web Console is an OS X application for creating and running custom plugins that wrap command line programs in web user interfaces.\"\n\nInteresting, I have been thinking that I wanted my programming language's standard library to automatically create a UI for choosing input to the program. For example, rather than write a `--help` screen that says\n\n    Options:\n    --compress:F  Compresses the file F\n\nyou would just express options as optional named arguments to \"main\" with display-attributes attached to them, to provide the label\/tooltop to show in the HTML UI, like\n\n    .entry main(\n        @label(\"File to compress:\")\n        compress: opt!filename)\n    {\n      if (compress) {\n        \/\/ TODO: whatever it was we\n        \/\/ planned to do with the file\n      }\n    }\n\nThen the HTML UI says\n\n  :white_large_square: File to compress: [*        ▾] [Browse]\n\n* this is an empty combo box with dropdown history of the user's previous choices\n\nYou could of course still use the app as a command-line app, and you could still write `--help` to be told about the `--compress` option, but the handling of `--help` would be auto-generated based on the attributes on the parameters to the entry point.\n\nMy system would also show output more visually, and support multiple entry points in a single app because why should I have to create a separate app for every entry point? That's inconvenient!\n\nWrapping arbitrary cmd-line apps sounds to me like a harder problem than building the feature into the programming language \/ standard library... but I don't really understand what it does just by looking at the gif in the readme.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541621478.042100",
        "parent_user_id": "UDRKY9D3R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCnZz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Web Console is an OS X application for creating and running custom plugins that wrap command line programs in web user interfaces.\"\n\nInteresting, I have been thinking that I wanted my programming language's standard library to automatically create a UI for choosing input to the program. For example, rather than write a "
                            },
                            {
                                "type": "text",
                                "text": "--help",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " screen that says\n\n    Options:\n    --compress:F  Compresses the file F\n\nyou would just express options as optional named arguments to \"main\" with display-attributes attached to them, to provide the label\/tooltop to show in the HTML UI, like\n\n    .entry main(\n        @label(\"File to compress:\")\n        compress: opt!filename)\n    {\n      if (compress) {\n        \/\/ TODO: whatever it was we\n        \/\/ planned to do with the file\n      }\n    }\n\nThen the HTML UI says\n\n  "
                            },
                            {
                                "type": "emoji",
                                "name": "white_large_square",
                                "unicode": "2b1c"
                            },
                            {
                                "type": "text",
                                "text": " File to compress: [*        ▾] [Browse]\n\n* this is an empty combo box with dropdown history of the user's previous choices\n\nYou could of course still use the app as a command-line app, and you could still write "
                            },
                            {
                                "type": "text",
                                "text": "--help",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be told about the "
                            },
                            {
                                "type": "text",
                                "text": "--compress",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " option, but the handling of "
                            },
                            {
                                "type": "text",
                                "text": "--help",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would be auto-generated based on the attributes on the parameters to the entry point.\n\nMy system would also show output more visually, and support multiple entry points in a single app because why should I have to create a separate app for every entry point? That's inconvenient!\n\nWrapping arbitrary cmd-line apps sounds to me like a harder problem than building the feature into the programming language \/ standard library... but I don't really understand what it does just by looking at the gif in the readme."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]