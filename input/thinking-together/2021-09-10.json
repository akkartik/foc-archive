[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1631257999.168200",
        "client_msg_id": "c1b512ed-2a30-427c-a99e-9fbefd716b4f",
        "text": "Thanks <@U027P92A0N5> for the update. I do understand the need for monad transformers (as opposed to plain monads) from a mathematical point of view, but I was hoping that in the meantime someone had come up with a nicer way of packaging all that - or a different mechanism altogether.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QG5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U027P92A0N5"
                            },
                            {
                                "type": "text",
                                "text": " for the update. I do understand the need for monad transformers (as opposed to plain monads) from a mathematical point of view, but I was hoping that in the meantime someone had come up with a nicer way of packaging all that - or a different mechanism altogether."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1631260899.168400",
        "client_msg_id": "7a3203e5-1535-4c09-b808-68f4951f5cdb",
        "text": "<@UJBAJNFLK> I don't think there's any other approach to composing monads specifically apart from monad transformers due to mathematical properties of the construction. OTOH there are other approaches to formalising _effects_ (at least a big chunk of them), Algebraic Effects (and Handlers) being one and Free Monadic DSLs being another.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xoT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I don't think there's any other approach to composing monads specifically apart from monad transformers due to mathematical properties of the construction. OTOH there are other approaches to formalising "
                            },
                            {
                                "type": "text",
                                "text": "effects",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (at least a big chunk of them), Algebraic Effects (and Handlers) being one and Free Monadic DSLs being another."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1631287181.168700",
        "client_msg_id": "8C0F0773-56C0-497D-95CB-652494CA9871",
        "text": "I know a lot of us here have been influenced by talks like Bret Victor’s “Inventing on Principle”. But I’m curious about your favorite papers that are somehow related to the future of coding. I’ll start with mine.\n\nPILOT: A Step Toward Man-Computer Symbiosis - Warren Teitelman\nThis is actually a thesis, so it is a bit long, though much of that length is taken up with a transcript. I will admit there is a lot in this paper that isn’t great. The resulting system is almost certainly something no one would want to use today. But yet in it are such interesting ideas. \nIt is often considered to be the paper that introduced aspect oriented programming, but I believe that sells it a bit short. PILOT is an integrated, live, editing and computational system. It’s goal is to allow programmers to 1) customize their interface and syntax, 2) edit programs they are unfamiliar with 3) make changes not just to current functions in the program, but future ones as well 4) control how the program itself executes and so much more. It is a bit of a historical trip, but includes so many fascinating ideas.\n\nProgramming as Theory Building - Peter Naur\nNaur lays out a view of the activity of programming that is both radical and yet highly attractive. A key consequence on his theory is that the real end product of programming is not the source code, not the build artifact, not the running system, but the knowledge that a programmer builds. So much follows from this. It is a fascinating paper that I highly recommend reading.\n\nThe Structure of a Programming Language Revolution - Richard P Gabriel\nA beautiful paper about the changes to programming language research that Gabriel has seen over his career. I will just leave you with this quote that sets the mood for the paper.\n&gt; That night I pulled the paper down from the ACM server and read it while outside enormous puffed clouds dwelled overhead, lit from beneath by the town of Porto de Galinhas on the Brazilian coast; the smell of burning sugarcane and bitter ocean pushed into my room.\nWhat are your favorites? What papers have really pushed you in a particular direction? What papers do you think people should read, even if you disagree with them? Whatever the criteria for the paper being good, I want to know about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "reply_count": 41,
        "reply_users_count": 7,
        "latest_reply": "1631744619.071100",
        "reply_users": [
            "UJBAJNFLK",
            "UG0EL18H3",
            "UK3LH8CF5",
            "UCUSW7WVD",
            "URLP9FWR3",
            "UML4ZEKDK",
            "UDQBTJ211"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1631299627.172600"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1631476913.000500"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1631491473.004100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1631533446.005900"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631600828.011300"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631600882.011500"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631600927.011700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1631604052.011900"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631604393.012100"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631604914.012300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1631608723.012500"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609635.012700"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609680.012900"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609701.013100"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609765.013300"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609891.013500"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609931.013700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1631609932.013900"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631609971.014200"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1631610101.014400"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631610275.014600"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631610675.014800"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631610966.015000"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1631614317.015200"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631614651.015400"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631614815.015600"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1631615048.015800"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631615228.016000"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1631615524.016200"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631615530.016400"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631615582.016600"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1631615701.016800"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631616601.017000"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631616715.017200"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631617580.017400"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1631665020.040800"
            },
            {
                "user": "URLP9FWR3",
                "ts": "1631686491.041800"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1631710240.056100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1631710517.056300"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1631737098.070000"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1631744619.071100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E8Q8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know a lot of us here have been influenced by talks like Bret Victor’s “Inventing on Principle”. But I’m curious about your favorite papers that are somehow related to the future of coding. I’ll start with mine.\n\nPILOT: A Step Toward Man-Computer Symbiosis - Warren Teitelman\nThis is actually a thesis, so it is a bit long, though much of that length is taken up with a transcript. I will admit there is a lot in this paper that isn’t great. The resulting system is almost certainly something no one would want to use today. But yet in it are such interesting ideas. \nIt is often considered to be the paper that introduced aspect oriented programming, but I believe that sells it a bit short. PILOT is an integrated, live, editing and computational system. It’s goal is to allow programmers to 1) customize their interface and syntax, 2) edit programs they are unfamiliar with 3) make changes not just to current functions in the program, but future ones as well 4) control how the program itself executes and so much more. It is a bit of a historical trip, but includes so many fascinating ideas.\n\nProgramming as Theory Building - Peter Naur\nNaur lays out a view of the activity of programming that is both radical and yet highly attractive. A key consequence on his theory is that the real end product of programming is not the source code, not the build artifact, not the running system, but the knowledge that a programmer builds. So much follows from this. It is a fascinating paper that I highly recommend reading.\n\nThe Structure of a Programming Language Revolution - Richard P Gabriel\nA beautiful paper about the changes to programming language research that Gabriel has seen over his career. I will just leave you with this quote that sets the mood for the paper.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That night I pulled the paper down from the ACM server and read it while outside enormous puffed clouds dwelled overhead, lit from beneath by the town of Porto de Galinhas on the Brazilian coast; the smell of burning sugarcane and bitter ocean pushed into my room."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhat are your favorites? What papers have really pushed you in a particular direction? What papers do you think people should read, even if you disagree with them? Whatever the criteria for the paper being good, I want to know about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "USH01JEDQ",
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "U85HCL7JP",
                    "U029GEPS8Q3",
                    "U027P92A0N5",
                    "U02DC8Z6CPP",
                    "U01QDH7EKL7",
                    "UMVFWPZ36"
                ],
                "count": 10
            },
            {
                "name": "wink",
                "users": [
                    "UC2A2ARPT",
                    "U02DC8Z6CPP",
                    "U01QDH7EKL7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1631290940.169200",
        "client_msg_id": "05e6e5d6-f944-4812-84fb-821d8bb4d1fd",
        "text": "<@UCUSW7WVD> but if we have no exceptions at all, what to do when dividing by zero, or running out of resources?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vs=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " but if we have no exceptions at all, what to do when dividing by zero, or running out of resources?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631292576.169400",
        "client_msg_id": "3f2da1ae-fdf3-43b2-a0a7-68d900575818",
        "text": "Abort? Though I'm curious what <@UE6EFEPTQ> had in mind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ibDWO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Abort? Though I'm curious what "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " had in mind."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1631293032.169600",
        "client_msg_id": "61973102-992c-470d-80cb-a09c86359060",
        "text": "But what about if it is a recoverable issue?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XuGuM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But what about if it is a recoverable issue?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631293158.169800",
        "client_msg_id": "7509756b-1b7c-4521-84f7-ccc16f2c8198",
        "text": "Isn't that a property of the runtime rather than the issue? A sufficiently advanced runtime can probably recover from any error. The question is whether that's a good use of resources and complexity budget.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZM5cw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't that a property of the runtime rather than the issue? A sufficiently advanced runtime can probably recover from any error. The question is whether that's a good use of resources and complexity budget."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1631293750.170000",
        "client_msg_id": "da5bd47a-68fc-431a-a359-dfc867780db6",
        "text": "Sometimes it is easy to check in advance whether I will likely run out of resources when trying to get an exact result, and then I can switch to the heuristic which provides me a decent estimate. But sometimes doing that check in advance can be arbitrary expensive, maybe even more expensive than just running the computation. In that case it is nice to just run the computation, and in case I run out of resources, recover and run the heuristic instead.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aSJEj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sometimes it is easy to check in advance whether I will likely run out of resources when trying to get an exact result, and then I can switch to the heuristic which provides me a decent estimate. But sometimes doing that check in advance can be arbitrary expensive, maybe even more expensive than just running the computation. In that case it is nice to just run the computation, and in case I run out of resources, recover and run the heuristic instead."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631293803.170200",
        "client_msg_id": "eb9b97db-188e-4b03-86f7-88fbf9ce5a33",
        "text": "For sure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQeNj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For sure."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631294016.170400",
        "client_msg_id": "c5b72dd2-5eab-4a65-9d0a-ae82ddd0fc5b",
        "text": "You can eliminate overflow exceptions by having a tower of numerical types like Lisp does. You can eliminate divide by zero exceptions by having a well defined representation for Infinity like in IEEE floating point. You can eliminate recoverable out of memory errors by running a GC.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R4P\/f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can eliminate overflow exceptions by having a tower of numerical types like Lisp does. You can eliminate divide by zero exceptions by having a well defined representation for Infinity like in IEEE floating point. You can eliminate recoverable out of memory errors by running a GC."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1631294050.170600",
        "client_msg_id": "153a2736-2c49-480e-b0ba-c7bbcf459996",
        "text": "synchronous languages (Lucid, Esterel, Lustre) have a pretty qualitatively different experience of time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zOO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "synchronous languages (Lucid, Esterel, Lustre) have a pretty qualitatively different experience of time"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1631294566.170800",
        "client_msg_id": "39dfe91c-e6a0-4a78-8bfe-37429789970f",
        "text": "The essay on \"reality has a lot of details\" was a fun read. I used to say \"knowledge is fractal\" when we were working on the data model for Wikidata",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vcEGw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The essay on \"reality has a lot of details\" was a fun read. I used to say \"knowledge is fractal\" when we were working on the data model for Wikidata"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1631294634.171000",
        "client_msg_id": "fd2a1e8d-3bb3-4196-a9da-f23fd4b2c293",
        "text": "How does GC help with recoverable OOM errors?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fs9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How does GC help with recoverable OOM errors?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1631294886.171200",
        "client_msg_id": "1f9323e0-0a28-4d9f-ba69-4832d901e10e",
        "text": "One way to implement GC is to trigger it when heap is exhausted. A copying collector runs when half the heap is exhausted, but mark and sweep can in principle run to 100%. Then abort if nothing could be reclaimed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bOLcU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One way to implement GC is to trigger it when heap is exhausted. A copying collector runs when half the heap is exhausted, but mark and sweep can in principle run to 100%. Then abort if nothing could be reclaimed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1631295322.171500",
        "client_msg_id": "44eadc90-f937-40cc-8e35-8cec48e67700",
        "text": "Great references and exploration of the topic — thanks everyone.\n\n<@UFPPABQ7P>\n&gt; keeping value in the stack for weeks at a time\nI love this idea. I'm so accustomed to non-live programming that I forget about the completely different sensation of time that you get from a live environment, where state is can be thought of as non-volatile by default.\n\n<@UDQBTJ211> — I like that your two comments are \"here's why [existing thing] is what it is\" and \"here's what I want to exist\". Both make sense to me!\n\n<@UBN9AFS0N> — Queued! Though unlike Lamport's earlier work (you know, _the hits_), this one looks like it might fly over my head a bit :$\n\n<@UJFN50C00> — Croquet sure is interesting, hey? Though I'm not sure how it relates here — I can imagine ways, but if you had something specific about it you wanted to highlight that'd be appreciated.\n\n<@UJZS8UUJV> — You're right, I under-considered what I was saying there. I was focused on pointing out that you _can_ have all that conventionally \"functional\" stuff within a programming system that does feel very mechanical \/ process-oriented. I didn't consider enough whether it's possible to have the non-FP stuff within a system that feels timeless. Good point, will have to think about this some more.\n\n<@UEBG0NPDK> — Nice pulls! I suppose the same applies to RT OSes, CAN Bus (etc), and perhaps even programming within a high-end game engine (eg: frame cadence, Carmack's preference for algorithms that are slower average-case with less variability, etc). Would love to just be able to just... order a study on this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iag",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great references and exploration of the topic — thanks everyone.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "keeping value in the stack for weeks at a time"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this idea. I'm so accustomed to non-live programming that I forget about the completely different sensation of time that you get from a live environment, where state is can be thought of as non-volatile by default.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " — I like that your two comments are \"here's why [existing thing] is what it is\" and \"here's what I want to exist\". Both make sense to me!\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " — Queued! Though unlike Lamport's earlier work (you know, "
                            },
                            {
                                "type": "text",
                                "text": "the hits",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), this one looks like it might fly over my head a bit :$\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UJFN50C00"
                            },
                            {
                                "type": "text",
                                "text": " — Croquet sure is interesting, hey? Though I'm not sure how it relates here — I can imagine ways, but if you had something specific about it you wanted to highlight that'd be appreciated.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UJZS8UUJV"
                            },
                            {
                                "type": "text",
                                "text": " — You're right, I under-considered what I was saying there. I was focused on pointing out that you "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have all that conventionally \"functional\" stuff within a programming system that does feel very mechanical \/ process-oriented. I didn't consider enough whether it's possible to have the non-FP stuff within a system that feels timeless. Good point, will have to think about this some more.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " — Nice pulls! I suppose the same applies to RT OSes, CAN Bus (etc), and perhaps even programming within a high-end game engine (eg: frame cadence, Carmack's preference for algorithms that are slower average-case with less variability, etc). Would love to just be able to just... order a study on this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1631295788.171700",
        "client_msg_id": "4d67be97-5bad-41e3-ad61-28c77dfdf110",
        "text": "Currently if you've run out of memory or disk, applications usually behave very badly, failing silently or crashing, maybe occasionally expiring with a meaningful warning. It's usually the operating system's problem at this stage. So I don't think that's the best example of an exception!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SNfFa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently if you've run out of memory or disk, applications usually behave very badly, failing silently or crashing, maybe occasionally expiring with a meaningful warning. It's usually the operating system's problem at this stage. So I don't think that's the best example of an exception!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1631295822.171900",
        "client_msg_id": "75d9ba33-ea58-4b75-94d0-64f53e2aeab7",
        "text": "Divide by zero is infinity which is a domain result not an exception",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YsUR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Divide by zero is infinity which is a domain result not an exception"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1631295853.172200",
        "client_msg_id": "5e550fde-6bd1-4587-a413-70c3bc04a186",
        "text": "Let's try to find a better example! :blush:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b5d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let's try to find a better example! "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1631299627.172600",
        "client_msg_id": "c39b5cf7-37de-4530-b210-fee7fef833c9",
        "text": "Beyond Programming Languages - Terry Winograd (1979)\nDiscusses higher-level programming which is less about algorithms and data structures and more about different views on a complex software system that can be manipulated by programmers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=r2z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beyond Programming Languages - Terry Winograd (1979)\nDiscusses higher-level programming which is less about algorithms and data structures and more about different views on a complex software system that can be manipulated by programmers."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UG0EL18H3",
                    "U02DC8Z6CPP",
                    "U013ZLJARC7"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1631319396.172900",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1631337808.000000"
        },
        "client_msg_id": "2c82c231-7f71-4c0b-836f-aadbab761311",
        "text": "ok, stream of conciousness incoming...\n\nOn the concept of math vs mechanics, I perceive math as this vast graph that always exists, but in imagination. Mechanics is about materializing parts of this graph in some physical form. The machine manifests a subset of this graph, and _traverses_ to other nodes, pulling in more and more of this graph, from the imaginary to the physical, as physical time progresses. If you type `2 + 3` in a system, you've got a graph with three nodes (2, 3, +, connected in a nice tree) and after some time, you've got a 4th node (5, connected to the [2,3+] bundle of nodes), but in mathland all 4 nodes (and the edges and more) pre-existed.\n\nOn the intersection of these ideas, CRDTs come to mind. You have the semi-lattice, which is very mathematical and static. However you have the actual values at different nodes, which correspond to one node in the lattice at any point in time, but they change over time and eventually _walk up_ the math lattice to meet at the top.\n\nCroquet came to my mind as well when reading the prompt. On the surface it is full-mechanical. The machines moves, step by step, and is implemented in that style. However look between steps - each step is functional, it *must* be deterministic - that's what keeps all the different systems in sync. There is no logical time within a step (e.g. can be considered instantaneous.. the next input cannot interrupt a step).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631156760.159500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SQ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, stream of conciousness incoming...\n\nOn the concept of math vs mechanics, I perceive math as this vast graph that always exists, but in imagination. Mechanics is about materializing parts of this graph in some physical form. The machine manifests a subset of this graph, and "
                            },
                            {
                                "type": "text",
                                "text": "traverses",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to other nodes, pulling in more and more of this graph, from the imaginary to the physical, as physical time progresses. If you type "
                            },
                            {
                                "type": "text",
                                "text": "2 + 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a system, you've got a graph with three nodes (2, 3, +, connected in a nice tree) and after some time, you've got a 4th node (5, connected to the [2,3+] bundle of nodes), but in mathland all 4 nodes (and the edges and more) pre-existed.\n\nOn the intersection of these ideas, CRDTs come to mind. You have the semi-lattice, which is very mathematical and static. However you have the actual values at different nodes, which correspond to one node in the lattice at any point in time, but they change over time and eventually "
                            },
                            {
                                "type": "text",
                                "text": "walk up",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the math lattice to meet at the top.\n\nCroquet came to my mind as well when reading the prompt. On the surface it is full-mechanical. The machines moves, step by step, and is implemented in that style. However look between steps - each step is functional, it *must* be deterministic - that's what keeps all the different systems in sync. There is no logical time within a step (e.g. can be considered instantaneous.. the next input cannot interrupt a step)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]