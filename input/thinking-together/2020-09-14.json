[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1600093272.388600",
        "client_msg_id": "5cd6bcd9-c030-4302-98df-4194b2ceef9e",
        "text": "To learn more about the purpose of each channel, please see our <https:\/\/futureofcoding.org\/member-handbook|Member Handbook> (...work-in-progress, I'm-finishing-it-in-the-cracks-of-my-spare-time-wah).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600031168.386700",
        "parent_user_id": "U01ASF5K29J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QAd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To learn more about the purpose of each channel, please see our "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/member-handbook",
                                "text": "Member Handbook"
                            },
                            {
                                "type": "text",
                                "text": " (...work-in-progress, I'm-finishing-it-in-the-cracks-of-my-spare-time-wah)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01ASF5K29J",
        "type": "message",
        "ts": "1600094539.389000",
        "client_msg_id": "a8d4562b-fb47-45af-a4f2-6336c5c02689",
        "text": "Ah, thanks all",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga729c40f658",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a729c40f6585350ce8a4ecad4778bbef.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "Anthony Bramley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "doc.wav.07",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600031168.386700",
        "parent_user_id": "U01ASF5K29J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mujG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, thanks all"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1600118053.389200",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600180106.000000"
        },
        "client_msg_id": "b08170f8-3f71-4b7b-827c-11114047172e",
        "text": "<@U5STGTB3J>\n&gt; Then read this whole blog in chronological order (it’s not as much content as it seems): <https:\/\/chomskyalexander.blogspot.com\/?m=1>\nI went through all of the blogposts and it was pretty intriguing to see him combine Chomsky’s and Christopher Alexander’s work. I have only read Notes on the Synthesis of Form by him and the bibliography of it have sent me inquiring in a lot of directions. I would love to read up APL and NoC sometime.\n\nI loved the idea of how he thought of unfolding as in a morphogenesis of a biological organism can be brought into computer programming. This would be a really fertile area and I want to check out what he has done on <https:\/\/www.corememory.org\/> I already love the diagramming he has done for it. Pretty intriguing stuff. I will dig into these a bit more and report back. Thanks for the share!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zNhd4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then read this whole blog in chronological order (it’s not as much content as it seems): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/chomskyalexander.blogspot.com\/?m=1"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I went through all of the blogposts and it was pretty intriguing to see him combine Chomsky’s and Christopher Alexander’s work. I have only read Notes on the Synthesis of Form by him and the bibliography of it have sent me inquiring in a lot of directions. I would love to read up APL and NoC sometime.\n\nI loved the idea of how he thought of unfolding as in a morphogenesis of a biological organism can be brought into computer programming. This would be a really fertile area and I want to check out what he has done on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.corememory.org\/"
                            },
                            {
                                "type": "text",
                                "text": " I already love the diagramming he has done for it. Pretty intriguing stuff. I will dig into these a bit more and report back. Thanks for the share!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1600118540.395300",
        "client_msg_id": "33d0c240-982b-4cda-bc02-81b03332e23f",
        "text": "<@UHWC9PXBL> Out of the ones listed there I am unfamiliar of:\n• kernel\/vau\/f-expressions: No idea what these are.\n• programming should eat itself (Is this the work by Nada Amin?)\nBeen out of touch with Clojure community for a while. Would love to know where these things are headed:\n• the work going on at red planet labs\n• meander, another clojure library\n•  stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)\n• towers of interpreters: Is this related to Nada Amin’s work on the color languages? Black, Pink, Purple et al.?\n• f-algebras: Would love to know how F-Algebras fit into this scheme. I have been looking at initial and final algebras, though they seem squarely situated in the algebraic tradition of semantics now. Is there a more accessible work done for programmers here?\n• recursion schemes: Would love to know more about this one\n• defunctionalization and refunctionalization: I am familiar of work done on this by James Koppel. Would you know of other good resources?\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GuI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Out of the ones listed there I am unfamiliar of:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "kernel\/vau\/f-expressions: No idea what these are."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "programming should eat itself (Is this the work by Nada Amin?)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Been out of touch with Clojure community for a while. Would love to know where these things are headed:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the work going on at red planet labs"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "meander, another clojure library"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": " stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "towers of interpreters: Is this related to Nada Amin’s work on the color languages? Black, Pink, Purple et al.?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "f-algebras: Would love to know how F-Algebras fit into this scheme. I have been looking at initial and final algebras, though they seem squarely situated in the algebraic tradition of semantics now. Is there a more accessible work done for programmers here?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "recursion schemes: Would love to know more about this one"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "defunctionalization and refunctionalization: I am familiar of work done on this by James Koppel. Would you know of other good resources?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1600118574.396000",
        "client_msg_id": "3B6D996E-B87F-4798-A37C-8C3435AFA5D7",
        "text": "Tip: skip APL and read _A Timeless Way of Building_ instead, before moving on to _Nature of Order_. APL is actually not that relevant. ATWoB explains the idea behind pattern languages much better and is more of a philosophy book. Some more thoughts here: <https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21|https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21>\n\n(I’ve been reading on, almost done with it, but stopped tweeting about it.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/stefanlesser|@stefanlesser>: Coincidentally, I was just skimming through somebody else’s bookshelf and found this. I guess I’ll take that as a sign and will finally read it. A good opportunity to try this “book reading live tweets” thing. <https:\/\/pbs.twimg.com\/media\/EgSB1NwX0AAhAyN.jpg>",
                "ts": 1598375093,
                "author_name": "Stefan Lesser",
                "author_link": "https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/378800000350383902\/ea834338bc94043c1d14c94538e39eda_normal.jpeg",
                "author_subname": "@stefanlesser",
                "text": "Coincidentally, I was just skimming through somebody else’s bookshelf and found this. I guess I’ll take that as a sign and will finally read it. A good opportunity to try this “book reading live tweets” thing. <https:\/\/pbs.twimg.com\/media\/EgSB1NwX0AAhAyN.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EgSB1NwX0AAhAyN.jpg",
                "image_width": 1200,
                "image_height": 1200,
                "image_bytes": 349689,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QL8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tip: skip APL and read "
                            },
                            {
                                "type": "text",
                                "text": "A Timeless Way of Building",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead, before moving on to "
                            },
                            {
                                "type": "text",
                                "text": "Nature of Order",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". APL is actually not that relevant. ATWoB explains the idea behind pattern languages much better and is more of a philosophy book. Some more thoughts here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21",
                                "text": "https:\/\/twitter.com\/stefanlesser\/status\/1298305359824789509?s=21"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(I’ve been reading on, almost done with it, but stopped tweeting about it.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1600119732.398400",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600119794.000000"
        },
        "client_msg_id": "26f5f6c5-d2a2-47fa-b9df-2f4f50825ff3",
        "text": "<@U5STGTB3J>\n&gt; Here’s something I’ve been looking into for a while that I didn’t see you mention specifically: the connection between\n&gt; (embedded) domain specific languages\n&gt; parser combinators\n&gt; abstract algebra\n&gt; transducers (you kind of mention that with generators\/iterators, I think)\n&gt; transformation passes (towers of interpreters?)\nI will definitely go through these and attempt to catalogue them on the page. I have renamed it to morphisms of computational structures to capture more of these morphisms. I think it would also help me bring in work like that of Hoare\/Milner and talk about them if I go a bit more general than control constructs.\n&gt; \n&gt; They all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. \n&gt; They\n&gt;  all represent a set of well-defined composable entities that together \n&gt; form something like a grammar (some more directly than others). \n&gt; They\n&gt;  all in a sense resemble words of a language, which can be combined to \n&gt; describe a lower level thing in more detail (-&gt; Alexander’s Pattern \n&gt; Language). \n&gt; They all enable and\/or are based on a fundamentally \n&gt; recursive pattern which allows them to be used on various levels of \n&gt; abstraction at the same time; they’re something like an abstraction of \n&gt; an abstraction, if that makes sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DvZlW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here’s something I’ve been looking into for a while that I didn’t see you mention specifically: the connection between\n(embedded) domain specific languages\nparser combinators\nabstract algebra\ntransducers (you kind of mention that with generators\/iterators, I think)\ntransformation passes (towers of interpreters?)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI will definitely go through these and attempt to catalogue them on the page. I have renamed it to morphisms of computational structures to capture more of these morphisms. I think it would also help me bring in work like that of Hoare\/Milner and talk about them if I go a bit more general than control constructs.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThey all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. \nThey\n all represent a set of well-defined composable entities that together \nform something like a grammar (some more directly than others). \nThey\n all in a sense resemble words of a language, which can be combined to \ndescribe a lower level thing in more detail (-> Alexander’s Pattern \nLanguage). \nThey all enable and\/or are based on a fundamentally \nrecursive pattern which allows them to be used on various levels of \nabstraction at the same time; they’re something like an abstraction of \nan abstraction, if that makes sense?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1600119732.398600",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600120053.000000"
        },
        "client_msg_id": "26f5f6c5-d2a2-47fa-b9df-2f4f50825ff3",
        "text": "You are pretty much resonant with the intuitions that I have had on it. May I invite your attention to 3 resources which I think are aligned with these descriptions?\n\n1\/ Universal Algebra is the study of these algebraic structures in a general setting. There’s a really rigorous way in which a unit becomes a list becomes a tree becomes a lattice becomes a (a)cyclic graph. These incidence structures I feel form a rigorous hierarchy by the nature of properties they gain\/lose (reflexivity, symmetry, transitivity). This alternating (ir)regularity I think continue in other structures like magma, monoid, (quasi\/semi)groups, rings, fields. All these take in operators as their signatures and spawn hierarchical (and heterarchical) structures which then gets projected\/lifted for various computational purposes. What I find to be severely missing in this field is a visualization of how these abstract algebra structures really look like and this is one of the central things that I’m working towards.\n\n2\/ The ideas I summed up above leads us to topology being a general setting in which these ideas can be given form. I came across this crazy good blogpost a while ago, that extends Harper’s computational trinitarianism to quadritarianism and beyond: <http:\/\/comonad.com\/reader\/2018\/computational-quadrinitarianism-curious-correspondences-go-cubical\/>\n\nIn essence, its a summary of the mathematical correspondences that have been getting unearthed with regards to computational structures. I think the author should turn that into a book with some amazing diagrams and it would really change the game of how programming world sees its connection with algebra\/higher mathematics.\n\n3\/ Your idea of abstractions of abstractions and recursion as the fundamental idea and tying it up with Chomksy is pretty striking. I’m out of my depth to exactly point out how, but each level in Chomsky hierarchy I think is realized by reflexive recursion that gives it more degrees of freedom to explore distinct structures. This was my first jibe at it: <https:\/\/twitter.com\/prathyvsh\/status\/1304667510101295105>\n\nBut there’s also this aspect of mirroring \/ symmetry that comes out which ties it up with graphs and abstract algebra. This is one place I want to develop my intuitions and Ershov Hierarchy \/ Turing Jumps are a key part of the puzzle: <https:\/\/en.wikipedia.org\/wiki\/Turing_jump> This is one place where I think recursion on recursion is grounded in a mathematical setting on arithmetic hierarchy. It also ties it up to complexity studies. I would also like to add something about Kant’s philosophy with respect to all of this, but suffice to say that his philosophy helped influence the development of topology and category theory.\n\nYeah, so bottomline is, if we develop sufficient rune reading powers into mathematics at the moment, I think there’s a tonne of wealth of knowledge hiding behind all of these. But there’s also another way to realize these if we start with good fundamentals, explore and reflect. Because all that is being studied there will reflect as problems\/leverage points in our own systems of making. Which is why I love and look forward to see how some of the people solve problems here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/prathyvsh|@prathyvsh>: A way to think about Chomsky Hierarchy:\n\nType 3: Regular — You play by a set of rules\nType 2: Context Free — You play by the same set of rules in contexts you choose\nType 1: Context Sensitive — You choose the rules and contexts by inferring from how you played so far.",
                "ts": 1599891948,
                "author_name": "Prathyush",
                "author_link": "https:\/\/twitter.com\/prathyvsh\/status\/1304667510101295105",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1157092207075061760\/v_xB---l_normal.jpg",
                "author_subname": "@prathyvsh",
                "text": "A way to think about Chomsky Hierarchy:\n\nType 3: Regular — You play by a set of rules\nType 2: Context Free — You play by the same set of rules in contexts you choose\nType 1: Context Sensitive — You choose the rules and contexts by inferring from how you played so far.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/prathyvsh\/status\/1304667510101295105",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/prathyvsh\/status\/1304667510101295105",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uz5oe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You are pretty much resonant with the intuitions that I have had on it. May I invite your attention to 3 resources which I think are aligned with these descriptions?\n\n1\/ Universal Algebra is the study of these algebraic structures in a general setting. There’s a really rigorous way in which a unit becomes a list becomes a tree becomes a lattice becomes a (a)cyclic graph. These incidence structures I feel form a rigorous hierarchy by the nature of properties they gain\/lose (reflexivity, symmetry, transitivity). This alternating (ir)regularity I think continue in other structures like magma, monoid, (quasi\/semi)groups, rings, fields. All these take in operators as their signatures and spawn hierarchical (and heterarchical) structures which then gets projected\/lifted for various computational purposes. What I find to be severely missing in this field is a visualization of how these abstract algebra structures really look like and this is one of the central things that I’m working towards.\n\n2\/ The ideas I summed up above leads us to topology being a general setting in which these ideas can be given form. I came across this crazy good blogpost a while ago, that extends Harper’s computational trinitarianism to quadritarianism and beyond: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/comonad.com\/reader\/2018\/computational-quadrinitarianism-curious-correspondences-go-cubical\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn essence, its a summary of the mathematical correspondences that have been getting unearthed with regards to computational structures. I think the author should turn that into a book with some amazing diagrams and it would really change the game of how programming world sees its connection with algebra\/higher mathematics.\n\n3\/ Your idea of abstractions of abstractions and recursion as the fundamental idea and tying it up with Chomksy is pretty striking. I’m out of my depth to exactly point out how, but each level in Chomsky hierarchy I think is realized by reflexive recursion that gives it more degrees of freedom to explore distinct structures. This was my first jibe at it: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/prathyvsh\/status\/1304667510101295105"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut there’s also this aspect of mirroring \/ symmetry that comes out which ties it up with graphs and abstract algebra. This is one place I want to develop my intuitions and Ershov Hierarchy \/ Turing Jumps are a key part of the puzzle: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Turing_jump"
                            },
                            {
                                "type": "text",
                                "text": " This is one place where I think recursion on recursion is grounded in a mathematical setting on arithmetic hierarchy. It also ties it up to complexity studies. I would also like to add something about Kant’s philosophy with respect to all of this, but suffice to say that his philosophy helped influence the development of topology and category theory.\n\nYeah, so bottomline is, if we develop sufficient rune reading powers into mathematics at the moment, I think there’s a tonne of wealth of knowledge hiding behind all of these. But there’s also another way to realize these if we start with good fundamentals, explore and reflect. Because all that is being studied there will reflect as problems\/leverage points in our own systems of making. Which is why I love and look forward to see how some of the people solve problems here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600135136.415900",
        "client_msg_id": "91E029C2-F238-4907-95CE-8969B47E6762",
        "text": "maybe we should see if we can schedule a zoom call or a collaboration on some kind of asynchronous document—i’m starting to lose track with the amount of scrolling i have to do here:\n\n<@UDKTZSD6H>: nada amin is a huge influence. towers of interpreters <https:\/\/youtu.be\/Ywy_eSzCLi8|https:\/\/youtu.be\/Ywy_eSzCLi8>  and programming should eat itself <https:\/\/youtu.be\/SrKj4hYic5A|https:\/\/youtu.be\/SrKj4hYic5A>  are both titles of talks she’s given that are available on youtube. programming should eat itself specifically deals with the color schemes, whereas towers of interpreters is more of an overview of the technique \n\nkernel is a programming language designed as part of a phd thesis based on reviving f-expressions in a lisp-like language. f-expressions are a expressions where the lists aren’t evaluated by default, and they can be used to implement a lot of primitives in a simple lisp interpreter. i see it as manipulating code as data more directly than traditional macros do. “vau” is the author’s terminology for the f-expression version of lambda. <https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html|https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html>\n\n\nspecter is a library for manipulating nested data structures that’s like a more restricted version of prolog, or like lenses kind of. talk here: <https:\/\/youtu.be\/mXZxkpX5nt8|https:\/\/youtu.be\/mXZxkpX5nt8> . there are really interesting compilation techniques hinted at that i suspect form the basis for red planet labs’ approach to their FoC startup\n\nf-algebras and recursion schemes are closely related. there are a lot of talks on youtube directed at programmers, but i haven’t yet felt like i have a 100% grasp on them. here’s an example talk: <https:\/\/youtu.be\/JZSoPZUoR58|https:\/\/youtu.be\/JZSoPZUoR58> . the essential concept is that you can use the structure of a fold and related transformations to kind of backtrack recursive abstract data types into a compact representation. you can take the dual of this (unfold, or a recursive definition of a data type) to create some data, and then perform a fold to interpret that data (i think this is a hylomorphism but i’m completely unsure). the f-algebra is a way of interpreting down those unfolded structures.\n\ndefunctionalization and refunctionalization: as i understand it this has to do with turning functions into data vs turning data into functions. talk i’m working off of: <https:\/\/youtu.be\/vNwukfhsOME|https:\/\/youtu.be\/vNwukfhsOME>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ICjKs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe we should see if we can schedule a zoom call or a collaboration on some kind of asynchronous document—i’m starting to lose track with the amount of scrolling i have to do here:\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": ": nada amin is a huge influence. towers of interpreters "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/Ywy_eSzCLi8",
                                "text": "https:\/\/youtu.be\/Ywy_eSzCLi8"
                            },
                            {
                                "type": "text",
                                "text": "  and programming should eat itself "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/SrKj4hYic5A",
                                "text": "https:\/\/youtu.be\/SrKj4hYic5A"
                            },
                            {
                                "type": "text",
                                "text": "  are both titles of talks she’s given that are available on youtube. programming should eat itself specifically deals with the color schemes, whereas towers of interpreters is more of an overview of the technique \n\nkernel is a programming language designed as part of a phd thesis based on reviving f-expressions in a lisp-like language. f-expressions are a expressions where the lists aren’t evaluated by default, and they can be used to implement a lot of primitives in a simple lisp interpreter. i see it as manipulating code as data more directly than traditional macros do. “vau” is the author’s terminology for the f-expression version of lambda. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html",
                                "text": "https:\/\/web.cs.wpi.edu\/~jshutt\/kernel.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\n\n"
                            },
                            {
                                "type": "text",
                                "text": "specter is a library for manipulating nested data structures that’s like a more restricted version of prolog, or like lenses kind of. talk here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/mXZxkpX5nt8",
                                "text": "https:\/\/youtu.be\/mXZxkpX5nt8"
                            },
                            {
                                "type": "text",
                                "text": " . there are really interesting compilation techniques hinted at that i suspect form the basis for red planet labs’ approach to their FoC startup\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "f-algebras and recursion schemes are closely related. there are a lot of talks on youtube directed at programmers, but i haven’t yet felt like i have a 100% grasp on them. here’s an example talk: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/JZSoPZUoR58",
                                "text": "https:\/\/youtu.be\/JZSoPZUoR58"
                            },
                            {
                                "type": "text",
                                "text": " . the essential concept is that you can use the structure of a fold and related transformations to kind of backtrack recursive abstract data types into a compact representation. you can take the dual of this (unfold, or a recursive definition of a data type) to create some data, and then perform a fold to interpret that data (i think this is a hylomorphism but i’m completely unsure). the f-algebra is a way of interpreting down those unfolded structures.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "defunctionalization and refunctionalization: as i understand it this has to do with turning functions into data vs turning data into functions. talk i’m working off of: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/vNwukfhsOME",
                                "text": "https:\/\/youtu.be\/vNwukfhsOME"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600135320.417700",
        "client_msg_id": "05E341AC-9ED1-4537-86B7-1824B833F938",
        "text": "<@U5STGTB3J> some terminology ambiguity here. i was talking about APL the programming language rather than A Pattern Language in that context. as in: <https:\/\/www.eecg.utoronto.ca\/~jzhu\/csc326\/readings\/iverson.pdf|https:\/\/www.eecg.utoronto.ca\/~jzhu\/csc326\/readings\/iverson.pdf> ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pBv\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " some terminology ambiguity here. i was talking about APL the programming language rather than A Pattern Language in that context. as in: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.eecg.utoronto.ca\/~jzhu\/csc326\/readings\/iverson.pdf",
                                "text": "https:\/\/www.eecg.utoronto.ca\/~jzhu\/csc326\/readings\/iverson.pdf"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1600135390.418600",
        "client_msg_id": "727DA08A-8E03-4338-9662-748C0283509C",
        "text": "<https:\/\/youtu.be\/v7Mt0GYHU9A|https:\/\/youtu.be\/v7Mt0GYHU9A> and <https:\/\/youtu.be\/lc4IjR1iJTg|https:\/\/youtu.be\/lc4IjR1iJTg> are a couple of talks on apl... somewhat impenetrable ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Design Patterns vs  Anti pattern in APL by Aaron W Hsu at FnConf17",
                "title_link": "https:\/\/youtu.be\/v7Mt0GYHU9A",
                "author_name": "ConfEngine",
                "author_link": "https:\/\/www.youtube.com\/user\/AgileIndia2012",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/v7Mt0GYHU9A\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Design Patterns vs  Anti pattern in APL by Aaron W Hsu at FnConf17",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/v7Mt0GYHU9A?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/v7Mt0GYHU9A",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/v7Mt0GYHU9A"
            },
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Aaron Hsu - Parallel-by-construction Tree Manipulation with APL (Part 1) - λC 2018",
                "title_link": "https:\/\/youtu.be\/lc4IjR1iJTg",
                "author_name": "LambdaConf",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCEtohQeDqMSebi2yvLMUItg",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/lc4IjR1iJTg\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Aaron Hsu - Parallel-by-construction Tree Manipulation with APL (Part 1) - λC 2018",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/lc4IjR1iJTg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/lc4IjR1iJTg",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 2,
                "original_url": "https:\/\/youtu.be\/lc4IjR1iJTg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jw8w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/v7Mt0GYHU9A",
                                "text": "https:\/\/youtu.be\/v7Mt0GYHU9A"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/lc4IjR1iJTg",
                                "text": "https:\/\/youtu.be\/lc4IjR1iJTg"
                            },
                            {
                                "type": "text",
                                "text": " are a couple of talks on apl... somewhat impenetrable "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    }
]