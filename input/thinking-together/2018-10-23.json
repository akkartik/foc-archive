[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1540287163.000100",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1540287179.000000"
        },
        "client_msg_id": "c959e267-4348-4642-a5c6-eb4f442efb74",
        "text": "Yeah, the real trick is finding a \"direct\" map between between abstract code stuff and intuitive monkey brain stuff.  Liveness, for instance, helps in as much as wiggling stuff and seeing what happens engages the monkey brain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PUV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the real trick is finding a \"direct\" map between between abstract code stuff and intuitive monkey brain stuff.  Liveness, for instance, helps in as much as wiggling stuff and seeing what happens engages the monkey brain."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1540311879.000100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1540314757.000000"
        },
        "client_msg_id": "0ce33c58-c890-4034-a74b-673bbc60e4d0",
        "text": "Does visualization imply something primarily graphical? Often I want to see what a computed structure\/value is an how it changes. Many structures are completely hidden and need mental simulation\/inference (e.g. method resolution, internal state of compiler\/runtime) while others need a full cycle of [add log message, rebuild, rerun and look at logs].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vtt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does visualization imply something primarily graphical? Often I want to see what a computed structure\/value is an how it changes. Many structures are completely hidden and need mental simulation\/inference (e.g. method resolution, internal state of compiler\/runtime) while others need a full cycle of [add log message, rebuild, rerun and look at logs]."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1540318958.000100",
        "client_msg_id": "aca541d1-d3e6-41c1-8995-f7ef819a4032",
        "text": "<@UDCLT064X> what type of code do you write: web, embedded, apps? (Just curious)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "olu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDCLT064X"
                            },
                            {
                                "type": "text",
                                "text": " what type of code do you write: web, embedded, apps? (Just curious)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1540319051.000100",
        "client_msg_id": "648f3b2a-b3cc-442e-8852-b3c483e70dc1",
        "text": "<@U8A5MS6R1> I like `live programming` because it the avoids the full cycle that you mentioned. Sadly there’re no ‘real world’ live programming environments to code day to day production code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/1i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I like "
                            },
                            {
                                "type": "text",
                                "text": "live programming",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " because it the avoids the full cycle that you mentioned. Sadly there’re no ‘real world’ live programming environments to code day to day production code"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "disappointed",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1540319062.000100",
        "client_msg_id": "f3c9c084-122a-4603-a245-de33599cbfe3",
        "text": "Has anyone used hypercard?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jGRHl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone used hypercard?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540320872.000100",
        "client_msg_id": "40ce514a-eb33-4da2-97ae-6eac12dd729a",
        "text": "<@U85HCL7JP> Mostly web apps. You can check out <http:\/\/jessealdridge.com|jessealdridge.com> if you want more details. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dPKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " Mostly web apps. You can check out "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jessealdridge.com",
                                "text": "jessealdridge.com"
                            },
                            {
                                "type": "text",
                                "text": " if you want more details."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1540324589.000100",
        "client_msg_id": "7d08702c-b168-493b-8183-db6aa22926d3",
        "text": "I've been interested as well in applying Bret Victor's insights to less visual domains. It's seemed an impossible task, but I just found <https:\/\/github.com\/akavel\/up\/blob\/master\/README.md> which brings up new ideas.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0VT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been interested as well in applying Bret Victor's insights to less visual domains. It's seemed an impossible task, but I just found "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akavel\/up\/blob\/master\/README.md"
                            },
                            {
                                "type": "text",
                                "text": " which brings up new ideas."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540331057.000100",
        "edited": {
            "user": "UDCLT064X",
            "ts": "1540331255.000000"
        },
        "client_msg_id": "c72474fc-b75a-4312-91b4-2a1d5c6de759",
        "text": "That’s a cool project.  The commonality is it executes the code in question as you modify it and shows you the rendered output live (in this case a stream of text rather than a canvas). I wonder what applying the concept to a web app would look like? Maybe automatically running a set of unit tests as you type or something like that? Maybe you would reduce the web app to a series of functions and visualize the inputs, outputs, and state changes (e.g. database writes) of each function individually. In both the canvas case and the ultimate plumber case the programmer has to supply input examples (i.e. sprite positions or sample text input) — I guess something like unit tests would serve as the test input in the web app case.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ea\/KL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s a cool project.  The commonality is it executes the code in question as you modify it and shows you the rendered output live (in this case a stream of text rather than a canvas). I wonder what applying the concept to a web app would look like? Maybe automatically running a set of unit tests as you type or something like that? Maybe you would reduce the web app to a series of functions and visualize the inputs, outputs, and state changes (e.g. database writes) of each function individually. In both the canvas case and the ultimate plumber case the programmer has to supply input examples (i.e. sprite positions or sample text input) — I guess something like unit tests would serve as the test input in the web app case."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540331925.000100",
        "client_msg_id": "8baa733a-574e-4a9f-a5c6-4f44e044208c",
        "text": "Seems like there are three key components to building a general purpose system like this:\n1. The user supplies a set of example inputs\n2. Some computation done on those inputs\n3. A visualization of the system is rendered on the fly whenever 1 or 2 changes\n\nNumber 3 seems like the hardest part by far in any such system. Although in theory you should be able to serialize the state of any system to a stream of text and then do additional parsing on this text to extract interesting information relatively easily (compared to producing rendered output on a canvas or something like that).  Hmm… :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ufVT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems like there are three key components to building a general purpose system like this:\n1. The user supplies a set of example inputs\n2. Some computation done on those inputs\n3. A visualization of the system is rendered on the fly whenever 1 or 2 changes\n\nNumber 3 seems like the hardest part by far in any such system. Although in theory you should be able to serialize the state of any system to a stream of text and then do additional parsing on this text to extract interesting information relatively easily (compared to producing rendered output on a canvas or something like that).  Hmm… "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540332254.000100",
        "client_msg_id": "b334b4d1-d596-46b1-9c06-7de3ec817f76",
        "text": "maybe replacing “stream of text” with “json object” above would be better…  and then maybe have a “dump state” route on your web app…  then you could connect an external visualizer that can render the json… and the web app could publish some sort of diff via this route whenever the state changes… hmm…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0XHv0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe replacing “stream of text” with “json object” above would be better…  and then maybe have a “dump state” route on your web app…  then you could connect an external visualizer that can render the json… and the web app could publish some sort of diff via this route whenever the state changes… hmm…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1540344141.000100",
        "client_msg_id": "27474812-f9e0-44e3-9933-6b8973801997",
        "text": "On a slightly different axis, it seems like you want to specify 3 things in your \"workbench UI\":\n*A)* What to run (the component under test).\n*B)* What context to run it in (like a reproducible test).\n*C)* What to watch as you run it.\n\nOnce you have this set up (the loose feedback loop), you want to be able to make changes to *A* and instantly see them reflected in *C* (the tight feedback loop).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lr9W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On a slightly different axis, it seems like you want to specify 3 things in your \"workbench UI\":\n"
                            },
                            {
                                "type": "text",
                                "text": "A)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " What to run (the component under test).\n"
                            },
                            {
                                "type": "text",
                                "text": "B)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " What context to run it in (like a reproducible test).\n"
                            },
                            {
                                "type": "text",
                                "text": "C)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " What to watch as you run it.\n\nOnce you have this set up (the loose feedback loop), you want to be able to make changes to "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and instantly see them reflected in "
                            },
                            {
                                "type": "text",
                                "text": "C",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (the tight feedback loop)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1540344350.000100",
        "client_msg_id": "b6b92729-dc19-4da3-9650-4bcd5d62e473",
        "text": "I'm imagining you'd solve *C* (your Number 3) by having an extensive libraries of different kinds of probes. They'd be like watches in `gdb`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4y5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm imagining you'd solve "
                            },
                            {
                                "type": "text",
                                "text": "C",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (your Number 3) by having an extensive libraries of different kinds of probes. They'd be like watches in "
                            },
                            {
                                "type": "text",
                                "text": "gdb",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1540356132.000100",
        "client_msg_id": "5d0d86e3-d62d-4065-9bcc-54d71c21ad69",
        "text": "Sketch-n-Sketch is super cool, here is a really recent talk <https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&amp;list=PLglJM3BYAMPHuB7zrYkH2Kin2vQOkr2xW&amp;index=4&amp;t=0s>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "\"Structured Editing for Elm* in Elm\" by Ravi Chugh",
                "title_link": "https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&amp;index=4&amp;t=0s",
                "author_name": "elm-conf",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCOpGiN9AkczVjlpGDaBwQrQ",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/-TFL6E1uSHE\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: \"Structured Editing for Elm* in Elm\" by Ravi Chugh",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/-TFL6E1uSHE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&amp;index=4&amp;t=0s",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&amp;list=PLglJM3BYAMPHuB7zrYkH2Kin2vQOkr2xW&amp;index=4&amp;t=0s"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w12f8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sketch-n-Sketch is super cool, here is a really recent talk "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&amp;list=PLglJM3BYAMPHuB7zrYkH2Kin2vQOkr2xW&amp;index=4&amp;t=0s",
                                "text": "https:\/\/www.youtube.com\/watch?v=-TFL6E1uSHE&list=PLglJM3BYAMPHuB7zrYkH2Kin2vQOkr2xW&index=4&t=0s"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3",
                    "U7C7B75R6",
                    "UC60LT03Y"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UDCLT064X",
        "type": "message",
        "ts": "1540358901.000100",
        "client_msg_id": "a759405a-797e-4fd8-8f99-6206fd8dab4c",
        "text": "Hmm yeah, I always thought watches in debuggers were interesting, but I basically never use them. I’m not quite sure why.\nThe only things I use for debugging are breakpoints + code stepping, and good old print statements (or log files which are essentially the same thing).\nI have found the Google Chrome debugger useful — it shows you the value of every variable in scope when it hits a breakpoint. The difference there is you don’t have to tell the debugger what to watch — it just displays everything by default and you click to expand stuff and find the unexpected values that are responsible for the bug you are investigating.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3e20180f0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53e20180f0c292fcb589f77f738ed402.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Jesse Aldridge",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jessealdridge",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NxZmy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm yeah, I always thought watches in debuggers were interesting, but I basically never use them. I’m not quite sure why.\nThe only things I use for debugging are breakpoints + code stepping, and good old print statements (or log files which are essentially the same thing).\nI have found the Google Chrome debugger useful — it shows you the value of every variable in scope when it hits a breakpoint. The difference there is you don’t have to tell the debugger what to watch — it just displays everything by default and you click to expand stuff and find the unexpected values that are responsible for the bug you are investigating."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1540359282.000100",
        "client_msg_id": "7A66A3B2-3C92-4E07-960C-7DBABD7008BB",
        "text": "Perhaps some of these tools (watch points) are under-used due to discoverablity, setup overhead, and lack of composibility.  I mean you never really learn to master the debugger because where's the book on that and does it really hang together as a full system or is it just a bunch of limited use tools crammed together?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lemvV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps some of these tools (watch points) are under-used due to discoverablity, setup overhead, and lack of composibility.  I mean you never really learn to master the debugger because where's the book on that and does it really hang together as a full system or is it just a bunch of limited use tools crammed together?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1540359373.000100",
        "client_msg_id": "CADE9C29-95D5-4E03-B446-2D3501624A07",
        "text": "(I say this as a debugger native of sorts.  Smalltalk forever!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kJ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I say this as a debugger native of sorts.  Smalltalk forever!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1540362898.000100",
        "client_msg_id": "f857d452-b5b5-4c30-a125-e2ac75fc7341",
        "text": "Yes, it shouldn't require rigmarole to see whats happening. Even if you do master a debugger, once you're dealing with multiple systems, you're basically back to log statements, and manual correlation of different logs from different systems (zipkin etc are ad hoc solutions here).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540268607.000100",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BvnaZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, it shouldn't require rigmarole to see whats happening. Even if you do master a debugger, once you're dealing with multiple systems, you're basically back to log statements, and manual correlation of different logs from different systems (zipkin etc are ad hoc solutions here)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]