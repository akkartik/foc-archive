[
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1545729483.046800",
        "client_msg_id": "2c25db10-baaf-4805-ad00-1f859c808362",
        "text": "I have asked several thousand developers if they agree with the statement that they read code for at least 50% of their time. The vast majority agrees, and most say it's much more than that.\n\nAt the same time, when I ask developers when was the last time they talked about how they read code, it turns out that that is not a subject of conversation. So, it looks like our industry is spending the largest chunk of the budget and energy on one single activity about which nobody talks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Px0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have asked several thousand developers if they agree with the statement that they read code for at least 50% of their time. The vast majority agrees, and most say it's much more than that.\n\nAt the same time, when I ask developers when was the last time they talked about how they read code, it turns out that that is not a subject of conversation. So, it looks like our industry is spending the largest chunk of the budget and energy on one single activity about which nobody talks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UEGFXUK3M",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1545729563.047000",
        "client_msg_id": "64ff01a4-9f7e-4899-a5cd-39e9379753ee",
        "text": "Debugging is not fun now. But, it can be made. And given the amount of time we spend on it, it must be made possible to be fun.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545720056.038800",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wSeLx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Debugging is not fun now. But, it can be made. And given the amount of time we spend on it, it must be made possible to be fun."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1545734001.054200",
        "client_msg_id": "BE28D3A4-11DF-4F2D-9F91-0730AAB97841",
        "text": "<@UE1JQM9HQ> did you publish a study?\n\nTo use a metaphor from craft (which I do quite frequently), I think of the code writing as equivalent to “roughing”, i.e taking the raw piece of wood and quickly cutting away the excess that is definitely unnecessary, using a coarse gouge or a template. Then eventually debugging is the “finishing” which often requires contemplation and reflection, and can cause the design goals to be redefined somewhat. To make something really good requires a lot more finishing than roughing! I think this is true no matter how good the tools are, unless the thing being made is a familiar replica where the making is mostly by rote. I also don’t see anything wrong with this, as ultimately making something of quality is more of an aesthetic\/philosophical debate, where time is a crucial ingredient. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8TCH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " did you publish a study?\n\nTo use a metaphor from craft (which I do quite frequently), I think of the code writing as equivalent to “roughing”, i.e taking the raw piece of wood and quickly cutting away the excess that is definitely unnecessary, using a coarse gouge or a template. Then eventually debugging is the “finishing” which often requires contemplation and reflection, and can cause the design goals to be redefined somewhat. To make something really good requires a lot more finishing than roughing! I think this is true no matter how good the tools are, unless the thing being made is a familiar replica where the making is mostly by rote. I also don’t see anything wrong with this, as ultimately making something of quality is more of an aesthetic\/philosophical debate, where time is a crucial ingredient."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1545773459.054500",
        "client_msg_id": "557976f8-0fd1-46d1-9c64-256e7f382fd4",
        "text": "I did not publish this explicitly, although I do talk about it since some years.\n\nYou propose an interesting metaphor. I do not have any direct experience, but I find it interesting to see the parallel between “roughing&amp;finishing” and the principles put forward by Tufte, namely “removing chart junk &amp; increasing data ink”. In both cases, the former is about removing the unnecessary parts, while the latter is about adding value. Furthermore, in both cases, the latter is the one that requires the largest chunk of energy.\n\nI like how the metaphor emphasizes the iterative nature of the work and how the deeper layer can only be uncovered after you revealed the shallower one. When approached like this, crafting cannot follow a predefined detailed plan. The real plan is discovered during crafting. I find that to be a key ingredient of programming. I look at programming as being a representation of thought that gets refined as we formulate it. From this perspective, programming becomes executable philosophy.\n\nHowever, I do think that there exists at least one essential part that make programming distinct. A piece of wood has an intrinsic shape, and we interact with that shape both to figure the next step out and to create the new shape. The shape of the wood is essential for our ability to guide our actions, and in the case of the wood, the shape cannot be easily decoupled from the thing.\n\nHowever, software does not have a shape. The typical textual shape is simply the shape we use to create software. Developers read text. But, code is not text. Text is but one of its shapes. For the longest time, visualization was used to represent maps, which are representation of the intrinsic shape of physical space. It was only recently that we use visualization to reason about abstract concepts. In the process we learnt that by affecting the shape we can increase the effectiveness of reasoning about both large data sets and abstract concepts with orders of magnitude. Interestingly, effectiveness is proportional with how custom the shape is to match the problem at hand. In other words, as data can have many shapes, it is essential to pick the one (or few) that matches the current context.\n\nA software system is an abstract thing. It is a representation of thought in a data form. Its shape is given by tools. As shape is essential, it follows that tools are essential as well. For a long time, software was studied in isolation from tools. I believe this is misguided as it misses a significant part of the picture and it is prone to not produce satisfactory results. For example, we approach and measure the quality of code as being a property of the code itself. The assumption here is that certain measures indicate how well code lends itself for a human to reason about it. Indeed, if we assume that text is the only shape, then these measures can make sense. However, there is an increasing amount of evidence that shows that by changing the tool, we can affect the digestibility of code to a much higher degree than the satisfying of code metrics can. The existing of this very community is an argument to support exactly that thesis.\n\nOur tools are essential. However, not any tools will do. Tools must be moldable enough so that we can quickly and inexpensively explore shapes that are appropriate. We call this property moldability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rPJ3l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did not publish this explicitly, although I do talk about it since some years.\n\nYou propose an interesting metaphor. I do not have any direct experience, but I find it interesting to see the parallel between “roughing&finishing” and the principles put forward by Tufte, namely “removing chart junk & increasing data ink”. In both cases, the former is about removing the unnecessary parts, while the latter is about adding value. Furthermore, in both cases, the latter is the one that requires the largest chunk of energy.\n\nI like how the metaphor emphasizes the iterative nature of the work and how the deeper layer can only be uncovered after you revealed the shallower one. When approached like this, crafting cannot follow a predefined detailed plan. The real plan is discovered during crafting. I find that to be a key ingredient of programming. I look at programming as being a representation of thought that gets refined as we formulate it. From this perspective, programming becomes executable philosophy.\n\nHowever, I do think that there exists at least one essential part that make programming distinct. A piece of wood has an intrinsic shape, and we interact with that shape both to figure the next step out and to create the new shape. The shape of the wood is essential for our ability to guide our actions, and in the case of the wood, the shape cannot be easily decoupled from the thing.\n\nHowever, software does not have a shape. The typical textual shape is simply the shape we use to create software. Developers read text. But, code is not text. Text is but one of its shapes. For the longest time, visualization was used to represent maps, which are representation of the intrinsic shape of physical space. It was only recently that we use visualization to reason about abstract concepts. In the process we learnt that by affecting the shape we can increase the effectiveness of reasoning about both large data sets and abstract concepts with orders of magnitude. Interestingly, effectiveness is proportional with how custom the shape is to match the problem at hand. In other words, as data can have many shapes, it is essential to pick the one (or few) that matches the current context.\n\nA software system is an abstract thing. It is a representation of thought in a data form. Its shape is given by tools. As shape is essential, it follows that tools are essential as well. For a long time, software was studied in isolation from tools. I believe this is misguided as it misses a significant part of the picture and it is prone to not produce satisfactory results. For example, we approach and measure the quality of code as being a property of the code itself. The assumption here is that certain measures indicate how well code lends itself for a human to reason about it. Indeed, if we assume that text is the only shape, then these measures can make sense. However, there is an increasing amount of evidence that shows that by changing the tool, we can affect the digestibility of code to a much higher degree than the satisfying of code metrics can. The existing of this very community is an argument to support exactly that thesis.\n\nOur tools are essential. However, not any tools will do. Tools must be moldable enough so that we can quickly and inexpensively explore shapes that are appropriate. We call this property moldability."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEGFXUK3M",
                    "UCSJ44X1S"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1545775972.054700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1545776243.000000"
        },
        "client_msg_id": "749966ae-bd0c-4928-a97d-bc1e04b93785",
        "text": "&gt; our industry is spending the largest chunk of the budget and energy on one single activity about which nobody talks.\n\n<@UE1JQM9HQ> A friend of mine has a pretty decent hypothesis explaining and justifying this disconnect: <http:\/\/akkartik.name\/post\/comprehension>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LU0",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "our industry is spending the largest chunk of the budget and energy on one single activity about which nobody talks."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " A friend of mine has a pretty decent hypothesis explaining and justifying this disconnect: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/comprehension"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1545776122.054900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1545776195.000000"
        },
        "client_msg_id": "114ebe23-23e3-47e4-a87e-537bad76a361",
        "text": "But yes, it _is_ telling that <@UEQ6M68H0> implicitly divides programming into writing and debugging activies but forgets reading. That's a blind spot we programmers often have: <https:\/\/news.ycombinator.com\/item?id=8308666#8308881>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vhq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But yes, it "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " telling that "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " implicitly divides programming into writing and debugging activies but forgets reading. That's a blind spot we programmers often have: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=8308666#8308881"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1545795820.071700",
        "client_msg_id": "1C070A42-B03F-4127-8423-6062C1981744",
        "text": "“Tightening the feedback loop” I believe is what at least some of us are trying to do. There’s also the metaphor of _sculpting a digital material_, where you have live feedback when you manipulate a system and can see what the effects are immediately, similar to what a sculptor does. Sculpting like that enables playful exploration, which is where a lot of discoveries come from. I’d say when you’re debugging that’s pretty much what you do, in a very limited way, so it is just the crutch that gets us closest today.\n\nI like to contrast programming with professional creation tools for music production or video editing. These domains have all “upgraded” from symbolic representations (think of musical notation and then the first sequencing tools, where you had to type in the pitch or notes) to more visual, interactive representations that allow quick and often immediate feedback loops and playful discovery. If programming was more like a musician improvising on his piano keyboard hooked into a synthesizer, changing sounds and effect chains on the fly, it sure doesn’t mean it would automatically be better, but for sure it would be more playful and approachable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1lA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“Tightening the feedback loop” I believe is what at least some of us are trying to do. There’s also the metaphor of "
                            },
                            {
                                "type": "text",
                                "text": "sculpting a digital material",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where you have live feedback when you manipulate a system and can see what the effects are immediately, similar to what a sculptor does. Sculpting like that enables playful exploration, which is where a lot of discoveries come from. I’d say when you’re debugging that’s pretty much what you do, in a very limited way, so it is just the crutch that gets us closest today.\n\nI like to contrast programming with professional creation tools for music production or video editing. These domains have all “upgraded” from symbolic representations (think of musical notation and then the first sequencing tools, where you had to type in the pitch or notes) to more visual, interactive representations that allow quick and often immediate feedback loops and playful discovery. If programming was more like a musician improvising on his piano keyboard hooked into a synthesizer, changing sounds and effect chains on the fly, it sure doesn’t mean it would automatically be better, but for sure it would be more playful and approachable."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]