[
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610008862.428600",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610010087.000000"
        },
        "client_msg_id": "217bbe04-fb9d-4248-a879-63a93d09f8c4",
        "text": "<@UCUSW7WVD> <@UA14TGLTC> thanks for reading ! and thanks for the links, there goes my coding for the day :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GaX\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " thanks for reading ! and thanks for the links, there goes my coding for the day "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009029.428800",
        "client_msg_id": "624a2577-3c2b-404e-ac9d-aff8ff43ad31",
        "text": "<@UCUSW7WVD> 1) yes, multiple result values should be easy enough to do, just put them in brackets; I'm also considering 'partial assignment', eg. if I have a structure, I can just set one or more of its members, leaving the rest unchanged; this would mean something like \"return x unchanged, except for property p, which should be set to y\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tYCJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " 1) yes, multiple result values should be easy enough to do, just put them in brackets; I'm also considering 'partial assignment', eg. if I have a structure, I can just set one or more of its members, leaving the rest unchanged; this would mean something like \"return x unchanged, except for property p, which should be set to y\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009113.429000",
        "client_msg_id": "9f088d46-29f2-4d33-bcda-79b46f990047",
        "text": "2) the parser for free-syntax is definitely a bit gnarly; I just went ahead and wrote it brute-force. It's super dumb and slow, but since it only has to run on a very small amount of code (the feature you're writing) it doesn't matter. Or at least that's what I'm hoping :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e+cp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2) the parser for free-syntax is definitely a bit gnarly; I just went ahead and wrote it brute-force. It's super dumb and slow, but since it only has to run on a very small amount of code (the feature you're writing) it doesn't matter. Or at least that's what I'm hoping "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009197.429200",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610009292.000000"
        },
        "client_msg_id": "5d8802fd-fc89-4fd4-8a7e-a3cc35bd707b",
        "text": "3) the array stuff is informed by APL\/R\/S, as well as some experience with machine-learning (numpy, pytorch). So far I've only really considered 1-D arrays, but it should be generalisable. I'm considering restricting it to only 1- 2- and 3-D tensors, forcing everything else to be packaged in structs so semantic information doesn't get lost. Fundamentally, any hierarachy of structures containing only numbers should be convertable to and from an N-D tensor. Really need to pick a problem to throw at it and see what comes out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "htsH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "3) the array stuff is informed by APL\/R\/S, as well as some experience with machine-learning (numpy, pytorch). So far I've only really considered 1-D arrays, but it should be generalisable. I'm considering restricting it to only 1- 2- and 3-D tensors, forcing everything else to be packaged in structs so semantic information doesn't get lost. Fundamentally, any hierarachy of structures containing only numbers should be convertable to and from an N-D tensor. Really need to pick a problem to throw at it and see what comes out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009487.429600",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610010477.000000"
        },
        "client_msg_id": "c1543581-6f25-433c-9bfb-4adf9506e2e6",
        "text": "4) features - I'd read some stuff on AOP and FOP, but most of what I've read was about adding AOP\/FOP on top of an OOP layer, which I consider not really solving the basic problem of exploding complexity. zero's approach is to just chuck out OOP as a bad idea (sorry Bjarne !), and come at the problem afresh - it's like \"C with features\" instead of \"C with objects and features\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2SpI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "4) features - I'd read some stuff on AOP and FOP, but most of what I've read was about adding AOP\/FOP on top of an OOP layer, which I consider not really solving the basic problem of exploding complexity. zero's approach is to just chuck out OOP as a bad idea (sorry Bjarne !), and come at the problem afresh - it's like \"C with features\" instead of \"C with objects and features\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009626.429800",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610010563.000000"
        },
        "client_msg_id": "72deba0d-bdb9-4c16-85c2-625a62520b1d",
        "text": "The reason to make features immutable is the huge benefit you get in reasoning about changes to things, particularly the data model (you express changes to data structures, which gives you automatic backwards and cross-compability), and compilation (you already have ASTs and code for 99% of the application, so why rebuild it all to change one line of code ?). However there are parts of features (such as names, or function-structure) that can be changed without changing their semantics - there was a cool language project I saw which stored everything as structural hashes, rather than text names - so for example, one could modify an existing feature to add an intervention point to override, without breaking it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M26n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The reason to make features immutable is the huge benefit you get in reasoning about changes to things, particularly the data model (you express changes to data structures, which gives you automatic backwards and cross-compability), and compilation (you already have ASTs and code for 99% of the application, so why rebuild it all to change one line of code ?). However there are parts of features (such as names, or function-structure) that can be changed without changing their semantics - there was a cool language project I saw which stored everything as structural hashes, rather than text names - so for example, one could modify an existing feature to add an intervention point to override, without breaking it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009819.430000",
        "client_msg_id": "24330608-d0a9-4da4-98a8-c672527f0029",
        "text": "Being able to switch features on and off in a very fluid way at runtime is core to the appeal of the concept - when the program does something that displeases the user, they should be able to say \"why did you do X ?\" and receive answer saying \"feature F made me do it\" and respond with \"well, turn feature F off then, and try again\", or \"let's modify feature F with an exception for this case, and try again\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O2pR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Being able to switch features on and off in a very fluid way at runtime is core to the appeal of the concept - when the program does something that displeases the user, they should be able to say \"why did you do X ?\" and receive answer saying \"feature F made me do it\" and respond with \"well, turn feature F off then, and try again\", or \"let's modify feature F with an exception for this case, and try again\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610009879.430200",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610009899.000000"
        },
        "client_msg_id": "79d00cd8-ca59-4bb5-b836-6409337a314c",
        "text": "the features I need when climbing a rock face with my AR headset are different from those when ordering a delivery pizza or riding a motorbike, is another way of thinking about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YxEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the features I need when climbing a rock face with my AR headset are different from those when ordering a delivery pizza or riding a motorbike, is another way of thinking about it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610010139.430700",
        "client_msg_id": "bd025b50-7a42-498b-9c04-218c764b7aad",
        "text": "<@UA14TGLTC> what do you mean by 'isolation' ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "idR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " what do you mean by 'isolation' ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610010368.430900",
        "client_msg_id": "e5ea1461-938f-43c7-b993-3d15d08b9be7",
        "text": "Also, yeah, this all aims at the idea that every program in the wild is potentially modifiable by the user, which means some kind of reconstructable trace is required even for release versions. So whenever a user is displeased with the running of their program, they can replicate the run precisely later on, and either they or another coder can pinpoint the issue and the fix (which becomes a new feature). The idea of \"a program that does not allow this\" is rejected by the design goals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IZm8\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, yeah, this all aims at the idea that every program in the wild is potentially modifiable by the user, which means some kind of reconstructable trace is required even for release versions. So whenever a user is displeased with the running of their program, they can replicate the run precisely later on, and either they or another coder can pinpoint the issue and the fix (which becomes a new feature). The idea of \"a program that does not allow this\" is rejected by the design goals."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1610013739.431400",
        "client_msg_id": "4531c2b8-0d41-40b9-8cdb-0de0a4409145",
        "text": "By \"isolation,\" I mean \"specify precisely what context the feature applies in.\"  So I want the feature active here, but not there.  Contrast open classes where adding a feature to them makes the feature visible everywhere or say Ruby refinements <https:\/\/docs.ruby-lang.org\/en\/2.4.0\/syntax\/refinements_rdoc.html> whose semantics is sufficiently weird that I don't think anyone ever uses them.  (False!  In my 433 gems that I happen to have handy, 126 matches across 103 files.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VNQI8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"isolation,\" I mean \"specify precisely what context the feature applies in.\"  So I want the feature active here, but not there.  Contrast open classes where adding a feature to them makes the feature visible everywhere or say Ruby refinements "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.ruby-lang.org\/en\/2.4.0\/syntax\/refinements_rdoc.html"
                            },
                            {
                                "type": "text",
                                "text": " whose semantics is sufficiently weird that I don't think anyone ever uses them.  (False!  In my 433 gems that I happen to have handy, 126 matches across 103 files.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610019605.431600",
        "edited": {
            "user": "U01JTCA3KS4",
            "ts": "1610019624.000000"
        },
        "client_msg_id": "ccae7eb0-4da2-4fe5-8046-4c797c787c45",
        "text": "Gotcha. Yes, I have a plan (though not specified \/ implemented yet) to be able to specify precisely where a modifier (on\/after\/before\/replace) applies, using an 'in' construct; i.e. something like\nin var1 &lt;&lt; task1(param1, ...)\n    in var2 &lt;&lt; task2(param2, ...)\n       after var3 &lt;&lt; task3(param3, ...)\n           &lt;modification&gt;",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ru\/Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gotcha. Yes, I have a plan (though not specified \/ implemented yet) to be able to specify precisely where a modifier (on\/after\/before\/replace) applies, using an 'in' construct; i.e. something like\nin var1 << task1(param1, ...)\n    in var2 << task2(param2, ...)\n       after var3 << task3(param3, ...)\n           <modification>"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01JTCA3KS4",
        "type": "message",
        "ts": "1610019778.431900",
        "client_msg_id": "7c5275a2-a94a-483b-ad28-ab1427faa5d3",
        "text": "The right formulation should also allow subsequent features to modify that decision (make it more \/ less general depending on other conditions) so the above isn't the final form, but that's sort of the idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "babdabd7b38c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-06\/1621863966308_babdabd7b38cb4a684ae_72.jpg",
            "first_name": "",
            "real_name": "Ash Nehru",
            "display_name": "Ash Nehru",
            "team": "T5TCAFTA9",
            "name": "ash.nehru",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cIY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The right formulation should also allow subsequent features to modify that decision (make it more \/ less general depending on other conditions) so the above isn't the final form, but that's sort of the idea."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1610073148.432200",
        "client_msg_id": "3cad400f-6d15-4dc0-a9b0-df69ece94084",
        "text": "\"zero does not need traditional version control systems, as every program contains its own history\" it sounds like the language somehow requires people to keep historical baggage around, including bugs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9PA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"zero does not need traditional version control systems, as every program contains its own history\" it sounds like the language somehow requires people to keep historical baggage around, including bugs?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1610074221.432500",
        "client_msg_id": "0e537b25-dc15-4958-9a4f-b329aa29accf",
        "text": "I've had this idea that modules (not mere types) should be optionally parameterized, like, you could say \"this module uses 'strings' and two kinds of 'number' which by default are UTF-8 strings, 32-bit fixed-point and 64-bit float, but the user of this module can override the default with their own choices\". I wonder if Abstract Types are like that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JBqA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've had this idea that modules (not mere types) should be optionally parameterized, like, you could say \"this module uses 'strings' and two kinds of 'number' which by default are UTF-8 strings, 32-bit fixed-point and 64-bit float, but the user of this module can override the default with their own choices\". I wonder if Abstract Types are like that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1610074600.432700",
        "client_msg_id": "410bb959-3bfe-4b65-9453-f4f4458e7d95",
        "text": "When you say \"when we run main(), we get a friendly little beep at the same time\" do you literally mean that `out$ &lt;&lt; \"hello world !\"` and `audio$ &lt;&lt; sample(\"beep.wav\")` run concurrently?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9LOPX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you say \"when we run main(), we get a friendly little beep at the same time\" do you literally mean that "
                            },
                            {
                                "type": "text",
                                "text": "out$ << \"hello world !\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "audio$ << sample(\"beep.wav\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " run concurrently?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1610076015.432900",
        "client_msg_id": "fbbad711-42a6-4fdb-96ad-6eba5d2cf3e0",
        "text": "What is the meaning of all those dollar signs?\n\n\"results are named, and assignment of the result terminates the function\" it sounds like you're breaking tradition in a confusing unhelpful way. There is an established tradition called `return` for terminating a function, whereas assigning to named results (a la Visual Basic) should not terminate the function. Personally I would like both mechanisms to be available.\n\nThat one can define an \"inner\" function that isn't inner (is directly accessible outside the outer function - are you saying that it is accessible _unqualified_?) - this doesn't seem like a bad feature to me per se, but this behavior should be something the programmer asks for, not implicit.\n\nOrdinary functions cannot accept arrays? How is this not a crippling restriction? Is this a limitation of GPUs (I haven't programmed any before)? If so how do GPU programmers work around it? I can't imagine how to write a compiler that processes arbitrary syntax\/semantic trees on a GPU. Do you know how to write the zero language in itself?\n\n\"a task is a pair of values; one is being read from (the 'current' value) and the other is being written to\" Why isn't it a queue, or an LMAX disruptor or something?\n\nHave you studied Halide for inspiration?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z=K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What is the meaning of all those dollar signs?\n\n\"results are named, and assignment of the result terminates the function\" it sounds like you're breaking tradition in a confusing unhelpful way. There is an established tradition called "
                            },
                            {
                                "type": "text",
                                "text": "return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for terminating a function, whereas assigning to named results (a la Visual Basic) should not terminate the function. Personally I would like both mechanisms to be available.\n\nThat one can define an \"inner\" function that isn't inner (is directly accessible outside the outer function - are you saying that it is accessible "
                            },
                            {
                                "type": "text",
                                "text": "unqualified",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?) - this doesn't seem like a bad feature to me per se, but this behavior should be something the programmer asks for, not implicit.\n\nOrdinary functions cannot accept arrays? How is this not a crippling restriction? Is this a limitation of GPUs (I haven't programmed any before)? If so how do GPU programmers work around it? I can't imagine how to write a compiler that processes arbitrary syntax\/semantic trees on a GPU. Do you know how to write the zero language in itself?\n\n\"a task is a pair of values; one is being read from (the 'current' value) and the other is being written to\" Why isn't it a queue, or an LMAX disruptor or something?\n\nHave you studied Halide for inspiration?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]