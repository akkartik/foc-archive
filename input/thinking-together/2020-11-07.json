[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1604741735.361500",
        "client_msg_id": "043B6DBE-54E7-42C0-8896-B400229B202C",
        "text": "<@UJN1TAYEQ> Yes, you explain the connection between pattern language and generative grammar well. The other thing that Alexander adds is sequence. It is not just that there is a grammar that unfolds, it is also about what non-terminal unfolds when. If you arrange the unfolding steps in the right way, you only talk about as much detail as you need right at that step in the process, but not more. \n\nThis is what we currently fail at in programming, because nothing ever works if you don’t implement it on the lowest level. And so we constantly get drawn into the lowest levels full of detail, even when we’re still trying to figure something out at the very top of the grammar talking about highly abstract concepts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oyRs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Yes, you explain the connection between pattern language and generative grammar well. The other thing that Alexander adds is sequence. It is not just that there is a grammar that unfolds, it is also about what non-terminal unfolds when. If you arrange the unfolding steps in the right way, you only talk about as much detail as you need right at that step in the process, but not more. \n\nThis is what we currently fail at in programming, because nothing ever works if you don’t implement it on the lowest level. And so we constantly get drawn into the lowest levels full of detail, even when we’re still trying to figure something out at the very top of the grammar talking about highly abstract concepts."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "USL4R0T61"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1604741927.363000",
        "client_msg_id": "E71DFD97-E5F3-4E8C-AED4-21AD8E08241D",
        "text": "Oh, that’s funny: just going through other unread threads here I found this one, and it seems to be a good example of what I was just trying to describe: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700|https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700",
                "fallback": "[November 6th, 2020 1:26 PM] chris.rabl: I was just pair programming with one of my team members and we were trying to reason about the implementation of a particular code snippet, but we kept getting bogged down by the actual implementation details rather than the “high level” process design (bad\/outdated names, obtuse API calls, all the usual suspects). Out of sheer frustration, I copied the snippet (~100 loc) into a blank text document, replaced all the variable names with sentences describing what they contain, replaced all function calls with a description of what the function does and the data it operates on, and then sent it back. I left in syntax like variable declarations, return statements, array destructuring operations and array methods (map, filter, etc). Within 5 minutes we were able to have a reasonably productive conversation about the process and how we could refactor it, and it just seemed like it really “clicked” for both of us. It was the closest experience I’ve come to in terms of having a “shared mental model”. So I’m curious: is there anyone in this group working on tools for writing and reasoning about pseudocode?",
                "ts": "1604697998.353700",
                "author_id": "UG0EL18H3",
                "author_subname": "Chris Rabl",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I was just pair programming with one of my team members and we were trying to reason about the implementation of a particular code snippet, but we kept getting bogged down by the actual implementation details rather than the “high level” process design (bad\/outdated names, obtuse API calls, all the usual suspects). Out of sheer frustration, I copied the snippet (~100 loc) into a blank text document, replaced all the variable names with sentences describing what they contain, replaced all function calls with a description of what the function does and the data it operates on, and then sent it back. I left in syntax like variable declarations, return statements, array destructuring operations and array methods (map, filter, etc). Within 5 minutes we were able to have a reasonably productive conversation about the process and how we could refactor it, and it just seemed like it really “clicked” for both of us. It was the closest experience I’ve come to in terms of having a “shared mental model”. So I’m curious: is there anyone in this group working on tools for writing and reasoning about pseudocode?",
                "author_name": "Chris Rabl",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UG0EL18H3",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DREsS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, that’s funny: just going through other unread threads here I found this one, and it seems to be a good example of what I was just trying to describe: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1604742088.364200",
        "client_msg_id": "4041B204-7775-4C0B-AB7B-ADF2B932E70C",
        "text": "Couldn’t help but connect this thread to this other one about Christopher Alexander and pattern languages: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&amp;channel=C5T9GPWFL&amp;message_ts=1604741927.363000|https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&amp;channel=C5T9GPWFL&amp;message_ts=1604741927.363000>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&amp;channel=C5T9GPWFL&amp;message_ts=1604741927.363000",
                "fallback": "[November 7th, 2020 1:38 AM] stefanlesser: Oh, that’s funny: just going through other unread threads here I found this one, and it seems to be a good example of what I was just trying to describe: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700|https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700>",
                "ts": "1604741927.363000",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "Oh, that’s funny: just going through other unread threads here I found this one, and it seems to be a good example of what I was just trying to describe: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700|https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604697998353700>",
                "author_name": "Stefan Lesser",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U5STGTB3J",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&amp;channel=C5T9GPWFL&amp;message_ts=1604741927.363000",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BLBY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Couldn’t help but connect this thread to this other one about Christopher Alexander and pattern languages: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&channel=C5T9GPWFL&message_ts=1604741927.363000",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1604741927363000?thread_ts=1603601936.277700&channel=C5T9GPWFL&message_ts=1604741927.363000"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1604742249.366500",
        "client_msg_id": "343AE265-D812-4A42-ACDA-76139789693B",
        "text": "In the meantime I also wrote a quick draft with a higher-level collection of various ways on how to adopt Alexander’s ideas; what we just talked about above being just one of seven things I could think of (I’m sure there are more): <https:\/\/stefan-lesser.com\/2020\/10\/27\/how-to-adopt-christopher-alexanders-ideas-in-the-software-industry\/|https:\/\/stefan-lesser.com\/2020\/10\/27\/how-to-adopt-christopher-alexanders-ideas-in-the-software-industry\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0XEg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the meantime I also wrote a quick draft with a higher-level collection of various ways on how to adopt Alexander’s ideas; what we just talked about above being just one of seven things I could think of (I’m sure there are more): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefan-lesser.com\/2020\/10\/27\/how-to-adopt-christopher-alexanders-ideas-in-the-software-industry\/",
                                "text": "https:\/\/stefan-lesser.com\/2020\/10\/27\/how-to-adopt-christopher-alexanders-ideas-in-the-software-industry\/"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]