[
    {
        "text": "Update on my text-mode postfix language and its live-updating environment, all built up from x86 machine code: <https:\/\/archive.org\/details\/akkartik-2min-2020-10-10>\n\nPrevious episode: <https:\/\/futureofcoding.slack.com\/archives\/C0120A3L30R\/p1601191514009500>\nMain project page: <https:\/\/github.com\/akkartik\/mu>",
        "files": [
            {
                "id": "F01C9L3T745",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cD=f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Update on my text-mode postfix language and its live-updating environment, all built up from x86 machine code: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.org\/details\/akkartik-2min-2020-10-10"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPrevious episode: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C0120A3L30R\/p1601191514009500"
                            },
                            {
                                "type": "text",
                                "text": "\nMain project page: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1602404997.045400",
        "thread_ts": "1602404997.045400",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1602470328.064100",
        "reply_users": [
            "U013ZLJARC7",
            "U015902ESJC",
            "UCUSW7WVD",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "U013ZLJARC7",
                "ts": "1602418597.045700"
            },
            {
                "user": "U015902ESJC",
                "ts": "1602428649.046000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602429737.046400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1602457208.055900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602458603.056100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602459028.056300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1602463500.063400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602463634.063600"
            },
            {
                "user": "U015902ESJC",
                "ts": "1602470166.063900"
            },
            {
                "user": "U015902ESJC",
                "ts": "1602470328.064100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7",
                    "U015902ESJC",
                    "U019PRL1BNU",
                    "UJ6LDMMN0",
                    "U85HCL7JP",
                    "U01661S9F34",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "U019CPED6T1",
                    "U0123H7JRDM"
                ],
                "count": 10
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1602418597.045700",
        "client_msg_id": "3a684827-0154-4b9e-b635-4512cbca1729",
        "text": "Keeps getting better, despite the \"ghastly code\" :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WY58R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Keeps getting better, despite the \"ghastly code\" "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602428649.046000",
        "client_msg_id": "e134ec93-9e2d-4d01-88a6-3f6f99d7abbc",
        "text": "I really like the \"ghastly code\" comment. One question, maybe I missed it in a previous video but what do you mean by a \"whole new stack\" for each function call? Is it really a whole new stack under the hood or just a logical stack for visualization?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Ta=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like the \"ghastly code\" comment. One question, maybe I missed it in a previous video but what do you mean by a \"whole new stack\" for each function call? Is it really a whole new stack under the hood or just a logical stack for visualization?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602429737.046400",
        "client_msg_id": "b1549220-8bbe-463b-9dd0-393a5fd35c5f",
        "text": "It does use a whole new stack. Though the distinction with \"just visualization\" is kinda moot when there are no side effects. Evaluation is a tiny part of visualization here, and evaluation often happens over and over again for a single rendering of the screen. Either way, there's no way for a function to access the (caller's) stack below the args it declares.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=9iSA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does use a whole new stack. Though the distinction with \"just visualization\" is kinda moot when there are no side effects. Evaluation is a tiny part of visualization here, and evaluation often happens over and over again for a single rendering of the screen. Either way, there's no way for a function to access the (caller's) stack below the args it declares."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602432463.049500",
        "client_msg_id": "78f16277-0302-4776-b7dd-ea21dcd4df99",
        "text": "I was able to get back to my uCISC processor work this week. I went back to the drawing board a bit and reworked my instruction encoding a bit, making more room for immediate values. Also, new JVM based vm for uCISC with tests written in uCode. I realize micro-code overloads the term a bit, but I didn't realize that until after I made the video. The name is a WIP :joy: <https:\/\/youtu.be\/YEcWild_3vA>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Two Minute Week #3",
                "title_link": "https:\/\/youtu.be\/YEcWild_3vA",
                "author_name": "GrokThis",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCh4OpfF7T7UtezGejRTLxCw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/YEcWild_3vA\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Two Minute Week #3",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/YEcWild_3vA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/YEcWild_3vA",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/YEcWild_3vA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "npSM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was able to get back to my uCISC processor work this week. I went back to the drawing board a bit and reworked my instruction encoding a bit, making more room for immediate values. Also, new JVM based vm for uCISC with tests written in uCode. I realize micro-code overloads the term a bit, but I didn't realize that until after I made the video. The name is a WIP "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/YEcWild_3vA"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U01661S9F34",
                    "U019PRL1BNU",
                    "UHWC9PXBL",
                    "U0123H7JRDM"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1602457208.055900",
        "client_msg_id": "3BD1C2AA-A3A4-449C-956A-C6A84AF1D857",
        "text": "love the visualization! checking my understanding about intended semantics: if i defined a function as `x y myFunc: x y + 4 x *;` would it pull two values off the stack, with the x getting the top value and y getting the one below it?\n\nalso (tricky question): any thoughts on recursion?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "63alP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "love the visualization! checking my understanding about intended semantics: if i defined a function as "
                            },
                            {
                                "type": "text",
                                "text": "x y myFunc: x y + 4 x *;",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would it pull two values off the stack, with the x getting the top value and y getting the one below it?\n\n"
                            },
                            {
                                "type": "text",
                                "text": "also (tricky question): any thoughts on recursion?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602458603.056100",
        "client_msg_id": "053f55b9-853e-4344-9b0b-a29cda58e4a3",
        "text": "I haven't really used multiple args yet, so not sure if I've done it right. But my thought is that arg order should match calls. The function definition `x y myFunc` should map to a call like `3 4 myFunc` with `x` getting `3` and `y` getting `4`.\n\nPerhaps I'm missing something, but I don't think there's anything tricky about recursion! A recursive call is just a function call like any other, and the visualization metaphor here should uncoil it just like any other call. I don't have conditionals or quotes yet, so all recursion at the moment would be infinite. So it's not very useful at the moment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't really used multiple args yet, so not sure if I've done it right. But my thought is that arg order should match calls. The function definition "
                            },
                            {
                                "type": "text",
                                "text": "x y myFunc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should map to a call like "
                            },
                            {
                                "type": "text",
                                "text": "3 4 myFunc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " getting "
                            },
                            {
                                "type": "text",
                                "text": "3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " getting "
                            },
                            {
                                "type": "text",
                                "text": "4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nPerhaps I'm missing something, but I don't think there's anything tricky about recursion! A recursive call is just a function call like any other, and the visualization metaphor here should uncoil it just like any other call. I don't have conditionals or quotes yet, so all recursion at the moment would be infinite. So it's not very useful at the moment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602459028.056300",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1602460970.000000"
        },
        "client_msg_id": "e2bb4dbd-59b6-4538-a0ff-aa7c8d749c12",
        "text": "One concern I have with this whole approach is something I've chatted with <@UC2A2ARPT> about before and something visible in the screenshot above: lots of name-punning. Different parts of a single (expanded) line may have very different behavior attached to the same name (here `x`).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OfPM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One concern I have with this whole approach is something I've chatted with "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " about before and something visible in the screenshot above: lots of name-punning. Different parts of a single (expanded) line may have very different behavior attached to the same name (here "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1602463500.063400",
        "client_msg_id": "BC65A988-C055-461E-8A5C-9ED5327E6392",
        "text": "thanks, that’s helpful clarification! i guess the difference in argument order depends on whether the function definition metaphor applies to the stack or the tokens you’re passing to the interpreter (if that makes sense). like 3 4 myFunc is either a series of stack instructions or a macro defining how to interpret the previous two tokens.\n\nnot sure what i thought would be tricky about recursion—just can be tricky in general for UI\n\ni wonder if the name-punning issue can be resolved a bit further in UX. may have some messy sketch ideas about that",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nIqSS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks, that’s helpful clarification! i guess the difference in argument order depends on whether the function definition metaphor applies to the stack or the tokens you’re passing to the interpreter (if that makes sense). like 3 4 myFunc is either a series of stack instructions or a macro defining how to interpret the previous two tokens.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "not sure what i thought would be tricky about recursion—just can be tricky in general for UI\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "i wonder if the name-punning issue can be resolved a bit further in UX. may have some messy sketch ideas about that"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1602463634.063600",
        "client_msg_id": "c6b3326c-3bc6-4eab-950f-52985517cd6c",
        "text": "One potential argument here is that the punning is ok, because you can just accept what the name turns into at each point, since you are freed from having to compute it. I don't know if that's a valid argument, though..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=VH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One potential argument here is that the punning is ok, because you can just accept what the name turns into at each point, since you are freed from having to compute it. I don't know if that's a valid argument, though.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602470166.063900",
        "client_msg_id": "e36fe40e-f435-4e19-82c6-d4d842286ba3",
        "text": "It occurs to me that this is very much like FORTH. FORTH avoids name punning by not naming the args in anything other than comments and just assuming there is a thing on the stack and my operation does this to it. That said, you can't do arg checking or any sort of typing in that manner.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tFGj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It occurs to me that this is very much like FORTH. FORTH avoids name punning by not naming the args in anything other than comments and just assuming there is a thing on the stack and my operation does this to it. That said, you can't do arg checking or any sort of typing in that manner."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602470328.064100",
        "client_msg_id": "22b0578e-e507-4d70-b079-fea2a3e42cfe",
        "text": "I'm not sure how anything with a name scoped to a function can avoid name punning. It would have to be purely positional which would be very hard to read for humans.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602404997.045400",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YT3pU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure how anything with a name scoped to a function can avoid name punning. It would have to be purely positional which would be very hard to read for humans."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]