[
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1606996871.350200",
        "client_msg_id": "ee4fb9c1-5d2e-45f2-a701-80406f9c2c92",
        "text": "The variables are just stored in an array",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606677847.281500",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/x8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The variables are just stored in an array"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0139HUPMQ9",
        "type": "message",
        "ts": "1607001269.350400",
        "client_msg_id": "73ed7c17-2db1-445b-935c-7bb42a0e1b22",
        "text": "Thank you <@U017GNJM021> and <@UEBG0NPDK> for the comments :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3dec956efe5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3dec956efe594149cbf027145d37aa47.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sverrir",
            "real_name": "Sverrir Thorgeirsson",
            "display_name": "Sverrir Thorgeirsson",
            "team": "T5TCAFTA9",
            "name": "sverrir.thorgeirsson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606827121.315700",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QrZ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you "
                            },
                            {
                                "type": "user",
                                "user_id": "U017GNJM021"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " for the comments "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I see. Have never used Mathematica, but I remember some discussion about natural language input a while ago. Here's a screenshot - looks like they parse and show an interpretation as well:",
        "files": [
            {
                "id": "F01G9NH67UL",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TeHW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Have never used Mathematica, but I remember some discussion about natural language input a while ago. Here's a screenshot - looks like they parse and show an interpretation as well:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1607014389.350600",
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1607014959.351100",
        "client_msg_id": "6b0297c3-a910-41da-834b-779e80822d51",
        "text": "I'm really enjoying reading the Mu code you write for this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CdgA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm really enjoying reading the Mu code you write for this."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1607018744.354500",
        "client_msg_id": "105d0abf-6b36-41f7-8e58-626c75f352df",
        "text": "Here’s an experiment with structured editing I’ve been working on. I’m skeptically curious about structured editing (text is nice..) so I chose a language with a very simple grammar (CSS).\n\nMy current thesis is that any mainstream code editor needs access to text editing (copy-paste, etc). And if both modes are available, would people ever spend time in structural mode?\n\n<https:\/\/css-structure.netlify.app\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1607144597.370900",
        "reply_users": [
            "UDQBTJ211",
            "U019PRL1BNU",
            "UN9SCH5RD",
            "UPX3PH28N",
            "UA14TGLTC",
            "U01DUNFS2N4"
        ],
        "replies": [
            {
                "user": "UDQBTJ211",
                "ts": "1607023493.354900"
            },
            {
                "user": "U019PRL1BNU",
                "ts": "1607029780.355400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607037932.355600"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1607041570.356000"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607043767.356400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607044203.356700"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1607044354.357000"
            },
            {
                "user": "U019PRL1BNU",
                "ts": "1607046433.357300"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607048311.357900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1607049654.358400"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1607144597.370900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "CSS Structured Editor",
                "title_link": "https:\/\/css-structure.netlify.app\/",
                "text": "An experiment exploring structural editing for CSS",
                "fallback": "CSS Structured Editor",
                "image_url": "https:\/\/css-structure.netlify.app\/meta.png",
                "from_url": "https:\/\/css-structure.netlify.app\/",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 111987,
                "service_icon": "https:\/\/css-structure.netlify.app\/logo192.png",
                "service_name": "css-structure.netlify.app",
                "id": 1,
                "original_url": "https:\/\/css-structure.netlify.app\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zMbkE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here’s an experiment with structured editing I’ve been working on. I’m skeptically curious about structured editing (text is nice..) so I chose a language with a very simple grammar (CSS).\n\nMy current thesis is that any mainstream code editor needs access to text editing (copy-paste, etc). And if both modes are available, would people ever spend time in structural mode?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/css-structure.netlify.app\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01554W5BS5",
                    "UPX3PH28N",
                    "UHWC9PXBL"
                ],
                "count": 3
            },
            {
                "name": "thinking_face",
                "users": [
                    "U015902ESJC",
                    "ULM3U6275"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UQZ0SRA7N"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1607019078.354700",
        "client_msg_id": "ff86d9b1-0de9-4d07-bbb6-a22f36f5ef87",
        "text": "Me too! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1mx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me too! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1607023493.354900",
        "client_msg_id": "b5a66671-0cf4-4bed-963b-956f7be697af",
        "text": "It's beautifully made.\n\nI think I agree that I prefer text mode. It's a little bit frustrating not having completely free control of the cursor.\n\nIt might be possible to bring the best of both worlds together by moving all of the structural features into a type of autocomplete. You could hold a modifier (e.g. ctrl) which would then indicate the action that return, delete, arrows etc now have.\n\nSo if the cursor is after the @ of an @ rule, then backspace would just delete the @ character as normal, whereas holding ctrl would highlight the whole outer rule in red, maybe say \"unwrap\", then pressing ctrl+backspace would be the equivalent of \"unwrap at rule\".\n\nSimilarly, return would always just insert a new line (including splitting a word if you are inside one), but holding ctrl would preview a new declaration, and ctrl+return would be the same as Insert Declaration.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mYY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's beautifully made.\n\nI think I agree that I prefer text mode. It's a little bit frustrating not having completely free control of the cursor.\n\nIt might be possible to bring the best of both worlds together by moving all of the structural features into a type of autocomplete. You could hold a modifier (e.g. ctrl) which would then indicate the action that return, delete, arrows etc now have.\n\nSo if the cursor is after the @ of an @ rule, then backspace would just delete the @ character as normal, whereas holding ctrl would highlight the whole outer rule in red, maybe say \"unwrap\", then pressing ctrl+backspace would be the equivalent of \"unwrap at rule\".\n\nSimilarly, return would always just insert a new line (including splitting a word if you are inside one), but holding ctrl would preview a new declaration, and ctrl+return would be the same as Insert Declaration."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U016VUZGUUQ",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1607029780.355400",
        "client_msg_id": "e17c9e5e-082a-477a-b724-3fb797a699b7",
        "text": "<@UDQBTJ211> thanks! I like the idea of normal text editing but using keyboard modifiers to trigger “smart” navigation\/edits.\n\nI’m also thinking about a contextual panel that updates as you move your cursor, similar to the demo but keeping text as the main UI.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W9R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " thanks! I like the idea of normal text editing but using keyboard modifiers to trigger “smart” navigation\/edits.\n\nI’m also thinking about a contextual panel that updates as you move your cursor, similar to the demo but keeping text as the main UI."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607037932.355600",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607037975.000000"
        },
        "client_msg_id": "2e9f652a-6703-4f6a-a1ac-8efbbf9d2f53",
        "text": "looks great! for structural editing one way to go could be to have some sort of \"full-text-mode in context\" key.\n\nSay, everything in your `.container` from the example css turns into a normal editor, and you can go up and down the tree that way. That way you can do a first rough pass with plain text mode, and once you get it about right keep working on structured mode. Best of both worlds? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "looks great! for structural editing one way to go could be to have some sort of \"full-text-mode in context\" key.\n\nSay, everything in your "
                            },
                            {
                                "type": "text",
                                "text": ".container",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the example css turns into a normal editor, and you can go up and down the tree that way. That way you can do a first rough pass with plain text mode, and once you get it about right keep working on structured mode. Best of both worlds? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1607041570.356000",
        "client_msg_id": "ae9416f2-4206-402d-ac90-54170a7f0f39",
        "text": "I find cursor movement completely unpredictable. It looks like it remembers the column I click on, and tries to return to it when I move up\/down. This happens even if I move left\/right with keyboard.\n\nHave you seen Jetbrains MPS? It allows free cursor movement, just like normal text editors. Not all positions are fully editable, but they can have some useful commands attached. As an example, if you place cursor after the closing `}`, pressing backspace would delete the whole rule. You can also create other “smart” commands. For example, pressing `,` after the selector can automatically start another selector (pressing `,` in the middle could split it, etc.).\n\nIf you're serious about structured editors, I highly recommend trying MPS out. They have implemented many good ideas so that structured editing feels like text editing most of the time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b=1j4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find cursor movement completely unpredictable. It looks like it remembers the column I click on, and tries to return to it when I move up\/down. This happens even if I move left\/right with keyboard.\n\nHave you seen Jetbrains MPS? It allows free cursor movement, just like normal text editors. Not all positions are fully editable, but they can have some useful commands attached. As an example, if you place cursor after the closing "
                            },
                            {
                                "type": "text",
                                "text": "}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", pressing backspace would delete the whole rule. You can also create other “smart” commands. For example, pressing "
                            },
                            {
                                "type": "text",
                                "text": ",",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " after the selector can automatically start another selector (pressing "
                            },
                            {
                                "type": "text",
                                "text": ",",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the middle could split it, etc.).\n\nIf you're serious about structured editors, I highly recommend trying MPS out. They have implemented many good ideas so that structured editing feels like text editing most of the time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607043767.356400",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607043819.000000"
        },
        "client_msg_id": "7e337dd3-7a88-4050-8b65-5ccacfaf684a",
        "text": "MPS is cool but is a monster in size. I'm guessing the author wants to come up with something he could embed on a web site as editor.\nThe thing I have in mind is different from MPS in that it would fully switch to edit some subgraph of the AST with plain text, so after exiting the subgraph would have to be parsed to get it back to structured mode.\nA user wouldn't be able to exit \"plaintext mode\" until the subgraph parses properly. Probably easier to implement than the quasi-seamless \"simulation of plaintext\" MPS tries to achieve.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WRfK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MPS is cool but is a monster in size. I'm guessing the author wants to come up with something he could embed on a web site as editor.\nThe thing I have in mind is different from MPS in that it would fully switch to edit some subgraph of the AST with plain text, so after exiting the subgraph would have to be parsed to get it back to structured mode.\nA user wouldn't be able to exit \"plaintext mode\" until the subgraph parses properly. Probably easier to implement than the quasi-seamless \"simulation of plaintext\" MPS tries to achieve."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607044203.356700",
        "client_msg_id": "18d421f2-3b3c-4f63-a099-5f59bf501435",
        "text": "hmmm perhaps I picked up the idea from <http:\/\/guilabs.net\/> ... not sure if it is exactly the same thing I'm talking about, but probably close.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "attachments": [
            {
                "title": "Kirill Osenkov - structured editors",
                "title_link": "http:\/\/guilabs.net\/",
                "text": "Structured Editors",
                "fallback": "Kirill Osenkov - structured editors",
                "from_url": "http:\/\/guilabs.net\/",
                "service_name": "guilabs.net",
                "id": 1,
                "original_url": "http:\/\/guilabs.net\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MTDB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hmmm perhaps I picked up the idea from "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/guilabs.net\/"
                            },
                            {
                                "type": "text",
                                "text": " ... not sure if it is exactly the same thing I'm talking about, but probably close."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1607044354.357000",
        "client_msg_id": "bd80ddbe-3148-4d44-8b59-c191d6dd04c0",
        "text": "I do agree that MPS is a monster beast and is very much bloated. but they do have some good ux decisions, and I drew a lot of inspiration from MPS when implementing my editor",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sbU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do agree that MPS is a monster beast and is very much bloated. but they do have some good ux decisions, and I drew a lot of inspiration from MPS when implementing my editor"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1607046433.357300",
        "client_msg_id": "f4fb0ce9-8062-4c4a-8429-9aa24100025b",
        "text": "I’ve seen but haven’t personally tried MPS - sounds like I should! Getting contenteditable to work exactly right in the browser is pretty gnarly. There are some flaws I know of (up\/down arrow, copy-paste, ..) but thought it good enough for demo.\n\n<@UN9SCH5RD> the demo does have a text mode (button at top) which won’t switch back unless text parses. I do like the idea of plaintext inside some “structure”. low-level expressions (if statements, loops, etc) are easy enough to type text. Structure is more interesting at function and module level.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VMW2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve seen but haven’t personally tried MPS - sounds like I should! Getting contenteditable to work exactly right in the browser is pretty gnarly. There are some flaws I know of (up\/down arrow, copy-paste, ..) but thought it good enough for demo.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " the demo does have a text mode (button at top) which won’t switch back unless text parses. I do like the idea of plaintext inside some “structure”. low-level expressions (if statements, loops, etc) are easy enough to type text. Structure is more interesting at function and module level."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UPX3PH28N"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1607046604.357500",
        "client_msg_id": "75679f41-97ca-46bb-96ac-ea544c8ed0a0",
        "text": "It's not perfect, but kind of useful.  Sometimes the Alpha query is enough to get what you want.  Other times you start with a simple query to basically lookup the API that that you want to use.  Alpha, like so many of these NLP systems, doesn't really use context though.  <@UEBG0NPDK> could easily make context their secret sauce.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZaSiQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not perfect, but kind of useful.  Sometimes the Alpha query is enough to get what you want.  Other times you start with a simple query to basically lookup the API that that you want to use.  Alpha, like so many of these NLP systems, doesn't really use context though.  "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " could easily make context their secret sauce."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607048311.357900",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607048326.000000"
        },
        "client_msg_id": "5db48821-afc9-40e9-8955-99b97060a4c4",
        "text": "cool, something as simple as a keyboard shortcut for switching in between the two (while keeping the cursor position) and a flashing red border instead of an alert box could make it a lot more seamless to switch modes",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cool, something as simple as a keyboard shortcut for switching in between the two (while keeping the cursor position) and a flashing red border instead of an alert box could make it a lot more seamless to switch modes"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1607049654.358400",
        "client_msg_id": "f777bbf2-5e2b-4912-a794-895b165c1774",
        "text": "Consider the fundamentals: what is the mismatch between basic text editing operations and basic structural changes you want to make?  The bigger the gap, the better having a structural editor is going to be.  Plain CSS isn't going to have as rich of a structure as <http:\/\/lesscss.org\/#|Less> or <https:\/\/sass-lang.com\/guide|Sass>.  On the other hand, some CSS features have long distance dependencies: <https:\/\/www.creativebloq.com\/features\/5-cool-css-grid-generators|grid>, <https:\/\/loading.io\/flexbox\/|flexbox>, <https:\/\/divtable.com\/|table> layouts.  Anytime there are connections between many related properties, a structural editor may be worth it.  Consider the CSS developer tools in browsers.  Tools that help represent interaction of rules, and tools that help you adjust those interactions to produce a desired effect.  A domain independent tree-structure editor will be less of a win over text editing than a domain dependent assistance. An advantage of making the editor strongly structural with tooling is that you don't need to represent all kinds of invalid text states.  The flip-side is that the direct path a useful transformation sometimes passes through invalid intermediate states.  Giving meaning to those is a classic mathematical activity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "attachments": [
            {
                "title": "   Getting started | Less.js ",
                "title_link": "http:\/\/lesscss.org\/",
                "text": "Less extends CSS with dynamic behavior such as variables, mixins, operations and functions. Less runs on both the server-side (with Node.js and Rhino) or client-side (modern browsers only).",
                "fallback": "   Getting started | Less.js ",
                "from_url": "http:\/\/lesscss.org\/",
                "service_icon": "http:\/\/lesscss.org\/public\/ico\/favicon.ico",
                "service_name": "lesscss.org",
                "id": 1,
                "original_url": "http:\/\/lesscss.org\/#"
            },
            {
                "title": "Sass: Sass Basics",
                "title_link": "https:\/\/sass-lang.com\/guide",
                "text": "Syntactically Awesome Style Sheets",
                "fallback": "Sass: Sass Basics",
                "from_url": "https:\/\/sass-lang.com\/guide",
                "service_icon": "https:\/\/sass-lang.com\/favicon.ico",
                "service_name": "sass-lang.com",
                "id": 2,
                "original_url": "https:\/\/sass-lang.com\/guide"
            },
            {
                "service_name": "Creative Bloq",
                "title": "5 cool CSS Grid generators",
                "title_link": "https:\/\/www.creativebloq.com\/features\/5-cool-css-grid-generators",
                "text": "These tools let you build complex layouts visually, without having to be an expert in CSS Grid syntax.",
                "fallback": "Creative Bloq: 5 cool CSS Grid generators",
                "image_url": "https:\/\/cdn.mos.cms.futurecdn.net\/UrjRR46QvLfZc2hPuMXXDC-1200-80.jpg",
                "image_width": 444,
                "from_url": "https:\/\/www.creativebloq.com\/features\/5-cool-css-grid-generators",
                "image_height": 250,
                "image_bytes": 62864,
                "service_icon": "https:\/\/vanilla.futurecdn.net\/creativebloq\/227409\/apple-touch-icon.png",
                "id": 3,
                "original_url": "https:\/\/www.creativebloq.com\/features\/5-cool-css-grid-generators"
            },
            {
                "title": "Interactive CSS Flexbox Generator · Loading.io",
                "title_link": "https:\/\/loading.io\/flexbox\/",
                "text": "CSS flexbox cheatsheet and generator for guiding you toward a better grid and layout system, and is bootstrap compatible!",
                "fallback": "Interactive CSS Flexbox Generator · Loading.io",
                "thumb_url": "https:\/\/loading.io\/assets\/img\/p\/flexbox\/thumbnail.jpg",
                "from_url": "https:\/\/loading.io\/flexbox\/",
                "thumb_width": 1000,
                "thumb_height": 500,
                "service_icon": "https:\/\/loading.io\/favicon.ico",
                "service_name": "loading.io",
                "id": 4,
                "original_url": "https:\/\/loading.io\/flexbox\/"
            },
            {
                "title": "HTML Div Table - Online Tools",
                "title_link": "https:\/\/divtable.com\/",
                "text": "Free online tools to make Div Table composing a piece of cake! HTML table generator and converter with nteractive source editor and much more!",
                "fallback": "HTML Div Table - Online Tools",
                "image_url": "https:\/\/divtable.com\/images\/html-div-table.png",
                "from_url": "https:\/\/divtable.com\/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 85130,
                "service_icon": "https:\/\/divtable.com\/favicon.ico",
                "service_name": "divtable.com",
                "id": 5,
                "original_url": "https:\/\/divtable.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ocy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the fundamentals: what is the mismatch between basic text editing operations and basic structural changes you want to make?  The bigger the gap, the better having a structural editor is going to be.  Plain CSS isn't going to have as rich of a structure as "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lesscss.org\/#",
                                "text": "Less"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/sass-lang.com\/guide",
                                "text": "Sass"
                            },
                            {
                                "type": "text",
                                "text": ".  On the other hand, some CSS features have long distance dependencies: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.creativebloq.com\/features\/5-cool-css-grid-generators",
                                "text": "grid"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/loading.io\/flexbox\/",
                                "text": "flexbox"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/divtable.com\/",
                                "text": "table"
                            },
                            {
                                "type": "text",
                                "text": " layouts.  Anytime there are connections between many related properties, a structural editor may be worth it.  Consider the CSS developer tools in browsers.  Tools that help represent interaction of rules, and tools that help you adjust those interactions to produce a desired effect.  A domain independent tree-structure editor will be less of a win over text editing than a domain dependent assistance. An advantage of making the editor strongly structural with tooling is that you don't need to represent all kinds of invalid text states.  The flip-side is that the direct path a useful transformation sometimes passes through invalid intermediate states.  Giving meaning to those is a classic mathematical activity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UPX3PH28N",
                    "US370TRJA"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U019PRL1BNU",
                    "UD31LGQKB"
                ],
                "count": 2
            }
        ]
    }
]