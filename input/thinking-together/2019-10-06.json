[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1570353252.355600",
        "client_msg_id": "86056e82-6c3a-4fe5-a157-af49fb663348",
        "text": "I left a [comment](<https:\/\/github.com\/markdewing\/next_steps_in_programming\/issues\/1>), maybe he'll join us.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570213775.175500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K9s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I left a [comment]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/markdewing\/next_steps_in_programming\/issues\/1"
                            },
                            {
                                "type": "text",
                                "text": "), maybe he'll join us."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1570353257.355800",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1570353752.000000"
        },
        "client_msg_id": "44be27ba-047f-4a68-b285-7920f13b748a",
        "text": "I have missed the starting of this discussion, but find it very interesting to read!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z9neT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have missed the starting of this discussion, but find it very interesting to read!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1570353527.359700",
        "client_msg_id": "6a737cac-23a1-44b6-a1a2-13df490cbf1a",
        "text": "About complexity, I think that actually programming is an act to manage complexity. My job as a programmer is to tackle a complex problem and produce a solution to it that it is manageable and the most easy to reason about as possible. So the complexity is the \"matter\" that we mold as programmers. All tooling and language are attempts to help us in that task, and their goal is to \"simplify\" complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LL6kI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "About complexity, I think that actually programming is an act to manage complexity. My job as a programmer is to tackle a complex problem and produce a solution to it that it is manageable and the most easy to reason about as possible. So the complexity is the \"matter\" that we mold as programmers. All tooling and language are attempts to help us in that task, and their goal is to \"simplify\" complexity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1570353739.363000",
        "client_msg_id": "1c231e44-84a0-4a5f-b3b9-05031cfd4ede",
        "text": "In fact, when I do some Scratch workshop to show what programming is to people who never do it, I show how simple it is to program a simple game with Scratch. I tell them that during the workshop they have used to chore concepts programmers use (data, loops, if\/then\/else...). But what make the difference with professionnal developpers is that the dev have to manage complexity, and they use those raw concepts for that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "770P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In fact, when I do some Scratch workshop to show what programming is to people who never do it, I show how simple it is to program a simple game with Scratch. I tell them that during the workshop they have used to chore concepts programmers use (data, loops, if\/then\/else...). But what make the difference with professionnal developpers is that the dev have to manage complexity, and they use those raw concepts for that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1570353799.363200",
        "client_msg_id": "a3a9cc26-459a-43c8-bdb6-02449d777992",
        "text": "One of the things we should acknowledge sacrificing (because everyone has been doing it tacitly for a long time) is general-purpose programming. That's a useful theoretical concept (Turing machines etc.), but every real programming system (hardware plus development tools) makes choices that render it impractical for many applications. And once you give up the general-purpose dream, maybe Turing completeness becomes less relevant as well, given that it creates so many opportunities for nasty bugs (see <https:\/\/hal.archives-ouvertes.fr\/hal-02071770>).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570310590.330500",
        "parent_user_id": "ULM3U6275",
        "attachments": [
            {
                "title": "The Power to Create Chaos",
                "title_link": "https:\/\/hal.archives-ouvertes.fr\/hal-02071770",
                "text": "Computers are the only research tools that by design exhibit chaotic behavior: a minimal change in the input to a computation can change its output in any imaginable way. Developers and users of scientific software should be aware of this feature and set up safety nets for protecting themselves against bad surprises.",
                "fallback": "The Power to Create Chaos",
                "from_url": "https:\/\/hal.archives-ouvertes.fr\/hal-02071770",
                "service_name": "hal.archives-ouvertes.fr",
                "id": 1,
                "original_url": "https:\/\/hal.archives-ouvertes.fr\/hal-02071770"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8K1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the things we should acknowledge sacrificing (because everyone has been doing it tacitly for a long time) is general-purpose programming. That's a useful theoretical concept (Turing machines etc.), but every real programming system (hardware plus development tools) makes choices that render it impractical for many applications. And once you give up the general-purpose dream, maybe Turing completeness becomes less relevant as well, given that it creates so many opportunities for nasty bugs (see "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.archives-ouvertes.fr\/hal-02071770"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1570354161.363500",
        "client_msg_id": "931b1a83-1951-4b17-b7a3-23478f7ad7f6",
        "text": "I doubt you can design make a closed system that is practically useful for enough people. You need to interface with the outside world, because that's where (1) all the interesting existing stuff lives and (2) everyone else is having fun. Closed design has always been a problem for Smalltalk, and led to modern Smalltalks being more open (e.g. Pharo having a foreign-function interface, code management in Git repositories, etc.).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570314531.339500",
        "parent_user_id": "U6FKVSVCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2nXXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I doubt you can design make a closed system that is practically useful for enough people. You need to interface with the outside world, because that's where (1) all the interesting existing stuff lives and (2) everyone else is having fun. Closed design has always been a problem for Smalltalk, and led to modern Smalltalks being more open (e.g. Pharo having a foreign-function interface, code management in Git repositories, etc.)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1570376190.363700",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1570376270.000000"
        },
        "client_msg_id": "8f523779-a2df-49c9-b087-3c5f00047e70",
        "text": "I don't think This isn't unique to software, I think it's more common in the software industry to think the complexity sprawling nature of reality is somehow controllable. \n\nYou can't address improvement as a whole, you have to focus on the small piece in front of you, in your own way, with your own goals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570317052.343400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BuRF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think This isn't unique to software, I think it's more common in the software industry to think the complexity sprawling nature of reality is somehow controllable. \n\nYou can't address improvement as a whole, you have to focus on the small piece in front of you, in your own way, with your own goals."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1570398647.367100",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1570398974.000000"
        },
        "client_msg_id": "93aa46d5-2a39-4810-b0df-e7fcacf89125",
        "text": "Does anyone know of an OO language where objects have externally explicit namespaces for their protocols? For example, instead of something like “aView.onDropEnter(…)” it might look like “aView.dropping.onEnter(…)“.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "reply_count": 25,
        "reply_users_count": 7,
        "latest_reply": "1570693568.138300",
        "reply_users": [
            "UJN1TAYEQ",
            "ULM3U6275",
            "UCUSW7WVD",
            "UAVCC2X70",
            "UE1JQM9HQ",
            "U79HM6726",
            "UNCP67JSK"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1570400788.367400"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570400950.367600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1570406265.368500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1570407365.368700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1570407613.368900"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570408791.369400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1570409477.369600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570411048.369800"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570419283.381800"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1570428076.382700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570430835.385900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570431793.386200"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570432186.386900"
            },
            {
                "user": "U79HM6726",
                "ts": "1570434135.397100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570464079.428400"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570472641.432500"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1570472935.432800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570473650.433000"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570473773.433300"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1570473787.433500"
            },
            {
                "user": "ULM3U6275",
                "ts": "1570473845.433700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570474121.433900"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1570474928.434100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1570474970.434300"
            },
            {
                "user": "UNCP67JSK",
                "ts": "1570693568.138300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f9\/as",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone know of an OO language where objects have externally explicit namespaces for their protocols? For example, instead of something like “aView.onDropEnter(…)” it might look like “aView.dropping.onEnter(…)“."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1570400788.367400",
        "client_msg_id": "5806cd36-071c-4bc2-ac9a-4aa2466b3eb2",
        "text": "CLOS, the Common Lisp Object System. A class method is called a \"generic function\", and a namespace is called a \"package\". The syntax for calling a method is `(dropping:onEnter aView ...)`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8gmn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CLOS, the Common Lisp Object System. A class method is called a \"generic function\", and a namespace is called a \"package\". The syntax for calling a method is "
                            },
                            {
                                "type": "text",
                                "text": "(dropping:onEnter aView ...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1570400950.367600",
        "client_msg_id": "6a501a38-dd20-4356-b64c-9286d92362c9",
        "text": "So in that function, does it have a giant case statement for every type that might implement the protocol?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "33ck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So in that function, does it have a giant case statement for every type that might implement the protocol?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1570405901.368300",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1570407853.000000"
        },
        "client_msg_id": "3855c682-a18a-4def-9143-0ff3ff522831",
        "text": "Sure— Openness to other systems isn't a bad thing; it's when you have to leave the system to express certain basic transformations. I'm not really referring to using FFI to access external libraries, more being unable to perform basic programming concepts.\n\nFor example: It's common in node-and-wire tools that they don't offer any method of iteration. So if you want to repeat an operation, you often have to revert to using a scripting language exposed in the app, a DSL, or not infrequently to write a plugin in C++ outside the app entirely. I have seen precious few node and wire tools that actually allow you to express iteration with nodes, or make dynamic function calls (as in recursion). But I'd say a system that doesn't have a way to express those things isn't a programming language, and in particular exposing a _different_ programming language in order to make them expressible doesn't count.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570314531.339500",
        "parent_user_id": "U6FKVSVCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vej",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure— Openness to other systems isn't a bad thing; it's when you have to leave the system to express certain basic transformations. I'm not really referring to using FFI to access external libraries, more being unable to perform basic programming concepts.\n\nFor example: It's common in node-and-wire tools that they don't offer any method of iteration. So if you want to repeat an operation, you often have to revert to using a scripting language exposed in the app, a DSL, or not infrequently to write a plugin in C++ outside the app entirely. I have seen precious few node and wire tools that actually allow you to express iteration with nodes, or make dynamic function calls (as in recursion). But I'd say a system that doesn't have a way to express those things isn't a programming language, and in particular exposing a "
                            },
                            {
                                "type": "text",
                                "text": "different",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming language in order to make them expressible doesn't count."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1570406265.368500",
        "client_msg_id": "711f180f-4bac-486b-adc1-d2fa41cc57cd",
        "text": "It looks like a giant case statement from the outside, I guess. That's not how the code is written. You use `(defclass View ...)` to define a class, you use `(defgeneric onEnter (obj ...) ...)` to define a protocol, and you use `(defmethod onEnter ((obj View) ...) ...)` to implement a protocol for a specific class. Methods are not defined inside the class, they are defined external to the class definition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Cx\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It looks like a giant case statement from the outside, I guess. That's not how the code is written. You use "
                            },
                            {
                                "type": "text",
                                "text": "(defclass View ...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to define a class, you use "
                            },
                            {
                                "type": "text",
                                "text": "(defgeneric onEnter (obj ...) ...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to define a protocol, and you use "
                            },
                            {
                                "type": "text",
                                "text": "(defmethod onEnter ((obj View) ...) ...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to implement a protocol for a specific class. Methods are not defined inside the class, they are defined external to the class definition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1570407365.368700",
        "client_msg_id": "13647fa1-cbca-4038-99ff-3e8be9f4f7c3",
        "text": "A table lookup, which is just one optimization away from a case statement. One key difference: it's extensible. You define new tables with `defgeneric` and new rows in a table with `defmethod`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WYX3c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A table lookup, which is just one optimization away from a case statement. One key difference: it's extensible. You define new tables with "
                            },
                            {
                                "type": "text",
                                "text": "defgeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and new rows in a table with "
                            },
                            {
                                "type": "text",
                                "text": "defmethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1570407613.368900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1570407635.000000"
        },
        "client_msg_id": "2a01ca3f-0f84-4ac9-b38d-7ab798e59031",
        "text": "There are also predicate dispatch systems out there where you can't use a table and are forced to fall back to a giant (but still extensible) case statement.\n\n<https:\/\/en.wikipedia.org\/wiki\/Predicate_dispatch>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hK0FZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are also predicate dispatch systems out there where you can't use a table and are forced to fall back to a giant (but still extensible) case statement.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Predicate_dispatch"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1570408791.369400",
        "client_msg_id": "6127bc0d-c498-4a6e-a7ad-432f2571bdcb",
        "text": "It doesn’t make sense to me why it would be organized this way, but then I also don’t understand why the unix file system is organized by function (where installing an app scatters related files across the system instead of keeping them in a single folder).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bkx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It doesn’t make sense to me why it would be organized this way, but then I also don’t understand why the unix file system is organized by function (where installing an app scatters related files across the system instead of keeping them in a single folder)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1570409477.369600",
        "client_msg_id": "9bd32b42-6cb2-457c-869a-d3e14ab72186",
        "text": "Classes are not the natural unit of modularity. Often they are, but it's just as common for traditional OOP languages to force you to violate modularity when they insist on grouping all methods for a class inside the same module. Common Lisp provides additional flexibility in how you can organize your code. You can put all the methods for a class into the same source file or package as the class itself, if it makes sense, but you aren't forced to do that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=olV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Classes are not the natural unit of modularity. Often they are, but it's just as common for traditional OOP languages to force you to violate modularity when they insist on grouping all methods for a class inside the same module. Common Lisp provides additional flexibility in how you can organize your code. You can put all the methods for a class into the same source file or package as the class itself, if it makes sense, but you aren't forced to do that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1570411048.369800",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1570417236.000000"
        },
        "client_msg_id": "aaf0cf89-b2f6-4f95-be2d-4c4d6b88b328",
        "text": "Go (aka golang) allows methods for anything to be defined anywhere. Haskell typeclasses \/ instances are somewhat like that. JavaScript too, in that you can use constructors like mixins, by \"apply\"ing them to any object -- though technically you can apply any \"method\" to any object at all.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7x3c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Go (aka golang) allows methods for anything to be defined anywhere. Haskell typeclasses \/ instances are somewhat like that. JavaScript too, in that you can use constructors like mixins, by \"apply\"ing them to any object -- though technically you can apply any \"method\" to any object at all."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1570419283.381800",
        "client_msg_id": "0BCE3190-B7FD-4A0C-81F3-47A94F90BA1C",
        "text": "<@UAVCC2X70> yeah, I was thinking about implementing this in Javascript. On mixins, don’t they typically shared the class’ method namespace?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eY=0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " yeah, I was thinking about implementing this in Javascript. On mixins, don’t they typically shared the class’ method namespace?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570421817.382000",
        "client_msg_id": "cd68c2fb-67ab-4579-9560-8ecc1a273c52",
        "text": "FYI, Luna just closed a round of $2 million financing, so they now can survive for a few more years. I could tell they were running out of money, as they had underestimated how long it was going to take when they started.\n\nI agree that exposing Haskell to the users is a huge design flaw that they will eventually have to correct if they want to succeed. Haskell is not beginner friendly. It is highly abstract, and quite weird especially to beginning programmers, which is perhaps half the entire user base.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570314531.339500",
        "parent_user_id": "U6FKVSVCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8UKT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FYI, Luna just closed a round of $2 million financing, so they now can survive for a few more years. I could tell they were running out of money, as they had underestimated how long it was going to take when they started.\n\nI agree that exposing Haskell to the users is a huge design flaw that they will eventually have to correct if they want to succeed. Haskell is not beginner friendly. It is highly abstract, and quite weird especially to beginning programmers, which is perhaps half the entire user base."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1570428076.382700",
        "client_msg_id": "5f97f824-0f2d-40f8-bef3-f4b8892db81c",
        "text": "This is a pattern that we often use in Pharo and GT.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "coHF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a pattern that we often use in Pharo and GT."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1570430797.384800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1570430806.000000"
        },
        "client_msg_id": "B6BB771D-3F8B-451C-9664-9B118C5C7657",
        "text": "I would like to see a row added for a link to a 1-page summary of the overall vision. An escalator pitch, if you will.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570299408.205100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ywfg9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to see a row added for a link to a 1-page summary of the overall vision. An escalator pitch, if you will."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1570430826.385700",
        "client_msg_id": "9181A4C5-C825-40EE-88EF-6D9818E63B24",
        "text": "Then we should canvas members to make one on their project site and link to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570299408.205100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Svx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then we should canvas members to make one on their project site and link to it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1570430835.385900",
        "client_msg_id": "03fbe9b5-1757-40bf-ae15-4b543b0f9bda",
        "text": "<@ULM3U6275> There are three separate things going on when you talk about methods and namespaces:\n\n1. A method is just a function that takes an extra (invisible) argument called \"this\", for the object that it is acting on.\n\n2. The conceptual idea of a \"method\" is that is an actual property (member) of the specific object that it \"belongs to\". But in most languages, a single function is shared for every instance-object of the same class. So if x and y are both instances of class C, then x.foo(123) and y.foo(456) are really just funny syntax for calling C.foo(x,123) and C.foo(y,456), where x and y are the \"this\" parameter I described in #1\n\n3. There's the actual container (namespace or parent-object) of the method itself. In #2, the \"too\" method is contained in class C, although the syntax for calling it makes it look like it is contained in x and y.\n\nIn most (statically typed) OO languages, these concepts are all munged together: the method is a member of the class and (conceptually) of it's instances, and the fact that \"this\" is passed as an argument is hidden away by the compiler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570398647.367100",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OYDL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " There are three separate things going on when you talk about methods and namespaces:\n\n1. A method is just a function that takes an extra (invisible) argument called \"this\", for the object that it is acting on.\n\n2. The conceptual idea of a \"method\" is that is an actual property (member) of the specific object that it \"belongs to\". But in most languages, a single function is shared for every instance-object of the same class. So if x and y are both instances of class C, then x.foo(123) and y.foo(456) are really just funny syntax for calling C.foo(x,123) and C.foo(y,456), where x and y are the \"this\" parameter I described in #1\n\n3. There's the actual container (namespace or parent-object) of the method itself. In #2, the \"too\" method is contained in class C, although the syntax for calling it makes it look like it is contained in x and y.\n\nIn most (statically typed) OO languages, these concepts are all munged together: the method is a member of the class and (conceptually) of it's instances, and the fact that \"this\" is passed as an argument is hidden away by the compiler."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]