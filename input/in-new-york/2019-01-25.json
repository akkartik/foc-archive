[
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1548456520.008200",
        "client_msg_id": "80234f37-52af-4e12-bc45-bf0451238abd",
        "text": "Hello all! I’m new to the Future of Coding community, but I do live in NYC and am working on something someone else might be interested in talking\/sketching out with me.\nI’m currently working on a protocol and simple Reactive Database which implements some of the designs behind Dynamicland’s RealTalk language in Rust. The basic concept is anything can make a claim about the world in the form `_ is powered on` (`\"TV:1\" is powered \"on\"`, `\"Toaster1\" is powered \"on\"`) or `_ is near _` (`\"TV:1\" is near \"Person:Steve\"`) and each claim can be queried on such as `When \/thing\/ is powered on, \/thing\/ is near \"Person:Steve\": print(thing); Wish (thing) was turned (\"off\")` which with this fact base would result in wishing that `TV:1` was powered off.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JDGxy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello all! I’m new to the Future of Coding community, but I do live in NYC and am working on something someone else might be interested in talking\/sketching out with me.\nI’m currently working on a protocol and simple Reactive Database which implements some of the designs behind Dynamicland’s RealTalk language in Rust. The basic concept is anything can make a claim about the world in the form "
                            },
                            {
                                "type": "text",
                                "text": "_ is powered on",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "text",
                                "text": "\"TV:1\" is powered \"on\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "\"Toaster1\" is powered \"on\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") or "
                            },
                            {
                                "type": "text",
                                "text": "_ is near _",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "text",
                                "text": "\"TV:1\" is near \"Person:Steve\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") and each claim can be queried on such as "
                            },
                            {
                                "type": "text",
                                "text": "When \/thing\/ is powered on, \/thing\/ is near \"Person:Steve\": print(thing); Wish (thing) was turned (\"off\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which with this fact base would result in wishing that "
                            },
                            {
                                "type": "text",
                                "text": "TV:1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was powered off."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHTPRR5SM",
                    "UHZNB3HRP",
                    "U7TJ8PRDW"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1548456640.010200",
        "client_msg_id": "7dd2c506-c295-493b-b297-abed0a959508",
        "text": "My project is called “talk-protocol” and I have a lot of progress on these queries being represented as macros in Rust, but I’m curious to discuss things like whether values and updated statements are pulled from the database or pushed to the clients and what the implications and benefits are of each approach.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UbHw3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My project is called “talk-protocol” and I have a lot of progress on these queries being represented as macros in Rust, but I’m curious to discuss things like whether values and updated statements are pulled from the database or pushed to the clients and what the implications and benefits are of each approach."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]