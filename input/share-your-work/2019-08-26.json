[
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1566844421.216500",
        "client_msg_id": "11663351-54ba-4459-b308-8c2c32ca5da3",
        "text": "In my experience, the math works out best for pair of opposing vectors. I use: rect.min.x, rect.min.y, rect.max.x, rect.max.y. The size is (rect.max - rect.min). The centre is (rect.min + rect.max)\/2. The bounding box of a list of rectangles is the minimum of the min fields, together with the maximum of the max fields. I use the word \"rect\" in 2 dimensions, for an axis-aligned rectangle, and \"box\" in 3 dimensions, for an axis aligned cuboid.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566844421.216500",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1566862400.237000",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1566862400.237000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LdMjt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my experience, the math works out best for pair of opposing vectors. I use: rect.min.x, rect.min.y, rect.max.x, rect.max.y. The size is (rect.max - rect.min). The centre is (rect.min + rect.max)\/2. The bounding box of a list of rectangles is the minimum of the min fields, together with the maximum of the max fields. I use the word \"rect\" in 2 dimensions, for an axis-aligned rectangle, and \"box\" in 3 dimensions, for an axis aligned cuboid."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566844756.216900",
        "client_msg_id": "a90801d7-4b11-4ad0-a4fc-734f2994a8f7",
        "text": "why there has to be *one* representation?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XZp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "why there has to be "
                            },
                            {
                                "type": "text",
                                "text": "one",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " representation?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "UAL7940NM"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "&gt; So when it crosses over the previous function, we must have a strategy for deciding which paths it travels without relying on history.\nProbably impossible: unless you want to have a lot of fun doing it “wrong” on purpose! Consider the simple “plus” operator: given the output of a sum, how do “undo” the sum into its two input summands? There’s an infinite number of possibilities. Consequently, for example, in Perera et al.‘s “Functional Programs that Explain Their Work” (ICFP 2012, excerpted in screenshot), they record the original operands so you can undo the computation. Their goal is to rewind the computation in order to rebuild a minimal program required to produce the result, but the challenge is the same. (Their overall strategy is to use computation traces recorded during execution, the _T_‘s in the screenshot.)",
        "files": [
            {
                "id": "FMQ6A8AKW",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UC21F8Q48",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bg6H",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So when it crosses over the previous function, we must have a strategy for deciding which paths it travels without relying on history."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably impossible: unless you want to have a lot of fun doing it “wrong” on purpose! Consider the simple “plus” operator: given the output of a sum, how do “undo” the sum into its two input summands? There’s an infinite number of possibilities. Consequently, for example, in Perera et al.‘s “Functional Programs that Explain Their Work” (ICFP 2012, excerpted in screenshot), they record the original operands so you can undo the computation. Their goal is to rewind the computation in order to rebuild a minimal program required to produce the result, but the challenge is the same. (Their overall strategy is to use computation traces recorded during execution, the "
                            },
                            {
                                "type": "text",
                                "text": "T",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "‘s in the screenshot.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1566844772.217200",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1566846104.000000"
        },
        "client_msg_id": "485e0224-d61f-4298-bd02-2da9dbf2f0b0",
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566844825.218400",
        "client_msg_id": "c00b886f-7a9d-4429-9659-5bd567ef9b0e",
        "text": "we use different representations for colletions, sequences, keyed collections, colors, text, trees, each has their own properties, pros and cons and allows to do things easier\/faster or with less transformations from the source format.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZNN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we use different representations for colletions, sequences, keyed collections, colors, text, trees, each has their own properties, pros and cons and allows to do things easier\/faster or with less transformations from the source format."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1566845280.218500",
        "client_msg_id": "e7be736b-6526-4c34-9860-bdd36258c334",
        "text": "Continuing with the “plus” example, the challenge is even greater if you manually change the output sum after it was computed and want to back-propagate to produce changed input summands. Turns out you can’t actually do this with local information only: you end up with a global constraint problem. Consider:\n```\nx = 5\ny = 10\nreturn (x + (x + y))\n```\nForward execution produces the result `20`. Say you manually change `20` to `21` and backprop, hoping to change `x` or `y`. The expression `x + (...)` evaluated last, so you change `x` from `5` to to `6` to make it `21` instead of `20`. But now, suddenly, on forward execution the whole result  is `22` rather than `21`!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j=u4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Continuing with the “plus” example, the challenge is even greater if you manually change the output sum after it was computed and want to back-propagate to produce changed input summands. Turns out you can’t actually do this with local information only: you end up with a global constraint problem. Consider:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "x = 5\ny = 10\nreturn (x + (x + y))\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Forward execution produces the result "
                            },
                            {
                                "type": "text",
                                "text": "20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Say you manually change "
                            },
                            {
                                "type": "text",
                                "text": "20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "21",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and backprop, hoping to change "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The expression "
                            },
                            {
                                "type": "text",
                                "text": "x + (...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " evaluated last, so you change "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from "
                            },
                            {
                                "type": "text",
                                "text": "5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to to "
                            },
                            {
                                "type": "text",
                                "text": "6",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to make it "
                            },
                            {
                                "type": "text",
                                "text": "21",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of "
                            },
                            {
                                "type": "text",
                                "text": "20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But now, suddenly, on forward execution the whole result  is "
                            },
                            {
                                "type": "text",
                                "text": "22",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "21",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1566845559.218800",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1566927972.000000"
        },
        "client_msg_id": "a26cbed7-a5dd-483d-834a-73a9c17ba2bf",
        "text": "To get around this problem, in Chugh et al. “Programmatic and Direct Manipulation, Together at Last” (PLDI 2016) we record special arithmetic traces so that, instead of only seeing the local expression\n`x + (...)`\nwe see an entire arithmetic expression\n`x + (x + y)`\nwhich the computer can change with simple algebra.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ZKR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To get around this problem, in Chugh et al. “Programmatic and Direct Manipulation, Together at Last” (PLDI 2016) we record special arithmetic traces so that, instead of only seeing the local expression\n"
                            },
                            {
                                "type": "text",
                                "text": "x + (...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nwe see an entire arithmetic expression\n"
                            },
                            {
                                "type": "text",
                                "text": "x + (x + y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nwhich the computer can change with simple algebra."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Arithmetic aside, for many kinds of data structure operations, you can define _lenses_ that produce reasonable backprop results; although these lenses usually have to be defined manually. And it also turns out you can backprop _without_ traces, but you end up having to do some recomputation. See Mayer et al “Bidirectional Evaluation with Direct Manipulation for Details” (OOPSLA 2018, the attached screenshot is the heart of the approach and takes a bit to grok; see video. The two forward arrows ⇒ in the attached screenshot are recomputations.)",
        "files": [
            {
                "id": "FMQMA449W",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UC21F8Q48",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q95",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Arithmetic aside, for many kinds of data structure operations, you can define "
                            },
                            {
                                "type": "text",
                                "text": "lenses",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that produce reasonable backprop results; although these lenses usually have to be defined manually. And it also turns out you can backprop "
                            },
                            {
                                "type": "text",
                                "text": "without",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " traces, but you end up having to do some recomputation. See Mayer et al “Bidirectional Evaluation with Direct Manipulation for Details” (OOPSLA 2018, the attached screenshot is the heart of the approach and takes a bit to grok; see video. The two forward arrows ⇒ in the attached screenshot are recomputations.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1566846803.219800",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1566847413.000000"
        },
        "client_msg_id": "dad1f5fb-3d23-49c4-9c4e-8f7e70a691d8",
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1566846871.220200",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1566846881.000000"
        },
        "client_msg_id": "e30347b1-05ab-4a68-9f0d-c2caf4359a6e",
        "text": "“Bidirectional Evaluation with Direct Manipulation” presentation. <https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Bidirectional Evaluation with Direct Manipulation",
                "title_link": "https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU",
                "author_name": "ACM SIGPLAN",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCwG9512Wm7jSS6Iqshz4Dpg",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/SoLkTKmr4vU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Bidirectional Evaluation with Direct Manipulation",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/SoLkTKmr4vU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qOb5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“Bidirectional Evaluation with Direct Manipulation” presentation. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1566847790.220700",
        "client_msg_id": "f11182c0-ce21-45aa-88e6-720ffb92beda",
        "text": "(If you have questions, ping me or <@UK0GCU598> or just ask here!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4WB=N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(If you have questions, ping me or "
                            },
                            {
                                "type": "user",
                                "user_id": "UK0GCU598"
                            },
                            {
                                "type": "text",
                                "text": " or just ask here!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566848390.221500",
        "client_msg_id": "f861d3a6-af12-4c19-850b-45d1759314c7",
        "text": "Consider the 'state of the world' as an input to a function and the 'new state of the world' as the output. If two values in the input map to the same output value, it is impossible to determine from the output alone which of the inputs was provided to the function. The same problem exists when the same input value maps to multiple possible output values (assumes some untracked input e.g. random number generator).\n\nSo to be reversible there need to be a 1:1 mapping from input state to output state. This means you can't reduce the information content of the system (aggregation, hashing etc.). Logging is one way to keep the information content intact - the information is accumulated in this log while it is being lost elsewhere. There could be other ways, e.g. each comet could carry provenance information (comet local log). The design effort here is mainly around minimizing redundancy - so you try to keep the minimal information content that will get you reversibility.\n\nConsidering the 'state of the system' point of view, I don't draw any strong distinction between 'reversible functions' (e.g `increment`) and logging or tracing. The new system state has enough information to uniquely map back to the previous state - the difference is only where this information is present.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6RnJn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the 'state of the world' as an input to a function and the 'new state of the world' as the output. If two values in the input map to the same output value, it is impossible to determine from the output alone which of the inputs was provided to the function. The same problem exists when the same input value maps to multiple possible output values (assumes some untracked input e.g. random number generator).\n\nSo to be reversible there need to be a 1:1 mapping from input state to output state. This means you can't reduce the information content of the system (aggregation, hashing etc.). Logging is one way to keep the information content intact - the information is accumulated in this log while it is being lost elsewhere. There could be other ways, e.g. each comet could carry provenance information (comet local log). The design effort here is mainly around minimizing redundancy - so you try to keep the minimal information content that will get you reversibility.\n\nConsidering the 'state of the system' point of view, I don't draw any strong distinction between 'reversible functions' (e.g "
                            },
                            {
                                "type": "text",
                                "text": "increment",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") and logging or tracing. The new system state has enough information to uniquely map back to the previous state - the difference is only where this information is present."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1566848480.222400",
        "client_msg_id": "540bfee5-3df9-45aa-8fec-a680872fecaf",
        "text": "Someone could even argue that while size is property of rectangle itself but location is property of relationship between rectangle and frame\/container\/space.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ij2Eg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Someone could even argue that while size is property of rectangle itself but location is property of relationship between rectangle and frame\/container\/space."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566849072.225100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1566849263.000000"
        },
        "client_msg_id": "722f39bf-4f7d-4afb-93de-fd9b9b67569d",
        "text": "&gt; we could allow the artist to record their code changes as happening within the timeline (rather than outside it)\n\nI find this to be a very interesting aspect of Hest. Now, about time travel, I'd first like to ask 'why?'. I mean I would really like this, but what are the reasons I would do time travel in the ways described?\n\n1. Undo: Go back to a known good state of code+data.\n2. Speculative alternative execution: Try same old data with some new code (see how ball would have bounced with this new value of `g`).\n3. 'Retrofit': Discover starting values that give me desired end state. (move ball where I want it to be and system tells me the original position (or value of `g`) it should have been in - note it can't tell me both position *and* value of `g` - same problem as the Y shaped function?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "028Nc",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we could allow the artist to record their code changes as happening within the timeline (rather than outside it)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI find this to be a very interesting aspect of Hest. Now, about time travel, I'd first like to ask 'why?'. I mean I would really like this, but what are the reasons I would do time travel in the ways described?\n\n1. Undo: Go back to a known good state of code+data.\n2. Speculative alternative execution: Try same old data with some new code (see how ball would have bounced with this new value of "
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").\n3. 'Retrofit': Discover starting values that give me desired end state. (move ball where I want it to be and system tells me the original position (or value of "
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") it should have been in - note it can't tell me both position "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " value of "
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - same problem as the Y shaped function?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566849211.225400",
        "client_msg_id": "c299d038-8c69-4cac-924e-e572cad85f1b",
        "text": "Possibly more..\n\nThe point I'd like to make is I want 1 and 2 to be mostly deterministic. However I want 3 to be an interplay - I must tell the system which original variable is movable and which are fixed. The system may tell me the set of things that would affect the end state, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mup",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Possibly more..\n\nThe point I'd like to make is I want 1 and 2 to be mostly deterministic. However I want 3 to be an interplay - I must tell the system which original variable is movable and which are fixed. The system may tell me the set of things that would affect the end state, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566849282.227300",
        "client_msg_id": "840ABDCE-0193-4986-B742-DC8C21543416",
        "text": "the one thing that confuses me is how data could flow into a function that takes two paths on only one path—which makes me think i don’t quite understand the programming model",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the one thing that confuses me is how data could flow into a function that takes two paths on only one path—which makes me think i don’t quite understand the programming model"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1566851073.227500",
        "client_msg_id": "0e2b2ba3-6d9f-4eb8-97b1-cf6a773fba33",
        "text": "I think time traveling side is quite well checked by others. To me dealbreaker would be more like how this work with more complex data structures?\n\nIn any case very nice visual system. It kind of express that every ball have an identity. So my next idea is that could you visualize full history from single ball point of view?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3dq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think time traveling side is quite well checked by others. To me dealbreaker would be more like how this work with more complex data structures?\n\nIn any case very nice visual system. It kind of express that every ball have an identity. So my next idea is that could you visualize full history from single ball point of view?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566858709.228400",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1566858765.000000"
        },
        "client_msg_id": "47b5f817-acc2-4143-b923-9ccc027519d2",
        "text": "In a 3D scene graph that _is_ the way it'd be done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3zTs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a 3D scene graph that "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the way it'd be done."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566858754.229100",
        "client_msg_id": "04f4036b-a80d-4891-9082-6f6c989772cf",
        "text": "And I guess you can have 2D scene graphs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Va2O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I guess you can have 2D scene graphs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566859005.231500",
        "client_msg_id": "e9a19765-dfe8-44b1-9fee-b2683efe5733",
        "text": "Who here had that demo with a 2D robot arm? Presumably that had each arm element position relative to where it was attached, as a property of the element attached to, not the element attached?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "reply_count": 12,
        "reply_users_count": 4,
        "latest_reply": "1566895490.247600",
        "reply_users": [
            "UC2A2ARPT",
            "UA14TGLTC",
            "UCGR73CAY",
            "UE6EFEPTQ"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1566862555.239400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1566882146.241900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566882842.242800"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1566885320.243100"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1566885363.243300"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1566885383.243500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566887895.243700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566893985.246800"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1566894524.247000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566895394.247200"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566895410.247400"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1566895490.247600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bnd3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Who here had that demo with a 2D robot arm? Presumably that had each arm element position relative to where it was attached, as a property of the element attached to, not the element attached?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1566859131.232300",
        "client_msg_id": "fce8e55e-362e-4ce7-8e95-527022038ce7",
        "text": "So Rect (2D rectangle in Unity 3D) has properties that allow for multiple representations <https:\/\/docs.unity3d.com\/ScriptReference\/Rect.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Unity - Scripting API: Rect",
                "title_link": "https:\/\/docs.unity3d.com\/ScriptReference\/Rect.html",
                "fallback": "Unity - Scripting API: Rect",
                "image_url": "https:\/\/unity3d.com\/files\/images\/ogimg.jpg",
                "from_url": "https:\/\/docs.unity3d.com\/ScriptReference\/Rect.html",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 88446,
                "service_icon": "https:\/\/docs.unity3d.com\/StaticFiles\/images\/favicons\/apple-touch-icon-152x152.png",
                "service_name": "docs.unity3d.com",
                "id": 1,
                "original_url": "https:\/\/docs.unity3d.com\/ScriptReference\/Rect.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VBg4r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So Rect (2D rectangle in Unity 3D) has properties that allow for multiple representations "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.unity3d.com\/ScriptReference\/Rect.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1566859186.233400",
        "client_msg_id": "7abdca97-f825-48bc-bdd8-6ecd638f3414",
        "text": "you have x\\y\\width\\height accessors, xMin\\xMax, center, position and size",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ks2PI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you have x\\y\\width\\height accessors, xMin\\xMax, center, position and size"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1566859362.234600",
        "client_msg_id": "2cf385e2-5965-4085-893d-891e517a8846",
        "text": "internally rect is is 4 floats, top left corner (xmin\\ymin) and width\\height <https:\/\/github.com\/jamesjlinden\/unity-decompiled\/blob\/master\/UnityEngine\/UnityEngine\/Rect.cs>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UzU\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "internally rect is is 4 floats, top left corner (xmin\\ymin) and width\\height "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jamesjlinden\/unity-decompiled\/blob\/master\/UnityEngine\/UnityEngine\/Rect.cs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1566859424.235200",
        "client_msg_id": "38aca6e3-82fd-4711-8515-97e585f8d720",
        "text": "so there are costs associated with using properties that need to convert to a new format",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6C6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so there are costs associated with using properties that need to convert to a new format"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_with_raised_eyebrow",
                "users": [
                    "UHDQ62M4P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566862400.237000",
        "client_msg_id": "80EE3375-58EA-465C-B1B2-EAA3D8A2C06C",
        "text": "In graphics we refer to this as an AABB (axis aligned bounding box). They're great when that's what you need, but bad when you need to extend the representation to include rotation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566844421.216500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "32j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In graphics we refer to this as an AABB (axis aligned bounding box). They're great when that's what you need, but bad when you need to extend the representation to include rotation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566862555.239400",
        "client_msg_id": "B84E0C13-F06D-40A1-9F67-AB45E001FD12",
        "text": "Yeah, you often do that by giving each object a transform matrix, and multiply that on to your child objects when calculating their world position.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DCZVA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, you often do that by giving each object a transform matrix, and multiply that on to your child objects when calculating their world position."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566880195.239800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566880373.000000"
        },
        "client_msg_id": "b187cb4b-f717-4699-9a05-194e1c4c110e",
        "text": "<@UC21F8Q48> — thank you for the extensive, considered response, and the references. I'll explore those over the coming days, and will absolutely ping you if I have questions. In the mean time, here's an easy elaboration.\n\n&gt; Consider the simple “plus” operator: given the output of a sum, how do “undo” the sum into its two input summands? There’s an infinite number of possibilities.\n\nI imagine that backwards execution will only be useful when the artist is doing programming in the small, focussing on one or a few functions at a time. So, we can simply prompt them to make a choice about this, providing a few suggestions — a predefined monoidal identity element, maybe a random value generated based on the type\/spec\/contract of the function, maybe a value that has recently been used with this function. After all, this isn't meant to put the sim in a valid state that would naturally occur when running from the start. This is just for quick interactive exploration of the behaviour of some composition of functions, sort of like interactively writing a unit test with fake data, or playing with a function at the REPL. It just needs to be deterministic, more useful than not, and consistent with other parts of the programming model. So your thought, \"unless you want to have a lot of fun doing it “wrong” on purpose\", is probably spot on.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CZe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " — thank you for the extensive, considered response, and the references. I'll explore those over the coming days, and will absolutely ping you if I have questions. In the mean time, here's an easy elaboration.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the simple “plus” operator: given the output of a sum, how do “undo” the sum into its two input summands? There’s an infinite number of possibilities."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI imagine that backwards execution will only be useful when the artist is doing programming in the small, focussing on one or a few functions at a time. So, we can simply prompt them to make a choice about this, providing a few suggestions — a predefined monoidal identity element, maybe a random value generated based on the type\/spec\/contract of the function, maybe a value that has recently been used with this function. After all, this isn't meant to put the sim in a valid state that would naturally occur when running from the start. This is just for quick interactive exploration of the behaviour of some composition of functions, sort of like interactively writing a unit test with fake data, or playing with a function at the REPL. It just needs to be deterministic, more useful than not, and consistent with other parts of the programming model. So your thought, \"unless you want to have a lot of fun doing it “wrong” on purpose\", is probably spot on."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC21F8Q48",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566880588.240200",
        "client_msg_id": "7aed7a3c-78c1-44a4-8d3a-5de1e77cfe5e",
        "text": "<@U8A5MS6R1> Good thoughts. Re: logging, yes — recording and replaying history (which I call \"Rewind\" in honour of Braid) is absolutely going to be the most common time reversing strategy, since it'll work perfectly in cases where code and data have not been otherwise modified. In the case where code and data have been modified, I don't expect there could be any perfect approach, so I'm not worried about 1:1 mappings from input to output. All I need is n:1 where the the n isn't.. n-sane :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oq1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Good thoughts. Re: logging, yes — recording and replaying history (which I call \"Rewind\" in honour of Braid) is absolutely going to be the most common time reversing strategy, since it'll work perfectly in cases where code and data have not been otherwise modified. In the case where code and data have been modified, I don't expect there could be any perfect approach, so I'm not worried about 1:1 mappings from input to output. All I need is n:1 where the the n isn't.. n-sane "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566880756.240400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566880823.000000"
        },
        "client_msg_id": "041e1784-7e8c-45d6-9dae-df49e09aeff6",
        "text": "For Rewind, I am thinking that data points (aka comets) will carry provenance, yes. I keep going back and forth between that approach, and the approach of storing history as a property of the space-time that objects exist in. There will need to be some of the latter, to capture things like the moment that a user clicks something that creates data, since it's an event that comes from an outside context. But when it comes to the succession of values via functions, yeah, per-object provenance might be just the ticket. I see minimizing redundancy as an optimization problem, and I've done enough experimenting to know that I have a _lot_ of performance headroom, so I'm not worried about finding a non-naive strategy at this point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dNc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For Rewind, I am thinking that data points (aka comets) will carry provenance, yes. I keep going back and forth between that approach, and the approach of storing history as a property of the space-time that objects exist in. There will need to be some of the latter, to capture things like the moment that a user clicks something that creates data, since it's an event that comes from an outside context. But when it comes to the succession of values via functions, yeah, per-object provenance might be just the ticket. I see minimizing redundancy as an optimization problem, and I've done enough experimenting to know that I have a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of performance headroom, so I'm not worried about finding a non-naive strategy at this point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566880882.240800",
        "client_msg_id": "b16a2fa5-b28d-416f-b398-52a6542bb100",
        "text": "Some general feedback: Hest look really fun and 'fresh'. Like there's some new stuff that's pretty intriguing, so I'm excited to see where this goes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BDzRs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some general feedback: Hest look really fun and 'fresh'. Like there's some new stuff that's pretty intriguing, so I'm excited to see where this goes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1566881058.241000",
        "client_msg_id": "d9f80e98-6136-4043-b65a-ff66e4a16fd4",
        "text": "If 1:1 mapping isn't important, the functions could just have a tendency to push data back along one path, or some other default (e.g. split evenly if it was addition). But then I'd want to be able to squeeze the default pipe while running backwards to force it to flow into the other one..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1qr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If 1:1 mapping isn't important, the functions could just have a tendency to push data back along one path, or some other default (e.g. split evenly if it was addition). But then I'd want to be able to squeeze the default pipe while running backwards to force it to flow into the other one.."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566881894.241300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566881972.000000"
        },
        "client_msg_id": "3272ed58-bf37-4aca-b424-ebea754b874d",
        "text": "Yeah, nothing stopping you from seeing the way things get split and going.. \"Nah, that's not right\" and editing the two data points. That's the goal, in fact. And once you've established that desired split, you're back in the realm of logging and provenance (at least as far as that data + function is concerned), so you won't need to do it any more for that there &amp; then.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I9j1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, nothing stopping you from seeing the way things get split and going.. \"Nah, that's not right\" and editing the two data points. That's the goal, in fact. And once you've established that desired split, you're back in the realm of logging and provenance (at least as far as that data + function is concerned), so you won't need to do it any more for that there & then."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566882053.241700",
        "client_msg_id": "e479326e-0e7e-4573-898a-15f32d1167c7",
        "text": "&gt; Now, about time travel, I'd first like to ask 'why?'. I mean I would really like this, but what are the reasons I would do time travel in the ways described?\n\n1. Because it's cool. I'm not joking, yes I am that shallow. It looks cool, it feels cool, it was the holy-shit moment in The Matrix.\n2. I play a lot of _good_, arty video games. They're doing HCI work that dances circles around what I've seen in academia, because their priorities are way different (see previous point). They've figured out how to, for instance, make the exact act of computer programming, in a synthetic setting, feel wildly different than the real work programming we do. They've done this so many times, in so many ways, that it's embarrassing. I want to make a programming tool that feels like a video game.\n3. When I've previously struggled with RSI, the best advice I received was to listen to my body. Reflecting on my experience programming in visual languages, if I _listen to my body_ there, I feel a bunch of otherwise easily ignored (mental) pains. Similar to the pain of \"playing compiler\" — say, looking at a mess of nested conditionals and not knowing how to understand the control flow paths — there are a rash of pains in every visual language I've seen. I listened to the things I was craving, and worked on figuring out what they could be. Time travel helps make some of them doable.\n\nI could list a bunch more stuff. The short answer is that time travel is not meant to be a feature. It's a means to an end, where that end is a collection of feelings I want to feel while programming. That probably sounds excessively cringe worthy and pretentious, but it's sincerely how I approach my design process. It's all I've got.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "He=E",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now, about time travel, I'd first like to ask 'why?'. I mean I would really like this, but what are the reasons I would do time travel in the ways described?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n1. Because it's cool. I'm not joking, yes I am that shallow. It looks cool, it feels cool, it was the holy-shit moment in The Matrix.\n2. I play a lot of "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", arty video games. They're doing HCI work that dances circles around what I've seen in academia, because their priorities are way different (see previous point). They've figured out how to, for instance, make the exact act of computer programming, in a synthetic setting, feel wildly different than the real work programming we do. They've done this so many times, in so many ways, that it's embarrassing. I want to make a programming tool that feels like a video game.\n3. When I've previously struggled with RSI, the best advice I received was to listen to my body. Reflecting on my experience programming in visual languages, if I "
                            },
                            {
                                "type": "text",
                                "text": "listen to my body",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " there, I feel a bunch of otherwise easily ignored (mental) pains. Similar to the pain of \"playing compiler\" — say, looking at a mess of nested conditionals and not knowing how to understand the control flow paths — there are a rash of pains in every visual language I've seen. I listened to the things I was craving, and worked on figuring out what they could be. Time travel helps make some of them doable.\n\nI could list a bunch more stuff. The short answer is that time travel is not meant to be a feature. It's a means to an end, where that end is a collection of feelings I want to feel while programming. That probably sounds excessively cringe worthy and pretentious, but it's sincerely how I approach my design process. It's all I've got."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1566882146.241900",
        "client_msg_id": "619f54fc-69e4-44e7-84d7-712962cc4b05",
        "text": "Or the attachment is an object itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UK=lk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or the attachment is an object itself."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566882206.242100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566882236.000000"
        },
        "client_msg_id": "22e9c23e-f922-4410-9fe9-e7918a1f3545",
        "text": "<@UHWC9PXBL>\n&gt; the one thing that confuses me is how data could flow into a function that takes two paths on only one path—which makes me think i don’t quite understand the programming model\n\nYeah, the function doesn't take 2 paths — you're calling it from 2 different places. Edges represent function calls, not function signatures. Does that make more sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GT5HX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the one thing that confuses me is how data could flow into a function that takes two paths on only one path—which makes me think i don’t quite understand the programming model"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYeah, the function doesn't take 2 paths — you're calling it from 2 different places. Edges represent function calls, not function signatures. Does that make more sense?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566882704.242600",
        "client_msg_id": "2f91f1cc-8045-464a-a25d-34fd07f11e7f",
        "text": "<@U7C7B75R6>\n&gt; To me dealbreaker would be more like how this work with more complex data structures?\n\nYeah, that's going to be a whole thing, haha. Honestly, I have thought about it a lot but I haven't prototyped anything yet. We'll see!\n\n&gt; So my next idea is that could you visualize full history from single ball point of view?\n\nOne of my favourite features, that I have prototyped but not shown off yet, is a mode where you pick a data point and \"follow\" it through the simulation. The camera tracks that point like a 3rd-person video game where you play as the data. When you hit a function where there are multiple outbound paths, time slows down and you pick which descendant point to follow.\n\nThat's actually just one way of tracking data as it travels. Another idea, not yet implemented, is selecting a point and toggling a mode that highlights the full path that that point (and its ancestors) have taken as to arrive at where it currently is. Then, you could click on a spot on that highlighted path to rewind back to the moment that the point was in that spot. Should also be possible to do that with forward paths, too, but I haven't thought about it as much so I'm not 100% sure if it'd work.\n\nThis is why I'm keen on 3D graphics programs — they do a great job of giving the artist hundreds or thousands of such tools, without it getting overwhelming. They're a real masterclass in sophisticated GUI design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7NVH=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U7C7B75R6"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me dealbreaker would be more like how this work with more complex data structures?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYeah, that's going to be a whole thing, haha. Honestly, I have thought about it a lot but I haven't prototyped anything yet. We'll see!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So my next idea is that could you visualize full history from single ball point of view?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nOne of my favourite features, that I have prototyped but not shown off yet, is a mode where you pick a data point and \"follow\" it through the simulation. The camera tracks that point like a 3rd-person video game where you play as the data. When you hit a function where there are multiple outbound paths, time slows down and you pick which descendant point to follow.\n\nThat's actually just one way of tracking data as it travels. Another idea, not yet implemented, is selecting a point and toggling a mode that highlights the full path that that point (and its ancestors) have taken as to arrive at where it currently is. Then, you could click on a spot on that highlighted path to rewind back to the moment that the point was in that spot. Should also be possible to do that with forward paths, too, but I haven't thought about it as much so I'm not 100% sure if it'd work.\n\nThis is why I'm keen on 3D graphics programs — they do a great job of giving the artist hundreds or thousands of such tools, without it getting overwhelming. They're a real masterclass in sophisticated GUI design."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heartpulse",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "U7C7B75R6"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566882842.242800",
        "client_msg_id": "2b926926-97d8-4f4d-b31f-581ff322daf7",
        "text": "You mean like bones? Or dummy objects?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jwDIj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mean like bones? Or dummy objects?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1566885320.243100",
        "client_msg_id": "b1f88b68-8022-475d-a4a2-7cdc02e30025",
        "text": "Are you referring to this? <http:\/\/docs.mech-lang.org\/#\/examples\/robot-drawing.mec>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jHwQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you referring to this? "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/docs.mech-lang.org\/#\/examples\/robot-drawing.mec"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1566885363.243300",
        "client_msg_id": "80194d1e-4fe7-47b4-b6bf-0ac7b490f678",
        "text": "This was just an early demo to show html canvas working",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pw5=8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was just an early demo to show html canvas working"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1566885383.243500",
        "client_msg_id": "a6e16a0f-7bd7-4544-89dd-17a51f4d8aed",
        "text": "so the code is verbose",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dq\/5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so the code is verbose"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566887895.243700",
        "client_msg_id": "3806b0a3-8a2c-4ea9-8fa4-1c65c02079ce",
        "text": "Yes that's it :smiley:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mgWY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes that's it "
                            },
                            {
                                "type": "emoji",
                                "name": "smiley",
                                "unicode": "1f603"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]