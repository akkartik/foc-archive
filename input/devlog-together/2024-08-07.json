[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723065586.163539",
        "client_msg_id": "bf744cae-a28a-49e7-983c-236c99c6032b",
        "text": "Gemtext is definitely easier to parse. That was the whole design goal. Evidence: count the number of Gemini clients out there written in less than 200 lines of code.\n\nThe drawback of Gemtext: no inline formatting, no inline links. You can only format at line granularity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qDF4q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gemtext is definitely easier to parse. That was the whole design goal. Evidence: count the number of Gemini clients out there written in less than 200 lines of code.\n\nThe drawback of Gemtext: no inline formatting, no inline links. You can only format at line granularity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723066184.066909",
        "client_msg_id": "60ae5fcb-cc66-41c3-9a7a-bd159de1d453",
        "text": "<@UE6EFEPTQ> — Yes. A classic.\n<@UCUSW7WVD> (cc <@UJBAJNFLK>) — Had a look at Gemtext. I really like it! I think it would be trivial (and sensible) to extend this syntax to support inline links and formatting (including code, using a modal processor just like you do for lines). I'm going to give it a shot and see how it goes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pg3b2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " — Yes. A classic.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " (cc "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ") — Had a look at Gemtext. I really like it! I think it would be trivial (and sensible) to extend this syntax to support inline links and formatting (including code, using a modal processor just like you do for lines). I'm going to give it a shot and see how it goes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "astonished",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723066468.541039",
        "client_msg_id": "48de9d31-1510-4bf5-b436-733048c85263",
        "text": "Astonished?\n\nIt's simple, you just implement an FSM, and split the incoming character stream on any syntactically-relevant character, then backtrack if you hit a node in the FSM with no outbound edges.\n\n<https:\/\/www.urbandictionary.com\/define.php?term=%2FS|\/s>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "46srZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Astonished?\n\nIt's simple, you just implement an FSM, and split the incoming character stream on any syntactically-relevant character, then backtrack if you hit a node in the FSM with no outbound edges.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.urbandictionary.com\/define.php?term=%2FS",
                                "text": "\/s"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1723068340.322439",
        "client_msg_id": "614fc32f-a12a-42e1-b5dd-cae9ee26ddd5",
        "text": "I suspect markdown would also be really easy to parse if you refuse to implement all the stupid edge cases eg if someone writes `am _I bold* or_ italic*` just replace it with an error message.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6VuUi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect markdown would also be really easy to parse if you refuse to implement all the stupid edge cases eg if someone writes "
                            },
                            {
                                "type": "text",
                                "text": "am _I bold* or_ italic*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just replace it with an error message."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723068402.282409",
        "client_msg_id": "AE78719C-232A-4D90-AC25-FC402CCDFA2C",
        "text": "Shhhh you're spoiling my \"actually I will implement a superset of gemtext\" gambit to ship decent md ;)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N6z4t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shhhh you're spoiling my \"actually I will implement a superset of gemtext\" gambit to ship decent md ;)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "saluting_face",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1723068761.184629",
        "client_msg_id": "34b1297d-5f56-411b-8f3e-343d7bc70436",
        "text": "&gt; Astonished?\nParsing is one of those funny things where the existence of lots of interesting theory and papers creates the impression that you need complicated tools, whereas in practice almost every industrial parser I've ever seen is just hand-written recursive descent because that is by far the easiest option.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QUmTM",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Astonished?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nParsing is one of those funny things where the existence of lots of interesting theory and papers creates the impression that you need complicated tools, whereas in practice almost every industrial parser I've ever seen is just hand-written recursive descent because that is by far the easiest option."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723069148.595929",
        "client_msg_id": "48bd569d-4899-4559-b0b2-3fab5eae3f92",
        "text": "Yeah. Alex Warth (known for OhmJS among other things) has been teaching a little \"prototyping programming languages\" course internally at I&amp;S. One of the major themes is just that — unless you're actually building an industrial-scale compiler, most of the standard advice given about writing compilers is bunk. Just do something quick and dirty and direct and manual. It's fine. It's _plenty_ fast, and robust.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oNUe9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. Alex Warth (known for OhmJS among other things) has been teaching a little \"prototyping programming languages\" course internally at I&S. One of the major themes is just that — unless you're actually building an industrial-scale compiler, most of the standard advice given about writing compilers is bunk. Just do something quick and dirty and direct and manual. It's fine. It's "
                            },
                            {
                                "type": "text",
                                "text": "plenty",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fast, and robust."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723069260.843259",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1723069323.000000"
        },
        "client_msg_id": "7e4cd883-8700-4825-810b-69fe74274b22",
        "text": "So it's funny to hear that even for the industrial stuff, most of the sophisticated theory doesn't apply.\n\nI guess the one place that stuff is actually useful is when writing… textbooks about compilers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7y4Lv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So it's funny to hear that even for the industrial stuff, most of the sophisticated theory doesn't apply.\n\nI guess the one place that stuff is actually useful is when writing… textbooks about compilers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723078840.806409",
        "client_msg_id": "dc3ac2dd-9858-4581-b64e-0147a000da1c",
        "text": "My astonishment is about getting into notation design, not parsing. What could possibly go wrong :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LK+eV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My astonishment is about getting into notation design, not parsing. What could possibly go wrong "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723078921.457019",
        "client_msg_id": "109c37fc-02c6-45ac-979d-ea1013625a1b",
        "text": "I will be counting the days until people start complaining about the notation or asking for features.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AqoVM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will be counting the days until people start complaining about the notation or asking for features."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1723080410.845889",
        "client_msg_id": "488CCCB1-D0AE-43DB-A498-BA5937C1BCC2",
        "text": "<https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1722442852630609|-7> ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9tCNM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1722442852630609",
                                "text": "-7"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723081015.810969",
        "client_msg_id": "4fd51a84-27b6-4422-beda-1598a7ed252a",
        "text": "Exactly. And that was just about how to _implement_ a notation.\n\nIt's fine. If I'm worried about bikeshedding I shouldn't add to it :smile: :homer-backing-away:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1FQLK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly. And that was just about how to "
                            },
                            {
                                "type": "text",
                                "text": "implement ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "a notation.\n\nIt's fine. If I'm worried about bikeshedding I shouldn't add to it "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " :homer-backing-away:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723081327.363749",
        "client_msg_id": "e61aa9a8-dd7c-4192-981a-3082786a114a",
        "text": "Y'all just got me to de-emoji myself by clubbing me with the unwashed masses who haven't written a recursive descent parser or three :sweat_smile:\n\n(Parsing has its depths. It's hard to make sure all possible illegal statements behave well and raise errors. Favorite target of fuzzers! Probably less important in a safe language, but be prepared for the odd DoS vulnerability caused by an infinite loop in a year or 3.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XJj3W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Y'all just got me to de-emoji myself by clubbing me with the unwashed masses who haven't written a recursive descent parser or three "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(Parsing has its depths. It's hard to make sure all possible illegal statements behave well and raise errors. Favorite target of fuzzers! Probably less important in a safe language, but be prepared for the odd DoS vulnerability caused by an infinite loop in a year or 3.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clubs",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            },
            {
                "name": "smile",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1723083924.530079",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1723084366.000000"
        },
        "client_msg_id": "f818fda1-c568-4120-9dc1-d9bf43a55b9f",
        "text": "Going back, this is a good suggestion:\n\n> I suspect markdown would also be really easy to parse if you refuse to implement all the stupid edge cases eg if someone writes `am _I bold* or_ italic*` just replace it with an error message.\nThe key is doing it without eating people's comments. May be safer to just leave the whole message unformatted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X8Nf3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Going back, this is a good suggestion:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect markdown would also be really easy to parse if you refuse to implement all the stupid edge cases eg if someone writes "
                            },
                            {
                                "type": "text",
                                "text": "am _I bold* or_ italic*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just replace it with an error message."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe key is doing it without eating people's comments. May be safer to just leave the whole message unformatted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723086751.928109",
        "client_msg_id": "7576f37d-633f-401d-a51c-94bff6414746",
        "text": "Drive-by comments and observations...\n1. A major cause of difficulty in parsing is: ASCII. ASCII provides so few characters that we are inclined to overload their meaning. For example “begin string” and “end string” are both represented by the same quote characters in traditional programming languages. Parentheses can bracket expressions or invoke functions or define arg lists in function definitions. Unicode, though, has tons of characters, hence I, for one, have no compunction about choosing a single, non-overloaded meaning for specific characters, and, I have no compunction about choosing left and right bracketing characters for each different kind of bracketing that I feel is needed. The concept of nested comments seemed revolutionary in the past, but, would be natural using non-overloaded characters. Likewise, nested strings become easy to imagine. (Note that the Unix program “M4” does define different begin and end quote characters for some of its strings).\n2. Recursive descent + backtracking = PEG. Recursive descent does better than CFG and REGEX for practical parsing, with the exception that you have to manually pre-refactor the grammar to fold together all common prefixes (left hand side of phrases). PEG adds the nuance that it can try to parse a phrase, and, if the attempt fails, PEG backs up and retries some other parse branch. With backtracking, manual common prefix refactoring is no longer necessary (the machine does it for you). Backtracking was well-known early on, but, frowned upon by those with 1950s biases. Early’s parser and PROLOG were side-stepped for “more efficient”, gotcha-full approaches. Backtracking ain’t all that hard if you ignore your inner 1950s biases. [I even have a JS backtracker (a Prolog) lying around, only lightly tested, on my repo somewhere, generated by my first use of OhmJS. I transpiled Nils Holm’s Scheme program to JS. If I can do it, anyone can.]. \n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722836207.656899",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lGz5F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Drive-by comments and observations...\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A major cause of difficulty in parsing is: ASCII. ASCII provides so few characters that we are inclined to overload their meaning. For example “begin string” and “end string” are both represented by the same quote characters in traditional programming languages. Parentheses can bracket expressions or invoke functions or define arg lists in function definitions. Unicode, though, has tons of characters, hence I, for one, have no compunction about choosing a single, non-overloaded meaning for specific characters, and, I have no compunction about choosing left and right bracketing characters for each different kind of bracketing that I feel is needed. The concept of nested comments seemed revolutionary in the past, but, would be natural using non-overloaded characters. Likewise, nested strings become easy to imagine. (Note that the Unix program “M4” does define different begin and end quote characters for some of its strings)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Recursive descent + backtracking = PEG. Recursive descent does better than CFG and REGEX for practical parsing, with the exception that you have to manually pre-refactor the grammar to fold together all common prefixes (left hand side of phrases). PEG adds the nuance that it can try to parse a phrase, and, if the attempt fails, PEG backs up and retries some other parse branch. With backtracking, manual common prefix refactoring is no longer necessary (the machine does it for you). Backtracking was well-known early on, but, frowned upon by those with 1950s biases. Early’s parser and PROLOG were side-stepped for “more efficient”, gotcha-full approaches. Backtracking ain’t all that hard if you ignore your inner 1950s biases. [I even have a JS backtracker (a Prolog) lying around, only lightly tested, on my repo somewhere, generated by my first use of OhmJS. I transpiled Nils Holm’s Scheme program to JS. If I can do it, anyone can.]. "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    }
]