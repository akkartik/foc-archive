[
    {
        "user": "UNV27TUKA",
        "type": "message",
        "ts": "1571064511.280600",
        "client_msg_id": "218cbbdb-d273-46c1-b42f-efb58feb35c5",
        "text": "I'm totally reading this in his voice",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gb450c754c95",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b450c754c95e372799d56cb7eef2eba2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "James Sully",
            "display_name": "James Sully",
            "team": "T5TCAFTA9",
            "name": "sullyj3",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dF0jj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm totally reading this in his voice"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571066056.280800",
        "client_msg_id": "509db0a8-7823-4e1c-9e4e-7d0262142f2c",
        "text": "<@UJBAJNFLK> Thanks for the clarification. I guess that the definition of a language primitive is: if you implement a primitive in the source language itself, you induce a meta-circular dependency on the language implementation. Non-primitives can be implemented in terms of primitives without creating this kind of circularity. Meta-circular definitions of language primitives are not just a party trick. They are necessary if you want to implement an operating system that runs on top of the bare metal, and if you also want to use that same language &amp; operating system to develop newer versions of itself. The C compiler is written in C. <@ULM3U6275> I agree with your sentiment. Implementing a language in itself, all the way down to the bare metal, is possible, but then you take on the job of supporting all modern hardware, which is a huge commitment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0FEX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the clarification. I guess that the definition of a language primitive is: if you implement a primitive in the source language itself, you induce a meta-circular dependency on the language implementation. Non-primitives can be implemented in terms of primitives without creating this kind of circularity. Meta-circular definitions of language primitives are not just a party trick. They are necessary if you want to implement an operating system that runs on top of the bare metal, and if you also want to use that same language & operating system to develop newer versions of itself. The C compiler is written in C. "
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " I agree with your sentiment. Implementing a language in itself, all the way down to the bare metal, is possible, but then you take on the job of supporting all modern hardware, which is a huge commitment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1571067844.281000",
        "client_msg_id": "46b72c46-3539-4bbc-8b30-d3a8f658d2f1",
        "text": "Nada Amin's \"collapsing towers of meta-circular interpreters\" might be of interest- <https:\/\/www.cs.purdue.edu\/homes\/rompf\/papers\/amin-popl18.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "95v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nada Amin's \"collapsing towers of meta-circular interpreters\" might be of interest- "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.purdue.edu\/homes\/rompf\/papers\/amin-popl18.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571080124.283300",
        "client_msg_id": "392bd37b-f88f-463c-8ebf-833a91f15199",
        "text": "<@U71PMQ1V0> Thanks for the link, it's quite relevant to my project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hwTR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the link, it's quite relevant to my project."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1571081059.283500",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1571081149.000000"
        },
        "client_msg_id": "98caa1a4-00a8-4ad9-ac48-5b3ca4e6f024",
        "text": "Can anyone explain the appeal of saying things like numbers are just a certain type of list? (Btw: Iâ€™ve done set theory and such, so the idea of such an encoding is very familiar, it just leaves me cold, in both mathematical and programming contexts).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Okiy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can anyone explain the appeal of saying things like numbers are just a certain type of list? (Btw: Iâ€™ve done set theory and such, so the idea of such an encoding is very familiar, it just leaves me cold, in both mathematical and programming contexts)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1571081940.283800",
        "client_msg_id": "f4f6d8fc-5490-45f3-b66e-904210e712e4",
        "text": "I couldn't write any Lisp code (mostly Scheme and Emacs Lisp these days) without paredit in Emacs, And like <@UC2A2ARPT>, I set parens to a faint color so they don't dominate visually. I am much more efficient writing this than e.g. Python, although I have probably written 10x more Python code than all Lisps taken together.\n(Achievement unlocked: I used \"10x\" to describe myself.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lfQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I couldn't write any Lisp code (mostly Scheme and Emacs Lisp these days) without paredit in Emacs, And like "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ", I set parens to a faint color so they don't dominate visually. I am much more efficient writing this than e.g. Python, although I have probably written 10x more Python code than all Lisps taken together.\n(Achievement unlocked: I used \"10x\" to describe myself.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1571082006.284000",
        "client_msg_id": "658dfb8d-3d4a-4ee7-a4b0-d71f64208f3f",
        "text": "From a quick look at Bel, it looks a bit like a specification rather than programming language. Except that I don't see the utility of writing specifications at such a low level. So... maybe I'll have another look in a year or two, but I am not holding my breath.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DWhd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From a quick look at Bel, it looks a bit like a specification rather than programming language. Except that I don't see the utility of writing specifications at such a low level. So... maybe I'll have another look in a year or two, but I am not holding my breath."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571084651.284200",
        "client_msg_id": "ae7b2efd-ca7b-41cc-9100-c018f986f079",
        "text": "This entertaining presentation of the paper \"What about the natural numbers?\" makes a case for treating natural numbers more like lists, in a programming context. It even provides a practical motivation for \"lazy natural numbers\". <https:\/\/www.youtube.com\/watch?v=jFk1qpr1ytk>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "What About the Natural Numbers? by JosÃ© Manuel CalderÃ³n Trilla [PWLConf 2019]",
                "title_link": "https:\/\/www.youtube.com\/watch?v=jFk1qpr1ytk",
                "author_name": "PapersWeLove",
                "author_link": "https:\/\/www.youtube.com\/user\/PapersWeLove",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/jFk1qpr1ytk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: What About the Natural Numbers? by JosÃ© Manuel CalderÃ³n Trilla [PWLConf 2019]",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/jFk1qpr1ytk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=jFk1qpr1ytk",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=jFk1qpr1ytk"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tiu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This entertaining presentation of the paper \"What about the natural numbers?\" makes a case for treating natural numbers more like lists, in a programming context. It even provides a practical motivation for \"lazy natural numbers\". "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=jFk1qpr1ytk"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1571084967.284500",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1571084972.000000"
        },
        "client_msg_id": "aeaa1c6f-67cc-42d7-a5f7-1819bdee56f6",
        "text": "Thanks, I canâ€™t watch a video right now, but Iâ€™ll try to have a look when I can.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zn9Cj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, I canâ€™t watch a video right now, but Iâ€™ll try to have a look when I can."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571085451.284800",
        "client_msg_id": "61dccb74-2381-429a-811b-7298ddc271db",
        "text": "<@UKJGU23KP> Here's the original paper, it's quite readable: <https:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.56.3442&amp;rep=rep1&amp;type=pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UsE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " Here's the original paper, it's quite readable: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.56.3442&amp;rep=rep1&amp;type=pdf",
                                "text": "https:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.56.3442&rep=rep1&type=pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571086489.285000",
        "client_msg_id": "93d2097d-59c8-4cba-97b3-abfc99bc106c",
        "text": "Also, the Idris language works this way. The natural numbers are defined in the standard library as `data Nat = Z | S Nat`. <https:\/\/www.idris-lang.org\/example\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ryD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, the Idris language works this way. The natural numbers are defined in the standard library as "
                            },
                            {
                                "type": "text",
                                "text": "data Nat = Z | S Nat",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.idris-lang.org\/example\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571088883.285400",
        "client_msg_id": "fd0f442e-952c-4b23-8d7d-3730e3c1594f",
        "text": "<@UJBAJNFLK> Why are you much more efficient writing Lisp than Python? Inquiring language designers need to know!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "apFW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Why are you much more efficient writing Lisp than Python? Inquiring language designers need to know!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1571116481.285700",
        "client_msg_id": "1d430b5c-346e-42c7-a776-84ef8bcf225d",
        "text": "<@UJN1TAYEQ> I'd say really getting a concrete syntax down cold takes a while.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bhfJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I'd say really getting a concrete syntax down cold takes a while."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1571121111.285900",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1571121243.000000"
        },
        "client_msg_id": "2b448f36-ad41-44e8-b1a3-f32b276ee2bb",
        "text": "Mathematica being the only commonly used symbolic system, has arbitrary precision available. Excel, the most commonly used programming tool offers protected arithmetic. COBOL, the most derided tool still in use, offers BCD arithmetic, where 0.1 + 0.2 does equal 0.3, (which it does not in IEEE floating point). There are a lot of choices for arithmetic, and it is a very interesting, and fundamentally very important design decision for any language. In my Beads language i offer physical units of measurement which stores the exponents of the fundamental units along with the magnitude of a number, so that when you multiply  kg times meters you have a quantity with mass^1 â€¢ length^1, and this is maintained at runtime, so as to support catching mistakes in units both at compile time and more importantly at runtime, which per Van Snyder of JPL is the 3rd most common error in engineering and scientific software. I recently announced this feature to the scientist subgroup of Reddit and got heaps of abuse from scientists who claimed that they never make units mistakes, and couldn't possibly tolerate the additional overhead of storing such things. I was quite surprised by the negative reaction to this very clever implementation of a desired feature from the 70's, and it has taught me that violent opposition to any fundamental change is going to happen. Offering too many kinds of numbers in languages (like INT8 INT16, INT32, INT64) is a hangover from the 70's when you spent a lot of time figuring out how many bytes each field should take, and carefully trimmed field sizes so as to take minimum space. Those days are long gone, and in the JS world, you only have FLOAT64. Too bad IEEE floating point is so stupid, as pointed out in the wonderful talks by Douglas Crockford on its many intrinsic flaws.  It is very hard to fix this nasty problem because of interchange issues, where really we need to change all at once to a better format. That might not happen for another 20 years at the rate we are going.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wa4y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mathematica being the only commonly used symbolic system, has arbitrary precision available. Excel, the most commonly used programming tool offers protected arithmetic. COBOL, the most derided tool still in use, offers BCD arithmetic, where 0.1 + 0.2 does equal 0.3, (which it does not in IEEE floating point). There are a lot of choices for arithmetic, and it is a very interesting, and fundamentally very important design decision for any language. In my Beads language i offer physical units of measurement which stores the exponents of the fundamental units along with the magnitude of a number, so that when you multiply  kg times meters you have a quantity with mass^1 â€¢ length^1, and this is maintained at runtime, so as to support catching mistakes in units both at compile time and more importantly at runtime, which per Van Snyder of JPL is the 3rd most common error in engineering and scientific software. I recently announced this feature to the scientist subgroup of Reddit and got heaps of abuse from scientists who claimed that they never make units mistakes, and couldn't possibly tolerate the additional overhead of storing such things. I was quite surprised by the negative reaction to this very clever implementation of a desired feature from the 70's, and it has taught me that violent opposition to any fundamental change is going to happen. Offering too many kinds of numbers in languages (like INT8 INT16, INT32, INT64) is a hangover from the 70's when you spent a lot of time figuring out how many bytes each field should take, and carefully trimmed field sizes so as to take minimum space. Those days are long gone, and in the JS world, you only have FLOAT64. Too bad IEEE floating point is so stupid, as pointed out in the wonderful talks by Douglas Crockford on its many intrinsic flaws.  It is very hard to fix this nasty problem because of interchange issues, where really we need to change all at once to a better format. That might not happen for another 20 years at the rate we are going."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1571122053.286200",
        "client_msg_id": "1534783a-9573-4c8d-8089-c22cd23a5fd0",
        "text": "Here's a scientist who openly admits having had to deal with unit problems many times, in my own code and in the code of others. In fact, the problem mostly comes from different people tacitly assuming different conventions, so people who use only code they wrote themselves are perhaps in a better situation.\nCalling IEEE FP stupid is a sign of... stupidity. A lot of careful thought has gone into that specification, which is a good fit for what it was designed for (scientific computing). People who barely understand it and use it for accounting get the punishment they deserve. The real problem with IEEE FP is that it is commonly presented (in programming tutorials) as \"real numbers\" making people believe in properties that IEEE FP doesn't have.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ey6A4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a scientist who openly admits having had to deal with unit problems many times, in my own code and in the code of others. In fact, the problem mostly comes from different people tacitly assuming different conventions, so people who use only code they wrote themselves are perhaps in a better situation.\nCalling IEEE FP stupid is a sign of... stupidity. A lot of careful thought has gone into that specification, which is a good fit for what it was designed for (scientific computing). People who barely understand it and use it for accounting get the punishment they deserve. The real problem with IEEE FP is that it is commonly presented (in programming tutorials) as \"real numbers\" making people believe in properties that IEEE FP doesn't have."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1571122241.286400",
        "client_msg_id": "fd1f0b37-1330-4123-a269-8c5d8a4b9a03",
        "text": "<@UJN1TAYEQ> Uniformity of syntax is one aspect. In Python you have parentheses, indentation, and square brackets being used in different concepts for the same purpose: establishing a tree structure.  The other aspect is tool support. WIth paredit in Emacs, I almost think in terms of paredit operations rather than in terms of characters. It goes a long way towards structural editing from my point of view.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k=K3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Uniformity of syntax is one aspect. In Python you have parentheses, indentation, and square brackets being used in different concepts for the same purpose: establishing a tree structure.  The other aspect is tool support. WIth paredit in Emacs, I almost think in terms of paredit operations rather than in terms of characters. It goes a long way towards structural editing from my point of view."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]