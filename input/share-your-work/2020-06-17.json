[
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1592417344.329900",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1592417423.000000"
        },
        "client_msg_id": "b81df806-baf6-4aec-8778-5612922a426b",
        "text": "Much like Edward, I was confused about the data model after seeing the video. There's \"objects\" and there's \"events\" and they are tied together... somehow, and in one view a GUID appears but in another it does not appear for some reason. The data schema is important; your thingie is not user-friendly unless users can see data and schema more directly - and do things with it, such as rearrange it to correct mistakes in the schema and data.\n\nEarlier I remember seeing a really nice spreadsheet-like editor for databases, I think it's on this slack somewhere. It wasn't super pretty (because it's designed to look like a boring old spreadsheet) but it supported all of SQL-92 + extras entirely in a visual manner. Users didn't have to construct a user interface, they could just deal with the data (and views and calculated columns) directly. A thing like this for constructing user interfaces could be a great value-add *on top of* something like that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591918996.315500",
        "parent_user_id": "UP7N4QVK2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Y5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Much like Edward, I was confused about the data model after seeing the video. There's \"objects\" and there's \"events\" and they are tied together... somehow, and in one view a GUID appears but in another it does not appear for some reason. The data schema is important; your thingie is not user-friendly unless users can see data and schema more directly - and do things with it, such as rearrange it to correct mistakes in the schema and data.\n\nEarlier I remember seeing a really nice spreadsheet-like editor for databases, I think it's on this slack somewhere. It wasn't super pretty (because it's designed to look like a boring old spreadsheet) but it supported all of SQL-92 + extras entirely in a visual manner. Users didn't have to construct a user interface, they could just deal with the data (and views and calculated columns) directly. A thing like this for constructing user interfaces could be a great value-add "
                            },
                            {
                                "type": "text",
                                "text": "on top of",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " something like that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1592421765.330300",
        "client_msg_id": "132c09e9-0aa8-49b6-b669-e246aafd31a3",
        "text": "I love this \"book\". Will check out <@UCUSW7WVD>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592293608.328500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VKcGq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this \"book\". Will check out "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1592438249.330600",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1592439099.000000"
        },
        "client_msg_id": "a701a352-4b63-4eba-9ac8-f0621fca6c67",
        "text": "I suggest you work on reducing the amount of punctuation in your syntax. For example, the token 'break-if-= $term:loop' should probably be reduced to 'breakif'. Punctuation characters cause the user to slow massively down in their typing. Few people have memorized the punctuation characters. And it impairs readability massively when the key operator is the = sign afterwards. so 'breakif ='. but since it is so frequently used, how about 'bif ='.  Also the break statement having to specify the name of the block it is breaking out of is a huge waste of typing. 99% of the time you are breaking out of only one level, so make it the default unless you override it with an explicit label (as so many other languages do).\n\nAlso, in this day and age, having to refer to registers the same way intel does is counterproductive. In the 8086 you ad the AL and AH registers because people were doing byte based stuff. AX was the 16 bit register. then 32 bits came along and they called that EAX. Why not go in the reverse, where you assume 64 or 32 bit registers, call that R1, R2, ... RN., and if you want to specify 16-bit parts you use a longer string, like RL1, RH1 ,and if you want to just grab a single byte (very rare), you use RLL1. The point is to take the most frequent operations and make them short, and let the less frequent operations. Of course it goes without saying to avoid nutty instructions like the insane intel GF2P8AFFINEINVQB instruction, which to me is the most obvious sign of intel's decline.\n\nAt present your calculator sample is so many characters that i would consider it a punishment to use the language. You've got to be ruthless about abandoning historical notations, and arrive at one that is compact, readable, and avoids unnecessary use of hard to type characters.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592293608.328500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "REO7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suggest you work on reducing the amount of punctuation in your syntax. For example, the token 'break-if-= $term:loop' should probably be reduced to 'breakif'. Punctuation characters cause the user to slow massively down in their typing. Few people have memorized the punctuation characters. And it impairs readability massively when the key operator is the = sign afterwards. so 'breakif ='. but since it is so frequently used, how about 'bif ='.  Also the break statement having to specify the name of the block it is breaking out of is a huge waste of typing. 99% of the time you are breaking out of only one level, so make it the default unless you override it with an explicit label (as so many other languages do).\n\nAlso, in this day and age, having to refer to registers the same way intel does is counterproductive. In the 8086 you ad the AL and AH registers because people were doing byte based stuff. AX was the 16 bit register. then 32 bits came along and they called that EAX. Why not go in the reverse, where you assume 64 or 32 bit registers, call that R1, R2, ... RN., and if you want to specify 16-bit parts you use a longer string, like RL1, RH1 ,and if you want to just grab a single byte (very rare), you use RLL1. The point is to take the most frequent operations and make them short, and let the less frequent operations. Of course it goes without saying to avoid nutty instructions like the insane intel GF2P8AFFINEINVQB instruction, which to me is the most obvious sign of intel's decline.\n\nAt present your calculator sample is so many characters that i would consider it a punishment to use the language. You've got to be ruthless about abandoning historical notations, and arrive at one that is compact, readable, and avoids unnecessary use of hard to type characters."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UNCP67JSK"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "Thanks for the feedback, Edward. My sense is that `break if` is easier to _read_ even if `bif` is easier to type. But that's very much a hypothesis. Certainly my hands would suffer less RSI if I switched over. I'd appreciate feedback from others.\n\n> 99% of the time you are breaking out of only one level, so make it the default unless you override it with an explicit label.\nYup, that is already the case. Are you seeing the innermost level redundantly specified somewhere? Notice that there's an intervening '{' between `break-if-= $term:loop` and the `$term:loop` label definition (screenshot attached).\n\nI would love to rename registers, but then a reader consulting the Intel manuals has to constantly translate in their minds. I consulted the Intel manuals intensely when I built the lower layers, so it's hard to be sure I've eliminated the need for consulting them by now. I try not to impose unnecessary labor on the reader. Labor I didn't have to perform feels particularly egregious.\n\nThere will likely be a RISC-V or ARM rethinking of Mu at some point, particularly in light of recent news. That will certainly fix the register names.\n\nIn general, I care a lot about minimizing how much a reader has to learn to start reading Mu code. It might sound funny to anyone who's actually tried to read Mu code, but it's very much true. I care more about the reading experience than minimizing characters; I think dropping letters has historically made code less approachable to non-programmers. As I said, I'll keep your feedback in mind, and I'll look for confirming feedback from others.",
        "files": [
            {
                "id": "F015M2MBBAN",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SP5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the feedback, Edward. My sense is that "
                            },
                            {
                                "type": "text",
                                "text": "break if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is easier to "
                            },
                            {
                                "type": "text",
                                "text": "read",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " even if "
                            },
                            {
                                "type": "text",
                                "text": "bif",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is easier to type. But that's very much a hypothesis. Certainly my hands would suffer less RSI if I switched over. I'd appreciate feedback from others.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "99% of the time you are breaking out of only one level, so make it the default unless you override it with an explicit label."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yup, that is already the case. Are you seeing the innermost level redundantly specified somewhere? Notice that there's an intervening '{' between "
                            },
                            {
                                "type": "text",
                                "text": "break-if-= $term:loop",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the "
                            },
                            {
                                "type": "text",
                                "text": "$term:loop",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " label definition (screenshot attached).\n\nI would love to rename registers, but then a reader consulting the Intel manuals has to constantly translate in their minds. I consulted the Intel manuals intensely when I built the lower layers, so it's hard to be sure I've eliminated the need for consulting them by now. I try not to impose unnecessary labor on the reader. Labor I didn't have to perform feels particularly egregious.\n\nThere will likely be a RISC-V or ARM rethinking of Mu at some point, particularly in light of recent news. That will certainly fix the register names.\n\nIn general, I care a lot about minimizing how much a reader has to learn to start reading Mu code. It might sound funny to anyone who's actually tried to read Mu code, but it's very much true. I care more about the reading experience than minimizing characters; I think dropping letters has historically made code less approachable to non-programmers. As I said, I'll keep your feedback in mind, and I'll look for confirming feedback from others."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1592442141.331300",
        "thread_ts": "1592293608.328500",
        "parent_user_id": "UCUSW7WVD"
    }
]