[
    {
        "user": "UBRKVHMCL",
        "type": "message",
        "ts": "1571642404.106500",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571658258.000000"
        },
        "client_msg_id": "733534eb-66c6-4020-a3fc-92c648d56fa5",
        "text": "<@UP6G25H35> thanks for trying it out!\n\nI just wanted the power of traditional programming with a spreadsheet interface. In practice, from a programmer's perspective it's best for writing backend “functional core” logic with a separate wrapper to take care of the IO “imperative shell” layer. Examples are (a) web server backends in a spreadsheet (URL routing to views, template generation, etc); (b) supercharged calculators (eg payment schedules with arbitrary length). The files are 'just JavaScript' so they can be uploaded as a backend for a website and a frontend can easily be created using HTML\/CSS\/JS.\n\nMesh had to:\n\n(a) be powerful enough to write its backend as a Mesh sheet. in particular Mesh specialises in processing and generating data of arbitrary length as arrays and tables, as shown in the GIF on the front page; it also allows functions to live in spreadsheet cells as first-class data\n\n(b) have sheets that are stored as text files for easy version control via git and other diff tools\n\n(c) have minimal installation requirements (no need to have admin rights to run locally - can run in a web browser without an internet connection and without needing to run a local server). Otherwise it'd be a dead duck in most enterprise environments where people don't have control over their computers.\n\nI am probably going to replace the formula language with something else that's easier to parse, and the project has stalled a bit while I figure that out (there's a lot of work happening behind the scenes!). This post has more on the current status: <https:\/\/news.ycombinator.com\/item?id=21114010>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6b404ba64c8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/86b404ba64c84041168e5b10b7148030.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Chris Pearson",
            "display_name": "chrispsn",
            "team": "T5TCAFTA9",
            "name": "chrispsn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6vTGm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP6G25H35"
                            },
                            {
                                "type": "text",
                                "text": " thanks for trying it out!\n\nI just wanted the power of traditional programming with a spreadsheet interface. In practice, from a programmer's perspective it's best for writing backend “functional core” logic with a separate wrapper to take care of the IO “imperative shell” layer. Examples are (a) web server backends in a spreadsheet (URL routing to views, template generation, etc); (b) supercharged calculators (eg payment schedules with arbitrary length). The files are 'just JavaScript' so they can be uploaded as a backend for a website and a frontend can easily be created using HTML\/CSS\/JS.\n\nMesh had to:\n\n(a) be powerful enough to write its backend as a Mesh sheet. in particular Mesh specialises in processing and generating data of arbitrary length as arrays and tables, as shown in the GIF on the front page; it also allows functions to live in spreadsheet cells as first-class data\n\n(b) have sheets that are stored as text files for easy version control via git and other diff tools\n\n(c) have minimal installation requirements (no need to have admin rights to run locally - can run in a web browser without an internet connection and without needing to run a local server). Otherwise it'd be a dead duck in most enterprise environments where people don't have control over their computers.\n\nI am probably going to replace the formula language with something else that's easier to parse, and the project has stalled a bit while I figure that out (there's a lot of work happening behind the scenes!). This post has more on the current status: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=21114010"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1571645656.107500",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1571903888.000000"
        },
        "client_msg_id": "82d7b980-ece0-493b-a7e3-fcde2e6d5063",
        "text": "A great lecture by Richard Feldman, on the Elm team, entitled \"Why isn't functional programming the norm\", explores why some languages are popular.  <https:\/\/www.youtube.com\/watch?v=QyJZzq0v7Z4>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "reply_count": 29,
        "reply_users_count": 6,
        "latest_reply": "1571870990.167800",
        "reply_users": [
            "UJ6LDMMN0",
            "UP448V1PB",
            "UJN1TAYEQ",
            "UAVCC2X70",
            "ULM3U6275",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UJ6LDMMN0",
                "ts": "1571650425.107700"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571671871.110700"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571671916.110900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571679074.122700"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571680354.122900"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571680455.123100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571681397.124100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571681706.124300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571682062.124500"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571682934.125700"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571682978.125900"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571683039.126100"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571683100.126300"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571683272.126500"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571683345.126700"
            },
            {
                "user": "UP448V1PB",
                "ts": "1571683442.127100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571684078.127300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571684139.127500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571684311.127700"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571686013.127900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1571687299.130700"
            },
            {
                "user": "ULM3U6275",
                "ts": "1571700638.131300"
            },
            {
                "user": "ULM3U6275",
                "ts": "1571701409.131600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1571751449.134600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1571823189.158500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1571823205.158700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1571823500.159100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1571849925.162700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1571870990.167800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Why Isn't Functional Programming the Norm? – Richard Feldman",
                "title_link": "https:\/\/www.youtube.com\/watch?v=QyJZzq0v7Z4",
                "author_name": "Metosin",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC1lFJanm5Wp6IpNk-2C1Sxw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/QyJZzq0v7Z4\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Why Isn't Functional Programming the Norm? – Richard Feldman",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/QyJZzq0v7Z4?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=QyJZzq0v7Z4",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=QyJZzq0v7Z4"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+b9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A great lecture by Richard Feldman, on the Elm team, entitled \"Why isn't functional programming the norm\", explores why some languages are popular.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=QyJZzq0v7Z4"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6",
                    "UL3CJ7YKC",
                    "UBSMEUXAA",
                    "UP3FH4CLU",
                    "UE0ETTCG7"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1571650425.107700",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1571650431.000000"
        },
        "client_msg_id": "98b974e3-4075-467c-b4d6-0acd51d1bd0c",
        "text": "Is there a TL;DW (too long; don't watch) somewhere? :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eolI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a TL;DW (too long; don't watch) somewhere? "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBRKVHMCL",
        "type": "message",
        "ts": "1571652060.109800",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571652142.000000"
        },
        "client_msg_id": "1FEE2AF1-3755-4B8F-83BA-DA9DE555D067",
        "text": "I really like Audrey Tang’s work btw, especially on the spreadsheet in 99 lines. It challenges me to reduce the size of the code base without compromising functionality <https:\/\/www.aosabook.org\/en\/500L\/web-spreadsheet.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6b404ba64c8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/86b404ba64c84041168e5b10b7148030.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Chris Pearson",
            "display_name": "chrispsn",
            "team": "T5TCAFTA9",
            "name": "chrispsn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x64jW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like Audrey Tang’s work btw, especially on the spreadsheet in 99 lines. It challenges me to reduce the size of the code base without compromising functionality "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.aosabook.org\/en\/500L\/web-spreadsheet.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571671871.110700",
        "client_msg_id": "59dcbbfb-d61e-4cbc-9e8f-1ff6a3dcd9c7",
        "text": "It's interesting that he doesn't consider Swift or Kotlin to be functional languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DeR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's interesting that he doesn't consider Swift or Kotlin to be functional languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571671916.110900",
        "client_msg_id": "20616892-12ba-4053-a18d-8058935f06aa",
        "text": "I'd say anything that has functions as first class objects qualifies :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0HMq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say anything that has functions as first class objects qualifies "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1571673186.121000",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1571673212.000000"
        },
        "client_msg_id": "16e121f5-f268-4b01-8d9b-43ddb6b2172a",
        "text": "<@U8A5MS6R1> Exactly: this happens across the whole system. I mentioned this a “program level” only because its simpler and because of this there is a higher chance its solved which I am interested in :slightly_smiling_face:.\n\nChecking Unison! Thanks everyone who mentioned.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571489526.050200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IlJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Exactly: this happens across the whole system. I mentioned this a “program level” only because its simpler and because of this there is a higher chance its solved which I am interested in "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nChecking Unison! Thanks everyone who mentioned."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1571673624.121500",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1571673685.000000"
        },
        "client_msg_id": "3fe26afb-5202-427f-96cb-fd8734253c1e",
        "text": "<@U8A5MS6R1>\nAs you mentioned:\nUnless we go a bit further and instead of attaching string metadata to the id, define multiple pieces of metadata to link to the entities `set` and `A`.\n\nThe main requirement is you want only one place where the string `A` exists and it is referenced everywhere else by its id.\n-------\nYes exactly! I want this! And it is really interesting because it gets to a weird place, where every name must be unique across the system! And if we are working with multiple systems which merge (have interaction) any time in future (like web) we might need global unique names!\n\nWhich seems is totally opposite of the standard view of “avoid global things”. (Okay, sure, it’s mainly against vars, not consts.)\nHowever, if we are able to rename things easily I am totally ok with using globally unique names.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571489526.050200",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jgZP5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": "\nAs you mentioned:\nUnless we go a bit further and instead of attaching string metadata to the id, define multiple pieces of metadata to link to the entities "
                            },
                            {
                                "type": "text",
                                "text": "set",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe main requirement is you want only one place where the string "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exists and it is referenced everywhere else by its id.\n-------\nYes exactly! I want this! And it is really interesting because it gets to a weird place, where every name must be unique across the system! And if we are working with multiple systems which merge (have interaction) any time in future (like web) we might need global unique names!\n\nWhich seems is totally opposite of the standard view of “avoid global things”. (Okay, sure, it’s mainly against vars, not consts.)\nHowever, if we are able to rename things easily I am totally ok with using globally unique names."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571679074.122700",
        "client_msg_id": "717264e7-59c3-4669-aa59-8368c63a6b9c",
        "text": "I don't consider a language to be completely functional unless it allows me to write an entire program in functional style, with no side effects. Virtually all modern languages have first class functions, but most of those require the use of side effects to write any realistic program. So, in addition to function values, I'm also looking for functional data structures (that can be efficiently mutated without using side effects) and functional i\/o.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bSV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't consider a language to be completely functional unless it allows me to write an entire program in functional style, with no side effects. Virtually all modern languages have first class functions, but most of those require the use of side effects to write any realistic program. So, in addition to function values, I'm also looking for functional data structures (that can be efficiently mutated without using side effects) and functional i\/o."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571680354.122900",
        "client_msg_id": "f8c50af6-5ced-46c1-897f-2f6f52412b89",
        "text": "Yeah I was being slightly facetious, but I do think Swift and Kotlin are as functional as something like Scala, and it seems weird to classify them as OO first.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w7\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I was being slightly facetious, but I do think Swift and Kotlin are as functional as something like Scala, and it seems weird to classify them as OO first."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571680455.123100",
        "client_msg_id": "7701c26b-bd65-4625-a6aa-f9a4f596768a",
        "text": "I don't know that much about Clojure, but I assume that too exposes all of the OO concepts in Java, for interop if nothing else.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LgLA4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know that much about Clojure, but I assume that too exposes all of the OO concepts in Java, for interop if nothing else."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571681397.124100",
        "client_msg_id": "5ead1d5e-cd2f-423a-bf08-db39d49d674a",
        "text": "In what way are Swift and Kotlin functional languages, rather than OO first? I just don't see it. Smalltalk is surely an OO first language, and it has always had first class functions and higher order functions as a core feature, only the terminology is different. Functions are called \"blocks\", the \"reduce\" or \"fold\" higher order function is called \"inject:into:\", and so on. Kotlin and Swift support both mutable and immutable objects. Immutable objects are an OO technique for controlling and limiting side effects on data structure objects, and are not the same as functional data structures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JyJ7I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In what way are Swift and Kotlin functional languages, rather than OO first? I just don't see it. Smalltalk is surely an OO first language, and it has always had first class functions and higher order functions as a core feature, only the terminology is different. Functions are called \"blocks\", the \"reduce\" or \"fold\" higher order function is called \"inject"
                            },
                            {
                                "type": "emoji",
                                "name": "into"
                            },
                            {
                                "type": "text",
                                "text": "\", and so on. Kotlin and Swift support both mutable and immutable objects. Immutable objects are an OO technique for controlling and limiting side effects on data structure objects, and are not the same as functional data structures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571681706.124300",
        "client_msg_id": "37054c46-6b65-482d-9593-48d407873ea0",
        "text": "Clojure has functional data structures. So that's a big difference, and an important step towards full support for functional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YQvhf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Clojure has functional data structures. So that's a big difference, and an important step towards full support for functional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571682062.124500",
        "client_msg_id": "602cf812-43e3-4600-8de6-cd761aaeda0a",
        "text": "Maybe functional programming isn't the norm because there are so few examples of real functional programming languages, and because there is perhaps widespread confusion about what functional programming actually is.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mk\/k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe functional programming isn't the norm because there are so few examples of real functional programming languages, and because there is perhaps widespread confusion about what functional programming actually is."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1571682392.124900",
        "client_msg_id": "a40d2871-fdc1-4ef3-8aa6-e089641d07a6",
        "text": "Anyone here attending LIVE tomorrow, or Splash this week?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571682392.124900",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1571919168.202000",
        "reply_users": [
            "UF5PAGQQ4",
            "UCGR73CAY",
            "UGS8TUVK6",
            "UML4ZEKDK"
        ],
        "replies": [
            {
                "user": "UF5PAGQQ4",
                "ts": "1571682720.125500"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1571683418.126900"
            },
            {
                "user": "UGS8TUVK6",
                "ts": "1571726875.131800"
            },
            {
                "user": "UF5PAGQQ4",
                "ts": "1571733634.134100"
            },
            {
                "user": "UGS8TUVK6",
                "ts": "1571734867.134300"
            },
            {
                "user": "UCGR73CAY",
                "ts": "1571756072.134800"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1571919168.202000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vi4f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone here attending LIVE tomorrow, or Splash this week?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF5PAGQQ4",
        "type": "message",
        "ts": "1571682720.125500",
        "client_msg_id": "351ACA0D-6109-4EAE-B4A7-1491CC0A0292",
        "text": "Hey I'll be at LIVE tomorrow!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g99a3fab7a1a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/299a3fab7a1a2d6644455dedae9fce0a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Stathis Sideris",
            "display_name": "Stathis",
            "team": "T5TCAFTA9",
            "name": "sideris",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571682392.124900",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3d9g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey I'll be at LIVE tomorrow!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571682934.125700",
        "client_msg_id": "6d448574-3d21-442e-bfbe-616e6db5e3d6",
        "text": "yeah, if your definition is that narrow, I'm guessing Haskell is it, for languages that have *some* use outside of academia?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J51M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, if your definition is that narrow, I'm guessing Haskell is it, for languages that have "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " use outside of academia?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571682978.125900",
        "client_msg_id": "025259b1-32bb-453e-8bd7-b9bdc340f87d",
        "text": "I don't know of any other language that doesn't provide mutable data structures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m0Shk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know of any other language that doesn't provide mutable data structures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571683039.126100",
        "client_msg_id": "e2865774-062c-427b-9d51-f0c866072cbe",
        "text": "Kotlin and Swift were both designed with a very deliberate functional mindset, but also under the constraints that they had to support an existing ecosystem. (much like Clojure and Scala)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C9E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kotlin and Swift were both designed with a very deliberate functional mindset, but also under the constraints that they had to support an existing ecosystem. (much like Clojure and Scala)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571683100.126300",
        "client_msg_id": "647e0fb9-1528-4edb-984b-5b72cd6b60c6",
        "text": "they are multi-paradigm, of course, but then so is pretty much every other language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SCTDC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "they are multi-paradigm, of course, but then so is pretty much every other language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571683272.126500",
        "client_msg_id": "7d76c22f-d577-4d2b-bb54-db65c8e5378a",
        "text": "I think the speaker is totally right that none of the popular languages are where they are because of OO, but that's also kind of a straw man argument, because I'm not sure I've heard anyone claim that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the speaker is totally right that none of the popular languages are where they are because of OO, but that's also kind of a straw man argument, because I'm not sure I've heard anyone claim that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571683345.126700",
        "client_msg_id": "bcd235d3-9738-472e-ba64-c8f009a1ada5",
        "text": "OO was fashionable in the 90s and 00s, so most new languages supported that paradigm. The pendulum has swung back into FP, so new languages support that paradigm better, (and existing languages, even Java, start to as well.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EyhH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OO was fashionable in the 90s and 00s, so most new languages supported that paradigm. The pendulum has swung back into FP, so new languages support that paradigm better, (and existing languages, even Java, start to as well.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1571683418.126900",
        "client_msg_id": "d4a8a170-8687-4aeb-b479-300c3f75926c",
        "text": "Great, see you then!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571682392.124900",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wu8ym",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great, see you then!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UF5PAGQQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UP448V1PB",
        "type": "message",
        "ts": "1571683442.127100",
        "client_msg_id": "efc6894f-168d-4266-9f69-d62c1b33912b",
        "text": "languages get popular because of how easy it is to get things done in them, and that's a function of a lot of things, like tooling support, number of available libraries, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c956630d6bd7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-11\/794439110727_c956630d6bd7ba8faafb_72.jpg",
            "first_name": "Eric",
            "real_name": "Eric Casteleijn",
            "display_name": "Eric Casteleijn",
            "team": "T5TCAFTA9",
            "name": "thisfred",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NKjLS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "languages get popular because of how easy it is to get things done in them, and that's a function of a lot of things, like tooling support, number of available libraries, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571684078.127300",
        "client_msg_id": "b9eea4aa-0c0f-4722-a16b-65bc7bc9b4c3",
        "text": "The video lists Elm, Closure and ReasonML as functional languages. This is accurate. Elm is a pure functional language. Clojure and ReasonML are imperative\/OO as well as functional, but they both support functional data structures: so you can efficiently mutate data structures from inside a pure function, without side effects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fBO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The video lists Elm, Closure and ReasonML as functional languages. This is accurate. Elm is a pure functional language. Clojure and ReasonML are imperative\/OO as well as functional, but they both support functional data structures: so you can efficiently mutate data structures from inside a pure function, without side effects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571684139.127500",
        "client_msg_id": "e993b3ba-43a3-4bff-a085-8691afbf9824",
        "text": "Definition: functional programming is where you write code in terms of pure mathematical functions, which do not have side effects, and where the result returned by a function is determined only by the argument values.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZnsM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Definition: functional programming is where you write code in terms of pure mathematical functions, which do not have side effects, and where the result returned by a function is determined only by the argument values."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571684311.127700",
        "client_msg_id": "0c860b33-f88d-4ed9-95ee-a2bab6ad6b9f",
        "text": "Cargo cult functional programming is where you reuse syntax from functional languages, and sprinkle the word \"functional\" around your language documentation, without actually providing meaningful support for functional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vVi2R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cargo cult functional programming is where you reuse syntax from functional languages, and sprinkle the word \"functional\" around your language documentation, without actually providing meaningful support for functional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1571686013.127900",
        "client_msg_id": "761a5fb1-3733-40c3-b68f-ad57f926e19c",
        "text": "OCaml and Microsoft's F# are also functional languages, based on the fact that they support functional data structures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8T19f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OCaml and Microsoft's F# are also functional languages, based on the fact that they support functional data structures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBRKVHMCL",
        "type": "message",
        "ts": "1571686285.130000",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571688039.000000"
        },
        "client_msg_id": "AE799953-ABE3-4322-8510-05FB5FBE90B8",
        "text": "(It is my project.) Shallow tables can represent trees of data, so that won’t be an issue for Mesh. See, eg: <http:\/\/archive.vector.org.uk\/art10500340> <https:\/\/m.youtube.com\/watch?v=hzPd3umu78g>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6b404ba64c8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/86b404ba64c84041168e5b10b7148030.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Chris Pearson",
            "display_name": "chrispsn",
            "team": "T5TCAFTA9",
            "name": "chrispsn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569855917.108100",
        "parent_user_id": "UF5PAGQQ4",
        "attachments": [
            {
                "text": "The Journal of the British APL Association. The BAA promotes the APLs, terse programming languages derived from Iverson’s mathematical notation.",
                "fallback": "The Journal of the British APL Association. The BAA promotes the APLs, terse programming languages derived from Iverson’s mathematical notation.",
                "from_url": "http:\/\/archive.vector.org.uk\/art10500340",
                "service_icon": "http:\/\/archive.vector.org.uk\/favicon.ico",
                "service_name": "archive.vector.org.uk",
                "id": 1,
                "original_url": "http:\/\/archive.vector.org.uk\/art10500340"
            },
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Dyalog '18: High-performance Tree Wrangling, the APL Way",
                "title_link": "https:\/\/m.youtube.com\/watch?v=hzPd3umu78g",
                "author_name": "Dyalog Usermeeting",
                "author_link": "https:\/\/www.youtube.com\/user\/DyalogConference",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/hzPd3umu78g\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Dyalog '18: High-performance Tree Wrangling, the APL Way",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/hzPd3umu78g?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/m.youtube.com\/watch?v=hzPd3umu78g",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 2,
                "original_url": "https:\/\/m.youtube.com\/watch?v=hzPd3umu78g"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hx8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(It is my project.) Shallow tables can represent trees of data, so that won’t be an issue for Mesh. See, eg: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/archive.vector.org.uk\/art10500340"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/m.youtube.com\/watch?v=hzPd3umu78g"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1571687299.130700",
        "client_msg_id": "4e8e4c08-8e86-4ca4-94e2-12d3ac7cf8b3",
        "text": "I think \"functional\" and \"pure functional\" are getting confused",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8r3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think \"functional\" and \"pure functional\" are getting confused"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1571700638.131300",
        "client_msg_id": "7ebec190-4a65-4f44-82cc-2bb2db74c439",
        "text": "I’d add one more factor to the causes of popularity: being first. Examples: Unix was the first portable operating system. C was the first language of Unix. Perl was the first full scripting language for Unix. Python was the first OO scripting language for Unix…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZaT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d add one more factor to the causes of popularity: being first. Examples: Unix was the first portable operating system. C was the first language of Unix. Perl was the first full scripting language for Unix. Python was the first OO scripting language for Unix…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1571701409.131600",
        "client_msg_id": "b5bc59ec-b23f-45c1-8587-5b006c0e7bc0",
        "text": "The speaker seems to equate modules with objects. Is the module system he’s using one that supports many instances of the same module, each with their own state and no global names?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wQXf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The speaker seems to equate modules with objects. Is the module system he’s using one that supports many instances of the same module, each with their own state and no global names?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGS8TUVK6",
        "type": "message",
        "ts": "1571726875.131800",
        "client_msg_id": "68aac1f3-36b6-4dd3-97f7-97f74ed73f0f",
        "text": "I'm here as well",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b2204b9c98e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-10\/691633887223_2b2204b9c98e11f0ad1f_72.jpg",
            "first_name": "Martin",
            "real_name": "Martin Kavalar",
            "display_name": "mk",
            "team": "T5TCAFTA9",
            "name": "martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1571682392.124900",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2qs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm here as well"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]