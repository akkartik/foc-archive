[
    {
        "text": "At yesterday's meetup I demoed a node and wire tool I'm working on in the scientific computing domain.\n\n<@U086XAU4F0F> had an interesting question, so I'm sharing here in case anyone has any related thoughts:\n\n&gt; do you use some graph algorithm to figure out what needs to be recomputed, or do you keep all intermediate values in the wires in memory? I imagine the latter would get pretty heavy pretty fast.\nCurrently I've gone with the simple\/naive approach of just keeping everything in memory. This is nice because any long-running nodes at the top of the network don't need to recompute when their descendants need to re-run. This does mean that you can run out of memory quickly if you are dealing with large pieces of data though.\n\nI'm not sure what my long-term solution is yet. Currently my thoughts are to start dropping\/caching-to-disk large pieces of data as memory usage to get too high, and recompute when they are needed again. In the meantime, it's not too bad for the primary use cases I have in mind to simply be content with working with a subset of data that fits into memory.",
        "files": [
            {
                "id": "F089VC57C5U",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05UF5P8PT8",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ai3Pk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At yesterday's meetup I demoed a node and wire tool I'm working on in the scientific computing domain.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U086XAU4F0F"
                            },
                            {
                                "type": "text",
                                "text": " had an interesting question, so I'm sharing here in case anyone has any related thoughts:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do you use some graph algorithm to figure out what needs to be recomputed, or do you keep all intermediate values in the wires in memory? I imagine the latter would get pretty heavy pretty fast."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCurrently I've gone with the simple\/naive approach of just keeping everything in memory. This is nice because any long-running nodes at the top of the network don't need to recompute when their descendants need to re-run. This does mean that you can run out of memory quickly if you are dealing with large pieces of data though.\n\nI'm not sure what my long-term solution is yet. Currently my thoughts are to start dropping\/caching-to-disk large pieces of data as memory usage to get too high, and recompute when they are needed again. In the meantime, it's not too bad for the primary use cases I have in mind to simply be content with working with a subset of data that fits into memory."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1737672039.391529",
        "client_msg_id": "847f43e7-208b-4d6d-be5d-426a8b70612d",
        "thread_ts": "1737672039.391529",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1737700673.929949",
        "reply_users": [
            "U05UF5P8PT8",
            "U088999PF62",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "U05UF5P8PT8",
                "ts": "1737672136.033059"
            },
            {
                "user": "U088999PF62",
                "ts": "1737689461.955839"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1737700673.929949"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "U05UF5P8PT8",
        "type": "message",
        "ts": "1737672136.033059",
        "client_msg_id": "faa7c8d6-60a7-42ed-badc-2191b23ca020",
        "text": "Also, thank you <@U086XAU4F0F> for letting me know about <https:\/\/xarray.dev\/>! I wish I knew about this library sooner",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9a58947a0752",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-21\/7452153981845_9a58947a0752af693545_72.png",
            "first_name": "John",
            "real_name": "John Christensen",
            "display_name": "Johnwithanh",
            "team": "T5TCAFTA9",
            "name": "johnnyc1423",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737672039.391529",
        "parent_user_id": "U05UF5P8PT8",
        "attachments": [
            {
                "image_url": "https:\/\/raw.githubusercontent.com\/xarray-contrib\/xarray.dev\/main\/public\/Xarray-assets\/Icon\/Xarray_Icon_Final.png",
                "image_width": 2500,
                "image_height": 2500,
                "image_bytes": 42939,
                "from_url": "https:\/\/xarray.dev\/",
                "service_icon": "https:\/\/xarray.dev\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/xarray.dev\/",
                "fallback": "Xarray: N-D labeled arrays and datasets in Python",
                "title": "Xarray: N-D labeled arrays and datasets in Python",
                "title_link": "https:\/\/xarray.dev\/",
                "service_name": "xarray.dev"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+p0l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, thank you "
                            },
                            {
                                "type": "user",
                                "user_id": "U086XAU4F0F"
                            },
                            {
                                "type": "text",
                                "text": " for letting me know about "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/xarray.dev\/"
                            },
                            {
                                "type": "text",
                                "text": "! I wish I knew about this library sooner"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U086XAU4F0F"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U088999PF62",
        "type": "message",
        "ts": "1737689461.955839",
        "client_msg_id": "47f4959f-74ec-49cd-bb48-3d2092b462c2",
        "text": "The future optimization for using less memory reminds me of memoryless textures and sparse textures in GPU coding land. If you don’t need intermediate steps, you can just reuse the memory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ee4ab31ddf7a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-13\/8273414548951_ee4ab31ddf7a86143d34_72.jpg",
            "first_name": "Karl",
            "real_name": "Karl Toby Rosenberg",
            "display_name": "Karl Toby Rosenberg",
            "team": "T5TCAFTA9",
            "name": "karltobyrosenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737672039.391529",
        "parent_user_id": "U05UF5P8PT8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UTdbk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The future optimization for using less memory reminds me of memoryless textures and sparse textures in GPU coding land. If you don’t need intermediate steps, you can just reuse the memory."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1737692874.137339",
        "client_msg_id": "5FA7A36B-B2E0-4569-88F3-11FFCDB68B84",
        "text": "I’ve been using the observable notebook VSCode extension for local dev, but you’re right it doesn’t lend itself especially well to self hosting. It is nice to have everything fit into 1 file. \n\nDo you find yourself wanting to pull in dependencies, whether from npm or just splitting the project into smaller files?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736202248.512499",
        "parent_user_id": "U02E4DAQGSZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a2qiP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " been using the observable notebook VSCode extension for local dev, but "
                            },
                            {
                                "type": "text",
                                "text": "you’re"
                            },
                            {
                                "type": "text",
                                "text": " right it "
                            },
                            {
                                "type": "text",
                                "text": "doesn’t"
                            },
                            {
                                "type": "text",
                                "text": " lend itself especially well to self hosting. It is nice to have everything fit into 1 file. \n\nDo you find yourself wanting to pull in dependencies, whether from npm or just splitting the project into smaller files?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1737700673.929949",
        "client_msg_id": "4900560e-d416-469b-8af5-3c05ea93ac75",
        "text": "Something you might consider is having the user select what to keep in memory. Provide a simple and unobtrusive UI (e.g. a small button), and some equally unobtrusive UI for figuring out the size of the dataset (e.g. hovering over that button).\n\nBackground: as a power user, I much prefer manual control over some superficially smart solution that one day I will have to reverse-engineer and fight to get my work done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737672039.391529",
        "parent_user_id": "U05UF5P8PT8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P+W1P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something you might consider is having the user select what to keep in memory. Provide a simple and unobtrusive UI (e.g. a small button), and some equally unobtrusive UI for figuring out the size of the dataset (e.g. hovering over that button).\n\nBackground: as a power user, I much prefer manual control over some superficially smart solution that one day I will have to reverse-engineer and fight to get my work done."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05UF5P8PT8"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1737703849.426849",
        "edited": {
            "user": "U08A3DJ5VKM",
            "ts": "1737705223.000000"
        },
        "client_msg_id": "831c386c-20d7-44f5-bf2a-718585ecc0df",
        "text": "Wow, lot's of great stuff you all are posting here! So exciting :smiley:\n\nI'd like to share something too, it embraces the \"scaling-down\" sentiment I am seeing in other projects here.\n\nI designed a semantic hypermedia data structure (FIFO) with a \"higher-order\" syntax, allowing form to be transferred across text\/gui substrates. The general idea was to see how closely you can emulate hypermedia documents using just semantic and semiotic rules. These rules are then encoded in a rendering pipeline to systemically present the data on the screen. It sounds fancy but in practice it's very mundane.\n\nFIFO's syntax is actually inspired by the file system information model, which, as we know, has these properties, allowing trees to be rendered systemically and consistently in whatever style, but without any loss in meaning. Not only file systems, though, this is a very pervasive modality, such as the universality of frequencies in relation to the particularities of timbre, or natural language itself, which is very malleable in terms of encoding, preserving meaning mostly intact regardless of representation. This sort of thing is only possible with models that are purely abstract, immaterial, but yet well defined.\n\nNow this is not just for fun, it can be very useful to have a document language like in some scenarios, for instance, to very cheaply and quicky compose and distribute multimedia information. I made my website using FIFO, and also a portfolio for a friend of mine. It's just a proof of concept at this point, I invested very little in the rendering part, just enough to make it usable. In the future I'd like to make an editor for it, for now I just write it by hand. You can check the links below to see it in practice. Before anyone asks why bother with all the work to have a worse version of markdown, consider that: 1) this is not markup but a data structure, it has it's own in-memory DOM and query interface, 2) it's extensible, 3) it's hierarchical, so you can have directories in the document, 4) it's mathematically rigorous, 5) is composable, and some more things. The fact it looks like a basic document is consequential, as the whole idea was to capture the stereotype but starting from a different principles. There can be different visual renditions, too, I'm just not so much creative in this department.\n\nvisual repr: <https:\/\/jon.work\/og>\ntext repr: <https:\/\/jon.work\/og\/index.fifo.txt>\n\nvisual repr: <https:\/\/jon.work\/fifo>\ntext repr: <https:\/\/jon.work\/fifo\/index.fifo.txt>\n\nvisual repr: <https:\/\/henriquecesar.pages.dev>\ntext repr: <https:\/\/henriquecesar.pages.dev\/index.fifo.txt>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737703849.426849",
        "reply_count": 10,
        "reply_users_count": 2,
        "latest_reply": "1738022087.811939",
        "reply_users": [
            "UJBAJNFLK",
            "U08A3DJ5VKM"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1737745308.634999"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737749118.270629"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737750328.787109"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737750663.385169"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1737812552.282549"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737836542.096869"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737837568.697599"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1737837739.769619"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1737881658.671069"
            },
            {
                "user": "U08A3DJ5VKM",
                "ts": "1738022087.811939"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "diuce",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, lot's of great stuff you all are posting here! So exciting "
                            },
                            {
                                "type": "emoji",
                                "name": "smiley",
                                "unicode": "1f603"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'd like to share something too, it embraces the \"scaling-down\" sentiment I am seeing in other projects here.\n\nI designed a semantic hypermedia data structure (FIFO) with a \"higher-order\" syntax, allowing form to be transferred across text\/gui substrates. The general idea was to see how closely you can emulate hypermedia documents using just semantic and semiotic rules. These rules are then encoded in a rendering pipeline to systemically present the data on the screen. It sounds fancy but in practice it's very mundane.\n\nFIFO's syntax is actually inspired by the file system information model, which, as we know, has these properties, allowing trees to be rendered systemically and consistently in whatever style, but without any loss in meaning. Not only file systems, though, this is a very pervasive modality, such as the universality of frequencies in relation to the particularities of timbre, or natural language itself, which is very malleable in terms of encoding, preserving meaning mostly intact regardless of representation. This sort of thing is only possible with models that are purely abstract, immaterial, but yet well defined.\n\nNow this is not just for fun, it can be very useful to have a document language like in some scenarios, for instance, to very cheaply and quicky compose and distribute multimedia information. I made my website using FIFO, and also a portfolio for a friend of mine. It's just a proof of concept at this point, I invested very little in the rendering part, just enough to make it usable. In the future I'd like to make an editor for it, for now I just write it by hand. You can check the links below to see it in practice. Before anyone asks why bother with all the work to have a worse version of markdown, consider that: 1) this is not markup but a data structure, it has it's own in-memory DOM and query interface, 2) it's extensible, 3) it's hierarchical, so you can have directories in the document, 4) it's mathematically rigorous, 5) is composable, and some more things. The fact it looks like a basic document is consequential, as the whole idea was to capture the stereotype but starting from a different principles. There can be different visual renditions, too, I'm just not so much creative in this department.\n\nvisual repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jon.work\/og"
                            },
                            {
                                "type": "text",
                                "text": "\ntext repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jon.work\/og\/index.fifo.txt"
                            },
                            {
                                "type": "text",
                                "text": "\n\nvisual repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jon.work\/fifo"
                            },
                            {
                                "type": "text",
                                "text": "\ntext repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jon.work\/fifo\/index.fifo.txt"
                            },
                            {
                                "type": "text",
                                "text": "\n\nvisual repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/henriquecesar.pages.dev"
                            },
                            {
                                "type": "text",
                                "text": "\ntext repr: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/henriquecesar.pages.dev\/index.fifo.txt"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1737704365.483959",
        "client_msg_id": "55396b1e-86aa-42b3-8dd7-7e3b49b9cf23",
        "text": "Observable runtime has \"modules\" with private \"scopes\". To get an npm dependancy to work offline, I save the ESM to a static file in a dedicated notebook (a.k.a. a module) so then I can import that where needed. The Golden Layout is a good example, its what gives it the frames and thats a npm JS ecosystem dependancy.\n\n<https:\/\/observablehq.com\/@tomlarkworthy\/golden-layout-2-6-0>\n\nI go slightly further to reduce file size by gziping the ESM module and using native gzip decompression stream to dynamically construct the URL to import\n\n```unzip = async (attachment) =&gt;\n  await new Response(\n    (await attachment.stream()).pipeThrough(new DecompressionStream(\"gzip\"))\n  ).blob()```\n\nSo the design is modular, it can do modules, its just shoved all in a single file bundled but unpacked dynamically. I do wonder if I should have the concept of a dynamic import from another file though, for a website you might want to share the page index. It would be possible to do: read the other file, find the dependancy in it, and unzip it like we do internally. The file structure is a structured HTML doc, which is easy to parse with DOMParser and lookup dependancies with document.querySelector",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736202248.512499",
        "parent_user_id": "U02E4DAQGSZ",
        "attachments": [
            {
                "image_url": "https:\/\/static.observableusercontent.com\/thumbnail\/ea69fd28a4ddea93ae9798ad8564e6b53bc7a65e9798c5a125eb51a024083a4d.jpg",
                "image_width": 640,
                "image_height": 400,
                "image_bytes": 42920,
                "from_url": "https:\/\/observablehq.com\/@tomlarkworthy\/golden-layout-2-6-0",
                "service_icon": "https:\/\/static.observablehq.com\/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "ts": 1735632624,
                "id": 1,
                "original_url": "https:\/\/observablehq.com\/@tomlarkworthy\/golden-layout-2-6-0",
                "fallback": "Observable: golden-layout@2.6.0",
                "text": "usage example",
                "title": "golden-layout@2.6.0",
                "title_link": "https:\/\/observablehq.com\/@tomlarkworthy\/golden-layout-2-6-0",
                "service_name": "Observable"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FkdT7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observable runtime has \"modules\" with private \"scopes\". To get an npm dependancy to work offline, I save the ESM to a static file in a dedicated notebook (a.k.a. a module) so then I can import that where needed. The Golden Layout is a good example, its what gives it the frames and thats a npm JS ecosystem dependancy.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/golden-layout-2-6-0"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI go slightly further to reduce file size by gziping the ESM module and using native gzip decompression stream to dynamically construct the URL to import\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "unzip = async (attachment) =>\n  await new Response(\n    (await attachment.stream()).pipeThrough(new DecompressionStream(\"gzip\"))\n  ).blob()"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nSo the design is modular, it can do modules, its just shoved all in a single file bundled but unpacked dynamically. I do wonder if I should have the concept of a dynamic import from another file though, for a website you might want to share the page index. It would be possible to do: read the other file, find the dependancy in it, and unzip it like we do internally. The file structure is a structured HTML doc, which is easy to parse with DOMParser and lookup dependancies with document.querySelector"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "US370TRJA"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "US370TRJA"
                ],
                "count": 1
            }
        ]
    }
]