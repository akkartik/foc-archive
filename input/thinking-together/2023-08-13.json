[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691945999.321379",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1691949807.000000"
        },
        "client_msg_id": "7e4f55ef-887a-403a-bdaa-82600e27f360",
        "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: <https:\/\/docs.google.com\/document\/d\/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk>\n\nState machines are _hard_!\n• We usually have one in our head when we program.\n• The abstract state in my head is usually made up of multiple concrete variables in the program.\n• Mutations happen to variables, but it's not obvious at each how the abstract state is changing.\n• The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these.\nTell me how immutability or State Charts will solve all my problems :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "reply_count": 77,
        "reply_users_count": 14,
        "latest_reply": "1700206091.099949",
        "reply_users": [
            "UC2A2ARPT",
            "USH01JEDQ",
            "U0123H7JRDM",
            "UCUSW7WVD",
            "UBN9AFS0N",
            "U02U0AS3J49",
            "U013ZLJARC7",
            "UA14TGLTC",
            "UJBAJNFLK",
            "UMV4B97GT",
            "U0378MDUG1Y",
            "UGWUJUZHT",
            "U03R0B9U1GD",
            "UML4ZEKDK"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1691947360.742009"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1691949701.254449"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1691950057.110489"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1691950883.713919"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691951619.222719"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1691951722.721159"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691951754.212589"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691951779.064439"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691951843.040919"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1691952308.495689"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1691952458.867749"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1691952510.113299"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691952962.662029"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1691952975.688539"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1691958060.376129"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1691958752.904259"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1691958861.702379"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1691993163.416229"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1691996085.378999"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1691997630.261459"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1692006470.391889"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1692010370.266779"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1692064493.276489"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1692080998.894609"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1692109218.272399"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1692109537.263859"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1692109655.971959"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692513046.439219"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692513123.612439"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692513188.473739"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692513319.980229"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692514741.331889"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1692600387.994589"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1692601697.335579"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692725798.949719"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692725948.854799"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692726215.736729"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692726233.541019"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692726407.617679"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692726633.395989"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692726840.361199"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692726863.473889"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692726918.910699"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692727104.588639"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692727181.822779"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692727593.028439"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692727798.772359"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692727807.560279"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1692727871.567119"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1692728060.747029"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1692728201.158919"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692728316.441879"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692767556.707719"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1692777229.267059"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1692801852.932269"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1692804727.788829"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1692858200.877649"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1692865919.994129"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693113863.375189"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1693135196.899589"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1693142281.081259"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1693150474.578739"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1693209305.409639"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1693263206.843589"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693273918.613659"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693286291.439419"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1693313836.138309"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1693372751.567049"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1694025323.479919"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1694042590.049459"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1694043322.687769"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1694062154.820759"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1699609824.188939"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1700176363.607629"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1700177217.260169"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1700177331.607339"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1700206091.099949"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c\/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Last night I spent some time documenting an almost-trivial state machine that I keep getting wrong: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.google.com\/document\/d\/1EbK4AxDCDWonMa8KyGJFX4jllXXLew0qBsGxsmqoYqk"
                            },
                            {
                                "type": "text",
                                "text": "\n\nState machines are "
                            },
                            {
                                "type": "text",
                                "text": "hard",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "!\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We usually have one in our head when we program."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The abstract state in my head is usually made up of multiple concrete variables in the program."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Mutations happen to variables, but it's not obvious at each how the abstract state is changing."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The state machine in my head often evolves, which makes documentation challenging to keep up to date. Which is why I think nobody builds documents like these."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nTell me how immutability or State Charts will solve all my problems "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "UMQ6LR9NZ",
                    "UML4ZEKDK",
                    "UJFN50C00"
                ],
                "count": 4
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1691947360.742009",
        "client_msg_id": "CF4CBCEC-99A0-48BC-92D2-94216BB33FE8",
        "text": "A visual programming system ... with state charts ... and good control over execution ... will solve all your problems. :magic_wand: :tophat: :rabbit2: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jNwT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A visual programming system ... with state charts ... and good control over execution ... will solve all your problems. "
                            },
                            {
                                "type": "emoji",
                                "name": "magic_wand",
                                "unicode": "1fa84"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "tophat",
                                "unicode": "1f3a9"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "rabbit2",
                                "unicode": "1f407"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1691949701.254449",
        "client_msg_id": "464def52-5f75-433c-81bf-c1017a39ac02",
        "text": "What about \"visual programming system only of state charts\" – (too hard to learn or start something new with?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eLXyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What about \"visual programming system only of state charts\" – (too hard to learn or start something new with?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1691950057.110489",
        "client_msg_id": "132BDB7B-EE84-4D4C-ACBE-8497A7EB0990",
        "text": "Something like xstate? Although it is javascript focused which might not suite everyone. In my own project I want to combine statecharts with more regular nodes and wires, hope to demo something \"soonish\" :blush:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/OA=D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something like xstate? Although it is javascript focused which might not suite everyone. In my own project I want to combine statecharts with more regular nodes and wires, hope to demo something \"soonish\" "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691950883.713919",
        "client_msg_id": "c43bb6a4-0d02-4bf9-885f-64caf9603516",
        "text": "<@U0123H7JRDM> yeah for this thread I'm willing to try any tools or languages. I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ckJm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": " yeah for this thread I'm willing to try any tools or languages. I'm just curious to see examples of how others might organize the state machine in my doc to be easier to maintain."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691951619.222719",
        "client_msg_id": "659d64ab-ba5f-4198-90bd-052d07c9b87e",
        "text": "it may be overkill but TLA+\/PlusCal? :smile: <https:\/\/www.learntla.com\/> <https:\/\/lamport.azurewebsites.net\/tla\/tla.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6sH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it may be overkill but TLA+\/PlusCal? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.learntla.com\/"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lamport.azurewebsites.net\/tla\/tla.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691951722.721159",
        "client_msg_id": "0c6a89c2-bbfa-4a74-90ce-e82bc63795e1",
        "text": "I'd love to see what the TLA+ solution for this looks like. It wouldn't be directly executable, right? But it's one step more rigorous than the document, is that the right way to think about it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Bd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to see what the TLA+ solution for this looks like. It wouldn't be directly executable, right? But it's one step more rigorous than the document, is that the right way to think about it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691951754.212589",
        "client_msg_id": "da2df7f9-2e7c-46f6-aa8d-06f773424c4c",
        "text": "executing it means proving it's a well formed specification",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JFvJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "executing it means proving it's a well formed specification"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691951779.064439",
        "client_msg_id": "1c14940d-0b9c-4ca0-b4f2-aeeac76d0a26",
        "text": "There's a big list of specifications here: <https:\/\/github.com\/tlaplus\/Examples\/tree\/master\/specifications>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BSdf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a big list of specifications here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tlaplus\/Examples\/tree\/master\/specifications"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691951843.040919",
        "client_msg_id": "668767c6-9646-49cc-82b1-7e40c7117e30",
        "text": "Lamport's TLA page has a video course that I found really useful",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DH=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamport's TLA page has a video course that I found really useful"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691952308.495689",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1691952408.000000"
        },
        "client_msg_id": "2f482daf-0179-4e0c-a3e6-8b2f3a2a9b4a",
        "text": "For me, executing it means when I click on the button I get a plot. And it doesn't hog disk reads too much, it's a good citizen of my computer.\n\nIf the state machine lives outside the program that executes, how can I get an automated alert when I add a state to the state machine but forget to change the code.\n\nThat's basically the problem statement. My sense is that formal methods aren't quite here yet. Which is fine, not a criticism. I just want to focus this thread on the best possible solution for a single example. We like programming by example here, right? For this example and these design goals, what is the best representation we can think of that's \"hard scifi\" (doesn't have to be working code yet, but also doesn't require solving hard unsolved research problems).\n\nAnd I want to see the (pseudo)code :stuck_out_tongue: Around the same level of detail as the 5 10-line versions I wrote in the doc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tzjV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me, executing it means when I click on the button I get a plot. And it doesn't hog disk reads too much, it's a good citizen of my computer.\n\nIf the state machine lives outside the program that executes, how can I get an automated alert when I add a state to the state machine but forget to change the code.\n\nThat's basically the problem statement. My sense is that formal methods aren't quite here yet. Which is fine, not a criticism. I just want to focus this thread on the best possible solution for a single example. We like programming by example here, right? For this example and these design goals, what is the best representation we can think of that's \"hard scifi\" (doesn't have to be working code yet, but also doesn't require solving hard unsolved research problems).\n\nAnd I want to see the (pseudo)code "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " Around the same level of detail as the 5 10-line versions I wrote in the doc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1691952458.867749",
        "client_msg_id": "E66F2640-FEBF-4FF9-B77D-80A0BCD4D861",
        "text": "I like programming by hand-waving at things that don't exist yet in the hope that someone else builds them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ABcsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like programming by hand-waving at things that don't exist yet in the hope that someone else builds them"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02U0AS3J49",
                    "UMQ6LR9NZ"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "U0245E9RB2B"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691952510.113299",
        "client_msg_id": "74ad8efc-ed0c-48dc-999b-15a9b3dc0ca6",
        "text": "Go away, Ivan :stuck_out_tongue: &lt;obi wan&gt;This is not the thread you are looking for.&lt;\/obi wan&gt;",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3rTE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Go away, Ivan "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": " <obi wan>This is not the thread you are looking for.<\/obi wan>"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ghost",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "UMQ6LR9NZ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691952962.662029",
        "client_msg_id": "7d96f223-cd8f-4951-9747-ebd1001adaa5",
        "text": "One idea I would love to have time for is a parser for TLA+ that draws it some way and allows to step through the execution of different \"traces\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k3cVq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One idea I would love to have time for is a parser for TLA+ that draws it some way and allows to step through the execution of different \"traces\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1691952975.688539",
        "client_msg_id": "6da83de2-9fcd-4e44-aada-5f202f382c04",
        "text": "same for quickcheck style property based testing specifications",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kNW8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "same for quickcheck style property based testing specifications"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1691958060.376129",
        "client_msg_id": "7a1e5dfd-2392-4c4a-a8da-c02a2d5fba12",
        "text": "I have yet to see a trace visualizer for a logical language that was remotely legible, or a way of visualizing the execution of logical code using its source. I'm desperate to use them if they exist, so let me know. The closest I have seen is a system that maintains a set of successful search routes, then turns each into a tree-structured justification where each node of the tree and it's immediate children correspond to a rule clause. There might be things you could do to link those trees to the source code more explicitly in an interface. I've done something similar in Blawx where elements of the tree are linked to source legal text. But that's not execution tracing, it's answer justification.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mkQ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have yet to see a trace visualizer for a logical language that was remotely legible, or a way of visualizing the execution of logical code using its source. I'm desperate to use them if they exist, so let me know. The closest I have seen is a system that maintains a set of successful search routes, then turns each into a tree-structured justification where each node of the tree and it's immediate children correspond to a rule clause. There might be things you could do to link those trees to the source code more explicitly in an interface. I've done something similar in Blawx where elements of the tree are linked to source legal text. But that's not execution tracing, it's answer justification."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1691958752.904259",
        "client_msg_id": "eb6d8d3d-7afe-4698-9425-393fa73421a5",
        "text": "I have been obsessed with making logical code easier to use for a few years, now, and I don't even know what I would WANT out of a trace visualizer. The only things I can imagine would work, like a zoomable, color coded, annotated search tree, seem like they would be of limited utility unless what you wanted to know was why your code ran so slowly. And you pretty much don't care about that when you are writing things like TLA+ specs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kkA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been obsessed with making logical code easier to use for a few years, now, and I don't even know what I would WANT out of a trace visualizer. The only things I can imagine would work, like a zoomable, color coded, annotated search tree, seem like they would be of limited utility unless what you wanted to know was why your code ran so slowly. And you pretty much don't care about that when you are writing things like TLA+ specs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1691958861.702379",
        "client_msg_id": "46eada59-5e2e-4c3f-a738-8c39e8cc64db",
        "text": "For the record, I haven't actually used TLA+, but I have taken a lot of inspiration from Hillel Wayne's promotion of it, and of formal methods more generally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the record, I haven't actually used TLA+, but I have taken a lot of inspiration from Hillel Wayne's promotion of it, and of formal methods more generally."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01LCRM5RT7",
        "type": "message",
        "ts": "1691973534.389749",
        "client_msg_id": "cb3832ea-fabe-494d-a366-6d51913cb9e1",
        "text": "Yeah, will just echo that it’s a phenomenon common across tech (e.g. Windows being the most common OS) and that to be fair most popular languages have been evolving and adopting stuff from PL research, it’s just that the pipeline is something like Theory -&gt; Research implementation (Haskell language extension, SRFI, or a whole language like Koka) -&gt; Adopted by a more mainstream language -&gt; Added to Java (10 years after this last step)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "22b7cdaaff11",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-31\/1692871227909_22b7cdaaff11f6146f7d_72.jpg",
            "first_name": "",
            "real_name": "João Araújo",
            "display_name": "João Araújo",
            "team": "T5TCAFTA9",
            "name": "joaoguilhermearujo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691659386.827279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RFKNe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, will just echo that it’s a phenomenon common across tech (e.g. Windows being the most common OS) and that to be fair most popular languages have been evolving and adopting stuff from PL research, it’s just that the pipeline is something like Theory -> Research implementation (Haskell language extension, SRFI, or a whole language like Koka) -> Adopted by a more mainstream language -> Added to Java (10 years after this last step)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01LCRM5RT7",
        "type": "message",
        "ts": "1691973642.215849",
        "client_msg_id": "bc179160-69d1-4bc6-8828-4236808e9a8d",
        "text": "The most obvious case being garbage collection, but even strong typing + type inference seems to be going through that with things like Typescript, Type annotations + python type-checkers, Sorbet (Ruby), Concepts in C++, Rust, Dart etc",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "22b7cdaaff11",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-31\/1692871227909_22b7cdaaff11f6146f7d_72.jpg",
            "first_name": "",
            "real_name": "João Araújo",
            "display_name": "João Araújo",
            "team": "T5TCAFTA9",
            "name": "joaoguilhermearujo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691659386.827279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8zMH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most obvious case being garbage collection, but even strong typing + type inference seems to be going through that with things like Typescript, Type annotations + python type-checkers, Sorbet (Ruby), Concepts in C++, Rust, Dart etc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1691988668.343059",
        "client_msg_id": "B6680C97-4456-4F8B-A58D-DD8F877C6C7B",
        "text": "I agree that reuse is the real multiplier. How many language or frameworks projects are genuinely focused on reuse? How many writers of these tools ask which bits of code get rewritten the most and why?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691659386.827279",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ptL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that reuse is the real multiplier. How many language or frameworks projects are genuinely focused on reuse? How many writers of these tools ask which bits of code get rewritten the most and why?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1691993163.416229",
        "client_msg_id": "32af055b-5669-4c7a-97b4-29ef68da84d6",
        "text": "Do I understand the state machine correctly in that it starts checking for the file at &lt;interval&gt; when the button is pressed, but never stops if an error occurs in the image generation process?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7WDok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do I understand the state machine correctly in that it starts checking for the file at <interval> when the button is pressed, but never stops if an error occurs in the image generation process?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1691996085.378999",
        "client_msg_id": "6d49f15d-d7df-404d-b1db-9448b0a6abcc",
        "text": "Yes indeed! :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kPW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes indeed! "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]