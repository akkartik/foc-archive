[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1757145548.325699",
        "client_msg_id": "c5d30053-e3c8-4f0a-a0ba-60856f6d2903",
        "text": "<@UGWUJUZHT> The two challenges I see as daunting are (1) making this work efficiently on today's hardware (and its similar descendants that will dominate for years to come), and (2) convincing enough people to join the movement. I can't possibly write all the code I need myself, at least not for my professional needs.\n\nTechnically, the biggest obstacle I see is implementing a dataflow-like architecture for big datasets. meaning data the size of a typical machine's memory. I do a lot of that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757043859.922179",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+tY3g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " The two challenges I see as daunting are (1) making this work efficiently on today's hardware (and its similar descendants that will dominate for years to come), and (2) convincing enough people to join the movement. I can't possibly write all the code I need myself, at least not for my professional needs.\n\nTechnically, the biggest obstacle I see is implementing a dataflow-like architecture for big datasets. meaning data the size of a typical machine's memory. I do a lot of that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1757164765.846939",
        "client_msg_id": "3dcc2821-f446-4518-8371-89520e04790c",
        "text": "<@UJBAJNFLK>\n1. Issue #1 is a Present of Programming issue instead of Future of Programming issue. Certainly, my focus is on programming workflow and I am probably missing nuances pertinent to your problem domain.\n\n2. Interesting point. I see this as a \"simple\" FLI issue and\/or something that AI could repeatedly solve and cookie-cut for me. Maybe that's too facile. You point out that the issue isn't so much a technical one as a marketing one. Hmmm. More thought required.\n\n3. Optimization and speeding things up brings complexity baggage. The trade-off is between \"obvious\" understandability of architecture and \"fast enough for your purposes\". When we worked on Y2K, we didn't mind weekend-long runs to process a bank's subsystem. That was \"fast enough for our purposes\". That was like 30 years ago (mid 1990s). I keep being astounded at how fast the machine on my office desk is. I can run a REPL by spawning multiple UNIX processes (language in one process, GUI in another, joined by websockets), instead of needing the REPL to be built into the language itself. Theoretically, I could afford to buy\/use many such machines networked together. Hmmm.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757043859.922179",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7GYvL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "\n1. Issue #1 is a Present of Programming issue instead of Future of Programming issue. Certainly, my focus is on programming workflow and I am probably missing nuances pertinent to your problem domain.\n\n2. Interesting point. I see this as a \"simple\" FLI issue and\/or something that AI could repeatedly solve and cookie-cut for me. Maybe that's too facile. You point out that the issue isn't so much a technical one as a marketing one. Hmmm. More thought required.\n\n3. Optimization and speeding things up brings complexity baggage. The trade-off is between \"obvious\" understandability of architecture and \"fast enough for your purposes\". When we worked on Y2K, we didn't mind weekend-long runs to process a bank's subsystem. That was \"fast enough for our purposes\". That was like 30 years ago (mid 1990s). I keep being astounded at how fast the machine on my office desk is. I can run a REPL by spawning multiple UNIX processes (language in one process, GUI in another, joined by websockets), instead of needing the REPL to be built into the language itself. Theoretically, I could afford to buy\/use many such machines networked together. Hmmm."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]