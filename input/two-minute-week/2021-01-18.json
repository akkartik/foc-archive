[
    {
        "user": "UE0H4170F",
        "type": "message",
        "ts": "1611027820.010300",
        "client_msg_id": "0f39d6e0-ec8a-44d2-aa29-3d755a00c73d",
        "text": "<@UD6EXQVM0> in that particular example, it’s vanilla (albeit idiosyncratic) JavaScript… but there is also an extra parser in the environment to handle operator overloading when defining signals. I have a toolchain that takes JSON metadata for objects \/ functions and outputs Markdown documentation, feeds the autocomplete (Codemirror + Tern), and provides expected bounds \/ sample rates \/ curves to enable reactive programming across different types of a\/v\/interactive signals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2cfca823894",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/72cfca823894034e7bdbc31623c007d3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Charlie Roberts",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "charlie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606934381.142700",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BhG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " in that particular example, it’s vanilla (albeit idiosyncratic) JavaScript… but there is also an extra parser in the environment to handle operator overloading when defining signals. I have a toolchain that takes JSON metadata for objects \/ functions and outputs Markdown documentation, feeds the autocomplete (Codemirror + Tern), and provides expected bounds \/ sample rates \/ curves to enable reactive programming across different types of a\/v\/interactive signals."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]