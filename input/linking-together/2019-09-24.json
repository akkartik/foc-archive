[
    {
        "subtype": "thread_broadcast",
        "user": "U79HM6726",
        "thread_ts": "1569273664.091400",
        "root": {
            "user": "U8A5MS6R1",
            "type": "message",
            "ts": "1569273664.091400",
            "client_msg_id": "48eea977-3e9b-48cd-82ac-eac3c883b23d",
            "text": "<https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html>",
            "team": "T5TCAFTA9",
            "thread_ts": "1569273664.091400",
            "reply_count": 17,
            "reply_users_count": 8,
            "latest_reply": "1569418030.109300",
            "reply_users": [
                "UHWC9PXBL",
                "UEQ6M68H0",
                "UJUQESQ1Z",
                "UA14TGLTC",
                "U79HM6726",
                "UM1HH60GN",
                "UFEQUBNNT",
                "U8A5MS6R1"
            ],
            "replies": [
                {
                    "user": "UHWC9PXBL",
                    "ts": "1569275733.094200"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1569277555.094400"
                },
                {
                    "user": "UJUQESQ1Z",
                    "ts": "1569288483.094600"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569308085.094800"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1569327090.095400"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569327631.095700"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569327817.096000"
                },
                {
                    "user": "UFEQUBNNT",
                    "ts": "1569336589.096800"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1569349243.097600"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1569378205.102100"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1569388655.107600"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569396757.108200"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417241.108500"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417292.108700"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417367.108900"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569417977.109100"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569418030.109300"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "Nim Programming Language",
                    "title": "Version 1.0 released",
                    "title_link": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html",
                    "text": "The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.",
                    "fallback": "Nim Programming Language: Version 1.0 released",
                    "image_url": "https:\/\/nim-lang.org\/assets\/img\/twitter_banner.png",
                    "image_width": 500,
                    "image_height": 250,
                    "from_url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html",
                    "image_bytes": 43334,
                    "service_icon": "https:\/\/nim-lang.org\/assets\/img\/logo_bw.png",
                    "id": 1,
                    "original_url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "QXAE",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1569327090.095400",
        "client_msg_id": "fe2f9cc0-d139-4748-a4b5-4e465f4d3cb3",
        "text": "Closures are great imho. I remember when going from C++ to Python I pleasantly discovered that pretty much all of those complicated design patterns are things you do without even thinking about it with closures and first-class functions. When later discussing with lisp folks about macros I also figured that most examples for the usefulness of macros can be solved better by closures.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P8sZF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Closures are great imho. I remember when going from C++ to Python I pleasantly discovered that pretty much all of those complicated design patterns are things you do without even thinking about it with closures and first-class functions. When later discussing with lisp folks about macros I also figured that most examples for the usefulness of macros can be solved better by closures."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UA14TGLTC",
                    "UBSMEUXAA"
                ],
                "count": 3
            },
            {
                "name": "confused",
                "users": [
                    "UC6997THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1569327631.095700",
        "client_msg_id": "68e71e89-467d-4db4-b41f-bbc31427533d",
        "text": "This one did the same for me: <https:\/\/norvig.com\/design-patterns\/design-patterns.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569273664.091400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Baa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This one did the same for me: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/norvig.com\/design-patterns\/design-patterns.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1569327817.096000",
        "client_msg_id": "983e9292-d5f1-48b9-907e-e17057ac0ff0",
        "text": "```16 of 23 patterns are either invisible or simpler, due to: \nFirst-class types (6): Abstract-Factory, Flyweight, Factory-Method, State, Proxy, Chain-Of-Responsibility\nFirst-class functions (4): Command, Strategy, Template-Method, Visitor\nMacros (2): Interpreter, Iterator\nMethod Combination (2): Mediator, Observer \nMultimethods (1): Builder\nModules (1): Facade```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569273664.091400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yFaK",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "16 of 23 patterns are either invisible or simpler, due to: \nFirst-class types (6): Abstract-Factory, Flyweight, Factory-Method, State, Proxy, Chain-Of-Responsibility\nFirst-class functions (4): Command, Strategy, Template-Method, Visitor\nMacros (2): Interpreter, Iterator\nMethod Combination (2): Mediator, Observer \nMultimethods (1): Builder\nModules (1): Facade"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "That's another thing Mac does, but in every app… :laughing:",
        "files": [
            {
                "id": "FNR7X6U31",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5D\/td",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's another thing Mac does, but in every app… "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing",
                                "unicode": "1f606"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1569336408.096400",
        "client_msg_id": "a6f22e3e-2062-417d-8b53-3cf892bc5ced",
        "thread_ts": "1569237592.089800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1569336589.096800",
        "client_msg_id": "81e9045d-9f47-4912-a201-051f7eae9fe6",
        "text": "Edward replied \"This is almost exactly how my Beads language is designed.\" to <https:\/\/awelonblue.wordpress.com\/2012\/10\/21\/local-state-is-poison\/> a while ago, so that's probably the idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569273664.091400",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "Awelon Blue",
                "service_url": "http:\/\/awelonblue.wordpress.com",
                "title": "Local State is Poison",
                "title_link": "https:\/\/awelonblue.wordpress.com\/2012\/10\/21\/local-state-is-poison\/",
                "author_name": "dmbarbour",
                "author_link": "https:\/\/awelonblue.wordpress.com\/author\/dmbarbour\/",
                "text": "Up through early 2011, my visions of RDP still called for `new` (as in `new Object()` or `newIORef`). At that time, my vision of an RDP language was a two-layer model: the language would support a separate initialization step for toplevel and dynamic behaviors. But multiple layers was inconvenient, complex, and inelegant no matter how I spun them; I had difficulty reasoning about persistence, live programming, open extension, and metacircular staged programming. \nIn February 2011, I stopped work on RDP then sat down and tried to understand the problem more deeply. What is needed for persistence and upgrade? How do we ensure state is visible and extensible? What is necessary to avoid those extra layers of complexity and turn RDP into a complete paradigm? I don&rsquo;t clearly recall my thought process at the time. But, with some combination of stubborn effort and minor Eureka moments, I traced the problem to a concept that had been so culturally ingrained as &ldquo;good&rdquo; that I had never questioned it: local state.\nThe primary cause for problems achieving persistence, upgrade, visibility, extensibility, and live-programming is local state. And I don&rsquo;t just mean the explicit local state (mutable references and objects). Even implicit local state, represented in continuations, closures, callbacks, message queues, procedural stacks, dataflow loops, etc. will cause the same problems. The issues are inherent to the fundamental nature of local state: state cannot be cheaply recomputed or regenerated like other live values, and because the state is locally encapsulated it is semantically inaccessible to components that might provide persistence, extensions, or support transition of state during upgrade.  \nThe solution? \nPush state just beyond the edges of our program logic, into external databases or filesystems&hellip; or to type-rich language-local abstractions that happen to look a lot like filesystems and databases. Modularity, security and exclusivity concerns can be addressed by secure partitioning of a stateful resource space across different subprograms, e.g. similar to chroot jails. \nExternal state is a shared, global state. \nIn modern programming culture, we are taught that global state is bad, that shared state is bad, and that shared, global state is doubly bad. Belief in the evil of global shared state does seem well justified when presented in the context of imperative programming, multi-threaded concurrency, ambient authority. However, that is attribution error: the context is awful with or without global state. The belief is also just plain inconsistent with the use of databases (a pain felt by anyone who uses an ORM). With sane programming models for concurrency, consistency, and composable security, shared global state is great; only local state is problematic.\nIf we eliminate local state, both explicit and implicit, our programs become stateless logics manipulating a stateful substrate. Programs become simpler: no need for concepts of creation or destruction. Those concepts are replaced by discovery &ndash; potentially in an infinite graph of stateful resources &ndash; with default states, and subgraph resets. We compose and manipulate resources that already exist, that continue to persist beyond the lifetime of our program. Orthogonal persistence, resilience, open extension, visibility, runtime upgrade, and many other advantages come easily once we decide to abandon local state. \nOf course, it isn&rsquo;t easy to abandon local state. As I describe of event systems, many of our programming models today have a great deal of implicit local state. To be rid of this is challenging. Even purely functional models like FRP tend to hold onto local state (modeling local integrals and accumulators). To ease transition from local state to proper use of global state, new idioms are required. \nI spent most of 2011 March through October designing state models and idioms to support RDP. I didn&rsquo;t have much luck (beyond tuple spaces) until Reactive State Transition. Use of external state enables RDP to be a complete programming paradigm &ndash; in both senses of being Turing complete (via incremental manipulation of state) and sufficient for general purpose programming. Of course, it is still preferable to avoid state if it is not essential. \nSince I started blogging only in 2011 May, RDP has never been presented on this blog with the early visions for use of local state. A year after I wrote nothing `new` in RDP, I believe even more strongly that `new` is harmful, that local state is harmful, even if implicit. \nI write in my Sirea readme: \nA tree-shaped resource space, where each subtree is a recursive resource space, is nearly ideal:\npath names can be stabilized using meaningful domain values\ncan be securely partitioned; no path from child to parent\nsubtree-level operations feasible: reset, clone, splice\nparent can easily observe and influence child resources\nreadily supports orthogonal persistence and versioning\nYou&rsquo;re probably thinking, &ldquo;hey, that&rsquo;s basically a filesystem!&rdquo; And you&rsquo;re right. A filesystem metaphor to manage resources is superior in every way to use of new. The tree structure is discoverable, extensible, auditable, persistable, securable, composable, and suitable for declarative access. With a little discipline to ensure stability of schema and locators, the tree structure effectively supports live programming. The ability to audit and discover resources is useful for visual presentation, developer awareness, and debugging.\nI expect there are programming subcultures that already grok the problem, if not the cause &ndash; RESTful web architects, users of the Erlang\/OTP platform, users of publish\/subscribe systems. But I&rsquo;ve been there, and it still took me years to even recognize my &ldquo;local state is good, global shared state is bad&rdquo; prejudice. My mind had been poisoned, probably by Object Oriented Programming.\nIf you think global shared state is bad, you&rsquo;re doing it wrong. To achieve large scale, robust, resilient, maintainable, extensible, eternal systems, we must transition away from local state and shove essential state into global, shared spaces where it can be represented independently of program logic. \nWhen we need state, global state is great. Local state is the mind killer.\nClarifications: I&rsquo;ve had some arguments on the internet recently that boil down to a few misunderstandings. In one case, the other guy was reading &lsquo;local&rsquo; and thinking &lsquo;physical local (vs remote)&rsquo;, which is reasonable but isn&rsquo;t what I meant. In a distributed system, code and data can be modeled as having locations and partitions, and we can speak of migrating code or data based on access patterns. Distributed filesystems, NUMA, mmap, CPU cache. But the &lsquo;local&rsquo; I mean is about state embedded within a software component. Perhaps if I had used &lsquo;internal vs external&rsquo; state (internal state is poison!) this confusion would have been avoided. In another case, a different other guy was assuming non-local (external) state must be durable. But consider tmpfs as an obvious counter-example.",
                "fallback": "Awelon Blue Link: Local State is&nbsp;Poison",
                "from_url": "https:\/\/awelonblue.wordpress.com\/2012\/10\/21\/local-state-is-poison\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/awelonblue.wordpress.com\/2012\/10\/21\/local-state-is-poison\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2VWkm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Edward replied \"This is almost exactly how my Beads language is designed.\" to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/awelonblue.wordpress.com\/2012\/10\/21\/local-state-is-poison\/"
                            },
                            {
                                "type": "text",
                                "text": " a while ago, so that's probably the idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1569337267.097100",
        "client_msg_id": "2da59f94-89b6-4538-9417-4e00cfb7f74f",
        "text": "no mac here :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569237592.089800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "no mac here "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1569340450.097300",
        "client_msg_id": "2db6d151-6407-4ed2-965e-a4fb82003d8a",
        "text": "<@UFEQUBNNT> Yeah! Great point. I love hitting command-shift-question as a shortcut for searching the menu bar. It's like spotlight for tools within an app.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569237592.089800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SJ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " Yeah! Great point. I love hitting command-shift-question as a shortcut for searching the menu bar. It's like spotlight for tools within an app."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U79HM6726",
        "thread_ts": "1569273664.091400",
        "root": {
            "user": "U8A5MS6R1",
            "type": "message",
            "ts": "1569273664.091400",
            "client_msg_id": "48eea977-3e9b-48cd-82ac-eac3c883b23d",
            "text": "<https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html>",
            "team": "T5TCAFTA9",
            "thread_ts": "1569273664.091400",
            "reply_count": 17,
            "reply_users_count": 8,
            "latest_reply": "1569418030.109300",
            "reply_users": [
                "UHWC9PXBL",
                "UEQ6M68H0",
                "UJUQESQ1Z",
                "UA14TGLTC",
                "U79HM6726",
                "UM1HH60GN",
                "UFEQUBNNT",
                "U8A5MS6R1"
            ],
            "replies": [
                {
                    "user": "UHWC9PXBL",
                    "ts": "1569275733.094200"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1569277555.094400"
                },
                {
                    "user": "UJUQESQ1Z",
                    "ts": "1569288483.094600"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569308085.094800"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1569327090.095400"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569327631.095700"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569327817.096000"
                },
                {
                    "user": "UFEQUBNNT",
                    "ts": "1569336589.096800"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1569349243.097600"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1569378205.102100"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1569388655.107600"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569396757.108200"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417241.108500"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417292.108700"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569417367.108900"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1569417977.109100"
                },
                {
                    "user": "UM1HH60GN",
                    "ts": "1569418030.109300"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "Nim Programming Language",
                    "title": "Version 1.0 released",
                    "title_link": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html",
                    "text": "The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.",
                    "fallback": "Nim Programming Language: Version 1.0 released",
                    "image_url": "https:\/\/nim-lang.org\/assets\/img\/twitter_banner.png",
                    "image_width": 500,
                    "image_height": 250,
                    "from_url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html",
                    "image_bytes": 43334,
                    "service_icon": "https:\/\/nim-lang.org\/assets\/img\/logo_bw.png",
                    "id": 1,
                    "original_url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "y3t3d",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "https:\/\/nim-lang.org\/blog\/2019\/09\/23\/version-100-released.html"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1569349243.097600",
        "client_msg_id": "57c6b837-71d9-4f64-9054-334908b0a39c",
        "text": "<@UFEQUBNNT> that’s an interesting article. Goes against my programming habits but that doesn’t necessarily mean it’s wrong",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mZBYA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " that’s an interesting article. Goes against my programming habits but that doesn’t necessarily mean it’s wrong"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1569363250.098800",
        "client_msg_id": "FE2E4B69-C7CF-43F7-A83B-07A1CA4C6B9F",
        "text": "extremely glad to learn that shortcut in this thread! you’ll note it’s the only unlabeled one in the menu bar :no_mouth:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569237592.089800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pdj9Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "extremely glad to learn that shortcut in this thread! you’ll note it’s the only unlabeled one in the menu bar "
                            },
                            {
                                "type": "emoji",
                                "name": "no_mouth",
                                "unicode": "1f636"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1569364418.100000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1569375626.000000"
        },
        "client_msg_id": "f08afc6c-5777-48c9-a8a6-9ea1c0c0c0b0",
        "text": "catch(Exception) { throw MyBetterException; }",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "99y6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "catch(Exception) { throw MyBetterException; }"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1569375505.101400",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1569375516.000000"
        },
        "client_msg_id": "3EF12C62-0E50-4C8D-9E94-C3A0005581EF",
        "text": "<@U5TCAFTD3> i know you have a long history with block languages—this youtube maniac wrote a drone controller and then an inexplicable drone\/web game in scratch: <https:\/\/youtu.be\/bZDE6I5B9-E>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569375505.101400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1569595398.114900",
        "reply_users": [
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1569595398.114900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1569595398.114900",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TuV2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " i know you have a long history with block languages—this youtube maniac wrote a drone controller and then an inexplicable drone\/web game in scratch: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/bZDE6I5B9-E"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1569376399.101800",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1569376416.000000"
        },
        "client_msg_id": "f7f59921-1f37-4916-ad4e-8acfe50288c8",
        "text": "What's bungled in the JS module system, in your view?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568834549.061200",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G=s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's bungled in the JS module system, in your view?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1569378205.102100",
        "client_msg_id": "11abc6dd-ac31-4465-a504-e2798c064e76",
        "text": "Exceptions are basically 'goto' where the destination is dynamically determined. Closures outlive their outer function and fork the lifetime beyond that function. I actually prefer to use both instead of the other usual alternatives which I find very cumbersome. However if there were non cumbersome alternatives I could change my mind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569273664.091400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UIC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exceptions are basically 'goto' where the destination is dynamically determined. Closures outlive their outer function and fork the lifetime beyond that function. I actually prefer to use both instead of the other usual alternatives which I find very cumbersome. However if there were non cumbersome alternatives I could change my mind."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1569380289.107000",
        "client_msg_id": "a79f9c7c-0868-4af0-a1b9-ab9124f1c570",
        "text": "Maybe they didn't see Causal Trees at <http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568987238.082500",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "service_name": "Archagon Was Here",
                "title": "Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "title_link": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "text": "An in-depth exploration of a new class of expressive, performant, and intuitive CRDTs, together with macOS and iOS sample code.",
                "fallback": "Archagon Was Here: Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "thumb_url": "http:\/\/archagon.net\/images\/blog\/causal-trees\/header.jpg",
                "from_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "thumb_width": 1800,
                "thumb_height": 772,
                "service_icon": "http:\/\/archagon.net\/images\/favicon\/favicon-96x96.png",
                "id": 1,
                "original_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dEb5O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe they didn't see Causal Trees at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1569383155.107300",
        "client_msg_id": "37566d8f-724b-438b-a9a2-771b7c4393fe",
        "text": "You'll find it in System Preferences &gt; Keyboard &gt; Shortcuts, under App Shortcuts &gt; All Applications. The Shortcuts section of System Prefs is amazing, since you can override pretty much all of the built-in keyboard shortcuts, and define your own shortcuts, both globally and on a per-app basis.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569237592.089800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UoQgR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You'll find it in System Preferences > Keyboard > Shortcuts, under App Shortcuts > All Applications. The Shortcuts section of System Prefs is amazing, since you can override pretty much all of the built-in keyboard shortcuts, and define your own shortcuts, both globally and on a per-app basis."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1569388655.107600",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1569389208.000000"
        },
        "client_msg_id": "44d7da7f-4e4c-4e4a-abcd-c4e7755d1383",
        "text": "Closures are very bad for some important reasons:\n\n1) they create a bizarre chunk of code which is partially instantiated with values. It is very common in JS to create a function that is parameterized via a closure. So effectively you are creating a section of code that has no location in your code base; it is a mixture of data and code together, living on the heap, that requires some magic in the runtime to make it all work (with attendant magical garbage collection when the closure is finished).\n\n2) if you are trying to show the state of the computer in its totality, it greatly complicates the display: you have your code in one window, and your data in another window, and a closure is a hybrid of the two, and depending on how many of them you have it could make a real mess.\n\n3) it makes it almost impossible to reverse the execution of your program. Every programmer should be honest about where they spend their time. It isn't typing in code, or designing. There is an activity which consumes I estimate  around 80% of one's time, and it is the hard part that causes people to quit the field.... debugging. And isn't debugging in its essence the process of going from an effect back to its cause, following the long chain of cause and effect that is how computers actually work.\n\nThat being said, there is almost no way to program sensibly in JS without using them, with its callback system which relies on the closures to remember the local variable context so that the callback function can do useful work without having tons of parameters and going the extra mile one had to do back in mainframe days when all functions were re-entrant by design, and you had to pass storage buffers to the called function so that no memory allocations were happening inside some low level code. those were painful days with tons of housekeeping and boilerplate to make it all work. Today's closures are fairly painless. But it doesn't mean they don't rely on a very sneaky system that is poorly understood by the people using them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569273664.091400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cCQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Closures are very bad for some important reasons:\n\n1) they create a bizarre chunk of code which is partially instantiated with values. It is very common in JS to create a function that is parameterized via a closure. So effectively you are creating a section of code that has no location in your code base; it is a mixture of data and code together, living on the heap, that requires some magic in the runtime to make it all work (with attendant magical garbage collection when the closure is finished).\n\n2) if you are trying to show the state of the computer in its totality, it greatly complicates the display: you have your code in one window, and your data in another window, and a closure is a hybrid of the two, and depending on how many of them you have it could make a real mess.\n\n3) it makes it almost impossible to reverse the execution of your program. Every programmer should be honest about where they spend their time. It isn't typing in code, or designing. There is an activity which consumes I estimate  around 80% of one's time, and it is the hard part that causes people to quit the field.... debugging. And isn't debugging in its essence the process of going from an effect back to its cause, following the long chain of cause and effect that is how computers actually work.\n\nThat being said, there is almost no way to program sensibly in JS without using them, with its callback system which relies on the closures to remember the local variable context so that the callback function can do useful work without having tons of parameters and going the extra mile one had to do back in mainframe days when all functions were re-entrant by design, and you had to pass storage buffers to the called function so that no memory allocations were happening inside some low level code. those were painful days with tons of housekeeping and boilerplate to make it all work. Today's closures are fairly painless. But it doesn't mean they don't rely on a very sneaky system that is poorly understood by the people using them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UNCP67JSK"
                ],
                "count": 2
            }
        ]
    }
]