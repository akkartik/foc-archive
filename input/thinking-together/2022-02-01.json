[
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1643725329.722119",
        "client_msg_id": "8f2cf6ed-9a1e-4e6f-8fa6-c7c6d550d8bc",
        "text": "underscore flatten or d3 merge ?\nquite often I just use reduce tho",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "on5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "underscore flatten or d3 merge ?\nquite often I just use reduce tho"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1643726689.589969",
        "client_msg_id": "8ae3a0cd-2495-4ccb-92c2-f2ed4246b854",
        "text": "not generic enough, I mean something like a graphql result or an ast",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4Vj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "not generic enough, I mean something like a graphql result or an ast"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1643727269.939049",
        "client_msg_id": "29091f19-faf0-4c13-9c40-65117e8676de",
        "text": "liek XPATH kinda thing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M41N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "liek XPATH kinda thing"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1643727501.834139",
        "client_msg_id": "67b10558-d702-4c07-92c0-7ed80e32ef20",
        "text": "Oh I have used this one before <https:\/\/www.npmjs.com\/package\/jsonpath>, though I later found I could get away with underscores _.get(object, path, [default]) for my application",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/www.npmjs.com\/package\/jsonpath",
                "thumb_url": "https:\/\/static.npmjs.com\/338e4905a2684ca96e08c7780fc68412.png",
                "thumb_width": 1200,
                "thumb_height": 630,
                "service_icon": "https:\/\/static.npmjs.com\/58a19602036db1daee0d7863c94673a4.png",
                "id": 1,
                "original_url": "https:\/\/www.npmjs.com\/package\/jsonpath",
                "fallback": "npm: jsonpath",
                "text": "Query JavaScript objects with JSONPath expressions. Robust \/ safe JSONPath engine for Node.js.. Latest version: 1.1.1, last published: 10 months ago. Start using jsonpath in your project by running `npm i jsonpath`. There are 928 other projects in the npm registry using jsonpath.",
                "title": "jsonpath",
                "title_link": "https:\/\/www.npmjs.com\/package\/jsonpath",
                "service_name": "npm"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4nh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh I have used this one before "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.npmjs.com\/package\/jsonpath"
                            },
                            {
                                "type": "text",
                                "text": ", though I later found I could get away with underscores _.get(object, path, [default]) for my application"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1643727549.043549",
        "client_msg_id": "8ad71b86-38bf-43f7-9c39-17a94268c67d",
        "text": "if you are doing complex queries it might be worth loading sqlite.js",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LvcZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you are doing complex queries it might be worth loading sqlite.js"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1643732614.466729",
        "client_msg_id": "894245d2-9144-4f2b-ae85-d223f6d01e43",
        "text": "or by table are you asking for a dataframe type thingy? <https:\/\/github.com\/uwdata\/arquero> I guess I am confused by what you are looking for. The term 'table' is ambiguous (SQL table, HTML Table, Mathematical Table) and hardly relates to jq in my world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657057.708549",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/github.com\/uwdata\/arquero",
                "image_url": "https:\/\/repository-images.githubusercontent.com\/291996157\/6c4cdd80-ed1e-11ea-8e9b-00f25c2a36b8",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 41090,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/uwdata\/arquero",
                "fallback": "GitHub: GitHub - uwdata\/arquero: Query processing and transformation of array-backed data tables.",
                "text": "Query processing and transformation of array-backed data tables. - GitHub - uwdata\/arquero: Query processing and transformation of array-backed data tables.",
                "title": "GitHub - uwdata\/arquero: Query processing and transformation of array-backed data tables.",
                "title_link": "https:\/\/github.com\/uwdata\/arquero",
                "service_name": "GitHub"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2OhJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or by table are you asking for a dataframe type thingy? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/uwdata\/arquero"
                            },
                            {
                                "type": "text",
                                "text": " I guess I am confused by what you are looking for. The term 'table' is ambiguous (SQL table, HTML Table, Mathematical Table) and hardly relates to jq in my world."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1643736284.667699",
        "client_msg_id": "ad7697be-86dd-4ec8-bf44-df63707ebc0a",
        "text": "<@UA14TGLTC> I'm working on a tool that reports multiple models, right now, and once that's working it will be possible to do post-processing of the multiple models to determine if certain hypothesized facts are necessary in all, some, or none of the models, and potentially combining the models into a disjunctive explanation of all of them at the same time. I don't know about Batesian Networks and query planning, but I have a path toward exactly what you're talking about.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643218203.543119",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZCfM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I'm working on a tool that reports multiple models, right now, and once that's working it will be possible to do post-processing of the multiple models to determine if certain hypothesized facts are necessary in all, some, or none of the models, and potentially combining the models into a disjunctive explanation of all of them at the same time. I don't know about Batesian Networks and query planning, but I have a path toward exactly what you're talking about."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1643736549.627759",
        "client_msg_id": "e4dabf02-de5a-4bd8-bb33-6c459fcac179",
        "text": "<@UDQBTJ211> Thanks for that link. I have a different tool that is doing the side-by-side from legislative text to legislative encoding, or will eventually. This idea is just for explaining the answer. Natural language is definitely the way to go, and that's where I'm starting. The diagram doesn't have the natural language text in it because of space and laziness. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643218203.543119",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nq\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for that link. I have a different tool that is doing the side-by-side from legislative text to legislative encoding, or will eventually. This idea is just for explaining the answer. Natural language is definitely the way to go, and that's where I'm starting. The diagram doesn't have the natural language text in it because of space and laziness. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1643775604.872829",
        "client_msg_id": "45056afb-5b09-43e4-ab13-4384e4e95643",
        "text": "Graph databases are the antithesis of Datalog. They reject the core tenets of relational programming:\n• Data independence (evaluate programs by *joins*, not by pointer traversal).\n• Relations of arbitrary arity (not just arities 1 and 2).\nThat's an answer to part of your question, anyway :innocent:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643657108.889469",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mpPe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Graph databases are the antithesis of Datalog. They reject the core tenets of relational programming:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Data independence (evaluate programs by "
                                    },
                                    {
                                        "type": "text",
                                        "text": "joins",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", not by pointer traversal)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Relations of arbitrary arity (not just arities 1 and 2)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's an answer to part of your question, anyway "
                            },
                            {
                                "type": "emoji",
                                "name": "innocent",
                                "unicode": "1f607"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]