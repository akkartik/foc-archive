[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1600360697.037500",
        "client_msg_id": "38c4ce13-a76a-4863-a804-1bbbbec20842",
        "text": "Question about programming languages with _static type systems_ and _support for generics_: in the language communities I spend most time in, the usual advice is to write specific algorithms first, and then generalize them when it makes sense. That's probably good advice.\n\nStill, I'm trying something different and wonder: are there language communities that approach this the opposite way, ie. write algorithms as generic as possible and specialize only when needed, and only as far as needed? For instance, if you absolutely need a type to represent a sequence of elements, you only specify that the type conforms to some Iterable protocol, but leave it generic otherwise?\nI'd think Haskell is probably a good place to look for that…? And what about proof-oriented languages?\n\nWhich affordances do these languages offer to specifically support such a programming style?\nAnd is this programming technique a thing that has a name?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "reply_count": 9,
        "reply_users_count": 6,
        "latest_reply": "1600495725.009300",
        "reply_users": [
            "UK3LH8CF5",
            "UFB8STN7K",
            "U01AN8DFFBN",
            "U5STGTB3J",
            "UA14TGLTC",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UK3LH8CF5",
                "ts": "1600361336.037600"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1600362088.037900"
            },
            {
                "user": "U01AN8DFFBN",
                "ts": "1600363785.038300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1600371058.040100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1600397015.000600"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600416208.000800"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1600443720.001600"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1600444211.001900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600495725.009300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JOne",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question about programming languages with "
                            },
                            {
                                "type": "text",
                                "text": "static type systems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "support for generics",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": in the language communities I spend most time in, the usual advice is to write specific algorithms first, and then generalize them when it makes sense. That's probably good advice.\n\nStill, I'm trying something different and wonder: are there language communities that approach this the opposite way, ie. write algorithms as generic as possible and specialize only when needed, and only as far as needed? For instance, if you absolutely need a type to represent a sequence of elements, you only specify that the type conforms to some Iterable protocol, but leave it generic otherwise?\nI'd think Haskell is probably a good place to look for that…? And what about proof-oriented languages?\n\nWhich affordances do these languages offer to specifically support such a programming style?\nAnd is this programming technique a thing that has a name?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UHWC9PXBL",
                    "UJBAJNFLK"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1600361336.037600",
        "client_msg_id": "0cfc4f26-31ab-4862-b663-dae7ddccd831",
        "text": "I definitely think you will find that this is pretty common in haskell. Starting with the generic let's you write reusable code, but also can help constrain what implementations are valid and not. I know of one article that argues specifically for this practice.\n\n<https:\/\/degoes.net\/articles\/insufficiently-polymorphic>\n\n(John De Goes is a very controversial figure and this is not meant as an endorsement of his views. In fact, I don't know his views just that he is controversial.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "service_name": "John A De Goes",
                "title": "Descriptive Variable Names: A Code Smell",
                "title_link": "https:\/\/degoes.net\/articles\/insufficiently-polymorphic",
                "text": "Polymorphic code is more likely to be correct than monomorphic code",
                "fallback": "John A De Goes: Descriptive Variable Names: A Code Smell",
                "from_url": "https:\/\/degoes.net\/articles\/insufficiently-polymorphic",
                "service_icon": "https:\/\/degoes.net\/images\/apple-touch-icon-precomposed.png",
                "id": 1,
                "original_url": "https:\/\/degoes.net\/articles\/insufficiently-polymorphic"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L3WW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I definitely think you will find that this is pretty common in haskell. Starting with the generic let's you write reusable code, but also can help constrain what implementations are valid and not. I know of one article that argues specifically for this practice.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/degoes.net\/articles\/insufficiently-polymorphic"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(John De Goes is a very controversial figure and this is not meant as an endorsement of his views. In fact, I don't know his views just that he is controversial.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1600362088.037900",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1600362193.000000"
        },
        "client_msg_id": "0ee83a4c-e734-44dd-96b7-89b7906c8538",
        "text": "In languages that support polymorphic type inference, this isn’t actually a trade-off you need to make. You can write code without types, and the compiler will infer the most general type possible. For example, in OCaml, if I do:\n\n```let rec map f l = match l with \n  [] -&gt; [] | x :: xs -&gt; f x :: map f xs```\nThen the compiler gets the right generic type for `f` and `l` , including the constraint that the elements of `l` have to be the same type as the input to `f`.\n\nYou probably knew that already, but it’s worth reframing in terms of your question. You should write the algorithm exactly as needed ignoring types, and then decide what capabilities you need from your types.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gkJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In languages that support polymorphic type inference, this isn’t actually a trade-off you need to make. You can write code without types, and the compiler will infer the most general type possible. For example, in OCaml, if I do:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "let rec map f l = match l with \n  [] -> [] | x :: xs -> f x :: map f xs"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen the compiler gets the right generic type for "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "l",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , including the constraint that the elements of "
                            },
                            {
                                "type": "text",
                                "text": "l",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have to be the same type as the input to "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nYou probably knew that already, but it’s worth reframing in terms of your question. You should write the algorithm exactly as needed ignoring types, and then decide what capabilities you need from your types."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UPX3PH28N",
                    "U8A5MS6R1"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U01AN8DFFBN",
        "type": "message",
        "ts": "1600363785.038300",
        "client_msg_id": "03c91684-d42d-4634-b7c2-fc6541b69a41",
        "text": "I thought for a long time that abstractions and generalizations just complicate stuff. Particularly, I found natural numbers very easy to understand and groups\/fields etc. very hard to grasp.\nNow I think it is completely the opposite. Natural numbers are incredibly hard. Abstractions are meant for simplification - they remove the noise from the actual problem.\n\nI think similarly about programming and interfaces or generic types.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbf2c32d7d6b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-10\/1362285586740_cbf2c32d7d6b8886a1b2_72.png",
            "first_name": "",
            "real_name": "Henning Dieterichs",
            "display_name": "Henning Dieterichs",
            "team": "T5TCAFTA9",
            "name": "henning.dieterichs",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dzlF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought for a long time that abstractions and generalizations just complicate stuff. Particularly, I found natural numbers very easy to understand and groups\/fields etc. very hard to grasp.\nNow I think it is completely the opposite. Natural numbers are incredibly hard. Abstractions are meant for simplification - they remove the noise from the actual problem.\n\nI think similarly about programming and interfaces or generic types."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMFG2571",
        "type": "message",
        "ts": "1600365145.039700",
        "client_msg_id": "f96544fb-409a-4dbe-be72-e874f44a0f55",
        "text": "Does anyone know of prior art on hot-reloading of data structures in programming languages? Similar to this: <https:\/\/mun-lang.org\/blog\/2020\/05\/01\/memory-mapping\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9c42167d8bfa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-19\/1070853245589_9c42167d8bfa4cbf26ad_72.png",
            "first_name": "Nuno",
            "real_name": "Nuno Leiria",
            "display_name": "Nuno Leiria",
            "team": "T5TCAFTA9",
            "name": "omniparagon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600365145.039700",
        "reply_count": 14,
        "reply_users_count": 7,
        "latest_reply": "1600947824.000400",
        "reply_users": [
            "UBN9AFS0N",
            "UN9SCH5RD",
            "U01AN8DFFBN",
            "UPMFG2571",
            "UJBAJNFLK",
            "UA14TGLTC",
            "U013ZLJARC7"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1600366465.039900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1600374148.040400"
            },
            {
                "user": "U01AN8DFFBN",
                "ts": "1600374788.040600"
            },
            {
                "user": "UPMFG2571",
                "ts": "1600375547.041100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600416369.001100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1600419529.001400"
            },
            {
                "user": "UPMFG2571",
                "ts": "1600453456.002800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600495339.004100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1600497414.009500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600584385.018100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1600839710.000100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1600844337.000300"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1600868355.002700"
            },
            {
                "user": "UPMFG2571",
                "ts": "1600947824.000400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Hot Reloadable structs: Memory Mapping",
                "title_link": "https:\/\/mun-lang.org\/blog\/2020\/05\/01\/memory-mapping\/",
                "text": "The Mun v0.2 release is on the horizon, so we wanted to take this opportunity to delve a little deeper into this release's big newcomer: hot reloadable structs. Being able to effortlessly hot reload data was what we originally set out to do when designing Mun, so we are excited to share how we brought this feat about.",
                "fallback": "Hot Reloadable structs: Memory Mapping",
                "from_url": "https:\/\/mun-lang.org\/blog\/2020\/05\/01\/memory-mapping\/",
                "service_name": "mun-lang.org",
                "id": 1,
                "original_url": "https:\/\/mun-lang.org\/blog\/2020\/05\/01\/memory-mapping\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nFJZ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone know of prior art on hot-reloading of data structures in programming languages? Similar to this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mun-lang.org\/blog\/2020\/05\/01\/memory-mapping\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1600366465.039900",
        "client_msg_id": "59f832dc-5e71-4da4-8b37-7282287454ca",
        "text": "automatic? or can it be enabled by the runtime but manual? the Erlang virtual machine supports data structure migration on hot-reloading of a new release",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600365145.039700",
        "parent_user_id": "UPMFG2571",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3eCx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "automatic? or can it be enabled by the runtime but manual? the Erlang virtual machine supports data structure migration on hot-reloading of a new release"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1600371058.040100",
        "client_msg_id": "0b733ac4-c370-491e-9a46-dc9363bb9697",
        "text": "<@UK3LH8CF5> Thanks for sharing that article. That is in fact pretty much exactly what I was thinking about.\n\n<@UFB8STN7K> Polymorphic type inference is absolutely one of these affordances I had in mind. It seems all the languages in the ML family seem to be pretty good at that.\n\n<@U01AN8DFFBN> Completely agree. Abstractions remove detail; and that's exactly why everything gets a lot simpler if you use them right. If you have a thing and you only know that it has elements you can iterate over, you can implement a lot of algorithms on top of that, but you can't accidentally assume another property of that thing, because the compiler won't let you. In most imperative and\/or dynamically typed languages it's easy to make such assumptions and as long as it works, you'll never know you did. Which might not be a problem, but I do think a lot of the complexity in refactoring comes from such assumptions that were only possible, because a much more specific (and therefore more powerful) type was used.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for sharing that article. That is in fact pretty much exactly what I was thinking about.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " Polymorphic type inference is absolutely one of these affordances I had in mind. It seems all the languages in the ML family seem to be pretty good at that.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U01AN8DFFBN"
                            },
                            {
                                "type": "text",
                                "text": " Completely agree. Abstractions remove detail; and that's exactly why everything gets a lot simpler if you use them right. If you have a thing and you only know that it has elements you can iterate over, you can implement a lot of algorithms on top of that, but you can't accidentally assume another property of that thing, because the compiler won't let you. In most imperative and\/or dynamically typed languages it's easy to make such assumptions and as long as it works, you'll never know you did. Which might not be a problem, but I do think a lot of the complexity in refactoring comes from such assumptions that were only possible, because a much more specific (and therefore more powerful) type was used."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1600374148.040400",
        "client_msg_id": "36db6f7c-1ba3-413c-a270-083dc79e8f47",
        "text": "so that mun lang blog post, seems like the hot reloading requires a clever algorithm depending on whether the name of the fields of the struct are the same as before, etc. I wonder if a more intentional approach could work, like a refactoring tool that tells both the editor and the running program a certain field was migrated from one thing to the next.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600365145.039700",
        "parent_user_id": "UPMFG2571",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sLV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so that mun lang blog post, seems like the hot reloading requires a clever algorithm depending on whether the name of the fields of the struct are the same as before, etc. I wonder if a more intentional approach could work, like a refactoring tool that tells both the editor and the running program a certain field was migrated from one thing to the next."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AN8DFFBN",
        "type": "message",
        "ts": "1600374788.040600",
        "client_msg_id": "846c6510-f36e-47c2-837a-8a611ebbf7bf",
        "text": "I've been exploring hot reload in nodejs for a while now. I figured that most algorithms run in a couple of milliseconds, so rather than doing some unstable automatic migrations, restarting the last pure function + manual data migration works reasonable well.\n(<https:\/\/github.com\/hediet\/node-reload|https:\/\/github.com\/hediet\/node-reload>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbf2c32d7d6b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-10\/1362285586740_cbf2c32d7d6b8886a1b2_72.png",
            "first_name": "",
            "real_name": "Henning Dieterichs",
            "display_name": "Henning Dieterichs",
            "team": "T5TCAFTA9",
            "name": "henning.dieterichs",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600365145.039700",
        "parent_user_id": "UPMFG2571",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "hediet\/node-reload",
                "title_link": "https:\/\/github.com\/hediet\/node-reload",
                "text": "An advanced hot reload solution for Node apps. Works very well for developing VSCode extensions and automating websites with puppeteer. - hediet\/node-reload",
                "fallback": "GitHub: hediet\/node-reload",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/2931520?s=400&v=4",
                "from_url": "https:\/\/github.com\/hediet\/node-reload",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/hediet\/node-reload"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oT\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been exploring hot reload in nodejs for a while now. I figured that most algorithms run in a couple of milliseconds, so rather than doing some unstable automatic migrations, restarting the last pure function + manual data migration works reasonable well.\n("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/hediet\/node-reload",
                                "text": "https:\/\/github.com\/hediet\/node-reload"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMFG2571",
        "type": "message",
        "ts": "1600375547.041100",
        "client_msg_id": "5526fefc-a705-4030-925d-8fcd9b72e14e",
        "text": "<@UBN9AFS0N> Automatic. Developer makes changes to a data structure at runtime (struct, class, etc), those changes are picked up and propagated, and the program continues to run normally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9c42167d8bfa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-19\/1070853245589_9c42167d8bfa4cbf26ad_72.png",
            "first_name": "Nuno",
            "real_name": "Nuno Leiria",
            "display_name": "Nuno Leiria",
            "team": "T5TCAFTA9",
            "name": "omniparagon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600365145.039700",
        "parent_user_id": "UPMFG2571",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QLels",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " Automatic. Developer makes changes to a data structure at runtime (struct, class, etc), those changes are picked up and propagated, and the program continues to run normally."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1600396350.000200",
        "client_msg_id": "b2dfd68c-b358-4512-9e40-51318072fd95",
        "text": "Surprised by \"and it just works!\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600312443.026300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Surprised by \"and it just works!\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1600397015.000600",
        "client_msg_id": "de1d9947-9524-426f-b1ef-74a87cdfe8f1",
        "text": "Yes, in Haskell people are going to start with type variables because lowercase `a`, `b`, `c` translates into don't care, doesn't matter, no worries.  The place where you fall down a hole is where you have interacting type classes.  Next thing you know you're surrounded by multi-parameter type class with functional dependencies, type families, and worse.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1600360697.037500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zxI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, in Haskell people are going to start with type variables because lowercase "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " translates into don't care, doesn't matter, no worries.  The place where you fall down a hole is where you have interacting type classes.  Next thing you know you're surrounded by multi-parameter type class with functional dependencies, type families, and worse."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]