[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1675678641.863779",
        "client_msg_id": "f028918f-1a2c-4a03-b8bd-fa24aaa86250",
        "text": "… watching … <https:\/\/www.youtube.com\/watch?v=DG5MtsMojgI>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=DG5MtsMojgI",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/DG5MtsMojgI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/DG5MtsMojgI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Standard Object Out: Streaming Objects with Polymorphic Write Streams\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=DG5MtsMojgI",
                "fallback": "YouTube Video: Standard Object Out: Streaming Objects with Polymorphic Write Streams",
                "title": "Standard Object Out: Streaming Objects with Polymorphic Write Streams",
                "title_link": "https:\/\/www.youtube.com\/watch?v=DG5MtsMojgI",
                "author_name": "ACM SIGPLAN",
                "author_link": "https:\/\/www.youtube.com\/@acmsigplan",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5OCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "… watching … "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=DG5MtsMojgI"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1675685850.521639",
        "client_msg_id": "cd5267dd-6334-4bd8-9fd8-7cf2df651e8d",
        "text": "various comments that came to mind ...\n\na) aside: are you aware of Paul Morrison’s Flow-Based Programming? (If not, I can supply more info, including a discord link)\n\nb) There is ONLY ONE thing that matters to end-users in the end: how inexpensive is the machine?  Do end-users care if you used Emacs, VIM, VSCode, etc.?  Nope.  Do end-users care if you used functional programming, OOP, C, or raw assembler?  Nope.  Can the end-user waltz into WalMart and buy your hand-held game machine in the home furnishings department off-the-shelf like a toaster or can they run your product on an rPI or do they need to buy a full-blown laptop paying tax to Microsoft or Apple?  Is the product guaranteed to work or does it need frequent updates?\n\nc) CALL\/RETURN uses the call-stack - a LIFO.  Queues use FIFOs.\n\nd) To be able to Architect software, you need to get rid of the concept of Loops and Recursion (these concepts are valid only in call-stack based code).  I think in terms of messages being shepherded between Output and Input queues and explicit feedback.  I’m not sure how to think about this in terms of streams. ?  For example, “loop 2 times {print “hello”}” becomes “when input &gt; 0 {print hello ; send self (input - 1)}”\n\ne) The “trick” is to think in terms of 2 kinds of Components - recursive Container components and Leaf components.  I think that this corresponds to Packages and Wares, resp, in the paper. ?  (Containers compose Components by joining them up via streams and messages, Leaves are just “code” as we know it with the ability to call functions AND the additional ability to send messages).\n\nf) Stepping stones ... Call\/Return Spaghetti <https:\/\/guitarvydas.github.io\/2020\/12\/09\/CALL-RETURN-Spaghetti.html>, ALGOL bottleneck <https:\/\/guitarvydas.github.io\/2020\/12\/25\/The-ALGOL-Bottleneck.html>.\n\ng) Programming Languages were invented in the 1950's, operating systems came soon after.  It is now 2023, (approx. 70 years later) and I just had to preventative-reboot my MacBook because I was beginning to get random, unexplained errors in apps that worked OK yesterday.  What is wrong with this picture? Functional Programming will surely make this all better, right?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AeG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "various comments that came to mind ...\n\na) aside: are you aware of Paul Morrison’s Flow-Based Programming? (If not, I can supply more info, including a discord link)\n\nb) There is ONLY ONE thing that matters to end-users in the end: how inexpensive is the machine?  Do end-users care if you used Emacs, VIM, VSCode, etc.?  Nope.  Do end-users care if you used functional programming, OOP, C, or raw assembler?  Nope.  Can the end-user waltz into WalMart and buy your hand-held game machine in the home furnishings department off-the-shelf like a toaster or can they run your product on an rPI or do they need to buy a full-blown laptop paying tax to Microsoft or Apple?  Is the product guaranteed to work or does it need frequent updates?\n\nc) CALL\/RETURN uses the call-stack - a LIFO.  Queues use FIFOs.\n\nd) To be able to Architect software, you need to get rid of the concept of Loops and Recursion (these concepts are valid only in call-stack based code).  I think in terms of messages being shepherded between Output and Input queues and explicit feedback.  I’m not sure how to think about this in terms of streams. ?  For example, “loop 2 times {print “hello”}” becomes “when input > 0 {print hello ; send self (input - 1)}”\n\ne) The “trick” is to think in terms of 2 kinds of Components - recursive Container components and Leaf components.  I think that this corresponds to Packages and Wares, resp, in the paper. ?  (Containers compose Components by joining them up via streams and messages, Leaves are just “code” as we know it with the ability to call functions AND the additional ability to send messages).\n\nf) Stepping stones ... Call\/Return Spaghetti "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2020\/12\/09\/CALL-RETURN-Spaghetti.html"
                            },
                            {
                                "type": "text",
                                "text": ", ALGOL bottleneck "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2020\/12\/25\/The-ALGOL-Bottleneck.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\ng) Programming Languages were invented in the 1950's, operating systems came soon after.  It is now 2023, (approx. 70 years later) and I just had to preventative-reboot my MacBook because I was beginning to get random, unexplained errors in apps that worked OK yesterday.  What is wrong with this picture? Functional Programming will surely make this all better, right?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1675686938.256409",
        "client_msg_id": "37963d32-a41a-46e3-be38-8871344fd0a2",
        "text": "… planning to read … <https:\/\/www.semanticscholar.org\/paper\/Standard-object-out%3A-streaming-objects-with-write-Weiher-Hirschfeld\/68b28444e2aaad48b48e382bc325cf38a5557dea>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/www.semanticscholar.org\/paper\/Standard-object-out%3A-streaming-objects-with-write-Weiher-Hirschfeld\/68b28444e2aaad48b48e382bc325cf38a5557dea",
                "image_url": "https:\/\/www.semanticscholar.org\/img\/semantic_scholar_og.png",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 115258,
                "service_icon": "https:\/\/cdn.semanticscholar.org\/69701396aaaf727a\/img\/apple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/www.semanticscholar.org\/paper\/Standard-object-out%3A-streaming-objects-with-write-Weiher-Hirschfeld\/68b28444e2aaad48b48e382bc325cf38a5557dea",
                "fallback": "[PDF] Standard object out: streaming objects with polymorphic write streams | Semantic Scholar",
                "text": "Standard object out is proposed, an object-oriented analog to the output part of the Unix standard input output library and Polymorphic Write Streams (PWS) are proposed, a hierarchy of classes that decouple encoding from specific streaming destinations and provide streaming behaviour. We propose standard object out, an object-oriented analog to the output part of the Unix standard input output library. Polymorphic Write Streams (PWS) act as architectural adapters between the object-oriented architectural style and the pipes and filters architectural style in the same way that stdio acts as an architectural adapter between the call\/return architectural style and the pipes and filters architectural style. Current object-oriented interfaces to the Unix I\/O system mimic their procedural counterparts so closely that they manage to be neither polymorphic nor streaming, at least not for objects. Specifically the object is first converted to a fixed byte-representation by sending it a specific message and the result is then output on the underlying byte stream. With this approach, these APIs do not allow for streaming behaviour: the entire result has to be constructed in-memory before it can be output. In addition, output of nested structures can require large multiples of time and space compared to the final output size, and fails completely if there are cycles in the object graph. It also does not allow for polymorphic behaviour. To solve these problems, we propose Polymorphic Write-Streams (PWS). PWSs represent a hierarchy of classes that decouple encoding from specific streaming destinations. Using triple dispatch they provide streaming behaviour and allow each stream to react specifically to each kind of object and vice versa: sharing of common functionality is enabled by chaining messages along the streams’ inheritance chain.",
                "title": "[PDF] Standard object out: streaming objects with polymorphic write streams | Semantic Scholar",
                "title_link": "https:\/\/www.semanticscholar.org\/paper\/Standard-object-out%3A-streaming-objects-with-write-Weiher-Hirschfeld\/68b28444e2aaad48b48e382bc325cf38a5557dea",
                "service_name": " "
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1vuiO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "… planning to read … "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.semanticscholar.org\/paper\/Standard-object-out%3A-streaming-objects-with-write-Weiher-Hirschfeld\/68b28444e2aaad48b48e382bc325cf38a5557dea"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    }
]