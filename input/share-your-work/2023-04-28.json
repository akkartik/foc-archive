[
    {
        "subtype": "thread_broadcast",
        "user": "U03CEGR3HSL",
        "thread_ts": "1680370755.360969",
        "root": {
            "user": "UC2A2ARPT",
            "type": "message",
            "ts": "1680370755.360969",
            "client_msg_id": "7f01785c-b4e9-45b1-aabb-17a5564b52ea",
            "text": "Future of Coding â€¢ Episode 63\nBen Moseley &amp; Peter Marks â€¢ Out of the Tar Pit\nð’‚¶ <https:\/\/futureofcoding.org\/episodes\/063>\n\n<https:\/\/moss.cs.iit.edu\/cs100\/papers\/out-of-the-tar-pit.pdf|Out of the Tar Pit> is in the grand pantheon of great papers, beloved the world over, with just _so much influence_. The resurgence of Functional Programming over the past decade owes its very existence to the Tar Pitâ€™s snarling takedown of mutable state, championed by Hickey &amp; The Cloj-Co. Many a budding computational philosophizer â€” both of yours truly counted among them â€” have been led onward to the late great <https:\/\/futureofcoding.org\/episodes\/062|Bro86> by this paperâ€™s borrow of his _essence_ and _accident_. But is the paper _actually_ good? Like, really â€” is it _that_ good? Does it hold up to the blinding light of hindsight that 2023 offers? Is this episode actually an April Fools joke, or is it a serious episode that Ivan just delayed by a few weeks because of life circumstances and his own incoherent sense of humour? I canâ€™t tell.\n\nApologies in advance. Next time, weâ€™re going back to our usual format to discuss <https:\/\/en.wikipedia.org\/wiki\/INTERCAL|Intercal>.",
            "team": "T5TCAFTA9",
            "thread_ts": "1680370755.360969",
            "reply_count": 26,
            "reply_users_count": 8,
            "latest_reply": "1684527159.567249",
            "reply_users": [
                "U02U0AS3J49",
                "UC2A2ARPT",
                "U03R0B9U1GD",
                "U04MTMF6Y4W",
                "UA14TGLTC",
                "U03CEGR3HSL",
                "UK3LH8CF5",
                "U017TE5R09M"
            ],
            "replies": [
                {
                    "user": "U02U0AS3J49",
                    "ts": "1680387267.285919"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1680388464.340919"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1680402954.168419"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1680411839.411449"
                },
                {
                    "user": "U03R0B9U1GD",
                    "ts": "1680541272.439419"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1680541344.054009"
                },
                {
                    "user": "U03R0B9U1GD",
                    "ts": "1680541442.828519"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1680545134.812359"
                },
                {
                    "user": "U03R0B9U1GD",
                    "ts": "1680545179.866759"
                },
                {
                    "user": "U04MTMF6Y4W",
                    "ts": "1680597863.331019"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1680598470.323629"
                },
                {
                    "user": "U03CEGR3HSL",
                    "ts": "1682712600.334319"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1682828183.924529"
                },
                {
                    "user": "U03CEGR3HSL",
                    "ts": "1682829524.999199"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1682866170.653509"
                },
                {
                    "user": "U03CEGR3HSL",
                    "ts": "1682870029.728789"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1682871400.660259"
                },
                {
                    "user": "U017TE5R09M",
                    "ts": "1684042987.877889"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1684072313.665109"
                },
                {
                    "user": "U017TE5R09M",
                    "ts": "1684132428.733029"
                },
                {
                    "user": "U017TE5R09M",
                    "ts": "1684490591.505269"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1684512931.782839"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1684513175.773629"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1684518238.478799"
                },
                {
                    "user": "U03CEGR3HSL",
                    "ts": "1684518543.826509"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1684527159.567249"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "6Lo8p",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Future of Coding â€¢ Episode 63\nBen Moseley & Peter Marks â€¢ Out of the Tar Pit\nð’‚¶ "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/futureofcoding.org\/episodes\/063"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/moss.cs.iit.edu\/cs100\/papers\/out-of-the-tar-pit.pdf",
                                    "text": "Out of the Tar Pit"
                                },
                                {
                                    "type": "text",
                                    "text": " is in the grand pantheon of great papers, beloved the world over, with just "
                                },
                                {
                                    "type": "text",
                                    "text": "so much influence",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ". The resurgence of Functional Programming over the past decade owes its very existence to the Tar Pitâ€™s snarling takedown of mutable state, championed by Hickey & The Cloj-Co. Many a budding computational philosophizer â€” both of yours truly counted among them â€” have been led onward to the late great "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/futureofcoding.org\/episodes\/062",
                                    "text": "Bro86"
                                },
                                {
                                    "type": "text",
                                    "text": " by this paperâ€™s borrow of his "
                                },
                                {
                                    "type": "text",
                                    "text": "essence",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " and "
                                },
                                {
                                    "type": "text",
                                    "text": "accident",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ". But is the paper "
                                },
                                {
                                    "type": "text",
                                    "text": "actually",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " good? Like, really â€” is it "
                                },
                                {
                                    "type": "text",
                                    "text": "that",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " good? Does it hold up to the blinding light of hindsight that 2023 offers? Is this episode actually an April Fools joke, or is it a serious episode that Ivan just delayed by a few weeks because of life circumstances and his own incoherent sense of humour? I canâ€™t tell.\n\nApologies in advance. Next time, weâ€™re going back to our usual format to discuss "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/en.wikipedia.org\/wiki\/INTERCAL",
                                    "text": "Intercal"
                                },
                                {
                                    "type": "text",
                                    "text": "."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1682712600.334319",
        "client_msg_id": "5d7d070b-fe06-4f04-8b90-966af344f28b",
        "text": "Thank you for responding to my feedback last episode. I was a little worried that my response was so long nobody would read it. \n\nI'm not sure how to respond when you ask me to give you the same kind of respect that I extend, and encourage others to extend, to people like Licklider, Engelbart, Naur, or Brooks, especially when you are asking me to respect your decision to disrespect them. It is possible that I am mistaken or ignorant here, but I am unaware of any reason to believe that either of you have had a hand in crafting the fundamental nature of modern computing or the way that our entire industry views it. \n\nI do not mean this as an insult, since it also applies to almost every other person who has ever lived as well. I do think it's important to remember, and be sensitive to, the level of genius one is reading when deciding whether and how to criticize.\n\nI have no idea how popular your podcast is. I'm thrilled that you are bringing additional attention to these papers, no matter the size of your audience, but I worry that your casual disrespect during prior episodes could cause your listeners to discount the importance of the papers or their authors.\n\nThat said, I have no reason to believe that the authors of Out of the Tar Pit deserve any special consideration, so I don't particularly care about how you treated this one.\n\nI think you are joking about making an episode about Intercal, but now that I heard you say it I have a strange desire to listen to it.\n\nAlthough the structured programming movement ultimately degenerated into \"don't use goto,\" for what it's worth, papers by Peter Naur (Proof of Algorithms by General Snapshots, Programming by Action Clusters), Tony Hoare (An Axiomatic Basis for Computer Programming), and Edsger Dijkstra (Notes on Structured Programming) were pushing the idea of making programs easier to reason about a long time ago.\n\nA big downside of purely functional programming is that it can interfere with modularity. See The Art of the Interpreter or, The Modularity Complex by Guy Steele and Gerald Sussman.\n\nWith respect to trying to reduce complexity, but only measuring some of the dimensions, while I intensely dislike C++, I have a great deal of respect for Bjarne Stroustrup. He has done an amazing job of achieving his design goals, and I really appreciate his observation that \"complexity has to go somewhere.\" I believe he is implicitly referring to essential complexity here.\n<https:\/\/m.slashdot.org\/story\/10028|https:\/\/m.slashdot.org\/story\/10028>\n\nWith respect to the challenge of creating a type of programming that informal reasoning cannot help with, Peter Naur pointed out in Formalization in Program Development that all formal reasoning is ultimately defined in terms of informal reasoning, so while I cannot prove it formally, I don't think it's possible to create a system that is not dependent on any informal reasoning.\n\nHiding state is the basis of encapsulation in the Parnas sense (On the Criteria To Be Used in Decomposing Systems into Modules) and modularity in the Sussman\/Steele sense above. Trying to make all state visible might make it easier to design and play with small systems, but I'm not sure how it can coexist with encapsulation and modularity.\n\nFor a differing view on the \"power corrupts\" thesis, in Why Software Jewels are Rare, Parnas notes \"Moreover, languages that prevent programming errors, a goal advanced by some inveterate language designers, are as feasible as knives that can cut meat but not hands. We need sharp tools to do good work.\"\n<https:\/\/www.researchgate.net\/publication\/2954521_Why_software_jewels_are_rare|https:\/\/www.researchgate.net\/publication\/2954521_Why_software_jewels_are_rare>\n\nAlso, \"Unix was not designed to stop you from doing stupid things, because that would also stop you from doing clever things.\" -- Doug Gwyn\n\nWith respect to creating programs that retain their conceptual integrity when the problem they are solving changes, I am fond of both Dijkstra's string of beads \/ hierarchy of virtual machines (Notes on Structured Programming) and the Structure and Interpretation of Computer Programs (SICP) model of bottom up design, where you essentially design a language for solving the kind of problem you are facing, and then solve your particular problem in that language. Of course, there's always the possibility that your problem changes in the future to be of a sufficiently different kind that you end up needing to adjust more than just the top layer.\n\nOverall, although I haven't read this paper and am going purely by what you said in the podcast, my sense is that the authors didn't have much new to say. I'm not clear on how this became such a popular paper in recent times.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "skyz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for responding to my feedback last episode. I was a little worried that my response was so long nobody would read it. \n\nI'm not sure how to respond when you ask me to give you the same kind of respect that I extend, and encourage others to extend, to people like Licklider, Engelbart, Naur, or Brooks, especially when you are asking me to respect your decision to disrespect them. It is possible that I am mistaken or ignorant here, but I am unaware of any reason to believe that either of you have had a hand in crafting the fundamental nature of modern computing or the way that our entire industry views it. \n\nI do not mean this as an insult, since it also applies to almost every other person who has ever lived as well. I do think it's important to remember, and be sensitive to, the level of genius one is reading when deciding whether and how to criticize.\n\nI have no idea how popular your podcast is. I'm thrilled that you are bringing additional attention to these papers, no matter the size of your audience, but I worry that your casual disrespect during prior episodes could cause your listeners to discount the importance of the papers or their authors.\n\nThat said, I have no reason to believe that the authors of Out of the Tar Pit deserve any special consideration, so I don't particularly care about how you treated this one.\n\nI think you are joking about making an episode about Intercal, but now that I heard you say it I have a strange desire to listen to it.\n\nAlthough the structured programming movement ultimately degenerated into \"don't use goto,\" for what it's worth, papers by Peter Naur (Proof of Algorithms by General Snapshots, Programming by Action Clusters), Tony Hoare (An Axiomatic Basis for Computer Programming), and Edsger Dijkstra (Notes on Structured Programming) were pushing the idea of making programs easier to reason about a long time ago.\n\nA big downside of purely functional programming is that it can interfere with modularity. See The Art of the Interpreter or, The Modularity Complex by Guy Steele and Gerald Sussman.\n\nWith respect to trying to reduce complexity, but only measuring some of the dimensions, while I intensely dislike C++, I have a great deal of respect for Bjarne Stroustrup. He has done an amazing job of achieving his design goals, and I really appreciate his observation that \"complexity has to go somewhere.\" I believe he is implicitly referring to essential complexity here.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/m.slashdot.org\/story\/10028",
                                "text": "https:\/\/m.slashdot.org\/story\/10028"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWith respect to the challenge of creating a type of programming that informal reasoning cannot help with, Peter Naur pointed out in Formalization in Program Development that all formal reasoning is ultimately defined in terms of informal reasoning, so while I cannot prove it formally, I don't think it's possible to create a system that is not dependent on any informal reasoning.\n\nHiding state is the basis of encapsulation in the Parnas sense (On the Criteria To Be Used in Decomposing Systems into Modules) and modularity in the Sussman\/Steele sense above. Trying to make all state visible might make it easier to design and play with small systems, but I'm not sure how it can coexist with encapsulation and modularity.\n\nFor a differing view on the \"power corrupts\" thesis, in Why Software Jewels are Rare, Parnas notes \"Moreover, languages that prevent programming errors, a goal advanced by some inveterate language designers, are as feasible as knives that can cut meat but not hands. We need sharp tools to do good work.\"\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.researchgate.net\/publication\/2954521_Why_software_jewels_are_rare",
                                "text": "https:\/\/www.researchgate.net\/publication\/2954521_Why_software_jewels_are_rare"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso, \"Unix was not designed to stop you from doing stupid things, because that would also stop you from doing clever things.\" -- Doug Gwyn\n\nWith respect to creating programs that retain their conceptual integrity when the problem they are solving changes, I am fond of both Dijkstra's string of beads \/ hierarchy of virtual machines (Notes on Structured Programming) and the Structure and Interpretation of Computer Programs (SICP) model of bottom up design, where you essentially design a language for solving the kind of problem you are facing, and then solve your particular problem in that language. Of course, there's always the possibility that your problem changes in the future to be of a sufficiently different kind that you end up needing to adjust more than just the top layer.\n\nOverall, although I haven't read this paper and am going purely by what you said in the podcast, my sense is that the authors didn't have much new to say. I'm not clear on how this became such a popular paper in recent times."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "U5STGTB3J",
                    "USH01JEDQ"
                ],
                "count": 3
            },
            {
                "name": "eyes",
                "users": [
                    "U03R0B9U1GD",
                    "US370TRJA"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    }
]