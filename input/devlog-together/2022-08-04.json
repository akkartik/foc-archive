[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659603741.825389",
        "client_msg_id": "68cdfe3c-0194-42b2-9c23-22033ff321ee",
        "text": "So to sum up so far...  For existing projects and languages, you <@UK3LH8CF5> want something like a moldable development where you can build  throwaway tools in throwaway time.  My question then is one of liveness.  How much do you want the IDE to work with source\/parses vs integration with a runtime\/debugger of chosen language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196747.344019",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NgzrC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to sum up so far...  For existing projects and languages, you "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " want something like a moldable development where you can build  throwaway tools in throwaway time.  My question then is one of liveness.  How much do you want the IDE to work with source\/parses vs integration with a runtime\/debugger of chosen language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659604057.095779",
        "client_msg_id": "33d33bf5-5e52-4127-b034-ac7370c013ea",
        "text": "Yep, I came here to point to Jef Raskin's work.  Just to fully flesh things out, Your Undivided Attention <https:\/\/www.humanetech.com\/podcast> is arguably Aza Raskin's penance for inventing doom scrolling.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196853.200649",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "from_url": "https:\/\/www.humanetech.com\/podcast",
                "image_url": "https:\/\/assets-global.website-files.com\/5f0e1294f002b15080e1f2ff\/6205565a5fdd562e495021f6_your-undivided-attention-social-thumbnail.png",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 643872,
                "id": 1,
                "original_url": "https:\/\/www.humanetech.com\/podcast",
                "fallback": "Your Undivided Attention Podcast - Center for Humane Technology",
                "text": "Our podcast features co-hosts Tristan Harris and Aza Raskin discussing technological risks and solutions with whistleblowers, world leaders, and more. Webby honoree.",
                "title": "Your Undivided Attention Podcast - Center for Humane Technology",
                "title_link": "https:\/\/www.humanetech.com\/podcast",
                "service_name": "humanetech.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mZxY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep, I came here to point to Jef Raskin's work.  Just to fully flesh things out, Your Undivided Attention "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.humanetech.com\/podcast"
                            },
                            {
                                "type": "text",
                                "text": " is arguably Aza Raskin's penance for inventing doom scrolling."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659604460.633879",
        "client_msg_id": "2a21aaa3-27b8-4b2f-a2e0-53d06db45525",
        "text": "Makes me think of two items just put on my to-do list:\n• further force reach\n• gaze targeting\nYes, I'm back to working on spacial computing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659543601.664649",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o0LN5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes me think of two items just put on my to-do list:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "further force reach"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "gaze targeting"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I'm back to working on spacial computing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659604525.823749",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1659604616.000000"
        },
        "client_msg_id": "4cbc17fe-4210-44c0-b10a-efb8b8850813",
        "text": "You're going to have to tell us more because at one level one can read this as, \"good old fashioned structured programming that blocks on IO and uses 'files' as capabilities.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p26",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You're going to have to tell us more because at one level one can read this as, \"good old fashioned structured programming that blocks on IO and uses 'files' as capabilities.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Gladly - here's an excerpt from the main file of the Firefly compiler, which is written in Firefly\/ self-hosted. It showcases how effects are controlled via object capabilities, which is essentially just dependency injection taken to the logical conclusion.",
        "files": [
            {
                "id": "F03SDR21804",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U035QJ14NN9",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LnY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gladly - here's an excerpt from the main file of the Firefly compiler, which is written in Firefly\/ self-hosted. It showcases how effects are controlled via object capabilities, which is essentially just dependency injection taken to the logical conclusion."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1659611829.472249",
        "client_msg_id": "0C0F430C-9E30-4703-B97B-9EEE5669DC97",
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9"
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659612039.284449",
        "client_msg_id": "20F681D3-D602-4D3E-9039-18735AC16B1B",
        "text": "The file system, the network, etc. is not globally available as in mainstream languages. The `System` object that is passed to `main` is the only way to get access to these things. It's just a value, so it can be passed on to other functions via their arguments. The FileSystem is a more narrow capability that can only be used to access the file system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The file system, the network, etc. is not globally available as in mainstream languages. The "
                            },
                            {
                                "type": "text",
                                "text": "System",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " object that is passed to "
                            },
                            {
                                "type": "text",
                                "text": "main",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the only way to get access to these things. It's just a value, so it can be passed on to other functions via their arguments. The FileSystem is a more narrow capability that can only be used to access the file system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659612211.061449",
        "client_msg_id": "0E59DCA9-2A71-4C73-A8CA-52E43A5B5FAA",
        "text": "These posts explain the implicit async\/await feature: <https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/|https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/>\nIn addition to that there is a structured concurrency system and CSP-like channels.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "attachments": [
            {
                "from_url": "https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/",
                "ts": 1644670782,
                "image_url": "https:\/\/www.ahnfelt.net\/content\/images\/2022\/02\/async-1.png",
                "image_width": 343,
                "image_height": 250,
                "image_bytes": 97932,
                "service_icon": "https:\/\/www.ahnfelt.net\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/",
                "fallback": "Ahnfelt.net: Async\/await inference in Firefly",
                "text": "Firefly is a new general purpose programming language that tries to achieve convenience and safety at the same time, by using pervasive dependency injection. There is no global access to the file system, the network, other processes or devices. Instead, you access these through a system object that is passed",
                "title": "Async\/await inference in Firefly",
                "title_link": "https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/",
                "service_name": "Ahnfelt.net",
                "fields": [
                    {
                        "value": "Joakim Ahnfelt-Rønne",
                        "title": "Written by",
                        "short": true
                    },
                    {
                        "value": "firefly, programming languages, types",
                        "title": "Filed under",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a2clm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These posts explain the implicit async\/await feature: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/",
                                "text": "https:\/\/www.ahnfelt.net\/async-await-inference-in-firefly\/amp\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "In addition to that there is a structured concurrency system and CSP-like channels."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1659619696.280779",
        "client_msg_id": "c877ccfb-337c-47a2-bd59-bab8072ec40c",
        "text": "I very much agree about the importance of aesthetics, and I often regret that programming languages are often very opinionated about them, though typically without being explicit about it.\n\nAs for conceptual engineering, that's a term I have seen here for the first time, but it looks very close to what I have been thinking about over the last months: the formalization of scientific models. I guess this counts as a special case of conceptual engineering. I'll have to read the book you cite!\n\nHere are my thoughts on formalization, finished just yesterday: <https:\/\/science-in-the-digital-era.khinsen.net\/#Formalization>. And here, quite related, my thoughts on static type systems (which are about capturing concepts as well): <https:\/\/science-in-the-digital-era.khinsen.net\/#Static%20type%20systems>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659540361.863349",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sgUS1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I very much agree about the importance of aesthetics, and I often regret that programming languages are often very opinionated about them, though typically without being explicit about it.\n\nAs for conceptual engineering, that's a term I have seen here for the first time, but it looks very close to what I have been thinking about over the last months: the formalization of scientific models. I guess this counts as a special case of conceptual engineering. I'll have to read the book you cite!\n\nHere are my thoughts on formalization, finished just yesterday: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/science-in-the-digital-era.khinsen.net\/#Formalization"
                            },
                            {
                                "type": "text",
                                "text": ". And here, quite related, my thoughts on static type systems (which are about capturing concepts as well): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/science-in-the-digital-era.khinsen.net\/#Static%20type%20systems"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659625149.730169",
        "client_msg_id": "8C836403-0358-47D2-BB26-86828530D0B1",
        "text": "I really like this idea. Zig’s idea of passing around an allocator made so much sense for a low-level language. Passing around IO feels very similar, but for the needs of a higher level language.\n\nI’m curious about global state. Seems like if I can have global state, I can get around these guarantees. Is that forbidden? Tracked? An idea to deal with later?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/\/CL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like this idea. Zig’s idea of passing around an allocator made so much sense for a low-level language. Passing around IO feels very similar, but for the needs of a higher level language."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI’m curious about global state. Seems like if I can have global state, I can get around these guarantees. Is that forbidden? Tracked? An idea to deal with later?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659625369.964729",
        "client_msg_id": "D22BEDB7-3545-4666-ABD1-9A3FDB8E60A0",
        "text": "Global state is forbidden in Firefly for that reason.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nnb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Global state is forbidden in Firefly for that reason."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659625430.222389",
        "client_msg_id": "71BF4E58-B381-4032-990A-A5880BF878D8",
        "text": "<@UA14TGLTC> What I don’t want is walled garden. There should not be one language privileged above the rest. But I definitely want live code execution and integration. I want that integration to really go both directions, the editor knows things about your program, but your program can also affect the editor in a first class way. \n\nAdmittedly not privileging one language adds some complexity, but I don’t think it is insurmountable. That privilege is one of my problems with both SmallTalk approaches and Observable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196747.344019",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AfxNN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " What I don’t want is walled garden. There should not be one language privileged above the rest. But I definitely want live code execution and integration. I want that integration to really go both directions, the editor knows things about your program, but your program can also affect the editor in a first class way. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nAdmittedly not privileging one language adds some complexity, but I don’t think it is insurmountable. That privilege is one of my problems with both SmallTalk approaches and Observable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659625525.090069",
        "client_msg_id": "4DA455C1-259A-4854-9DB1-224BB752095D",
        "text": "Curious if you have any implementation details or the code posted anywhere. Is it using DriverKit? A kernel extension? Something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659543601.664649",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0=j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Curious if you have any implementation details or the code posted anywhere. Is it using DriverKit? A kernel extension? Something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659625690.076489",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1659625701.000000"
        },
        "client_msg_id": "D9563FE2-DC5C-4692-BCE6-AEDACC69E387",
        "text": "Does System have any in-memory storage abilities? It would be pretty neat to have something exposed there. Often my desire for “global” state is for things like observablity and metrics. Having that available via System would be a nice explicitness.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NRgG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does System have any in-memory storage abilities? It would be pretty neat to have something exposed there. Often my desire for “global” state is for things like observablity and metrics. Having that available via System would be a nice explicitness."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659626073.391099",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1659626408.000000"
        },
        "client_msg_id": "1499CFC7-C351-4FBF-8840-BBB1DE9C26D3",
        "text": "<@UJZS8UUJV> Yeah, I definitely can relate. One of the things thinking about the explicitly has helped me to is to decide if I really want to introduce those concepts. Honestly, that’s one of things I really like about Clojure. I can get away with not introducing concepts. Rust on the other hand (another favorite language of mine) requires some level of concept introduction in every code base.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659540361.863349",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OJP4W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJZS8UUJV"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, I definitely can relate. One of the things thinking about the explicitly has helped me to is to decide if I really want to introduce those concepts. Honestly, that’s one of things I really like about Clojure. I can get away with not introducing concepts. Rust on the other hand (another favorite language of mine) requires some level of concept introduction in every code base."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659626083.686589",
        "client_msg_id": "F8D6270D-57F6-4AC3-B978-BF80A871EC75",
        "text": "It currently only has logging as a \"benign effect\". It's safe because it can't be observed within the language (at least without a capability).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AV\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It currently only has logging as a \"benign effect\". It's safe because it can't be observed within the language (at least without a capability)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659626132.085239",
        "client_msg_id": "01CF4911-99DE-4FB3-9921-8505A7843E55",
        "text": "I'd be interested in suggestions for a safe metrics\/observability api.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wpx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd be interested in suggestions for a safe metrics\/observability api."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659626187.532609",
        "client_msg_id": "bbc8c749-8d2b-40bf-bedc-6098f165fe79",
        "text": "I definitely think it would be worth exploring adding something like a key value store of something in System. Maybe with the values being like clojure's atoms if you want some thread safety.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K77",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I definitely think it would be worth exploring adding something like a key value store of something in System. Maybe with the values being like clojure's atoms if you want some thread safety."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659626196.854729",
        "client_msg_id": "CCAE5D40-2DB1-4F38-BF91-62D65D6477CB",
        "text": "You can pass mutable objects around at your hearts content though, it's only global mutability that's disallowed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6\/Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can pass mutable objects around at your hearts content though, it's only global mutability that's disallowed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659626261.286959",
        "client_msg_id": "ff501955-43a2-4ee3-ab58-35f805e17e26",
        "text": "Ahh, yeah. So used to immutability by default that is where my brain was going. Guess if you have mutability everywhere you don't technically need that",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IltQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahh, yeah. So used to immutability by default that is where my brain was going. Guess if you have mutability everywhere you don't technically need that"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035QJ14NN9",
        "type": "message",
        "ts": "1659626396.316229",
        "client_msg_id": "64DA210B-0CE4-4A61-8A23-CAE1A0F9D0E9",
        "text": "Everything is immutable by default, but you can explicitly make individual fields and variables mutable",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "db778188df26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-05\/3210121425649_db778188df26a0e022f5_72.jpg",
            "first_name": "Joakim",
            "real_name": "Joakim Ahnfelt-Rønne",
            "display_name": "Joakim Ahnfelt-Rønne",
            "team": "T5TCAFTA9",
            "name": "joakim.ahnfelt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659555969.214989",
        "parent_user_id": "U035QJ14NN9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4E6UP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Everything is immutable by default, but you can explicitly make individual fields and variables mutable"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659626631.323799",
        "client_msg_id": "D33DDEAE-AA7D-4035-8520-D8E60C7C5FE2",
        "text": "<@UJBAJNFLK> Definitely agree formalization is a subset of Conceptual Engineering. Also really like your thoughts on domain specific type systems and gradually layering on types. I’ve done a few very basic proofs in idris using the type system. But the proof I actually understood the most was when I used idris without all the fancy types to walk through Godel’s incompleteness theorems. My code will type check and not be a correct proof, but I understood it so much more. And I had a much better time writing it. \n\nI often find when I am reading analytic philosophy I wish I had a nice programming tool for exploring the various formal arguments I encounter.\n\n<https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/Godel.idr|https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/Godel.idr>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659540361.863349",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DfU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Definitely agree formalization is a subset of Conceptual Engineering. Also really like your thoughts on domain specific type systems and gradually layering on types. I’ve done a few very basic proofs in idris using the type system. But the proof I actually understood the most was when I used idris without all the fancy types to walk through Godel’s incompleteness theorems. My code will type check and not be a correct proof, but I understood it so much more. And I had a much better time writing it. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI often find when I am reading analytic philosophy I wish I had a nice programming tool for exploring the various formal arguments I encounter."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/Godel.idr",
                                "text": "https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/Godel.idr"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1659627712.154059",
        "client_msg_id": "85eb5c41-8051-4ed2-a76c-0d595b8e59bf",
        "text": "<@UK3LH8CF5> Not privileging any one language is difficult mainly because most languages we have today were designed to be islands. Building bridges between them is hard work and probably not much fun either. The most advanced bridge building infrastructure I know is Graal\/Truffle, but it's also the kind of monster code base I wouldn't be happy to depend on. I have seen a demo of TruffleSqueak used as a development environment for Python, which was quite impressive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196747.344019",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sKvp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " Not privileging any one language is difficult mainly because most languages we have today were designed to be islands. Building bridges between them is hard work and probably not much fun either. The most advanced bridge building infrastructure I know is Graal\/Truffle, but it's also the kind of monster code base I wouldn't be happy to depend on. I have seen a demo of TruffleSqueak used as a development environment for Python, which was quite impressive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1659628393.045299",
        "client_msg_id": "d352b987-8f66-4941-acd1-6cf0a87a98c8",
        "text": "I have some ideas. But they are admittedly sketchy right now. Focusing on one language will definitely let you go deeper. I'd be happy with the tradeoff of getting less for any one given language in order to support more. \n\nAgree on not relying on graal. I think there are ways of feeling like you have deeper language integration than you do by combining static information (language server protocol) and printf style output with rich graphical support. \n\nBut I also think there are promises in approach like those taken by things like rr and <http:\/\/replay.io|replay.io>. Even ignoring the time travel, capturing systems calls can be very powerful. \n\nVery simple example. Imagine you can have a browser devtools network tab like experience for all your languages. There is no technical reason you couldn't do this today. There are a number of different ways to get that kind of information (proxy, sys calls, ebpf, etc).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196747.344019",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qB2cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have some ideas. But they are admittedly sketchy right now. Focusing on one language will definitely let you go deeper. I'd be happy with the tradeoff of getting less for any one given language in order to support more. \n\nAgree on not relying on graal. I think there are ways of feeling like you have deeper language integration than you do by combining static information (language server protocol) and printf style output with rich graphical support. \n\nBut I also think there are promises in approach like those taken by things like rr and "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/replay.io",
                                "text": "replay.io"
                            },
                            {
                                "type": "text",
                                "text": ". Even ignoring the time travel, capturing systems calls can be very powerful. \n\nVery simple example. Imagine you can have a browser devtools network tab like experience for all your languages. There is no technical reason you couldn't do this today. There are a number of different ways to get that kind of information (proxy, sys calls, ebpf, etc)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U02E4DAQGSZ",
                    "UJBAJNFLK",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "text": "Current state of my note-taking app\n\nThanks a lot to <@U013ZLJARC7> and <https:\/\/www.youtube.com\/watch?v=A0TafHXszgM> for guidelines on the command palette.",
        "files": [
            {
                "id": "F03SE0GLDNF",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tdrfY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Current state of my note-taking app\n\nThanks a lot to "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=A0TafHXszgM"
                            },
                            {
                                "type": "text",
                                "text": " for guidelines on the command palette."
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "text": "Scrolling file at a time on the infinite 2D surface of my note-taking app.\n\nThe problem I was trying to solve was that I'd scroll down some ways, open a new file and find the new, short column way off screen above. Now I can bring the new file on screen with with one more, `top` command. I'm still not quite happy with this solution. I don't want to always automatically jump back up to the top of the surface; that feels more busy than the feeling of solidity\/reliability I'm going for.",
            "files": [
                {
                    "id": "F03RLER9JR3",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "UCUSW7WVD",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "GKcte",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Scrolling file at a time on the infinite 2D surface of my note-taking app.\n\nThe problem I was trying to solve was that I'd scroll down some ways, open a new file and find the new, short column way off screen above. Now I can bring the new file on screen with with one more, "
                                },
                                {
                                    "type": "text",
                                    "text": "top",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " command. I'm still not quite happy with this solution. I don't want to always automatically jump back up to the top of the surface; that feels more busy than the feeling of solidity\/reliability I'm going for."
                                }
                            ]
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1659196853.200649",
            "edited": {
                "user": "UCUSW7WVD",
                "ts": "1659197029.000000"
            },
            "client_msg_id": "40444dd8-76d3-4e8f-8cd0-1a951a905da5",
            "thread_ts": "1659196853.200649",
            "reply_count": 22,
            "reply_users_count": 5,
            "latest_reply": "1660283500.875479",
            "reply_users": [
                "UK3LH8CF5",
                "UCUSW7WVD",
                "UA14TGLTC",
                "U0123H7JRDM",
                "U013ZLJARC7"
            ],
            "replies": [
                {
                    "user": "UK3LH8CF5",
                    "ts": "1659197204.180369"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1659207440.714949"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659209563.372979"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1659209864.637129"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659210001.836889"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1659604057.095779"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659640583.927169"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659640844.331529"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659916136.523099"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659916372.194589"
                },
                {
                    "user": "U0123H7JRDM",
                    "ts": "1659951262.916529"
                },
                {
                    "user": "U013ZLJARC7",
                    "ts": "1659957724.603499"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659968121.837669"
                },
                {
                    "user": "U013ZLJARC7",
                    "ts": "1659971029.275879"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1659975489.474999"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660155926.652159"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660155934.885769"
                },
                {
                    "user": "U013ZLJARC7",
                    "ts": "1660203740.482769"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660203861.715409"
                },
                {
                    "user": "U013ZLJARC7",
                    "ts": "1660205802.611839"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660283416.176209"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1660283500.875479"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1659640583.927169",
        "client_msg_id": "bc48dda1-1831-45dd-b2a6-12fb75ccdcc6",
        "thread_ts": "1659196853.200649",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1659640844.331529",
        "client_msg_id": "59054255-4ab1-4df4-84f7-a42ea743d625",
        "text": "Things of note:\n\n• Operates on a hard-coded directory of text files.\n• No overlapping, no tiling, just an infinite 2D surface of columns. Commands open new columns.\n• Wordstar-style menu up top of important commands in current context, and their shortcuts.\n• Command palette at top left that filters commands available in current context.\n• Files\/nodes can have links. Links can form graphs, as the picture shows (original: <http:\/\/www.maplefish.com\/todd\/papers\/Experiences.html> via <https:\/\/www.notion.so\/A-Pattern-Language-for-Interfaces-c2f88d6b16d84293995c006042e79d88> by <@UMWF81HTP>)\n• Links have labels (next\/previous by default).\n• Graph-traversal commands can take an argument (next\/previous by default) of the edge label you want to follow.\n• The `add` command adds an edge immediately to the current node, while `append` traverses the edge repeatedly to the end, then adds.\n• `step` navigates along an edge from the current node and opens it in a new column, `unroll` traverses the edge repeatedly to the end and collects all nodes into a single column.\n`add` : `append` :: `step` : `unroll`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659196853.200649",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "31DWv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Things of note:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Operates on a hard-coded directory of text files."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "No overlapping, no tiling, just an infinite 2D surface of columns. Commands open new columns."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Wordstar-style menu up top of important commands in current context, and their shortcuts."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Command palette at top left that filters commands available in current context."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Files\/nodes can have links. Links can form graphs, as the picture shows (original: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.maplefish.com\/todd\/papers\/Experiences.html"
                                    },
                                    {
                                        "type": "text",
                                        "text": " via "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.notion.so\/A-Pattern-Language-for-Interfaces-c2f88d6b16d84293995c006042e79d88"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "UMWF81HTP"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Links have labels (next\/previous by default)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Graph-traversal commands can take an argument (next\/previous by default) of the edge label you want to follow."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The "
                                    },
                                    {
                                        "type": "text",
                                        "text": "add",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " command adds an edge immediately to the current node, while "
                                    },
                                    {
                                        "type": "text",
                                        "text": "append",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " traverses the edge repeatedly to the end, then adds."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "step",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " navigates along an edge from the current node and opens it in a new column, "
                                    },
                                    {
                                        "type": "text",
                                        "text": "unroll",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " traverses the edge repeatedly to the end and collects all nodes into a single column."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "add",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " : "
                            },
                            {
                                "type": "text",
                                "text": "append",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " :: "
                            },
                            {
                                "type": "text",
                                "text": "step",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " : "
                            },
                            {
                                "type": "text",
                                "text": "unroll",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    }
]