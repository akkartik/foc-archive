[
    {
        "user": "URUHW0TB3",
        "type": "message",
        "ts": "1616656142.043600",
        "client_msg_id": "06654af3-0c69-4702-8175-17927cdcc822",
        "text": "\"Dependent types in database\" <http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.43.3325&amp;rep=rep1&amp;type=pdf><https:\/\/t.co\/t1kDCWJ5PE?amp=1|…> uses ideas in dependent type theory to reformulate &amp; cleanup concepts in relational databases. Have anyone thought about related stuff?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaab2c763bc6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aab2c763bc6bf4911f7843ed9238b81c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "molikto",
            "display_name": "molikto",
            "team": "T5TCAFTA9",
            "name": "molikto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1616656142.043600",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1616723550.050100",
        "reply_users": [
            "U016VUZGUUQ",
            "UT60XSVCN",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1616681415.043700"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1616712503.049800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1616723550.050100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Dependent types in database\" "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/citeseerx.ist.psu.edu\/viewdoc\/download?doi=10.1.1.43.3325&rep=rep1&type=pdf"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/t.co\/t1kDCWJ5PE?amp=1",
                                "text": "…"
                            },
                            {
                                "type": "text",
                                "text": " uses ideas in dependent type theory to reformulate & cleanup concepts in relational databases. Have anyone thought about related stuff?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1616681415.043700",
        "client_msg_id": "84db110c-f170-40f2-bcd2-432316ca777b",
        "text": "Interesting. I have been thinking a lot about the application of dependent types to databases and data modeling in general, but I guess I had forgotten about the proof objects, so that was a good reminder for sure. I've been thinking about dependent tables as functions from finite atomic types to rows, rather than the still-rather-set-shaped formulation in this paper, because I think it's important to make identity explicit (and I'm hoping to use the IDs as capabilities).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1616656142.043600",
        "parent_user_id": "URUHW0TB3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. I have been thinking a lot about the application of dependent types to databases and data modeling in general, but I guess I had forgotten about the proof objects, so that was a good reminder for sure. I've been thinking about dependent tables as functions from finite atomic types to rows, rather than the still-rather-set-shaped formulation in this paper, because I think it's important to make identity explicit (and I'm hoping to use the IDs as capabilities)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01L1TTFP62",
        "type": "message",
        "ts": "1616711237.049600",
        "client_msg_id": "D8738357-2717-4D65-B6B9-D0AB31D61C02",
        "text": "Thanks <@UEDDR6L5Q>! I have been aware of GraphViz but was worried that its algorithms are too generic. That paper you linked looks interesting indeed.\n\nI have written a lot of LabVIEW in my career, and in thinking about my own visual language, I would love to have a layout algorithm that basically copies my own internal algorithm that I follow to have beautifully laid out data flow code (minimal wire crossings, “clothesline's, left to right flow, spacing, etc). But there’s a huge gap between the dynamic algorithm I use to getting one on paper, so to speak.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "dc9ee60375b5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-29\/1687447231174_dc9ee60375b5ce940578_72.png",
            "first_name": "",
            "real_name": "bmitc",
            "display_name": "bmitc",
            "team": "T5TCAFTA9",
            "name": "bmitchell33",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1614902259.102900",
        "parent_user_id": "U01L1TTFP62",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RPRX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UEDDR6L5Q"
                            },
                            {
                                "type": "text",
                                "text": "! I have been aware of GraphViz but was worried that its algorithms are too generic. That paper you linked looks interesting indeed.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI have written a lot of LabVIEW in my career, and in thinking about my own visual language, I would love to have a layout algorithm that basically copies my own internal algorithm that I follow to have beautifully laid out data flow code (minimal wire crossings, “clothesline's, left to right flow, spacing, etc). But there’s a huge gap between the dynamic algorithm I use to getting one on paper, so to speak."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1616712503.049800",
        "client_msg_id": "14326298-c56f-4399-9234-9755e1efddf0",
        "text": "Not really dependent types I think, but this might be interesting: <https:\/\/github.com\/agentm\/project-m36|https:\/\/github.com\/agentm\/project-m36>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1616656142.043600",
        "parent_user_id": "URUHW0TB3",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "agentm\/project-m36",
                "title_link": "https:\/\/github.com\/agentm\/project-m36",
                "text": "Project: M36 Relational Algebra Engine. Contribute to agentm\/project-m36 development by creating an account on GitHub.",
                "fallback": "GitHub: agentm\/project-m36",
                "thumb_url": "https:\/\/avatars.githubusercontent.com\/u\/690538?s=400&v=4",
                "from_url": "https:\/\/github.com\/agentm\/project-m36",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/agentm\/project-m36"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KfC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not really dependent types I think, but this might be interesting: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/agentm\/project-m36",
                                "text": "https:\/\/github.com\/agentm\/project-m36"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1616723550.050100",
        "client_msg_id": "352742c7-0550-4b75-a037-92f3eff323df",
        "text": "Yes, but not like this.  Will read.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1616656142.043600",
        "parent_user_id": "URUHW0TB3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H9u3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, but not like this.  Will read."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]