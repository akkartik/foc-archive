[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1751182725.940909",
        "client_msg_id": "5f0d6bd5-de41-4efe-b75f-34cca5e69cc6",
        "text": "It's not quite `curl | sh` . The closest moral equivalent I see is using `npm` . Installing Ultralisp is low-risk, but there's a subsequent risk in installing packages _from_ Ultralisp, which is a mostly uncurated software catalog. `http`  then seems like a minor additional risk. My understanding is that it's due to Quicklisp not handling encryption for some reason. So if it's `http`  you are worrying about, you shouldn't be using Quicklisp at all. Which is one reason why my main Lisp development environment is managed by Guix.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750915144.806939",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U73N+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not quite "
                            },
                            {
                                "type": "text",
                                "text": "curl | sh",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . The closest moral equivalent I see is using "
                            },
                            {
                                "type": "text",
                                "text": "npm",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . Installing Ultralisp is low-risk, but there's a subsequent risk in installing packages "
                            },
                            {
                                "type": "text",
                                "text": "from",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Ultralisp, which is a mostly uncurated software catalog. "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  then seems like a minor additional risk. My understanding is that it's due to Quicklisp not handling encryption for some reason. So if it's "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  you are worrying about, you shouldn't be using Quicklisp at all. Which is one reason why my main Lisp development environment is managed by Guix."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1751224227.737519",
        "client_msg_id": "21cff34e-0b36-4fe0-9845-d5a53af7934e",
        "text": "I'm really happy with <https:\/\/www.patreon.com\/posts\/132758653|this month's FoC bonus episode> discussion. Jimmy and I talk about literal values in code (string, numbers, arrays, etc), looking at them as _affordances_, trying to think about the human-facing elements of their design, as distinct from (but related to) how they serve as syntax, how they get parsed, what they mean at runtime, etc. We also ruminate on literal values in various flavours of visual programming.\n\nYou do need to subscribe in order to hear the episode ($5\/mo), but by doing so you're also supporting the time\/effort it takes us to make both these bonus episodes and the <https:\/\/futureofcoding.org\/episodes\/|main show>. So thank you to everyone who does support this effort, and hopefully you find this discussion invigorating.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ButI+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm really happy with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.patreon.com\/posts\/132758653",
                                "text": "this month's FoC bonus episode"
                            },
                            {
                                "type": "text",
                                "text": " discussion. Jimmy and I talk about literal values in code (string, numbers, arrays, etc), looking at them as "
                            },
                            {
                                "type": "text",
                                "text": "affordances",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", trying to think about the human-facing elements of their design, as distinct from (but related to) how they serve as syntax, how they get parsed, what they mean at runtime, etc. We also ruminate on literal values in various flavours of visual programming.\n\nYou do need to subscribe in order to hear the episode ($5\/mo), but by doing so you're also supporting the time\/effort it takes us to make both these bonus episodes and the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/",
                                "text": "main show"
                            },
                            {
                                "type": "text",
                                "text": ". So thank you to everyone who does support this effort, and hopefully you find this discussion invigorating."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U07PYD02V2S",
                    "U06SS0DHZD1",
                    "U02E4DAQGSZ",
                    "U08LU2QRWB0",
                    "UA14TGLTC"
                ],
                "count": 5
            },
            {
                "name": "cake",
                "users": [
                    "U05UF5P8PT8",
                    "U85HCL7JP",
                    "U02E4DAQGSZ",
                    "U05UK5T7LPP"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1751233496.940149",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1751233627.000000"
        },
        "client_msg_id": "e7075634-6b24-4e4d-894b-909bf1b4768f",
        "text": "Ugh, you're right. I see now that the transcripts on <https:\/\/www.quicklisp.org\/beta\/#installation|the Quicklisp frontpage> involve getting from `http` URLs. This is going to require rethinking my Quicklisp setup..\n\n(I personally don't see much difference between `curl |sh` and the npm eco-system. But they do seem to benefit some from at least pervasively using https. I like the idea of supporting `http` and tend to be on balance slightly against https. But there have been too many cases of intermediaries inserting data into payloads to justify downloading code over `http`, IMO.\n\nMinor story: back when I launched <https:\/\/akkartik.name\/lines.html|lines.love> in Mar 2022, akkartik.name used to be served over just `http`. So I hosted my download link at <https:\/\/tilde.club>. When I realized certbot was now push-button easy, I added `https` as well, but made it a point to keep `http` working. But now I notice <http:\/\/akkartik.name> redirects to <https:\/\/akkartik.name> :grimacing: Gotta debug that some time..)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750915144.806939",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49qgO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ugh, you're right. I see now that the transcripts on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.quicklisp.org\/beta\/#installation",
                                "text": "the Quicklisp frontpage"
                            },
                            {
                                "type": "text",
                                "text": " involve getting from "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " URLs. This is going to require rethinking my Quicklisp setup..\n\n(I personally don't see much difference between "
                            },
                            {
                                "type": "text",
                                "text": "curl |sh",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the npm eco-system. But they do seem to benefit some from at least pervasively using https. I like the idea of supporting "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and tend to be on balance slightly against https. But there have been too many cases of intermediaries inserting data into payloads to justify downloading code over "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", IMO.\n\nMinor story: back when I launched "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/akkartik.name\/lines.html",
                                "text": "lines.love",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": " in Mar 2022, akkartik.name used to be served over just "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So I hosted my download link at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tilde.club"
                            },
                            {
                                "type": "text",
                                "text": ". When I realized certbot was now push-button easy, I added "
                            },
                            {
                                "type": "text",
                                "text": "https",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as well, but made it a point to keep "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " working. But now I notice "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name"
                            },
                            {
                                "type": "text",
                                "text": " redirects to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/akkartik.name"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "grimacing",
                                "unicode": "1f62c"
                            },
                            {
                                "type": "text",
                                "text": " Gotta debug that some time..)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1751233796.137729",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1751233818.000000"
        },
        "client_msg_id": "586bc386-f7a0-447b-a801-c6481d968e0f",
        "text": "Zooming out on my security stance:\n• I care very much about minimizing dependencies and knowing where I get them from. I mistrust overly large and popular vendors, as well as tiny and anonymous vendors. I want to know more about who the people are behind a program or library.\n• Given that concern about people, I also care about making sure random large\/popular or tiny\/anonymous folks can't get between me and the people I choose to enter into relationships with.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750915144.806939",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rq3bW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zooming out on my security stance:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I care very much about minimizing dependencies and knowing where I get them from. I mistrust overly large and popular vendors, as well as tiny and anonymous vendors. I want to know more about who the people are behind a program or library."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Given that concern about people, I also care about making sure random large\/popular or tiny\/anonymous folks can't get between me and the people I choose to enter into relationships with."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1751264834.610019",
        "client_msg_id": "82da50a6-4174-4620-98af-8c0fbfa65726",
        "text": "I am ambiguous about `http`  vs. `https`  as well. Bot-in-the-middle attacks are real enough to worry about downloading code via `http` . But `https`  implies serious dependencies on Big Tech. Let's Encrypt is what makes `https`  accessible to most of us small players. But it's backed by the big ones, and they can pull out any time once `http`  support in browsers and other tools starts to disappear or become unusable.\n\nGuix (and others) provide a better solution to code trust: it's not based on the source, but on cryptographic verification of the code itself. Nothing fancier than checksums, but applied systematically across the whole dependency chain, including build scripts.\n\nOf course, no technology is more secure than the people who run it. It is conceivable that someone puts malware into popular code (the `xz` story), and that can happen at all levels, including Guix' build scripts. Perhaps the best protection of the Common Lisp ecosystem is its small size: it's simply not attractive as a medium to spread malware.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750915144.806939",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HJJrj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am ambiguous about "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  vs. "
                            },
                            {
                                "type": "text",
                                "text": "https",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  as well. Bot-in-the-middle attacks are real enough to worry about downloading code via "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . But "
                            },
                            {
                                "type": "text",
                                "text": "https",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  implies serious dependencies on Big Tech. Let's Encrypt is what makes "
                            },
                            {
                                "type": "text",
                                "text": "https",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  accessible to most of us small players. But it's backed by the big ones, and they can pull out any time once "
                            },
                            {
                                "type": "text",
                                "text": "http",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  support in browsers and other tools starts to disappear or become unusable.\n\nGuix (and others) provide a better solution to code trust: it's not based on the source, but on cryptographic verification of the code itself. Nothing fancier than checksums, but applied systematically across the whole dependency chain, including build scripts.\n\nOf course, no technology is more secure than the people who run it. It is conceivable that someone puts malware into popular code (the "
                            },
                            {
                                "type": "text",
                                "text": "xz",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " story), and that can happen at all levels, including Guix' build scripts. Perhaps the best protection of the Common Lisp ecosystem is its small size: it's simply not attractive as a medium to spread malware."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]