[
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1672471217.151219",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1672471565.000000"
        },
        "client_msg_id": "c4116a70-a5ba-4dc8-8215-96d7876d30ec",
        "text": "Traditional models of communication between devices, processes, and threads include message-passing, remote procedure calls, and shared memory. Here's a model I haven't seen before: _shared game-playing_.\n\nHow it would work:\n• The rules for a \"game\" of some kind are expressed as a code library... or whatever representation works best.\n• A set of \"players\" (processes or threads) express interest in playing the game with each other. (somehow...)\n• The players communicate with each other by interacting with the game (in accordance with its rules), and receive information about each other's actions by observing how the game state has changed.\nThe \"game\" could be an _actual_ game like chess or Factorio (implemented via peer-to-peer communication), or it could be a standardized protocol like HTTP, FTP, or (most commonly) it could be an application-specific protocol that would normally be implemented via message-passing or RPC.\n\nImagine if this were the only model of communication that a programming language exposes. What if it were the \"building block\" of communication — the only way to build concurrent systems? I think it's an intriguing thought :thinking_face:. I'm surprised I haven't heard this model proposed before.\n\n(This post was inspired by <https:\/\/syndicate-lang.org\/|Syndicate>, which is an actor-based PL that eschews message-passing and RPC for the idea of a \"data-space\" that actors use to exchange information. But unlike my proposal above, Syndicate's data-spaces don't contain _rules_, and thus cannot be used to model video games or communication protocols.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1672471217.151219",
        "reply_count": 39,
        "reply_users_count": 7,
        "latest_reply": "1672666753.552109",
        "reply_users": [
            "UBN9AFS0N",
            "UCGAK10LS",
            "UEBG0NPDK",
            "UE1JQM9HQ",
            "U016VUZGUUQ",
            "UE6EFEPTQ",
            "U0112C10V4Y"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1672482469.842989"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672482638.391559"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672482730.031719"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672483492.291539"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672492198.593029"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1672496658.754979"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1672524583.949789"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672543825.966709"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1672544642.820549"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672545147.902239"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545241.691389"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545280.867449"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545311.510979"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672545425.369189"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545498.103459"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545636.918759"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672545660.879649"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672545742.608069"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545885.328309"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672545905.299169"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672546046.165909"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672546365.303359"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672546491.273339"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672546535.171139"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672546637.627089"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672546679.924809"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672546942.230589"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672547094.785329"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672547315.068039"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1672579347.339879"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672581794.183839"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672581822.773259"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672581900.505899"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1672581916.166729"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1672609772.280589"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672612206.844169"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1672660135.808759"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1672662324.435639"
            },
            {
                "user": "U0112C10V4Y",
                "ts": "1672666753.552109"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4WKX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional models of communication between devices, processes, and threads include message-passing, remote procedure calls, and shared memory. Here's a model I haven't seen before: "
                            },
                            {
                                "type": "text",
                                "text": "shared game-playing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nHow it would work:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The rules for a \"game\" of some kind are expressed as a code library... or whatever representation works best."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A set of \"players\" (processes or threads) express interest in playing the game with each other. (somehow...)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The players communicate with each other by interacting with the game (in accordance with its rules), and receive information about each other's actions by observing how the game state has changed."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe \"game\" could be an "
                            },
                            {
                                "type": "text",
                                "text": "actual",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " game like chess or Factorio (implemented via peer-to-peer communication), or it could be a standardized protocol like HTTP, FTP, or (most commonly) it could be an application-specific protocol that would normally be implemented via message-passing or RPC.\n\nImagine if this were the only model of communication that a programming language exposes. What if it were the \"building block\" of communication — the only way to build concurrent systems? I think it's an intriguing thought "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": ". I'm surprised I haven't heard this model proposed before.\n\n(This post was inspired by "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/syndicate-lang.org\/",
                                "text": "Syndicate"
                            },
                            {
                                "type": "text",
                                "text": ", which is an actor-based PL that eschews message-passing and RPC for the idea of a \"data-space\" that actors use to exchange information. But unlike my proposal above, Syndicate's data-spaces don't contain "
                            },
                            {
                                "type": "text",
                                "text": "rules",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and thus cannot be used to model video games or communication protocols.)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]