[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1569399176.455300",
        "client_msg_id": "51b240d0-3ca2-41b4-99df-3d32e55bbf97",
        "text": "<@UEQ6M68H0>\nYes, and that's the difference between DSLs (still mostly declarative) and what I described in my youth as DTILs - Domain and Target _Independent_ Languages.\n\nWhich I imagined as declarative simply because it seemed that imperative languages only exist to keep machines happy, not humans.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+GRpA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": "\nYes, and that's the difference between DSLs (still mostly declarative) and what I described in my youth as DTILs - Domain and Target "
                            },
                            {
                                "type": "text",
                                "text": "Independent",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Languages.\n\nWhich I imagined as declarative simply because it seemed that imperative languages only exist to keep machines happy, not humans."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "channel_join",
        "user": "UEZQXJK9V",
        "text": "<@UEZQXJK9V> has joined the channel",
        "inviter": "UML4ZEKDK",
        "type": "message",
        "ts": "1569406029.455600"
    },
    {
        "user": "UML4ZEKDK",
        "type": "message",
        "ts": "1569406456.455700",
        "client_msg_id": "4fbb4cb5-c031-4d5e-84da-899685c638a3",
        "text": "Thanks for sharing this, it looks quite relevant to the direction I am working towards as well. :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "edc1c9acb12d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-05-22\/5286358617767_edc1c9acb12dfa7d1a20_72.jpg",
            "first_name": "J.",
            "real_name": "J. Ryan Stinnett",
            "display_name": "J. Ryan Stinnett",
            "team": "T5TCAFTA9",
            "name": "jryans",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569275859.447200",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hFHC9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for sharing this, it looks quite relevant to the direction I am working towards as well. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1569411746.455900",
        "client_msg_id": "0fb79893-86ab-47e6-ba0c-21524806e095",
        "text": "<@UMVFWPZ36> oh, you made language designer? Awesome!\n\nSimilar project is why I’m asking, I’m making a tree based software editor and am wondering which data definition languages should I add as “first class support”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HF\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": " oh, you made language designer? Awesome!\n\nSimilar project is why I’m asking, I’m making a tree based software editor and am wondering which data definition languages should I add as “first class support”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1569411788.456100",
        "client_msg_id": "e40b25e5-15c0-4784-b65a-b7c684f5099c",
        "text": "I just noticed <http:\/\/treenotation.org|treenotation.org> is actually a thing, glad to see there’s more people working on this. trees are :heart:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vB3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just noticed "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/treenotation.org",
                                "text": "treenotation.org"
                            },
                            {
                                "type": "text",
                                "text": " is actually a thing, glad to see there’s more people working on this. trees are "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1569429296.456500",
        "client_msg_id": "0792741a-8e80-47c6-b9b0-a8866251717d",
        "text": "I hadn't connected the clever\/hackiness ideas with mutability, FP etc. Maybe there is something there. I definitely feel the pressure between 'simple but weak' and 'complex (uses abstractions) but powerful'. BTW, what does 'hacky' mean exactly? Sounds like something that is super good in one aspect (quick to implement) but worse in another aspect (hard to maintain or understand \/ error prone \/ inconsistent with the rest of the design). It's a specific trade-off that we make - but we make trade-offs all the time. So some trade-offs are classified as hacks?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qxbv+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hadn't connected the clever\/hackiness ideas with mutability, FP etc. Maybe there is something there. I definitely feel the pressure between 'simple but weak' and 'complex (uses abstractions) but powerful'. BTW, what does 'hacky' mean exactly? Sounds like something that is super good in one aspect (quick to implement) but worse in another aspect (hard to maintain or understand \/ error prone \/ inconsistent with the rest of the design). It's a specific trade-off that we make - but we make trade-offs all the time. So some trade-offs are classified as hacks?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1569429937.456700",
        "client_msg_id": "ca4b168f-135b-475f-a6ce-d26636a1bb20",
        "text": "<@UL3CJ7YKC> an example would help.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RPx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " an example would help."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1569431910.471200",
        "client_msg_id": "44BD10E8-79D1-4B11-89D7-00E74C0D3AC8",
        "text": "For example: I know some part of code can be reached theoretically multiple ways which should be handled on the proper layer of abstraction. But I also know via other constraints (eg.: knowing the navigation options in a menu), that some events might just happen in a given order. \n\nTheoretically I could write up beautiful invariants on that to express these constraints, but the menu itself can change so in that case I had to prove the same thing over an over again and it is not obvious how to do that if not using a dependent typed language. Even with that, often I \"just know\" which ordering of events are possible and which are not. Of course it is really easy to forget about a case, but via hand-crafted tests we all assume we enumerate \"all the important\" cases and that might be a problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xuIa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example: I know some part of code can be reached theoretically multiple ways which should be handled on the proper layer of abstraction. But I also know via other constraints (eg.: knowing the navigation options in a menu), that some events might just happen in a given order. \n\nTheoretically I could write up beautiful invariants on that to express these constraints, but the menu itself can change so in that case I had to prove the same thing over an over again and it is not obvious how to do that if not using a dependent typed language. Even with that, often I \"just know\" which ordering of events are possible and which are not. Of course it is really easy to forget about a case, but via hand-crafted tests we all assume we enumerate \"all the important\" cases and that might be a problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1569432117.477500",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1569432237.000000"
        },
        "client_msg_id": "37786D6B-47C1-43E1-9CCA-340B48F91A24",
        "text": "Who has the incentive to write widely reusable code? What company would approve the costs to make code that would mostly be reused elsewhere? What academic community rewards code reuse as it does paper references? Which developers are willing to pay enough for libraries to to cover their development costs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568748321.207400",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=rpR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Who has the incentive to write widely reusable code? What company would approve the costs to make code that would mostly be reused elsewhere? What academic community rewards code reuse as it does paper references? Which developers are willing to pay enough for libraries to to cover their development costs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1569432802.488600",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1569432856.000000"
        },
        "client_msg_id": "E42AFBEC-4E4C-46D2-8A3D-26CDC6849D66",
        "text": "<@U8A5MS6R1> Thats a nice question: what is hacky? \n\nTo me it seems to be a piece of code which does not respect \"the layers\" of codebase and uses a shortcut.\n\nWith that we can \"skip\" the \"full, proper\" implemententation of the 2 layers we are connecting - or all\/any intermediate layers.\n\nSometimes a hack means: the existing implementation and abstractions are out of date, but without a rewrite, without respecting the higher abstractness of the problem (and without the possibility of introducing a much broader set of problems harder to reason about and implement): we can cheat and the existing rules and abstractions here and there.\n\nMaybe this is a little bit too small example but the \"for\" of \"procedural\" is hacky compared to \"functional\"s \"map\", but it has the 2 magic keywords: break; and continue \"map\" itself lacks of and must be mimiced on a higher level.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HLO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Thats a nice question: what is hacky? \n\nTo me it seems to be a piece of code which does not respect \"the layers\" of codebase and uses a shortcut.\n\nWith that we can \"skip\" the \"full, proper\" implemententation of the 2 layers we are connecting - or all\/any intermediate layers.\n\nSometimes a hack means: the existing implementation and abstractions are out of date, but without a rewrite, without respecting the higher abstractness of the problem (and without the possibility of introducing a much broader set of problems harder to reason about and implement): we can cheat and the existing rules and abstractions here and there.\n\nMaybe this is a little bit too small example but the \"for\" of \"procedural\" is hacky compared to \"functional\"s \"map\", but it has the 2 magic keywords: break; and continue \"map\" itself lacks of and must be mimiced on a higher level."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1569433361.489900",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1569433374.000000"
        },
        "client_msg_id": "4ADBAABE-832C-4267-B82D-F1BC7BE12E14",
        "text": "you could always wild out in function-land and use callbags or transducers to get some of those keywords back :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YCffk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could always wild out in function-land and use callbags or transducers to get some of those keywords back "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1569434608.490200",
        "client_msg_id": "dbd2d61b-c52a-4274-8973-6e8b4613b396",
        "text": "<@UNBPP291C> cool! Do you have a link to play with yet? I am quite obsessed with tree structures and think there is huge unexplored terrain for new types of editing experiences",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Tep",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNBPP291C"
                            },
                            {
                                "type": "text",
                                "text": " cool! Do you have a link to play with yet? I am quite obsessed with tree structures and think there is huge unexplored terrain for new types of editing experiences"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I think in a well-designed system, there is as little tension as possible between tools that are well-shaped for narrower problems, and the existence of primitives which are general. I am adopting the philosophy in my system (which is for general purpose end user programming) that narrow tools are built out of general primitives. Encapsulation prevents the user from having to worry about the internal details of the constructed narrow tools, but the generality of the elementary primitives avoids the \"patchwork quilt\" problem that <@UEQ6M68H0> nails.\n\nI think a lot (really most, probably) end-user systems make the mistake of eschewing simple primitives in favor of a large set of narrow tools. IMO there is so much wrong with that approach it invites an entire essay, but I think some sense of it has been captured here— the user is  burdened with having to internalize many more primitives, but is not empowered to make their own (which they can then encapsulate, share, and forget about the internal details).\n\nTo return to the original example, my system has both `sum` and generic iteration. Sum would look like this:",
        "files": [
            {
                "id": "FNRA480J1",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U6FKVSVCK",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2k\/Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think in a well-designed system, there is as little tension as possible between tools that are well-shaped for narrower problems, and the existence of primitives which are general. I am adopting the philosophy in my system (which is for general purpose end user programming) that narrow tools are built out of general primitives. Encapsulation prevents the user from having to worry about the internal details of the constructed narrow tools, but the generality of the elementary primitives avoids the \"patchwork quilt\" problem that "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " nails.\n\nI think a lot (really most, probably) end-user systems make the mistake of eschewing simple primitives in favor of a large set of narrow tools. IMO there is so much wrong with that approach it invites an entire essay, but I think some sense of it has been captured here— the user is  burdened with having to internalize many more primitives, but is not empowered to make their own (which they can then encapsulate, share, and forget about the internal details).\n\nTo return to the original example, my system has both "
                            },
                            {
                                "type": "text",
                                "text": "sum",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and generic iteration. Sum would look like this:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1569438834.491200",
        "client_msg_id": "65ee61dd-5472-46d3-a82a-abc470db30e3",
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4"
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1569438851.491600",
        "client_msg_id": "a56f079e-9375-43f5-bc5e-1a96209c1fa9",
        "text": "...whereas iteration looks like this: <https:\/\/lynxtool.com\/doc\/map-operation.mp4>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rH\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...whereas iteration looks like this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lynxtool.com\/doc\/map-operation.mp4"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1569438999.491800",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1569439127.000000"
        },
        "client_msg_id": "4a027420-f655-477d-a543-f6a334e1ee10",
        "text": "That video shows what amounts to a `map`, but it could become a `reduce` (or, equivalently, an \"imperative\" loop) by making connections between the \"frames\" of the \"filmstrip\".\n\nIf you cracked open the `sum` node, you'd see that \"iteration\" node inside (with a `+` node in its body). But you don't have to do that in order to use `sum`.\n\nAnd if you wanted to repeat something other than addition, you could do it easily without relying on the system maintainers to code a new primitive for you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qtO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That video shows what amounts to a "
                            },
                            {
                                "type": "text",
                                "text": "map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but it could become a "
                            },
                            {
                                "type": "text",
                                "text": "reduce",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (or, equivalently, an \"imperative\" loop) by making connections between the \"frames\" of the \"filmstrip\".\n\nIf you cracked open the "
                            },
                            {
                                "type": "text",
                                "text": "sum",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node, you'd see that \"iteration\" node inside (with a "
                            },
                            {
                                "type": "text",
                                "text": "+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node in its body). But you don't have to do that in order to use "
                            },
                            {
                                "type": "text",
                                "text": "sum",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nAnd if you wanted to repeat something other than addition, you could do it easily without relying on the system maintainers to code a new primitive for you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1569440186.492200",
        "client_msg_id": "2fead4e5-ce02-4988-bc89-a9e6c0c73930",
        "text": "For decades the academic community put each Masters and PhD candidate on a reusable library, and gradually built up a lot of great stuff. My Bachelor's thesis was on braille translation by computer, and i write a FORTRAN program that could be used as a subroutine to take raw text and convert it into proper braille. that code would still run today. A whole sub-category of the gaming industry can be traced back to the PhD thesis that produced the inverse kinematics library called Box2D which allowed Angry Birds to be written by normal mortals. Inverse kinematics is something not even 1 in a 100,000 programmers could build. It requires clever programming to do it efficiently. And every single modern OS relies on font rendering, and I would wager not 100 people working today know the truetype language on which it is based. Everyone thinks fonts are pictures of letters, but they are not, each letter is a little program, and once in my labeling software product i encountered a crash bug in some MS fonts.\n\nBut today the academic community is not making interchangeable parts for the most part, and this is indeed a problem, because companies keep a lot of their code private, except when they are trying to de-monetize and area so as to suppress competitors who could gain a foothold with some economic viability. Most of the open source work that the big boys do is not born of altruism but a recognition that by such practices they can keep young sprouts from growing to any size that would threaten then. JetBrains is among a handful of tool companies that has crossed the 500 employee mark, which to me is the sign of a strong, established firm with a solid customer base that can support that kind of continuity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568748321.207400",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G19J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For decades the academic community put each Masters and PhD candidate on a reusable library, and gradually built up a lot of great stuff. My Bachelor's thesis was on braille translation by computer, and i write a FORTRAN program that could be used as a subroutine to take raw text and convert it into proper braille. that code would still run today. A whole sub-category of the gaming industry can be traced back to the PhD thesis that produced the inverse kinematics library called Box2D which allowed Angry Birds to be written by normal mortals. Inverse kinematics is something not even 1 in a 100,000 programmers could build. It requires clever programming to do it efficiently. And every single modern OS relies on font rendering, and I would wager not 100 people working today know the truetype language on which it is based. Everyone thinks fonts are pictures of letters, but they are not, each letter is a little program, and once in my labeling software product i encountered a crash bug in some MS fonts.\n\nBut today the academic community is not making interchangeable parts for the most part, and this is indeed a problem, because companies keep a lot of their code private, except when they are trying to de-monetize and area so as to suppress competitors who could gain a foothold with some economic viability. Most of the open source work that the big boys do is not born of altruism but a recognition that by such practices they can keep young sprouts from growing to any size that would threaten then. JetBrains is among a handful of tool companies that has crossed the 500 employee mark, which to me is the sign of a strong, established firm with a solid customer base that can support that kind of continuity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1569441011.492400",
        "client_msg_id": "e86f5a9b-4ea3-4c16-b9a4-43d35460301d",
        "text": "(Aside) <@U6FKVSVCK> — You made that linxtool project? Awesome! I loved the write-ups, and feel like there are some really fresh and exciting UI ideas in here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S52qD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Aside) "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " — You made that linxtool project? Awesome! I loved the write-ups, and feel like there are some really fresh and exciting UI ideas in here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1569441099.492600",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1569441125.000000"
        },
        "client_msg_id": "cc41c13c-6f71-4bd4-bf1d-bc309b0021c1",
        "text": "thanks! there are many more UI goodies that I plan on hitting which are not yet pictured— spending my time on coding for now, though :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xhurN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks! there are many more UI goodies that I plan on hitting which are not yet pictured— spending my time on coding for now, though "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1569441714.492900",
        "client_msg_id": "be5ee35d-3758-406c-a8e7-792eb2d56b4d",
        "text": "When people use the term functional programming, do they usually mean the heavy use of immutable data structures, or the organizational convention of separating data and functions?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bU+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When people use the term functional programming, do they usually mean the heavy use of immutable data structures, or the organizational convention of separating data and functions?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1569442178.493100",
        "client_msg_id": "af6e3cd1-b0b8-409e-9881-32ee09b91549",
        "text": "For me it's the former. Particularly <https:\/\/en.wikipedia.org\/wiki\/Referential_transparency>\n\nSeparating functions and data feels pretty foundational to pretty much all paradigms (except maybe Prolog and SQL?)\n\nThere used to also be a connotation of using higher order functions with function values. But it too seems to be pervading all languages and being taken for granted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "attachments": [
            {
                "title": "Referential transparency",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Referential_transparency",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Referential_transparency",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Referential transparency and referential opacity are properties of parts of computer programs. An expression is called referentially transparent if it can be replaced with its corresponding value without changing the program's behavior. This requires that the expression be pure, that is to say the expression value must be the same for the same inputs and its evaluation must have no side effects. An expression that is not referentially transparent is called referentially opaque.\nIn mathematics all function applications are referentially transparent, by the definition of what constitutes a mathematical function. However, this is not always the case in programming, where the terms procedure and method are used to avoid misleading connotations. In functional programming only referentially transparent functions are considered. Some programming languages provide means to guarantee referential transparency. Some functional programming languages enforce referential transparency for all functions.\nThe importance of referential transparency is that it allows the programmer and the compiler to reason about program behavior as a rewrite system. This can help in proving correctness, simplifying an algorithm, assisting in modifying code without breaking it, or optimizing code by means of memoization, common subexpression elimination, lazy evaluation, or parallelization.",
                "fallback": "wikipedia: Referential transparency",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Referential_transparency"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4OcSs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me it's the former. Particularly "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Referential_transparency"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSeparating functions and data feels pretty foundational to pretty much all paradigms (except maybe Prolog and SQL?)\n\nThere used to also be a connotation of using higher order functions with function values. But it too seems to be pervading all languages and being taken for granted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1569442300.493400",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1569442319.000000"
        },
        "client_msg_id": "83cfb3e8-5e51-4c5d-8230-c860812e896f",
        "text": "<@UCUSW7WVD> “Separating functions and data feels pretty foundational to pretty much all paradigms” Do you mean besides the paradigm of OOP?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "muj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " “Separating functions and data feels pretty foundational to pretty much all paradigms” Do you mean besides the paradigm of OOP?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1569443256.493700",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1569443404.000000"
        },
        "client_msg_id": "2b007ddd-b0b6-47e4-bedd-d22e32bc2351",
        "text": "To me, the defining feature of \"functional programming\" is \"dynamic function composition\"; that is to say that procedures are data, and they can be stored, moved, invoked, and composed based on runtime decisions.\n\nReferential transparency is another important concept which I see as closely tied to functional programming (though not strictly the same thing); specifically it's closely associated with the \"pure\" subset of functional programming. FWIW, it's the need for referential transparency that forced me to adopt pure functional programming in my own project's design.\n\nConsider closures in non-pure languages like python or JS, though— you can have a function which is not referentially transparent, by nature of referring to a mutable variable in an outer function scope (including the global one). I would still call the use of such closures \"functional programming\", though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qkc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me, the defining feature of \"functional programming\" is \"dynamic function composition\"; that is to say that procedures are data, and they can be stored, moved, invoked, and composed based on runtime decisions.\n\nReferential transparency is another important concept which I see as closely tied to functional programming (though not strictly the same thing); specifically it's closely associated with the \"pure\" subset of functional programming. FWIW, it's the need for referential transparency that forced me to adopt pure functional programming in my own project's design.\n\nConsider closures in non-pure languages like python or JS, though— you can have a function which is not referentially transparent, by nature of referring to a mutable variable in an outer function scope (including the global one). I would still call the use of such closures \"functional programming\", though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1569444220.494000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1569444234.000000"
        },
        "client_msg_id": "89130f22-6f6c-48f1-a7c0-ab0986ebc541",
        "text": "This is an interesting disconnect. We're all saying very different things, about a subject I used to think a consensus existed on, if not on what terms mean, at least in the 2 things a term _could_ mean.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RkKCA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is an interesting disconnect. We're all saying very different things, about a subject I used to think a consensus existed on, if not on what terms mean, at least in the 2 things a term "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mean."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1569445606.494300",
        "client_msg_id": "17ef5bcb-bae0-405d-a434-af3f2276f0dd",
        "text": "Me:\n&gt; &gt; Separating functions and data feels pretty foundational to pretty much all paradigms.\n<@ULM3U6275>:\n&gt; Do you mean besides the paradigm of OOP?\n\nI see, I misunderstood what you meant by \"separating functions and data\".\n\nThe term 'functional programming' existed long before OOP:\n\n• The 1978 Turing Award lecture, \"Can programming be liberated from the von Neumann style?\" makes no mention of OOP or Simula (1962) or Smalltalk (1972).\n• The famous 1990 paper \"Why Functional Programming matters\" makes no mention of OOP or C++ (which first came out in 1985).\n\nI mostly get my sense of the term from those sources. While I usually don't care to argue semantics of terms, 'FP' seems still relatively crisp in meaning and so worth defending.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dRc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me:\n> > Separating functions and data feels pretty foundational to pretty much all paradigms.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": ":"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you mean besides the paradigm of OOP?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI see, I misunderstood what you meant by \"separating functions and data\".\n\nThe term 'functional programming' existed long before OOP:\n\n• The 1978 Turing Award lecture, \"Can programming be liberated from the von Neumann style?\" makes no mention of OOP or Simula (1962) or Smalltalk (1972).\n• The famous 1990 paper \"Why Functional Programming matters\" makes no mention of OOP or C++ (which first came out in 1985).\n\nI mostly get my sense of the term from those sources. While I usually don't care to argue semantics of terms, 'FP' seems still relatively crisp in meaning and so worth defending."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1569445741.494500",
        "client_msg_id": "8383cd7d-3dc4-497d-9980-1320dca58b47",
        "text": "Ah, <@U6FKVSVCK>, I had to read your comment a few times to realize it was the same as the third connotation I mentioned. Yes, that connotation has a long history. I tend to distinguish between referential transparency and first-class functions using the terms \"pure FP\" and \"FP\" when necessary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567954767.205900",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G8LI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": ", I had to read your comment a few times to realize it was the same as the third connotation I mentioned. Yes, that connotation has a long history. I tend to distinguish between referential transparency and first-class functions using the terms \"pure FP\" and \"FP\" when necessary."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1569457254.494900",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1569457366.000000"
        },
        "client_msg_id": "1df2d6d4-361b-435e-828a-3977dda38e4a",
        "text": "I think I would put myself in the specific domain camp. The problem of finding better general purpose languages just seems impossibly hard and I'm not too deep into coding. But at the same time in a particular domain you need some means to go lower level. My particular domain I'm interested in is math, which already has something like an informal programming language\/paradigm with set theory and the axiomatic method. Its pretty great but doesn't have any dynamic capabilities. Also, those capabilities dynamic capabilities you would want wouldn't necessarily be about big computations but as a matter of the interface for math. So it all has to be a part of a medium that extends current practices in math. So for this particular domain the programming language doesn't seem like the major thing to be interested in except in a generalized sense if you regard it as part of a medium and set of practices.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JkZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I would put myself in the specific domain camp. The problem of finding better general purpose languages just seems impossibly hard and I'm not too deep into coding. But at the same time in a particular domain you need some means to go lower level. My particular domain I'm interested in is math, which already has something like an informal programming language\/paradigm with set theory and the axiomatic method. Its pretty great but doesn't have any dynamic capabilities. Also, those capabilities dynamic capabilities you would want wouldn't necessarily be about big computations but as a matter of the interface for math. So it all has to be a part of a medium that extends current practices in math. So for this particular domain the programming language doesn't seem like the major thing to be interested in except in a generalized sense if you regard it as part of a medium and set of practices."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1569463263.495200",
        "client_msg_id": "4ebcd30b-b29f-4099-85a9-251100199699",
        "text": "black box reuse the only way to make money, however, parametric black box might be the wrong solution to the problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568748321.207400",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rpTJT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "black box reuse the only way to make money, however, parametric black box might be the wrong solution to the problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1569463302.495800",
        "client_msg_id": "acce98c9-8ee1-42e0-aa0b-6762687d9a3d",
        "text": "has anyone read this book? <https:\/\/learning.oreilly.com\/library\/view\/software-wasteland-how\/9781634623186\/>  looks very provoking",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569463302.495800",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1569889876.120600",
        "reply_users": [
            "UN57U8V53",
            "UHZNB3HRP"
        ],
        "replies": [
            {
                "user": "UN57U8V53",
                "ts": "1569499238.498000"
            },
            {
                "user": "UN57U8V53",
                "ts": "1569499477.498200"
            },
            {
                "user": "UHZNB3HRP",
                "ts": "1569889876.120600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "O’Reilly | Safari",
                "title": "Software Wasteland: How the Application-Centric Mindset is Hobbling our Enterprises",
                "title_link": "https:\/\/learning.oreilly.com\/library\/view\/software-wasteland-how\/9781634623186\/",
                "text": "Know what's causing application development waste so you can turn the tide. This is the book your Systems Integrator and your Application Software vendor don't want you to read. Enterprise … - Selection from Software Wasteland: How the Application-Centric Mindset is Hobbling our Enterprises [Book]",
                "fallback": "O’Reilly | Safari: Software Wasteland: How the Application-Centric Mindset is Hobbling our Enterprises",
                "thumb_url": "https:\/\/www.oreilly.com\/library\/cover\/9781634623186\/",
                "from_url": "https:\/\/learning.oreilly.com\/library\/view\/software-wasteland-how\/9781634623186\/",
                "thumb_width": 122,
                "thumb_height": 184,
                "service_icon": "https:\/\/www.oreilly.com\/library\/view\/static\/images\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/learning.oreilly.com\/library\/view\/software-wasteland-how\/9781634623186\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CWEse",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "has anyone read this book? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/learning.oreilly.com\/library\/view\/software-wasteland-how\/9781634623186\/"
                            },
                            {
                                "type": "text",
                                "text": "  looks very provoking"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    }
]