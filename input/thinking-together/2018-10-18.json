[
    {
        "user": "UBWT66AGN",
        "type": "message",
        "ts": "1539874300.000100",
        "client_msg_id": "639be806-73aa-4b49-8df4-7d50ef569d6b",
        "text": "Are there any good materials on the history of dev tools, distinct from programming languages? Like how debuggers have evolved? Or simple things like “task managers through the ages”? Closest I’ve found is Two-Bit History <https:\/\/twobithistory.org\/2018\/07\/07\/cvs.html> which is great but I’m interested in learning more. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5a3788faff63",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-10-18\/459101919443_5a3788faff632cf658db_72.jpg",
            "first_name": "Dan",
            "real_name": "Dan Miller",
            "display_name": "dmiller",
            "team": "T5TCAFTA9",
            "name": "dan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539874300.000100",
        "reply_count": 6,
        "reply_users_count": 5,
        "latest_reply": "1539953727.000100",
        "reply_users": [
            "U5TCAFTD3",
            "UBWT66AGN",
            "UA14TGLTC",
            "UCS1K3QTH",
            "UDCLA1HU4"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1539875660.000100"
            },
            {
                "user": "UBWT66AGN",
                "ts": "1539876530.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1539877187.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539915116.000100"
            },
            {
                "user": "UCS1K3QTH",
                "ts": "1539939509.000100"
            },
            {
                "user": "UDCLA1HU4",
                "ts": "1539953727.000100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1539961299.000194",
        "attachments": [
            {
                "title": "Version Control Before Git with CVS",
                "title_link": "https:\/\/twobithistory.org\/2018\/07\/07\/cvs.html",
                "text": "What it was like using version control before distributed repositories and commit graphs.",
                "fallback": "Version Control Before Git with CVS",
                "thumb_url": "https:\/\/twobithistory.org\/images\/logo.png",
                "from_url": "https:\/\/twobithistory.org\/2018\/07\/07\/cvs.html",
                "thumb_width": 128,
                "thumb_height": 128,
                "service_icon": "https:\/\/twobithistory.org\/favicon.ico",
                "service_name": "twobithistory.org",
                "id": 1,
                "original_url": "https:\/\/twobithistory.org\/2018\/07\/07\/cvs.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8s4K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there any good materials on the history of dev tools, distinct from programming languages? Like how debuggers have evolved? Or simple things like “task managers through the ages”? Closest I’ve found is Two-Bit History "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twobithistory.org\/2018\/07\/07\/cvs.html"
                            },
                            {
                                "type": "text",
                                "text": " which is great but I’m interested in learning more. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC21F8Q48",
                    "U5TCAFTD3",
                    "UCXR52MU2",
                    "UA14TGLTC"
                ],
                "count": 4
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1539875660.000100",
        "client_msg_id": "e49f3ab8-2764-4d6f-8cbd-5a03f819489a",
        "text": "great question - I am not aware of anything. This would be a great topic for research. I imagine it would garner broader appeal than PL because tools are usually more agnostic \/ work across languages, while languages are more divisive, less inter-operable. (There are also a bunch of companies in this space so I imagine it'd be quite easy to find funding for this kind of research.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539874300.000100",
        "parent_user_id": "UBWT66AGN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ciF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great question - I am not aware of anything. This would be a great topic for research. I imagine it would garner broader appeal than PL because tools are usually more agnostic \/ work across languages, while languages are more divisive, less inter-operable. (There are also a bunch of companies in this space so I imagine it'd be quite easy to find funding for this kind of research.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBWT66AGN",
        "type": "message",
        "ts": "1539876530.000100",
        "client_msg_id": "08139800-d84a-4ea1-b49a-4c3de167dfbe",
        "text": "Fascinating! As someone who works for one such company I guess I don’t have any excuses :stuck_out_tongue:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5a3788faff63",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-10-18\/459101919443_5a3788faff632cf658db_72.jpg",
            "first_name": "Dan",
            "real_name": "Dan Miller",
            "display_name": "dmiller",
            "team": "T5TCAFTA9",
            "name": "dan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539874300.000100",
        "parent_user_id": "UBWT66AGN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lsSX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fascinating! As someone who works for one such company I guess I don’t have any excuses "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "stuck_out_tongue_closed_eyes",
                "users": [
                    "U5TCAFTD3",
                    "UCXR52MU2"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1539877187.000100",
        "client_msg_id": "EE2623E7-9739-4639-8D52-14A7F6C87AD8",
        "text": "<@UDCLA1HU4> do you know of any dev tool historians?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539874300.000100",
        "parent_user_id": "UBWT66AGN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MqT3M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDCLA1HU4"
                            },
                            {
                                "type": "text",
                                "text": " do you know of any dev tool historians?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539915116.000100",
        "client_msg_id": "7ae4ca9f-5c64-491d-aa7a-d62dc6e819e2",
        "text": "Oh CVS!  Branching and merging weren't so much things.  Checking out individual subdirectories of a large project?  That was totally a thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539874300.000100",
        "parent_user_id": "UBWT66AGN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh CVS!  Branching and merging weren't so much things.  Checking out individual subdirectories of a large project?  That was totally a thing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1539931658.000100",
        "client_msg_id": "79cd9679-3924-4510-add1-c627591477c9",
        "text": "I just watched this, thanks! Very stimulating, and it was a pleasure to see something that goes past the usual anodyne prescriptions for programming, taking them instead for granted and building on them.\n\nI have a couple of follow-up questions for <@UCGR73CAY>:\n\n1. In the first example of sanitized strings you choose to hide some code behind an opaque boundary. But surely you could choose to add an opaque boundary for any single line of your program. Would this line of reasoning tell us that more functions in a program are always better than fewer functions?\n\nThe key seems to be to ensure that the abstract level-3 predicate (the _abstraction_) is externally grounded in the world. Naming the function the same as the level-3 predicate (`sanitize`) kinda hides that.\n\n2. In the second example of arrays as conditionals you again rely upon an external sense of what the right abstraction is (history about the nth president). Arguably the server-side constants could have similar reasoning, but it would require encoding the _why_ behind them, something you allude to earlier. Comparing a familiar example with an unfamiliar one kinda hides that.\n\nFor me the lesson from example 2 was that conditionals are a sign that you haven't encoded the _why_ of your programs thoroughly enough. But it seems like an open problem to be able to encode arbitrary rationales in formal logic (going back to Leibniz: <https:\/\/publicdomainreview.org\/2016\/11\/10\/let-us-calculate-leibniz-llull-and-computational-imagination>).\n\nCombining the two examples, for me program synthesis -- whether by human or by robot -- seems reliant on the mental models of the world encoded by the synthesizer. And the notion of \"abstraction\" abstracts away too much from that broader notion of a mental model.\n\n---\n\nTo identify just one of the gaps, we need also elements of _consequence_. \"You can't do x because then y would happen, which is undesirable.\" (That connects up also with the notion of consequentialist ethics: <https:\/\/en.wikipedia.org\/wiki\/Consequentialism>)\n\nI suspect the server-side example in particular is due to that sort of scenario-based reasoning. For example, there are knobs in memory allocators that trade off efficiency of allocation with the risk of fragmentation. Numbers can sometimes encode simulation rather than logical statements.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539712536.000100",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "The Public Domain Review",
                "title": "“Let us Calculate!”: Leibniz, Llull, and the Computational Imagination",
                "title_link": "https:\/\/publicdomainreview.org\/2016\/11\/10\/let-us-calculate-leibniz-llull-and-computational-imagination",
                "text": "Three hundred years after the death of Gottfried Wilhelm Leibniz and seven hundred years after the death of Ramon Llull, Jonathan Gray looks at how their early visions of computation and the “combinatorial art” speak to our own age of data, algorithms, and artificial intelligence.",
                "fallback": "The Public Domain Review: “Let us Calculate!”: Leibniz, Llull, and the Computational Imagination",
                "image_url": "https:\/\/publicdomainreview.org\/wp-content\/uploads\/2016\/11\/leibniz-machine-copy.jpg",
                "ts": 1478802536,
                "from_url": "https:\/\/publicdomainreview.org\/2016\/11\/10\/let-us-calculate-leibniz-llull-and-computational-imagination",
                "image_width": 357,
                "image_height": 250,
                "image_bytes": 355245,
                "service_icon": "https:\/\/publicdomainreview.org\/wp-content\/themes\/hpy_pdr\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/publicdomainreview.org\/2016\/11\/10\/let-us-calculate-leibniz-llull-and-computational-imagination"
            },
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8f\/Demosthenes_orator_Louvre.jpg",
                "image_width": 490,
                "image_height": 735,
                "image_bytes": 367391,
                "title": "Consequentialism",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Consequentialism",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Consequentialism",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Consequentialism is the class of normative ethical theories holding that the consequences of one's conduct are the ultimate basis for any judgment about the rightness or wrongness of that conduct. Thus, from a consequentialist standpoint, a morally right act (or omission from acting) is one that will produce a good outcome, or consequence. \nConsequentialism is primarily non-prescriptive, meaning the moral worth of an action is determined by its potential consequence, not by whether it follows a set of written edicts or laws. One example would entail lying under the threat of government punishment to save an innocent person's life, even though it is illegal to lie under oath.\nConsequentialism is usually contrasted with deontological ethics (or deontology), in that deontology, in which rules and moral duty are central, derives the rightness or wrongness of one's conduct from the character of the behaviour itself rather than the outcomes of the conduct. It is also contrasted with virtue ethics, which focuses on the character of the agent rather than on the nature or consequences of the act (or omission) itself, and pragmatic ethics which treats morality like science: advancing socially over the course of many lifetimes, such that any moral criterion is subject to revision. Consequentialist theories differ in how they define moral goods.\nSome argue that consequentialist and deontological theories are not necessarily mutually exclusive. For example, T. M. Scanlon advances the idea that human rights, which are commonly considered a \"deontological\" concept, can only be justified with reference to the consequences of having those rights. Similarly, Robert Nozick argues for a theory that is mostly consequentialist, but incorporates inviolable \"side-constraints\" which restrict the sort of actions agents are permitted to do.",
                "fallback": "wikipedia: Consequentialism",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 2,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Consequentialism"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fA+I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just watched this, thanks! Very stimulating, and it was a pleasure to see something that goes past the usual anodyne prescriptions for programming, taking them instead for granted and building on them.\n\nI have a couple of follow-up questions for "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGR73CAY"
                            },
                            {
                                "type": "text",
                                "text": ":\n\n1. In the first example of sanitized strings you choose to hide some code behind an opaque boundary. But surely you could choose to add an opaque boundary for any single line of your program. Would this line of reasoning tell us that more functions in a program are always better than fewer functions?\n\nThe key seems to be to ensure that the abstract level-3 predicate (the "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") is externally grounded in the world. Naming the function the same as the level-3 predicate ("
                            },
                            {
                                "type": "text",
                                "text": "sanitize",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") kinda hides that.\n\n2. In the second example of arrays as conditionals you again rely upon an external sense of what the right abstraction is (history about the nth president). Arguably the server-side constants could have similar reasoning, but it would require encoding the "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " behind them, something you allude to earlier. Comparing a familiar example with an unfamiliar one kinda hides that.\n\nFor me the lesson from example 2 was that conditionals are a sign that you haven't encoded the "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of your programs thoroughly enough. But it seems like an open problem to be able to encode arbitrary rationales in formal logic (going back to Leibniz: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publicdomainreview.org\/2016\/11\/10\/let-us-calculate-leibniz-llull-and-computational-imagination"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nCombining the two examples, for me program synthesis -- whether by human or by robot -- seems reliant on the mental models of the world encoded by the synthesizer. And the notion of \"abstraction\" abstracts away too much from that broader notion of a mental model.\n\n---\n\nTo identify just one of the gaps, we need also elements of "
                            },
                            {
                                "type": "text",
                                "text": "consequence",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". \"You can't do x because then y would happen, which is undesirable.\" (That connects up also with the notion of consequentialist ethics: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Consequentialism"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nI suspect the server-side example in particular is due to that sort of scenario-based reasoning. For example, there are knobs in memory allocators that trade off efficiency of allocation with the risk of fragmentation. Numbers can sometimes encode simulation rather than logical statements."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539932228.000100",
        "client_msg_id": "b2418377-1e95-4674-a93d-e7e84055b640",
        "text": "Did you mean <@UC1TYP06P>?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539712536.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GZWys",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Did you mean "
                            },
                            {
                                "type": "user",
                                "user_id": "UC1TYP06P"
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]