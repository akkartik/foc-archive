[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1711451862.359209",
        "client_msg_id": "a11c2bfb-316e-4822-9091-770900e14e14",
        "text": "I think he's saying that having to bend your thoughts to suit or evade the type system causes the really tricky bugs because your natural train of thought or expectations have been disrupted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vv+sf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think he's saying that having to bend your thoughts to suit or evade the type system causes the really tricky bugs because your natural train of thought or expectations have been disrupted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1711452008.470409",
        "client_msg_id": "623836a2-6cb8-4b4c-906f-e8bfbfe7a370",
        "text": "Which I agree with.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MirEZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which I agree with."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1711452896.015389",
        "client_msg_id": "36ccc5f0-c660-4181-9d8a-07cb00d4bc9a",
        "text": "I would have to go away and ponder good examples, but it'll be something around edge cases where a strict type doesn't capture the domain type",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1i5WR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would have to go away and ponder good examples, but it'll be something around edge cases where a strict type doesn't capture the domain type"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1711455852.623009",
        "client_msg_id": "43ed2a01-27bb-4535-9ff7-5da5fb3ae003",
        "text": "I agree. EEs use (or used to use when I learned how to design electronics) a concept more powerful than \"types\". It was called \"design rules\". You could specify - on a per project basis (instead of generalizing) - some rules \/ invariants that had to be upheld. For example \"don't let parallel lines on a printed circuit board be longer than XX inches, (since long lines in parallel can cause noticeable cross-talk and this circuit is designed to tolerate only YYmicro-volts of cross-talk)\", or, \"this project uses ECL chips, ensure that lines on the PC are equal in length  (since the speed of light begins to matter and some signals might arrive before others)\", etc. It seems to me that \"dependent types\" are a step in the direction of writing more-flexible programs about types (rather than writing programs about values in memory), which basically admits that most general purpose programming languages aren't really all that general (you get what the language designer thought was important, instead of what your project says is important)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zsmLr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree. EEs use (or used to use when I learned how to design electronics) a concept more powerful than \"types\". It was called \"design rules\". You could specify - on a per project basis (instead of generalizing) - some rules \/ invariants that had to be upheld. For example \"don't let parallel lines on a printed circuit board be longer than XX inches, (since long lines in parallel can cause noticeable cross-talk and this circuit is designed to tolerate only YYmicro-volts of cross-talk)\", or, \"this project uses ECL chips, ensure that lines on the PC are equal in length  (since the speed of light begins to matter and some signals might arrive before others)\", etc. It seems to me that \"dependent types\" are a step in the direction of writing more-flexible programs about types (rather than writing programs about values in memory), which basically admits that most general purpose programming languages aren't really all that general (you get what the language designer thought was important, instead of what your project says is important)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U06K0MA31T9"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U017TE5R09M"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1711466977.409889",
        "client_msg_id": "d2e50b69-eb97-4174-8ef3-506b3ef5e1d2",
        "text": "I fail to remember any situation in which I had a bug caused by a type system... The only way I can interpret his statement is that a type system might give you a false sense of safety (I never agreed to the Haskell mantra that if it compiles, then it must be correct, although it can and does happen), so you can then neglect test coverage.\n\nMore often than not the adamancy of a type system to accept my code forced me to become aware of intricacies in the domain model. Is it perfect? Nope, nothing is, but it's more helpful for me to use a tool with a type system.\n\nI think Crockford sometimes makes some unwarranted assertions. He used to say that parsing JSON was the only acceptable use of `eval` in JavaScript, which I never understood, since one should absolutely not use `eval` on external input.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jVgSv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I fail to remember any situation in which I had a bug caused by a type system... The only way I can interpret his statement is that a type system might give you a false sense of safety (I never agreed to the Haskell mantra that if it compiles, then it must be correct, although it can and does happen), so you can then neglect test coverage.\n\nMore often than not the adamancy of a type system to accept my code forced me to become aware of intricacies in the domain model. Is it perfect? Nope, nothing is, but it's more helpful for me to use a tool with a type system.\n\nI think Crockford sometimes makes some unwarranted assertions. He used to say that parsing JSON was the only acceptable use of "
                            },
                            {
                                "type": "text",
                                "text": "eval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in JavaScript, which I never understood, since one should absolutely not use "
                            },
                            {
                                "type": "text",
                                "text": "eval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on external input."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1711467481.374179",
        "client_msg_id": "5ecb704c-d00a-42c8-8ea3-b6e4e8dfca89",
        "text": "Care to elaborate <@U055WH5D8DQ>?  What made The Last Clockwinder stand out, and in comparison to what?  For example, I think I've been most impressed by Virtual Virtual Reality, but I wouldn't say I've toured much that's on offer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709819831.427719",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4vrqL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Care to elaborate "
                            },
                            {
                                "type": "user",
                                "user_id": "U055WH5D8DQ"
                            },
                            {
                                "type": "text",
                                "text": "?  What made The Last Clockwinder stand out, and in comparison to what?  For example, I think I've been most impressed by Virtual Virtual Reality, but I wouldn't say I've toured much that's on offer."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U055WH5D8DQ",
        "type": "message",
        "ts": "1711475150.610719",
        "client_msg_id": "CFADD5AD-72E1-4701-BF4C-8B3DA54F22F3",
        "text": "I haven’t seen Virtual Virtual Reality, I’ll check it out! I think one of the things I was most impressed about with TLC was just the elegance of the core gameplay mechanic…it’s such an “obvious” use of the high fidelity player actions you get from VR controllers, it just really impressed me. VR games tend to feel like tech demos a lot of the time so TLC was nice in that it felt like a complete game\/experience, as well  ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga41961057b8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a41961057b8ac818242833c8d3fb2b36.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "Joe",
            "real_name": "Joe Nash",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe004",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709819831.427719",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cHQaP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "text",
                                "text": "haven’t"
                            },
                            {
                                "type": "text",
                                "text": " seen Virtual Virtual Reality, "
                            },
                            {
                                "type": "text",
                                "text": "I’ll"
                            },
                            {
                                "type": "text",
                                "text": " check it out! I think one of the things I was most impressed about with TLC was just the elegance of the core gameplay mechanic"
                            },
                            {
                                "type": "text",
                                "text": "…it’s"
                            },
                            {
                                "type": "text",
                                "text": " such an “obvious” use of the high fidelity player actions you get from VR controllers, it just really impressed me. VR games tend to feel like tech demos a lot of the time so TLC was nice in that it felt like a complete game\/experience, as well  "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1711483470.463419",
        "client_msg_id": "23b9d63f-dbb3-4ffd-9eb5-00722bba5115",
        "text": "He seems to be in favor of duck typing, and if the type system prevents you from making a solution that relies on duck typing, he assumes that your alternative solution will be more complicated and have a higher risk of defects, which is an unproven assumption just like all his other opinions. He could equally well have made the opposite claim, that the type system forces you to make a cleaner solution that other programmers can understand without finding surprises, but what opinion he chooses to go with on each question seems to be a roll of dice.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0A4vf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "He seems to be in favor of duck typing, and if the type system prevents you from making a solution that relies on duck typing, he assumes that your alternative solution will be more complicated and have a higher risk of defects, which is an unproven assumption just like all his other opinions. He could equally well have made the opposite claim, that the type system forces you to make a cleaner solution that other programmers can understand without finding surprises, but what opinion he chooses to go with on each question seems to be a roll of dice."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1711483875.242429",
        "client_msg_id": "e605074f-aea7-4e0c-bf66-101974284e18",
        "text": "If more of us loose\/dynamic typing advocates rock up this could turn into a vim\/emacs bunfight!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/z\/ZA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If more of us loose\/dynamic typing advocates rock up this could turn into a vim\/emacs bunfight!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1711485112.982709",
        "edited": {
            "user": "U04SAJZ155H",
            "ts": "1711485135.000000"
        },
        "client_msg_id": "33a4c4a9-0766-42c0-a64c-15b2120adf99",
        "text": "That's what the JS community loves to do, and Douglas opens with a bunch of slides making strawmen arguments telling that anyone who disagrees with him is stupid and has no facts to come with. In fact, both Vim and Emacs are severely outdated, and I'd rather have the future of editors and programming than influencers provocing flamewars about binary choices of features from the past, as if these features are the ultimate and one of them must be the winner.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBxxt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's what the JS community loves to do, and Douglas opens with a bunch of slides making strawmen arguments telling that anyone who disagrees with him is stupid and has no facts to come with. In fact, both Vim and Emacs are severely outdated, and I'd rather have the future of editors and programming than influencers provocing flamewars about binary choices of features from the past, as if these features are the ultimate and one of them must be the winner."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1711486682.353269",
        "client_msg_id": "07a1a847-f579-4b0e-b4ec-b2c29b6af178",
        "text": "Been usin' vi(m) 44 years, man-n-boy, an' I ain't stoppin' now. Pfwah! You young 'uns!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711420070.923209",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G9qe\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Been usin' vi(m) 44 years, man-n-boy, an' I ain't stoppin' now. Pfwah! You young 'uns!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UL2SJ88Q3"
                ],
                "count": 1
            }
        ]
    }
]