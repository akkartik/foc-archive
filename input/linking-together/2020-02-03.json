[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580717179.059900",
        "client_msg_id": "20238889-34a4-4b84-ad48-ee1a35bd692b",
        "text": "We're going a bit far afield now, but I think calling systems like CoffeeScript's LP makes it harder to see what's truly powerful about LP: perfect flexibility in ordering code fragments.\n\nMore elaboration: <http:\/\/akkartik.name\/post\/literate-programming> (Literate CoffeeScript is one of the quasi-literate systems I refer to there.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580688738.053300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rHwG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're going a bit far afield now, but I think calling systems like CoffeeScript's LP makes it harder to see what's truly powerful about LP: perfect flexibility in ordering code fragments.\n\nMore elaboration: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/literate-programming"
                            },
                            {
                                "type": "text",
                                "text": " (Literate CoffeeScript is one of the quasi-literate systems I refer to there.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580730262.062000",
        "client_msg_id": "01F1F78C-282C-469B-8B7E-A8939D7B5C60",
        "text": "This year’s slide deck by Benedict Evans about technology regulation asks some interesting questions about our future. It might not directly talk about the future of coding, but whether we want that or not, a lot in there will definitely impact our thoughts and designs for the future:\n<https:\/\/www.ben-evans.com\/presentations|https:\/\/www.ben-evans.com\/presentations>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Benedict Evans",
                "title": "Presentations — Benedict Evans",
                "title_link": "https:\/\/www.ben-evans.com\/presentations",
                "text": "Presentations by Benedict Evans: Standing on the Shoulders of Giants, The End of the Beginning and Mobile is Eating the world.",
                "fallback": "Benedict Evans: Presentations — Benedict Evans",
                "thumb_url": "http:\/\/static1.squarespace.com\/static\/50363cf324ac8e905e7df861\/t\/5e2d62fcad322f7ef2712cad\/1580032766228\/Slide1.png?format=1500w",
                "from_url": "https:\/\/www.ben-evans.com\/presentations",
                "thumb_width": 1280,
                "thumb_height": 720,
                "service_icon": "https:\/\/assets.squarespace.com\/universal\/default-favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.ben-evans.com\/presentations"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FCFVB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This year’s slide deck by Benedict Evans about technology regulation asks some interesting questions about our future. It might not directly talk about the future of coding, but whether we want that or not, a lot in there will definitely impact our thoughts and designs for the future:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ben-evans.com\/presentations",
                                "text": "https:\/\/www.ben-evans.com\/presentations"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UBN9AFS0N",
                    "UEQ7QL15F",
                    "U01038KJXRB"
                ],
                "count": 3
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "Should that :point_up::skin-tone-4: article go to the newsletter?",
        "type": "message",
        "ts": "1580732911.062500",
        "edited": {
            "user": "B7205UT0R",
            "ts": "1581373115.000000"
        },
        "bot_id": "B7205UT0R",
        "thread_ts": "1580732911.062500",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1580749113.069500",
        "reply_users": [
            "UC2A2ARPT",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580745868.067500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580745927.069000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1580749113.069500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "section",
                "block_id": "poll-5a8c047b-9c87-404c-aa75-b3363fbaa985-title-and-menu",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Should that :point_up::skin-tone-4: article go to the newsletter?*",
                    "verbatim": false
                },
                "accessory": {
                    "type": "overflow",
                    "action_id": "title-and-menu",
                    "options": [
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":information_source: View info",
                                "emoji": true
                            },
                            "value": "view_info"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":pushpin: Capture Decision from Poll",
                                "emoji": true
                            },
                            "value": "capture_decision_from_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":x: Delete Poll",
                                "emoji": true
                            },
                            "value": "delete_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":gear: Go to Settings",
                                "emoji": true
                            },
                            "value": "go_to_settings_from_poll",
                            "url": "https:\/\/simplepoll.rocks\/dashboard\/futureofcoding\/settings\/"
                        }
                    ]
                }
            },
            {
                "type": "section",
                "block_id": "poll-5a8c047b-9c87-404c-aa75-b3363fbaa985-vote-1",
                "text": {
                    "type": "mrkdwn",
                    "text": ":one: Yes\n",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-1",
                    "text": {
                        "type": "plain_text",
                        "text": ":one:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-5a8c047b-9c87-404c-aa75-b3363fbaa985-vote-2",
                "text": {
                    "type": "mrkdwn",
                    "text": ":two: No    `6`\n<@UC2A2ARPT>, <@UA14TGLTC>, <@UAZT04VT4>, <@UCKRZS3DZ>, <@UJBAJNFLK>, <@UHWC9PXBL>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-2",
                    "text": {
                        "type": "plain_text",
                        "text": ":two:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "context",
                "block_id": "81E2",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "Created by <@UBN9AFS0N> with \/poll",
                        "verbatim": false
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580745868.067500",
        "client_msg_id": "BFEB4E82-A519-4F50-AC0B-128219F88428",
        "text": "If we start including this Benedict Evans sort of stuff, we're going to be overrun with Ben Thompson and Horace Dediu and Scott Galloway... because they are all saying interesting things in compelling ways. But while it's relevant to what we're doing in the sense that it's about the computer industry, it's no more relevant than climate change or geopolitics or gamer culture or a thousand other things that do belong here in <#C5U3SEW6A|linking-together> but probably don't belong in the newsletter.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580732911.062500",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we start including this Benedict Evans sort of stuff, we're going to be overrun with Ben Thompson and Horace Dediu and Scott Galloway... because they are all saying interesting things in compelling ways. But while it's relevant to what we're doing in the sense that it's about the computer industry, it's no more relevant than climate change or geopolitics or gamer culture or a thousand other things that do belong here in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " but probably don't belong in the newsletter."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N",
                    "UCKRZS3DZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580745927.069000",
        "client_msg_id": "67724A6E-057E-4931-9FEC-96D49FC07721",
        "text": "The newsletter is a place for people who don't have time or interest in coming to our Slack to get a taste for the good stuff shared in <#C5T9GPWFL|thinking-together>. That's special.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580732911.062500",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The newsletter is a place for people who don't have time or interest in coming to our Slack to get a taste for the good stuff shared in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ". That's special."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UCKRZS3DZ",
                    "U01038KJXRB"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1580749113.069500",
        "client_msg_id": "e7567a14-f55c-4fd5-bed7-4cc1b179aa3f",
        "text": "Random stays in random.  I like a little random.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580732911.062500",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Fa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Random stays in random.  I like a little random."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1580769202.070100",
        "client_msg_id": "e3e74420-2847-47ad-b3c1-a0c9e1587a90",
        "text": "I don't like this block comment syntax because the sequences marking the start and end of the comment are identical. It is more robust, and less visually ambiguous, if the start- and end-comment sequences are different.\n\nI don't like signature lines, for the same reasons that <@UEQ6M68H0> gives. If you convert an existing block of code into a block comment, you have to search all the lines in that block to make sure you aren't using the same signature as an existing block comment within the block you are commenting out. I don't like that requirement.\n\nThe simplest design that works is to only provide line comments like `#` in Python or `\/\/` in C. If you are using a smart editor designed for programming, then you already have high level commands for commenting or uncommenting a block of code using line comments.\n\nMy preferred block comment syntax would use distinct start-comment and end-comment tokens. The syntax would be designed so that any syntactically valid block of code can be commented out, simply by wrapping the block of code in start- and end-comment tokens. Implementing this last requirement correctly is tricky, in the presence of nested comments, and I'm not sure if I've seen a language with block comments that works the way I want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580688738.053300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/OS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't like this block comment syntax because the sequences marking the start and end of the comment are identical. It is more robust, and less visually ambiguous, if the start- and end-comment sequences are different.\n\nI don't like signature lines, for the same reasons that "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " gives. If you convert an existing block of code into a block comment, you have to search all the lines in that block to make sure you aren't using the same signature as an existing block comment within the block you are commenting out. I don't like that requirement.\n\nThe simplest design that works is to only provide line comments like "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Python or "
                            },
                            {
                                "type": "text",
                                "text": "\/\/",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in C. If you are using a smart editor designed for programming, then you already have high level commands for commenting or uncommenting a block of code using line comments.\n\nMy preferred block comment syntax would use distinct start-comment and end-comment tokens. The syntax would be designed so that any syntactically valid block of code can be commented out, simply by wrapping the block of code in start- and end-comment tokens. Implementing this last requirement correctly is tricky, in the presence of nested comments, and I'm not sure if I've seen a language with block comments that works the way I want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD31LGQKB",
        "type": "message",
        "ts": "1580784810.070300",
        "client_msg_id": "127da43d-a09e-4bc6-9bf2-907a5c63b069",
        "text": "Proteus, Gris, Firewatch",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7e6e0f8e031",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-19\/699535022069_b7e6e0f8e031cdcf896f_72.jpg",
            "first_name": "",
            "real_name": "andrew blinn",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "me1856",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580627983.048800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9uv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Proteus, Gris, Firewatch"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1580787337.071500",
        "client_msg_id": "3c3ac45f-56c7-4d07-98ee-6a298703a093",
        "text": "Kinda off-topic, but you guys likely know: is there a \"long form\" friendly version of something like Slack? Something like the forums we used to have, but with, you know, modern niceties?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "reply_count": 22,
        "reply_users_count": 6,
        "latest_reply": "1582851825.015700",
        "reply_users": [
            "UC2A2ARPT",
            "UHDQ62M4P",
            "UMU2RLPR8",
            "UN89MTTML",
            "UKJGU23KP",
            "UCEGX4NFK"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580788485.071700"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580789261.071900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580789387.072100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580789425.072300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580789542.072600"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1580805988.102300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580828914.105100"
            },
            {
                "user": "UN89MTTML",
                "ts": "1580829211.105300"
            },
            {
                "user": "UN89MTTML",
                "ts": "1580829223.105500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580830501.105700"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1580830538.105900"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580830544.106100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580830579.106300"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580830593.106500"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580830758.106700"
            },
            {
                "user": "UN89MTTML",
                "ts": "1580830764.106900"
            },
            {
                "user": "UN89MTTML",
                "ts": "1580830798.107200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580830835.107400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580831781.107600"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1580832036.107800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1580841623.108000"
            },
            {
                "user": "UCEGX4NFK",
                "ts": "1582851825.015700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qZ6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kinda off-topic, but you guys likely know: is there a \"long form\" friendly version of something like Slack? Something like the forums we used to have, but with, you know, modern niceties?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580788485.071700",
        "client_msg_id": "3c52616e-b7c6-480b-a109-5195042c0fba",
        "text": "Discourse?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Discourse?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1580789261.071900",
        "client_msg_id": "4d96e218-709d-4d81-98b6-cdbf9b323182",
        "text": "That indeed looks like the nicest option.. but it means I'd have to host it myself if I want to avoid paying 100$ per month",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6+S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That indeed looks like the nicest option.. but it means I'd have to host it myself if I want to avoid paying 100$ per month"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1580789387.072100",
        "client_msg_id": "bd26fb76-0818-40ea-8705-85f35104d022",
        "text": "A creative solution: use issues on a private github repo, since that only costs 7$ a month, and is frankly a pretty nice UI, programmer friendly, etc :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zdvmR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A creative solution: use issues on a private github repo, since that only costs 7$ a month, and is frankly a pretty nice UI, programmer friendly, etc "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580789425.072300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580789444.000000"
        },
        "client_msg_id": "2febc658-3c19-4e63-b1c9-9719dd187eda",
        "text": "Are you thinking about this in terms of.. what we should do for our community, instead of using Slack? If so.. are you aware of the survey? <http:\/\/bitly.com\/foc2020>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CrpE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you thinking about this in terms of.. what we should do for our community, instead of using Slack? If so.. are you aware of the survey? "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/bitly.com\/foc2020"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1580789542.072600",
        "client_msg_id": "f9c14abd-bebc-40b7-9d93-b63532b77301",
        "text": "No, I am asking this for an even smaller community of programmer friends of mine, not for FoC. But large enough that \"just use an email thread\" gets clumsy, especially with adding people, code etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580787337.071500",
        "parent_user_id": "UHDQ62M4P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWga",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, I am asking this for an even smaller community of programmer friends of mine, not for FoC. But large enough that \"just use an email thread\" gets clumsy, especially with adding people, code etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580798784.083500",
        "client_msg_id": "7DBAFF32-3978-4AFE-9F5E-692C001FB50E",
        "text": "Example: I have a UTF-8 encoded string that holds an XML document. I run a super-simple parser (scanner) over it that cuts it into .tag(String) and .text(String) values — all characters that used to be between &lt; and &gt; end up in .tags, everything else in .texts. Nothing more.\n\nNow in a separate step I take all the .tags and run another super-simple parser on the contents of each tag. If it starts with \/, the .tag is transformed into an .endTag, if not it’s transformed into a .startTag.\n\nIn another separate step I take all .startTags and run another super-simple parser on their contents to split tagName from attributes. Etc. You get the pattern.\n\nWhat weird way of parsing have I just reinvented?\nThis is not a quiz. I’m trying to figure out what this is called so I can search for articles that do something like this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580798784.083500",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1580881354.108500",
        "reply_users": [
            "UCUSW7WVD",
            "UA14TGLTC",
            "U5STGTB3J",
            "UC6997THT",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1580799883.083600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1580800020.083900"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1580802756.096000"
            },
            {
                "user": "UC6997THT",
                "ts": "1580804632.097700"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1580805354.101200"
            },
            {
                "user": "UC6997THT",
                "ts": "1580806712.102500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1580881354.108500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/mk6r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Example: I have a UTF-8 encoded string that holds an XML document. I run a super-simple parser (scanner) over it that cuts it into .tag(String) and .text(String) values — all characters that used to be between < and > end up in .tags, everything else in .texts. Nothing more.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Now in a separate step I take all the .tags and run another super-simple parser on the contents of each tag. If it starts with \/, the .tag is transformed into an .endTag, if not it’s transformed into a .startTag.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "In another separate step I take all .startTags and run another super-simple parser on their contents to split tagName from attributes. Etc. You get the pattern.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "What weird way of parsing have I just reinvented?\nThis is not a quiz. I’m trying to figure out what this is called so I can search for articles that do something like this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580799883.083600",
        "client_msg_id": "d6e9e809-9980-4ff2-b3ee-8296c60cc40f",
        "text": "You don't mention how you're managing all the .tags and .texts in step 1, all the .startTags and .endTags in step 2, and so on. For some answers to that question, this sounds like recursive descent.\n\n<https:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser>\n\nThis is probably the #1 way to hand-build parsers. Lots of languages either use it in their parsers or did at some point in the past. I'm _very_ partial to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580798784.083500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "Recursive descent parser",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In computer science, a recursive descent parser is a kind of top-down parser built from a set of mutually recursive procedures (or a non-recursive equivalent) where each such procedure implements one of the nonterminals of the grammar. Thus the structure of the resulting program closely mirrors that of the grammar it recognizes.A predictive parser is a recursive descent parser that does not require backtracking.  Predictive parsing is possible only for the class of LL(k) grammars, which are the context-free grammars for which there exists some positive integer k that allows a recursive descent parser to decide which production to use by examining only the next k tokens of input. The LL(k) grammars therefore exclude all ambiguous grammars, as well as all grammars that contain left recursion.  Any context-free grammar can be transformed into an equivalent grammar that has no left recursion, but removal of left recursion does not always yield an LL(k) grammar. A predictive parser runs in linear time.\nRecursive descent with backtracking is a technique that determines which production to use by trying each production in turn.  Recursive descent with backtracking is not limited to LL(k) grammars, but is not guaranteed to terminate unless the grammar is LL(k).  Even when they terminate, parsers that use recursive descent with backtracking may require exponential time.\nAlthough predictive parsers are widely used, and are frequently chosen if writing a parser by hand, programmers often prefer to use a table-based parser produced by a parser generator, either for an LL(k) language or using an alternative parser, such as LALR or LR. This is particularly the case if a grammar is not in LL(k) form, as transforming the grammar to LL to make it suitable for predictive parsing is involved. Predictive parsers can also be automatically generated, using tools like ANTLR.\nPredictive parsers can be depicted using transition diagrams for each non-terminal symbol where the edges between the initial and the final states are labelled by the symbols (terminals and non-terminals) of the right side of the production rule.",
                "fallback": "wikipedia: Recursive descent parser",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4thT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You don't mention how you're managing all the .tags and .texts in step 1, all the .startTags and .endTags in step 2, and so on. For some answers to that question, this sounds like recursive descent.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis is probably the #1 way to hand-build parsers. Lots of languages either use it in their parsers or did at some point in the past. I'm "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " partial to it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1580800020.083900",
        "client_msg_id": "8970ea2c-ddec-4f75-bd39-a45915fa5500",
        "text": "Yes, please someone answer.  I have certainly looked at this kind of serial tokenizer\/tree-transformer kind of thing before without reaching a clear notion that unifies with more conventional parsers and multipass stream transformation.  There's a connection to this sort of stream processing <http:\/\/reactivex.io\/> and Bidirectional Transformations of this type <https:\/\/2018.programming-conference.org\/track\/bx-2018-papers> and Nanopass compilers <https:\/\/nanopass.org\/>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580798784.083500",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "Bx 2018 - Seventh International Workshop on Bidirectional Transformations - ‹Programming› 2018",
                "title_link": "https:\/\/2018.programming-conference.org\/track\/bx-2018-papers",
                "text": "Bidirectional transformations (bx) are a mechanism for maintaining the consistency of at least two related sources of information. Such sources can be relational databases, software models and code, or any other document following standard or ad-hoc formats. Bx are an emerging topic in a wide range of research areas, with prominent presence at top conferences in several different fields (namely databases, programming languages, software engineering, and graph transformation), but with results in one field often getting limited exposure in the others. Bx 2018 is a dedicated venue for bx in ...",
                "fallback": "Bx 2018 - Seventh International Workshop on Bidirectional Transformations - ‹Programming› 2018",
                "image_url": "https:\/\/2018.programming-conference.org\/getImage\/carousel\/31332678290_70f970fedb_o.jpg?1490002141000",
                "from_url": "https:\/\/2018.programming-conference.org\/track\/bx-2018-papers",
                "image_width": 809,
                "image_height": 250,
                "image_bytes": 363500,
                "service_icon": "https:\/\/2018.programming-conference.org\/favicon.ico",
                "service_name": "2018.programming-conference.org",
                "id": 1,
                "original_url": "https:\/\/2018.programming-conference.org\/track\/bx-2018-papers"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3nc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, please someone answer.  I have certainly looked at this kind of serial tokenizer\/tree-transformer kind of thing before without reaching a clear notion that unifies with more conventional parsers and multipass stream transformation.  There's a connection to this sort of stream processing "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/reactivex.io\/"
                            },
                            {
                                "type": "text",
                                "text": " and Bidirectional Transformations of this type "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/2018.programming-conference.org\/track\/bx-2018-papers"
                            },
                            {
                                "type": "text",
                                "text": " and Nanopass compilers "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/nanopass.org\/"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580802756.096000",
        "client_msg_id": "78C79FD1-FC54-4F57-9254-5F43CA63E9E7",
        "text": "<@UA14TGLTC> Nanopass compilers, yay — that’s the kind of stuff I was looking for. You don’t happen to have looked into common patterns for parsing passes, robustness\/gracefully dealing with malformed input, concurrent parsing, or visualizing parsing passes as part of your explorations in that matter? And you also read my mind. Bidirectional Transforms is what I’m after.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580798784.083500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hLX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Nanopass compilers, yay — that’s the kind of stuff I was looking for. You don’t happen to have looked into common patterns for parsing passes, robustness\/gracefully dealing with malformed input, concurrent parsing, or visualizing parsing passes as part of your explorations in that matter? And you also read my mind. Bidirectional Transforms is what I’m after."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]