[
    {
        "user": "U07AR9MFUUF",
        "type": "message",
        "ts": "1720360934.437349",
        "client_msg_id": "513d08f1-61b2-4354-bdc9-a3f232b0ca69",
        "text": "All I know about robust computing comes from the Future of Coding episode on it, so this response is probably steeped in ignorance. One thing not mentioned in the episode is probabilistic algorithms. The usual setup is to assume a deterministic computer, and then introduce imperfect information (often via a hash function) giving a small probability of error but achieving a large reduction in time or space requirements. Perhaps the most used algorithm is [HyperLogLog](<https:\/\/en.wikipedia.org\/wiki\/HyperLogLog>), but I think [MinHash](<https:\/\/en.wikipedia.org\/wiki\/MinHash>) is particularly easy to understand. This isn't the same as assuming any part of the algorithm can fail, but it might provide a pathway to that model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g41992d29690",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/41992d2969009191f2393d210b681744.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Noel",
            "real_name": "Noel",
            "display_name": "Noel",
            "team": "T5TCAFTA9",
            "name": "noel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1720203029.699949",
        "parent_user_id": "U07BWTYKJQG",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gpbhS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All I know about robust computing comes from the Future of Coding episode on it, so this response is probably steeped in ignorance. One thing not mentioned in the episode is probabilistic algorithms. The usual setup is to assume a deterministic computer, and then introduce imperfect information (often via a hash function) giving a small probability of error but achieving a large reduction in time or space requirements. Perhaps the most used algorithm is [HyperLogLog]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/HyperLogLog"
                            },
                            {
                                "type": "text",
                                "text": "), but I think [MinHash]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/MinHash"
                            },
                            {
                                "type": "text",
                                "text": ") is particularly easy to understand. This isn't the same as assuming any part of the algorithm can fail, but it might provide a pathway to that model."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]