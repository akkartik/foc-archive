[
    {
        "user": "U04BFFZNGRY",
        "type": "message",
        "ts": "1682410847.535599",
        "client_msg_id": "1f1b63be-ca57-4cd8-b81b-37be32fe265a",
        "text": "I completely missed that sorry! Very cool indeed. using `in1` local variable is interesting. I didn’t think about it.\nThe vertical flow also seems to help with previewing intermediate values more easily but that probably require quite a lot of space",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "42f504b6e051",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-17\/4413245737648_42f504b6e051f54404f9_72.png",
            "first_name": "Jeremy",
            "real_name": "Jeremy Vuillermet",
            "display_name": "Jeremy Vuillermet",
            "team": "T5TCAFTA9",
            "name": "jeremy.vuillermet",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681247821.138909",
        "parent_user_id": "U04BFFZNGRY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l9RG5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I completely missed that sorry! Very cool indeed. using "
                            },
                            {
                                "type": "text",
                                "text": "in1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " local variable is interesting. I didn’t think about it.\nThe vertical flow also seems to help with previewing intermediate values more easily but that probably require quite a lot of space"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04BFFZNGRY",
        "type": "message",
        "ts": "1682411109.235499",
        "client_msg_id": "eead6f90-f8f6-478c-94bc-c88b852d6f78",
        "text": "Maybe I can only steal the color\/shape of block programming as a fancy syntax highlighter. The parenthesis can be scary and hard to manage",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "42f504b6e051",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-17\/4413245737648_42f504b6e051f54404f9_72.png",
            "first_name": "Jeremy",
            "real_name": "Jeremy Vuillermet",
            "display_name": "Jeremy Vuillermet",
            "team": "T5TCAFTA9",
            "name": "jeremy.vuillermet",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1681247821.138909",
        "parent_user_id": "U04BFFZNGRY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q0gC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe I can only steal the color\/shape of block programming as a fancy syntax highlighter. The parenthesis can be scary and hard to manage"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1682413543.865069",
        "client_msg_id": "204ffb73-3972-4957-8e7d-d0695e6e7d15",
        "text": "Are Scratch Broadcast blocks the same as 0D?\n\n<https:\/\/en.scratch-wiki.info\/wiki\/Broadcast_()_(block)>\n\nYes and No.\n\nTechnically, they are similar.\n\nPsychologically, the are not in the same ballpark.\n\nI argue that 0D (aka decoupling \/ aka necessary-condition-for-concurrency) needs to be driven deep into the notation and not added on as bag on the side.\n\nThere is a subtle difference between AX and DX (and UX) (Academic eXercise, Developer eXperience, User eXperience, resp.).  Just having a capability doesn’t necessarily mean that it will foment fresh ideas on solving problems.\n\nFor example, if only AX mattered, then everyone would be using Assembler instead of higher-level languages.  Or, everyone would use Lisp instead of ???.\n\nIf all you’ve got is a hammer, then everything looks like a nail.  If all you’ve got is Functions, then everything looks like an instantaneous function (timing looks to be irrelevant). [aside: one of the issues with making everything a Function is the “particle\/wave duality” of IF-THEN-ELSE.  In a Function, IF represents the conditional value of data.  In code, though, IF gets used way beyond its Functional meaning, leading to ad-hoc gotchas and pronouncements about State being bad,]\n\nThis statement in the above Scratch page...\n\n&gt; Recursion is a process where a script calls into itself. Broadcast scripts can perform a limited kind of recursion, called tail recursion, by broadcasting their own message at the end of the script, restarting the script and forming a loop.\n...means that Scratch got it wrong.  Recursion and message-sending are not the same thing.  Recursion is LIFO, whereas message-sending is FIFO. The above statement says that Scratch has tried to force a LIFO behaviour onto FIFO message-sending (that looks like the hammer-and-nail thing, again :-).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1682202201.849259",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "image_url": "https:\/\/en.scratch-wiki.info\/w\/images\/Wave_%28%29.jpg",
                "image_width": 95,
                "image_height": 49,
                "image_bytes": 8981,
                "from_url": "https:\/\/en.scratch-wiki.info\/wiki\/Broadcast_()_(block)",
                "service_icon": "https:\/\/en.scratch-wiki.info\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/en.scratch-wiki.info\/wiki\/Broadcast_()_(block)",
                "fallback": "Broadcast () (block) - Scratch Wiki",
                "title": "Broadcast () (block) - Scratch Wiki",
                "title_link": "https:\/\/en.scratch-wiki.info\/wiki\/Broadcast_()_(block)",
                "service_name": "en.scratch-wiki.info"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1z4op",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are Scratch Broadcast blocks the same as 0D?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.scratch-wiki.info\/wiki\/Broadcast_()_(block)"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYes and No.\n\nTechnically, they are similar.\n\nPsychologically, the are not in the same ballpark.\n\nI argue that 0D (aka decoupling \/ aka necessary-condition-for-concurrency) needs to be driven deep into the notation and not added on as bag on the side.\n\nThere is a subtle difference between AX and DX (and UX) (Academic eXercise, Developer eXperience, User eXperience, resp.).  Just having a capability doesn’t necessarily mean that it will foment fresh ideas on solving problems.\n\nFor example, if only AX mattered, then everyone would be using Assembler instead of higher-level languages.  Or, everyone would use Lisp instead of ???.\n\nIf all you’ve got is a hammer, then everything looks like a nail.  If all you’ve got is Functions, then everything looks like an instantaneous function (timing looks to be irrelevant). [aside: one of the issues with making everything a Function is the “particle\/wave duality” of IF-THEN-ELSE.  In a Function, IF represents the conditional value of data.  In code, though, IF gets used way beyond its Functional meaning, leading to ad-hoc gotchas and pronouncements about State being bad,]\n\nThis statement in the above Scratch page...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recursion is a process where a script calls into itself. Broadcast scripts can perform a limited kind of recursion, called tail recursion, by broadcasting their own message at the end of the script, restarting the script and forming a loop."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n...means that Scratch got it wrong.  Recursion and message-sending are not the same thing.  Recursion is LIFO, whereas message-sending is FIFO. The above statement says that Scratch has tried to force a LIFO behaviour onto FIFO message-sending (that looks like the hammer-and-nail thing, again :-)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]