[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1633867518.292200",
        "client_msg_id": "a8b3c783-65de-4d95-96f7-e267188ae40e",
        "text": "for now they are links to allow them to iterate on the tasks without asking me to update the page, at some point (soon) I can add them to the page",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mru38",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for now they are links to allow them to iterate on the tasks without asking me to update the page, at some point (soon) I can add them to the page"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1633875739.292400",
        "client_msg_id": "8c5b0de1-8d35-4d06-a926-b730ef60a361",
        "text": "Ah that makes sense.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MbYWf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah that makes sense."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1633887556.292700",
        "client_msg_id": "f4536f6c-a0c3-4c30-abc7-fd7b6b95299d",
        "text": "Created <https:\/\/github.com\/marianoguerra\/marianoguerra.github.io\/issues\/4>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SjJ7k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Created "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/marianoguerra\/marianoguerra.github.io\/issues\/4"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1633890368.293000",
        "client_msg_id": "3157f767-728a-45c8-a628-1358800e86ef",
        "text": "I've opened a ticket each on the other two projects participating so far, after running into some blocking issues in trying them out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1631829268.080200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s41",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've opened a ticket each on the other two projects participating so far, after running into some blocking issues in trying them out."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633919351.305800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633990848.000000"
        },
        "client_msg_id": "c6d9dc7e-e73b-4da1-8a76-f7cda17b03b8",
        "text": "*Heretical idea:* a function call syntax where the function name can appear anywhere in the call.\n\nFirst, presume we're using Haskell-style syntax, so that `f(2,3)` (C-style) is written as `f 2 3` (Haskell-style). Second, presume that parameters (in function signatures) must be prefixed with a `&amp;` symbol (or whatever symbol you prefer; we'll need this later), so the definition of `f` would look something like `f &amp;x &amp;y = ...`. Now, imagine the _definer_ of the function can choose where the function name is supposed to appear. So we could define the function f in several ways:\n• `f &amp;x &amp;y =` , in which case a function call would look like `f 2 3`\n• `&amp;x f &amp;y =` , in which case a function call would look like `2 f 3`\n• `&amp;x &amp;y f =`, in which case a function call would look like `2 3 f`\nWhy would we want a syntax like this? Many reasons.\n\n1. We get infix operators for free:\n• `&amp;x + &amp;y =` \n• `&amp;x mod &amp;y =`\n2. We can have multi-word function names:\n• `&amp;x is less than &amp;y =`\n• `if &amp;cond then &amp;a else &amp;b =`\n3. This syntax erases the distinction between defining three separate functions returning one value each, and defining one function returning a record with three fields. I think this is nice; the distinction seemed arbitrary in the first place! Reducing the number of superficial choices a programmer needs to make helps reduce the cognitive burden of programming.\n\nAnd probably more things :slightly_smiling_face:.\n\nWhat are the downsides of this syntax?\n• Some of the \"classic\" syntax of programming languages now becomes ambiguous. In particular, we hit ambiguities when passing functions around as values. In Haskell you can write expressions like `map f list` where f is a function being passed as an argument. Given we could now define `f` as an infix or postfix function (see earlier), we need to make sure that we can _refer_ to the function in an unambiguous manner. We could do this by writing something like `map (. f .) list` where the `.` symbol means an unbound parameter. For the multi-word functions, you'd write `map (. is less than 5) list`\n• There are a few other potential issues I'm working out.\nRegardless, this seems like an interesting idea, right? :slightly_smiling_face: How do people feel about it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "reply_count": 60,
        "reply_users_count": 11,
        "latest_reply": "1634568735.400500",
        "reply_users": [
            "ULYDR7EP3",
            "UCGAK10LS",
            "UJ6LDMMN0",
            "UQ706GB9U",
            "UJBAJNFLK",
            "UBN9AFS0N",
            "U027P92A0N5",
            "U02FYPLHU67",
            "U01AD80KMLK",
            "UMVFWPZ36",
            "UE6EFEPTQ"
        ],
        "replies": [
            {
                "user": "ULYDR7EP3",
                "ts": "1633926081.306800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633926285.307000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633926372.307200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633926391.307400"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633926856.307700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633927023.310100"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633927189.310600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633927257.311800"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633927480.312000"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1633927532.312300"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1633927633.312500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1633927941.312800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633928669.313100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633929705.313700"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1633930016.315600"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1633932480.316200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633932608.318500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1633933358.318900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1633940541.319300"
            },
            {
                "user": "U027P92A0N5",
                "ts": "1633945505.320100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1633946551.320300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1633946599.320500"
            },
            {
                "user": "U02FYPLHU67",
                "ts": "1633951807.321000"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633957607.322100"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633957771.322300"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1633989791.322600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633991515.323000"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1633991584.323200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633991647.323400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633992465.323600"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633993018.324100"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633993107.324300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633993341.324500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633993514.324700"
            },
            {
                "user": "ULYDR7EP3",
                "ts": "1633995899.324900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1633997151.325200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1634015682.325500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634027488.325700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634027774.325900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634027813.326100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1634027883.326300"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1634053471.326600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1634101466.327500"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1634171771.336800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634235182.341200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1634250944.354000"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634280378.356700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1634280553.358100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1634280599.359500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634290940.360300"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634291402.360500"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634291787.360700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634292338.360900"
            },
            {
                "user": "U027P92A0N5",
                "ts": "1634546205.393800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634563778.398700"
            },
            {
                "user": "U027P92A0N5",
                "ts": "1634565644.399100"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634567169.399300"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634567226.399500"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1634567511.399700"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1634568735.400500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q7oe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heretical idea:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a function call syntax where the function name can appear anywhere in the call.\n\nFirst, presume we're using Haskell-style syntax, so that "
                            },
                            {
                                "type": "text",
                                "text": "f(2,3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (C-style) is written as "
                            },
                            {
                                "type": "text",
                                "text": "f 2 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (Haskell-style). Second, presume that parameters (in function signatures) must be prefixed with a "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " symbol (or whatever symbol you prefer; we'll need this later), so the definition of "
                            },
                            {
                                "type": "text",
                                "text": "f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would look something like "
                            },
                            {
                                "type": "text",
                                "text": "f &x &y = ...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Now, imagine the "
                            },
                            {
                                "type": "text",
                                "text": "definer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the function can choose where the function name is supposed to appear. So we could define the function f in several ways:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "f &x &y =",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , in which case a function call would look like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "f 2 3",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "&x f &y =",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , in which case a function call would look like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "2 f 3",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "&x &y f =",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", in which case a function call would look like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "2 3 f",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhy would we want a syntax like this? Many reasons.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We get infix operators for free:"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "&x + &y =",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "&x mod &y =",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n2. We can have multi-word function names:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "&x is less than &y =",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "if &cond then &a else &b =",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n3. This syntax erases the distinction between defining three separate functions returning one value each, and defining one function returning a record with three fields. I think this is nice; the distinction seemed arbitrary in the first place! Reducing the number of superficial choices a programmer needs to make helps reduce the cognitive burden of programming.\n\nAnd probably more things "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nWhat are the downsides of this syntax?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Some of the \"classic\" syntax of programming languages now becomes ambiguous. In particular, we hit ambiguities when passing functions around as values. In Haskell you can write expressions like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "map f list",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " where f is a function being passed as an argument. Given we could now define "
                                    },
                                    {
                                        "type": "text",
                                        "text": "f",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " as an infix or postfix function (see earlier), we need to make sure that we can "
                                    },
                                    {
                                        "type": "text",
                                        "text": "refer",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " to the function in an unambiguous manner. We could do this by writing something like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "map (. f .) list",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " where the "
                                    },
                                    {
                                        "type": "text",
                                        "text": ".",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " symbol means an unbound parameter. For the multi-word functions, you'd write "
                                    },
                                    {
                                        "type": "text",
                                        "text": "map (. is less than 5) list",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "There are a few other potential issues I'm working out."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nRegardless, this seems like an interesting idea, right? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " How do people feel about it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0",
                    "UC2A2ARPT",
                    "UU45NNMHT",
                    "U79HM6726"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633926081.306800",
        "client_msg_id": "646988da-3489-49be-a2ea-aa8a9f04f1ec",
        "text": "I think you will open up for a lot of ambiguities. It might be necessary to protect against them by automatic means, like Bison does.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PmM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you will open up for a lot of ambiguities. It might be necessary to protect against them by automatic means, like Bison does."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633926285.307000",
        "client_msg_id": "aef5ba8e-7cac-4921-b898-dac6ed2ea873",
        "text": "Yeah, I'm taking that as a challenge. If I can find an unambiguous syntax and semantics, the payoff could be huge :slightly_smiling_face:. Think about all the fun natural-language tricks you could do when defining functions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P2K93",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I'm taking that as a challenge. If I can find an unambiguous syntax and semantics, the payoff could be huge "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". Think about all the fun natural-language tricks you could do when defining functions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633926372.307200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633926417.000000"
        },
        "client_msg_id": "93847e7f-99fe-4b64-b76a-b588bc661be0",
        "text": "One constraint I'm going to be using is to demand each \"function call\" be delimited by brackets `(...)`. The contents of every pair of brackets will need to fit a function signature *exactly* (not a prefix or a subset of it). That means there will be no concept of operator precedence or associativity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/lP3M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One constraint I'm going to be using is to demand each \"function call\" be delimited by brackets "
                            },
                            {
                                "type": "text",
                                "text": "(...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The contents of every pair of brackets will need to fit a function signature "
                            },
                            {
                                "type": "text",
                                "text": "exactly",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(not a prefix or a subset of it). That means there will be no concept of operator precedence or associativity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633926391.307400",
        "client_msg_id": "a453f629-257b-4e1a-a93c-17f71db2680d",
        "text": "But I may be able to recover associativity by adding a separate feature that captures it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Khbx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I may be able to recover associativity by adding a separate feature that captures it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633926856.307700",
        "client_msg_id": "9b47e265-d8db-4105-88d2-f8b4ad79e07c",
        "text": "Multi-word function names look cool, but I'm not sure they are useful. For example, wouldn't your if...then...else function always evaluate all three arguments? Many lisps implement DSLs using macros, including some that appear more like English sentences, e.g. the Common Lisp loop macro (see <http:\/\/cl-cookbook.sourceforge.net\/loop.html|http:\/\/cl-cookbook.sourceforge.net\/loop.html>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eBaY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Multi-word function names look cool, but I'm not sure they are useful. For example, wouldn't your if...then...else function always evaluate all three arguments? Many lisps implement DSLs using macros, including some that appear more like English sentences, e.g. the Common Lisp loop macro (see "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cl-cookbook.sourceforge.net\/loop.html",
                                "text": "http:\/\/cl-cookbook.sourceforge.net\/loop.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633927023.310100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633927037.000000"
        },
        "client_msg_id": "03F3AF64-45C0-4677-B0D4-E45F78BA3AFC",
        "text": "The syntax concept I’m presenting can be contemplated separately from the operational semantics of the language. So it could be lazy, or strict :woman-shrugging:. I have some ideas about the semantics I want, but that’s for a separate thread :slightly_smiling_face:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d56C4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The syntax concept I’m presenting can be contemplated separately from the operational semantics of the language. So it could be lazy, or strict "
                            },
                            {
                                "type": "emoji",
                                "name": "woman-shrugging",
                                "unicode": "1f937-200d-2640-fe0f"
                            },
                            {
                                "type": "text",
                                "text": ". I have some ideas about the semantics I want, but that’s for a separate thread "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULYDR7EP3",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633927189.310600",
        "client_msg_id": "09b25166-5002-4311-aafc-bb44b29ed383",
        "text": "Ah, with parenthesis around every call, you might be halfway there. Will you use the `&amp;` prefix for every argument in function calls also?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F+e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, with parenthesis around every call, you might be halfway there. Will you use the "
                            },
                            {
                                "type": "text",
                                "text": "&",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " prefix for every argument in function calls also?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633927257.311800",
        "client_msg_id": "66D7785B-BE35-409F-887C-25A9587B95AC",
        "text": "Nah, I think the prefix is only necessary to disambiguate the definitions. It shouldn’t be necessary at the call site!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dzZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nah, I think the prefix is only necessary to disambiguate the definitions. It shouldn’t be necessary at the call site!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULYDR7EP3",
        "type": "message",
        "ts": "1633927480.312000",
        "client_msg_id": "b1016be8-ace2-4fd4-8173-a91871e08e99",
        "text": "Consider any user defined functions `(fun1 &amp;X &amp;Y)` and `(&amp;X fun2 &amp;Y)`. What prevents the user from naming variables to make the ambiguous call `(fun1 fun2 var3)`?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g9ad76d000ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/59ad76d000ca1de86487e8af9da74f72.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Axel Svensson",
            "display_name": "Axel Svensson",
            "team": "T5TCAFTA9",
            "name": "mail052",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J1xy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider any user defined functions "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 &X &Y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "(&X fun2 &Y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". What prevents the user from naming variables to make the ambiguous call "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 fun2 var3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0245E9RB2B"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "I played a bit with this idea few years ago, to use \"symbols with spaces\" for JavaScript functions. And I ended using parenthesis I also tried some other weird symbols, just to see if I can find one which is better visually (but failed).\n\n<https:\/\/stackblitz.com\/edit\/symbols-with-space>",
        "files": [
            {
                "id": "F02H3NPEV8W",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F02HAFD8CUB",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fbhn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I played a bit with this idea few years ago, to use \"symbols with spaces\" for JavaScript functions. And I ended using parenthesis I also tried some other weird symbols, just to see if I can find one which is better visually (but failed).\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackblitz.com\/edit\/symbols-with-space"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1633927532.312300",
        "client_msg_id": "ec9cf555-aff2-49d2-9ccb-68664322fac9",
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1633927633.312500",
        "client_msg_id": "fb44a16f-812b-41e2-93f8-603fc4d53eed",
        "text": "I once thought to use a syntax like the_product_of_$1_by_$2 for the name of the function, to tell where exactly you take the parameters.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i3I2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I once thought to use a syntax like the_product_of_$1_by_$2 for the name of the function, to tell where exactly you take the parameters."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "On this topic, maybe some inspiration can be taken from the text language to specify Scratch Blocks program using text. Which is only used on the Scratch forum. It is interesting that it is not a text language that is designed to be executed directly, only to generate an image of a Scratch Program that might be executed (or not).\n<https:\/\/en.scratch-wiki.info\/wiki\/Block_Plugin\/Syntax>",
        "files": [
            {
                "id": "F02HCM69FRS",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UJ6LDMMN0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TG8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On this topic, maybe some inspiration can be taken from the text language to specify Scratch Blocks program using text. Which is only used on the Scratch forum. It is interesting that it is not a text language that is designed to be executed directly, only to generate an image of a Scratch Program that might be executed (or not).\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.scratch-wiki.info\/wiki\/Block_Plugin\/Syntax"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1633927941.312800",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1633927977.000000"
        },
        "client_msg_id": "96f5919f-cd4a-48f7-abda-5aa4558f2e9e",
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS",
                    "U01ULEWACPP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633928669.313100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633931045.000000"
        },
        "client_msg_id": "068f50ab-68aa-4dbb-bf17-9a993191c766",
        "text": "<@ULYDR7EP3>\n&gt; Consider any user defined functions `(fun1 &amp;X &amp;Y)` and `(&amp;X fun2 &amp;Y)`. What prevents the user from naming variables to make the ambiguous call `(fun1 fun2 var3)`?\nThere should be some rules for how and when names\/words can be re-used. The simplest is probably that if a word appears in a function name, then it can't also be the _full_ name of a variable (nullary function).\n\nAssuming `fun1` and `fun2` aren't pre-defined variables, your example doesn't violate the aforementioned rule. However, that call would match nothing, so you'd get a compile time error.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xa+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULYDR7EP3"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider any user defined functions "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 &X &Y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "(&X fun2 &Y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". What prevents the user from naming variables to make the ambiguous call "
                            },
                            {
                                "type": "text",
                                "text": "(fun1 fun2 var3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere should be some rules for how and when names\/words can be re-used. The simplest is probably that if a word appears in a function name, then it can't also be the "
                            },
                            {
                                "type": "text",
                                "text": "full",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " name of a variable (nullary function).\n\nAssuming "
                            },
                            {
                                "type": "text",
                                "text": "fun1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "fun2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " aren't pre-defined variables, your example doesn't violate the aforementioned rule. However, that call would match nothing, so you'd get a compile time error."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633929705.313700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633930404.000000"
        },
        "client_msg_id": "834f7c03-7cd3-4621-b566-a0fa3870e656",
        "text": "<@UJ6LDMMN0> Cool! There are probably a million directions you can go with the idea of space-separated symbols, especially if you start treating them as *lists*, i.e. data, as Lisp does. I'm being conservative right now though, and just thinking about this as a \"generalized function call syntax\".\n\nI'm going to check out that Scratch syntax :slightly_smiling_face:.\n\n(Regarding brackets: I actually prefer the _square_ bracket syntax partly because it's list-like, but also because you don't have to hold shift to type them :innocent:).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iml",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": " Cool! There are probably a million directions you can go with the idea of space-separated symbols, especially if you start treating them as "
                            },
                            {
                                "type": "text",
                                "text": "lists",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", i.e. data, as Lisp does. I'm being conservative right now though, and just thinking about this as a \"generalized function call syntax\".\n\nI'm going to check out that Scratch syntax "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ".\n\n(Regarding brackets: I actually prefer the "
                            },
                            {
                                "type": "text",
                                "text": "square",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " bracket syntax partly because it's list-like, but also because you don't have to hold shift to type them "
                            },
                            {
                                "type": "emoji",
                                "name": "innocent",
                                "unicode": "1f607"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1633930016.315600",
        "client_msg_id": "6B19F98A-CA88-4920-A12A-967C3072507B",
        "text": "Check out objective-c’s inline arguments function syntax. <https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm|https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm>\n\n`(int)max:(int)num1 andNum:(int)num2 {…}`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "title": "Objective-C Functions",
                "title_link": "https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm",
                "text": "Objective-C Functions, A function is a group of statements that together perform a task. Every Objective-C program has one C function, which is main(), and all of the most trivial pro",
                "fallback": "Objective-C Functions",
                "from_url": "https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm",
                "service_icon": "https:\/\/www.tutorialspoint.com\/favicon.ico",
                "service_name": "tutorialspoint.com",
                "id": 1,
                "original_url": "https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SnXA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Check out objective-c’s inline arguments function syntax. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm",
                                "text": "https:\/\/www.tutorialspoint.com\/objective_c\/objective_c_functions.htm"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(int)max:(int)num1 andNum:(int)num2 {…}",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "&gt; (Regarding brackets: I actually prefer the _square_ bracket syntax partly because it's list-like, but also because you don't have to hold shift to type them :innocent:)\nThat depends on your keyboard layout. On mine (AZERTY, French), it is the parenthesis that don't need extra key and *both* curly and square brackets require \"Atl-Gr\" key. Which is annoying when you code and that's why some French devs prefer using a qwerty keyboard (so without \"éàè...\" keys).",
        "files": [
            {
                "id": "F02HAL05L1Z",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UJ6LDMMN0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A9M",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Regarding brackets: I actually prefer the "
                            },
                            {
                                "type": "text",
                                "text": "square",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " bracket syntax partly because it's list-like, but also because you don't have to hold shift to type them "
                            },
                            {
                                "type": "emoji",
                                "name": "innocent",
                                "unicode": "1f607"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That depends on your keyboard layout. On mine (AZERTY, French), it is the parenthesis that don't need extra key and "
                            },
                            {
                                "type": "text",
                                "text": "both",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " curly and square brackets require \"Atl-Gr\" key. Which is annoying when you code and that's why some French devs prefer using a qwerty keyboard (so without \"éàè...\" keys)."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1633932480.316200",
        "client_msg_id": "d1cb8f8c-2ea5-4ad5-a0a4-86e9abb1a842",
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1633932608.318500",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1633932730.000000"
        },
        "client_msg_id": "0C22C34E-5993-41D7-84E9-DF8E2362B4B9",
        "text": "Ah, I didn’t realise they did that for brackets! I’d love to get some statistics on (for each ASCII symbol) the percentage of people on earth who can type that symbol without any modifier keys :face_with_monocle:.\n\nIt’s really important for a language designer to know :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CFVLv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I didn’t realise they did that for brackets! I’d love to get some statistics on (for each ASCII symbol) the percentage of people on earth who can type that symbol without any modifier keys "
                            },
                            {
                                "type": "emoji",
                                "name": "face_with_monocle",
                                "unicode": "1f9d0"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nIt’s really important for a language designer to know "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1633933358.318900",
        "client_msg_id": "88dde1ac-eb8c-4f5b-886e-7ac72b6ba6aa",
        "text": "I wanted something like this for my digital scientific notation Leibniz (<https:\/\/github.com\/khinsen\/leibniz>) and found it very easy to implement since Leibniz is a term rewriting system. There are no function calls, only rewrite rules, so it's no problem to make the equivalent of function-call syntax function-specific.\n\nFor the parenthesis issue, I adopted a feature from the Pyret language (<https:\/\/www.pyret.org\/index.html>): it requires parenthesis around any operator\/function call, the one exception being chained use of the same operator. So you can write `2 + 3 + 4`, meaning `(2 + 3) + 4`, which is the most frequent situation where parenthesis can become visually dominant.\n\nIt looks to me as if this approach could be transposed to more standard programming languages, but that's a bit outside of my expertise.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1633919351.305800",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "GitHub - khinsen\/leibniz: A Digital Scientific Notation",
                "title_link": "https:\/\/github.com\/khinsen\/leibniz",
                "text": "A Digital Scientific Notation. Contribute to khinsen\/leibniz development by creating an account on GitHub.",
                "fallback": "GitHub: GitHub - khinsen\/leibniz: A Digital Scientific Notation",
                "image_url": "https:\/\/opengraph.githubassets.com\/70973b9d1593193a81257253be92fd172772420d55d603f4122228b2995f6282\/khinsen\/leibniz",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https:\/\/github.com\/khinsen\/leibniz",
                "image_bytes": 93801,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/khinsen\/leibniz"
            },
            {
                "title": "The Pyret Programming Language",
                "title_link": "https:\/\/www.pyret.org\/index.html",
                "text": "...",
                "fallback": "The Pyret Programming Language",
                "thumb_url": "http:\/\/www.pyret.org\/img\/pyret-logo.png",
                "from_url": "https:\/\/www.pyret.org\/index.html",
                "thumb_width": 501,
                "thumb_height": 488,
                "service_icon": "https:\/\/www.pyret.org\/img\/pyret-icon.png",
                "service_name": "pyret.org",
                "id": 2,
                "original_url": "https:\/\/www.pyret.org\/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fptb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wanted something like this for my digital scientific notation Leibniz ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/khinsen\/leibniz"
                            },
                            {
                                "type": "text",
                                "text": ") and found it very easy to implement since Leibniz is a term rewriting system. There are no function calls, only rewrite rules, so it's no problem to make the equivalent of function-call syntax function-specific.\n\nFor the parenthesis issue, I adopted a feature from the Pyret language ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.pyret.org\/index.html"
                            },
                            {
                                "type": "text",
                                "text": "): it requires parenthesis around any operator\/function call, the one exception being chained use of the same operator. So you can write "
                            },
                            {
                                "type": "text",
                                "text": "2 + 3 + 4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", meaning "
                            },
                            {
                                "type": "text",
                                "text": "(2 + 3) + 4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is the most frequent situation where parenthesis can become visually dominant.\n\nIt looks to me as if this approach could be transposed to more standard programming languages, but that's a bit outside of my expertise."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]