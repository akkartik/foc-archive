[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1751237864.387259",
        "client_msg_id": "f19870c8-b480-4e37-9b08-346f1328f8ac",
        "text": "Extended quote from this link that I really liked:\n\n&gt; Despite studies released since 1985 that clearly demonstrate GUIs are not necessarily easier to learn or use than command-line interfaces, ... ‘user-friendly’ now takes the shape of keeping users steadfastly unaware and uninformed about how their computers, their reading\/writing interfaces, work let alone how they shape and determine their access to knowledge and their ability to produce knowledge. As Wendy Chun points out, the user-friendly system is one in which users are, on the one hand, given the ability to “map, to zoom in and out, to manipulate, and to act” but the result is a “seemingly sovereign individual” who is mostly a devoted consumer of ready-made software and ready-made information whose framing and underlying mechanisms we are not privy to.\n&gt; \n&gt; However, it’s not necessarily the GUI per se that is responsible for the creation of Chun’s “seemingly sovereign individual” but rather a particular philosophy of computing and design underlying a model of the GUI that has become the standard for nearly all interface design. The earliest example of a GUI-like interface whose philosophy is fundamentally different from that of the Macintosh is Douglas Engelbart’s NLS or “oN-Line System” which he began work on in 1962 and famously demonstrated in 1968. While his “interactive, multi-console computer-display system” with keyboard, screen, mouse, and something he called a chord handset is commonly cited as the originator of the GUI, Engelbart wasn’t so much interested in creating a user-friendly machine as he was invested in “augmenting human intellect”. As he first put it in 1962, this augmentation meant “increasing the capability of a man to approach a complex problem situation, to gain comprehension to suit his particular needs, and to derive solutions to problems”. The NLS was not about providing users with ready-made software and tools from which they choose or consume but rather it was about bootstrapping, or “the creation of tools for expert computer users” and providing the means for users to create better tools, or tools better suited for their own individual needs. We can see this emphasis on tool-building and customization that comes out of an augmented intellect in Engelbart’s provision of “view-control” (which allows users to determine how much text they see on the screen as well as the form of that view) and “chains of views” (which allows the user to link related files) in his document editing program.\n&gt; \n&gt; ...\n&gt; \n&gt; ..the significance of the Star is partly the indisputable impact it had on the GUI design of first the Apple Lisa and then the Macintosh; its significance is also in the way in which it was clearly labeled a work-station for “business professionals who handle information” rather than a metamedium or a tool for creating or even thinking about thinking. And in fact, the Star’s interface — which was the first commercially available computer born out of work by Engelbart, Papert and Kay that attempted to satisfy both novice and expert users in providing an open, extensible, flexible environment and that also happened to be graphical — was conflicted at its core. While in some ways the Star was philosophically very much in line with the open thinking of Engelbart, Papert, and Kay, in other ways its philosophy as much as its GUI directly paved the way to the closed architecture and consumption-based design of the Macintosh. Take for example the overall design principles of the Star which were aimed at making the system seem “familiar and friendly.”\n&gt; \n&gt; _Easy Hard_\n&gt; \n&gt; concrete abstract\n&gt; visible invisible\n&gt; copying creating\n&gt; choosing filling in\n&gt; recognizing generating\n&gt; editing programming\n&gt; interactive batch\n&gt; \n&gt; Star designers also avowed to avoid the characteristics they list on the right while adhering to a schema that exemplifies the characteristics listed on the left. While there’s little doubt that ease-of-use was of central importance to Engelbart, Papert and Kay — often brought about through interactivity and making computer operations and commands visible — the avoidance of “creating,” “generating,” or “programming” couldn’t be further from their vision of the future of computing. At the same time as the Star forecloses on creating, generating, and programming through its highly restrictive set of commands in the name of simplicity, it also wants to promote users’ understanding of the system as a whole — although, again, we can see this particular incarnation of the GUI represents the beginning of a shift toward only a superficial understanding of the system. Without a fully open, flexible, and extensible architecture, the home computer becomes less a tool for learning and creativity and more a tool for simply “handling information.”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1751099892.232169",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DS0yM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Extended quote from this link that I really liked:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Despite studies released since 1985 that clearly demonstrate GUIs are not necessarily easier to learn or use than command-line interfaces, ... ‘user-friendly’ now takes the shape of keeping users steadfastly unaware and uninformed about how their computers, their reading\/writing interfaces, work let alone how they shape and determine their access to knowledge and their ability to produce knowledge. As Wendy Chun points out, the user-friendly system is one in which users are, on the one hand, given the ability to “map, to zoom in and out, to manipulate, and to act” but the result is a “seemingly sovereign individual” who is mostly a devoted consumer of ready-made software and ready-made information whose framing and underlying mechanisms we are not privy to.\n\nHowever, it’s not necessarily the GUI per se that is responsible for the creation of Chun’s “seemingly sovereign individual” but rather a particular philosophy of computing and design underlying a model of the GUI that has become the standard for nearly all interface design. The earliest example of a GUI-like interface whose philosophy is fundamentally different from that of the Macintosh is Douglas Engelbart’s NLS or “oN-Line System” which he began work on in 1962 and famously demonstrated in 1968. While his “interactive, multi-console computer-display system” with keyboard, screen, mouse, and something he called a chord handset is commonly cited as the originator of the GUI, Engelbart wasn’t so much interested in creating a user-friendly machine as he was invested in “augmenting human intellect”. As he first put it in 1962, this augmentation meant “increasing the capability of a man to approach a complex problem situation, to gain comprehension to suit his particular needs, and to derive solutions to problems”. The NLS was not about providing users with ready-made software and tools from which they choose or consume but rather it was about bootstrapping, or “the creation of tools for expert computer users” and providing the means for users to create better tools, or tools better suited for their own individual needs. We can see this emphasis on tool-building and customization that comes out of an augmented intellect in Engelbart’s provision of “view-control” (which allows users to determine how much text they see on the screen as well as the form of that view) and “chains of views” (which allows the user to link related files) in his document editing program.\n\n...\n\n..the significance of the Star is partly the indisputable impact it had on the GUI design of first the Apple Lisa and then the Macintosh; its significance is also in the way in which it was clearly labeled a work-station for “business professionals who handle information” rather than a metamedium or a tool for creating or even thinking about thinking. And in fact, the Star’s interface — which was the first commercially available computer born out of work by Engelbart, Papert and Kay that attempted to satisfy both novice and expert users in providing an open, extensible, flexible environment and that also happened to be graphical — was conflicted at its core. While in some ways the Star was philosophically very much in line with the open thinking of Engelbart, Papert, and Kay, in other ways its philosophy as much as its GUI directly paved the way to the closed architecture and consumption-based design of the Macintosh. Take for example the overall design principles of the Star which were aimed at making the system seem “familiar and friendly.”\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Easy Hard",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nconcrete abstract\nvisible invisible\ncopying creating\nchoosing filling in\nrecognizing generating\nediting programming\ninteractive batch\n\nStar designers also avowed to avoid the characteristics they list on the right while adhering to a schema that exemplifies the characteristics listed on the left. While there’s little doubt that ease-of-use was of central importance to Engelbart, Papert and Kay — often brought about through interactivity and making computer operations and commands visible — the avoidance of “creating,” “generating,” or “programming” couldn’t be further from their vision of the future of computing. At the same time as the Star forecloses on creating, generating, and programming through its highly restrictive set of commands in the name of simplicity, it also wants to promote users’ understanding of the system as a whole — although, again, we can see this particular incarnation of the GUI represents the beginning of a shift toward only a superficial understanding of the system. Without a fully open, flexible, and extensible architecture, the home computer becomes less a tool for learning and creativity and more a tool for simply “handling information.”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    }
]