[
    {
        "user": "UP00ZLX6G",
        "type": "message",
        "ts": "1713251225.596079",
        "edited": {
            "user": "UP00ZLX6G",
            "ts": "1713251330.000000"
        },
        "client_msg_id": "d6bf3d2d-3cd9-4e4d-a25e-b203a74ab5b8",
        "text": "Currently it’s actually quite versatile in being able to be a button, pressure sensor, and bend sensor, I’m thinking if I duplicate the circuitry with a matrix of them, it could be a trackpad of sorts but on non-flat surfaces. I think that kind of sensing fits textile materials best. Maybe a stretch sensor would be neat too. Did you have any sensors in mind <@U062UBBB7M5>?\n\nI’ve sent you this Dan, but this is a <https:\/\/www.kobakant.at\/DIY\/?cat=26|great treasure trove of ideas for etextile sensors> for anyone else interested.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbf26b30edd8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bf26b30edd8ed78a32e08172b3ffab4a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Tak Tran",
            "display_name": "Tak Tran",
            "team": "T5TCAFTA9",
            "name": "contact584",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713220604.752629",
        "parent_user_id": "UP00ZLX6G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VsbJ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently it’s actually quite versatile in being able to be a button, pressure sensor, and bend sensor, I’m thinking if I duplicate the circuitry with a matrix of them, it could be a trackpad of sorts but on non-flat surfaces. I think that kind of sensing fits textile materials best. Maybe a stretch sensor would be neat too. Did you have any sensors in mind "
                            },
                            {
                                "type": "user",
                                "user_id": "U062UBBB7M5"
                            },
                            {
                                "type": "text",
                                "text": "?\n\nI’ve sent you this Dan, but this is a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.kobakant.at\/DIY\/?cat=26",
                                "text": "great treasure trove of ideas for etextile sensors"
                            },
                            {
                                "type": "text",
                                "text": " for anyone else interested."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713318208.682589",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1713318259.000000"
        },
        "client_msg_id": "35d0550e-1a38-4bf5-9606-cc4f53697a34",
        "text": "I <https:\/\/mastodon.social\/@spiralganglion\/112282956696254310|shared> some <https:\/\/mastodon.social\/@spiralganglion\/112284014138207711|thoughts> about _my personal definition of_ reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function — should have said _nonnegative_ integers.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "reply_count": 26,
        "reply_users_count": 5,
        "latest_reply": "1713591339.411189",
        "reply_users": [
            "UC2A2ARPT",
            "UBKNXPBAB",
            "UFEQUBNNT",
            "U03U0SCU5LH",
            "U05M5A8E0NT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1713318301.099399"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713319111.937689"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713319549.627229"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713319705.525409"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1713320124.991859"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713320395.683039"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322524.776679"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322684.191979"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322730.046299"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322774.480529"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322823.630219"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322905.143559"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1713322960.738919"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1713326275.312469"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713329565.009479"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1713330013.443849"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713330253.154719"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713330394.188529"
            },
            {
                "user": "U03U0SCU5LH",
                "ts": "1713423835.628819"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713444561.751939"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713586666.762849"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713587032.295439"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713588712.852449"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713590248.138629"
            },
            {
                "user": "U05M5A8E0NT",
                "ts": "1713590303.938349"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1713591339.411189"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iohvs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mastodon.social\/@spiralganglion\/112282956696254310",
                                "text": "shared"
                            },
                            {
                                "type": "text",
                                "text": " some "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mastodon.social\/@spiralganglion\/112284014138207711",
                                "text": "thoughts"
                            },
                            {
                                "type": "text",
                                "text": " about "
                            },
                            {
                                "type": "text",
                                "text": "my personal definition of",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reversible computing over on Mastodon today. (Yeah, I slightly mangled the example of a surjective function — should have said "
                            },
                            {
                                "type": "text",
                                "text": "nonnegative",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " integers.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHS9K1N6A"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Images here, in case you dun wan go to Masto.",
        "files": [
            {
                "id": "F06UN9HJ32P",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F06UND2QVC2",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HeR6Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Images here, in case you dun wan go to Masto."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1713318301.099399",
        "client_msg_id": "0744df6e-2b55-4cdd-a679-0c9e7c435a62",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713319111.937689",
        "client_msg_id": "36763261-898b-4c2e-86d3-84a5af5ea7a1",
        "text": "Not to be a total nerd about this, but what you want sorta feels like a “homotopy equivalence”.\n\nf : X → Y and g : Y → X form a homotopy equivalence if g(f(x)) is “pretty much” like x and f(g(y)) is “pretty much” like y.* So it’s a weakening of the typical definition of inverse functions.\n\nA reason I don’t think this is a great metaphor for you: It actually says something pretty interesting about the relationship between X and Y for there to be any homotopy equivalence at all between them. (We call X and Y “homotopy equivalent” in this situation.) I think you want to be able to reverse functions between very dissimilar \/ arbitrary domains. So IDK.\n\n* It’s actually not that g(f(x)) is “pretty much” like x for every x; it’s that the function g ∘ f is, holistically, “pretty much” like the identity function. (Homotopic.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+e4YI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to be a total nerd about this, but what you want sorta feels like a “homotopy equivalence”.\n\nf : X → Y and g : Y → X form a homotopy equivalence if g(f(x)) is “pretty much” like x and f(g(y)) is “pretty much” like y.* So it’s a weakening of the typical definition of inverse functions.\n\nA reason I don’t think this is a great metaphor for you: It actually says something pretty interesting about the relationship between X and Y for there to be any homotopy equivalence at all between them. (We call X and Y “homotopy equivalent” in this situation.) I think you want to be able to reverse functions between very dissimilar \/ arbitrary domains. So IDK.\n\n* It’s actually not that g(f(x)) is “pretty much” like x for every x; it’s that the function g ∘ f is, holistically, “pretty much” like the identity function. (Homotopic.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "U05M5A8E0NT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713319549.627229",
        "client_msg_id": "37317fc9-12ea-444b-b483-b8ace56b4b15",
        "text": "You'll have to hold my hand a bit here — I'm way beyond my comfort zone wrt properties n shit — but I'm really interested here in terminology, theory, prior art, etc.\n\nHow does this homotopy equivalence work if f and\/or g are non-injective, non-surjective, partial, multivalued, etc.? In other words, how close to bijective do these functions need to be for this property of homotopy equivalence to hold? Do f and g both need to be equally \"close\" to bijective? Or can one of them be made, say, only injective, and the other made multivalued? (Hopefully I said that correctly, or at least that you can intuit my questions)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rp+YX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You'll have to hold my hand a bit here — I'm way beyond my comfort zone wrt properties n shit — but I'm really interested here in terminology, theory, prior art, etc.\n\nHow does this homotopy equivalence work if f and\/or g are non-injective, non-surjective, partial, multivalued, etc.? In other words, how close to bijective do these functions need to be for this property of homotopy equivalence to hold? Do f and g both need to be equally \"close\" to bijective? Or can one of them be made, say, only injective, and the other made multivalued? (Hopefully I said that correctly, or at least that you can intuit my questions)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713319705.525409",
        "client_msg_id": "d25652f4-662b-4eea-85b4-63db90cbccca",
        "text": "&gt; I think you want to be able to reverse functions between very dissimilar \/ arbitrary domains.\nYeah, this exactly. I want to largely disregard the relationship between X and Y (in either direction) if that allows me to achieve something that _feels_ reversible in more situations.\n\nLike, for the cases where X and Y are 1-to-1 in f and g, then the reversibility is trivial. But what about the cases where they're not? I want to fake it, with as convincing a fake as I can manage with low-to-medium effort ;)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I4V3q",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you want to be able to reverse functions between very dissimilar \/ arbitrary domains."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, this exactly. I want to largely disregard the relationship between X and Y (in either direction) if that allows me to achieve something that "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reversible in more situations.\n\nLike, for the cases where X and Y are 1-to-1 in f and g, then the reversibility is trivial. But what about the cases where they're not? I want to fake it, with as convincing a fake as I can manage with low-to-medium effort ;)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713320124.991859",
        "client_msg_id": "12F18296-1459-4F85-94EE-02CBE401CE3E",
        "text": "What makes this your favorite definition of reversible computing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VoNMX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What makes this your favorite definition of reversible computing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713320395.683039",
        "client_msg_id": "c2959c7a-d859-4f7e-89c1-3294559732d2",
        "text": "I'm looking for ways to make \"reversible\" versions of, basically, everything in JavaScript. So I'm trying to figure out what properties would enable the best-feeling version of this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SnFW2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm looking for ways to make \"reversible\" versions of, basically, everything in JavaScript. So I'm trying to figure out what properties would enable the best-feeling version of this."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "UML4ZEKDK",
                    "U05M5A8E0NT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322524.776679",
        "client_msg_id": "7fc10578-ddd2-4df9-9d23-55e628c71499",
        "text": "Yeah sounds like you’re interested so I’m happy to elaborate!\n\nAll this homotopy equivalence stuff is coming from topology. Hopefully you know some of the basic topology spiel: we’re talking about squishy squashy spaces where we don’t care about exact shape, just sorta the way the spaces are connected. So a doughnut is the same as a coffee mug (with a handle).\n\nThe classic example of a homotopy equivalence, as far as I’m concerned, is the equivalence between a circle C (like points in the plane distance 1 from the origin) and an annulus A (like points in the plane distance 0.9 to 1.1 from the origin).\n\nThese two objects are topologically different! For instance: Removing a single point from C will “cut” it, producing something that you can unwrap to turn it into a little line segment. But removing a single point from A just gives you, like, an annulus with an extra tiny extra hole in it.\n\nBut there’s a looser sense in which C and A have the same structure — they’re both things with a hole in them — and that sameness is captured by the fact that there’s a homotopy equivalence connecting them.\n\nMaking a map f: C → A is easy — C is already a subset of A, so you just map it in there. This is an injective function.\n\nMaking a map g: A → C is less obvious, but still pretty straightforward. For instance, you can map each point of the annulus to the point of the circle at the same angle. Which is also the closest point of the circle, FWIW. This is a surjective function.\n\nInterestingly, in this situation, f and g are inverses of each other in one of the two directions. If I start on the circle, do f, and then do g, I get back to my original point. But no way are they going to be inverses of each other the other way around. You lose information going from A to C. So if I start with a point a ∈ A, do g, and do f, I’m going to (generally speaking) end up at a different place in A.\n\nBut it turns out (and this is where I’m gonna get very sketchy), that f ∘ g (the map that takes a to f(g(a))) is not that far off from the identity function. In particular, it’s “homotopic” to the identity: it can be continuously deformed to the identity. So that’s what makes f &amp; g a special homotopy equivalence pair.\n\nNow that I’ve given you the whole spiel, let me look more carefully at what you wrote there…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a+oUC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah sounds like you’re interested so I’m happy to elaborate!\n\nAll this homotopy equivalence stuff is coming from topology. Hopefully you know some of the basic topology spiel: we’re talking about squishy squashy spaces where we don’t care about exact shape, just sorta the way the spaces are connected. So a doughnut is the same as a coffee mug (with a handle).\n\nThe classic example of a homotopy equivalence, as far as I’m concerned, is the equivalence between a circle C (like points in the plane distance 1 from the origin) and an annulus A (like points in the plane distance 0.9 to 1.1 from the origin).\n\nThese two objects are topologically different! For instance: Removing a single point from C will “cut” it, producing something that you can unwrap to turn it into a little line segment. But removing a single point from A just gives you, like, an annulus with an extra tiny extra hole in it.\n\nBut there’s a looser sense in which C and A have the same structure — they’re both things with a hole in them — and that sameness is captured by the fact that there’s a homotopy equivalence connecting them.\n\nMaking a map f: C → A is easy — C is already a subset of A, so you just map it in there. This is an injective function.\n\nMaking a map g: A → C is less obvious, but still pretty straightforward. For instance, you can map each point of the annulus to the point of the circle at the same angle. Which is also the closest point of the circle, FWIW. This is a surjective function.\n\nInterestingly, in this situation, f and g are inverses of each other in one of the two directions. If I start on the circle, do f, and then do g, I get back to my original point. But no way are they going to be inverses of each other the other way around. You lose information going from A to C. So if I start with a point a ∈ A, do g, and do f, I’m going to (generally speaking) end up at a different place in A.\n\nBut it turns out (and this is where I’m gonna get very sketchy), that f ∘ g (the map that takes a to f(g(a))) is not that far off from the identity function. In particular, it’s “homotopic” to the identity: it can be continuously deformed to the identity. So that’s what makes f & g a special homotopy equivalence pair.\n\nNow that I’ve given you the whole spiel, let me look more carefully at what you wrote there…"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322684.191979",
        "client_msg_id": "970de2d8-2db7-42c4-aad9-dcfb1c7ccea0",
        "text": "Ok so you were curious about how close f &amp; g have to be to being bijective. The example I gave above was a very classic sort of example, in which neither are bijective, but one is injective and the other is surjective. The image is that you have two spaces, one of which sits inside the other, and there’s a “projection” operator that sends the larger space down onto the smaller space.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ltq2c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok so you were curious about how close f & g have to be to being bijective. The example I gave above was a very classic sort of example, in which neither are bijective, but one is injective and the other is surjective. The image is that you have two spaces, one of which sits inside the other, and there’s a “projection” operator that sends the larger space down onto the smaller space."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "This is related to the idea of “deformation retraction”, illustrated here.",
        "files": [
            {
                "id": "F06V19CR75X",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S+PaG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is related to the idea of “deformation retraction”, illustrated here."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1713322730.046299",
        "client_msg_id": "a07f3d4c-acca-468d-9d90-609d612b15eb",
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322774.480529",
        "client_msg_id": "ef1a86c8-6b22-42d4-9a5d-021386bdc661",
        "text": "(That’s from Allen Hatcher’s textbook, which is free online, very good, and well-illustrated, tho it is almost certainly impenetrable without a lot more preparation: <https:\/\/pi.math.cornell.edu\/~hatcher\/AT\/AT.pdf.>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49qZ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(That’s from Allen Hatcher’s textbook, which is free online, very good, and well-illustrated, tho it is almost certainly impenetrable without a lot more preparation: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pi.math.cornell.edu\/~hatcher\/AT\/AT.pdf."
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322823.630219",
        "client_msg_id": "142ad62a-3706-4eb8-852c-478c4bc59145",
        "text": "But homotopy equivalences themselves don’t require this structure; they’re much more general. You can come up with homotopy equivalences where neither map is injective or surjective, they’re just two sloppy mappings that happen to sort of almost invert each other in this sloppy topological way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EM9Ng",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But homotopy equivalences themselves don’t require this structure; they’re much more general. You can come up with homotopy equivalences where neither map is injective or surjective, they’re just two sloppy mappings that happen to sort of almost invert each other in this sloppy topological way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322905.143559",
        "client_msg_id": "4e84e9f6-6514-4bde-aeb2-42a462de0ecd",
        "text": "As for multi-valued maps: Mathematicians basically don’t fuck with multi-valued maps. Anything you’d want to represent as a multi-valued map from X to Y, mathematicians prefer to see as a single-valued map from X to P(Y) (the power set, consisting of all subsets of Y).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZVD\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for multi-valued maps: Mathematicians basically don’t fuck with multi-valued maps. Anything you’d want to represent as a multi-valued map from X to Y, mathematicians prefer to see as a single-valued map from X to P(Y) (the power set, consisting of all subsets of Y)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1713322960.738919",
        "client_msg_id": "e81e429f-a830-48d5-8bf9-cd89a93d169a",
        "text": "Ok that’s definitely enough gotta go. :pray:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GFdyM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok that’s definitely enough gotta go. "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713326275.312469",
        "client_msg_id": "BC101C70-FE9E-4506-9A74-518C1C01F65E",
        "text": "I just lol’d working out how to sloppy-reverse `sin(x) &gt; 0` evaluating to `true`. glhf, man, this is gonna be wild.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BS2jc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just lol’d working out how to sloppy-reverse "
                            },
                            {
                                "type": "text",
                                "text": "sin(x) > 0",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " evaluating to "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". glhf, man, this is gonna be wild."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713329565.009479",
        "client_msg_id": "79036DCD-5449-4CEC-A438-51B44AE7BAD2",
        "text": "Yeah, that's a great example <@UFEQUBNNT>. I'd be perfectly happy if that produced, say, `1` when reversed — even if the original `x` was something totally different — because `1` gets you another `true` when you go forward again.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WWKy+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's a great example "
                            },
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": ". I'd be perfectly happy if that produced, say, "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when reversed — even if the original "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was something totally different — because "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " gets you another "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when you go forward again"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1713330013.443849",
        "client_msg_id": "9DCF66FA-EBD5-4B3D-8558-3020508E5F85",
        "text": "Does it matter to what you’re working on that `x` might be used in another expression that doesn’t have `1` in its domain? Is rocking forward after a rock backward going to be sloppy too?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "85kDK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does it matter to what you’re working on that "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might be used in another expression that "
                            },
                            {
                                "type": "text",
                                "text": "doesn’t"
                            },
                            {
                                "type": "text",
                                "text": " have "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "bold": false,
                                    "italic": false,
                                    "strike": false,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in its domain? Is rocking forward after a rock backward going to be sloppy too?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713330253.154719",
        "client_msg_id": "E877F1CD-C27B-43F8-8E18-5BF6C30600AA",
        "text": "Yes, potentially! In addition to non-injective, non-surjective, and multivalued, I'm also interested in a notion of \"reversible function\" that is loose enough to cover partial functions. But I don't have any strong examples yet to help me feel out sensibilities for how I'd like them to behave.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mqm+z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, potentially! In addition to non-injective, non-surjective, and multivalued, I'm also interested in a notion of \"reversible function\" that is loose enough to cover partial functions"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But I don't have any strong examples yet to help me feel out sensibilities for how I'd like them to behave"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1713330394.188529",
        "client_msg_id": "642646E1-DC39-4559-9358-7CE5D30E65BD",
        "text": "Like, the reverse of a non-surjective function is very likely a partial function, so I feel like one answer might be to treat a forward partial function with similar techniques (so that you can meaningfully reverse it and get something useful back).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713318208.682589",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ItdWq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, the reverse of a non-surjective function is very likely a partial function, so I feel like one answer might be to treat a forward partial function with similar techniques (so that you can meaningfully reverse it and get something useful back)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]