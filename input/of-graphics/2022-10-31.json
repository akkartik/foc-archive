[
    {
        "subtype": "thread_broadcast",
        "user": "U047BL7EJDA",
        "thread_ts": "1666627197.087499",
        "root": {
            "user": "U047BL7EJDA",
            "type": "message",
            "ts": "1666627197.087499",
            "client_msg_id": "7649e0c6-7af3-4365-a380-083c75ce1add",
            "text": "any folks here use touchdesigner? i’ve been incredibly impressed by it’s notebook-like functionality embedded in a visual-programming paradigm. Of all of the node-based tools i’ve seen, imo it has done the best job at bridging the gap between text based and node based programming, while also (most impressively) embedding a fairly rigorous notion of time into the whole environment",
            "team": "T5TCAFTA9",
            "thread_ts": "1666627197.087499",
            "reply_count": 3,
            "reply_users_count": 2,
            "latest_reply": "1667235072.622709",
            "reply_users": [
                "UDLGND5GA",
                "U047BL7EJDA"
            ],
            "replies": [
                {
                    "user": "UDLGND5GA",
                    "ts": "1666802725.475599"
                },
                {
                    "user": "UDLGND5GA",
                    "ts": "1666802747.534849"
                },
                {
                    "user": "U047BL7EJDA",
                    "ts": "1667235072.622709"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "Wcz",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "any folks here use touchdesigner? i’ve been incredibly impressed by it’s notebook-like functionality embedded in a visual-programming paradigm. Of all of the node-based tools i’ve seen, imo it has done the best job at bridging the gap between text based and node based programming, while also (most impressively) embedding a fairly rigorous notion of time into the whole environment"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1667235072.622709",
        "client_msg_id": "af2cd793-4df7-4956-99b1-62042cbb1a1e",
        "text": "i’ve found it insanely powerful as a creative-experimentation tool - it really allows for a sketching\/experimenting workflow that is an order of magnitude faster than anything i’ve experienced, which i attribute to a few main things\n\n• the data-flow paradigm forces me to to think in terms of inputs\/outputs\/interfaces up front (but lots of little UI quality of life things make doing this VERY fast)\n• the visual-scripting, 2D paradigm makes it easy to have a “continuum” of modularization - i can stick a bunch of nodes in their own region as a “section”, and treat them loosely as a module, but still leave them open for fast hacking. This, combined with the first point, still leaves things pretty organized and makes “on the fly” component creation very organic",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wp3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’ve found it insanely powerful as a creative-experimentation tool - it really allows for a sketching\/experimenting workflow that is an order of magnitude faster than anything i’ve experienced, which i attribute to a few main things\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the data-flow paradigm forces me to to think in terms of inputs\/outputs\/interfaces up front (but lots of little UI quality of life things make doing this VERY fast)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the visual-scripting, 2D paradigm makes it easy to have a “continuum” of modularization - i can stick a bunch of nodes in their own region as a “section”, and treat them loosely as a module, but still leave them open for fast hacking. This, combined with the first point, still leaves things pretty organized and makes “on the fly” component creation very organic"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]