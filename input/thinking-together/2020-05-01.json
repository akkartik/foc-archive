[
    {
        "user": "UEP7RL0HX",
        "type": "message",
        "ts": "1588319618.393000",
        "client_msg_id": "8637ccab-d398-4c8d-ba10-e3fb8309e265",
        "text": "Not sure how much of Nardi's book covers this paper (<https:\/\/www.miramontes.com\/writing\/spreadsheet-eup\/|Spreadsheets and end-user programming: Nardi, et al.>), but I found it to be a great look at spreadsheets and programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4c54a8f7c01",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c4c54a8f7c01b3e22a1e82ae29c85f70.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "Dan Swirsky",
            "display_name": "Dan Swirsky",
            "team": "T5TCAFTA9",
            "name": "dswirsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fJMH\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure how much of Nardi's book covers this paper ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.miramontes.com\/writing\/spreadsheet-eup\/",
                                "text": "Spreadsheets and end-user programming: Nardi, et al."
                            },
                            {
                                "type": "text",
                                "text": "), but I found it to be a great look at spreadsheets and programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1588319925.393200",
        "client_msg_id": "27eea702-4f2a-426c-9c86-d283a7dafff9",
        "text": "<https:\/\/twitter.com\/diodesign\/status\/1248975584647995394>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/diodesign|@diodesign>: There's a rise in interest in building simple 8-bit systems to teach people the fundamentals of how computers work. Which is great.\n\nBut it can be a pain to order and assemble the parts. So I started an in-browser simulator of a basic 6502-based system to make life easier <https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1248970491978604550\/pu\/img\/DwRevfbumtuQIKAu.jpg>",
                "ts": 1586613958,
                "author_name": "Chris Williams",
                "author_link": "https:\/\/twitter.com\/diodesign\/status\/1248975584647995394",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1187655712437985280\/TRAzFkhY_normal.jpg",
                "author_subname": "@diodesign",
                "text": "There's a rise in interest in building simple 8-bit systems to teach people the fundamentals of how computers work. Which is great.\n\nBut it can be a pain to order and assemble the parts. So I started an in-browser simulator of a basic 6502-based system to make life easier",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/diodesign\/status\/1248975584647995394",
                "thumb_url": "https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1248970491978604550\/pu\/img\/DwRevfbumtuQIKAu.jpg",
                "thumb_width": 880,
                "thumb_height": 758,
                "video_html_width": 880,
                "video_html_height": 758,
                "video_html": "<video controls poster=\"https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1248970491978604550\/pu\/img\/DwRevfbumtuQIKAu.jpg\" width=\"880\" height=\"758\"><source type=\"video\/mp4\" src=\"https:\/\/video.twimg.com\/ext_tw_video\/1248970491978604550\/pu\/vid\/834x720\/D6sRJYCRnPXF9S2N.mp4?tag=10\"><\/video>",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/diodesign\/status\/1248975584647995394",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RqWfO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/diodesign\/status\/1248975584647995394"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UU45NNMHT",
                    "UJ6LDMMN0",
                    "UBSMEUXAA",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588320792.393500",
        "client_msg_id": "f4d023f1-2c74-41a0-bc27-385cbf1d5418",
        "text": "wow those chip simulations are incredibly detailed. I would think for most people just learning about opcodes, registers, and the difference in speed between register-register operations vs. register memory would be highly instructive. Given that a memory access can take 100 clocks, we are now in an era where it is crucial to use as many registers as possible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JSSr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wow those chip simulations are incredibly detailed. I would think for most people just learning about opcodes, registers, and the difference in speed between register-register operations vs. register memory would be highly instructive. Given that a memory access can take 100 clocks, we are now in an era where it is crucial to use as many registers as possible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1588321437.393800",
        "client_msg_id": "81ca6f25-85d5-4962-b744-2515f2922268",
        "text": "<https:\/\/www.nand2tetris.org\/software> is a bit rudimentary but the book is amazing. Would be great if there was a web version of Nand2Tetris",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nf0gh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.nand2tetris.org\/software"
                            },
                            {
                                "type": "text",
                                "text": " is a bit rudimentary but the book is amazing. Would be great if there was a web version of Nand2Tetris"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1588321753.394100",
        "client_msg_id": "1087a52b-4e43-43d2-9e0f-55b6d7b63a5e",
        "text": "<@UCUSW7WVD> would love to hear more! I'm not super familiar with processors!\n<@UCGAK10LS> sure. I should clarify that I'm interested in visualizations that elucidates that bridge between machine code and transistors.\n<@UBSMEUXAA> Thanks for the link, that is really cool! I've seen those box-and-arrow visualizations of jumping before, is that a pretty common feature in disassemblers?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z2b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " would love to hear more! I'm not super familiar with processors!\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " sure. I should clarify that I'm interested in visualizations that elucidates that bridge between machine code and transistors.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the link, that is really cool! I've seen those box-and-arrow visualizations of jumping before, is that a pretty common feature in disassemblers?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@UH85W1ML1> that 6502 visualizer is so cool. But I wonder if the physical circuit diagram alone is really that useful for _building_ an understanding from scratch. I wonder if we could provide different levels of perspective and views over it, sort of a logical analogue to what Bret does for circuit diagrams in Media For Thinking The Unthinkable:",
        "files": [
            {
                "id": "F012W8U1EJE",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UMWF81HTP",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "op8q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH85W1ML1"
                            },
                            {
                                "type": "text",
                                "text": " that 6502 visualizer is so cool. But I wonder if the physical circuit diagram alone is really that useful for "
                            },
                            {
                                "type": "text",
                                "text": "building ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "an understanding from scratch. I wonder if we could provide different levels of perspective and views over it, sort of a logical analogue to what Bret does for circuit diagrams in Media For Thinking The Unthinkable:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1588321942.394300",
        "client_msg_id": "9c8a29a6-b5cc-4932-a231-b5e29a29041b",
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1588322099.394700",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1588370565.000000"
        },
        "client_msg_id": "853ea461-1598-4b34-bfe2-ffb7cafe929d",
        "text": "<@UN9SCH5RD> I love nand2tetris. Did the hardware + VM half of it myself(the compiler part wasn't quite as well-done imo). But the software they provide could be so much more. Would love to see an integrated curriculum where the software seamlessly blends with the learning material.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " I love nand2tetris. Did the hardware + VM half of it myself(the compiler part wasn't quite as well-done imo). But the software they provide could be so much more. Would love to see an integrated curriculum where the software seamlessly blends with the learning material."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1588325846.397400",
        "client_msg_id": "796A2DE3-3823-4F34-904F-055DB9ABCB56",
        "text": "Not sure if that’s what you’re looking for, but there is this: <http:\/\/www.visual6502.org\/|http:\/\/www.visual6502.org\/>\n\nFun fact: it seems still impossible to simulate a 1 Mhz 6502 like this in real-time on contemporary hardware; see <https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md|https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "attachments": [
            {
                "fallback": "[mist64\/perfect6502] README.md",
                "text": "```\n# perfect6502\n\n*perfect6502* is a MOS 6502 CPU emulator that performs a simulation of the original NMOS 6502 netlist that was extracted by the [<http:\/\/visual6502.org|visual6502.org>](<http:\/\/www.visual6502.org\/>) project.\n\nConsequently, *perfect6502* is\n* *perfect*: It is not a reimplementation of the 6502, but a simulation of the original transistors. Its complete behavior, its internal state and its outputs are half-cycle exact.\n* *slow*: Even though *perfect6502* is highly optimized C code, achieves only 1\/150 of the speed of a 1 MHz 6502 on a high-end CPU of 2014.\n\n*perfect6502* is useful for\n* understanding and reverse engineering the 6502\n* debugging 6502 emulators by running them side by side with *perfect6502*\n\n## Usage\n\nAs a demonstration and as a performance\/regression test, *perfect6502* is hooked up to [Commodore BASIC](<http:\/\/en.wikipedia.org\/wiki\/Commodore_BASIC>) (cbmbasic).\n\nYou can compile the project with\n\n\t$ make\n\nand run it with\n\n\t$ .\/cbmbasic\n\nYou should get the following output:\n\n\t\t**** COMMODORE 64 BASIC V2 ****\n\t\n\t 64K RAM SYSTEM  38911 BASIC BYTES FREE\n\t\n\tREADY.\n\n# Credits\n\n*perfect6502* is is written by [Michael Steil](<http:\/\/www.pagetable.com\/>) and derived from the JavaScript [visual6502](<https:\/\/github.com\/trebonian\/visual6502>) implementation by Greg James, Brian Silverman and Barry Silverman.\n\n# Contributing\n\nFurther performance optimizations are gladly accepted.\n```",
                "title": "README.md",
                "footer": "<https:\/\/github.com\/mist64\/perfect6502|mist64\/perfect6502>",
                "id": 1,
                "title_link": "https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tiq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if that’s what you’re looking for, but there is this: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.visual6502.org\/",
                                "text": "http:\/\/www.visual6502.org\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Fun fact: it seems still impossible to simulate a 1 Mhz 6502 like this in real-time on contemporary hardware; see "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md",
                                "text": "https:\/\/github.com\/mist64\/perfect6502\/blob\/master\/README.md"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1588325864.398200",
        "client_msg_id": "643F7235-B2C4-48CD-87C6-AC558F2A56E9",
        "text": "For learning 6502 assembly I quite enjoyed this one: <https:\/\/skilldrick.github.io\/easy6502\/|https:\/\/skilldrick.github.io\/easy6502\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For learning 6502 assembly I quite enjoyed this one: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/skilldrick.github.io\/easy6502\/",
                                "text": "https:\/\/skilldrick.github.io\/easy6502\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPMFG2571",
        "type": "message",
        "ts": "1588327539.398500",
        "client_msg_id": "3f930154-06cc-4432-8f5d-35370dfd371c",
        "text": "I've had ideas about creating something for the purpose of teaching low level concepts all the way up to how they connect to the higher level (languages and programs we use every day).\n\nIt would have many layers, each layers one concept, and it would show just one concept at a time, but in a zoomable map. It would start by showing the highest level layer - a game running.\nThen it would zoom in super fast until it reaches the lowest layer - how registers and caches work. Now the user has to go through every layer until they reach the highest layer again.\nAll layers are explained visually.\n\nFrom how the CPU executes instructions, to how it fetches them from registers, to caches, to how the MESI protocol works to keep caches coherent, to how data is fetched from RAM when it isn't in the cache and how slow this is, to how  data needs to be fetched from disk, how the CPU feeds data to the GPU, to how all of these systems intertwine together through buses. From this level we should have a pretty good architectural view of how all the systems work together at a low level.\n\nFrom here we zoom out into a higher level to driver land and then to OS land and to how a runtime works to load a PE\/ELF into memory. Then we go on to show what is inside an executable and how the data got there - from assembler to compiling and linking to tokenizing and parsing to actual code.\nAt this point there should be a good view of how code actually gets executed.\n\nThen we zoom out again to show how code is structured into platform independent layers to abstract networking protocols, file systems, multi-threading, etc. Then how this is used to build core systems for memory allocation, maths, debugging and profiling, etc. Then on to resource systems for textures, materials, 3D models, etc, to the low level renderer where the rendering commands are being dispatched, how data is fetched from the different resources to achieve this. On to the above layers of scene graph management, animation, post processing, HUD, and finally gameplay.\n\nThis gets us all the way back to the highest layer where the game is running. From this point forward the user is free to go to any layer and play around with some parameters to see how the layers above and below are affected.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9c42167d8bfa",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-19\/1070853245589_9c42167d8bfa4cbf26ad_72.png",
            "first_name": "Nuno",
            "real_name": "Nuno Leiria",
            "display_name": "Nuno Leiria",
            "team": "T5TCAFTA9",
            "name": "omniparagon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qM1G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've had ideas about creating something for the purpose of teaching low level concepts all the way up to how they connect to the higher level (languages and programs we use every day).\n\nIt would have many layers, each layers one concept, and it would show just one concept at a time, but in a zoomable map. It would start by showing the highest level layer - a game running.\nThen it would zoom in super fast until it reaches the lowest layer - how registers and caches work. Now the user has to go through every layer until they reach the highest layer again.\nAll layers are explained visually.\n\nFrom how the CPU executes instructions, to how it fetches them from registers, to caches, to how the MESI protocol works to keep caches coherent, to how data is fetched from RAM when it isn't in the cache and how slow this is, to how  data needs to be fetched from disk, how the CPU feeds data to the GPU, to how all of these systems intertwine together through buses. From this level we should have a pretty good architectural view of how all the systems work together at a low level.\n\nFrom here we zoom out into a higher level to driver land and then to OS land and to how a runtime works to load a PE\/ELF into memory. Then we go on to show what is inside an executable and how the data got there - from assembler to compiling and linking to tokenizing and parsing to actual code.\nAt this point there should be a good view of how code actually gets executed.\n\nThen we zoom out again to show how code is structured into platform independent layers to abstract networking protocols, file systems, multi-threading, etc. Then how this is used to build core systems for memory allocation, maths, debugging and profiling, etc. Then on to resource systems for textures, materials, 3D models, etc, to the low level renderer where the rendering commands are being dispatched, how data is fetched from the different resources to achieve this. On to the above layers of scene graph management, animation, post processing, HUD, and finally gameplay.\n\nThis gets us all the way back to the highest layer where the game is running. From this point forward the user is free to go to any layer and play around with some parameters to see how the layers above and below are affected."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UU45NNMHT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1588335205.401600",
        "client_msg_id": "5BAF1907-8D34-473F-9C39-A9384A5CB7DB",
        "text": "<@UCUSW7WVD> Easy to consume and easy to modify lead to almost opposite criteria for software architecture. I see that as the essence of Knuth’s reusable vs. re-editable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Easy to consume and easy to modify lead to almost opposite criteria for software architecture. I see that as the essence of Knuth’s reusable vs. re-editable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1588341505.403500",
        "client_msg_id": "c4befa80-cd3d-4c0e-afc3-656607ac3d0a",
        "text": "Tangible Functional Programming by Conal Elliott\n• apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable\n• software libraries are programmer-friendly (composable, abstract, syntactic)\nThe dream is: unlimited access to functionality, usably and composably. How?\n• Unix pipes are a composable text-mode UI, but we lose the GUI.\n• A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition.\n<http:\/\/conal.net\/blog\/posts\/tangible-functional-programming-a-modern-marriage-of-usability-and-composability>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1588436154.415700",
        "reply_users": [
            "UJN1TAYEQ",
            "UC21F8Q48",
            "UEQ6M68H0",
            "UA14TGLTC",
            "U010328JA1E"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1588345251.407000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1588351254.409600"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1588368031.411700"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1588374012.412300"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1588381473.412700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1588400904.413300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1588404594.413600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1588406629.414200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1588422527.414900"
            },
            {
                "user": "U010328JA1E",
                "ts": "1588428967.415300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1588436154.415700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fUr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tangible Functional Programming by Conal Elliott\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "software libraries are programmer-friendly (composable, abstract, syntactic)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The dream is: unlimited access to functionality, usably and composably. How?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Unix pipes are a composable text-mode UI, but we lose the GUI."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/conal.net\/blog\/posts\/tangible-functional-programming-a-modern-marriage-of-usability-and-composability"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70",
                    "UC2A2ARPT",
                    "UMWF81HTP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UU45NNMHT",
        "type": "message",
        "ts": "1588342594.403700",
        "edited": {
            "user": "UU45NNMHT",
            "ts": "1588342608.000000"
        },
        "client_msg_id": "1ed8e886-687b-401e-a306-f902f23e1bcf",
        "text": "The closest thing I can think of today in this vein is <https:\/\/8bitworkshop.com\/> but that is coming at it more from the game programming \/ content creation side of things. I think the platform _might_ support the observability you are looking for though.\n\nI have written a few NES emulators myself (one in CL, one in Reason) with a goal of tracing the running application and visualizing it in a useful way … but they are nowhere near finished :upside_down_face:\n\nStill, I think the notion of using runtime tracing to build-up a CFG for a game or ROM and allowing the user to inspect the graph\/code rather than just sprites or nametables as most emulators do is promising.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "51985600ea00",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-18\/957720407504_51985600ea009a7691f2_72.jpg",
            "first_name": "Brit",
            "real_name": "Brit Butler",
            "display_name": "Brit Butler",
            "team": "T5TCAFTA9",
            "name": "britton.s.butler",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "attachments": [
            {
                "title": "8bitworkshop",
                "title_link": "https:\/\/8bitworkshop.com\/",
                "text": "Ever wanted to be an old-school game programmer? Learn how classic game hardware worked. Write code and see it run instantly.",
                "fallback": "8bitworkshop",
                "from_url": "https:\/\/8bitworkshop.com\/",
                "service_icon": "https:\/\/8bitworkshop.com\/favicon.ico",
                "service_name": "8bitworkshop.com",
                "id": 1,
                "original_url": "https:\/\/8bitworkshop.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9jCM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The closest thing I can think of today in this vein is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/8bitworkshop.com\/"
                            },
                            {
                                "type": "text",
                                "text": " but that is coming at it more from the game programming \/ content creation side of things. I think the platform _might_ support the observability you are looking for though.\n\nI have written a few NES emulators myself (one in CL, one in Reason) with a goal of tracing the running application and visualizing it in a useful way … but they are nowhere near finished "
                            },
                            {
                                "type": "emoji",
                                "name": "upside_down_face",
                                "unicode": "1f643"
                            },
                            {
                                "type": "text",
                                "text": "\n\nStill, I think the notion of using runtime tracing to build-up a CFG for a game or ROM and allowing the user to inspect the graph\/code rather than just sprites or nametables as most emulators do is promising."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UBSMEUXAA",
                    "UPMFG2571"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1588345251.407000",
        "client_msg_id": "daa2e58d-aef9-4f1b-98ae-ac9f4eaa65a4",
        "text": "Note: Conal is not providing a ready to use GUI framework like Flutter or Morphic. He is giving design principles for composable GUIs. An algebra of GUIs. There is hard work remaining to design a general purpose GUI framework based on these principles. Or consider the GUI primitives in your system, and think about whether they could be redesigned for composability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "94Yxd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Note: Conal is not providing a ready to use GUI framework like Flutter or Morphic. He is giving design principles for composable GUIs. An algebra of GUIs. There is hard work remaining to design a general purpose GUI framework based on these principles. Or consider the GUI primitives in your system, and think about whether they could be redesigned for composability."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1588345298.408100",
        "client_msg_id": "363E05C0-D52F-481C-BE04-E31CA0AC7198",
        "text": "<@U71PMQ1V0> nope! We stepped away at the beginning of the month. Going to try our own thing for a bit and take it from there. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uAah",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " nope! We stepped away at the beginning of the month. Going to try our own thing for a bit and take it from there. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cool",
                "users": [
                    "UE0ETTCG7",
                    "UDQBTJ211",
                    "U9C92716C"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1588346356.408400",
        "client_msg_id": "5e00b7e7-7386-46d6-bd24-f7539a1a7d14",
        "text": "This is another great comment from the <http:\/\/Lobste.rs|Lobste.rs> thread <https:\/\/lobste.rs\/s\/qkpwpa\/on_usability_editable_software#c_qxnh4i>\n\n&gt; User modifications in computer games are a lot more common than other software types and are even possible in some big budget proprietary software. I think this can offer some insight into how this can work for other software.\n&gt; The most basic version is to move all content\/assets (3d models, textures, sound files, etc.) into its own subfolder tree and give it clear human readable names. Users can then simply swap out files.\n&gt; The next level is to abstract how the metadata for high level objects that use these assets is stored out to a text based format like json or xml so that the assets can be reused and new high level objects defined.\n&gt; This can be extended to more and more engine content, including defining behaviours and simple functions in json\/xml",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "attachments": [
            {
                "title": "on the usability of editable software",
                "title_link": "https:\/\/lobste.rs\/s\/qkpwpa\/on_usability_editable_software#c_qxnh4i",
                "text": "37 comments",
                "fallback": "on the usability of editable software",
                "thumb_url": "https:\/\/lobste.rs\/apple-touch-icon-144.png",
                "from_url": "https:\/\/lobste.rs\/s\/qkpwpa\/on_usability_editable_software#c_qxnh4i",
                "thumb_width": 144,
                "thumb_height": 144,
                "service_icon": "https:\/\/lobste.rs\/apple-touch-icon.png",
                "service_name": "lobste.rs",
                "id": 1,
                "original_url": "https:\/\/lobste.rs\/s\/qkpwpa\/on_usability_editable_software#c_qxnh4i"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+AQqJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is another great comment from the "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/Lobste.rs",
                                "text": "Lobste.rs"
                            },
                            {
                                "type": "text",
                                "text": " thread "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lobste.rs\/s\/qkpwpa\/on_usability_editable_software#c_qxnh4i"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "User modifications in computer games are a lot more common than other software types and are even possible in some big budget proprietary software. I think this can offer some insight into how this can work for other software."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most basic version is to move all content\/assets (3d models, textures, sound files, etc.) into its own subfolder tree and give it clear human readable names. Users can then simply swap out files."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The next level is to abstract how the metadata for high level objects that use these assets is stored out to a text based format like json or xml so that the assets can be reused and new high level objects defined."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This can be extended to more and more engine content, including defining behaviours and simple functions in json\/xml"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1588346909.408700",
        "client_msg_id": "9a66d085-7670-45b0-83a1-11505806e36b",
        "text": "After text editors and terminals (which have the unfair advantage of explicitly targeting programmers, who are the best position to do the editing),\ncomputer games might be the most widely-edited software there is?\n\nI did an analysis of the most popular creative apps across industries, and one of the patterns is extensibility  (<https:\/\/blog.robenkleene.com\/2019\/08\/07\/apples-app-stores-have-failed-creative-apps\/>). Now that I look for it I start seeing it everywhere, for example as far as I can tell, this chain is possible: Open an After Effects project, add a Cinema 4D 3D model to it via a plugin, then open a Houdini project in Cinema 4D via a another plugin, then render it all via a third-party renderer like Redshift. Now I'm not sure if all of that would actually work, but it's fascinating how flexible the workflows for professional creative apps are, especially compared to consumer software. Like compare that to just trying to get something like Apple Notes to talk to Excel...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "attachments": [
            {
                "service_name": "Roben Kleene",
                "title": "Apple’s App Stores Have Failed Creative Apps",
                "title_link": "https:\/\/blog.robenkleene.com\/2019\/08\/07\/apples-app-stores-have-failed-creative-apps\/",
                "text": "The appeal of the Mac has always been that it’s a great platform for making things. Software is the great equalizer: It’s inexpensive, sometimes even free, and it lets you do things that used to only be possible with expensive, specialized hardware. Software is Andy Warhol’s Coke for creators.",
                "fallback": "Roben Kleene: Apple’s App Stores Have Failed Creative Apps",
                "ts": 1565136000,
                "from_url": "https:\/\/blog.robenkleene.com\/2019\/08\/07\/apples-app-stores-have-failed-creative-apps\/",
                "service_icon": "https:\/\/blog.robenkleene.com\/assets\/favicon\/57x57.png",
                "id": 1,
                "original_url": "https:\/\/blog.robenkleene.com\/2019\/08\/07\/apples-app-stores-have-failed-creative-apps\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yQ7TR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After text editors and terminals (which have the unfair advantage of explicitly targeting programmers, who are the best position to do the editing),\ncomputer games might be the most widely-edited software there is?\n\nI did an analysis of the most popular creative apps across industries, and one of the patterns is extensibility  ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.robenkleene.com\/2019\/08\/07\/apples-app-stores-have-failed-creative-apps\/"
                            },
                            {
                                "type": "text",
                                "text": "). Now that I look for it I start seeing it everywhere, for example as far as I can tell, this chain is possible: Open an After Effects project, add a Cinema 4D 3D model to it via a plugin, then open a Houdini project in Cinema 4D via a another plugin, then render it all via a third-party renderer like Redshift. Now I'm not sure if all of that would actually work, but it's fascinating how flexible the workflows for professional creative apps are, especially compared to consumer software. Like compare that to just trying to get something like Apple Notes to talk to Excel..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1588351254.409600",
        "client_msg_id": "d75cbe93-ebc2-47d5-81de-4c7ab300b255",
        "text": "There's been lots of research on GUI layout mechanisms (you might call this spatial composability), and on ways to mitigate callback hell in the original imperative GUI frameworks. But Conor is asking us to think about a new topic: semantic composability. When you compose two \"meanings\" (denotations, values), a new GUI is generated for viewing\/editing\/invoking this composite meaning.\n\nI didn't have the proper vocabulary for even thinking about this issue before.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HMsU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's been lots of research on GUI layout mechanisms (you might call this spatial composability), and on ways to mitigate callback hell in the original imperative GUI frameworks. But Conor is asking us to think about a new topic: semantic composability. When you compose two \"meanings\" (denotations, values), a new GUI is generated for viewing\/editing\/invoking this composite meaning.\n\nI didn't have the proper vocabulary for even thinking about this issue before."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1588356646.409800",
        "client_msg_id": "418c1231-be8a-4c0f-b536-231ace5bd4c8",
        "text": "Came across this the other day which is quite neat <http:\/\/thlorenz.com\/visulator\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G6R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Came across this the other day which is quite neat "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/thlorenz.com\/visulator\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1588356699.410000",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1588356750.000000"
        },
        "client_msg_id": "e72f9c08-74d1-4385-973e-0f48fc737226",
        "text": "&gt; Would be great if there was a web version of Nand2Tetris\nAbsolutely. It's been on my fantasy todo list since I took that course",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "px9l",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would be great if there was a web version of Nand2Tetris"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Absolutely. It's been on my fantasy todo list since I took that course"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1588363414.410300",
        "client_msg_id": "9c276e25-998f-4049-bc7b-967ac30c8187",
        "text": "I spent some time looking into flutter. They have this RenderObject base class that is almost exclusively used through a RenderBox subclass, but in their examples they also have a RenderSector subclass, which does polar coordinate widgets. This was my strawman non-rectilinear example that I was thinking about. So I think their RenderObject interface is probably more or less what I was looking for in terms of layout generality.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fbR4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I spent some time looking into flutter. They have this RenderObject base class that is almost exclusively used through a RenderBox subclass, but in their examples they also have a RenderSector subclass, which does polar coordinate widgets. This was my strawman non-rectilinear example that I was thinking about. So I think their RenderObject interface is probably more or less what I was looking for in terms of layout generality."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "For anybody who's curious and doesn't want to install the flutter sdk, this is what their sector layout looks like",
        "files": [
            {
                "id": "F0133KBBNP6",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UKDM3GLAJ",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1mS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For anybody who's curious and doesn't want to install the flutter sdk, this is what their sector layout looks like"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1588363543.410500",
        "client_msg_id": "e0e4115a-18b4-4091-a3e9-6de9c3f7a46d",
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1588363837.411000",
        "client_msg_id": "5941cf4e-e788-4a63-b0e6-69906d6f0ba4",
        "text": "<@U71PMQ1V0> do you have a link to the extensible web layouts proposal? I haven’t been able to find it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "US4u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " do you have a link to the extensible web layouts proposal? I haven’t been able to find it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588365121.411400",
        "client_msg_id": "b8fbcb35-9b73-491c-9d2b-840fed0ee53f",
        "text": "Flutter to my understanding is a unique beast among graphical layers. It renders the entire UI into bitmap form, and sends the bitmaps to the underlying OS. So It is effectively its own virtual machine that interfaces with the world by emitting bitmaps. Only an entity with Google's money would attempt such a huge task. My own Beads project maps my language concepts into the lower layers, which for web apps is JS.  Flutter is its own universe, and of course is rather tied to the Dart language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ChPr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Flutter to my understanding is a unique beast among graphical layers. It renders the entire UI into bitmap form, and sends the bitmaps to the underlying OS. So It is effectively its own virtual machine that interfaces with the world by emitting bitmaps. Only an entity with Google's money would attempt such a huge task. My own Beads project maps my language concepts into the lower layers, which for web apps is JS.  Flutter is its own universe, and of course is rather tied to the Dart language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1588368031.411700",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1588368053.000000"
        },
        "client_msg_id": "8657bb9e-1657-4409-8aee-ede67c126025",
        "text": "<@UEQ6M68H0> I’d recommend a second look at Conal’s work. Tangible Functional Values is not about GUI-building. It’s about value\/product\/output creation. The aim is to make the programming experience tangible and more approachable for non-linear thinkers. The non-composability of Unix pipes is one of the motives for the work—instead of the (untyped) single-output-single-input of pipes, Tangible Functional Values lets any (type-compatible) output feed into any (type-compatible) input. More importantly, this isn’t accomplished by a nodes-and-wires interface, but by a manipulable display of the values (the output), i.e. a display of “what you have”. So you feel like you are manipulating the things rather than the computation. Conal’s goal wasn’t to create a usable system, but to reduce this idea to its core elements, and he did so admirably. Centering values\/outputs in the programming experience is moderately rare in FoC systems (and is perhaps a key feature of spreadsheets!). I like to call this mode of programming “value-centric” (as opposed to algorithm-centric or AST-centric). Of the value-centric programming systems I’m aware of, Conal’s is always the example I think of first because of its elegant simplicity (even if it is missing a few features to make it practical!).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FuoMa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I’d recommend a second look at Conal’s work. Tangible Functional Values is not about GUI-building. It’s about value\/product\/output creation. The aim is to make the programming experience tangible and more approachable for non-linear thinkers. The non-composability of Unix pipes is one of the motives for the work—instead of the (untyped) single-output-single-input of pipes, Tangible Functional Values lets any (type-compatible) output feed into any (type-compatible) input. More importantly, this isn’t accomplished by a nodes-and-wires interface, but by a manipulable display of the values (the output), i.e. a display of “what you have”. So you feel like you are manipulating the things rather than the computation. Conal’s goal wasn’t to create a usable system, but to reduce this idea to its core elements, and he did so admirably. Centering values\/outputs in the programming experience is moderately rare in FoC systems (and is perhaps a key feature of spreadsheets!). I like to call this mode of programming “value-centric” (as opposed to algorithm-centric or AST-centric). Of the value-centric programming systems I’m aware of, Conal’s is always the example I think of first because of its elegant simplicity (even if it is missing a few features to make it practical!)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UC2A2ARPT",
                    "UMWF81HTP",
                    "UD31LGQKB",
                    "UNB12DNTU"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1588374012.412300",
        "client_msg_id": "9ad33f50-93bb-4c9a-b61c-f3574a6f9fe7",
        "text": "<@UC21F8Q48> Thanks for the spreadsheet analogy. Although watching the video, I didn't see see the equivalent of \"editing the equation\".\n\nCan you suggest related work that I should look at? I'm trying to understand these ideas well enough to implement them in a system for creating 3D models using pure functional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QVyl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the spreadsheet analogy. Although watching the video, I didn't see see the equivalent of \"editing the equation\".\n\nCan you suggest related work that I should look at? I'm trying to understand these ideas well enough to implement them in a system for creating 3D models using pure functional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1588375177.412500",
        "client_msg_id": "65729632-bc47-41d8-8ce6-a9cf3ebb9c33",
        "text": "<@UKDM3GLAJ> Nope, I can't find it either. I remember it was part of a collection of proposed extensions aiming to un-hardcode some of the lower levels of the web.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vm+ox",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKDM3GLAJ"
                            },
                            {
                                "type": "text",
                                "text": " Nope, I can't find it either. I remember it was part of a collection of proposed extensions aiming to un-hardcode some of the lower levels of the web."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1588381473.412700",
        "client_msg_id": "0b3c991c-cfe8-45c9-964d-2683db4688f2",
        "text": "Well there’s no text editing in Conal’s Eros as originally conceived so you’re right to wonder where it is. But Eros and spreadsheets both display values more prominently than code and invite manipulation on those values.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u=O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well there’s no text editing in Conal’s Eros as originally conceived so you’re right to wonder where it is. But Eros and spreadsheets both display values more prominently than code and invite manipulation on those values."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1588386741.412900",
        "client_msg_id": "504d8524-def9-43cf-a4b2-6a3252070a7e",
        "text": "<@UC2A2ARPT> “I think it’s no secret that a lot of folks here aren’t making programming tools in the traditional sense. Eg: I’m making a 2d\/3d modelling tool for artists, that conveniently just so happens to have a notion of evaluation. Sneaking code in through the back door, as it were. Perhaps we need a name for that stuff: “oh, code!“”\n\nRight, and that might be appropriate for your problem, but I’m suggesting that evaluation\/code may not be needed for many\/most of the tools which would allow people to do the things they are currently hiring programmers to do.\n\nThat is, the range of the things people typically want to make may be small enough for them to build from a well abstracted set of primitives in a no code way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jqike",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " “I think it’s no secret that a lot of folks here aren’t making programming tools in the traditional sense. Eg: I’m making a 2d\/3d modelling tool for artists, that conveniently just so happens to have a notion of evaluation. Sneaking code in through the back door, as it were. Perhaps we need a name for that stuff: “oh, code!“”\n\nRight, and that might be appropriate for your problem, but I’m suggesting that evaluation\/code may not be needed for many\/most of the tools which would allow people to do the things they are currently hiring programmers to do.\n\nThat is, the range of the things people typically want to make may be small enough for them to build from a well abstracted set of primitives in a no code way."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1588400904.413300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1588406343.000000"
        },
        "client_msg_id": "3458486d-f79d-4a35-8875-ede31569836b",
        "text": "Value-based programming has some niches where it makes sense, like audio\/video signal processing where the work product are data streams, and there is often a continuous flow to these streams you don't stop and think about them and wait for some input from the user. In graphical interactive software you have a lot of state, lots of widgets, and management of 500 things on the screen at the same time becomes a major chore. Even the portfolio management system i worked on in FORTRAN back in the day on mainframes did batch processing that included a fair amount of state as we were always accumulating numbers into buckets for sorting and categorizing purposes. None of the projects i have worked on would be convenient at all inside a data centric world. I understand Doug's art generation language would benefit from this, but i consider this area a very specialized niche.\n\nI think of a spreadsheet as a poor-man's database. It is fundamentally a 3.5 dimension system; you have a 2D sheet, which you can break into sub-rectangles, so i call that 2.5 dimensions, and the 3rd dimension is the array of named sheets you can have. As long as your data can fit into that dimensionality it works okay; especially since MS beefed up Excel to support about a million rows. But showing the data and hiding all the formulas makes most spreadsheets unauditable  black magic systems, and really quite dangerous. It is a well known thing in business consulting to find out that some part of a company's fundamental processes have been automated via Excel. There is no question in my mind that a very robust data editor coupled with a graph database could give  Excel a run for its money, but going up against the MS machine is an expensive process. Just like IBM they use the F.U.D. technique for suppressing competition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M9h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Value-based programming has some niches where it makes sense, like audio\/video signal processing where the work product are data streams, and there is often a continuous flow to these streams you don't stop and think about them and wait for some input from the user. In graphical interactive software you have a lot of state, lots of widgets, and management of 500 things on the screen at the same time becomes a major chore. Even the portfolio management system i worked on in FORTRAN back in the day on mainframes did batch processing that included a fair amount of state as we were always accumulating numbers into buckets for sorting and categorizing purposes. None of the projects i have worked on would be convenient at all inside a data centric world. I understand Doug's art generation language would benefit from this, but i consider this area a very specialized niche.\n\nI think of a spreadsheet as a poor-man's database. It is fundamentally a 3.5 dimension system; you have a 2D sheet, which you can break into sub-rectangles, so i call that 2.5 dimensions, and the 3rd dimension is the array of named sheets you can have. As long as your data can fit into that dimensionality it works okay; especially since MS beefed up Excel to support about a million rows. But showing the data and hiding all the formulas makes most spreadsheets unauditable  black magic systems, and really quite dangerous. It is a well known thing in business consulting to find out that some part of a company's fundamental processes have been automated via Excel. There is no question in my mind that a very robust data editor coupled with a graph database could give  Excel a run for its money, but going up against the MS machine is an expensive process. Just like IBM they use the F.U.D. technique for suppressing competition."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]