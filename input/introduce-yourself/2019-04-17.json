[
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555514720.025900",
        "client_msg_id": "f690cdbe-0c91-4e6e-8d67-126863dff4af",
        "text": "Good morning and hello all. My name is Jason Priestley, I'm a bay area software developer. I have one big idea for the future of software. It's hard to describe because it either sounds vague or trivial or incomprehensible depending on how I describe it, so I'll describe it in a few ways, and perhaps the sum will give a better sense of things.\n\nMy idea is to unify programmer and user. Seen from the programmer's side, this means an IDE that provides the discoverability and rich graphical UI that user's enjoy. Seen from the user's side, this means that their walled-garden \"apps\" are now part of one big app, they are unknowingly editing code by clicking buttons, and there is a smooth transition between graphical UI and code.\n\nMy idea is to bring the Lisp REPL into the graphical era. Read and Print are text-based primitives. The modern equivalent is a graphical UI that can extend and edit itself. The extension method may resemble Reader macros, but instead of taking over Read at certain syntax, it takes over the whole UI.\n\nMy idea is to make data into code. Lisp made code into data - a function declaration is also a linked list. Data into code means that whenever you are operating on data - editing a TODO list say - you are literally editing code in one big program. Editing your TODO list is a specialized UI that does the exact same thing as opening the TODOs variable in your code editor and typing out your changes manually.\n\nMy idea is to make a universal editor. Instead of one editor and many apps you have one editor that can be changed and customized to take on any behavior.\n\nMy idea is to complete the idea behind Emacs. People joke that Emacs is an OS, that you can do anything in Emacs. I take these jokes seriously. An extensible editor should be our OS, but emacs is too ad-hoc and too tied to text buffers to really suffice. Emacs, but the primitive operations are more low-level UI constructs, and graphical from the start.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "reply_count": 48,
        "reply_users_count": 10,
        "latest_reply": "1555783164.043100",
        "reply_users": [
            "UH85W1ML1",
            "UH84GQ3CZ",
            "UC21F8Q48",
            "U79HM6726",
            "UC25EFSJC",
            "UAVCC2X70",
            "U7C7B75R6",
            "U85HCL7JP",
            "UEQ6M68H0",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UH85W1ML1",
                "ts": "1555515022.026000"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555515030.026200"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555515392.026700"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1555515806.027000"
            },
            {
                "user": "U79HM6726",
                "ts": "1555515949.027200"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1555517004.027400"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555517448.027900"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555518950.028600"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555519085.028800"
            },
            {
                "user": "U79HM6726",
                "ts": "1555519256.029100"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1555519563.029300"
            },
            {
                "user": "U79HM6726",
                "ts": "1555519629.029700"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555520362.030000"
            },
            {
                "user": "U79HM6726",
                "ts": "1555521004.030200"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555521375.030700"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555521437.030900"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555521472.031100"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555524631.031600"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555524843.031800"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555524884.032000"
            },
            {
                "user": "U79HM6726",
                "ts": "1555524901.032200"
            },
            {
                "user": "U79HM6726",
                "ts": "1555525065.032500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555529858.033000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555530438.033200"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1555536223.033600"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555559444.034500"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1555562917.034700"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1555564361.035100"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555568162.035600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1555581378.036400"
            },
            {
                "user": "U79HM6726",
                "ts": "1555589706.036600"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555601957.036900"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555602450.037100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1555603159.037300"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555604440.037500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1555605149.037700"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555605346.037900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555617383.038300"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555628097.038700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555631012.039100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1555643590.039900"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555646273.040100"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555646319.040300"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1555646381.040500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555690849.041400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555697376.042400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1555714922.042900"
            },
            {
                "user": "UH84GQ3CZ",
                "ts": "1555783164.043100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "erk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good morning and hello all. My name is Jason Priestley, I'm a bay area software developer. I have one big idea for the future of software. It's hard to describe because it either sounds vague or trivial or incomprehensible depending on how I describe it, so I'll describe it in a few ways, and perhaps the sum will give a better sense of things.\n\nMy idea is to unify programmer and user. Seen from the programmer's side, this means an IDE that provides the discoverability and rich graphical UI that user's enjoy. Seen from the user's side, this means that their walled-garden \"apps\" are now part of one big app, they are unknowingly editing code by clicking buttons, and there is a smooth transition between graphical UI and code.\n\nMy idea is to bring the Lisp REPL into the graphical era. Read and Print are text-based primitives. The modern equivalent is a graphical UI that can extend and edit itself. The extension method may resemble Reader macros, but instead of taking over Read at certain syntax, it takes over the whole UI.\n\nMy idea is to make data into code. Lisp made code into data - a function declaration is also a linked list. Data into code means that whenever you are operating on data - editing a TODO list say - you are literally editing code in one big program. Editing your TODO list is a specialized UI that does the exact same thing as opening the TODOs variable in your code editor and typing out your changes manually.\n\nMy idea is to make a universal editor. Instead of one editor and many apps you have one editor that can be changed and customized to take on any behavior.\n\nMy idea is to complete the idea behind Emacs. People joke that Emacs is an OS, that you can do anything in Emacs. I take these jokes seriously. An extensible editor should be our OS, but emacs is too ad-hoc and too tied to text buffers to really suffice. Emacs, but the primitive operations are more low-level UI constructs, and graphical from the start."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UA14TGLTC",
                    "UEGFXUK3M",
                    "UAL7940NM",
                    "U5TCAFTD3",
                    "UCGAK10LS",
                    "UD6EXQVM0"
                ],
                "count": 7
            },
            {
                "name": "100",
                "users": [
                    "UAVCC2X70",
                    "U8A5MS6R1"
                ],
                "count": 2
            },
            {
                "name": "eyes",
                "users": [
                    "UCKRZS3DZ",
                    "UD6EXQVM0"
                ],
                "count": 2
            },
            {
                "name": "wave",
                "users": [
                    "UD6EXQVM0",
                    "U85HCL7JP",
                    "UHS9K1N6A"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UH85W1ML1",
        "type": "message",
        "ts": "1555515022.026000",
        "client_msg_id": "3357c7f7-f017-4df0-bad0-8d7cd9d169e0",
        "text": "How do you compare this to the principles behind Smalltalk, where everything in the system is an editable object?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2c0e4a3979e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529852667013_2c0e4a3979e8e92c4924_72.jpg",
            "first_name": "",
            "real_name": "Vitorio Miliano",
            "display_name": "vitorio",
            "team": "T5TCAFTA9",
            "name": "vito_futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2w40I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do you compare this to the principles behind Smalltalk, where everything in the system is an editable object?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555515030.026200",
        "client_msg_id": "6d4b04f5-78a8-4d3c-b2a2-4c63db2883c7",
        "text": "Sent this accidentally before finishing. One last summary. My idea is a structure editor that operates on a unified database of code, shared by all users. The structure editor is written to be highly extensible by the basic operation of matching on syntax and taking over the UI at that point. Users can register syntax-editors, share them etc. They range from the simplest color picker up to potentially, a full graphical UI. More likely, the superior interoperability provided by this architecture would lead to smaller, more focused bits of UI that would be mixed-and-matched ... today's heavy, monolithic UIs would disappear",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t2J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sent this accidentally before finishing. One last summary. My idea is a structure editor that operates on a unified database of code, shared by all users. The structure editor is written to be highly extensible by the basic operation of matching on syntax and taking over the UI at that point. Users can register syntax-editors, share them etc. They range from the simplest color picker up to potentially, a full graphical UI. More likely, the superior interoperability provided by this architecture would lead to smaller, more focused bits of UI that would be mixed-and-matched ... today's heavy, monolithic UIs would disappear"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555515392.026700",
        "client_msg_id": "240ef797-8eba-491f-861e-f1a635b70ef0",
        "text": "I haven't used smalltalk myself. I think it more or less fulfills the idea of a universal editor but I'm not sure it's a good one. I think OO programming is generally too loose, the UI abstractions from OO aren't very composable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zppv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't used smalltalk myself. I think it more or less fulfills the idea of a universal editor but I'm not sure it's a good one. I think OO programming is generally too loose, the UI abstractions from OO aren't very composable."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UH85W1ML1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1555515806.027000",
        "client_msg_id": "a9f48038-5805-4845-84a8-134325b4cd37",
        "text": "<@UH85W1ML1> Almost without exception, manipulating objects in Smalltalk is manipulating the state of the objects rather than their code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcn\/Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH85W1ML1"
                            },
                            {
                                "type": "text",
                                "text": " Almost without exception, manipulating objects in Smalltalk is manipulating the state of the objects rather than their code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555515949.027200",
        "client_msg_id": "4fa34195-acbc-496b-888e-95ff2afafffb",
        "text": "Lamdu, while at the moment more focused on lower level “real programming”, also shares the same idea in our “grander vision”..\n\nTo put it into different terms with an example - suppose that a user is editing a video - instead of using an opaque application Final Cut etc, they’ll be editing in a similar video timeline UI, which is just a domain-specific syntax-sugar for calling the appropriate video editing combinator. But an important part of any such projectional syntax sugar is that it doesn’t limit you and allows you also, if you wish, to also perform edits that change the code to anything really, even if it no longer fits the timeline pattern.. So that this timeline-like interface is for concatenating a bunch of videos in a literal list, and then the user wants to concatMap the list so that each video repeats twice - then they could do that but it just won’t have the timeline interface anymore, unless someone creates a sugar for that more complicated pattern too.\n\nBut to do that, I think that we need to start with a good ground to stand on. That’s why we’re starting with the more lower-lever programmingy stuff.\n\nIIUC Unison also has this in their grand vision, which is kind of what Paul Chiusano refers to when he talks about “UX derived from type theory”. And so Hazel too probably shares the same vision.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hi8F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu, while at the moment more focused on lower level “real programming”, also shares the same idea in our “grander vision”..\n\nTo put it into different terms with an example - suppose that a user is editing a video - instead of using an opaque application Final Cut etc, they’ll be editing in a similar video timeline UI, which is just a domain-specific syntax-sugar for calling the appropriate video editing combinator. But an important part of any such projectional syntax sugar is that it doesn’t limit you and allows you also, if you wish, to also perform edits that change the code to anything really, even if it no longer fits the timeline pattern.. So that this timeline-like interface is for concatenating a bunch of videos in a literal list, and then the user wants to concatMap the list so that each video repeats twice - then they could do that but it just won’t have the timeline interface anymore, unless someone creates a sugar for that more complicated pattern too.\n\nBut to do that, I think that we need to start with a good ground to stand on. That’s why we’re starting with the more lower-lever programmingy stuff.\n\nIIUC Unison also has this in their grand vision, which is kind of what Paul Chiusano refers to when he talks about “UX derived from type theory”. And so Hazel too probably shares the same vision."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U5TCAFTD3"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1555517004.027400",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1555517012.000000"
        },
        "client_msg_id": "2de270ab-399d-4750-8eec-f3ebcd90e50e",
        "text": "&gt;  IDE that provides the discoverability\nYep—current IDEs could do a much better job here!\n&gt; Data into code means that whenever you are operating on data - editing a TODO list say - you are literally editing code in one big program.\nThis is called “programming by demonstration”. It has pros and cons. The hard bit is “inference”: figuring what abstract operation the user intended by the single demonstrated example. DM me if you want a reference list. At the most basic level you can just dump a list of commands in order to a file (like a bash history) and not try to be smart, but these sorts of programs are not the highest quality. In Sketch-n-Sketch we’ve been playing around with an output-directed refactoring approach, but it’ll take some work to generalize that to general purpose programs. (c.f. <https:\/\/www.youtube.com\/watch?v=9JcKnJyufD8>)\n&gt; My idea is a structure editor that operates on a unified database of code, shared by all users.\nI understand this is also <@UC25EFSJC>’s vision for Hazel (<http:\/\/hazel.org\/>). He uses the term “Wikipedia” of code where everything is editable by everyone.\n&gt; The structure editor is written to be highly extensible by the basic operation of matching on syntax and taking over the UI at that point. Users can register syntax-editors, share them etc.\nAgreed! My current understanding is that the matching might be better done by types, actually. Hazel is moving in this direction, I believe.\n&gt; An extensible editor should be our OS\nAgreed! OSes need revisiting—they don’t provide good enough interfaces between disparate code elements.\n&gt; today’s heavy, monolithic UIs would disappear\nWe can hope! But I don’t think “everything is code” gets you all the way there. Even within a single language, there’s a big interface problem between software components and you’ve got to have a story for that. The problem is that it’s hard to (a) understand what kind of data the other source provides, (b) figure out the API to get it, and then (c) mangle the data into the form you need it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kfevG",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " IDE that provides the discoverability"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep—current IDEs could do a much better job here!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Data into code means that whenever you are operating on data - editing a TODO list say - you are literally editing code in one big program."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is called “programming by demonstration”. It has pros and cons. The hard bit is “inference”: figuring what abstract operation the user intended by the single demonstrated example. DM me if you want a reference list. At the most basic level you can just dump a list of commands in order to a file (like a bash history) and not try to be smart, but these sorts of programs are not the highest quality. In Sketch-n-Sketch we’ve been playing around with an output-directed refactoring approach, but it’ll take some work to generalize that to general purpose programs. (c.f. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=9JcKnJyufD8"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My idea is a structure editor that operates on a unified database of code, shared by all users."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand this is also "
                            },
                            {
                                "type": "user",
                                "user_id": "UC25EFSJC"
                            },
                            {
                                "type": "text",
                                "text": "’s vision for Hazel ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/hazel.org\/"
                            },
                            {
                                "type": "text",
                                "text": "). He uses the term “Wikipedia” of code where everything is editable by everyone."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The structure editor is written to be highly extensible by the basic operation of matching on syntax and taking over the UI at that point. Users can register syntax-editors, share them etc."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed! My current understanding is that the matching might be better done by types, actually. Hazel is moving in this direction, I believe."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An extensible editor should be our OS"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed! OSes need revisiting—they don’t provide good enough interfaces between disparate code elements."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "today’s heavy, monolithic UIs would disappear"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We can hope! But I don’t think “everything is code” gets you all the way there. Even within a single language, there’s a big interface problem between software components and you’ve got to have a story for that. The problem is that it’s hard to (a) understand what kind of data the other source provides, (b) figure out the API to get it, and then (c) mangle the data into the form you need it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555517448.027900",
        "client_msg_id": "05dc55ae-4736-4d66-945b-a24720f80d0d",
        "text": "yeah we're working on pretty much everything you mention in Hazel. send me an email if you want to chat, <mailto:cyrus.omar@gmail.com|cyrus.omar@gmail.com>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bPO5q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah we're working on pretty much everything you mention in Hazel. send me an email if you want to chat, "
                            },
                            {
                                "type": "link",
                                "url": "mailto:cyrus.omar@gmail.com",
                                "text": "cyrus.omar@gmail.com"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555518950.028600",
        "client_msg_id": "800dea87-fc06-41c3-b497-1ccd72d02756",
        "text": "<@UC21F8Q48> I'm a little bit familiar with programming by example, I don't think it's the same thing I'm going for. If you're editing a TODO list then you'd be editing some syntax like `[{name: \"get milk\"}, {name: \"change motor oil\"}]`. It would be a UI wrapper over the operation of manually typing in a list literal. There's no step of inferring a function from this input.\n\nActually I think I'm in a minority here, I think that ordinary programming languages provide a reasonable way to write logic. I don't really want to replace that kind of activity with drag-and-drop or spreadsheet interfaces or anything.\n\nI've thought about overloading editors based on type; syntax makes more sense to me right now. I think I'd rather edit, say, `take 5 (iterate succ 1)` as textual syntax, but `[1,2,3,4,5]` could be manipulated with a list control.\n\nThanks for the pointer to Hazel, I hadn't run across it before.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uuN4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " I'm a little bit familiar with programming by example, I don't think it's the same thing I'm going for. If you're editing a TODO list then you'd be editing some syntax like "
                            },
                            {
                                "type": "text",
                                "text": "[{name: \"get milk\"}, {name: \"change motor oil\"}]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It would be a UI wrapper over the operation of manually typing in a list literal. There's no step of inferring a function from this input.\n\nActually I think I'm in a minority here, I think that ordinary programming languages provide a reasonable way to write logic. I don't really want to replace that kind of activity with drag-and-drop or spreadsheet interfaces or anything.\n\nI've thought about overloading editors based on type; syntax makes more sense to me right now. I think I'd rather edit, say, "
                            },
                            {
                                "type": "text",
                                "text": "take 5 (iterate succ 1)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as textual syntax, but "
                            },
                            {
                                "type": "text",
                                "text": "[1,2,3,4,5]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be manipulated with a list control.\n\nThanks for the pointer to Hazel, I hadn't run across it before."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U7C7B75R6"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555519085.028800",
        "client_msg_id": "07189c6d-2f1c-4de7-96dc-dec5d482d59c",
        "text": "<@U79HM6726> agreed that we need to work out some fundamentals first. This is my grand vision but I've been mostly working on lower-level concerns including distributed editing, syntax-tree operations, structure editing, and UI combinators.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vs2pN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " agreed that we need to work out some fundamentals first. This is my grand vision but I've been mostly working on lower-level concerns including distributed editing, syntax-tree operations, structure editing, and UI combinators."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555519256.029100",
        "client_msg_id": "8d2c65c9-6ff7-41bf-82c5-b5cd5c319697",
        "text": "<@UH84GQ3CZ> it sounds like we’re going on very similar paths. Are you familiar with Lamdu?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P0416",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH84GQ3CZ"
                            },
                            {
                                "type": "text",
                                "text": " it sounds like we’re going on very similar paths. Are you familiar with Lamdu?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1555519563.029300",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1555519568.000000"
        },
        "client_msg_id": "a48a4f49-af50-408c-85ac-89c61384269f",
        "text": "&gt; a UI wrapper over the operation of manually typing in a list literal\nI assumed you were implying full PBD because literal editing is only a small part of programming—it’s data manipulation not computation manipulation. You may be interested in Mikaël Mayer’s take on bidirectional programming: <https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU>\n&gt; I think I’m in a minority here, I think that ordinary programming languages provide a reasonable way to write logic\nNobody’s discovered anything better—that’s for sure!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0t1Im",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a UI wrapper over the operation of manually typing in a list literal"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I assumed you were implying full PBD because literal editing is only a small part of programming—it’s data manipulation not computation manipulation. You may be interested in Mikaël Mayer’s take on bidirectional programming: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=SoLkTKmr4vU"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I’m in a minority here, I think that ordinary programming languages provide a reasonable way to write logic"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nobody’s discovered anything better—that’s for sure!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555519629.029700",
        "client_msg_id": "0a79f5f5-7f35-4a12-92f2-ac2b358e374d",
        "text": "&gt; I think I’m in a minority here, I think that ordinary programming languages provide a reasonable way to write logic\n\nIndeed it doesn’t seem to be the minority of this thread at least :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WZ\/aL",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I’m in a minority here, I think that ordinary programming languages provide a reasonable way to write logic"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIndeed it doesn’t seem to be the minority of this thread at least "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555520362.030000",
        "client_msg_id": "836c2b03-5b35-45a1-b2e1-8d80181d0672",
        "text": "Lamdu's certainly been on my radar, as well as Unison. I didn't realize that Lamdu's larger vision coincided so closely with mine, I'll have to take a closer look.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mZ6A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu's certainly been on my radar, as well as Unison. I didn't realize that Lamdu's larger vision coincided so closely with mine, I'll have to take a closer look."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555521004.030200",
        "edited": {
            "user": "U79HM6726",
            "ts": "1555521063.000000"
        },
        "client_msg_id": "c33d1e61-4171-4ecb-8279-73eb1b4a4eed",
        "text": "Yeah we haven’t communicated our vision and plans as much as Unison or Hazel.\nSince I first saw <@U6KQ2S410>’s subtext videos in 2005 and was subsequently excited about ideas of how programming should be, my fellow leet colleagues were quite skeptical when discussing such stuff, so our approach tended more towards programming something and then talking\/demoing what we’ve already implemented.\n\nBut the not-as-discussed vision is very consistent with both Unison and Hazel. Even the differences with Lamdu that Hazel highlights, like Lamdu stopping evaluations on holes while Hazel resumes are not differences in vision but just in what we have got to implement so far.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fMcf1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah we haven’t communicated our vision and plans as much as Unison or Hazel.\nSince I first saw "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": "’s subtext videos in 2005 and was subsequently excited about ideas of how programming should be, my fellow leet colleagues were quite skeptical when discussing such stuff, so our approach tended more towards programming something and then talking\/demoing what we’ve already implemented.\n\nBut the not-as-discussed vision is very consistent with both Unison and Hazel. Even the differences with Lamdu that Hazel highlights, like Lamdu stopping evaluations on holes while Hazel resumes are not differences in vision but just in what we have got to implement so far."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555521375.030700",
        "client_msg_id": "837ad12d-5def-4022-98ea-66ca71d23652",
        "text": "yeah I think there are several similar projects that differ in the details",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MVfq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah I think there are several similar projects that differ in the details"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555521437.030900",
        "client_msg_id": "c1212850-1432-4751-8c96-2cf68dc5d5f4",
        "text": "right now in the Hazel project, we're working on 0) scaling up to an Elm\/ML-like language; 1) \"live palettes\", i.e. UIs that generate code underneath to fill holes and that have access to dynamic information and 2) a semantics for collaborative editing using CRDTs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lGzjJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right now in the Hazel project, we're working on 0) scaling up to an Elm\/ML-like language; 1) \"live palettes\", i.e. UIs that generate code underneath to fill holes and that have access to dynamic information and 2) a semantics for collaborative editing using CRDTs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555521472.031100",
        "edited": {
            "user": "UC25EFSJC",
            "ts": "1555521490.000000"
        },
        "client_msg_id": "f552b558-195a-4692-96b0-b02ffe177ce8",
        "text": "the ultimate goal is, like Brian mentioned, a \"computational Wikipedia\" where each page is a module and each element on the page, including \"graphical elements\", is an expression in a typed FP",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FNh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the ultimate goal is, like Brian mentioned, a \"computational Wikipedia\" where each page is a module and each element on the page, including \"graphical elements\", is an expression in a typed FP"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1555524631.031600",
        "client_msg_id": "bf6ecbd8-344e-4014-8484-92029f569a12",
        "text": "It seems like the biggest difference between my approach and both Hazel and Lamdu is that I'm not envisioning a type system as an integral component of the editor. I might add a type system but I think the main concepts I'm after could be put on top of untyped lisp or similar.\n\nThat said there seems to be a lot of overlap. \"computational Wikipedia\" is a great metaphor. I'm also working on collaborative editing with operational-transform, which I think is sort of just CRDTs through a different lens.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eoCr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like the biggest difference between my approach and both Hazel and Lamdu is that I'm not envisioning a type system as an integral component of the editor. I might add a type system but I think the main concepts I'm after could be put on top of untyped lisp or similar.\n\nThat said there seems to be a lot of overlap. \"computational Wikipedia\" is a great metaphor. I'm also working on collaborative editing with operational-transform, which I think is sort of just CRDTs through a different lens."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555524843.031800",
        "client_msg_id": "08eaad5b-e811-47c9-bcd4-83098655333e",
        "text": "static types enable a lot of nice edit-time automation at various scales. if you don't want to write types, Hazel has type-level holes (and we're adding type-hole-inference soon)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0ik",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "static types enable a lot of nice edit-time automation at various scales. if you don't want to write types, Hazel has type-level holes (and we're adding type-hole-inference soon)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555524884.032000",
        "client_msg_id": "ef068641-d412-42bf-89a7-8ac0951d79b3",
        "text": "operational transforms are an alternative approach to CRDTs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KWA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "operational transforms are an alternative approach to CRDTs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555524901.032200",
        "client_msg_id": "96ac374f-c675-4df9-b844-47ea53630b6c",
        "text": "and if you go for the structural editor approach anyway, then you can have a much nicer UX for types. See <https:\/\/docs.google.com\/presentation\/d\/e\/2PACX-1vR7jyq9qWjbF9nIxysT8U3p_osJYn9tP7-vKvczcVNCy-JPwt7zTrvEZuE-lq2WxJwcg07STAOkpvGq\/pub?start=false&amp;loop=false&amp;delayms=5000&amp;slide=id.p> for more on this (these are slides from a talk that will hopefully be uploaded soon so for now fill in the blanks when reading :slightly_smiling_face:)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KNii",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and if you go for the structural editor approach anyway, then you can have a much nicer UX for types. See "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.google.com\/presentation\/d\/e\/2PACX-1vR7jyq9qWjbF9nIxysT8U3p_osJYn9tP7-vKvczcVNCy-JPwt7zTrvEZuE-lq2WxJwcg07STAOkpvGq\/pub?start=false&amp;loop=false&amp;delayms=5000&amp;slide=id.p",
                                "text": "https:\/\/docs.google.com\/presentation\/d\/e\/2PACX-1vR7jyq9qWjbF9nIxysT8U3p_osJYn9tP7-vKvczcVNCy-JPwt7zTrvEZuE-lq2WxJwcg07STAOkpvGq\/pub?start=false&loop=false&delayms=5000&slide=id.p"
                            },
                            {
                                "type": "text",
                                "text": " for more on this (these are slides from a talk that will hopefully be uploaded soon so for now fill in the blanks when reading "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Projectional editing can enable solving most of the difficulties that types introduce in textual languages",
        "files": [
            {
                "id": "FHYUCQ2CC",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U79HM6726",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GX8K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Projectional editing can enable solving most of the difficulties that types introduce in textual languages"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1555525065.032500",
        "client_msg_id": "7f06dece-1a29-43ee-a30e-ab09f07261f0",
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC25EFSJC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1555529858.033000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1555537588.000000"
        },
        "client_msg_id": "1ba0dccf-ed27-4e46-b2f8-03871e5b0c3c",
        "text": "Hi <@UH84GQ3CZ>, I think I'm working on much the same thing as you initially describe, and I think we even share some if the same views (or implementation choices) as far as dynamic types, using Lisp (or similar) as an underlying model, UI interaction as \"sugar\" for code manipulation, extending the idea of \"macros\"\/REPL into the UI, a UI that can extend and edit itself, etc.\n\nWe should talk more, and exchange thoughts",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t2m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UH84GQ3CZ"
                            },
                            {
                                "type": "text",
                                "text": ", I think I'm working on much the same thing as you initially describe, and I think we even share some if the same views (or implementation choices) as far as dynamic types, using Lisp (or similar) as an underlying model, UI interaction as \"sugar\" for code manipulation, extending the idea of \"macros\"\/REPL into the UI, a UI that can extend and edit itself, etc.\n\nWe should talk more, and exchange thoughts"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1555530438.033200",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1555530525.000000"
        },
        "client_msg_id": "47070806-b27e-4bf5-b9f0-bc743c86414a",
        "text": "I think the differing opinions\/choices (e.g. static or dynamic types) on otherwise similar projects\/goals, is a great opportunity to see how different branches of similar ideas play out.\n\nHopefully we get different end results \/ capabilities that will give us more value than we'd have by collectively commiting to only one. (Because, individually we've got to commit to specifics, and can't see where else we'd have ended up)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a48Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the differing opinions\/choices (e.g. static or dynamic types) on otherwise similar projects\/goals, is a great opportunity to see how different branches of similar ideas play out.\n\nHopefully we get different end results \/ capabilities that will give us more value than we'd have by collectively commiting to only one. (Because, individually we've got to commit to specifics, and can't see where else we'd have ended up)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1555536223.033600",
        "edited": {
            "user": "U7C7B75R6",
            "ts": "1555563799.000000"
        },
        "client_msg_id": "c4f64efe-6578-44b9-8a73-f8c58ad3b0b2",
        "text": "So you too pick a red one? Welcome, aboard!\n\nMeta question: How does it feel to get flood of responses like \"Heyy it's pretty much I am working on.\"?\nIt's quite fascinating how similar conclusions people get more or less independently.\n\n-Consider is it code editor where the code is also data or is it \"just\" a data editor where the code is one possible domain (I prefer last one).\n    -I am really excited about empowering users for more complex use cases with Unix like reusable tools where classic GUIs are not powerful enough.\n    -A dream from an application developer point of view would be that you just describe part of your API and you would get super powerful UI cheaply.\n-I think some typing is required and for free data editing, I think it shouldn't be nominal.\n-One of my current problems is that what should a code execution look like? You can show a representation of computation result (diagram, SmallTalk GUI) and look for specific element and code behind it or the complete opposite where you can see partial results inside of your code. Or something completely different? You sided this slightly with REPL but it's pretty vague.\n&gt; Read and Print are text-based primitives. The modern equivalent is a graphical UI that can extend and edit itself.\nSo unsolved problem(?), all ideas are welcome.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3c+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So you too pick a red one? Welcome, aboard!\n\nMeta question: How does it feel to get flood of responses like \"Heyy it's pretty much I am working on.\"?\nIt's quite fascinating how similar conclusions people get more or less independently.\n\n-Consider is it code editor where the code is also data or is it \"just\" a data editor where the code is one possible domain (I prefer last one).\n    -I am really excited about empowering users for more complex use cases with Unix like reusable tools where classic GUIs are not powerful enough.\n    -A dream from an application developer point of view would be that you just describe part of your API and you would get super powerful UI cheaply.\n-I think some typing is required and for free data editing, I think it shouldn't be nominal.\n-One of my current problems is that what should a code execution look like? You can show a representation of computation result (diagram, SmallTalk GUI) and look for specific element and code behind it or the complete opposite where you can see partial results inside of your code. Or something completely different? You sided this slightly with REPL but it's pretty vague."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Read and Print are text-based primitives. The modern equivalent is a graphical UI that can extend and edit itself."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So unsolved problem(?), all ideas are welcome."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555559444.034500",
        "client_msg_id": "b3488a1e-5031-4195-bc32-c10b9def0408",
        "text": "(I don't think anyone was ranting, its exciting to see other people interested in similar ideas)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X3nSF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I don't think anyone was ranting, its exciting to see other people interested in similar ideas)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UAVCC2X70",
                    "UH84GQ3CZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1555562917.034700",
        "client_msg_id": "1b232b3f-ca12-42b1-bee8-45f408582b25",
        "text": "<@UH84GQ3CZ> can you go a bit into what do you see as the benefits for end users?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8nY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH84GQ3CZ"
                            },
                            {
                                "type": "text",
                                "text": " can you go a bit into what do you see as the benefits for end users?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1555564361.035100",
        "client_msg_id": "5f8e26ce-7a78-43e3-a1db-0d2c44c6ec5d",
        "text": "(<@UC25EFSJC> Uh my mental image of meaning of 'rant'-word was incorrect. I edited that away.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2r=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "("
                            },
                            {
                                "type": "user",
                                "user_id": "UC25EFSJC"
                            },
                            {
                                "type": "text",
                                "text": " Uh my mental image of meaning of 'rant'-word was incorrect. I edited that away.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1555568162.035600",
        "client_msg_id": "61f50893-6e35-4f93-81d2-77162ae553cb",
        "text": "ok no worries :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555514720.025900",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G6J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok no worries "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]