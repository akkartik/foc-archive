[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1692947456.279949",
        "client_msg_id": "e543c989-0598-41e7-b707-4f0fab198800",
        "text": "A nice essay on programming languages, but with a message that is much more general: <https:\/\/journal.infinitenegativeutility.com\/leaving-haskell-behind>\n\nIt's about the tension between \"make better technology\", \"use start-of-the-art technology\", and \"use boring (but stable and well understood) technology\". Different goals, different tools.\n\nAnother example I have experienced a lot: mathematics and physics. Mathematicians work on new mathematics, mathematical physicists introduce state-of-the-art mathematics into physics, and all other physicists use 100-year-old mathematics from textbooks. And each group complains about the attitude of the two others.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692947456.279949",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1693073043.323009",
        "reply_users": [
            "UA14TGLTC",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1693025682.673339"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1693073043.323009"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/journal.infinitenegativeutility.com\/leaving-haskell-behind",
                "service_icon": "https:\/\/journal.infinitenegativeutility.com\/favicon.ico",
                "ts": 1692739673,
                "id": 1,
                "original_url": "https:\/\/journal.infinitenegativeutility.com\/leaving-haskell-behind",
                "fallback": "Infinite Negative Utility: Leaving Haskell behind — Infinite Negative Utility",
                "text": "For almost a complete decade—starting with discovering Haskell in about 2009 and right up until switching to a job where I used primarily...",
                "title": "Leaving Haskell behind — Infinite Negative Utility",
                "title_link": "https:\/\/journal.infinitenegativeutility.com\/leaving-haskell-behind",
                "service_name": "Infinite Negative Utility",
                "fields": [
                    {
                        "value": "65,134",
                        "title": "Views",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RuC1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A nice essay on programming languages, but with a message that is much more general: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/journal.infinitenegativeutility.com\/leaving-haskell-behind"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's about the tension between \"make better technology\", \"use start-of-the-art technology\", and \"use boring (but stable and well understood) technology\". Different goals, different tools.\n\nAnother example I have experienced a lot: mathematics and physics. Mathematicians work on new mathematics, mathematical physicists introduce state-of-the-art mathematics into physics, and all other physicists use 100-year-old mathematics from textbooks. And each group complains about the attitude of the two others."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1692965730.536949",
        "client_msg_id": "d0435a8d-0a94-4000-8eea-8bc04639a8bd",
        "text": "Has anyone spent time with <https:\/\/github.com\/kspalaiologos\/kamilalisp|kamilalisp>?\n\nI've spent the last week or so exploring it, and it keeps blowing my mind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1693025799.955969",
        "reply_users": [
            "UMQ6LR9NZ",
            "UC2A2ARPT",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UMQ6LR9NZ",
                "ts": "1692965777.533289"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1692977168.253659"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1692977190.006729"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1692982478.975529"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1693025799.955969"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DrJ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone spent time with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/kspalaiologos\/kamilalisp",
                                "text": "kamilalisp"
                            },
                            {
                                "type": "text",
                                "text": "?\n\nI've spent the last week or so exploring it, and it keeps blowing my mind."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1692965777.533289",
        "client_msg_id": "dc4b0eeb-d0f8-4e93-a3a8-10aa8116d272",
        "text": "At first I thought it was a joke, because maybe IMTA?\n\nBut, I saw this snippet from its README and was like, so _everything_?\n\n&gt; KamilaLisp allows for actor programming, concurrent programming, imperative programming, functional programming, array programming, pure functional programming, object-oriented programming, rudimentary logic programming, mathematical programming, backend development, numerical and scientific computation, scripting and system administration, symbolic computation (real and complex analysis), tacit (point-free) programming, concurrent programming and event-driven programming. \nBut...like...yeah.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DeO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At first I thought it was a joke, because maybe IMTA?\n\nBut, I saw this snippet from its README and was like, so "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "KamilaLisp allows for actor programming, concurrent programming, imperative programming, functional programming, array programming, pure functional programming, object-oriented programming, rudimentary logic programming, mathematical programming, backend development, numerical and scientific computation, scripting and system administration, symbolic computation (real and complex analysis), tacit (point-free) programming, concurrent programming and event-driven programming. "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut...like...yeah."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1692977168.253659",
        "client_msg_id": "9BF70F5D-D4A8-4745-B7E4-F21337C99B1A",
        "text": "Created by a 19 year old!?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Z+P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Created by a 19 year old!?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1692977190.006729",
        "client_msg_id": "b85da410-0fb8-44b2-b066-6c77cef4ece9",
        "text": "right!? everything about this makes me feel totally inept.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wuNdl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right!? everything about this makes me feel totally inept."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1692978898.997619",
        "client_msg_id": "1F9B41BF-2AA2-4F61-9C77-4DF8A68D8C2E",
        "text": "I use it all the time. It’s unfortunately pretty crashy, but since it auto-saves I haven’t lost much work. It’s just so fast! I store notes in Craft and Logseq, but often draft them in Bike because it feels dozens of times more responsive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691418276.681549",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u2Cf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use it all the time. "
                            },
                            {
                                "type": "text",
                                "text": "It’s"
                            },
                            {
                                "type": "text",
                                "text": " unfortunately pretty crashy, but since it auto-saves I haven’t lost much work. It’s just so fast! I store notes in Craft and Logseq, but often draft them in Bike because it feels dozens of times more responsive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1692982478.975529",
        "client_msg_id": "09dd58c3-1adf-4b24-abb8-445eb8ae8fca",
        "text": "but also in awe — I love how it empowers you to think for a problem space, so, rather than “solve this the APL way,” vs “solve this the functional way” or “solve this the OO way” you can ask “what way of the ways at hand makes most sense for this bit?” — I’m used to making those choices at the language-level, e.g. “given this problem, I reach for X language” but here I can hand a tacit function working on a matrix off to an object!? :male-cook:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y97E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but also in awe — I love how it empowers you to think for a problem space, so, rather than “solve this the APL way,” vs “solve this the functional way” or “solve this the OO way” you can ask “what way of the ways at hand makes most sense for this bit?” — I’m used to making those choices at the language-level, e.g. “given this problem, I reach for X language” but here I can hand a tacit function working on a matrix off to an object!? "
                            },
                            {
                                "type": "emoji",
                                "name": "male-cook",
                                "unicode": "1f468-200d-1f373"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1693025682.673339",
        "client_msg_id": "cfbfd826-dc05-427c-b374-c9eab39cdf69",
        "text": "Some excellent quotes:\n&gt; I would describe good Haskell code as “brittle”, and I mean that as a compliment. People tend to casually use “brittle” to mean “prone to breakage”, but in materials science what “brittle” means is that something breaks without bending: when a brittle material reaches the limits of its strength, it fractures instead of deforming. Haskell is a language where abstractions do not “bend” (or permit invalid programs) but rather “break” (fail to compile) in the face of problems.\nAnd another:\n&gt; I once heard it said that Haskell lets you work with functions the way Perl lets you work with strings. Lots of Haskell idioms, like monads, are perfectly expressible in other languages: Haskell just makes them feel natural, while writing a monad in many other languages feels like you have to do lots of busy-work.\nI wish the critique of Haskell was as good as the love expressed for it.\n\nFor my part, I just find that most attempts write Haskell programs ends up down theoretical rabbit holes.\n\nHere's a tiny, silly example.  For illustration purposes, I wanted to write `take 25 (map (^2) [0..])` as:\n```do\n  i &lt;- [0..]\n  let ii = i * i\n  guard (i &lt; 25)\n  return ii```\nThis is, of course, bad because it loops after producing the 25 squares.  You keep pulling off `i`s and keep fining that they are not longer less than 25.  It would be \"neat\" if we could replace `guard` with some sort of `until`.  But what sort?  Could get lost for hours.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692947456.279949",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GYjRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some excellent quotes:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would describe good Haskell code as “brittle”, and I mean that as a compliment. People tend to casually use “brittle” to mean “prone to breakage”, but in materials science what “brittle” means is that something breaks without bending: when a brittle material reaches the limits of its strength, it fractures instead of deforming. Haskell is a language where abstractions do not “bend” (or permit invalid programs) but rather “break” (fail to compile) in the face of problems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And another:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I once heard it said that Haskell lets you work with functions the way Perl lets you work with strings. Lots of Haskell idioms, like monads, are perfectly expressible in other languages: Haskell just makes them feel natural, while writing a monad in many other languages feels like you have to do lots of busy-work."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wish the critique of Haskell was as good as the love expressed for it.\n\nFor my part, I just find that most attempts write Haskell programs ends up down theoretical rabbit holes.\n\nHere's a tiny, silly example.  For illustration purposes, I wanted to write "
                            },
                            {
                                "type": "text",
                                "text": "take 25 (map (^2) [0..])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do\n  i <- [0..]\n  let ii = i * i\n  guard (i < 25)\n  return ii"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is, of course, bad because it loops after producing the 25 squares.  You keep pulling off "
                            },
                            {
                                "type": "text",
                                "text": "i",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "s and keep fining that they are not longer less than 25.  It would be \"neat\" if we could replace "
                            },
                            {
                                "type": "text",
                                "text": "guard",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with some sort of "
                            },
                            {
                                "type": "text",
                                "text": "until",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  But what sort?  Could get lost for hours."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1693025799.955969",
        "client_msg_id": "9eb071e0-891c-482e-ab4a-c9ff65b98962",
        "text": "Looks like someone is having fun.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1692965730.536949",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iRY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like someone is having fun."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]