[
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758179471.141799",
        "client_msg_id": "6ce57a22-8209-4110-b144-b2f5c09b1be9",
        "text": "Please, share your favorite resources about approaches to versioning of APIs, DB schemas, code libraries etc.\nVersions rollout, support, and deprecation still feel unsolved and ad-hoc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "reply_count": 21,
        "reply_users_count": 8,
        "latest_reply": "1758298418.400279",
        "reply_users": [
            "U06SS0DHZD1",
            "U07BD7U4S4R",
            "UQ706GB9U",
            "U02E4DAQGSZ",
            "U07CGRNH6S2",
            "U096YUBC3KP",
            "U075Q2WP3UK",
            "U089J8FNGB1"
        ],
        "replies": [
            {
                "user": "U06SS0DHZD1",
                "ts": "1758181009.066229"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758181257.274929"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758181502.094099"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1758189693.780859"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758195605.138679"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1758196392.521719"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758200979.617399"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758201253.525249"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1758205473.214169"
            },
            {
                "user": "U07CGRNH6S2",
                "ts": "1758205535.198939"
            },
            {
                "user": "U096YUBC3KP",
                "ts": "1758208121.040019"
            },
            {
                "user": "U075Q2WP3UK",
                "ts": "1758214951.931749"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758217566.604339"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758217825.041959"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758217879.596049"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1758220852.548819"
            },
            {
                "user": "U089J8FNGB1",
                "ts": "1758244077.028709"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758297989.742139"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1758298209.208819"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758298307.259419"
            },
            {
                "user": "U07BD7U4S4R",
                "ts": "1758298418.400279"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GxVt5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please, share your favorite resources about approaches to versioning of APIs, DB schemas, code libraries etc.\nVersions rollout, support, and deprecation still feel unsolved and ad-hoc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06SS0DHZD1",
        "type": "message",
        "ts": "1758181009.066229",
        "client_msg_id": "7f11206f-08bf-4615-99f4-045139af0ea1",
        "text": "Very true. That's why static linking (modular monoliths) are so much nicer to work with.\nHere is a fun idea: separately built pieces of code often lead to incompatibility and bugs when they exchange data whose schema has changed. Would it be possible to keep the data distributed but send code as messages (as opposed to keeping the code distributed and sending data as messages).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "287ba5559ee1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-04-04\/6922823105585_287ba5559ee1cedd6b98_72.png",
            "first_name": "Marek",
            "real_name": "Marek Rogalski",
            "display_name": "maf",
            "team": "T5TCAFTA9",
            "name": "mafikpl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZQs+p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very true. That's why static linking (modular monoliths) are so much nicer to work with.\nHere is a fun idea: separately built pieces of code often lead to incompatibility and bugs when they exchange data whose schema has changed. Would it be possible to keep the data distributed but send code as messages (as opposed to keeping the code distributed and sending data as messages)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758181257.274929",
        "client_msg_id": "64d15bff-1e66-47db-965b-5991991342de",
        "text": "was hoping for approaches within traditional architectures :sweat_smile: e.g.  <https:\/\/blog.datomic.com\/2017\/01\/the-ten-rules-of-schema-growth.html> but, say for SQL databases.\nFor scenarios where 1 field is no longer enough for &lt;feature&gt; and second is added, but prev api version still needs to be online, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KjPcd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "was hoping for approaches within traditional architectures "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": " e.g.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.datomic.com\/2017\/01\/the-ten-rules-of-schema-growth.html"
                            },
                            {
                                "type": "text",
                                "text": " but, say for SQL databases.\nFor scenarios where 1 field is no longer enough for <feature> and second is added, but prev api version still needs to be online, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758181502.094099",
        "client_msg_id": "b975406b-c248-4e3d-9714-e14094bedec5",
        "text": "a catalog of such scenarios would help too",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JUNGT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a catalog of such scenarios would help too"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1758189693.780859",
        "client_msg_id": "F8F0A952-0D6B-4F80-8465-10579A1C90EA",
        "text": "TL;DR: versión 1 and 2 of a library should packaged as deferent dependencies that can be loaded into the runtime at the same time to make migrations possible earlier.\n<https:\/\/jolynch.github.io\/posts\/semver_considered_harmful\/|https:\/\/jolynch.github.io\/posts\/semver_considered_harmful\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mi7g\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "TL;DR: versión 1 and 2 of a library should packaged as deferent dependencies that can be loaded into the runtime at the same time to make migrations possible earlier"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jolynch.github.io\/posts\/semver_considered_harmful\/",
                                "text": "https:\/\/jolynch.github.io\/posts\/semver_considered_harmful\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758195605.138679",
        "client_msg_id": "3208ad52-ba80-405f-be51-678775ca536a",
        "text": "Libraries are the easiest case of all, especially pure ones.\nJust(?) make runtime names be different between versions, eg. don't reuse java class names between versions, so many of those could coexist within the same runtime.\nNot pure (with some singletons or other equivalents of shared state) are not so trivial though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQgRL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Libraries are the easiest case of all, especially pure ones.\nJust(?) make runtime names be different between versions, eg. don't reuse java class names between versions, so many of those could coexist within the same runtime.\nNot pure (with some singletons or other equivalents of shared state) are not so trivial though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1758196392.521719",
        "client_msg_id": "f428f5d1-c21a-4031-a97d-8fd232ef217f",
        "text": "libraries -&gt; semver\nAPIs -&gt; never deprecate, append only. Add route prefix v1\/ v2\/ etc. for breaking changes. I like the <https:\/\/google.aip.dev\/180|Google API Design guide>, but also the <https:\/\/opensource.zalando.com\/restful-api-guidelines\/|Zalando> one.\nDBs -&gt; Expand - contract pattern -&gt; Alembic or something similar to remember where we are. Zillions of articles on the expand and contract pattern, I feel that is well trodden best-practice, which also applies to infra changes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cMD11",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "libraries -> semver\nAPIs -> never deprecate, append only. Add route prefix v1\/ v2\/ etc. for breaking changes. I like the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/google.aip.dev\/180",
                                "text": "Google API Design guide"
                            },
                            {
                                "type": "text",
                                "text": ", but also the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/opensource.zalando.com\/restful-api-guidelines\/",
                                "text": "Zalando"
                            },
                            {
                                "type": "text",
                                "text": " one.\nDBs -> Expand - contract pattern -> Alembic or something similar to remember where we are. Zillions of articles on the expand and contract pattern, I feel that is well trodden best-practice, which also applies to infra changes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758200979.617399",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1758201012.000000"
        },
        "client_msg_id": "dd147520-f810-4e18-b754-5ceae11feb6d",
        "text": "semver sucks\nnever deprecate api - not viable in the slightest",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G61CB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "semver sucks\nnever deprecate api - not viable in the slightest"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758201253.525249",
        "client_msg_id": "c4d2e734-a025-4c75-bb1c-64e199e9f607",
        "text": "\"expand and contract pattern\" just means \"keep several versions alive simultaneously, sometimes deprecate old ones\". zero specifics.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H9f9N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"expand and contract pattern\" just means \"keep several versions alive simultaneously, sometimes deprecate old ones\". zero specifics."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "This is an overview of how we did hundreds of database migrations while minimizing client burden.",
        "files": [
            {
                "id": "F09FXCVT4TC",
                "created": 1758205252,
                "timestamp": 1758205252,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image\/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UQ706GB9U",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 44134,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F09FXCVT4TC\/image.png?token=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "url_private_download": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F09FXCVT4TC\/download\/image.png?token=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "media_display_type": "unknown",
                "thumb_64": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_64.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_80": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_80.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_360": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_360.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_360_w": 360,
                "thumb_360_h": 124,
                "thumb_480": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_480.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_480_w": 480,
                "thumb_480_h": 166,
                "thumb_160": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_160.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_720": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_720.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_720_w": 720,
                "thumb_720_h": 248,
                "thumb_800": "https:\/\/files.slack.com\/files-tmb\/T5TCAFTA9-F09FXCVT4TC-409d5b0396\/image_800.png?t=xoxe-197418537349-9563586786369-9561652713025-65bb8fe543aecc29d5ac9ddff9d0bf09",
                "thumb_800_w": 800,
                "thumb_800_h": 276,
                "original_w": 829,
                "original_h": 286,
                "thumb_tiny": "AwARADDTI5Byfp60i5yc+vFLSY4xk0AB+73zjtR3ByR7etBzxjmkxkdTyKAEcna23cCBwQM0+kIyOpFLQAUUUUAFFFFABRRRQB\/\/2Q==",
                "permalink": "https:\/\/feelingofcomputing.slack.com\/files\/U5TCAFTD3\/F09FXCVT4TC\/image.png",
                "permalink_public": "https:\/\/slack-files.com\/T5TCAFTA9-F09FXCVT4TC-9f49ec1954",
                "is_starred": false,
                "skipped_shares": true,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UQ706GB9U",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MzZ1W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is an overview of how we did hundreds of database migrations while minimizing client burden."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1758205473.214169",
        "client_msg_id": "531cc19f-20ce-4aed-bd34-944b68cb14e4",
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R"
    },
    {
        "user": "U07CGRNH6S2",
        "type": "message",
        "ts": "1758205535.198939",
        "client_msg_id": "9ee99e3c-1f43-47c0-8e1d-d7d57dd02d25",
        "text": "For APIs, I think server should return api version number and client should know how to use it. <https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/|https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdd63ba2bec5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/dd63ba2bec5f7ecc9f23801caf0ace88.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "Jari",
            "real_name": "Jari",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mr.jari.kuusisto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png?m=1713868326i",
                "thumb_url": "https:\/\/s0.wp.com\/i\/blank.jpg?m=1383295312i",
                "thumb_width": 200,
                "thumb_height": 200,
                "ts": 1644340620,
                "id": 1,
                "original_url": "https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/",
                "fallback": "My Way With Java: REST API Design Fundamentals",
                "text": "This post addresses the fundamental API design problems and gives solutions to them. The often presented problems are: API \/ schema versioning during API evolution RESTful way to design nested Reso…",
                "title": "REST API Design Fundamentals",
                "title_link": "https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/",
                "service_name": "My Way With Java"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jvWTQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For APIs, I think server should return api version number and client should know how to use it. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/",
                                "text": "https:\/\/jarirajari.wordpress.com\/2022\/02\/08\/api-design-fundamentals\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U096YUBC3KP",
        "type": "message",
        "ts": "1758208121.040019",
        "client_msg_id": "f86830b1-1840-4975-b5e8-093089419a6d",
        "text": "This is my personal canonical text for web API versioning <https:\/\/stripe.com\/blog\/api-versioning|https:\/\/stripe.com\/blog\/api-versioning>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd73c13a9fb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-07-24\/9258602927281_cbd73c13a9fbc1999873_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Buckmaster",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel961",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/stripe.com\/blog\/api-versioning",
                "service_icon": "https:\/\/stripe.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/stripe.com\/blog\/api-versioning",
                "fallback": "APIs as infrastructure: future-proofing Stripe with versioning",
                "text": "APIs as infrastructure: future-proofing Stripe with versioning",
                "title": "APIs as infrastructure: future-proofing Stripe with versioning",
                "title_link": "https:\/\/stripe.com\/blog\/api-versioning",
                "service_name": "stripe.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6NMyH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is my personal canonical text for web API versioning "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stripe.com\/blog\/api-versioning",
                                "text": "https:\/\/stripe.com\/blog\/api-versioning"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U075Q2WP3UK",
        "type": "message",
        "ts": "1758214951.931749",
        "client_msg_id": "714030fa-03cb-4abc-84c9-438a55a2358e",
        "text": "Are you specifically looking for external-facing versioning? For internal, my favorite technique is live code generation with a compiled language, where I can quickly see what I’ve broken.\n\nIf I didn’t have legacy architecture, and could follow that concept all the way through, I’d reach for Lamdera: <https:\/\/dashboard.lamdera.app\/docs\/overview>. Then all API changes and migrations become type-safe mappings. Obviously that doesn’t work for everything, but it’s powerful when you go all-in.\n\n&gt; Libraries are the easiest case of all, especially pure ones.\nElm has spoiled me to everything else. :blush:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d91a808c033",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-05-29\/7194211094498_6d91a808c03324f48378_72.png",
            "first_name": "Jared",
            "real_name": "Jared M. Smith",
            "display_name": "Jared M. Smith",
            "team": "T5TCAFTA9",
            "name": "absynce",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YgNVX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you specifically looking for external-facing versioning? For internal, my favorite technique is live code generation with a compiled language, where I can quickly see what I’ve broken.\n\nIf I didn’t have legacy architecture, and could follow that concept all the way through, I’d reach for Lamdera: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dashboard.lamdera.app\/docs\/overview"
                            },
                            {
                                "type": "text",
                                "text": ". Then all API changes and migrations become type-safe mappings. Obviously that doesn’t work for everything, but it’s powerful when you go all-in.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Libraries are the easiest case of all, especially pure ones."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Elm has spoiled me to everything else. "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758217566.604339",
        "client_msg_id": "5a8b8d03-c578-4737-8da1-b1e828464b43",
        "text": "Not only external-facing one. But external is the hardest, because it is a superset of all others, and has all the problems, smaller pieces might not have: shared global state across versions (db), unknown open set of clients spread across time (you never know if 4yo client will call some endpoint within next 5minutes), etc. (actually, what else?).\n\nOn the day job, I need to figure out cheapest 80% solution to at least detect (if not enforce) backward compatibility breakage, balancing dev speed vs. support burden.\nIn my after hours project (think unisonlang, but retrofit, not green field), I need to figure out how \"library release artifacts\" look like across the versions, so those would cooperate with the rest of similar libraries or projects.\n\nSo any strategies, tactics, povs, tips and tricks, gotchas, usecases, – help, at least to map out the problem\/solution space, before grounding onto particular tech stack.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mghN9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not only external-facing one. But external is the hardest, because it is a superset of all others, and has all the problems, smaller pieces might not have: shared global state across versions (db), unknown open set of clients spread across time (you never know if 4yo client will call some endpoint within next 5minutes), etc. (actually, what else?).\n\nOn the day job, I need to figure out cheapest 80% solution to at least detect (if not enforce) backward compatibility breakage, balancing dev speed vs. support burden.\nIn my after hours project (think unisonlang, but retrofit, not green field), I need to figure out how \"library release artifacts\" look like across the versions, so those would cooperate with the rest of similar libraries or projects.\n\nSo any strategies, tactics, povs, tips and tricks, gotchas, usecases, – help, at least to map out the problem\/solution space, before grounding onto particular tech stack."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U075Q2WP3UK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758217825.041959",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1758218112.000000"
        },
        "client_msg_id": "aff903f4-0976-4cce-9596-2d0b42789f27",
        "text": "re: semver sucks\nand about decomposition of \"change\" into backward in\/compatible ops\nhere:\nspec – roughly json schema, but for clojure data and fns,\nclojure – lisp on jvm\nmaven – *the* packages repository for jvm langs\n<https:\/\/www.youtube.com\/watch?v=oyLBGkS5ICk>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=oyLBGkS5ICk",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/oyLBGkS5ICk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/oyLBGkS5ICk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Spec-ulation Keynote - Rich Hickey\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=oyLBGkS5ICk",
                "fallback": "YouTube Video: Spec-ulation Keynote - Rich Hickey",
                "title": "Spec-ulation Keynote - Rich Hickey",
                "title_link": "https:\/\/www.youtube.com\/watch?v=oyLBGkS5ICk",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/@ClojureTV",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8YJJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: semver sucks\nand about decomposition of \"change\" into backward in\/compatible ops\nhere:\nspec – roughly json schema, but for clojure data and fns,\nclojure – lisp on jvm\nmaven – "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " packages repository for jvm langs\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=oyLBGkS5ICk"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1758217879.596049",
        "client_msg_id": "444ab7b8-de56-4208-82ed-bb745c1384cd",
        "text": "re: stripe's runtime api response migrations: <https:\/\/www.inkandswitch.com\/cambria\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/www.inkandswitch.com\/cambria\/",
                "service_icon": "https:\/\/www.inkandswitch.com\/static\/favicons\/180x180.png",
                "id": 1,
                "original_url": "https:\/\/www.inkandswitch.com\/cambria\/",
                "fallback": "Project Cambria: Translate your data with lenses",
                "text": "Changing schemas in distributed software is hard. Could adopting bidirectional lenses help?",
                "title": "Project Cambria: Translate your data with lenses",
                "title_link": "https:\/\/www.inkandswitch.com\/cambria\/",
                "service_name": "inkandswitch.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T7KmN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: stripe's runtime api response migrations: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.inkandswitch.com\/cambria\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1758220852.548819",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1758221005.000000"
        },
        "client_msg_id": "5eb0304a-b233-4ba3-8f10-f7c82da599ab",
        "text": "expand and contract is quite clear <https:\/\/www.prisma.io\/dataguide\/types\/relational\/expand-and-contract-pattern>. You add expressibity (new structure), migrate the usage, then contract expressivity (remove the old). If you want to deprecate an API its the same thing except the migrating the usage involves telling every caller to stop using the old API which is not practical for public APIs.\n\nAt Google it was common to find the V1 proto was transforming to the V2 proto and then just calling the internal v2 handler. v1 was never deprecated, but there was not 2 business logic handlers. Its not always possible to nest, depending on how bad you messed up the v1 design. I always work from the assumption you can never deprecate an API if it is public. Internal APIs => expand and contract.\n\nGoogle API guide prohibits removing fields from protos, and the modern gRPC removed `required` fields because they prevent future migrations. Every long lived proto message is stacked with deprecated fields, but they are at least costless on the wire.\n\nA fancy DB migration technology I keep staring lustfully at is <https:\/\/pgroll.com\/blog\/introducing-pgroll-zero-downtime-reversible-schema-migrations-for-postgres> but I have never used it (its docs even say it implements expand and contract).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/www.prisma.io\/dataguide\/types\/relational\/expand-and-contract-pattern",
                "service_icon": "https:\/\/www.prisma.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.prisma.io\/dataguide\/types\/relational\/expand-and-contract-pattern",
                "fallback": "Prisma's Data Guide: Using the expand and contract pattern | Prisma's Data Guide",
                "text": "In this article, we introduce the expand and contract pattern to help migrate data and clients to a new schema.",
                "title": "Using the expand and contract pattern | Prisma's Data Guide",
                "title_link": "https:\/\/www.prisma.io\/dataguide\/types\/relational\/expand-and-contract-pattern",
                "service_name": "Prisma's Data Guide"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aaMUZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "expand and contract is quite clear "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.prisma.io\/dataguide\/types\/relational\/expand-and-contract-pattern"
                            },
                            {
                                "type": "text",
                                "text": ". You add expressibity (new structure), migrate the usage, then contract expressivity (remove the old). If you want to deprecate an API its the same thing except the migrating the usage involves telling every caller to stop using the old API which is not practical for public APIs.\n\nAt Google it was common to find the V1 proto was transforming to the V2 proto and then just calling the internal v2 handler. v1 was never deprecated, but there was not 2 business logic handlers. Its not always possible to nest, depending on how bad you messed up the v1 design. I always work from the assumption you can never deprecate an API if it is public. Internal APIs => expand and contract.\n\nGoogle API guide prohibits removing fields from protos, and the modern gRPC removed "
                            },
                            {
                                "type": "text",
                                "text": "required",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fields because they prevent future migrations. Every long lived proto message is stacked with deprecated fields, but they are at least costless on the wire.\n\nA fancy DB migration technology I keep staring lustfully at is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pgroll.com\/blog\/introducing-pgroll-zero-downtime-reversible-schema-migrations-for-postgres"
                            },
                            {
                                "type": "text",
                                "text": " but I have never used it (its docs even say it implements expand and contract)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U089J8FNGB1",
        "type": "message",
        "ts": "1758244077.028709",
        "client_msg_id": "8d8d6851-4e93-43c0-8730-b84d45ffb05d",
        "text": "“never deprecate API” worked very well for the team I used it on for a large project that had a high request load and a low error rate, for whatever that experience is worth\n\nNot saying you need to use it, but i think dismissing it out of hand is unwise",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5caead19f58",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5caead19f5842ccdc759880c60e7c699.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Bill",
            "real_name": "Bill Mill",
            "display_name": "Bill Mill",
            "team": "T5TCAFTA9",
            "name": "bill",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1758179471.141799",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w1wa9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“never deprecate API” worked very well for the team I used it on for a large project that had a high request load and a low error rate, for whatever that experience is worth\n\nNot saying you need to use it, but i think dismissing it out of hand is unwise"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]