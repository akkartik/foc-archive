[
    {
        "user": "UJQRDCZRA",
        "type": "message",
        "ts": "1558004530.428000",
        "client_msg_id": "df3ff3de-9566-4def-a683-2ec0f01e5dc9",
        "text": "the original OOP of Alan Kay's design has made something of a comeback in the form of the actor model <https:\/\/en.wikipedia.org\/wiki\/Actor_model>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g15bf95c5be9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e15bf95c5be9a8a2f30eb0f8f341941a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Alex Jeffrey",
            "display_name": "Alex Jeffrey",
            "team": "T5TCAFTA9",
            "name": "alex244",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557892873.409500",
        "parent_user_id": "UAVCC2X70",
        "attachments": [
            {
                "title": "Actor model",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Actor_model",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Actor_model",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "The actor model in computer science is a mathematical model of concurrent computation that treats \"actors\" as the universal primitives of concurrent computation. In response to a message that it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify their own private state, but can only affect each other through messages (avoiding the need for any locks).\nThe actor model originated in 1973. It has been used both as a framework for a theoretical understanding of computation and as the theoretical basis for several practical implementations of concurrent systems. The relationship of the model to other work is discussed in Actor model and process calculi.",
                "fallback": "wikipedia: Actor model",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Actor_model"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NfmM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the original OOP of Alan Kay's design has made something of a comeback in the form of the actor model "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Actor_model"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1558009459.428300",
        "client_msg_id": "1922b3f8-4c13-43d8-ab7e-ec731210fbab",
        "text": "Thanks Kartik,\n\nI wasn't aware declarative implied anything about error checking. I was thinking  more of this definition:\n\n&gt; denoting high-level programming languages which can be used to solve problems without requiring the programmer to specify an exact procedure to be followed.\n\nFor example using \"map, filter, reduce\" is more declarative because they don't specify the flow control. This is useful because, simply put, its one less thing to get wrong.\n\nAnother example would be Datalog being more declarative then SQL because you dont have to specify the joins.\n\nLeading with these examples, i think a big next step could be made by reactive datalog, which would mean the client\/browser dow declears its data needs and the rest of the system (from the users perspective) doesn't have to worry  about the flow control of how it gets there.\n\nThis of course, will always break down at some scale, but so does everything, and as i was suggesting, the declarative functions can remain, only their interpretation has to change.\nThis is common practice in our field, make a function, now how it works can change without breaking callers.\n\n\n&gt; All I want is machine code with an extensible DSL for assertions\n\ninteresting, this would seem to be at the opposite end of the spectrum from what i'm describing. I dont have much machine code experience!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K\/+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Kartik,\n\nI wasn't aware declarative implied anything about error checking. I was thinking  more of this definition:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "denoting high-level programming languages which can be used to solve problems without requiring the programmer to specify an exact procedure to be followed."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nFor example using \"map, filter, reduce\" is more declarative because they don't specify the flow control. This is useful because, simply put, its one less thing to get wrong.\n\nAnother example would be Datalog being more declarative then SQL because you dont have to specify the joins.\n\nLeading with these examples, i think a big next step could be made by reactive datalog, which would mean the client\/browser dow declears its data needs and the rest of the system (from the users perspective) doesn't have to worry  about the flow control of how it gets there.\n\nThis of course, will always break down at some scale, but so does everything, and as i was suggesting, the declarative functions can remain, only their interpretation has to change.\nThis is common practice in our field, make a function, now how it works can change without breaking callers.\n\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All I want is machine code with an extensible DSL for assertions"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\ninteresting, this would seem to be at the opposite end of the spectrum from what i'm describing. I dont have much machine code experience!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1558023658.428900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1558023686.000000"
        },
        "client_msg_id": "a6f403a1-d43a-425e-a58e-66b5c6f31230",
        "text": "I was at least half kidding with that last line. I’ve been digging into low-level guts lately, so it’s been on my mind. But most programming models become intractable in the presence of unsafe code, so the extreme end of my spectrum reduces to absurdity.\n\nWe’ve all seen the surface definition of ‘declarative’, but that was exactly why your sentence seemed so insightful. It got me to return to first principles and ask where the benefits lay of communicating the ‘what’ rather than the ‘how’. None of the examples you cite — map\/filter\/reduce or Datalog — support the use case of treating them as executable documentation, of just specifying invariants that someone who wants more performance can implement for themselves. It seems worth designing declarative models with this escape hatch in mind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9d7A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was at least half kidding with that last line. I’ve been digging into low-level guts lately, so it’s been on my mind. But most programming models become intractable in the presence of unsafe code, so the extreme end of my spectrum reduces to absurdity.\n\nWe’ve all seen the surface definition of ‘declarative’, but that was exactly why your sentence seemed so insightful. It got me to return to first principles and ask where the benefits lay of communicating the ‘what’ rather than the ‘how’. None of the examples you cite — map\/filter\/reduce or Datalog — support the use case of treating them as executable documentation, of just specifying invariants that someone who wants more performance can implement for themselves. It seems worth designing declarative models with this escape hatch in mind."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1558023997.429200",
        "client_msg_id": "a9f230de-9c95-4220-9b98-cdb04faa8fdd",
        "text": "\"A programming language is low level when its programs require attention to the irrelevant.\" - Alan Perlis\n\nOf course even lower level languages hide some irrelevant details from us to provide something useful. The machine instruction set codes are irrelevant to the person writing assembly language.\n\n&gt; what I love most about writing software in Elm (and to a lesser extent React) or SQL is what I don't have to think about\n\nYes. Until the irrelevant become relevant: mangling an SQL query to make it perform better, fine tuning struct memory layout in C, intertwining layers of caching code to improve performance, etc.\n\n&gt; in the end you always have to look inside the box\n\nYeah. I wonder if it's possible that inside the box is also a nice, clean model that looks just like outside the box. Instead of trying to affect performance via 'side effect' (i.e. code munging), what if you could specify the implementation details separately from the higher level description? In most cases it seems the layer of abstraction is too hard. Rather it should be permeable when necessary. I wonder if any systems do this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ji6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"A programming language is low level when its programs require attention to the irrelevant.\" - Alan Perlis\n\nOf course even lower level languages hide some irrelevant details from us to provide something useful. The machine instruction set codes are irrelevant to the person writing assembly language.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what I love most about writing software in Elm (and to a lesser extent React) or SQL is what I don't have to think about"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes. Until the irrelevant become relevant: mangling an SQL query to make it perform better, fine tuning struct memory layout in C, intertwining layers of caching code to improve performance, etc.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the end you always have to look inside the box"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYeah. I wonder if it's possible that inside the box is also a nice, clean model that looks just like outside the box. Instead of trying to affect performance via 'side effect' (i.e. code munging), what if you could specify the implementation details separately from the higher level description? In most cases it seems the layer of abstraction is too hard. Rather it should be permeable when necessary. I wonder if any systems do this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1558027093.429800",
        "client_msg_id": "c2b67a08-a9fa-427f-9048-8d6453c01cee",
        "text": "```\n For quick summary, the first prototype was blocks for jQuery, the second prototype was blocks for React.js and then the third prototype was a structured editor for Javascript, which I called Rose. The first two I called Cycle v1 and Cycle v2 and then this is P4 \n```\nwhat is blocks?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1558028064.431100",
        "reply_users": [
            "UCUSW7WVD",
            "UJTHWNH2T",
            "UC2A2ARPT",
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1558027274.429900"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1558027625.430200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1558027839.430500"
            },
            {
                "user": "UJTHWNH2T",
                "ts": "1558028000.430900"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1558028064.431100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1558028064.431100",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NgvFW",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": " For quick summary, the first prototype was blocks for jQuery, the second prototype was blocks for React.js and then the third prototype was a structured editor for Javascript, which I called Rose. The first two I called Cycle v1 and Cycle v2 and then this is P4 \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what is blocks?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1558027274.429900",
        "client_msg_id": "ceee60d4-28d6-4bd0-9b9e-084be86e12d6",
        "text": "I went searching to figure out what the heck you were talking about. Ah! <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1543008131055000?thread_ts=1542976627.047400&amp;cid=CCL5VVBAN>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1543008131055000?thread_ts=1542976627.047400&amp;cid=CCL5VVBAN",
                "fallback": "[November 23rd, 2018 1:22 PM] stevekrouse: <@UCUSW7WVD>\n\np1 - blocks for JQuery: <http:\/\/cycle.thecodingspace.com|cycle.thecodingspace.com>\np2 - blocks for VueJS: <https:\/\/stevekrouse.com\/cycle\/>\np3 - structured editor for JS: <https:\/\/stevekrouse.com\/rose\/>",
                "ts": "1543008131.055000",
                "author_id": "U5TCAFTD3",
                "author_subname": "Steve Krouse",
                "channel_id": "CCL5VVBAN",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@UCUSW7WVD>\n\np1 - blocks for JQuery: <http:\/\/cycle.thecodingspace.com|cycle.thecodingspace.com>\np2 - blocks for VueJS: <https:\/\/stevekrouse.com\/cycle\/>\np3 - structured editor for JS: <https:\/\/stevekrouse.com\/rose\/>",
                "author_name": "Steve Krouse",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U5TCAFTD3",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1543008131055000?thread_ts=1542976627.047400&amp;cid=CCL5VVBAN",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fTLB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I went searching to figure out what the heck you were talking about. Ah! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1543008131055000?thread_ts=1542976627.047400&amp;cid=CCL5VVBAN",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1543008131055000?thread_ts=1542976627.047400&cid=CCL5VVBAN"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1558027625.430200",
        "client_msg_id": "09735a12-98ba-4fce-8c8c-c20fce0ccf4e",
        "text": "is it this? <http:\/\/jsblocks.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "title": "jsblocks - Better JavaScript MV-ish Framework",
                "title_link": "http:\/\/jsblocks.com\/",
                "text": "From simple user interfaces to complex single-page applications using faster, server-side rendered and easy to learn framework",
                "fallback": "jsblocks - Better JavaScript MV-ish Framework",
                "from_url": "http:\/\/jsblocks.com\/",
                "service_icon": "http:\/\/jsblocks.com\/favicon.ico?v=2",
                "service_name": "jsblocks.com",
                "id": 1,
                "original_url": "http:\/\/jsblocks.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tGQtw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is it this? "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jsblocks.com\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1558027839.430500",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1558027895.000000"
        },
        "client_msg_id": "01da2088-5721-4f4a-816c-4cba8934a85a",
        "text": "I believe he's referring to a block-based programming language, a la Scratch — <https:\/\/scratch.mit.edu>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3cdO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe he's referring to a block-based programming language, a la Scratch — "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/scratch.mit.edu"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1558028000.430900",
        "client_msg_id": "5303ecb7-29fb-474c-96e0-5a66ca94b368",
        "text": "o, ty",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E2Mwt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "o, ty"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1558028064.431100",
        "client_msg_id": "32c3dea4-3cc2-431d-b750-268349759fdc",
        "text": "Yep, that's it. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1558027093.429800",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "asE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep, that's it. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1558030017.431500",
        "client_msg_id": "1c83abae-e668-42ff-8055-651dd67a2643",
        "text": "Isn’t this what some compilers do? They analyze code and optimize whatever they can. I’m thinking primarily of AOT, but JIT as well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lFnP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn’t this what some compilers do? They analyze code and optimize whatever they can. I’m thinking primarily of AOT, but JIT as well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJK8MKYAZ",
        "type": "message",
        "ts": "1558030092.431700",
        "client_msg_id": "2c7f50c1-6631-4020-885c-1c58cc1ec6c3",
        "text": "They let us write code that’s readable while still being fast. Rust is excellent in its commitment to “zero cost abstraction”, which I think is relevant to this discussion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g191fa9e3260",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6191fa9e32605141275a68a8bb5f04fa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Daniel Hines",
            "display_name": "Daniel Hines",
            "team": "T5TCAFTA9",
            "name": "d4hines",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SkwS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They let us write code that’s readable while still being fast. Rust is excellent in its commitment to “zero cost abstraction”, which I think is relevant to this discussion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1558031347.431900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1558031403.000000"
        },
        "client_msg_id": "27d4117d-2d68-4c61-9e7f-12ca8df19b58",
        "text": "Yes, there are two broad fronts:\n\na) Start at the lowest level and gradually “pull ourselves up by our bootstraps”, writing code at a higher and higher abstraction without losing performance or flexibility. Rust definitely pioneers a lot here. But there’s still access patterns where you’d be forced to use runtime reference counting and may therefore decide to switch to give up on Rust’s safety invariants. Even ignoring such cases, Rust programs are still pretty imperative. *You get performance, but may not be very declarative.*\n\nb) Start at a high level of declarativity and gradually support better performance. Prolog is the classic example that achieved huge gains in declarative expression. But if it was slow you didn’t really have a way to keep declarativity and performance. You’d end up with `cut` calls polluting your nice declarative program. Other high-level languages have the same problem. *You get declarative but have to pay some performance cost at times.*\n\nAs far as I know there’s no high-level declarative model that also provides an “imperative side channel” independent of the declarative program.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557877495.385700",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0u4k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, there are two broad fronts:\n\na) Start at the lowest level and gradually “pull ourselves up by our bootstraps”, writing code at a higher and higher abstraction without losing performance or flexibility. Rust definitely pioneers a lot here. But there’s still access patterns where you’d be forced to use runtime reference counting and may therefore decide to switch to give up on Rust’s safety invariants. Even ignoring such cases, Rust programs are still pretty imperative. "
                            },
                            {
                                "type": "text",
                                "text": "You get performance, but may not be very declarative.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nb) Start at a high level of declarativity and gradually support better performance. Prolog is the classic example that achieved huge gains in declarative expression. But if it was slow you didn’t really have a way to keep declarativity and performance. You’d end up with "
                            },
                            {
                                "type": "text",
                                "text": "cut",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " calls polluting your nice declarative program. Other high-level languages have the same problem. "
                            },
                            {
                                "type": "text",
                                "text": "You get declarative but have to pay some performance cost at times.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nAs far as I know there’s no high-level declarative model that also provides an “imperative side channel” independent of the declarative program."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1558039584.432200",
        "client_msg_id": "7855cf52-97c5-458a-b7d0-27a81c1dd1cd",
        "text": "When you write a program, does it contain more than one function, or more than one class, or more than one object? If so, you are decomposing the problem. Perhaps in your case, the \"decomposing\" part of your work is sufficiently rote and automatic that you don't consciously focus on it anymore.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1557860308.364300",
        "parent_user_id": "UJM9NG84Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jbD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you write a program, does it contain more than one function, or more than one class, or more than one object? If so, you are decomposing the problem. Perhaps in your case, the \"decomposing\" part of your work is sufficiently rote and automatic that you don't consciously focus on it anymore."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]