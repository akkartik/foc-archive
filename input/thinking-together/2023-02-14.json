[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1676375261.699049",
        "client_msg_id": "a8f6d28e-de1e-4d90-92db-395aef988b71",
        "text": "Ironically, all of the Smalltalks that I know about implement so-called “message sending” using synchronous CALL\/RETURN.  What is needed is a Smalltalk that implements Objects as concurrent entities with input and output queues.  McCarthy provided the basics for faking this kind of thing out in 1956 (anonymous functions, and, cons cells)\n\nAside: I have a passing interest in Dave Ackley’s MFM.  What I see there is “relativity”.  Machines cannot address one another in absolute terms, but only in relative terms.  Kinda like The Game of Life on steroids and hardware.\n\nThe only valid use of CALL is to save space in a delivered executable.  Using CALL - in end-user apps - for any other purpose is inefficient and abusive.  Mapping “functional notation” onto CALLs in end-user code is expensive.  If you wish to fake out “functions” during development, let your IDE do it for you, but, make sure that none of that fakery reaches the end-user.  (Corollary - back-pedaling by inventing epicycles such as “inline code” is the opposite of how scripts for generalized electronic machines (aka “computers”) should be created.  Operating systems fake out closures.  Closures fake out a notation that is - sometimes - useful for developing scripts of Assembler.).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7CR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ironically, all of the Smalltalks that I know about implement so-called “message sending” using synchronous CALL\/RETURN.  What is needed is a Smalltalk that implements Objects as concurrent entities with input and output queues.  McCarthy provided the basics for faking this kind of thing out in 1956 (anonymous functions, and, cons cells)\n\nAside: I have a passing interest in Dave Ackley’s MFM.  What I see there is “relativity”.  Machines cannot address one another in absolute terms, but only in relative terms.  Kinda like The Game of Life on steroids and hardware.\n\nThe only valid use of CALL is to save space in a delivered executable.  Using CALL - in end-user apps - for any other purpose is inefficient and abusive.  Mapping “functional notation” onto CALLs in end-user code is expensive.  If you wish to fake out “functions” during development, let your IDE do it for you, but, make sure that none of that fakery reaches the end-user.  (Corollary - back-pedaling by inventing epicycles such as “inline code” is the opposite of how scripts for generalized electronic machines (aka “computers”) should be created.  Operating systems fake out closures.  Closures fake out a notation that is - sometimes - useful for developing scripts of Assembler.)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1676375275.618309",
        "client_msg_id": "407656d4-54a5-4e98-9b65-c2b4a0f1701a",
        "text": "(I feel that I’m using up a lot of bandwidth here.  Ah, but this is Slack Free which Garbage Collects by hiding anything that is over 3 months old).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bBK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I feel that I’m using up a lot of bandwidth here.  Ah, but this is Slack Free which Garbage Collects by hiding anything that is over 3 months old)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1676375398.111889",
        "client_msg_id": "b13034f7-267a-4591-8f01-fe24aa3912bc",
        "text": "&gt; Make it possible to directly write down non-call\/return things.\nnumber of inputs = m\nnumber of outputs = n\n\nwhere\n  0 &lt;= m &lt;= infinity\n  0 &lt;= n &lt;= infinity\n\nwhere one input is a block of data that arrives simultaneously (“at the same time”, regardless of how you wish to destructure it (e.g. in f(a,b,c), “a,b,c” is but one block of data which is destructured into 3 elements a,b,c (this is how parameters are implemented in Assembler))) and one output is a block of data that is sent simultaneously\n\n(note that “functions” imply m = 1, n = 1, where the input is totally synchronous and the output is totally synchronous)\n\n(note that daemons have m = 0 when in steady-state)\n\n(note that buffered text filters have n = 0 most of the time, and n = 1 when they want to say something)\n\nYou *can* express these kinds of things in text, but the result is a mish-mosh, IMO.  Diagrams express this kind of thing better.\n\nIn my nomenclature: Thing = Component.\n\nFTR - parsing technical diagrams ain’t much harder than parsing technical text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f8Z",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Make it possible to directly write down non-call\/return things."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nnumber of inputs = m\nnumber of outputs = n\n\nwhere\n  0 <= m <= infinity\n  0 <= n <= infinity\n\nwhere one input is a block of data that arrives simultaneously (“at the same time”, regardless of how you wish to destructure it (e.g. in f(a,b,c), “a,b,c” is but one block of data which is destructured into 3 elements a,b,c (this is how parameters are implemented in Assembler))) and one output is a block of data that is sent simultaneously\n\n(note that “functions” imply m = 1, n = 1, where the input is totally synchronous and the output is totally synchronous)\n\n(note that daemons have m = 0 when in steady-state)\n\n(note that buffered text filters have n = 0 most of the time, and n = 1 when they want to say something)\n\nYou "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " express these kinds of things in text, but the result is a mish-mosh, IMO.  Diagrams express this kind of thing better.\n\nIn my nomenclature: Thing = Component.\n\nFTR - parsing technical diagrams ain’t much harder than parsing technical text."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1676375477.575019",
        "client_msg_id": "d710927d-00ef-4e8d-b597-90b832722d01",
        "text": "GLOBAL:_the environment of the parameter values_\nSENDER:_the sender of the message_\nRECEIVER:_the receiver of the message_\nREPLY-STYLE:_wait, fork, ...?_\nSTATUS:_progress of the message_\nREPLY:_eventual result (if any)_\nOPERATION SELECTOR:_relative to the receiver_\n\\# OF PARAMETERS:\nP1:\n...:\nPn:\n\nSkimming.  I notice that about 40% of the way down, he discusses the “Messenger Object”.  I think that there is but one reply-style, no status and no reply.  I guess that I adopt a very atomic perspective and try to not drape meaning onto lower-level constructs.  If you consider electronic machines to be 1000's of small computers (possible now, using rPIs and Arduinos, but not thinkable in the 1950s), then there is only one communication mechanism - the wire.  One-way (bi-directional wires are an optimization).  Given that view, stuff like “wait\/fork”, “eventual result”, “progress of message” are molecules built out of atoms.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1674396396.762359",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S7r6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "GLOBAL:"
                            },
                            {
                                "type": "text",
                                "text": "the environment of the parameter values",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nSENDER:"
                            },
                            {
                                "type": "text",
                                "text": "the sender of the message",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nRECEIVER:"
                            },
                            {
                                "type": "text",
                                "text": "the receiver of the message",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nREPLY-STYLE:"
                            },
                            {
                                "type": "text",
                                "text": "wait, fork, ...?",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nSTATUS:"
                            },
                            {
                                "type": "text",
                                "text": "progress of the message",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nREPLY:"
                            },
                            {
                                "type": "text",
                                "text": "eventual result (if any)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nOPERATION SELECTOR:"
                            },
                            {
                                "type": "text",
                                "text": "relative to the receiver",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\\# OF PARAMETERS:\nP1:\n...:\nPn:\n\nSkimming.  I notice that about 40% of the way down, he discusses the “Messenger Object”.  I think that there is but one reply-style, no status and no reply.  I guess that I adopt a very atomic perspective and try to not drape meaning onto lower-level constructs.  If you consider electronic machines to be 1000's of small computers (possible now, using rPIs and Arduinos, but not thinkable in the 1950s), then there is only one communication mechanism - the wire.  One-way (bi-directional wires are an optimization).  Given that view, stuff like “wait\/fork”, “eventual result”, “progress of message” are molecules built out of atoms."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]