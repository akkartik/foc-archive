[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1744303713.602179",
        "client_msg_id": "2b508897-d329-4917-83ad-4aaf66634cfa",
        "text": "For anyone working with LLMs (from my colleagues at the lab where I’ve been helping out the last few months):\n<https:\/\/arxiv.org\/abs\/2504.07081>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1744303713.602179",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1744353485.354819",
        "reply_users": [
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1744353485.354819"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/arxiv.org\/abs\/2504.07081",
                "service_icon": "https:\/\/arxiv.org\/static\/browse\/0.3.4\/images\/icons\/apple-touch-icon.png",
                "thumb_url": "https:\/\/arxiv.org\/static\/browse\/0.3.4\/images\/arxiv-logo-fb.png",
                "thumb_width": 1200,
                "thumb_height": 700,
                "id": 1,
                "original_url": "https:\/\/arxiv.org\/abs\/2504.07081",
                "fallback": "arXiv.org: Self-Steering Language Models",
                "text": "While test-time reasoning enables language models to tackle complex tasks, searching or planning in natural language can be slow, costly, and error-prone. But even when LMs struggle to emulate the precise reasoning steps needed to solve a problem, they often excel at describing its abstract structure--both how to verify solutions and how to search for them. This paper introduces DisCIPL, a method for \"self-steering\" LMs where a Planner model generates a task-specific inference program that is executed by a population of Follower models. Our approach equips LMs with the ability to write recursive search procedures that guide LM inference, enabling new forms of verifiable and efficient reasoning. When instantiated with a small Follower (e.g., Llama-3.2-1B), DisCIPL matches (and sometimes outperforms) much larger models, including GPT-4o and o1, on challenging constrained generation tasks. In decoupling planning from execution, our work opens up a design space of highly-parallelized Monte Carlo inference strategies that outperform standard best-of-N sampling, require no finetuning, and can be implemented automatically by existing LMs.",
                "title": "Self-Steering Language Models",
                "title_link": "https:\/\/arxiv.org\/abs\/2504.07081",
                "service_name": "arXiv.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "40WuJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For anyone working with LLMs (from my colleagues at the lab where I’ve been helping out the last few months):\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/2504.07081"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U02E4DAQGSZ",
                    "U023V63MF6V",
                    "UJBAJNFLK",
                    "U08MVSQFA4C"
                ],
                "count": 4
            },
            {
                "name": "eyes",
                "users": [
                    "U03C0DRJB8B",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1744313297.281079",
        "client_msg_id": "777fda8c-8162-4ada-bfa1-dfb9255d1087",
        "text": "I wonder if that thread contains evidence to counter both extreme viewpoints? It certainly overlooks a much bigger problem, though. Firstly, the example of the junior programmer struggling with vibe coding. The junior was not yet a 1%er and was not benefitting from the use of vibe coding - this counters the extreme viewpoint I was espousing of 99%ers benefitting from LLM-code-generation. The senior programmer -  1%er - showed the junior how to completely skip using vibe and slapped together a 1-liner power shell script. That counters the other extreme viewpoint - there was a simpler way to approach the problem, but the LLM wasn't used. The much bigger problem is: software development is too complicated (<https:\/\/alarmingdevelopment.org\/?p=766>). Even the act of writing small programs is discouraged by what we've got. IMO, smart people should be fixing that problem instead of simply adding to it. LLMs are trained to keep creating complicated software, i.e. LLMs are not much help on that front. [I have strong opinions about the issue of simplifying software development. IMO, bloatware is being caused by forcing ourselves to use one and only one paradigm for all software, i.e. the over-use of blocking \"functions\", instead of, say, something with a lot less coupling, like relations or SCNs (nano-DSLs) or Parts Based Programming (0D) or ???].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1744214868.767279",
        "parent_user_id": "U023V63MF6V",
        "attachments": [
            {
                "from_url": "https:\/\/alarmingdevelopment.org\/?p=766",
                "thumb_url": "http:\/\/alarmingdevelopment.org\/wp-content\/uploads\/2013\/05\/books-web-76x300.jpg",
                "thumb_width": 76,
                "thumb_height": 300,
                "ts": 1368483560,
                "id": 1,
                "original_url": "https:\/\/alarmingdevelopment.org\/?p=766",
                "fallback": "Alarming Development: Getting to simple",
                "text": "There is one gigantic problem with programming today, a problem so large that it dwarfs all others. Yet it is a problem that almost no one is willing to admit, much less talk about. It is easy to i…",
                "title": "Getting to simple",
                "title_link": "https:\/\/alarmingdevelopment.org\/?p=766",
                "service_name": "Alarming Development"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mzkKM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if that thread contains evidence to counter both extreme viewpoints? It certainly overlooks a much bigger problem, though. Firstly, the example of the junior programmer struggling with vibe coding. The junior was not yet a 1%er and was not benefitting from the use of vibe coding - this counters the extreme viewpoint I was espousing of 99%ers benefitting from LLM-code-generation. The senior programmer -  1%er - showed the junior how to completely skip using vibe and slapped together a 1-liner power shell script. That counters the other extreme viewpoint - there was a simpler way to approach the problem, but the LLM wasn't used. The much bigger problem is: software development is too complicated ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/alarmingdevelopment.org\/?p=766"
                            },
                            {
                                "type": "text",
                                "text": "). Even the act of writing small programs is discouraged by what we've got. IMO, smart people should be fixing that problem instead of simply adding to it. LLMs are trained to keep creating complicated software, i.e. LLMs are not much help on that front. [I have strong opinions about the issue of simplifying software development. IMO, bloatware is being caused by forcing ourselves to use one and only one paradigm for all software, i.e. the over-use of blocking \"functions\", instead of, say, something with a lot less coupling, like relations or SCNs (nano-DSLs) or Parts Based Programming (0D) or ???]."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1744353485.354819",
        "client_msg_id": "5ac16052-5982-4741-952f-8cbbf0a38bd6",
        "text": "Planner\/Follower... Now I am waiting for the first postmodernist manifesto calling for deconstructing the power structures of LLMs. Probably written by PhiloGPT.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1744303713.602179",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bso87",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Planner\/Follower... Now I am waiting for the first postmodernist manifesto calling for deconstructing the power structures of LLMs. Probably written by PhiloGPT."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]