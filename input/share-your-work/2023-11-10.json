[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699626549.753869",
        "client_msg_id": "e4c807b1-4fd7-4a28-ae8c-8633cfc1eec5",
        "text": "Hi everyone, my latest article on The Object Network and OnexOS is out:\n\n<https:\/\/open.substack.com\/pub\/duncancragg\/p\/turning-the-blob-inside-out?r=1sq2dz&amp;utm_campaign=post&amp;utm_medium=email>\n\nIt discusses \"The Blob\" - apps - and how we can free our data by \"simply\" not having those nasty apps coming between us and our precious digital stuff...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699626549.753869",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1699626665.245029",
        "reply_users": [
            "UE6EFEPTQ"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1699626603.125179"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1699626665.245029"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/open.substack.com\/pub\/duncancragg\/p\/turning-the-blob-inside-out?r=1sq2dz&utm_campaign=post&utm_medium=email",
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F62a495a4-c561-4037-aff1-307fedf9ab9e_960x540.png",
                "image_width": 960,
                "image_height": 540,
                "image_bytes": 33081,
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F97f0bc34-daa0-452a-b2c4-04bc1aaeee43%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/open.substack.com\/pub\/duncancragg\/p\/turning-the-blob-inside-out?r=1sq2dz&amp;utm_campaign=post&amp;utm_medium=email",
                "fallback": "Turning the Blob inside out",
                "text": "Idiosyncratic apps come between you and your data...",
                "title": "Turning the Blob inside out",
                "title_link": "https:\/\/open.substack.com\/pub\/duncancragg\/p\/turning-the-blob-inside-out?r=1sq2dz&utm_campaign=post&utm_medium=email",
                "service_name": "duncancragg.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nWd79",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone, my latest article on The Object Network and OnexOS is out:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/open.substack.com\/pub\/duncancragg\/p\/turning-the-blob-inside-out?r=1sq2dz&utm_campaign=post&utm_medium=email"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt discusses \"The Blob\" - apps - and how we can free our data by \"simply\" not having those nasty apps coming between us and our precious digital stuff..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699626603.125179",
        "client_msg_id": "d2924d98-1078-4333-a3bb-967d0a70f28f",
        "text": "It's quite short and readable, I think. Let me know what you think!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699626549.753869",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ju1Ul",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's quite short and readable, I think. Let me know what you think!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699626665.245029",
        "client_msg_id": "50405da3-3bb1-4891-9de2-f79c06ce42aa",
        "text": "The Inversion illustrated is actually the inversion from imperative to declarative architectural style.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699626549.753869",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pDO9W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Inversion illustrated is actually the inversion from imperative to declarative architectural style."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DBLH2DN1",
        "type": "message",
        "ts": "1699642986.125099",
        "edited": {
            "user": "U01DBLH2DN1",
            "ts": "1699643004.000000"
        },
        "client_msg_id": "f7b60c92-5c1f-43ed-b0d2-4209b19a7b89",
        "text": "> For me, coding comes down to functions, variables, and values, as you mention in the article. If you were to do the same personification to math for example, how would you do it?\n<@U05PESXCC2E> I'm curious if you had in mind some examples from math when you wrote the question. I assume that the subsets of math can be personified in the same way. I'm curious what examples you have in mind! Thanks for asking!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cefa69800057",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-09\/6169971368194_cefa69800057fc07e2e3_72.png",
            "first_name": "",
            "real_name": "Tomaz Zlender",
            "display_name": "Tomaz Zlender",
            "team": "T5TCAFTA9",
            "name": "tomaz.zlender",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KiQh8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me, coding comes down to functions, variables, and values, as you mention in the article. If you were to do the same personification to math for example, how would you do it?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05PESXCC2E"
                            },
                            {
                                "type": "text",
                                "text": " I'm curious if you had in mind some examples from math when you wrote the question. I assume that the subsets of math can be personified in the same way. I'm curious what examples you have in mind! Thanks for asking!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DBLH2DN1",
        "type": "message",
        "ts": "1699643920.051829",
        "edited": {
            "user": "U01DBLH2DN1",
            "ts": "1699644088.000000"
        },
        "client_msg_id": "566af3e3-1020-4682-8b3a-2848d69ec1f3",
        "text": "> The Program Counter represented as the active entity, walking through function execution. I like it better than I thought I would. It has ToonTalk vibes, but with fewer agents, so much more constrained, more grounded, and less confusing.\n<@UC21F8Q48> it does have ToonTalk vibes, happy to hear you find the idea compelling!\n\nFor many years I tried to find something similar to \"beings\" as the personification of processes. (I still haven't found it). Then at some point it occurred to me that maybe I can ask Alan Kay himself if he knows of anything like it, explaining the idea along the way. If I recall correctly I heard him claim in a couple of talks that most of the things have been invented in 80s or something along those lines. So I thought, well, let's put it to a test! To my surprise he replied back and pointed out Ken Kahn's ToonTalk. It is indeed done in a similar spirit, but not quite. The closest thing to beings in ToonTalk I would say are \"robots\", but they can't be controlled directly as beings can. They have a more specific role, not as general as beings. Like you say, there are many metaphors in Toontalk and it gets confusing because of that.\n\nInteresting that you had an association with the Program Counter. What part of the article made you bring it up?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cefa69800057",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-09\/6169971368194_cefa69800057fc07e2e3_72.png",
            "first_name": "",
            "real_name": "Tomaz Zlender",
            "display_name": "Tomaz Zlender",
            "team": "T5TCAFTA9",
            "name": "tomaz.zlender",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3bl+2",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Program Counter represented as the active entity, walking through function execution. I like it better than I thought I would. It has ToonTalk vibes, but with fewer agents, so much more constrained, more grounded, and less confusing."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " it does have ToonTalk vibes, happy to hear you find the idea compelling!\n\nFor many years I tried to find something similar to \"beings\" as the personification of processes. (I still haven't found it). Then at some point it occurred to me that maybe I can ask Alan Kay himself if he knows of anything like it, explaining the idea along the way. If I recall correctly I heard him claim in a couple of talks that most of the things have been invented in 80s or something along those lines. So I thought, well, let's put it to a test! To my surprise he replied back and pointed out Ken Kahn's ToonTalk. It is indeed done in a similar spirit, but not quite. The closest thing to beings in ToonTalk I would say are \"robots\", but they can't be controlled directly as beings can. They have a more specific role, not as general as beings. Like you say, there are many metaphors in Toontalk and it gets confusing because of that.\n\nInteresting that you had an association with the Program Counter. What part of the article made you bring it up?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699644139.281959",
        "client_msg_id": "f3742f32-0277-42f0-bbce-01154f758fbb",
        "text": "Maybe it's not \"code\", but it is logic (logical and\/or) and math, which code also uses. A structured editor that feels free-form is always nice. Some possibly related links:\n\n<https:\/\/news.ycombinator.com\/item?id=28009218>\n<https:\/\/www.ibm.com\/products\/operational-decision-manager>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699513446.034469",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IdJYd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe it's not \"code\", but it is logic (logical and\/or) and math, which code also uses. A structured editor that feels free-form is always nice. Some possibly related links:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=28009218"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ibm.com\/products\/operational-decision-manager"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699644567.329609",
        "client_msg_id": "50eb33c6-2316-4741-a68b-6977c38f596b",
        "text": "<@U01DBLH2DN1> You could say that code is (mostly) just logic and math. If you turn variables, values, and function into different abstractions, what about the math and logic? What makes it different that those abstractions aren't changed? My head is kind of cloudy today, the right words aren't coming out :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BqH\/T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01DBLH2DN1"
                            },
                            {
                                "type": "text",
                                "text": " You could say that code is (mostly) just logic and math. If you turn variables, values, and function into different abstractions, what about the math and logic? What makes it different that those abstractions aren't changed? My head is kind of cloudy today, the right words aren't coming out "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699644667.886139",
        "edited": {
            "user": "U05PESXCC2E",
            "ts": "1699644699.000000"
        },
        "client_msg_id": "a198737a-5df4-497f-b102-ece487335a08",
        "text": "Another example, how would you describe an anonymous function: `(x => x + 1)(5)`. It is a function, but has no space\/portal equivalent if I understand.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZWKw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another example, how would you describe an anonymous function: "
                            },
                            {
                                "type": "text",
                                "text": "(x => x + 1)(5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It is a function, but has no space\/portal equivalent if I understand."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DBLH2DN1",
        "type": "message",
        "ts": "1699644928.908049",
        "edited": {
            "user": "U01DBLH2DN1",
            "ts": "1699645241.000000"
        },
        "client_msg_id": "17d850db-7120-440f-ba2c-e5d0fd07725f",
        "text": "> Another example, how would you describe an anonymous function: `(x => x + 1)(5)`. It is a function, but has no space\/portal equivalent if I understand. (edited)\nGood question, the future examples will make that more clear. The anonymous function has a definition, which maps to a space, and even though it is \"anonymous\" it is still possible to point to it one way or another. I think the \"portal -> function name\" is confusing, I need to change it to \"portal -> pointer to a function\". Does that make it more clear?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cefa69800057",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-09\/6169971368194_cefa69800057fc07e2e3_72.png",
            "first_name": "",
            "real_name": "Tomaz Zlender",
            "display_name": "Tomaz Zlender",
            "team": "T5TCAFTA9",
            "name": "tomaz.zlender",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S\/qKq",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another example, how would you describe an anonymous function: "
                            },
                            {
                                "type": "text",
                                "text": "(x => x + 1)(5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It is a function, but has no space\/portal equivalent if I understand. (edited)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good question, the future examples will make that more clear. The anonymous function has a definition, which maps to a space, and even though it is \"anonymous\" it is still possible to point to it one way or another. I think the \"portal -> function name\" is confusing, I need to change it to \"portal -> pointer to a function\". Does that make it more clear?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "We're experimenting with a novel form of \"Programming by Example\", similar to Excel macros: <https:\/\/www.plato.io\/blog\/introducing-macros>\n\nI think it can scale quite well to a complete programming system with branching, looping, etc.. Thoughts?",
        "files": [
            {
                "id": "F065YBMC596",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U018FSM8G3Z",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/5ZSR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're experimenting with a novel form of \"Programming by Example\", similar to Excel macros: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.plato.io\/blog\/introducing-macros"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think it can scale quite well to a complete programming system with branching, looping, etc.. Thoughts?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1699645040.076329",
        "client_msg_id": "3954930a-5b1d-430d-8cc6-d46195119aa2",
        "thread_ts": "1699645040.076329",
        "reply_count": 20,
        "reply_users_count": 4,
        "latest_reply": "1699688213.313149",
        "reply_users": [
            "U05PESXCC2E",
            "U018FSM8G3Z",
            "UC21F8Q48",
            "U013ZLJARC7"
        ],
        "replies": [
            {
                "user": "U05PESXCC2E",
                "ts": "1699650483.671959"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699650682.165039"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699653090.473659"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699653279.768689"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699653308.888499"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699653320.567379"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699653345.512139"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699653558.648799"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699653691.439849"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699653793.905129"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699654087.820879"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699654145.725909"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699654204.132809"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699654409.515939"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699654529.069009"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1699654683.094339"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1699669826.314559"
            },
            {
                "user": "U018FSM8G3Z",
                "ts": "1699669913.898109"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1699679809.094789"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1699688213.313149"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U05PESXCC2E",
                    "U0296ACR13M",
                    "U05UBCXHWM6"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U01DBLH2DN1",
        "type": "message",
        "ts": "1699645107.974819",
        "client_msg_id": "d60e3c20-e36b-4979-9d7a-e97e4f122455",
        "text": "&gt; what about the math and logic?\nI don't have a good answer to this one, I'll have to think about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cefa69800057",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-09\/6169971368194_cefa69800057fc07e2e3_72.png",
            "first_name": "",
            "real_name": "Tomaz Zlender",
            "display_name": "Tomaz Zlender",
            "team": "T5TCAFTA9",
            "name": "tomaz.zlender",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4CsHc",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what about the math and logic?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have a good answer to this one, I'll have to think about it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1699646750.213979",
        "client_msg_id": "568e0f7a-c4a9-450b-96fe-a3c50696b597",
        "text": "Yeah, it's certainly logic and maybe I'd call any textual definition of logic \"code\", but then no-code refers to \"not general purpose programming language code\", not \"not definition of logic\", and textual doesn't mean a sequence of unicode\/ascii\/etc, but something that you can read as you read text. :sweat_smile:\n\nInteresting links! Thanks! Although, I'll pick Levlo over any of the tech listed :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "59de929720a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-09-08\/4075674207584_59de929720a2fe0a13d8_72.jpg",
            "first_name": "",
            "real_name": "Jarno Montonen",
            "display_name": "Jarno Montonen",
            "team": "T5TCAFTA9",
            "name": "jarno.montonen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699513446.034469",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IxtQm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it's certainly logic and maybe I'd call any textual definition of logic \"code\", but then no-code refers to \"not general purpose programming language code\", not \"not definition of logic\", and textual doesn't mean a sequence of unicode\/ascii\/etc, but something that you can read as you read text. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": "\n\nInteresting links! Thanks! Although, I'll pick Levlo over any of the tech listed "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699650483.671959",
        "client_msg_id": "7cf53037-0c85-43db-8495-52b9de7da50f",
        "text": "How would branching work? Drag\/press a condition button? Record two macros and mark them as branches visually?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZZgku",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How would branching work? Drag\/press a condition button? Record two macros and mark them as branches visually?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699650682.165039",
        "edited": {
            "user": "U018FSM8G3Z",
            "ts": "1699650828.000000"
        },
        "client_msg_id": "2ccdddfd-4678-45f1-8ba2-7788645ce601",
        "text": "<@U05PESXCC2E> We're experimenting with a few variants. The most straightforward is your first suggestion, but the challenge is maintaining a consistent state. Macros are recorded with a \"recording context\", or an example of the parameters needed to run the macro (e.g. a single row of a table). But once you introduce conditionals, those parameters might not be valid for all branches (e.g. update if a record exists, insert if it doesn't).\n\nSo one option is to prompt the user to choose a different context (e.g. pick a different row).\n\nAnother option is more in line with your second suggestion (took us longer to come up with it, though :)). The user records a macro for a single context, then we alert them to a failure or possible failure for other contexts (not always possible, but usually is), and then they record a separate macro for that context.\n\nThis is more in line with classic \"Programming by Example\" systems such as the one described by Bret Victor (<http:\/\/worrydream.com\/MagicInk\/>), where multiple examples are provided and the system tries to generalize.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gNIfK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05PESXCC2E"
                            },
                            {
                                "type": "text",
                                "text": " We're experimenting with a few variants. The most straightforward is your first suggestion, but the challenge is maintaining a consistent state. Macros are recorded with a \"recording context\", or an example of the parameters needed to run the macro (e.g. a single row of a table). But once you introduce conditionals, those parameters might not be valid for all branches (e.g. update if a record exists, insert if it doesn't).\n\nSo one option is to prompt the user to choose a different context (e.g. pick a different row).\n\nAnother option is more in line with your second suggestion (took us longer to come up with it, though :)). The user records a macro for a single context, then we alert them to a failure or possible failure for other contexts (not always possible, but usually is), and then they record a separate macro for that context.\n\nThis is more in line with classic \"Programming by Example\" systems such as the one described by Bret Victor ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/MagicInk\/"
                            },
                            {
                                "type": "text",
                                "text": "), where multiple examples are provided and the system tries to generalize."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699651083.069209",
        "client_msg_id": "51026e0e-e7c2-4e60-8faa-52e2335dd4ec",
        "text": "It is sounding more like <https:\/\/en.wikipedia.org\/wiki\/Logic_programming>, with rules\/clauses, formal logic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699513446.034469",
        "parent_user_id": "U0296ACR13M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uJ7JP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is sounding more like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Logic_programming"
                            },
                            {
                                "type": "text",
                                "text": ", with rules\/clauses, formal logic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699652914.943779",
        "client_msg_id": "b37d86db-e378-46ae-865e-97a1a65c4c5f",
        "text": "&gt; the Program Counter\nI watched the vid and only skimmed the writeup. The Being is doing the current step of execution. That’s what the Program Counter Register is in hardware: the current step of execution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699521932.966449",
        "parent_user_id": "U01DBLH2DN1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z7vez",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the Program Counter"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I watched the vid and only skimmed the writeup. The Being is doing the current step of execution. That’s what the Program Counter Register is in hardware: the current step of execution."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01DBLH2DN1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699653090.473659",
        "client_msg_id": "1325715f-86b9-4836-a6eb-6fdd1bfa4082",
        "text": "&gt; where multiple examples are provided and the system tries to generalize\nThis approach fails. Just have the user write the branch condition explicitly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fWNGj",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "where multiple examples are provided and the system tries to generalize"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This approach fails. Just have the user write the branch condition explicitly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699653279.768689",
        "client_msg_id": "bb62a789-d01b-498c-8767-e54ac22f3dde",
        "text": "Why do you say it fails? To clarify, we're not trying to do any \"smart\" inference. Just trying to come up with a scheme that's more inductive.\n\nFor instance, if you record a macro that accepts some input, searches for a row, then updates the row, that may work for your first example, but it will fail when the row doesn't exist. We can prompt the user when they hit that failure, and ask them what they want to do.\n\nI agree it won't work in all cases, but we think there might be common patterns that will get us pretty far.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e6JwY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why do you say it fails? To clarify, we're not trying to do any \"smart\" inference. Just trying to come up with a scheme that's more inductive.\n\nFor instance, if you record a macro that accepts some input, searches for a row, then updates the row, that may work for your first example, but it will fail when the row doesn't exist. We can prompt the user when they hit that failure, and ask them what they want to do.\n\nI agree it won't work in all cases, but we think there might be common patterns that will get us pretty far."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Is this representation editable, or must you redo the demo if one of these inferences is wrong?",
        "files": [
            {
                "id": "F064VC9R1PH",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UC21F8Q48",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TUP7d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this representation editable, or must you redo the demo if one of these inferences is wrong?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1699653308.888499",
        "client_msg_id": "10715056-3fe4-407b-8d34-72106418db74",
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z"
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699653320.567379",
        "client_msg_id": "362944cb-cd8f-42e9-8422-baf07f7f2f75",
        "text": "It's not editable yet, but we're working on it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SQeq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not editable yet, but we're working on it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699653345.512139",
        "client_msg_id": "7fe1014f-1fed-49ef-b252-c4e83bb6c924",
        "text": "Also, those aren't inferences, they're recordings of explicit user actions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EobR1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, those aren't inferences, they're recordings of explicit user actions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699653558.648799",
        "client_msg_id": "ebbcd481-508c-414c-af68-ef8e65fb3052",
        "text": "&gt; We can prompt the user when they hit that failure, and ask them what they want to do.\nMaybe Eager did this? It sounds okay. But what you don’t want to do is implicitly try to infer the branch condition.\n\nI’ve seen many PBD systems and the amount of work to demonstrate to try to get the branch condition is very much greater than the amount of work to just say the branch condition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G+5ow",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We can prompt the user when they hit that failure, and ask them what they want to do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe Eager did this? It sounds okay. But what you don’t want to do is implicitly try to infer the branch condition.\n\nI’ve seen many PBD systems and the amount of work to demonstrate to try to get the branch condition is very much greater than the amount of work to just say the branch condition."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699653691.439849",
        "client_msg_id": "3e42d5fb-04e3-4817-89d6-a9143351ca0c",
        "text": "I didn't know about Eager. Thanks!\n\nAre you aware of any PBD systems that only record explicit actions? All of the research projects I'm familiar with try to do an \"observe and infer\" approach, which I agree is too fragile.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nn8jz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't know about Eager. Thanks!\n\nAre you aware of any PBD systems that only record explicit actions? All of the research projects I'm familiar with try to do an \"observe and infer\" approach, which I agree is too fragile."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699653793.905129",
        "client_msg_id": "910c4d6f-3bed-4013-93ae-e149ae4be352",
        "text": "For instance, our plan for looping is to make the user explicitly say they want to run a loop over a collection, rather than to try and infer that they're repeating actions for some set of elements.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a0Bxw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For instance, our plan for looping is to make the user explicitly say they want to run a loop over a collection, rather than to try and infer that they're repeating actions for some set of elements."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC21F8Q48"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699654087.820879",
        "client_msg_id": "845e57fb-e3f1-4bf9-a0b4-6d873dac5c5d",
        "text": "Yeah less inference is better. If you could _also_ add the loop after the fact, that’s even better. That’s where the editable program representation is helpful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Sqe\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah less inference is better. If you could "
                            },
                            {
                                "type": "text",
                                "text": "also",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " add the loop after the fact, that’s even better. That’s where the editable program representation is helpful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "SmallStar <http:\/\/acypher.com\/wwid\/Chapters\/05SmallStar.html>",
        "files": [
            {
                "id": "F065CD7CZ9A",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UC21F8Q48",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MdQzY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SmallStar "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/acypher.com\/wwid\/Chapters\/05SmallStar.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1699654145.725909",
        "client_msg_id": "c5548512-3e71-4702-8f8d-8293e3bd66f6",
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z"
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699654204.132809",
        "client_msg_id": "26e8f125-c573-4339-9807-82ae3a1e8b04",
        "text": "Yea, SmallStar is the most practical I've seen. But all of these systems operate in the desktop metaphor. Have you seen any that operate on structured or relational data? That's our context, and the problems end up being quite different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9DfZ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yea, SmallStar is the most practical I've seen. But all of these systems operate in the desktop metaphor. Have you seen any that operate on structured or relational data? That's our context, and the problems end up being quite different."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699654409.515939",
        "client_msg_id": "3d3ce95c-c5d8-4fb5-8779-ae8efe2f476d",
        "text": "“Why Programming by Demonstration Systems Fail: Lessons Learned for Usable AI”  Tessa Lau. 2009. <https:\/\/citeseerx.ist.psu.edu\/document?repid=rep1&amp;type=pdf&amp;doi=37c50b0cc3c701b269c18014dd3a0c07f9c2b4b8>\n\nMost of these are solved with an editable program representation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4f4FL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“Why Programming by Demonstration Systems Fail: Lessons Learned for Usable AI”  Tessa Lau. 2009. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/citeseerx.ist.psu.edu\/document?repid=rep1&type=pdf&doi=37c50b0cc3c701b269c18014dd3a0c07f9c2b4b8"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMost of these are solved with an editable program representation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699654529.069009",
        "client_msg_id": "828b8b22-4b2c-409c-9b68-d6f7f90c7741",
        "text": "Awesome. I have some nightime reading :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5QI3Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Awesome. I have some nightime reading "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1699654683.094339",
        "client_msg_id": "3282c04a-b8f4-4772-92d1-ca33bd6b73c0",
        "text": "&gt;  Have you seen any that operate on structured or relational data?\nSurprisingly, not off the top of my head (nor in my quick search). Closest I can find is Gneiss, which is great in its own right. <https:\/\/www.cs.cmu.edu\/~shihpinc\/gneiss.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fyanA",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Have you seen any that operate on structured or relational data?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Surprisingly, not off the top of my head (nor in my quick search). Closest I can find is Gneiss, which is great in its own right. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.cmu.edu\/~shihpinc\/gneiss.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699669826.314559",
        "client_msg_id": "0960928d-1382-4715-9d2e-dc3f308f2498",
        "text": "Wow, SmallStar goes waaay back. I was going to say something like PhotoShop actions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hATkF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, SmallStar goes waaay back. I was going to say something like PhotoShop actions."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U018FSM8G3Z",
                    "UMV4B97GT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U018FSM8G3Z",
        "type": "message",
        "ts": "1699669913.898109",
        "client_msg_id": "14958084-19a8-4333-96b3-9379bb50c346",
        "text": "Photoshop actions doesn't solve the hard problems like conditionals, AFAIK, though.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "797f85c4509a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-08\/2456193585383_797f85c4509a6e997492_72.jpg",
            "first_name": "",
            "real_name": "Michael Gummelt",
            "display_name": "Michael Gummelt",
            "team": "T5TCAFTA9",
            "name": "mgummelt1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VZ\/l3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Photoshop actions doesn't solve the hard problems like conditionals, AFAIK, though."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1699679809.094789",
        "client_msg_id": "a31449c5-db2f-4032-ad1c-84779972a1ae",
        "text": "True. Just one example of macros that came to mind. I'd imagine they would have solved some interesting problems being how old PS is, though. I haven't use it in many years.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbdF+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "True. Just one example of macros that came to mind. I'd imagine they would have solved some interesting problems being how old PS is, though. I haven't use it in many years."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1699688213.313149",
        "client_msg_id": "5e698816-9c0c-4471-b2ff-c3c6b9b1cba7",
        "text": "As strange as this might sound, the most powerful and usable PBD system I’ve ever seen is… emacs keyboard macros (the name’s a misnomer, they also  record other types of events, like mouse gestures).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699645040.076329",
        "parent_user_id": "U018FSM8G3Z",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TZyth",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As strange as this might sound, the most powerful and usable PBD system I’ve ever seen is… emacs keyboard macros (the name’s a misnomer, they also  record other types of events, like mouse gestures)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]