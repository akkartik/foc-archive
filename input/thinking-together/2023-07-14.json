[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1689326858.826909",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1689326901.000000"
        },
        "client_msg_id": "901e93f3-f942-443e-890e-6b3998b051b3",
        "text": "Thanks <@U013WBS1B1C> for the links to and the background of Rebol\/Red!\n\n&gt; How do we keep from being overwhelmed, while being able to express things (thinking text here) as we do with natural language?\nThe comparison with natural language is difficult. Natural language serves for informal, i.e. context-dependent, reasoning. It's OK to have the same terms refer to different meanings in different contexts. In a formal language, everything needs to be explicit and non-ambiguous. So I guess different but similar-in-spirit and interoperable languages are probably our best bet. That's something I think Red got right. As did Racket (although it lacks the system layer for now).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ASG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U013WBS1B1C"
                            },
                            {
                                "type": "text",
                                "text": " for the links to and the background of Rebol\/Red!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do we keep from being overwhelmed, while being able to express things (thinking text here) as we do with natural language?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The comparison with natural language is difficult. Natural language serves for informal, i.e. context-dependent, reasoning. It's OK to have the same terms refer to different meanings in different contexts. In a formal language, everything needs to be explicit and non-ambiguous. So I guess different but similar-in-spirit and interoperable languages are probably our best bet. That's something I think Red got right. As did Racket (although it lacks the system layer for now)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1689348651.107639",
        "client_msg_id": "6c513b13-f67e-408e-9942-f536cb637896",
        "text": "A nearly ten year old artifact of mentoring <https:\/\/www.bloomberg.com\/graphics\/2015-paul-ford-what-is-code\/|Paul Ford> (in this case, in Clojure):\n<https:\/\/gist.github.com\/ftrain\/8655399>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689017004.403839",
        "parent_user_id": "U055V4HCHU7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "06h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A nearly ten year old artifact of mentoring "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.bloomberg.com\/graphics\/2015-paul-ford-what-is-code\/",
                                "text": "Paul Ford"
                            },
                            {
                                "type": "text",
                                "text": " (in this case, in Clojure):\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/ftrain\/8655399"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013WBS1B1C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1689351631.644589",
        "client_msg_id": "16C91914-D694-48B2-84FC-6C6B398CDA43",
        "text": "Im starting to think that expressiveness is not a solvable problem at least directly \n\nAny representation will have downsides, so we need multiple representations.\n\nWhen im glancing over my code, id prefer to look at the lines of regex in text because its terse and can be readable enough to know “this is a phone number validator”\n\nBut when im writing regex, or testing it, i want a UI - i use <http:\/\/regex101.com|regex101.com>\n\nI think there are many things like this, where if we try to tackle the expressiveness problem directly with text we may fall into problems of performance, optimization, terse vs readable. \n\nIf we have ways to easily swap out parts of our code with different representations, it may make the language &amp; the specific expression less important. \n\nLibraries can expose their API as a verbose yet clear data format, while providing plugins to swap between representations of it. - calendar plugin allows you to manipulate a calendar to set hardcoded holidays for your system, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SBC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Im starting to think that expressiveness is not a solvable problem at least directly \n\nAny representation will have downsides, so we need multiple representations.\n\nWhen im glancing over my code, id prefer to look at the lines of regex in text because its terse and can be readable enough to know “this is a phone number validator”\n\nBut when im writing regex, or testing it, i want a UI - i use "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/regex101.com",
                                "text": "regex101.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think there are many things like this, where if we try to tackle the expressiveness problem directly with text we may fall into problems of performance, optimization"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " terse vs readable. \n\nIf we have ways to easily swap out parts of our code with different representations, it may make the language & the specific expression less important. \n\nLibraries can expose their API as a verbose yet clear data format, while providing plugins to swap between representations of it. - calendar plugin allows you to manipulate a calendar to set hardcoded holidays for your system, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1689357166.933889",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1689357205.000000"
        },
        "client_msg_id": "9ddb6e4e-ce7a-4103-8e7e-51606d2536b6",
        "text": "I think regex is a good example of why grammar\/representation are a red herring. No matter the syntax, the underlying formalism of regex cannot _express_ a language with matching brackets, or HTML. This is, if not the only, then the most important aspect of expressivity.\n\nWithin the domain of regular languages, or perhaps the extended domain of PCRE, I would suggest that grades of expressivity come in the form of primitives and compositions that let the abstract structure of your \"program\" correspond more directly to the structure of the problem in your mind. Maybe combinator-based APIs are nicer, for instance, and I'm sure we could define less-expressive languages with the same power if we wanted...\n\nLooking back at what I've written, I wonder if I'm stretching the meaning of \"expressive\" too far to include formal power. But I do feel it's part of the intuitive idea of \"expressivity\", and I stand by the idea that trivially isomorphic representations of the same formalism can only have minor differences in expressivity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a7E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think regex is a good example of why grammar\/representation are a red herring. No matter the syntax, the underlying formalism of regex cannot "
                            },
                            {
                                "type": "text",
                                "text": "express",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a language with matching brackets, or HTML. This is, if not the only, then the most important aspect of expressivity.\n\nWithin the domain of regular languages, or perhaps the extended domain of PCRE, I would suggest that grades of expressivity come in the form of primitives and compositions that let the abstract structure of your \"program\" correspond more directly to the structure of the problem in your mind. Maybe combinator-based APIs are nicer, for instance, and I'm sure we could define less-expressive languages with the same power if we wanted...\n\nLooking back at what I've written, I wonder if I'm stretching the meaning of \"expressive\" too far to include formal power. But I do feel it's part of the intuitive idea of \"expressivity\", and I stand by the idea that trivially isomorphic representations of the same formalism can only have minor differences in expressivity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "expressionless",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689359668.018179",
        "client_msg_id": "82361e81-ce8d-46f4-8a42-6f1015bdc82b",
        "text": "&gt;  Natural language serves for informal, i.e. context-dependent, reasoning. It's OK to have the same terms refer to different meanings in different contexts. In a formal language, everything needs to be explicit and non-ambiguous.\n<@UJBAJNFLK> context is the very thing I meant. The question is, can we have both context and unambiguous use in a proglang? Red tries. For some people it's a reason to never consider using it, and they run screaming in terror. For others it's \"I can use that to do this really wacky thing.\". For most I believe it's \"Oh, I have no idea what's going on under the hood. It just works.\"  Finally, a few deep divers will say \"It makes this edge\/exception case impossible to handle in all cases, so it's a bad design.\" Maybe prompt-based development will lead us to new approaches where, like with human dialogue, the system can say \"Did you mean A or B here?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QvmhU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Natural language serves for informal, i.e. context-dependent, reasoning. It's OK to have the same terms refer to different meanings in different contexts. In a formal language, everything needs to be explicit and non-ambiguous."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " context is the very thing I meant. The question is, can we have both context and unambiguous use in a proglang? Red tries. For some people it's a reason to never consider using it, and they run screaming in terror. For others it's \"I can use that to do this really wacky thing.\". For most I believe it's \"Oh, I have no idea what's going on under the hood. It just works.\"  Finally, a few deep divers will say \"It makes this edge\/exception case impossible to handle in all cases, so it's a bad design.\" Maybe prompt-based development will lead us to new approaches where, like with human dialogue, the system can say \"Did you mean A or B here?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689360886.191919",
        "client_msg_id": "46f5fed7-08d2-4c3f-a045-6cd96ac3ede6",
        "text": "I'm reminded of Beautiful Code and Beautiful Architecture, which I really enjoy and think the idea should be much more widespread. Exercism is a site that works along the lines of mentoring, at the small scale of functions and problems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689017004.403839",
        "parent_user_id": "U055V4HCHU7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RU8v5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm reminded of Beautiful Code and Beautiful Architecture, which I really enjoy and think the idea should be much more widespread. Exercism is a site that works along the lines of mentoring, at the small scale of functions and problems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689361206.847419",
        "client_msg_id": "95fdf233-d3d3-4820-9e39-e53b657705c7",
        "text": "Here's an old gist I made, which falls somewhere in two venn circles of mentoring and literate programming: <https:\/\/gist.github.com\/greggirwin\/38883ca5109175a60896d2f406ee49f6>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689017004.403839",
        "parent_user_id": "U055V4HCHU7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HD6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's an old gist I made, which falls somewhere in two venn circles of mentoring and literate programming: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/greggirwin\/38883ca5109175a60896d2f406ee49f6"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689362311.359139",
        "client_msg_id": "46918fbd-d847-400c-b8ff-b9a578058952",
        "text": "Gist updated for a recent change in Red, for anyone who wants to run it, and also updated the code-only version at <https:\/\/gist.github.com\/greggirwin\/6745b96d0531ee88f5755d6e62515a9d>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689017004.403839",
        "parent_user_id": "U055V4HCHU7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s85tx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gist updated for a recent change in Red, for anyone who wants to run it, and also updated the code-only version at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/greggirwin\/6745b96d0531ee88f5755d6e62515a9d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I've been thinking a lot about the patterns and architectures we're going to see start to emerge that lend themselves well to being written by generative AI and came across this technique being used by a library called Marvin (<https:\/\/github.com\/PrefectHQ\/marvin>) where they limit the tokens the LLM can respond with to just a single token corresponding to a value in an enum. They then have it respond with the value as the response to a natural language query. This is extra interesting because responding with a single token is relatively fast and cheap.\n\nThe example they give is using it in routing:\n\n&gt; ```    USER_PROFILE = \"\/user-profile\"\n&gt;     SEARCH = \"\/search\"\n&gt;     NOTIFICATIONS = \"\/notifications\"\n&gt;     SETTINGS = \"\/settings\"\n&gt;     HELP = \"\/help\"\n&gt;     CHAT = \"\/chat\"\n&gt;     DOCS = \"\/docs\"\n&gt;     PROJECTS = \"\/projects\"\n&gt;     WORKSPACES = \"\/workspaces\"\n&gt; \n&gt; \n&gt; AppRoute(\"update my name\")\n&gt; # AppRoute.USER_PROFILE```\nBut I feel like there's a seed of an idea here that points to what a piece of an LLM-core architecture may look like. I experimented with the idea a bit in chatgpt earlier today (screenshots attached) and I'd love to know if anyone finds this interesting or has any thoughts\/opinions.",
        "files": [
            {
                "id": "F05HVF1T1LG",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F05GZ49BPRC",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=h8\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking a lot about the patterns and architectures we're going to see start to emerge that lend themselves well to being written by generative AI and came across this technique being used by a library called Marvin ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/PrefectHQ\/marvin"
                            },
                            {
                                "type": "text",
                                "text": ") where they limit the tokens the LLM can respond with to just a single token corresponding to a value in an enum. They then have it respond with the value as the response to a natural language query. This is extra interesting because responding with a single token is relatively fast and cheap.\n\nThe example they give is using it in routing:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    USER_PROFILE = \"\/user-profile\"\n    SEARCH = \"\/search\"\n    NOTIFICATIONS = \"\/notifications\"\n    SETTINGS = \"\/settings\"\n    HELP = \"\/help\"\n    CHAT = \"\/chat\"\n    DOCS = \"\/docs\"\n    PROJECTS = \"\/projects\"\n    WORKSPACES = \"\/workspaces\"\n\n\nAppRoute(\"update my name\")\n# AppRoute.USER_PROFILE"
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut I feel like there's a seed of an idea here that points to what a piece of an LLM-core architecture may look like. I experimented with the idea a bit in chatgpt earlier today (screenshots attached) and I'd love to know if anyone finds this interesting or has any thoughts\/opinions."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1689369045.712599",
        "edited": {
            "user": "U05GSC0B4A0",
            "ts": "1689429287.000000"
        },
        "client_msg_id": "dfdd6c0b-378e-4b4c-901b-0a85498fa57c",
        "thread_ts": "1689369045.712599",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1690222116.309819",
        "reply_users": [
            "U05FZS91DM2",
            "U05GSC0B4A0",
            "U02U0AS3J49",
            "U05G68KE214"
        ],
        "replies": [
            {
                "user": "U05FZS91DM2",
                "ts": "1689389586.939669"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1689428904.650439"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1689694485.198489"
            },
            {
                "user": "U05G68KE214",
                "ts": "1689854837.167909"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1690222116.309819"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05FZS91DM2",
        "type": "message",
        "ts": "1689389586.939669",
        "client_msg_id": "32c0afa1-8c37-4570-81e4-6f2fe2acfb7c",
        "text": "Just for clarification - is the idea that the LLM can be used as a sort of router?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "11fa1abdaf10",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5538519946901_11fa1abdaf1085d196f1_72.jpg",
            "first_name": "Alex",
            "real_name": "Alex J.",
            "display_name": "Alex J.",
            "team": "T5TCAFTA9",
            "name": "ajeon66",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689369045.712599",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+M2O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just for clarification - is the idea that the LLM can be used as a sort of router?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]