[
    {
        "subtype": "thread_broadcast",
        "user": "UCUSW7WVD",
        "thread_ts": "1636714161.079200",
        "root": {
            "user": "UJBAJNFLK",
            "type": "message",
            "ts": "1636714161.079200",
            "client_msg_id": "ca418fec-6365-4fae-b584-80cffff2e8c0",
            "text": "A recurrent topic in this community is \"Why do today's programming system so strongly rely on text files, and can we do better?\" This tweet made me think of a possible answer: epistemic transparence (of text) vs. epistemic opacity (of data formats requiring more specialized tools for inspection). We have so many tools for inspecting text files that it's hard to imagine that someone could sneak in a tool that deliberately misrepresents the information in a file. Human-readable data encodings in text files thus provide acces to a shared ground truth. The tools intermediating between bits in memory and UIs (screens etc.) are so simple that they are easy to understand and easy to verify and validate. Even for relatively simple structured binary formats such as tar, this is no longer true.\n<https:\/\/twitter.com\/slpnix\/status\/1457642326956855296>",
            "team": "T5TCAFTA9",
            "thread_ts": "1636714161.079200",
            "reply_count": 27,
            "reply_users_count": 9,
            "latest_reply": "1647891345.536769",
            "reply_users": [
                "UDQBTJ211",
                "UCS1K3QTH",
                "U02JDAYKW7J",
                "U8A5MS6R1",
                "UJBAJNFLK",
                "UCUSW7WVD",
                "UD3AK9JRF",
                "U016VUZGUUQ",
                "URKQXRCAC"
            ],
            "replies": [
                {
                    "user": "UDQBTJ211",
                    "ts": "1636717688.079400"
                },
                {
                    "user": "UCS1K3QTH",
                    "ts": "1636720427.084500"
                },
                {
                    "user": "U02JDAYKW7J",
                    "ts": "1636722879.084700"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1636731755.085300"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1636735740.085900"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1636735908.086100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1636753229.086800"
                },
                {
                    "user": "U02JDAYKW7J",
                    "ts": "1636760943.087100"
                },
                {
                    "user": "UD3AK9JRF",
                    "ts": "1636768650.087500"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1636774282.087900"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1636789782.088200"
                },
                {
                    "user": "U02JDAYKW7J",
                    "ts": "1636800621.088400"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1636907569.088600"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1636907932.088800"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1637053604.089900"
                },
                {
                    "user": "U02JDAYKW7J",
                    "ts": "1637062290.090300"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1637079394.090500"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1637082577.091300"
                },
                {
                    "user": "UDQBTJ211",
                    "ts": "1637086781.092300"
                },
                {
                    "user": "UDQBTJ211",
                    "ts": "1637086812.092500"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1637135356.093100"
                },
                {
                    "user": "UJBAJNFLK",
                    "ts": "1637220473.095000"
                },
                {
                    "user": "URKQXRCAC",
                    "ts": "1637400451.100900"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1637433422.101200"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1647792490.530789"
                },
                {
                    "user": "UDQBTJ211",
                    "ts": "1647890329.507489"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1647891345.536769"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "from_url": "https:\/\/twitter.com\/slpnix\/status\/1457642326956855296",
                    "fallback": "<https:\/\/twitter.com\/slpnix|@slpnix>: \"(...) where a single .tar file contains different contents depending on the tar utility being used.\" <https:\/\/twitter.com\/ReproBuilds\/status\/1457638619003432962>",
                    "ts": 1636363987,
                    "text": "\"(...) where a single .tar file contains different contents depending on the tar utility being used.\" <https:\/\/twitter.com\/ReproBuilds\/status\/1457638619003432962>",
                    "service_name": "twitter",
                    "service_url": "https:\/\/twitter.com",
                    "author_name": "Sergio LÃ³pez",
                    "author_link": "https:\/\/twitter.com\/slpnix\/status\/1457642326956855296",
                    "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1255407175738036229\/GQgYkk1U_normal.jpg",
                    "author_subname": "@slpnix",
                    "id": 1,
                    "original_url": "https:\/\/twitter.com\/slpnix\/status\/1457642326956855296",
                    "footer": "Twitter",
                    "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
                },
                {
                    "from_url": "https:\/\/twitter.com\/ReproBuilds\/status\/1457638619003432962",
                    "fallback": "<https:\/\/twitter.com\/ReproBuilds|@ReproBuilds>: Check out what's been happening last month in the world of <https:\/\/twitter.com\/ReproBuilds|@ReproBuilds> and related supply-chain stuff! <https:\/\/reproducible-builds.org\/reports\/2021-10\/>  cc <https:\/\/twitter.com\/packagingcon|@packagingcon> <https:\/\/twitter.com\/lolamby|@lolamby> <https:\/\/twitter.com\/codethink|@codethink> <https:\/\/twitter.com\/QubesOS|@QubesOS> <https:\/\/pbs.twimg.com\/media\/FDqSVteXEAAmC4g.jpg>",
                    "ts": 1636363103,
                    "text": "Check out what's been happening last month in the world of <https:\/\/twitter.com\/ReproBuilds|@ReproBuilds> and related supply-chain stuff! <https:\/\/reproducible-builds.org\/reports\/2021-10\/>  cc <https:\/\/twitter.com\/packagingcon|@packagingcon> <https:\/\/twitter.com\/lolamby|@lolamby> <https:\/\/twitter.com\/codethink|@codethink> <https:\/\/twitter.com\/QubesOS|@QubesOS> <https:\/\/pbs.twimg.com\/media\/FDqSVteXEAAmC4g.jpg>",
                    "service_name": "twitter",
                    "service_url": "https:\/\/twitter.com",
                    "author_name": "Reproducible Builds",
                    "author_link": "https:\/\/twitter.com\/ReproBuilds\/status\/1457638619003432962",
                    "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1001801313070534656\/gOSrgWid_normal.jpg",
                    "author_subname": "@ReproBuilds",
                    "image_url": "https:\/\/pbs.twimg.com\/media\/FDqSVteXEAAmC4g.jpg",
                    "image_width": 910,
                    "image_height": 512,
                    "image_bytes": 88102,
                    "indent": true,
                    "color": "32BBF3",
                    "id": 2,
                    "footer": "Twitter",
                    "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "=Yo",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "A recurrent topic in this community is \"Why do today's programming system so strongly rely on text files, and can we do better?\" This tweet made me think of a possible answer: epistemic transparence (of text) vs. epistemic opacity (of data formats requiring more specialized tools for inspection). We have so many tools for inspecting text files that it's hard to imagine that someone could sneak in a tool that deliberately misrepresents the information in a file. Human-readable data encodings in text files thus provide acces to a shared ground truth. The tools intermediating between bits in memory and UIs (screens etc.) are so simple that they are easy to understand and easy to verify and validate. Even for relatively simple structured binary formats such as tar, this is no longer true.\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/twitter.com\/slpnix\/status\/1457642326956855296"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1647792490.530789",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1647792554.000000"
        },
        "client_msg_id": "b623aecd-0a0a-4e63-8558-ce230704104b",
        "text": "<@UJBAJNFLK>:\n&gt; Wondering: could we define some measure of the opacity of a data representation?\n&gt; A plain text and its rot13 encoding are equivalent in information theory. But the text is human-readable, its rot13 encoding isn't.\n<@UDQBTJ211>:\n&gt; \"human intelligible\" can be quantified to an extent by experiments like getting people to describe it over a phone call, or recreate it in a separate room where they have to read it, remember a bit of it, go next door, and write it down.\nAnother idea, in the spirit of the Turing test: what fraction of humans can tell if two pieces of data (in the given representation) represent the same 'object'.\n\n(Sorry for the necrobump; this feels like a really valuable thread to preserve in Slack history a little longer.)",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+BYV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wondering: could we define some measure of the opacity of a data representation?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A plain text and its rot13 encoding are equivalent in information theory. But the text is human-readable, its rot13 encoding isn't."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"human intelligible\" can be quantified to an extent by experiments like getting people to describe it over a phone call, or recreate it in a separate room where they have to read it, remember a bit of it, go next door, and write it down."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnother idea, in the spirit of the Turing test: what fraction of humans can tell if two pieces of data (in the given representation) represent the same 'object'.\n\n(Sorry for the necrobump; this feels like a really valuable thread to preserve in Slack history a little longer.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1647815695.262939",
        "client_msg_id": "1f6f8f16-9479-407f-8e8a-7748ade222f2",
        "text": "Not sure I see the parallel between state machines and sync\/async. I don't really see why async functions would be states. My async function `fetch-the-data` isn't a state. In fact, I could make many many state transitions while my async function is still resolving.\n\n\nTo be pedantic, Go has a cooperative scheduler.\n\nBut to go beyond the pedanticness, I donât think actors or CSP solve the colored functions problem. There are still colors here, just not functions. Sending a message to an actor or putting a message on a channel are fundamentally different operations. You canât parameterize on them. \n\nThat said, I think that coloring functions is actually quite good. There are so many unique aspects to asynchronous programming that Iâve seen so many people get wrong. I have spent weeks\/months of time trying to help a QA team whose framework hid the fact that asynchrony was going on from them. They constantly ran up against race conditions. To the point where there were 8 people, whose full time jobs was to run tests on their personal laptops, because CI was âtoo slowâ and âcaused errorsâ. They even blamed the errors in their test suites on the app having a âmemory leakâ.\n\nNeedless to say, I'm all for these things being very explicit, because hiding them, or abstracting away these details leads to very subtle and confusing bugs ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ssj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure I see the parallel between state machines and sync\/async. I don't really see why async functions would be states. My async function "
                            },
                            {
                                "type": "text",
                                "text": "fetch-the-data",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn't a state. In fact, I could make many many state transitions while my async function is still resolving.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "To be pedantic, Go has a cooperative scheduler.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "But to go beyond the pedanticness, I donât think actors or CSP solve the colored functions problem. There are still colors here, just not functions. Sending a message to an actor or putting a message on a channel are fundamentally different operations. You canât parameterize on them. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "That said, I think that coloring functions is actually quite good. There are so many unique aspects to asynchronous programming that Iâve seen so many people get wrong. I have spent weeks\/months of time trying to help a QA team whose framework hid the fact that asynchrony was going on from them. They constantly ran up against race conditions. To the point where there were 8 people, whose full time jobs was to run tests on their personal laptops, because CI was âtoo slowâ and âcaused errorsâ. They even blamed the errors in their test suites on the app having a âmemory leakâ.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Needless to say, I'm all for these things being very explicit, because hiding them, or abstracting away these details leads to very subtle and confusing bugs "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]