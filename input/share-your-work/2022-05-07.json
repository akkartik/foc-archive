[
    {
        "text": "This looks really cool!\nI haven't run the project, can you explain me whats the code layout shown in this gif? How is it constructed?",
        "files": [
            {
                "id": "F03EH2C9FPD",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U85HCL7JP",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o8ono",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks really cool!\nI haven't run the project, can you explain me whats the code layout shown in this gif? How is it constructed?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1651923481.012799",
        "client_msg_id": "88638D56-C6FB-4CEA-98E6-13456F7FF1A1",
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS"
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1651923636.506469",
        "client_msg_id": "DF7DC5B8-17B6-495A-B64D-FF76C8F82C01",
        "text": "Have you thought of how to represent code using 3 dimensions? \nI see in projects like this that code is always flat (2D) but we have 3 dimensions available!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QfUFP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you thought of how to represent code using 3 dimensions? \n"
                            },
                            {
                                "type": "text",
                                "text": "I see in projects like this that code is always flat (2D) but we have 3 dimensions available!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "<@U85HCL7JP> Hey there, I’m glad you like it! I can and I will happily. I even made another small demo gif. I’m going to try to put some more samples on the github page to help too, because it’s got a few more bells and whistles that kinda fit together.\n\nIn that screenshot, the blue rectangles are directories. They are “stacked” by their depth in a directory tree, and every file is a simple long black rectangle rendered like a big sheet of paper. The trick, though, is that each glyph of text on the sheet is a 3d node - it can move and interact in space!\n\nIn the gif, you’ll see I’m grabbing some directory out of a new rendered stack. Then, I turn on ‘hover info’, which shows the results of hit-testing the nodes underneath the mouse arrow. Finally, it does some syntax tree walking to figure out what the syntax\/semantics are of that individual glyph, and all of its associated nodes. As I click in the AST node list, you can see the text that represents that piece of the syntax tree ‘highlighting’ and gaining some z-depth and color. And, as more nested stuff is selected, the nodes are free to move even further away to demonstrate that deeper nesting.\n\nThat’s one of the first pieces of none-2d-only sample I’ve got. I’m not too far away from doing things like, “give me all the nodes for class declarations and make a grid out of them” or “stack up all the functions and order them by width then height”. This is where you come in - help me make more! :wink:",
        "files": [
            {
                "id": "F03EAJWTR1U",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U03E4LY27FS",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "slx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " Hey there, I’m glad you like it! I can and I will happily. I even made another small demo gif. I’m going to try to put some more samples on the github page to help too, because it’s got a few more bells and whistles that kinda fit together.\n\nIn that screenshot, the blue rectangles are directories. They are “stacked” by their depth in a directory tree, and every file is a simple long black rectangle rendered like a big sheet of paper. The trick, though, is that each glyph of text on the sheet is a 3d node - it can move and interact in space!\n\nIn the gif, you’ll see I’m grabbing some directory out of a new rendered stack. Then, I turn on ‘hover info’, which shows the results of hit-testing the nodes underneath the mouse arrow. Finally, it does some syntax tree walking to figure out what the syntax\/semantics are of that individual glyph, and all of its associated nodes. As I click in the AST node list, you can see the text that represents that piece of the syntax tree ‘highlighting’ and gaining some z-depth and color. And, as more nested stuff is selected, the nodes are free to move even further away to demonstrate that deeper nesting.\n\nThat’s one of the first pieces of none-2d-only sample I’ve got. I’m not too far away from doing things like, “give me all the nodes for class declarations and make a grid out of them” or “stack up all the functions and order them by width then height”. This is where you come in - help me make more! "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1651934413.909269",
        "edited": {
            "user": "U03E4LY27FS",
            "ts": "1651934531.000000"
        },
        "client_msg_id": "51dc64b9-b3dd-4188-9fc6-442c1090d202",
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS"
    },
    {
        "user": "U03E4LY27FS",
        "type": "message",
        "ts": "1651935242.907139",
        "client_msg_id": "bee7aa07-b240-4d38-a5c5-7a2ef514a4f0",
        "text": "And to add on because I’m a chatterbox, something on my radar is a “metaphor mode” where you can swap the rendering of each syntax item into a generic shape or back to text. Something like “classes are cubes, protocols are spheres, functions are pyramids” and then having them hierarchically organized in a similar manner to the directory. All ways to get “quick visual insight” into what’s currently rendered. Then, of course, there’s things like “draw a line through these functions to show their execution order” - I’m working on that with the execution trace now, and the flashing text is showing each traced call happening in order. Making a directed line from that dealing with loops and the like is a burning goal..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "98f0011b77c6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-28\/3450316621254_98f0011b77c61bbc241b_72.jpg",
            "first_name": "Ivan",
            "real_name": "Ivan Lugo",
            "display_name": "Ivan Lugo",
            "team": "T5TCAFTA9",
            "name": "iheartlappy486",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n4voL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And to add on because I’m a chatterbox, something on my radar is a “metaphor mode” where you can swap the rendering of each syntax item into a generic shape or back to text. Something like “classes are cubes, protocols are spheres, functions are pyramids” and then having them hierarchically organized in a similar manner to the directory. All ways to get “quick visual insight” into what’s currently rendered. Then, of course, there’s things like “draw a line through these functions to show their execution order” - I’m working on that with the execution trace now, and the flashing text is showing each traced call happening in order. Making a directed line from that dealing with loops and the like is a burning goal.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1651937868.675569",
        "client_msg_id": "1CDB49A7-AF89-409C-B833-B72E74CE6C1D",
        "text": "Thanks for the detailed explanation <@U03E4LY27FS> ! Do you have a roadmap for the features you would like to add to the project?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FGi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the detailed explanation "
                            },
                            {
                                "type": "user",
                                "user_id": "U03E4LY27FS"
                            },
                            {
                                "type": "text",
                                "text": " ! Do you have a roadmap for the features you would like to add to the project?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03E4LY27FS",
        "type": "message",
        "ts": "1651938043.363249",
        "client_msg_id": "5a1fa74a-4d4e-4659-a70d-33e9492552fd",
        "text": "It’s a pleasure sir. However, I fear no roadmap that another human would find legible, heh. But now that you mention it, I think that’s the focus for today. I want to get a few more samples on the page, and a part of that will be figuring out where I am. I’m very curious if you have some ideas to bounce my way - what kinds of features would you like to see? (no pun intended. ok maybe a little.)    Let’s say sky’s the limit - what do you _wish_ you saw this doing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "98f0011b77c6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-28\/3450316621254_98f0011b77c61bbc241b_72.jpg",
            "first_name": "Ivan",
            "real_name": "Ivan Lugo",
            "display_name": "Ivan Lugo",
            "team": "T5TCAFTA9",
            "name": "iheartlappy486",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dMh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s a pleasure sir. However, I fear no roadmap that another human would find legible, heh. But now that you mention it, I think that’s the focus for today. I want to get a few more samples on the page, and a part of that will be figuring out where I am. I’m very curious if you have some ideas to bounce my way - what kinds of features would you like to see? (no pun intended. ok maybe a little.)    Let’s say sky’s the limit - what do you "
                            },
                            {
                                "type": "text",
                                "text": "wish",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you saw this doing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1651984070.639409",
        "client_msg_id": "bb39bcf8-cc12-4b14-ae62-9f5c0792a3c7",
        "text": "<@U03E4LY27FS> Thanks for sharing!  It can be dramatic!  I'm into visualizing execution traces.  Imagine each step as a little wooden strip, a popsicle stick.  Now you have a chain of them, a ribbon, millions of links long.  Use rules to fold that ribbon.\n\nFor example, here's a standard view that I like.  Developed in stages:\n1. Put each step below its predecessor.  The ribbon goes from the sky to the underworld.\n2. If a step is a call, put it to the right of its predecessor.  Now, the ribbon zigs from left to right.\n3. If a step is a return, put it to the left of its predecessor.  Now, the ribbon zigs and zags.  It's still quite tall.\n4. If there's a gap between a step and the one visually above it, collapse it.  Now this structure is compact with lots and lots of overlap in the middle.\n5. If some steps are on top of each other, put earlier steps in front of later steps.  Now we a nicely oriented 3D tree.  Left to right shows call stack depth.  Top to bottom is order of execution.  Front to back shows things at the same depth with the stuff the executed first in front.\nWalking around the tree gives you some perspective.   More comes from, say, making distances smaller the deeper you are in the stack.  It still looks like a mess.  But for me the real, real mind blower was to add a breeze.  Suddenly the connections in this elaborate structure are as easy to see as the separate branches of a real tree.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/P2\/j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03E4LY27FS"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for sharing!  It can be dramatic!  I'm into visualizing execution traces.  Imagine each step as a little wooden strip, a popsicle stick.  Now you have a chain of them, a ribbon, millions of links long.  Use rules to fold that ribbon.\n\nFor example, here's a standard view that I like.  Developed in stages:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Put each step below its predecessor.  The ribbon goes from the sky to the underworld."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If a step is a call, put it to the right of its predecessor.  Now, the ribbon zigs from left to right."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If a step is a return, put it to the left of its predecessor.  Now, the ribbon zigs and zags.  It's still quite tall."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If there's a gap between a step and the one visually above it, collapse it.  Now this structure is compact with lots and lots of overlap in the middle."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If some steps are on top of each other, put earlier steps in front of later steps.  Now we a nicely oriented 3D tree.  Left to right shows call stack depth.  Top to bottom is order of execution.  Front to back shows things at the same depth with the stuff the executed first in front."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWalking around the tree gives you some perspective.   More comes from, say, making distances smaller the deeper you are in the stack.  It still looks like a mess.  But for me the real, real mind blower was to add a breeze.  Suddenly the connections in this elaborate structure are as easy to see as the separate branches of a real tree."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03E4LY27FS",
        "type": "message",
        "ts": "1651987551.541299",
        "edited": {
            "user": "U03E4LY27FS",
            "ts": "1651987648.000000"
        },
        "client_msg_id": "EB4CA158-5DA5-475B-A935-569C8BBFB315",
        "text": "<@UA14TGLTC> I'm really chewing on this layout algorithm. I'm trying to think how I would implement this with my current structures. The library currently traces entry and exit of calls, so I could handle the left\/right distinction. The list is a set of ids, so theoretically it's not too hard to pull from the list as many times as can be rendered. The sky's the limit indeed.\n\nThis may sound simple, but I could render the persisted UUIDs that represent the call stack into a text layer. Then, stack these text-popsicle-sticks, and arrange them with the left\/right pattern. The ifs have a static length so that's easy to make basic assumptions on for layout. It'll look like a big block of code, but indeed, with all those gaps and zig zagging, little mountains. I have a few questions about implementing that sort of packing algorithm! Haha.\n\nYou mentioned introducing a breeze - I'm not sure about that one, is that a technique for some kind of graph interaction? This is a first for me all around for this tech and these ideas, so I have a ton to learn and absorb.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "98f0011b77c6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-04-28\/3450316621254_98f0011b77c61bbc241b_72.jpg",
            "first_name": "Ivan",
            "real_name": "Ivan Lugo",
            "display_name": "Ivan Lugo",
            "team": "T5TCAFTA9",
            "name": "iheartlappy486",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1651636380.628219",
        "parent_user_id": "U03E4LY27FS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MgW\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I'm really chewing on this layout algorithm. I'm trying to think how I would implement this with my current structures. The library currently traces entry and exit of calls, so I could handle the left\/right distinction. The list is a set of ids, so theoretically it's not too hard to pull from the list as many times as can be rendered. The sky's the limit indeed.\n\nThis may sound simple, but I could render the persisted UUIDs that represent the call stack into a text layer. Then, stack these text-popsicle-sticks, and arrange them with the left\/right pattern. The ifs have a static length so that's easy to make basic assumptions on for layout. It'll look like a big block of code, but indeed, with all those gaps and zig zagging, little mountains. I have a few questions about implementing that sort of packing algorithm! Haha.\n\nYou mentioned introducing a breeze - I'm not sure about that one, is that a technique for some kind of graph interaction? This is a first for me all around for this tech and these ideas, so I have a ton to learn and absorb."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]