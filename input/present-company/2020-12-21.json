[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1608539720.145300",
        "client_msg_id": "7c1b0b2a-a38a-40b9-be5a-c6548f890381",
        "text": "<https:\/\/github.com\/edn-format\/edn|EDN> is a simpler textual representation (Clojure's version of sexps) that includes reader extensibility (\"tagged elements\"). It's easy to emit and there are a fairly large number of reader implementations out there, including <https:\/\/github.com\/edporras\/edn_turbo|a fast C parser> embedded into Ruby that we built at my last company. Would that work for you?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "edn-format\/edn",
                "title_link": "https:\/\/github.com\/edn-format\/edn",
                "text": "Extensible Data Notation. Contribute to edn-format\/edn development by creating an account on GitHub.",
                "fallback": "GitHub: edn-format\/edn",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/2325298?s=400&v=4",
                "from_url": "https:\/\/github.com\/edn-format\/edn",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/edn-format\/edn"
            },
            {
                "service_name": "GitHub",
                "title": "edporras\/edn_turbo",
                "title_link": "https:\/\/github.com\/edporras\/edn_turbo",
                "text": "edn-ruby plugin that replaces the ruby parser with a Ragel-based C++ implementation - edporras\/edn_turbo",
                "fallback": "GitHub: edporras\/edn_turbo",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/427325?s=400&v=4",
                "from_url": "https:\/\/github.com\/edporras\/edn_turbo",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 2,
                "original_url": "https:\/\/github.com\/edporras\/edn_turbo"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SDjAN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/edn-format\/edn",
                                "text": "EDN"
                            },
                            {
                                "type": "text",
                                "text": " is a simpler textual representation (Clojure's version of sexps) that includes reader extensibility (\"tagged elements\"). It's easy to emit and there are a fairly large number of reader implementations out there, including "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/edporras\/edn_turbo",
                                "text": "a fast C parser"
                            },
                            {
                                "type": "text",
                                "text": " embedded into Ruby that we built at my last company. Would that work for you?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608539946.145600",
        "client_msg_id": "68b4acc5-e1e4-4e77-be3f-d54de773f1db",
        "text": "hey Jack, I think EDN is a good inspiration too, but is mostly a stand-alone textual format, I was thinking more of something more directly built on top of JSON",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2SU2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey Jack, I think EDN is a good inspiration too, but is mostly a stand-alone textual format, I was thinking more of something more directly built on top of JSON"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1608540176.145800",
        "client_msg_id": "f04260ef-e8b9-4e7d-bc3a-b36845e200fe",
        "text": "What would the layer above look like\/seek to accomplish? That info might lead to a better suggestion :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What would the layer above look like\/seek to accomplish? That info might lead to a better suggestion "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1608571266.147400",
        "client_msg_id": "0F1A3DD5-2261-4DB2-A26D-1A9A8E5B6CF5",
        "text": "if you end up going with my idea, please let me know how it works out for you! it’s basically half-assing infra’s method: <http:\/\/www.christopherkhall.com\/research.html|http:\/\/www.christopherkhall.com\/research.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K3lC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you end up going with my idea, please let me know how it works out for you! it’s basically half-assing infra’s method: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.christopherkhall.com\/research.html",
                                "text": "http:\/\/www.christopherkhall.com\/research.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608589215.147900",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1608590762.000000"
        },
        "client_msg_id": "2fcb065b-f3c0-4b56-b855-225502972e5a",
        "text": "The details are a bit hazy ... very roughly, I've a PoC that takes <https:\/\/gist.github.com\/EmmanuelOga\/0d626107e5ed2bc6f5e7bf3925d032fd|sources like this> and turn them into HTML. It works but it has quite some layers of complexity (RDF+XML\/XSLT).\nIt uses Saxon\/JS. Saxon does what I'm asking: it expresses the full XSLT type system on top of JSON, it is just more than a bit hairy, as you can imagine... At the same time Saxon\/JS lacks basic things like supporting async extension functions.\n\nIt occurred to me I could create a format to express both markup and graph data with an eye on building on top of JSON *from the start*, as opposed to the Frankenstein of tech I currently use.\nSomething like <https:\/\/github.com\/thi-ng\/umbrella\/tree\/develop\/packages\/egf|EGF> comes close but it is missing the markup part (mixed content).\n\nFor now I'm just looking at \"prior art\", specially if I can find very minimal formats that build on top of JSON without adding too much complexity to ... steal :slightly_smiling_face: .. some of the patterns people use when building on top of JSON.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d0U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The details are a bit hazy ... very roughly, I've a PoC that takes "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/EmmanuelOga\/0d626107e5ed2bc6f5e7bf3925d032fd",
                                "text": "sources like this"
                            },
                            {
                                "type": "text",
                                "text": " and turn them into HTML. It works but it has quite some layers of complexity (RDF+XML\/XSLT).\nIt uses Saxon\/JS. Saxon does what I'm asking: it expresses the full XSLT type system on top of JSON, it is just more than a bit hairy, as you can imagine... At the same time Saxon\/JS lacks basic things like supporting async extension functions.\n\nIt occurred to me I could create a format to express both markup and graph data with an eye on building on top of JSON "
                            },
                            {
                                "type": "text",
                                "text": "from the start",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", as opposed to the Frankenstein of tech I currently use.\nSomething like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/thi-ng\/umbrella\/tree\/develop\/packages\/egf",
                                "text": "EGF"
                            },
                            {
                                "type": "text",
                                "text": " comes close but it is missing the markup part (mixed content).\n\nFor now I'm just looking at \"prior art\", specially if I can find very minimal formats that build on top of JSON without adding too much complexity to ... steal "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " .. some of the patterns people use when building on top of JSON."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608591454.148600",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1608603203.000000"
        },
        "client_msg_id": "46df4db9-3136-49e9-875b-6dc738fea330",
        "text": "<https:\/\/concise-encoding.org\/> is able to express both markup and graphs and apparently has a JSON representation as well, so I'll be looking at it too. C\/E's scope seems a lot larger than what I'm looking for and I don't necessarily like its grammar.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+0O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/concise-encoding.org\/"
                            },
                            {
                                "type": "text",
                                "text": " is able to express both markup and graphs and apparently has a JSON representation as well, so I'll be looking at it too. C\/E's scope seems a lot larger than what I'm looking for and I don't necessarily like its grammar."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]