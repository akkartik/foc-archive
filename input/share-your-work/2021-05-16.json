[
    {
        "user": "U01FAFPDFL4",
        "type": "message",
        "ts": "1621152153.139200",
        "client_msg_id": "c0e09cc1-2e6b-4361-82d0-a6e6425c4b08",
        "text": "Thanks <@UJ6LDMMN0>!! In most cases it’s fairly similar to Vue \/ MobX.\n\nThe main innovation is the concept of an “implicit observer”. This means that we can store the “observing” context on the actual reactive \/ observable variable.\n\ne.g.: `const store = reactive({}, Observer)` Assumes that all reads on store should be registered on `Observer.` .\n\nThis is a nifty trick on which we can build some things like:\n• Depend on observable state in React without having to wrap all code \/ components with `observe(() =&gt; {..})`  like you’d have to do in MobX. So we now only need to use the `useReactive` hook (source @ <https:\/\/github.com\/YousefED\/reactive\/blob\/main\/packages\/reactive-react\/src\/useReactive.ts>)\n• We could make observables work in `async` code. Other libraries can’t automatically track whatever observables you use after an `await` statement. (example @ <https:\/\/github.com\/YousefED\/reactive\/blob\/39cee3d42a29696fa9f08eadf6567ec3c5aac01f\/packages\/reactive-core\/test\/autorun.test.ts#L37>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a863c7a92962",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-31\/3025191075606_a863c7a92962a53b14dd_72.jpg",
            "first_name": "Yousef",
            "real_name": "Yousef El-Dardiry",
            "display_name": "Yousef El-Dardiry",
            "team": "T5TCAFTA9",
            "name": "yousefdardiry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FTy+K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "!! In most cases it’s fairly similar to Vue \/ MobX.\n\nThe main innovation is the concept of an “implicit observer”. This means that we can store the “observing” context on the actual reactive \/ observable variable.\n\ne.g.: "
                            },
                            {
                                "type": "text",
                                "text": "const store = reactive({}, Observer)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Assumes that all reads on store should be registered on "
                            },
                            {
                                "type": "text",
                                "text": "Observer.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " .\n\nThis is a nifty trick on which we can build some things like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Depend on observable state in React without having to wrap all code \/ components with "
                                    },
                                    {
                                        "type": "text",
                                        "text": "observe(() => {..}) ",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " like you’d have to do in MobX. So we now only need to use the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "useReactive",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " hook (source @ "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/YousefED\/reactive\/blob\/main\/packages\/reactive-react\/src\/useReactive.ts"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We could make observables work in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "async",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " code. Other libraries can’t automatically track whatever observables you use after an "
                                    },
                                    {
                                        "type": "text",
                                        "text": "await",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " statement. (example @ "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/YousefED\/reactive\/blob\/39cee3d42a29696fa9f08eadf6567ec3c5aac01f\/packages\/reactive-core\/test\/autorun.test.ts#L37"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1621156327.139800",
        "client_msg_id": "01fdcbaf-5360-4100-b24d-af123adc83c1",
        "text": "I am not sure that I properly understand what you mean by \"We could make observables work in `async` code. Other libraries can’t automatically track whatever observables you use after an `await` statement.\", because as I understand it you can do that in Vue. In fact it is one of the purposes of the Vue Composition API, doing some async stuff and set some reactive data with the response.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am not sure that I properly understand what you mean by \"We could make observables work in "
                            },
                            {
                                "type": "text",
                                "text": "async",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code. Other libraries can’t automatically track whatever observables you use after an "
                            },
                            {
                                "type": "text",
                                "text": "await",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " statement.\", because as I understand it you can do that in Vue. In fact it is one of the purposes of the Vue Composition API, doing some async stuff and set some reactive data with the response."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01FAFPDFL4",
        "type": "message",
        "ts": "1621157523.140000",
        "client_msg_id": "7ee7ca0a-8c8b-4799-ac0e-16070e1e6ba7",
        "text": "Ah, my experience mostly is in MobX and my comment mostly related to that, my bad.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a863c7a92962",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-31\/3025191075606_a863c7a92962a53b14dd_72.jpg",
            "first_name": "Yousef",
            "real_name": "Yousef El-Dardiry",
            "display_name": "Yousef El-Dardiry",
            "team": "T5TCAFTA9",
            "name": "yousefdardiry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eTlgO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, my experience mostly is in MobX and my comment mostly related to that, my bad."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01FAFPDFL4",
        "type": "message",
        "ts": "1621157821.140300",
        "client_msg_id": "18bebbe7-7329-4440-ad19-3ca127f0c080",
        "text": "I’ll check this out later (not a Vue expert). Perhaps the overall setup of Vue makes this work, but in the core of Vue’s reactivity library, watchEffect might not support it directly.\n\nOf course Vue has a lot of reactivity already built in to the framework-level, so I don’t expect there to be any benefits to combine reactive and Vue directly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a863c7a92962",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-31\/3025191075606_a863c7a92962a53b14dd_72.jpg",
            "first_name": "Yousef",
            "real_name": "Yousef El-Dardiry",
            "display_name": "Yousef El-Dardiry",
            "team": "T5TCAFTA9",
            "name": "yousefdardiry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "snv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ll check this out later (not a Vue expert). Perhaps the overall setup of Vue makes this work, but in the core of Vue’s reactivity library, watchEffect might not support it directly.\n\nOf course Vue has a lot of reactivity already built in to the framework-level, so I don’t expect there to be any benefits to combine reactive and Vue directly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01FAFPDFL4",
        "type": "message",
        "ts": "1621167773.140600",
        "client_msg_id": "3ff4c2a3-0a65-4ec8-9c53-9dfbb080231a",
        "text": "<@UJ6LDMMN0> this is the example pattern I meant: <https:\/\/codesandbox.io\/s\/trusting-wildflower-10fsq?file=\/src\/index.ts>\n\n(Note that this is a pretty hypothetical scenario and in a Vue app you’d probably never need anything like this)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a863c7a92962",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-31\/3025191075606_a863c7a92962a53b14dd_72.jpg",
            "first_name": "Yousef",
            "real_name": "Yousef El-Dardiry",
            "display_name": "Yousef El-Dardiry",
            "team": "T5TCAFTA9",
            "name": "yousefdardiry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "attachments": [
            {
                "service_name": "CodeSandbox",
                "title": "trusting-wildflower-10fsq - CodeSandbox",
                "title_link": "https:\/\/codesandbox.io\/s\/trusting-wildflower-10fsq?file=\/src\/index.ts",
                "text": "trusting-wildflower-10fsq by YousefED using parcel-bundler, vue",
                "fallback": "CodeSandbox: trusting-wildflower-10fsq - CodeSandbox",
                "image_url": "https:\/\/codesandbox.io\/api\/v1\/sandboxes\/10fsq\/screenshot.png",
                "image_width": 476,
                "image_height": 250,
                "ts": 1621192561,
                "from_url": "https:\/\/codesandbox.io\/s\/trusting-wildflower-10fsq?file=\/src\/index.ts",
                "image_bytes": 7007,
                "service_icon": "https:\/\/codesandbox.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/codesandbox.io\/s\/trusting-wildflower-10fsq?file=\/src\/index.ts"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": " this is the example pattern I meant: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codesandbox.io\/s\/trusting-wildflower-10fsq?file=\/src\/index.ts"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(Note that this is a pretty hypothetical scenario and in a Vue app you’d probably never need anything like this)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1621185400.141000",
        "client_msg_id": "cd0340ff-3107-4df9-a799-895a006b2fca",
        "text": "Thanks for the explanations and the example. Now I see what you mean. And, yes, maybe this is an edge case for Vue apps. Usually you want to use async in watchEffect to trigger some side effect that you send using reactive data, i.e. usually you need reactive data before the await. But maybe there might be some rare cases when you reactive data after the await.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620246305.093800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vv\/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the explanations and the example. Now I see what you mean. And, yes, maybe this is an edge case for Vue apps. Usually you want to use async in watchEffect to trigger some side effect that you send using reactive data, i.e. usually you need reactive data before the await. But maybe there might be some rare cases when you reactive data after the await."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]