[
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1610008710.446000",
        "client_msg_id": "8ab52b61-d683-498e-80e5-f16727be2d68",
        "text": "It is already happening. OpenAI never published their model of GPT-3 and instead selling an \"API\" access to people. Watson, AzureAI etc had been doing that for long. We should expect companies like DeepMind follow suit as well.\n\nHere is the funny thing(according to me), it is a (somewhat) vicious circle.\n\nBig Company with money -&gt; Can train big model -&gt; Can put hundreds of dollars in compute and marketing alike -&gt; Can bring media, money, attention -&gt; Bigger company -&gt; Can train bigger model...\n\nRinse and Repeat.\n\nAt least that is how I see it. And for that really important topics, such as Neuro Symbolic (or otherwise) models which can become really data efficient, Ethics in AI, Explainability and Interpretability, Alternative computing models for intelligence (apart form RL) etc. are never really surfacing. The reason being the circle I mentioned above.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609935940.429300",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cLoUc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is already happening. OpenAI never published their model of GPT-3 and instead selling an \"API\" access to people. Watson, AzureAI etc had been doing that for long. We should expect companies like DeepMind follow suit as well.\n\nHere is the funny thing(according to me), it is a (somewhat) vicious circle.\n\nBig Company with money -> Can train big model -> Can put hundreds of dollars in compute and marketing alike -> Can bring media, money, attention -> Bigger company -> Can train bigger model...\n\nRinse and Repeat.\n\nAt least that is how I see it. And for that really important topics, such as Neuro Symbolic (or otherwise) models which can become really data efficient, Ethics in AI, Explainability and Interpretability, Alternative computing models for intelligence (apart form RL) etc. are never really surfacing. The reason being the circle I mentioned above."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN",
                    "UBSMEUXAA"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1610014202.446200",
        "client_msg_id": "c25fbd84-cfd3-4df3-91db-f7f2c9c6c8cb",
        "text": "Also let's. not forget wordseye (<https:\/\/www.wordseye.com\/>) which does the same (often much better) and predates DL.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609935940.429300",
        "parent_user_id": "UPVBV34EL",
        "attachments": [
            {
                "title": "Untitled",
                "title_link": "https:\/\/www.wordseye.com\/",
                "text": "WordsEye lets you type a picture! Create 3D scenes simply by describing them and share your creations with friends. A new world of visual expression and a new way to communicate and express yourself online.",
                "fallback": "Untitled",
                "from_url": "https:\/\/www.wordseye.com\/",
                "service_name": "wordseye.com",
                "id": 1,
                "original_url": "https:\/\/www.wordseye.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UTn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also let's. not forget wordseye ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.wordseye.com\/"
                            },
                            {
                                "type": "text",
                                "text": ") which does the same (often much better) and predates DL."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1610065610.448100",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1610065693.000000"
        },
        "client_msg_id": "cc8b2baf-eb16-455b-94d8-dd0345584bb3",
        "text": "It's not the same as AOP, but \"Data-Oriented\" programming with Entity-Component-Systems is something that feels adjacent to these ideas.\n\nAt my co, we've leveraged the \"data\" focused part of an ECS to make it trivial to cut through \"call-graphs\" and instead just look at the underlying shared state of our application.\n\nSee the following demo I've just recorded:\n<https:\/\/www.loom.com\/share\/b4997d40f9814144940008c51584b926>\n\ncc <@UHWC9PXBL>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "service_name": "Loom",
                "service_url": "https:\/\/www.loom.com",
                "title": "ECS \/ Data-oriented programming in response to AOP",
                "title_link": "https:\/\/www.loom.com\/share\/b4997d40f9814144940008c51584b926",
                "thumb_url": "https:\/\/cdn.loom.com\/sessions\/thumbnails\/b4997d40f9814144940008c51584b926-00001.gif",
                "thumb_width": 1024,
                "thumb_height": 885,
                "fallback": "Loom Video: ECS \/ Data-oriented programming in response to AOP",
                "video_html": "<iframe src=\"https:\/\/www.loom.com\/embed\/b4997d40f9814144940008c51584b926?autoplay=1\" frameborder=\"0\" width=\"1248\" height=\"936\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe>",
                "video_html_width": 1248,
                "video_html_height": 936,
                "from_url": "https:\/\/www.loom.com\/share\/b4997d40f9814144940008c51584b926",
                "id": 1,
                "original_url": "https:\/\/www.loom.com\/share\/b4997d40f9814144940008c51584b926"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/+AIM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not the same as AOP, but \"Data-Oriented\" programming with Entity-Component-Systems is something that feels adjacent to these ideas.\n\nAt my co, we've leveraged the \"data\" focused part of an ECS to make it trivial to cut through \"call-graphs\" and instead just look at the underlying shared state of our application.\n\nSee the following demo I've just recorded:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.loom.com\/share\/b4997d40f9814144940008c51584b926"
                            },
                            {
                                "type": "text",
                                "text": "\n\ncc "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1610067746.465300",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1610068088.000000"
        },
        "client_msg_id": "6eb90d45-ef86-4b77-9ccb-723f5373e4bc",
        "text": "Hello, I'm trying to wrap my head around the implementation for a platform for developing self describing \"services\" or as we might call them \"drivers\".\n\nThe basic lifecycle of a \"driver\" is essentially:\n1. *Driver describes Service registration requirements*: Announce what registration info (keys, permissions, web-hook URLs, etc) it needs to register\n2. *User adds Service*: Register an instance of Service X by providing \"registration info\" that were asked for by the driver\n3. *Driver describes Service interfaces*: Use \"registration info\" to imperatively declare its interfaces (I have these functions, that take these types, that provide these representations, etc)\n4. *User* can begin using this *Service* from their own code.\nThis cycle exists to enable something like registering an Airtable database through a driver. We aim to allow for generative interface based on the Airtable's columns. You could just as easily replace \"Airtable\" as an example with an \"SQL DB driver\" even.\n\nThe main problem I'm wrestling with is mostly in how I would design the Driver SDK for step \"3. *Driver describes Service interfaces*\". In some respects, I want to allow the SDK developer (myself and my team members for now) to have a lot of flexibility with how they end up describing the Service interfaces &amp; provide that service interface's implementation. But, when it comes to considering how deployment, versioning, and development and debugging for SDK dev I feel quite naive.\n\nDoes anyone have reference material or admirable examples of this kind of problem? Even things adjacent could be very inspiring.\ncc <@UHWC9PXBL> <@UG0EL18H3> <@UKFNXF0F9>\n\nP.S. This seems tangential to: reflective type systems \/ declarative type providers (like building <https:\/\/docs.microsoft.com\/en-us\/dotnet\/fsharp\/tutorials\/type-providers\/|FSharp Type providers>); VS Code Language Server protocol; game dev modding; and maybe <#C01CD90V1NF|of-glam-school>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "reply_count": 9,
        "reply_users_count": 6,
        "latest_reply": "1610199993.482700",
        "reply_users": [
            "UKFNXF0F9",
            "UG0EL18H3",
            "UN9SCH5RD",
            "UHWC9PXBL",
            "UCGAK10LS",
            "UFPPABQ7P"
        ],
        "replies": [
            {
                "user": "UKFNXF0F9",
                "ts": "1610076524.466100"
            },
            {
                "user": "UKFNXF0F9",
                "ts": "1610076620.466300"
            },
            {
                "user": "UKFNXF0F9",
                "ts": "1610076666.466500"
            },
            {
                "user": "UKFNXF0F9",
                "ts": "1610076774.466700"
            },
            {
                "user": "UG0EL18H3",
                "ts": "1610084994.472000"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1610099905.472600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1610122434.475900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1610150064.482300"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1610199993.482700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lR9DV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello, I'm trying to wrap my head around the implementation for a platform for developing self describing \"services\" or as we might call them \"drivers\".\n\nThe basic lifecycle of a \"driver\" is essentially:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Driver describes Service registration requirements",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ": Announce what registration info (keys, permissions, web-hook URLs, etc) it needs to register"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "User adds Service",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ": Register an instance of Service X by providing \"registration info\" that were asked for by the driver"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Driver describes Service interfaces",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ": Use \"registration info\" to imperatively declare its interfaces (I have these functions, that take these types, that provide these representations, etc)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "User",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " can begin using this "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Service",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " from their own code."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis cycle exists to enable something like registering an Airtable database through a driver. We aim to allow for generative interface based on the Airtable's columns. You could just as easily replace \"Airtable\" as an example with an \"SQL DB driver\" even.\n\nThe main problem I'm wrestling with is mostly in how I would design the Driver SDK for step \"3. "
                            },
                            {
                                "type": "text",
                                "text": "Driver describes Service interfaces",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\". In some respects, I want to allow the SDK developer (myself and my team members for now) to have a lot of flexibility with how they end up describing the Service interfaces & provide that service interface's implementation. But, when it comes to considering how deployment, versioning, and development and debugging for SDK dev I feel quite naive.\n\nDoes anyone have reference material or admirable examples of this kind of problem? Even things adjacent could be very inspiring.\ncc "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UKFNXF0F9"
                            },
                            {
                                "type": "text",
                                "text": "\n\nP.S. This seems tangential to: reflective type systems \/ declarative type providers (like building "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.microsoft.com\/en-us\/dotnet\/fsharp\/tutorials\/type-providers\/",
                                "text": "FSharp Type providers"
                            },
                            {
                                "type": "text",
                                "text": "); VS Code Language Server protocol; game dev modding; and maybe "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C01CD90V1NF"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1610076524.466100",
        "client_msg_id": "2d15a24c-f561-4d78-8901-8c75ed48a4e8",
        "text": "There are two kind of services, service for read, service for write. There is no standard way to write, writing into a external service need various properties according to the need. Expose the write interface as a generic interface such as SQL INSERT is a mistake, it will not work in cross domain setting. To protect the data integrity, some kind of stored procedure is always needed to validate business constraint.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AZXG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are two kind of services, service for read, service for write. There is no standard way to write, writing into a external service need various properties according to the need. Expose the write interface as a generic interface such as SQL INSERT is a mistake, it will not work in cross domain setting. To protect the data integrity, some kind of stored procedure is always needed to validate business constraint."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1610076620.466300",
        "client_msg_id": "f255c873-d02b-43af-afc6-9af12ec7a437",
        "text": "Service for read can be standard, expose query by example, query by filter or query by sql. The schema of information returned can also be defined in protobuf or json schema.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sV1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Service for read can be standard, expose query by example, query by filter or query by sql. The schema of information returned can also be defined in protobuf or json schema."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1610076666.466500",
        "client_msg_id": "229ceead-d828-4e93-9107-59ee41f7c2bd",
        "text": "In terms of generating UI automatically, you can generate the UI of form submission, which will call the write service after submit button clicked. You can also generate the UI of the read side, list\/detail\/...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cNm6l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In terms of generating UI automatically, you can generate the UI of form submission, which will call the write service after submit button clicked. You can also generate the UI of the read side, list\/detail\/..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1610076774.466700",
        "client_msg_id": "ecdab9a1-3c1c-4123-b840-3fd82b6a8751",
        "text": "The data schema could be encoded as static file, such as protobuf, json schema, typescript .d.ts \/ .ts class. It could also be encoded as data to allow dynamic reflection. Generate can happen statically, or dynamically.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F0BN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The data schema could be encoded as static file, such as protobuf, json schema, typescript .d.ts \/ .ts class. It could also be encoded as data to allow dynamic reflection. Generate can happen statically, or dynamically."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1610084994.472000",
        "client_msg_id": "FD67B8B4-184C-47C9-99F1-5F607F3C1DCE",
        "text": "First thing that comes to mind whenever people talk about the future of versioning, SDKs and a malleable public API ecosystem is the Unison project: I believe <@U01F5UR4R1C> would be the guy to ask about that. Seems like a particularly good model for your app domain as you will be the ones controlling the entire stack for the development of these drivers (correct me if I'm wrong). On the topic of service announcement and registration, unfortunately only WSDL comes to mind (sadly). ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1610067746.465300",
        "parent_user_id": "UFPPABQ7P",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mr+V3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First thing that comes to mind whenever people talk about the future of versioning, SDKs and a malleable public API ecosystem is the Unison project: I believe "
                            },
                            {
                                "type": "user",
                                "user_id": "U01F5UR4R1C"
                            },
                            {
                                "type": "text",
                                "text": " would be the guy to ask about that. Seems like a particularly good model for your app domain as you will be the ones controlling the entire stack for the development of these drivers (correct me if I'm wrong). On the topic of service announcement and registration, unfortunately only WSDL comes to mind (sadly). "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    }
]