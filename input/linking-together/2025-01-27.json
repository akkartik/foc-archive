[
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1737987481.171149",
        "client_msg_id": "6a815d2c-2783-4754-9361-7e8f6c5d1e6a",
        "text": "You know...I've had similar experiences in the past as well, and I think what drew me to Programming as Theory Building was less the argument that it was impossible to gain a theory of the program without it being passed person to person from the original authors and more just a description of the idea of 'becoming an expert with it to the extent that it feels like your baby'.\n\nMore that it puts words and an explanation to that concept where you gain an intuition for how the machine will work with different inputs, if there's a bug, having an intuition for where it likely is, and how to make changes to it quickly and safely...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3aFCg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You know...I've had similar experiences in the past as well, and I think what drew me to Programming as Theory Building was less the argument that it was impossible to gain a theory of the program without it being passed person to person from the original authors and more just a description of the idea of 'becoming an expert with it to the extent that it feels like your baby'.\n\nMore that it puts words and an explanation to that concept where you gain an intuition for how the machine will work with different inputs, if there's a bug, having an intuition for where it likely is, and how to make changes to it quickly and safely..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1738009356.515399",
        "client_msg_id": "55ade53c-8632-4463-8295-3b00130cb3fc",
        "text": "There's probably a through-line here about how software engineers are primarily communicators. Even when we do not identify as designers, our actual tasks are to identify needs, get buy-in, and cultivate trust.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wCheL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's probably a through-line here about how software engineers are primarily communicators. Even when we do not identify as designers, our actual tasks are to identify needs, get buy-in, and cultivate trust."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1738009505.366519",
        "client_msg_id": "1bc75ae4-7549-4021-bbfc-cffab30c4f5f",
        "text": "Perspective-taking works for artifacts and not just audiences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUFUr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perspective-taking works for artifacts and not just audiences."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1738009577.711039",
        "client_msg_id": "a4ccf1c6-a227-4511-89d9-2d948ab0a17c",
        "text": "Huh, interesting...that second sentence wasn't where I thought you were going with that thought...I immediately went to thinking about how you may write code in a particular way in a particular place to communicate something specific about it to future readers...and I don't think I've seen much about that concept",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IHvKi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Huh, interesting...that second sentence wasn't where I thought you were going with that thought...I immediately went to thinking about how you may write code in a particular way in a particular place to communicate something specific about it to future readers...and I don't think I've seen much about that concept"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1738009612.645209",
        "client_msg_id": "6f3c9326-0c74-4e4f-bdd9-6dd8318f14b4",
        "text": "There should be more rhetoric of code for sure, for sure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PZ0Kk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There should be more rhetoric of code for sure, for sure."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "boom",
                "users": [
                    "UCUSW7WVD",
                    "U05GSC0B4A0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1738009841.301659",
        "client_msg_id": "b251f895-4f41-4560-bf28-9bd936959cee",
        "text": "I had an experience in the past where one of my teammates was working on a PR for another team's library and recognized an opportunity for a really clean refactor...but since the other team didn't know us really well, we decided to pare the change way back and just hint at the refactor in the PR by subtly making our code also work really easy with that potential refactored interface...giving them the chance to recognize it and decide whether to go in that direction or not...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D8d\/e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had an experience in the past where one of my teammates was working on a PR for another team's library and recognized an opportunity for a really clean refactor...but since the other team didn't know us really well, we decided to pare the change way back and just hint at the refactor in the PR by subtly making our code also work really easy with that potential refactored interface...giving them the chance to recognize it and decide whether to go in that direction or not..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1738009893.006559",
        "client_msg_id": "80c4acf6-75c5-45d6-9b35-28e545070b0a",
        "text": "wow I'm not familiar with rhetoric of code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uD0mq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wow I'm not familiar with rhetoric of code"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1738009900.449879",
        "client_msg_id": "f56f8696-2299-4ed4-a1d3-073a9b2573e4",
        "text": "this looks like exactly what I've been looking for haha",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pm87i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this looks like exactly what I've been looking for haha"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1738020643.583569",
        "client_msg_id": "757e5295-cfcc-46c6-8e58-99bbccc9c756",
        "text": "Yeah! I personally think that, idiosyncrasies apart, programming directly in the shell is really elegant. I still prefer doing simple automation stuff on the shell because it has unconstrained access to the system. It's aways a bit awkward to do plumbing tasks in a programming language, too much bureaucracy. From time to time I dream about a sort of stream\/iterator based concatenative programming language with a rich standard library. Hard to beat the simplicity of programs as data pipelines",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6EOCv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah! I personally think that, idiosyncrasies apart, programming directly in the shell is really elegant. I still prefer doing simple automation stuff on the shell because it has unconstrained access to the system. It's aways a bit awkward to do plumbing tasks in a programming language, too much bureaucracy. From time to time I dream about a sort of stream\/iterator based concatenative programming language with a rich standard library. Hard to beat the simplicity of programs as data pipelines"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1738031110.788529",
        "client_msg_id": "B1CB3B0E-178C-4B37-92CF-FFA4C08DE080",
        "text": "More context on <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1736369428471629|the wrapper>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737765870.949019",
        "parent_user_id": "ULM3U6275",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1736369428471629",
                "ts": "1736369428.471629",
                "author_id": "UC2A2ARPT",
                "channel_id": "CCL5VVBAN",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "CCL5VVBAN",
                        "ts": "1736369428.471629",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "0yD2I",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Here's a little thing I made that solves an extremely specific problem.\n\nAt Ink & Switch, one of the things we're researching is a new kind of \"dynamic notebook\" — something sort of like a pad of paper, but programmable. As part of this research we build a lot of little prototype apps. We use the web platform for prototyping because the iteration time is really fast. We run these prototypes on iPad, because the form factor (tablet + stylus) is very close to what we have in mind for our dynamic notebook. But a limitation of the Safari browser on iPad is that you can't receive simultaneous input from the Apple Pencil and your fingers.\n\nTo work around this limitation, we built a little native iPad app in Swift. It loads a URL of your choosing (ie: the live-reloading dev server running your prototype de jour), then captures all incoming touch and pencil events on the native side and forwards them to the JS context. Just like that, your JS code gets full-fidelity (ie: 240 Hz) simultaneous input from fingers and the pen. And, if you want to hack in additional features that aren't available via the browser — like haptic feedback — you can easily whip that up on the Swift side.\n\nI've just packaged-up this Xcode project and some example JS code and put them up on Github: "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/github.com\/inkandswitch\/wrapper",
                                                    "text": "Wrapper"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": ". The code is covered by the Unlicense (public domain) so that you can scavenge this thing for parts without worry about credit or whatever. Just make shit!\n\nSo, if you have a Mac, an iPad, and an Apple Pencil… and you want to do some experiments with rich gestural interfaces… and you want to write those experiments in JS… and you're in a hurry… then this project "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "might",
                                                    "style": {
                                                        "italic": true
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " be useful for you :)"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1736369428471629",
                "fallback": "[January 8th, 2025 12:50 PM] ivanreese: Here's a little thing I made that solves an extremely specific problem.\n\nAt Ink &amp; Switch, one of the things we're researching is a new kind of \"dynamic notebook\" — something sort of like a pad of paper, but programmable. As part of this research we build a lot of little prototype apps. We use the web platform for prototyping because the iteration time is really fast. We run these prototypes on iPad, because the form factor (tablet + stylus) is very close to what we have in mind for our dynamic notebook. But a limitation of the Safari browser on iPad is that you can't receive simultaneous input from the Apple Pencil and your fingers.\n\nTo work around this limitation, we built a little native iPad app in Swift. It loads a URL of your choosing (ie: the live-reloading dev server running your prototype de jour), then captures all incoming touch and pencil events on the native side and forwards them to the JS context. Just like that, your JS code gets full-fidelity (ie: 240 Hz) simultaneous input from fingers and the pen. And, if you want to hack in additional features that aren't available via the browser — like haptic feedback — you can easily whip that up on the Swift side.\n\nI've just packaged-up this Xcode project and some example JS code and put them up on Github: <https:\/\/github.com\/inkandswitch\/wrapper|Wrapper>. The code is covered by the Unlicense (public domain) so that you can scavenge this thing for parts without worry about credit or whatever. Just make shit!\n\nSo, if you have a Mac, an iPad, and an Apple Pencil… and you want to do some experiments with rich gestural interfaces… and you want to write those experiments in JS… and you're in a hurry… then this project _might_ be useful for you :)",
                "text": "Here's a little thing I made that solves an extremely specific problem.\n\nAt Ink &amp; Switch, one of the things we're researching is a new kind of \"dynamic notebook\" — something sort of like a pad of paper, but programmable. As part of this research we build a lot of little prototype apps. We use the web platform for prototyping because the iteration time is really fast. We run these prototypes on iPad, because the form factor (tablet + stylus) is very close to what we have in mind for our dynamic notebook. But a limitation of the Safari browser on iPad is that you can't receive simultaneous input from the Apple Pencil and your fingers.\n\nTo work around this limitation, we built a little native iPad app in Swift. It loads a URL of your choosing (ie: the live-reloading dev server running your prototype de jour), then captures all incoming touch and pencil events on the native side and forwards them to the JS context. Just like that, your JS code gets full-fidelity (ie: 240 Hz) simultaneous input from fingers and the pen. And, if you want to hack in additional features that aren't available via the browser — like haptic feedback — you can easily whip that up on the Swift side.\n\nI've just packaged-up this Xcode project and some example JS code and put them up on Github: <https:\/\/github.com\/inkandswitch\/wrapper|Wrapper>. The code is covered by the Unlicense (public domain) so that you can scavenge this thing for parts without worry about credit or whatever. Just make shit!\n\nSo, if you have a Mac, an iPad, and an Apple Pencil… and you want to do some experiments with rich gestural interfaces… and you want to write those experiments in JS… and you're in a hurry… then this project _might_ be useful for you :)",
                "author_name": "Ivan Reese",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UC2A2ARPT",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-48.png",
                "author_subname": "Ivan Reese",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7H51Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More context on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1736369428471629",
                                "text": "the wrapper"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738033216.213819",
        "client_msg_id": "5e6af1bf-21bd-4de7-bef4-a66a6cb4d093",
        "text": "Imagine: `A` produces a text string that looks like some sort of \"language\" (machine readable, not necessarily human-readable, kind of like assembler vs. \"C\"). `A` sends the string - as data - through the pipe to `B`. `B` \"parses\" the string and calls functions based on what it finds in the parse. This might be called \"syntax directed serialization\". FP is hinting at this kind of thing, calling it \"pattern matching\". The key, again, is that A does not _CALL_ B, it simply _sends_ data to B. In UNIX, B already does something like this, but at a feeble level. Add PEG parsing to B's inhalation process to improve on its feeble parsing abilities. It's been done before to build non-trivial programs like compilers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbPQe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Imagine: "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " produces a text string that looks like some sort of \"language\" (machine readable, not necessarily human-readable, kind of like assembler vs. \"C\"). "
                            },
                            {
                                "type": "text",
                                "text": "A",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " sends the string - as data - through the pipe to "
                            },
                            {
                                "type": "text",
                                "text": "B",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "text",
                                "text": "B",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"parses\" the string and calls functions based on what it finds in the parse. This might be called \"syntax directed serialization\". FP is hinting at this kind of thing, calling it \"pattern matching\". The key, again, is that A does not "
                            },
                            {
                                "type": "text",
                                "text": "CALL",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " B, it simply "
                            },
                            {
                                "type": "text",
                                "text": "sends",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " data to B. In UNIX, B already does something like this, but at a feeble level. Add PEG parsing to B's inhalation process to improve on its feeble parsing abilities. It's been done before to build non-trivial programs like compilers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738033672.744119",
        "client_msg_id": "31d92a04-21b6-406d-9557-791e41cab0cd",
        "text": "I see 2 distinct tasks here: (1) control a machine, (2) communicate to other human programmers what was intended. This sounds like 2 languages, one for each task. And, a tool to tie the two together. Programming languages attempt to do a union of both tasks which just makes the problem harder.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737943315.554909",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KUVWZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see 2 distinct tasks here: (1) control a machine, (2) communicate to other human programmers what was intended. This sounds like 2 languages, one for each task. And, a tool to tie the two together. Programming languages attempt to do a union of both tasks which just makes the problem harder."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]