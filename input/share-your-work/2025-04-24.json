[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1745486661.987899",
        "client_msg_id": "822af772-565a-45be-94a5-542e0385b811",
        "text": "Thanks <@U0282PL61U1> for clarifying. Here are some Lisp and Smalltalk projects that fall into your list of application domains:\n• <https:\/\/gemtalksystems.com\/products\/gs64\/|GemStone> is a database engine built in and around Smalltalk.\n• <https:\/\/kandria.com\/|Kandria> is a commercial game built on the <https:\/\/github.com\/Shirakumo\/trial|Trial> engine. All in Common Lisp.\n• <http:\/\/www.ulisp.com\/|uLisp> is a Lisp for embedded systems\nI don't have personal experience with any of these, because what I do is very different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1745167518.063969",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "image_url": "https:\/\/gemtalksystems.com\/wp-content\/uploads\/GemTalkLogo.png",
                "image_width": 243,
                "image_height": 65,
                "image_bytes": 19297,
                "from_url": "https:\/\/gemtalksystems.com\/products\/gs64\/",
                "service_icon": "https:\/\/gemtalksystems.com\/wp-content\/uploads\/gemtalk-globe.ico",
                "id": 1,
                "original_url": "https:\/\/gemtalksystems.com\/products\/gs64\/",
                "fallback": "GemTalk Systems: GemStone\/S 64 Bit",
                "title": "GemStone\/S 64 Bit",
                "title_link": "https:\/\/gemtalksystems.com\/products\/gs64\/",
                "service_name": "GemTalk Systems"
            },
            {
                "from_url": "https:\/\/kandria.com\/",
                "thumb_url": "https:\/\/kandria.com\/media\/main%20capsule.png",
                "thumb_width": 616,
                "thumb_height": 353,
                "id": 2,
                "original_url": "https:\/\/kandria.com\/",
                "fallback": "Kandria",
                "text": "Kandria, an open-world action RPG set in a post-apocalyptic future",
                "title": "Kandria",
                "title_link": "https:\/\/kandria.com\/",
                "service_name": "kandria.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nVa6v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U0282PL61U1"
                            },
                            {
                                "type": "text",
                                "text": " for clarifying. Here are some Lisp and Smalltalk projects that fall into your list of application domains:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/gemtalksystems.com\/products\/gs64\/",
                                        "text": "GemStone"
                                    },
                                    {
                                        "type": "text",
                                        "text": " is a database engine built in and around Smalltalk."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/kandria.com\/",
                                        "text": "Kandria"
                                    },
                                    {
                                        "type": "text",
                                        "text": " is a commercial game built on the "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/Shirakumo\/trial",
                                        "text": "Trial"
                                    },
                                    {
                                        "type": "text",
                                        "text": " engine. All in Common Lisp."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.ulisp.com\/",
                                        "text": "uLisp"
                                    },
                                    {
                                        "type": "text",
                                        "text": " is a Lisp for embedded systems"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have personal experience with any of these, because what I do is very different."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0282PL61U1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1745496608.027529",
        "client_msg_id": "C0943EA7-35E3-4ACA-8F77-6AEEFFFFCD2B",
        "text": "Operating system\n<https:\/\/en.m.wikipedia.org\/wiki\/Lisp_machine|https:\/\/en.m.wikipedia.org\/wiki\/Lisp_machine>\n\nThe best performing web server in the world was for a long time one written in CL. This one outperforms many of the usual suspects:\n<https:\/\/fukamachi.hashnode.dev\/woo-a-high-performance-common-lisp-web-server|https:\/\/fukamachi.hashnode.dev\/woo-a-high-performance-common-lisp-web-server>\n\nThere are many embedded Lisps. There are also both Common Lisp and Scheme compilers (ECL and Chicken Scheme to name two) that produce C code that can be compiled to whatever target you want.\n\nThis regex implementation was faster than competing C implementations when it was authored, and remains one of the fastest in the world\n<https:\/\/edicl.github.io\/cl-ppcre\/|https:\/\/edicl.github.io\/cl-ppcre\/>\n\nSBCL typical runs within a factor of 2 of C code, and when I want to tune a function I can modify and interactively recompile that function while viewing the generated asm until it does what I want as fast as I want it to do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1745167518.063969",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dPkLG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Operating system\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Lisp_machine",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Lisp_machine"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe best performing web server in the world was for a long time one written in CL. This one outperforms many of the usual suspects:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fukamachi.hashnode.dev\/woo-a-high-performance-common-lisp-web-server",
                                "text": "https:\/\/fukamachi.hashnode.dev\/woo-a-high-performance-common-lisp-web-server"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere are many embedded Lisps. There are also both Common Lisp and Scheme compilers (ECL and Chicken Scheme to name two) that produce C code that can be compiled to whatever target you want.\n\nThis regex implementation was faster than "
                            },
                            {
                                "type": "text",
                                "text": "competing "
                            },
                            {
                                "type": "text",
                                "text": "C implementations when it was authored, and remains one of the fastest in the world\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/edicl.github.io\/cl-ppcre\/",
                                "text": "https:\/\/edicl.github.io\/cl-ppcre\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSBCL typical runs within a factor of 2 of C code, and when I want to tune a function I can modify and interactively recompile that function while viewing the generated asm until it "
                            },
                            {
                                "type": "text",
                                "text": "does what I want as fast as I want it to do."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]