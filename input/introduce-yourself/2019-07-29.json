[
    {
        "user": "UJUQESQ1Z",
        "type": "message",
        "ts": "1564397140.040100",
        "client_msg_id": "3cfa6abe-aaf5-4575-8be0-caaa782c94e1",
        "text": "<@UL3CJ7YKC> I’ve actually been pretty fortunate to land a job working on implementing a dependently typed DSL at my job (because my boss is excited about them). But yeah, the more you dig into trying to implement them, the more you realise how much we still need to figure out in order to make them viable. I’m still pretty hopeful though. There’s lots of cool work going on at the moment, especially in the realm of modal type theory, and I’m hoping some of it starts coming together in cool, practical ways!\n\nMy advice is to keep plugging away learning, and talk about it online like you’re doing. You might be surprised who you bump into! But it will probably be more of a case of ‘putting yourself in a position to be lucky’, and networking, than finding a job advertised explicitly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g52a48f76fc9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e52a48f76fc911d40711f788d74773a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Brendan Zabarauskas",
            "display_name": "Brendan Zabarauskas",
            "team": "T5TCAFTA9",
            "name": "bjzaba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564397140.040100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1566004783.097800",
        "reply_users": [
            "UD6EXQVM0"
        ],
        "replies": [
            {
                "user": "UD6EXQVM0",
                "ts": "1566004783.097800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e5Zxl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " I’ve actually been pretty fortunate to land a job working on implementing a dependently typed DSL at my job (because my boss is excited about them). But yeah, the more you dig into trying to implement them, the more you realise how much we still need to figure out in order to make them viable. I’m still pretty hopeful though. There’s lots of cool work going on at the moment, especially in the realm of modal type theory, and I’m hoping some of it starts coming together in cool, practical ways!\n\nMy advice is to keep plugging away learning, and talk about it online like you’re doing. You might be surprised who you bump into! But it will probably be more of a case of ‘putting yourself in a position to be lucky’, and networking, than finding a job advertised explicitly."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1564455554.046200",
        "client_msg_id": "29425900-d502-4eb3-9b50-df54e09df667",
        "text": "<@UJUQESQ1Z> something about dependent types feels icky to me.  It's taken reflection over years, but it boils down to principle typing being a sweet spot where you can ask what is *the* type of an expression.  Knowing additional properties is nice, but there's finesse: what additional type information is relevant for a given task.  For example, within a library you really want to know that data-structure invariants are maintained, but as the user of the library you're happy to ignore those details.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564455554.046200",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1564493946.048100",
        "reply_users": [
            "UJUQESQ1Z",
            "UF71PR58X",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UJUQESQ1Z",
                "ts": "1564461964.046300"
            },
            {
                "user": "UF71PR58X",
                "ts": "1564475835.046500"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1564476364.046700"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1564481007.047000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1564492525.047200"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1564492882.047400"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1564492899.047600"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1564493002.047900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1564493946.048100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HDpbq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJUQESQ1Z"
                            },
                            {
                                "type": "text",
                                "text": " something about dependent types feels icky to me.  It's taken reflection over years, but it boils down to principle typing being a sweet spot where you can ask what is "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type of an expression.  Knowing additional properties is nice, but there's finesse: what additional type information is relevant for a given task.  For example, within a library you really want to know that data-structure invariants are maintained, but as the user of the library you're happy to ignore those details."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJUQESQ1Z",
        "type": "message",
        "ts": "1564461964.046300",
        "client_msg_id": "676c2174-bccd-4e72-a162-5e9bb3a1b094",
        "text": "I dunno - I guess I kind of differ in opinion here - I’m cool with many different types can classifying the same data. Types are something we invent to partition the universe and make our lives easier, rather than being something that inherently to the universe.\n\nDo note however that I’m less interested in the ‘theorem proving’ aspect to dependent types (although I think it’s cool), and more interested in how full spectrum dependent types affect metaprogramming\/DSLs etc. I’m also aware of the danger of getting sucked into the black hole of wanting to ‘prove all the things’, and some of the abstraction breaking problems of DTs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g52a48f76fc9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e52a48f76fc911d40711f788d74773a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Brendan Zabarauskas",
            "display_name": "Brendan Zabarauskas",
            "team": "T5TCAFTA9",
            "name": "bjzaba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564455554.046200",
        "parent_user_id": "UA14TGLTC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bx6ef",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dunno - I guess I kind of differ in opinion here - I’m cool with many different types can classifying the same data. Types are something we invent to partition the universe and make our lives easier, rather than being something that inherently to the universe.\n\nDo note however that I’m less interested in the ‘theorem proving’ aspect to dependent types (although I think it’s cool), and more interested in how full spectrum dependent types affect metaprogramming\/DSLs etc. I’m also aware of the danger of getting sucked into the black hole of wanting to ‘prove all the things’, and some of the abstraction breaking problems of DTs."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]