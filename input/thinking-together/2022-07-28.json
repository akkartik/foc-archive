[
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1658991811.589559",
        "client_msg_id": "9af18791-fe41-4a9e-b506-b2d4407848ea",
        "text": "I don’t think that not succeeding is bad. It has the potential to start an experimental creative cycle:\n1. Choose or create a “cybernetic environment” (environment capable of running programs).\n2. Make some (even small) experiments inside it －first, define their ideal form, then implement them. Involving wider spectrum of people is encouraged.\n3. Analyze the shortcomings of the implementations w.r.t. the idealized versions. What aspects of the environment were limiting?\n4. Create a better environment. Repeat.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1npJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t think that not succeeding is bad. It has the potential to start an experimental creative cycle:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Choose or create a “cybernetic environment” (environment capable of running programs)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Make some (even small) experiments inside it －first, define their ideal form, then implement them. Involving wider spectrum of people is encouraged."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Analyze the shortcomings of the implementations w.r.t. the idealized versions. What aspects of the environment were limiting?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Create a better environment. Repeat."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1658991938.498959",
        "client_msg_id": "fea0359e-7827-47cb-afe3-e3d8882f9795",
        "text": "Smalltalk was meant to be such an environment, but as Alan Kay reported (regretfully): “Smalltalk stopped changing” －meaning that people continued to do “experiments” (in this case, production-level programs), but stopped analyzing them w.r.t. the environment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4BP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Smalltalk was meant to be such an environment, but as Alan Kay reported (regretfully): “Smalltalk stopped changing” －meaning that people continued to do “experiments” (in this case, production-level programs), but stopped analyzing them w.r.t. the environment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03FB52A4FR",
        "type": "message",
        "ts": "1658997338.356499",
        "client_msg_id": "13ae8b9c-e25e-4b76-8b65-25099f7e1346",
        "text": "A place like Recurse Center with a stipend.  2 - 6 months of solo work would be enough time to prototype virtually anything.  I think everyone here just needs more time to work and it's difficult to do that with a day job\/family\/financial obligations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd142f0940c9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/d142f0940c9444da2e02fa1108cd2849.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "William",
            "real_name": "William HS Angell",
            "display_name": "William HS Angell",
            "team": "T5TCAFTA9",
            "name": "william.h.angell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Neuqq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A place like Recurse Center with a stipend.  2 - 6 months of solo work would be enough time to prototype virtually anything.  I think everyone here just needs more time to work and it's difficult to do that with a day job\/family\/financial obligations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1658998126.031659",
        "client_msg_id": "5e1c0aea-6458-4652-8bf3-eb067e1965a1",
        "text": "2 - 6 months is enough time to develop a prototype if you already know what needs to be built. But that's not the problem I (and many others) have. The problem is _figuring out_ what needs to be built — design work, rather than \"coding\" work. Finding the right design for a programming environment could take _years_ (evidence: I've already spent several years on this, and <@U6KQ2S410> has spent several decades). A small fraction of that time would be coding, but most of it would be designing. IMO design work is the main thing our community should aim to support.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5\/m=q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2 - 6 months is enough time to develop a prototype if you already know what needs to be built. But that's not the problem I (and many others) have. The problem is "
                            },
                            {
                                "type": "text",
                                "text": "figuring out",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what needs to be built — design work, rather than \"coding\" work. Finding the right design for a programming environment could take "
                            },
                            {
                                "type": "text",
                                "text": "years",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (evidence: I've already spent several years on this, and "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " has spent several decades). A small fraction of that time would be coding, but most of it would be designing. IMO design work is the main thing our community should aim to support."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1659007577.549499",
        "client_msg_id": "72d32a1c-79fe-4129-aafe-19c1bc9ebe09",
        "text": "This video has 4 short demos from such projects: <https:\/\/youtu.be\/Q61dh87WGrE>\n(Lamdu, Dark, Hazel, Lisperanto)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/Q61dh87WGrE",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Q61dh87WGrE\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Q61dh87WGrE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Projectional Functional Demos\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/Q61dh87WGrE",
                "fallback": "YouTube Video: Projectional Functional Demos",
                "title": "Projectional Functional Demos",
                "title_link": "https:\/\/youtu.be\/Q61dh87WGrE",
                "author_name": "Yair Chuchem",
                "author_link": "https:\/\/www.youtube.com\/c\/yairchu",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F\/P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This video has 4 short demos from such projects: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/Q61dh87WGrE"
                            },
                            {
                                "type": "text",
                                "text": "\n(Lamdu, Dark, Hazel, Lisperanto)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1659013950.493349",
        "client_msg_id": "bb6061a5-9fdb-4b3d-b8a2-1804e5bc7344",
        "text": "<@UCGAK10LS> I think that it's not necessary to get stuck on environment design right away (perfect is one of the enemies of WIAN). It's better to just get started with a suboptimal environment, then identify it's (concrete) limitations and fix those. After a while, some of the design will fall out for free out of the experience - at which point, one can rethink the environment to increase its cohesion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Kn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " I think that it's not necessary to get stuck on environment design right away (perfect is one of the enemies of WIAN). It's better to just get started with a suboptimal environment, then identify it's (concrete) limitations and fix those. After a while, some of the design will fall out for free out of the experience - at which point, one can rethink the environment to increase its cohesion."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U03RH5DFJ57"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02PDVC9CNT",
        "type": "message",
        "ts": "1659015654.133049",
        "client_msg_id": "88701355-3639-433d-9532-eb5b4488e6e8",
        "text": "something my art\/tech friends and I do that helps us move from idea -&gt; prototype -&gt; more has been a pretty banal but powerful ritual we call story club. At the basis, a weekly zoom share out of a story (read: really anything, big or small, that exists in a sharable state) from everyone there that the only requirement for is that it was worked on inside that week. Then everyone goes around and shares an inspiratory item\/idea that they found that week, with the goal being to spark discussion and to bring ideas to the front of mind for the following weeks work. Recently we have been making every other weeks meeting a working meeting, gathering in my apartment a few hours before the call for breakfast and to work in tandem.\n\nThat’s all to say, I’d love to see something similar in this space, and I understand that FoC projects do require a good bit of thought\/execution time, maybe such a club could put people into a place where they could then go to recurse and run up a pretty legit prototype",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "735e4c98d276",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-07\/2834416174224_735e4c98d276cb0b0122_72.jpg",
            "first_name": "yeT",
            "real_name": "yeT",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jacob.t.wright",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B46",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "something my art\/tech friends and I do that helps us move from idea -> prototype -> more has been a pretty banal but powerful ritual we call story club. At the basis, a weekly zoom share out of a story (read: really anything, big or small, that exists in a sharable state) from everyone there that the only requirement for is that it was worked on inside that week. Then everyone goes around and shares an inspiratory item\/idea that they found that week, with the goal being to spark discussion and to bring ideas to the front of mind for the following weeks work. Recently we have been making every other weeks meeting a working meeting, gathering in my apartment a few hours before the call for breakfast and to work in tandem.\n\nThat’s all to say, I’d love to see something similar in this space, and I understand that FoC projects do require a good bit of thought\/execution time, maybe such a club could put people into a place where they could then go to recurse and run up a pretty legit prototype"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1659015936.984039",
        "client_msg_id": "ea3b385f-07dd-431d-a129-a0b2e0d93ac1",
        "text": "<@U02PDVC9CNT> which changes would be required to <#C0120A3L30R|two-minute-week> to be closer to what you describe?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M\/j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02PDVC9CNT"
                            },
                            {
                                "type": "text",
                                "text": " which changes would be required to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": " to be closer to what you describe?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02PDVC9CNT",
        "type": "message",
        "ts": "1659019540.405749",
        "client_msg_id": "1c3d7d5c-539c-44be-b636-3d3210756e07",
        "text": "I think an element of synchronicity, maybe a sort of historic sharing log, some sort of template of [shared thing: thing, inspiring object: thing]. Maybe a record of projects shared with their entries, allowing folks to see what other people are working on and the progress made. Maybe an associated gather\/zoom setup could be helpful for working days",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "735e4c98d276",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-07\/2834416174224_735e4c98d276cb0b0122_72.jpg",
            "first_name": "yeT",
            "real_name": "yeT",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jacob.t.wright",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Mvjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think an element of synchronicity, maybe a sort of historic sharing log, some sort of template of [shared thing: thing, inspiring object: thing]. Maybe a record of projects shared with their entries, allowing folks to see what other people are working on and the progress made. Maybe an associated gather\/zoom setup could be helpful for working days"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U014WA16VNJ",
        "type": "message",
        "ts": "1659026912.148189",
        "client_msg_id": "680F6577-58DC-4472-A8DA-0C72E9365E9D",
        "text": "I’m writing a paper on the notion of “digital objects” and would _seriously_ appreciate any papers\/sources that explore this idea (the notion of digital “things” in general, not OOP-specific). The notion of an “object” is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance. \n\nI have many thoughts on the significance of the question, and have developed a tentative theory of digital objects that I think is well supported and useful. But at the moment I’m just trying to gather more literature and perspectives (as in, _your perspectives!)_.\n\nA few related phrasings to the question that I’ve seen around: In what ways do digital things exist? What is the nature of digital “stuff”, What defines a computational entity?, etc. While “object” is really the proper term here, there are others that get used often like entity, item, thing, or unit.\n\nSome sources that explore this question:\n<https:\/\/firstmonday.org\/ojs\/index.php\/fm\/article\/view\/3033\/2564|A theory of digital objects>\n<https:\/\/www.upress.umn.edu\/book-division\/books\/on-the-existence-of-digital-objects|On the existence of digital objects>\n<https:\/\/web.p.ebscohost.com\/abstract?direct=true&amp;profile=ehost&amp;scope=site&amp;authtype=crawler&amp;jrnl=02767783&amp;AN=141906418&amp;h=1gY%2bZWdrqJ%2bzDGGlCqqjp1Khf2LKSNFhTdz8biZlD5L%2faPuiaHTRwlWtEQS32sXaipdz2Yq50hc3bqOhGMkcRQ%3d%3d&amp;crl=c&amp;resultNs=AdminWebAuth&amp;resultLocal=ErrCrlNotAuth&amp;crlhashurl=login.aspx%3fdirect%3dtrue%26profile%3dehost%26scope%3dsite%26authtype%3dcrawler%26jrnl%3d02767783%26AN%3d141906418|Theorising the digital object>\n\nand for reference here are wiki pages for <https:\/\/en.wikipedia.org\/wiki\/Object_(computer_science)|objects (in computer science)> and <https:\/\/plato.stanford.edu\/entries\/object\/|objects (in philosophy)>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "808c371ba009",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-15\/7281936611971_808c371ba00918560d75_72.jpg",
            "first_name": "Orion",
            "real_name": "Orion Reed",
            "display_name": "Orion Reed",
            "team": "T5TCAFTA9",
            "name": "orionreedt",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659026912.148189",
        "reply_count": 12,
        "reply_users_count": 7,
        "latest_reply": "1659283995.504329",
        "reply_users": [
            "U0378MDUG1Y",
            "U03B14DUZSA",
            "UCGAK10LS",
            "UJZS8UUJV",
            "UJBAJNFLK",
            "U014WA16VNJ",
            "U03LT7540HZ"
        ],
        "replies": [
            {
                "user": "U0378MDUG1Y",
                "ts": "1659029424.887269"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1659044592.522839"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1659059298.709079"
            },
            {
                "user": "UJZS8UUJV",
                "ts": "1659064881.141089"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1659088169.936569"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1659096680.470559"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1659097009.608069"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1659098373.495089"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1659099692.609849"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1659120569.529409"
            },
            {
                "user": "U03LT7540HZ",
                "ts": "1659204714.636529"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1659283995.504329"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pY6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m writing a paper on the notion of “digital objects” and would "
                            },
                            {
                                "type": "text",
                                "text": "seriously",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " appreciate any papers\/sources that explore this idea (the notion of digital “things” in general, not OOP-specific). The notion of an “object” is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI have many thoughts on the significance of the question, and have developed a tentative theory of digital objects that I think is well supported and useful. But at the moment I’m just trying to gather more literature and perspectives (as in, "
                            },
                            {
                                "type": "text",
                                "text": "your perspectives!)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nA few related phrasings to the question that I’ve seen around: In what ways do digital things exist? What is the nature of digital “stuff”, What defines a computational entity?, etc. While “object” is really the proper term here, there are others that get used often like entity, item, thing, or unit."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nSome sources that explore this question:"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/firstmonday.org\/ojs\/index.php\/fm\/article\/view\/3033\/2564",
                                "text": "A theory of digital objects"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.upress.umn.edu\/book-division\/books\/on-the-existence-of-digital-objects",
                                "text": "On the existence of digital objects"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/web.p.ebscohost.com\/abstract?direct=true&profile=ehost&scope=site&authtype=crawler&jrnl=02767783&AN=141906418&h=1gY%2bZWdrqJ%2bzDGGlCqqjp1Khf2LKSNFhTdz8biZlD5L%2faPuiaHTRwlWtEQS32sXaipdz2Yq50hc3bqOhGMkcRQ%3d%3d&crl=c&resultNs=AdminWebAuth&resultLocal=ErrCrlNotAuth&crlhashurl=login.aspx%3fdirect%3dtrue%26profile%3dehost%26scope%3dsite%26authtype%3dcrawler%26jrnl%3d02767783%26AN%3d141906418",
                                "text": "Theorising the digital object"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "and for reference here are wiki pages for "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Object_(computer_science)",
                                "text": "objects (in computer science)"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/plato.stanford.edu\/entries\/object\/",
                                "text": "objects (in philosophy)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1659029424.887269",
        "client_msg_id": "E46DC880-3293-4921-968A-BDC7A94D7649",
        "text": "Maybe this essay is loosely related? <https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations|https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "attachments": [
            {
                "from_url": "https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations",
                "image_url": "https:\/\/dz2cdn4.dzone.com\/storage\/article-thumb\/11113083-thumb.jpg",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 430622,
                "service_icon": "https:\/\/dz2cdn3.dzone.com\/themes\/dz20\/images\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations",
                "fallback": "dzone.com: Abstraction Tiers of Notations (Part 1) - DZone Java",
                "text": "In this first part of the series, I’ll discuss well-defined tiers; the next tier will be the subject of the separate article as it is more controversial.",
                "title": "Abstraction Tiers of Notations (Part 1) - DZone Java",
                "title_link": "https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations",
                "service_name": "dzone.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wMEde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe this essay is loosely related? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations",
                                "text": "https:\/\/dzone.com\/articles\/abstraction-tiers-of-notations"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02JQA5FY5C",
        "type": "message",
        "ts": "1659037118.420929",
        "client_msg_id": "22d58780-fc7e-47be-9bcc-2077a4bef57f",
        "text": "my project is Lisperanto <https:\/\/uprun.github.io\/lisperanto\/> , but as soon as you create any structural editor  you can keep track of changes in the code and refresh function calls whenever there is a change, propagating it to the root calls for me it is a special Sandbox function",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0294ce89c528",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-06-14\/7298850430720_0294ce89c5288635edbd_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "geraclion",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tKU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my project is Lisperanto "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/uprun.github.io\/lisperanto\/"
                            },
                            {
                                "type": "text",
                                "text": " , but as soon as you create any structural editor  you can keep track of changes in the code and refresh function calls whenever there is a change, propagating it to the root calls for me it is a special Sandbox function"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659043943.720679",
        "client_msg_id": "447ddb72-b40c-4b6c-8346-eb8ae803ecde",
        "text": "String diagrams come to mind <https:\/\/ncatlab.org\/nlab\/show\/string+diagram>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658922038.027239",
        "parent_user_id": "U018S42NMMM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wBKh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "String diagrams come to mind "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ncatlab.org\/nlab\/show\/string+diagram"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03B14DUZSA",
        "type": "message",
        "ts": "1659044592.522839",
        "client_msg_id": "6c978da3-5683-478e-a227-fc5233ba6df2",
        "text": "It's difficult to pin down the meaning of 'object' in a digital sense because in many ways it is used as a term of art, and it doesn't seem like the philosophers are in agreement in any case. Objects can be best defined by differentiating them from data, where objects are behavioral while data must be altered by external procedures, as elaborated in <https:\/\/dl.acm.org\/doi\/10.1145\/1640089.1640133|On understanding data abstraction, revisited>, <https:\/\/dl.acm.org\/doi\/10.1145\/2509578.2514738|The power of interoperability: why objects are inevitable>, and \"Object Thinking\" by David West. OOP muddies the waters with notions like inheritance and classes, but is still centered around objects as the fundamental unit of computing. You can have objects like this in a language that isn't OOP (as many do, however clumsily), but the origins of OOP were centered around the philosophical notion of object as Dan Ingalls puts it in <https:\/\/www.cs.virginia.edu\/~evans\/cs655\/readings\/smalltalk.html|Design Principles Behind Smalltalk>:\n&gt;  The mind observes a vast universe of experience, both immediate and recorded. One can derive a sense of oneness with the universe simply by letting this experience be, just as it is. However, if one wishes to participate, literally to _take a part_, in the universe, one must draw distinctions. In so doing one identifies an object in the universe, and simultaneously all the rest becomes not-that-object. Distinction by itself is a start, but the process of distinguishing does not get any easier. Every time you want to talk about \"that chair over there\", you must repeat the entire processes of distinguishing that chair. This is where the act of reference comes in: we can associate a unique identifier with an object, and, from that time on, only the mention of that identifier is necessary to refer to the original object.\nSo perhaps the goal of OOP is to facilitate the primordial meaningless goo of bits and bytes into well-behaved and understandable objects. Brad Cox writes in <https:\/\/www.researchgate.net\/publication\/3246772_Planning_the_software_industrial_revolution|Planning the software industrial revolution>:\n&gt; What does any adjective mean in this murky swamp we call software? No one is confused when adjectives like `small' or `fast' mean entirely different things in nuclear physics, gardening, and geology. But in this murky domain of intangible abstractions, it is all too easy to lose your bearings, to misunderstand the context, to confuse the very small with the extremely large.[...]\n&gt; Such confusion is not surprising. The denizens of the software domain, from the tiniest expression to the largest application, are as intangible as any ghost. And because we invent them all from first principles, everything we encounter there is unique and unfamiliar, composed of components that have never been seen before and will never be seen again, and that obey laws that don't generalize to future encounters. Software is a place where dreams are planted and nightmares harvested, an abstract, mystical swamp where terrible demons compete with magical panaceas, a world of werewolves and silver bullets. As long all we can know for certain is the code we ourselves wrote during the last week or so, mystical belief will reign over quantifiable reason. Terms like `computer science' and `software engineering' will remain oxymorons -- at best, content-free twaddle spawned of wishful thinking and, at worst, a cruel and selfish fraud on the consumers who pay our salaries.\n&gt; In the broadest sense, object-oriented refers to an objective, not a technology for achieving it. It means wielding all the tools we can muster, from well-proven antiques like Cobol to missing ones like specification languages, to enable our consumers by letting them reason about our products via the common-sense skills we all use to understand tangible objects.\nSo, what is an object in a computer, a digital thing? It is philosophy come to life in a metaphysical tool, a structure of consciousness reproduced as a model, which can be understood as an object to other object-speaking agents through what it does.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7358a16bdea5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-02\/4314864832259_7358a16bdea535168748_72.png",
            "first_name": "Riley",
            "real_name": "Riley Stewart",
            "display_name": "Riley Stewart",
            "team": "T5TCAFTA9",
            "name": "me1307",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XVb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's difficult to pin down the meaning of 'object' in a digital sense because in many ways it is used as a term of art, and it doesn't seem like the philosophers are in agreement in any case. Objects can be best defined by differentiating them from data, where objects are behavioral while data must be altered by external procedures, as elaborated in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/1640089.1640133",
                                "text": "On understanding data abstraction, revisited"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/10.1145\/2509578.2514738",
                                "text": "The power of interoperability: why objects are inevitable"
                            },
                            {
                                "type": "text",
                                "text": ", and \"Object Thinking\" by David West. OOP muddies the waters with notions like inheritance and classes, but is still centered around objects as the fundamental unit of computing. You can have objects like this in a language that isn't OOP (as many do, however clumsily), but the origins of OOP were centered around the philosophical notion of object as Dan Ingalls puts it in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.virginia.edu\/~evans\/cs655\/readings\/smalltalk.html",
                                "text": "Design Principles Behind Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The mind observes a vast universe of experience, both immediate and recorded. One can derive a sense of oneness with the universe simply by letting this experience be, just as it is. However, if one wishes to participate, literally to "
                            },
                            {
                                "type": "text",
                                "text": "take a part",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", in the universe, one must draw distinctions. In so doing one identifies an object in the universe, and simultaneously all the rest becomes not-that-object. Distinction by itself is a start, but the process of distinguishing does not get any easier. Every time you want to talk about \"that chair over there\", you must repeat the entire processes of distinguishing that chair. This is where the act of reference comes in: we can associate a unique identifier with an object, and, from that time on, only the mention of that identifier is necessary to refer to the original object."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So perhaps the goal of OOP is to facilitate the primordial meaningless goo of bits and bytes into well-behaved and understandable objects. Brad Cox writes in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.researchgate.net\/publication\/3246772_Planning_the_software_industrial_revolution",
                                "text": "Planning the software industrial revolution"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does any adjective mean in this murky swamp we call software? No one is confused when adjectives like `small' or `fast' mean entirely different things in nuclear physics, gardening, and geology. But in this murky domain of intangible abstractions, it is all too easy to lose your bearings, to misunderstand the context, to confuse the very small with the extremely large.[...]\nSuch confusion is not surprising. The denizens of the software domain, from the tiniest expression to the largest application, are as intangible as any ghost. And because we invent them all from first principles, everything we encounter there is unique and unfamiliar, composed of components that have never been seen before and will never be seen again, and that obey laws that don't generalize to future encounters. Software is a place where dreams are planted and nightmares harvested, an abstract, mystical swamp where terrible demons compete with magical panaceas, a world of werewolves and silver bullets. As long all we can know for certain is the code we ourselves wrote during the last week or so, mystical belief will reign over quantifiable reason. Terms like `computer science' and `software engineering' will remain oxymorons -- at best, content-free twaddle spawned of wishful thinking and, at worst, a cruel and selfish fraud on the consumers who pay our salaries.\nIn the broadest sense, object-oriented refers to an objective, not a technology for achieving it. It means wielding all the tools we can muster, from well-proven antiques like Cobol to missing ones like specification languages, to enable our consumers by letting them reason about our products via the common-sense skills we all use to understand tangible objects."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, what is an object in a computer, a digital thing? It is philosophy come to life in a metaphysical tool, a structure of consciousness reproduced as a model, which can be understood as an object to other object-speaking agents through what it does."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UJZS8UUJV",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1659047200.864989",
        "client_msg_id": "0d4aea12-3f26-498f-864f-c4a6737f3f26",
        "text": "Sorin Lerner has a blocks-kind-of prototype for proofs in natural deduction. It's called \"Polymorphic Blocks\". Here is a link to a site where he talks about it: <https:\/\/cseweb.ucsd.edu\/~lerner\/pg.html> .",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658922038.027239",
        "parent_user_id": "U018S42NMMM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LOg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorin Lerner has a blocks-kind-of prototype for proofs in natural deduction. It's called \"Polymorphic Blocks\". Here is a link to a site where he talks about it: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cseweb.ucsd.edu\/~lerner\/pg.html"
                            },
                            {
                                "type": "text",
                                "text": " ."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U018S42NMMM"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1659049090.517109",
        "client_msg_id": "9C0F27EF-4A0D-4D45-8F68-2E2334FC30C3",
        "text": "<@U02028JHX37> FWIW, because I've mostly been designing a language, and not an app, I've not actually needed to build any working prototypes to complete my design iterations. It's always been sufficient for me to simply write down a small program that embodies a design idea, and manually evaluate its syntax and semantics. That saves 100+ hours building a parser, interpreter, and\/or IDE.\n\nOnce I've settled on a complete set of language constructs (and a syntax) that can be used to build complex programs, I’m sure I will need to build an interpreter. But that would be at a very late stage in the design process. So it's really not _coding_ that has been slowing me down. I've almost never gotten “stuck” during my design work such that I've needed to write an interpreter to proceed.\n\nPeople who are doing _interaction_ design, e.g. designing structured editors, would obviously need to write code more frequently so that they can test out the interactions they have in mind. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HL3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " FWIW, because I've mostly been designing a language, and not an app, I've not actually needed to build any working prototypes to complete my design iterations. It's always been sufficient for me to simply write down a small program that embodies a design idea, and manually evaluate its syntax and semantics. That saves 100+ hours building a parser, interpreter, and\/or IDE."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Once I've settled on a complete set of language constructs (and a syntax) that can be used to build complex programs, I’m sure I will need to build an interpreter. But that would be at a very late stage in the design process. So it's really not "
                            },
                            {
                                "type": "text",
                                "text": "coding",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that has been slowing me down. I've almost never gotten “stuck” during my design work such that I've needed to write an interpreter to proceed."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nPeople who are doing "
                            },
                            {
                                "type": "text",
                                "text": "interaction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " design, e.g. designing structured editors, would obviously need to write code more frequently so that they can test out the interactions they have in mind. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1659059298.709079",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1659061005.000000"
        },
        "client_msg_id": "b6d30f80-75c7-4c91-8b42-bdc751b14caf",
        "text": "&gt; The notion of an “object” has received surprisingly few treatments in the context of computing\nIMO the software industry's blindness to what it means to be an \"object\" (in our everyday lives) is a major contributor to the stagnation in PLs that we are experiencing.\n\nFrom my perspective, objects are immortal once they appear, i.e. they can never be destroyed. The rationale: we can still talk about Alan Turing, or the 2001 World Trade Center, even though neither of those things have a physical body anymore. Thus, they still exist as objects _in our minds._ The fact that they continue to have an influence in the world — associations continue to be made between them and other things — means that they are not really \"gone\".\n\nWhilst such objects can't be destroyed, they can be _forgotten_. Computers should be able to model this phenomenon. Object-oriented languages _kind of_ do this, in that objects are garbage-collected only when all references to them are released, i.e. you can't destroy an object that somebody else is still \"thinking about\". But they conflate something important: objects are given \"attributes\", and those attributes cannot be forgotten (cleared from memory) until the object itself is forgotten. Crucially, attributes are the only thing that actually consumes memory! Thus, what OOP seems to _really_ be garbage-collecting is attributes, not object themselves. But it's _really weird_ to manage the lifetimes of attributes (i.e. the lifetimes of relationships between things) by bundling them into a \"group\" that we call an object. After all, they make no contribution to the object's identity — in an OO language, the identity of an object is given by its location in memory.\n\nIn conclusion: I think \"objects\" should be considered immortal (once they appear), and not \"contain\" any relationships. Instead, relationships should be a separate construct, similar to how \"relational languages\" (SQL, Datalog...) do it. The open question is: what is the right way to model the _lifetimes_ of relationships, such that relationships can become invalid and be \"garbage-collected\"? Neither SQL nor Datalog offer a compelling model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0eJ",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The notion of an “object” has received surprisingly few treatments in the context of computing"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIMO the software industry's blindness to what it means to be an \"object\" (in our everyday lives) is a major contributor to the stagnation in PLs that we are experiencing.\n\nFrom my perspective, objects are immortal once they appear, i.e. they can never be destroyed. The rationale: we can still talk about Alan Turing, or the 2001 World Trade Center, even though neither of those things have a physical body anymore. Thus, they still exist as objects "
                            },
                            {
                                "type": "text",
                                "text": "in our minds. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "The fact that they continue to have an influence in the world — associations continue to be made between them and other things — means that they are not really \"gone\".\n\nWhilst such objects can't be destroyed, they can be "
                            },
                            {
                                "type": "text",
                                "text": "forgotten",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Computers should be able to model this phenomenon. Object-oriented languages "
                            },
                            {
                                "type": "text",
                                "text": "kind of ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "do this, in that objects are garbage-collected only when all references to them are released, i.e. you can't destroy an object that somebody else is still \"thinking about\". But they conflate something important: objects are given \"attributes\", and those attributes cannot be forgotten (cleared from memory) until the object itself is forgotten. Crucially, attributes are the only thing that actually consumes memory! Thus, what OOP seems to "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be garbage-collecting is attributes, not object themselves. But it's "
                            },
                            {
                                "type": "text",
                                "text": "really weird",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to manage the lifetimes of attributes (i.e. the lifetimes of relationships between things) by bundling them into a \"group\" that we call an object. After all, they make no contribution to the object's identity — in an OO language, the identity of an object is given by its location in memory.\n\nIn conclusion: I think \"objects\" should be considered immortal (once they appear), and not \"contain\" any relationships. Instead, relationships should be a separate construct, similar to how \"relational languages\" (SQL, Datalog...) do it. The open question is: what is the right way to model the "
                            },
                            {
                                "type": "text",
                                "text": "lifetimes",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of relationships, such that relationships can become invalid and be \"garbage-collected\"? Neither SQL nor Datalog offer a compelling model."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJZS8UUJV",
        "type": "message",
        "ts": "1659064881.141089",
        "edited": {
            "user": "UJZS8UUJV",
            "ts": "1659064956.000000"
        },
        "client_msg_id": "be363447-70d1-439f-b55d-414eec9fbc33",
        "text": "&gt;  The notion of an “object” is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance.\nThe philosophical notion of an object as applied to the context of computing casts quite a wide net. The notions of a “digital object” or similar terms as treated in the links you and Riley provided mostly seem considerably narrower. Do you think  your tentative theory will start with a narrower category as a premise and then go from there? Or is the goal to apply the philosophical notion to the context of computing in order to discover the category?\n\n(Unfortunately I don’t think I have any more reference points to contribute.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g62b260c347a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/962b260c347a11e19b0fdce4a97a5d49.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Luke",
            "real_name": "Luke Persola",
            "display_name": "Luke Persola",
            "team": "T5TCAFTA9",
            "name": "lukepersola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/GT",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The notion of an “object” is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The philosophical notion of an object as applied to the context of computing casts quite a wide net. The notions of a “digital object” or similar terms as treated in the links you and Riley provided mostly seem considerably narrower. Do you think  your tentative theory will start with a narrower category as a premise and then go from there? Or is the goal to apply the philosophical notion to the context of computing in order to discover the category?\n\n(Unfortunately I don’t think I have any more reference points to contribute.)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]