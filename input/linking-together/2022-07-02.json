[
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1656755068.057889",
        "edited": {
            "user": "UJFN50C00",
            "ts": "1656755151.000000"
        },
        "client_msg_id": "C42A0523-DE24-4A0E-ADCE-840F959A761D",
        "text": "Gilad Bracha Shared this Perspektive on objects and execution\/executables \n<https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864|https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864>\n\nI am Grateful for the effort. But I’d saddens me also a bit because I feel that Gilad is trying to make a case for concepts like objects beyond certain reference frames like programming languages, like Java. But because the way “our” programming culture is, more programmers would rather connect the notion of an object to Java classes\/instances rather than objects from “The art of the meta object protocol”. Similarly with “patterns” .  \nIf we assume that everything evolves in a kind of dialectic manner I’m curious if there is a antithesis to objects(functions\/data?) and how the synthesis looks like.\n\nWhich (again) reminded me of that Alan Kay \/ Rich Hickey Discussion : How ever data could be a bad idea:\n<https:\/\/news.ycombinator.com\/item?id=11941656|https:\/\/news.ycombinator.com\/item?id=11941656>\n\nThere is something about these discussions that sets a tone and expectations. Like that there is a singular truth.  How can we ever have discussions again if we can not understand each other’s perspectives?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656755068.057889",
        "reply_count": 6,
        "reply_users_count": 6,
        "latest_reply": "1657300205.760179",
        "reply_users": [
            "UBN9AFS0N",
            "UCUSW7WVD",
            "U03LMRC6FFY",
            "U013ZLJARC7",
            "U03B14DUZSA",
            "U014WA16VNJ"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1656757398.641189"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1656777287.698259"
            },
            {
                "user": "U03LMRC6FFY",
                "ts": "1656783136.326529"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1656832062.069629"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1657124061.939799"
            },
            {
                "user": "U014WA16VNJ",
                "ts": "1657300205.760179"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864",
                "ts": 1656648677,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864",
                "fallback": "<https:\/\/twitter.com\/Gilad_Bracha|@Gilad_Bracha>: Nothing concentrates the mind like the prospect of an execution.  Executables are objects. Blog post at: <https:\/\/gbracha.blogspot.com\/2022\/06\/the-prospect-of-execution-hidden.html>",
                "text": "Nothing concentrates the mind like the prospect of an execution.  Executables are objects. Blog post at: <https:\/\/gbracha.blogspot.com\/2022\/06\/the-prospect-of-execution-hidden.html>",
                "author_name": "Gilad Bracha",
                "author_link": "https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/605609749\/IMG_0780_normal.jpg",
                "author_subname": "@Gilad_Bracha",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d1Sj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gilad Bracha Shared this Perspektive on objects and execution\/executables "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864",
                                "text": "https:\/\/twitter.com\/Gilad_Bracha\/status\/1542722486348836864"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI am Grateful for the effort. But I’d saddens me also a bit because I feel that Gilad is trying to make a case for concepts like objects beyond certain reference frames like programming languages, like Java. But because the way “our” programming culture is,"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "more programmers would rather connect the notion of an object to Java classes\/instances rather than objects from “The art of the meta object protocol”. Similarly with “patterns” .  "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "If we assume that everything evolves in a kind of dialectic manner I’m curious if there is a antithesis to objects(functions\/data?) and how the synthesis looks like."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nWhich (again) reminded me of that Alan Kay \/ Rich Hickey Discussion : How ever data could be a bad idea:"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=11941656",
                                "text": "https:\/\/news.ycombinator.com\/item?id=11941656"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nThere is something about these discussions that sets a tone and expectations. Like that there is a singular truth.  How can we ever have discussions again if we can not understand each other’s perspectives?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1656757398.641189",
        "client_msg_id": "4e3c035f-f768-4eea-be35-5f1cedcf5c82",
        "text": "The venerable master Zardoz was walking with a student, Zed. Hoping to prompt the master into a discussion, Zed said \"Master, I have heard that objects are a very good thing - is this true?\" Zardoz looked pityingly at the student and replied, \"Foolish pupil - objects are merely a pitiable substitute for closures.\"\n\nChastised, Zed took leave from the master and retreated into a quiet cell in the basement of Gates Hall, intent on studying closures. Zed carefully read the 3110 course notes, and implemented an OOP language using OCaml and closures. Zed learned much, and looked forward to informing the master of this progress.\n\nOn the next walk with Zardoz, Zed attempted to impress the master by saying \"Master, I have diligently studied the matter, and now understand that objects are truly a pitiable substitute for closures.\" Zardoz responded by hitting Zed with a stick, saying \"When will you learn? Closures are merely a pitiable substitute for objects.\"\n\nAt that moment, Zed became enlightened.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656755068.057889",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HcNS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The venerable master Zardoz was walking with a student, Zed. Hoping to prompt the master into a discussion, Zed said \"Master, I have heard that objects are a very good thing - is this true?\" Zardoz looked pityingly at the student and replied, \"Foolish pupil - objects are merely a pitiable substitute for closures.\"\n\nChastised, Zed took leave from the master and retreated into a quiet cell in the basement of Gates Hall, intent on studying closures. Zed carefully read the 3110 course notes, and implemented an OOP language using OCaml and closures. Zed learned much, and looked forward to informing the master of this progress.\n\nOn the next walk with Zardoz, Zed attempted to impress the master by saying \"Master, I have diligently studied the matter, and now understand that objects are truly a pitiable substitute for closures.\" Zardoz responded by hitting Zed with a stick, saying \"When will you learn? Closures are merely a pitiable substitute for objects.\"\n\nAt that moment, Zed became enlightened."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U016VUZGUUQ",
                    "U013ZLJARC7",
                    "U012RSHGTFY",
                    "UJBAJNFLK"
                ],
                "count": 4
            },
            {
                "name": "smile",
                "users": [
                    "UE6EFEPTQ",
                    "UA14TGLTC",
                    "U02MXPT5UDC",
                    "U014WA16VNJ"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1656777287.698259",
        "client_msg_id": "08af2d91-9303-4a1f-ae4e-a2693696df04",
        "text": "It's always a good time to reread <https:\/\/www.cs.utexas.edu\/~wcook\/Drafts\/2009\/essay.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656755068.057889",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GOR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's always a good time to reread "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.utexas.edu\/~wcook\/Drafts\/2009\/essay.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LMRC6FFY",
        "type": "message",
        "ts": "1656783136.326529",
        "client_msg_id": "79c5c10b-084d-44ac-a026-667524d2f15a",
        "text": "Related (and funny): _Execution in the kingdom of nouns_: <http:\/\/steve-yegge.blogspot.com\/2006\/03\/execution-in-kingdom-of-nouns.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3c78255a0c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3c78255a0c22e1e1bfaa6f927604b52d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "Prithvi",
            "real_name": "Prithvi Prabhu",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "prithvi.prabhu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656755068.057889",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JXC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Related (and funny): "
                            },
                            {
                                "type": "text",
                                "text": "Execution in the kingdom of nouns",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/steve-yegge.blogspot.com\/2006\/03\/execution-in-kingdom-of-nouns.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1656799112.623639",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1656799600.000000"
        },
        "client_msg_id": "e7cd587c-5ee5-4f8a-87c7-002fccc86eaf",
        "text": "Here's something interesting from LtU:\n\n*\"Basic building blocks of a programming language\"*\n\n<http:\/\/lambda-the-ultimate.org\/node\/5652>\n\nI'd comment but I've lost my account deets and can't create a new one cos the site seems broken right now.\n\nSo I'll comment here instead...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656799112.623639",
        "reply_count": 16,
        "reply_users_count": 5,
        "latest_reply": "1657224989.272229",
        "reply_users": [
            "UE6EFEPTQ",
            "UCGAK10LS",
            "UK3LH8CF5",
            "U016VUZGUUQ",
            "U013ZLJARC7"
        ],
        "replies": [
            {
                "user": "UE6EFEPTQ",
                "ts": "1656799294.433589"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1656799861.719689"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1656886866.166079"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657009037.060879"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657009319.507569"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657009493.418189"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1657024955.284039"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657032251.475909"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657032384.148089"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657035389.814059"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657038294.684759"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1657133128.284989"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657198328.490629"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657198575.540959"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1657224950.289039"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1657224989.272229"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tU=\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's something interesting from LtU:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "\"Basic building blocks of a programming language\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/lambda-the-ultimate.org\/node\/5652"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'd comment but I've lost my account deets and can't create a new one cos the site seems broken right now.\n\nSo I'll comment here instead..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1656799294.433589",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1656799747.000000"
        },
        "client_msg_id": "3a8485ae-15cc-4584-8fd5-8867e50b4736",
        "text": "I agree on the three elements suggested as fundamental PL building blocks: from memory (the site seems to be broken), creating new data from old, structuring stuff, and pattern-matching - the latter being split into creating types and filling slots in a template",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656799112.623639",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4o3N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree on the three elements suggested as fundamental PL building blocks: from memory (the site seems to be broken), creating new data from old, structuring stuff, and pattern-matching - the latter being split into creating types and filling slots in a template"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1656799861.719689",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1656799927.000000"
        },
        "client_msg_id": "1aca19ad-16c1-4cc4-ac19-7c0396dbbcb7",
        "text": "While the site is struggling, I managed to capture the text:\n\n&gt; Basic building blocks of a programming language\n&gt; I've tried to understand category theory, but while I can't say I've got the mathematical skills to understand it, I think I kind of grasp what it intends to do. It is basically a way of building bigger things out of smaller things as flexibly as possible.\n&gt; Designing my language I get inspired by this thought, and started to think along those lines. This means trying to realize what are the basic building blocks from which to build larger blocks, i.e. from where do I start?\n&gt; In an attempt to figure this out, I thought about what languages typically tries to do. What I found so far are:\n&gt; 1. Calculate data, i.e. from data produce some other data, i.e. functions\n&gt; 2. Organize data into hierarchy (lists, structs, maps, let's call these types just to have some name)\n&gt; 3. Find patterns in data\n&gt; The idea here is to make these elements as versatile as possible, so they can be combined without restriction as long as it is reasonable. Allow functions to generate other functions, hierarchies and\/or patterns. Allow hierarchies to contain functions, other hierarchies and\/or patterns. Allow patterns to describe functions, hierarchies and\/or other patterns.\n&gt; First of all, do you agree that these three could be used as basic building blocks, or is there something missing or wrong?\n&gt; Secondly, the pattern. I can see patterns used in two that seems like distinctly different ways. One is that you write a template like code, which you could see as a patter\n&gt; n. You insert a few values and out comes a type, a function, or something. Another way of using it would be to say this is an expected pattern with some variables in it, th\n&gt; en apply data to it, and if it matches the pattern you get the value of the variables the pattern contained.\n&gt; Perhaps those two cases of patterns should be named differently? Any thoughts on this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656799112.623639",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yLi6Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While the site is struggling, I managed to capture the text:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basic building blocks of a programming language\nI've tried to understand category theory, but while I can't say I've got the mathematical skills to understand it, I think I kind of grasp what it intends to do. It is basically a way of building bigger things out of smaller things as flexibly as possible.\nDesigning my language I get inspired by this thought, and started to think along those lines. This means trying to realize what are the basic building blocks from which to build larger blocks, i.e. from where do I start?\nIn an attempt to figure this out, I thought about what languages typically tries to do. What I found so far are:\n1. Calculate data, i.e. from data produce some other data, i.e. functions\n2. Organize data into hierarchy (lists, structs, maps, let's call these types just to have some name)\n3. Find patterns in data\nThe idea here is to make these elements as versatile as possible, so they can be combined without restriction as long as it is reasonable. Allow functions to generate other functions, hierarchies and\/or patterns. Allow hierarchies to contain functions, other hierarchies and\/or patterns. Allow patterns to describe functions, hierarchies and\/or other patterns.\nFirst of all, do you agree that these three could be used as basic building blocks, or is there something missing or wrong?\nSecondly, the pattern. I can see patterns used in two that seems like distinctly different ways. One is that you write a template like code, which you could see as a patter\nn. You insert a few values and out comes a type, a function, or something. Another way of using it would be to say this is an expected pattern with some variables in it, th\nen apply data to it, and if it matches the pattern you get the value of the variables the pattern contained.\nPerhaps those two cases of patterns should be named differently? Any thoughts on this?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]