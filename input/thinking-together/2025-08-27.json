[
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1756310381.772759",
        "client_msg_id": "15b6bee7-2cb4-4a38-a3ab-4da3caea207b",
        "text": "Inspired by conversation last night at the virtual meetup, <https:\/\/eli.li\/to-the-surprise-of-literally-no-one-im-working-on-implementing-a-programming-language-all-my-own|I wrote a blog post to introduce the toy language I’ve been working on.>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1756347770.237109",
        "reply_users": [
            "UC2A2ARPT",
            "UMQ6LR9NZ",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1756311426.824549"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1756311791.870299"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1756322106.908129"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1756322394.520429"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1756322498.231949"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1756347770.237109"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/eli.li\/to-the-surprise-of-literally-no-one-im-working-on-implementing-a-programming-language-all-my-own",
                "service_icon": "https:\/\/cdn.blot.im\/blog_7b49675ad4964db5a10b2e055c3fc5d8\/_avatars\/46f6db9e-6ed0-4124-9580-7db796f1cacd.jpg",
                "thumb_url": "https:\/\/cdn.blot.im\/blog_7b49675ad4964db5a10b2e055c3fc5d8\/_avatars\/46f6db9e-6ed0-4124-9580-7db796f1cacd.jpg",
                "thumb_width": 467,
                "thumb_height": 467,
                "id": 1,
                "original_url": "https:\/\/eli.li\/to-the-surprise-of-literally-no-one-im-working-on-implementing-a-programming-language-all-my-own",
                "fallback": "Oatmeal - To the surprise of literally no one, I'm working on implementing a programming language all my own",
                "text": "Inspired by conversation at a recent Future of Coding event, I decided I’d write up a little something about the programming language I’ve been",
                "title": "Oatmeal - To the surprise of literally no one, I'm working on implementing a programming language all my own",
                "title_link": "https:\/\/eli.li\/to-the-surprise-of-literally-no-one-im-working-on-implementing-a-programming-language-all-my-own",
                "service_name": "eli.li"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Ie05",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Inspired by conversation last night at the virtual meetup, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/eli.li\/to-the-surprise-of-literally-no-one-im-working-on-implementing-a-programming-language-all-my-own",
                                "text": "I wrote a blog post to introduce the toy language I’ve been working on."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "U089J8FNGB1",
                    "UCUSW7WVD",
                    "U04PDG834SF",
                    "U05UK5T7LPP",
                    "U06SS0DHZD1",
                    "UJBAJNFLK"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1756311426.824549",
        "client_msg_id": "BE454E70-6BFD-4F52-9388-04EA87794027",
        "text": "\"That’s some baba yaga shit\" (affectionate)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lXolf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\""
                            },
                            {
                                "type": "text",
                                "text": "That’s some baba yaga shit"
                            },
                            {
                                "type": "text",
                                "text": "\" (affectionate)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pixel-chickadee",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "ribbit",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1756311791.870299",
        "client_msg_id": "56c0d8c4-1242-46b6-960d-10d178f90ff4",
        "text": "didn’t mention in the post that the language is called baba yaga just so that I can have `.baba` or `.yaga` files",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Amjkp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "didn’t mention in the post that the language is called baba yaga just so that I can have "
                            },
                            {
                                "type": "text",
                                "text": ".baba",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": ".yaga",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " files"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "four",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1756322106.908129",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1756322332.000000"
        },
        "client_msg_id": "2602a5d6-71d4-438c-8114-64a9c6f3f081",
        "text": "This is lovely! \n\nDid you consider some sort of separator like `|` between guards\/clauses? I've been reading Dijkstra's _Discipline_, and love the symmetry between his `if ... | ... | ... fi` and `do ... | ... | ... od` constructs. But your one liner conditionals are much harder to read than his. Particularly when (when!) you get to more than 2 cases on a line. (With 2 cases the `_` kinda saves your bacon.)\n\nThen again, Dijkstra is designing for mutation. Maybe you won't need one liners with more than 2 branches..\n\nDo you support curried functions with return types? Some potential for ambiguity there..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A5Oer",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is lovely! \n\nDid you consider some sort of separator like "
                            },
                            {
                                "type": "text",
                                "text": "|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " between guards\/clauses? I've been reading Dijkstra's "
                            },
                            {
                                "type": "text",
                                "text": "Discipline",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and love the symmetry between his "
                            },
                            {
                                "type": "text",
                                "text": "if ... | ... | ... fi",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "do ... | ... | ... od",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " constructs. But your one liner conditionals are much harder to read than his. Particularly when (when!) you get to more than 2 cases on a line. (With 2 cases the "
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " kinda saves your bacon.)\n\nThen again, Dijkstra is designing for mutation. Maybe you won't need one liners with more than 2 branches..\n\nDo you support curried functions with return types? Some potential for ambiguity there.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1756322394.520429",
        "client_msg_id": "2c6f9992-3558-4357-b13a-0163bc85a09e",
        "text": "A copy pasta from baba yaga’s docs (which you of course haven’t seen because they’re just on my computer)\n\n```### Curried Typed Functions\n\nCurried functions take one parameter at a time and return functions for partial application:\n\n```baba\n\/\/ Curried function with typed first parameter and function return type\nmul : (x: Float) -&gt; (Float -&gt; Float) -&gt; y -&gt; x * y;\ndouble : mul 2.0;          \/\/ Partial application: double : (Float -&gt; Float)\nresult : double 3.5;       \/\/ 7.0\n\n\/\/ Three-parameter curried function\nadd3 : (x: Int) -&gt; (Int -&gt; (Int -&gt; Int)) -&gt; y -&gt; z -&gt; x + y + z;\nadd5 : add3 5;             \/\/ add5 : (Int -&gt; (Int -&gt; Int))\nadd5and3 : add5 3;         \/\/ add5and3 : (Int -&gt; Int)\nresult : add5and3 2;       \/\/ 10\n```\n\n### Function Type Syntax\n\nFunction types use the syntax `(ParamType -&gt; ReturnType)`:\n\n```baba\n\/\/ Simple function type\ntransform : (x: Int) -&gt; (Int -&gt; Int) -&gt; y -&gt; x + y;\n\n\/\/ Function that returns another function\nmakeAdder : (x: Int) -&gt; (Int -&gt; Int) -&gt; y -&gt; x + y;\nadd5 : makeAdder 5;           \/\/ add5 : (Int -&gt; Int)\nresult : add5 3;              \/\/ 8\n```\nHeads up! Complex nested parameter types like (f: (Int -&gt; Int)) aren't implemented. The first parameter must use simple types like Int, Float, String, or Bool.```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O4Vkm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A copy pasta from baba yaga’s docs (which you of course haven’t seen because they’re just on my computer)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "### Curried Typed Functions\n\nCurried functions take one parameter at a time and return functions for partial application:\n\n```baba\n\/\/ Curried function with typed first parameter and function return type\nmul : (x: Float) -> (Float -> Float) -> y -> x * y;\ndouble : mul 2.0;          \/\/ Partial application: double : (Float -> Float)\nresult : double 3.5;       \/\/ 7.0\n\n\/\/ Three-parameter curried function\nadd3 : (x: Int) -> (Int -> (Int -> Int)) -> y -> z -> x + y + z;\nadd5 : add3 5;             \/\/ add5 : (Int -> (Int -> Int))\nadd5and3 : add5 3;         \/\/ add5and3 : (Int -> Int)\nresult : add5and3 2;       \/\/ 10\n```\n\n### Function Type Syntax\n\nFunction types use the syntax `(ParamType -> ReturnType)`:\n\n```baba\n\/\/ Simple function type\ntransform : (x: Int) -> (Int -> Int) -> y -> x + y;\n\n\/\/ Function that returns another function\nmakeAdder : (x: Int) -> (Int -> Int) -> y -> x + y;\nadd5 : makeAdder 5;           \/\/ add5 : (Int -> Int)\nresult : add5 3;              \/\/ 8\n```\nHeads up! Complex nested parameter types like (f: (Int -> Int)) aren't implemented. The first parameter must use simple types like Int, Float, String, or Bool."
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1756322498.231949",
        "client_msg_id": "3ac48b1e-2637-4f97-8881-9aee39b6b542",
        "text": "as for the `|` — I hadn’t considered it, mostly because I wanted to see how far I could get without having to add extra stuff like that, but I agree, especially for deeply nested `when` statements it can get kinda gnarly — I have a sort of functional `fmt` command, a la Go’s `fmt` that _mostly_ resolves the issues by enforcing some strict, more legible formatting, but I likely will need to noodle on it further",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YrOPm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as for the "
                            },
                            {
                                "type": "text",
                                "text": "|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " — I hadn’t considered it, mostly because I wanted to see how far I could get without having to add extra stuff like that, but I agree, especially for deeply nested "
                            },
                            {
                                "type": "text",
                                "text": "when",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " statements it can get kinda gnarly — I have a sort of functional "
                            },
                            {
                                "type": "text",
                                "text": "fmt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command, a la Go’s "
                            },
                            {
                                "type": "text",
                                "text": "fmt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that "
                            },
                            {
                                "type": "text",
                                "text": "mostly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " resolves the issues by enforcing some strict, more legible formatting, but I likely will need to noodle on it further"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1756347770.237109",
        "client_msg_id": "322ac565-c666-448f-87ce-73ec74d9a4cb",
        "text": "<@UCUSW7WVD> — this doesn’t include the `fmt` command because I found it to be buggier than I realized, but, <https:\/\/smallandnearlysilent.com\/baba-yaga\/|I’ve cobbled together a playground where you can actually evaluate code! >",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756310381.772759",
        "parent_user_id": "UMQ6LR9NZ",
        "attachments": [
            {
                "from_url": "https:\/\/smallandnearlysilent.com\/baba-yaga\/",
                "id": 1,
                "original_url": "https:\/\/smallandnearlysilent.com\/baba-yaga\/",
                "fallback": "Chicken-Legged House",
                "text": "Chicken-Legged House; Baba Yaga Playground",
                "title": "Chicken-Legged House",
                "title_link": "https:\/\/smallandnearlysilent.com\/baba-yaga\/",
                "service_name": "smallandnearlysilent.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RQ+vs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " — this doesn’t include the "
                            },
                            {
                                "type": "text",
                                "text": "fmt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command because I found it to be buggier than I realized, but, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/smallandnearlysilent.com\/baba-yaga\/",
                                "text": "I’ve cobbled together a playground where you can actually evaluate code! "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]