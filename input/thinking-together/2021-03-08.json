[
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615252973.136100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615260266.000000"
        },
        "client_msg_id": "49ddc907-a94e-470a-91b2-1152689199aa",
        "text": "I feel like I've been long deceived by the traditional definition of a mathematical relation as \"a set of tuples\". This is the definition used in \"relational languages\" like SQL and Prolog, but in the context of programming, it seems much more intuitive for relations to be defined by formulas (e.g. `y = x + 1` or `x + y &lt; z`), where the fundamental units of data are *variables*, not *tuples*. This is not just a cosmetic difference: you can _re-use_ variables across different formulas (e.g. `y = x + 1` and `z = 2x`), and suddenly a division of the program into \"tuples\" and \"tables\" no longer makes sense, because it obscures formulas and groups variables (columns) according to whim, not truth. Indeed, if you don't have tuples *you don't need to worry about \"keys\" and \"normalization\"* (as you do in relational DBs), because the formulas _directly_ express the dependencies between variables (columns). This leaves me deeply confused as to why in the logic &amp; relational programming community, I've never seen anyone challenging the notion of tuples. <http:\/\/minikanren.org\/|miniKanren> and <https:\/\/en.wikipedia.org\/wiki\/Constraint_programming|constraint programming> (but *NOT* \"constraint logic programming\") are the only relational language families I know of that are based on variables &amp; formulas, not tuples. (I'm not an expert in these languages, but I'm investigating them.)\n\n*Bonus fact 1:* the <https:\/\/en.wikipedia.org\/wiki\/Entity%E2%80%93attribute%E2%80%93value_model|EAV model> (popular in recent years) doesn't solve normalization problems, because sometimes you truly want a large number of variables (columns) to be interdependent, e.g. `x = 2y = 3z = 4t`. EAV still maintains the indirection of tuples and tables, it just restricts the number of variables (columns) to 3.\n\n*Bonus fact 2:* the tuple model isn't even necessary for _plain old data_, where you might argue \"there are no underlying formulas\". There is definitely still a formula involved! The tuple (1542, \"Nick\") can be expressed by the formula: `if customerID = 1542 then name = \"Nick\"`. (Of course, in a GUI you'd use a table to present this data, but presentation concerns are orthogonal to the underlying data model.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "reply_count": 63,
        "reply_users_count": 6,
        "latest_reply": "1615766771.186300",
        "reply_users": [
            "UEBG0NPDK",
            "UCGAK10LS",
            "UA14TGLTC",
            "U013ZLJARC7",
            "UJBAJNFLK",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1615256142.136500"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615256275.136700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615256340.137100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615256489.137300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615256527.137500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615256592.137700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615256801.137900"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257038.138100"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257242.138300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257412.138600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257465.138800"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257584.139000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615257662.139200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615257881.139500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615257958.139700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615257983.140000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615258046.140200"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258107.140400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258196.140600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615258322.140800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615258364.141000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615258411.141200"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258452.141400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258502.141600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615258550.141800"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258652.142500"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258667.142700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615258692.142900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615259031.143100"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1615259237.143500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615259435.143700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615261652.144300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615262098.144600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615262139.144800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615273805.149200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615277156.155400"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615281425.155900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615281605.156900"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615283591.157100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615283745.159100"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615287745.159400"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615306153.160300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1615362365.161600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615362556.161800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1615391886.162300"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1615392408.162500"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615394254.162800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615424650.166700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615425394.166900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615429729.167100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615430005.169900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615430110.172400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615430736.172600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615432621.172800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615432778.173000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615452903.173400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615617625.175800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615692598.177100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1615710818.180800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615715028.184700"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1615734322.185200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615766181.186100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1615766771.186300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "el2Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like I've been long deceived by the traditional definition of a mathematical relation as \"a set of tuples\". This is the definition used in \"relational languages\" like SQL and Prolog, but in the context of programming, it seems much more intuitive for relations to be defined by formulas (e.g. "
                            },
                            {
                                "type": "text",
                                "text": "y = x + 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "x + y < z",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), where the fundamental units of data are "
                            },
                            {
                                "type": "text",
                                "text": "variables",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not "
                            },
                            {
                                "type": "text",
                                "text": "tuples",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This is not just a cosmetic difference: you can "
                            },
                            {
                                "type": "text",
                                "text": "re-use",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " variables across different formulas (e.g. "
                            },
                            {
                                "type": "text",
                                "text": "y = x + 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "z = 2x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), and suddenly a division of the program into \"tuples\" and \"tables\" no longer makes sense, because it obscures formulas and groups variables (columns) according to whim, not truth. Indeed, if you don't have tuples "
                            },
                            {
                                "type": "text",
                                "text": "you don't need to worry about \"keys\" and \"normalization\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (as you do in relational DBs), because the formulas "
                            },
                            {
                                "type": "text",
                                "text": "directly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " express the dependencies between variables (columns). This leaves me deeply confused as to why in the logic & relational programming community, I've never seen anyone challenging the notion of tuples. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/minikanren.org\/",
                                "text": "miniKanren"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Constraint_programming",
                                "text": "constraint programming"
                            },
                            {
                                "type": "text",
                                "text": " (but "
                            },
                            {
                                "type": "text",
                                "text": "NOT",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"constraint logic programming\") are the only relational language families I know of that are based on variables & formulas, not tuples. (I'm not an expert in these languages, but I'm investigating them.)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Bonus fact 1:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Entity%E2%80%93attribute%E2%80%93value_model",
                                "text": "EAV model"
                            },
                            {
                                "type": "text",
                                "text": " (popular in recent years) doesn't solve normalization problems, because sometimes you truly want a large number of variables (columns) to be interdependent, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "x = 2y = 3z = 4t",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". EAV still maintains the indirection of tuples and tables, it just restricts the number of variables (columns) to 3.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Bonus fact 2: ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "the tuple model isn't even necessary for "
                            },
                            {
                                "type": "text",
                                "text": "plain old data",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where you might argue \"there are no underlying formulas\". There is definitely still a formula involved! The tuple (1542, \"Nick\") can be expressed by the formula: "
                            },
                            {
                                "type": "text",
                                "text": "if customerID = 1542 then name = \"Nick\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (Of course, in a GUI you'd use a table to present this data, but presentation concerns are orthogonal to the underlying data model.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615256142.136500",
        "client_msg_id": "551a7087-a0be-443c-b3ce-bfba06a0ae23",
        "text": "expressions are much more difficult to work with, since their structure is inherently variable in both length and depth",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iv6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "expressions are much more difficult to work with, since their structure is inherently variable in both length and depth"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615256275.136700",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1615256325.000000"
        },
        "client_msg_id": "314ca6e3-e988-443d-8d2d-4be105e8bb32",
        "text": "writing generic procedures for the common relational operators is a lot more work and will eventually take you to a place where you want a “common data model”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f18mU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "writing generic procedures for the common relational operators is a lot more work and will eventually take you to a place where you want a “common data model”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615256340.137100",
        "client_msg_id": "0089741c-c0eb-47a0-b4a2-a961c5f0d346",
        "text": "which will _probably_ end up looking like tuples",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fg2=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "which will "
                            },
                            {
                                "type": "text",
                                "text": "probably",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " end up looking like tuples"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615256489.137300",
        "client_msg_id": "27852591-9b49-4ab7-83c2-ddb4835e75b9",
        "text": "&gt; expressions are much more difficult to work with\nThat sounds like a UI design challenge, which I'm ready to take on :slightly_smiling_face:. They might not work in a text-file-based language, but that's no concern to me.\n\n&gt; writing generic procedures for the common relational operators is a lot more work and will eventually take you to a place where you want a “common data model”\nI don't understand this part. Are you talking about implementation concerns or something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vxx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "expressions are much more difficult to work with"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThat sounds like a UI design challenge, which I'm ready to take on "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". They might not work in a text-file-based language, but that's no concern to me.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "writing generic procedures for the common relational operators is a lot more work and will eventually take you to a place where you want a “common data model”"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't understand this part. Are you talking about implementation concerns or something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615256527.137500",
        "client_msg_id": "d87b533d-5302-4be6-a3c0-914c696baa7d",
        "text": "yeah sorry, I was thinking of the implementation level",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TqrC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah sorry, I was thinking of the implementation level"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615256592.137700",
        "client_msg_id": "b517756b-79f4-4435-aee2-93443a098407",
        "text": "In general I'm ready to deal with as much implementation complexity as is needed. I'm trying to build a human-centered language, that's all that matters!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P\/CL9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In general I'm ready to deal with as much implementation complexity as is needed. I'm trying to build a human-centered language, that's all that matters!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615256801.137900",
        "client_msg_id": "30f4dbb1-31d9-48ed-b4bb-d77216fc54fb",
        "text": "It’s hard to outright ignore implementation complexity, because it means you need to innovate on even more things - not just novel UIs and interactions and mental models, but also novel algorithms and foundations. Each one of which is easily a black hole problem :slightly_smiling_face:\n\nI’d be really curious to see how you’d do a relational join over arbitrary expressions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yv64",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s hard to outright ignore implementation complexity, because it means you need to innovate on even more things - not just novel UIs and interactions and mental models, but also novel algorithms and foundations. Each one of which is easily a black hole problem "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI’d be really curious to see how you’d do a relational join over arbitrary expressions"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257038.138100",
        "client_msg_id": "5c05d8c1-feb7-4d6a-942a-225247415efe",
        "text": "I’m not sure you really get away from normalization and keys. In your plain old data example, you’re explicitly stating the key (ID). I _think_ you can’t escape defining identity somewhere and for normalization you either have defined access paths or you don’t. In the former, you’re some level of denormalized, in the latter you’re in something like 6th normal form.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M0Bz7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m not sure you really get away from normalization and keys. In your plain old data example, you’re explicitly stating the key (ID). I "
                            },
                            {
                                "type": "text",
                                "text": "think",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you can’t escape defining identity somewhere and for normalization you either have defined access paths or you don’t. In the former, you’re some level of denormalized, in the latter you’re in something like 6th normal form."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257242.138300",
        "client_msg_id": "2e63d74e-43fb-4699-99c5-0d66fac9d0d2",
        "text": "you could argue the user doesn’t need to think about it, but that’s really saying the user can dig their own hole as deep as they want (same is true in SQL and the others too, it’s more than happy to let you do crazy combinations of normalization and identity, e.g. regex joins)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "455",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could argue the user doesn’t need to think about it, but that’s really saying the user can dig their own hole as deep as they want (same is true in SQL and the others too, it’s more than happy to let you do crazy combinations of normalization and identity, e.g. regex joins)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257412.138600",
        "client_msg_id": "51c29240-9dee-4e42-9b2c-19211d09da0b",
        "text": "“a human-centered language” is likely as much about guiding people toward something that helps them manage complexity as it is about letting them do something “naturally.”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z58u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“a human-centered language” is likely as much about guiding people toward something that helps them manage complexity as it is about letting them do something “naturally.”"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "U013ZLJARC7",
                    "UCUSW7WVD",
                    "U015V233CFL"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257465.138800",
        "client_msg_id": "7ac63423-19f6-4660-a231-e2e57e3b3bae",
        "text": "there’s a really interesting tension between giving the user what they want and trying to steer them clear of pits of failure",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bQunX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there’s a really interesting tension between giving the user what they want and trying to steer them clear of pits of failure"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257584.139000",
        "client_msg_id": "a5f45d2f-6879-422c-ac62-99a8960c502a",
        "text": "tuples force a kind of consistency that expressions don’t and that means there are fewer places for misunderstandings to hide",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v3NLx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tuples force a kind of consistency that expressions don’t and that means there are fewer places for misunderstandings to hide"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615257662.139200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615257691.000000"
        },
        "client_msg_id": "8175627d-2252-492a-b77a-99e653896163",
        "text": "I plan to start thinking about execution efficiency only after I've developed a full \"beta\" of a programming language that achieves my goals for the user experience. The biggest risk to my project is that I sacrifice the vision due to short-term implementation worries.\n\nAnother reason why I'm holding off: the hardware landscape is changing constantly. One big upcoming change: there will be AI accelerators on the market in a few years, which are quite literally parallel dataflow machines, so I'm not worried about how my language scales on an Intel CPU :slightly_smiling_face:. At least some of those accelerators will be feature-ful enough that they can run more than neural networks, in the same way that we now use GPUs for more than 3D graphics. And further: the biggest advantage of dataflow hardware may not even be the parallelism but the pure implementation _simplicity_ of mapping a dataflow-like language to dataflow hardware, rather than von Neumann hardware. It's not fully clear what the \"assembly language of a TPU\" will end up looking like, but I bet it's good at executing joins :wink:.\n\nPoint is: I think there will be plenty of compute power available to run whatever language I end up with, even if we have to wait a few years. I don't plan to be pushing efficiency on x86 CPUs within the next 5 years of development.\n\nBut this may be a digression. I'll read your other points, hold on :slightly_smiling_face:.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Uu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I plan to start thinking about execution efficiency only after I've developed a full \"beta\" of a programming language that achieves my goals for the user experience. The biggest risk to my project is that I sacrifice the vision due to short-term implementation worries.\n\nAnother reason why I'm holding off: the hardware landscape is changing constantly. One big upcoming change: there will be AI accelerators on the market in a few years, which are quite literally parallel dataflow machines, so I'm not worried about how my language scales on an Intel CPU "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". At least some of those accelerators will be feature-ful enough that they can run more than neural networks, in the same way that we now use GPUs for more than 3D graphics. And further: the biggest advantage of dataflow hardware may not even be the parallelism but the pure implementation"
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "simplicity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "of mapping a dataflow-like language to dataflow hardware, rather than von Neumann hardware. It's not fully clear what the \"assembly language of a TPU\" will end up looking like, but I bet it's good at executing joins "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nPoint is: I think there will be plenty of compute power available to run whatever language I end up with, even if we have to wait a few years. I don't plan to be pushing efficiency on x86 CPUs within the next 5 years of development.\n\nBut this may be a digression. I'll read your other points, hold on "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01AD80KMLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615257881.139500",
        "client_msg_id": "e91cce0a-5a9a-4258-9ad0-e8887490266e",
        "text": "&gt; I’m not sure you really get away from normalization and keys. In your plain old data example, you’re explicitly stating the key (ID).\nYes, but the key _emerges naturally_ from the data. The idea is: if you write an equation that expresses `x` as a function of `y` and `z`, then those become the (compound) key that identifies an x. But keys aren't an actual language construct, and neither are tables, and therefore it's impossible to come up with \"badly-designed tables\", unlike in SQL or Prolog, where you can lump arbitrary values together and call them a tuple.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hUFy",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m not sure you really get away from normalization and keys. In your plain old data example, you’re explicitly stating the key (ID)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, but the key "
                            },
                            {
                                "type": "text",
                                "text": "emerges naturally",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the data. The idea is: if you write an equation that expresses "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a function of "
                            },
                            {
                                "type": "text",
                                "text": "y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "z",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", then those become the (compound) key that identifies an x. But keys aren't an actual language construct, and neither are tables, and therefore it's impossible to come up with \"badly-designed tables\", unlike in SQL or Prolog, where you can lump arbitrary values together and call them a tuple."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615257958.139700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615257964.000000"
        },
        "client_msg_id": "e3b5d79f-2c4b-4cde-bec4-9b4901ac01f7",
        "text": "So in contrast, I'd say that it's SQL that allows users to dig holes wrt. their data model, and this proposal takes away the shovel.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eca",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So in contrast, I'd say that it's SQL that allows users to dig holes wrt. their data model, and this proposal takes away the shovel."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615257983.140000",
        "client_msg_id": "a20d4d75-d5de-4bf8-8252-ac0ebdbb7ff6",
        "text": "that works out to 6th normal form then, which I’m a big fan of :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+RmH3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that works out to 6th normal form then, which I’m a big fan of "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615258046.140200",
        "client_msg_id": "928bad24-12b6-4164-82bf-3243a369cf88",
        "text": "Perhaps it is an implicit, mandated normal form, sure :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rtkSB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps it is an implicit, mandated normal form, sure "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258107.140400",
        "client_msg_id": "5b801489-7746-41c0-8538-c8003d8eb1e9",
        "text": "so in this world, data is all purely represented by code that must be run",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N=I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so in this world, data is all purely represented by code that must be run"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258196.140600",
        "client_msg_id": "b5c354d8-6bcd-4a35-bee3-9759aaffb91c",
        "text": "that’ll lead to some really cool research around how you compress that and make it reasonable to transmit to whatever coprocessor it’s running on",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pa4zC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that’ll lead to some really cool research around how you compress that and make it reasonable to transmit to whatever coprocessor it’s running on"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615258322.140800",
        "client_msg_id": "e0c6b239-24d3-4c3b-8544-502b351c5e36",
        "text": "Oh, and I didn't mention it in my original post, but in the envisioned model of relational programming, there is no such thing as a \"data structure\" (not even lists), since data structures re-introduce tuples and tables and all their problems. Data structures (and functions) would emerge naturally by linking variables together through formulas (or you might call them _constraints_). I'm still working out what the UI to this will look like of course, and that's probably the biggest challenge :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qTdS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, and I didn't mention it in my original post, but in the envisioned model of relational programming, there is no such thing as a \"data structure\" (not even lists), since data structures re-introduce tuples and tables and all their problems. Data structures (and functions) would emerge naturally by linking variables together through formulas (or you might call them "
                            },
                            {
                                "type": "text",
                                "text": "constraints",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). I'm still working out what the UI to this will look like of course, and that's probably the biggest challenge "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615258364.141000",
        "client_msg_id": "3ea8393e-2202-4bce-9a12-8c8a9de613de",
        "text": "&gt; so in this world, data is all purely represented by code that must be run\nYeah :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bvG=",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so in this world, data is all purely represented by code that must be run"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615258411.141200",
        "client_msg_id": "c42150f5-2f6b-4fc2-949a-19474160add3",
        "text": "The question of \"_when_ does the code run\" is an important implementation question, but again this is something I'll deal with after I get the UX right.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3mzve",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The question of \""
                            },
                            {
                                "type": "text",
                                "text": "when",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does the code run\" is an important implementation question, but again this is something I'll deal with after I get the UX right."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258452.141400",
        "client_msg_id": "9dadf014-3553-4a2d-9e21-9fedca0e1e21",
        "text": "&gt; there is no such thing as a “data structure”\nSo how do I ask for the name of customer 10? Or how would I model that a player has a hand of 5 cards?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AbW",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there is no such thing as a “data structure”"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So how do I ask for the name of customer 10? Or how would I model that a player has a hand of 5 cards?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258502.141600",
        "client_msg_id": "ca65e82b-7ba2-4e48-8d71-d69418ff8bb2",
        "text": "one thing I could never figure out is how you’d get rid of things that have sets of other things",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xaw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing I could never figure out is how you’d get rid of things that have sets of other things"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615258550.141800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615258594.000000"
        },
        "client_msg_id": "c77558b8-3144-460e-aca7-5c970dc62ab6",
        "text": "```customerID = 10\nprint customerName```\n(My language won't have print statements, that's just for illustration.)\nSee my previous <#C5T9GPWFL|thinking-together> post on \"function calling\". It's deeply related in a non-obvious way :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=1jQ",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "customerID = 10\nprint customerName"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(My language won't have print statements, that's just for illustration.)\nSee my previous "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " post on \"function calling\". It's deeply related in a non-obvious way "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258652.142500",
        "client_msg_id": "0127327c-e4bd-4f8a-b202-2c3b61ea2c56",
        "text": "ah yes",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RZtzo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ah yes"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258667.142700",
        "client_msg_id": "a154bb7d-f6f9-43c2-aecc-c242dfd63c52",
        "text": "how about the card one?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qyj8S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how about the card one?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615258692.142900",
        "client_msg_id": "07e344d9-8fc1-45f9-9dbd-83d4c4a0b401",
        "text": "imagining that cards are just numbers for simplicity",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kWJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "imagining that cards are just numbers for simplicity"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615259031.143100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615259581.000000"
        },
        "client_msg_id": "65ee2fa2-752e-4267-bc45-15e026b4735d",
        "text": "&gt; how would I model that a player has a hand of 5 cards?\nYou'd do it similarly to a Prolog relation `holds(Player, Card)`, except the \"connections\" between datums are stored implicitly in global (UUID-based) variables, rather than via a named \"predicate\". You'd have two variables, `player` and `cardInHand`. When you constrain `player` to a value, e.g. `player = \"Nick\"`, `cardInHand` will have five values, one representing each card. You could \"print\" all five values, or use them as part of a larger calculation.\n\n&gt; one thing I could never figure out is how you’d get rid of things that have sets of other things\nI'm planning a model of mutability based on <https:\/\/link.springer.com\/chapter\/10.1007\/978-3-642-24206-9_16|Dedalus>, i.e. _*accretion*_ instead of mutation (buzzword thanks to <@U013ZLJARC7> and Rich Hickey). So you express the \"new set\" as a function of the \"old set\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lpq",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how would I model that a player has a hand of 5 cards?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYou'd do it similarly to a Prolog relation "
                            },
                            {
                                "type": "text",
                                "text": "holds(Player, Card)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", except the \"connections\" between datums are stored implicitly in global (UUID-based) variables, rather than via a named \"predicate\". You'd have two variables, "
                            },
                            {
                                "type": "text",
                                "text": "player",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "cardInHand",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". When you constrain "
                            },
                            {
                                "type": "text",
                                "text": "player",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to a value, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "player = \"Nick\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "cardInHand",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will have five values, one representing each card. You could \"print\" all five values, or use them as part of a larger calculation.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing I could never figure out is how you’d get rid of things that have sets of other things"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'm planning a model of mutability based on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/chapter\/10.1007\/978-3-642-24206-9_16",
                                "text": "Dedalus"
                            },
                            {
                                "type": "text",
                                "text": ", i.e. "
                            },
                            {
                                "type": "text",
                                "text": "accretion",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of mutation (buzzword thanks to "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " and Rich Hickey). So you express the \"new set\" as a function of the \"old set\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1615259237.143500",
        "client_msg_id": "0e92b52a-a76b-4dbd-9590-e1f6f00a36a2",
        "text": "reminds me a bit of the constraint propagation networks that <@UA14TGLTC> did really cool stuff with",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kpC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "reminds me a bit of the constraint propagation networks that "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " did really cool stuff with"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615259435.143700",
        "client_msg_id": "9adc9a39-0510-4b1f-abfb-d462de17e8eb",
        "text": "Yeah this is a form of constraint programming. So are Prolog rules, for that matter :slightly_smiling_face:. I'll definitely like to hear what <@UA14TGLTC> thinks if he's dabbled in it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MgZ5B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah this is a form of constraint programming. So are Prolog rules, for that matter "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". I'll definitely like to hear what "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " thinks if he's dabbled in it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1615261652.144300",
        "client_msg_id": "9af56451-b4be-4820-8f9a-9bd1010561b3",
        "text": "I guess I've been summoned.  :smiling_imp:  I'll answer any specific question: not just three.  Let me share some idle thoughts with the small advantage that I want to give this stuff another serious go soon, so it's been on my mind.\n\nThe idea I liked best about constraint propagation networks is defining the network (system of equations) entirely independently of how any of it gets resolved.  It helps with...\n\n\"hardware landscape is changing constantly\" — Don't commit to an evaluation strategy until you really know what you want to do.  Focus instead on interface and sense making.  Have a really rich system for exploring toy models, then use black boxes for the big tricky bits.\n\nI don't think very much about computational complexity.  If it's too hard calculate, the answer is probably random and not worth knowing.  I mean worst case optimization is always terrible because you're essentially finding something random: no structure beyond exhaustive search.  For instance graph-database join problems come up because pruning is happening in the wrong order or you don't have a good search heuristic.\n\n\"6th normal form\" — Think hash-tables with compound keys.  In most cases, they offer a better way to think about things tables of tuples because they show functional dependencies and entity-relationship cardinalities.  (Given a suit and a rank, you have a card.)\n\n\"mutability\" — Make time first-class and the rest follows.  Another way to think about it is that there is no time only another space-like dimension.\n\nUnordered and ordered collections are entirely different beasts.  Always know what you're modeling and never allow for arbitrary orders to be imposted on unordered things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7uFBL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I've been summoned.  "
                            },
                            {
                                "type": "emoji",
                                "name": "smiling_imp",
                                "unicode": "1f608"
                            },
                            {
                                "type": "text",
                                "text": "  I'll answer any specific question: not just three.  Let me share some idle thoughts with the small advantage that I want to give this stuff another serious go soon, so it's been on my mind.\n\nThe idea I liked best about constraint propagation networks is defining the network (system of equations) entirely independently of how any of it gets resolved.  It helps with...\n\n\"hardware landscape is changing constantly\" — Don't commit to an evaluation strategy until you really know what you want to do.  Focus instead on interface and sense making.  Have a really rich system for exploring toy models, then use black boxes for the big tricky bits.\n\nI don't think very much about computational complexity.  If it's too hard calculate, the answer is probably random and not worth knowing.  I mean worst case optimization is always terrible because you're essentially finding something random: no structure beyond exhaustive search.  For instance graph-database join problems come up because pruning is happening in the wrong order or you don't have a good search heuristic.\n\n\"6th normal form\" — Think hash-tables with compound keys.  In most cases, they offer a better way to think about things tables of tuples because they show functional dependencies and entity-relationship cardinalities.  (Given a suit and a rank, you have a card.)\n\n\"mutability\" — Make time first-class and the rest follows.  Another way to think about it is that there is no time only another space-like dimension.\n\nUnordered and ordered collections are entirely different beasts.  Always know what you're modeling and never allow for arbitrary orders to be imposted on unordered things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "male_genie",
                "users": [
                    "UCGAK10LS",
                    "UD3AK9JRF"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615262098.144600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615264468.000000"
        },
        "client_msg_id": "17a71757-7386-4610-afbe-5e10230e5556",
        "text": "Your last two paragraphs summarize my primary principles of the last two years, and if I hadn't committed to them I think I would have gotten stuck and failed in my quest by now :slightly_smiling_face:. The rest I've only come to realise more recently.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EDN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your last two paragraphs summarize my primary principles of the last two years, and if I hadn't committed to them I think I would have gotten stuck and failed in my quest by now "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". The rest I've only come to realise more recently."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1615262139.144800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1615262173.000000"
        },
        "client_msg_id": "f8b8f259-6284-4f10-a767-614aeab46615",
        "text": "What's the difference between a \"constraint propagation network\" and \"constraint programming language\" though? I'm only just starting to look toward that kind of literature.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qgn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the difference between a \"constraint propagation network\" and \"constraint programming language\" though? I'm only just starting to look toward that kind of literature."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URUHW0TB3",
        "type": "message",
        "ts": "1615273603.148800",
        "edited": {
            "user": "URUHW0TB3",
            "ts": "1615273630.000000"
        },
        "client_msg_id": "e6e5964c-3961-429f-af21-a0215a0e78bf",
        "text": "are there some \"benchmark\" apps for end user programming? I listed two benchmark apps here <https:\/\/twitter.com\/molikto\/status\/1369116234155921411> they are in the category of \"productivity apps\", if we have a system where these apps can be easily expressed &amp; constructed, it will be very nice.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaab2c763bc6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aab2c763bc6bf4911f7843ed9238b81c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "molikto",
            "display_name": "molikto",
            "team": "T5TCAFTA9",
            "name": "molikto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615273603.148800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1615313170.160600",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1615313170.160600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QOO7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are there some \"benchmark\" apps for end user programming? I listed two benchmark apps here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/molikto\/status\/1369116234155921411"
                            },
                            {
                                "type": "text",
                                "text": " they are in the category of \"productivity apps\", if we have a system where these apps can be easily expressed & constructed, it will be very nice."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1615273805.149200",
        "client_msg_id": "2bce7f0f-2890-4db4-b458-6fc3d8e66a88",
        "text": "When I say \"propagation network,\" I basically mean Sussman\/Radul Propagators <https:\/\/groups.csail.mit.edu\/genesis\/papers\/radul%202009.pdf> <https:\/\/dspace.mit.edu\/handle\/1721.1\/44215>.  I don't see much new on that front.\n\nAs for \"constraint programming language,\" that makes me think of SAT solvers and \"constraint logic programming\" — write in Prolog, then do SAT solving for some parts instead of (or together with) unification.\n\nThe other thing I know is optimization along the Linear Programming, Mixed Integer Programming, and Quadratic Programming vein.  That all seems to live in a world apart from any other programming community.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615252973.136100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uOz3\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I say \"propagation network,\" I basically mean Sussman\/Radul Propagators "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/groups.csail.mit.edu\/genesis\/papers\/radul%202009.pdf"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dspace.mit.edu\/handle\/1721.1\/44215"
                            },
                            {
                                "type": "text",
                                "text": ".  I don't see much new on that front.\n\nAs for \"constraint programming language,\" that makes me think of SAT solvers and \"constraint logic programming\" — write in Prolog, then do SAT solving for some parts instead of (or together with) unification.\n\nThe other thing I know is optimization along the Linear Programming, Mixed Integer Programming, and Quadratic Programming vein.  That all seems to live in a world apart from any other programming community."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "U013ZLJARC7",
                    "UD3AK9JRF"
                ],
                "count": 3
            }
        ]
    }
]