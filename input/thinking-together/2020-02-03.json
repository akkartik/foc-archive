[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580718026.447200",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580747456.000000"
        },
        "client_msg_id": "4cadb10d-091b-4bae-81c8-f366164a7202",
        "text": "Great prompt by <@URC5MU2AZ> a while ago:\n\n*You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?*\n\n_(Responses in thread plz.)_",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "reply_count": 9,
        "reply_users_count": 7,
        "latest_reply": "1585095821.013500",
        "reply_users": [
            "UC2A2ARPT",
            "UEBG0NPDK",
            "UCUSW7WVD",
            "U6KQ2S410",
            "UJN1TAYEQ",
            "UAVCC2X70",
            "UFQQ3P867"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580746249.460400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580749778.461000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580749913.461200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580755842.467100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580760750.480700"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1580767300.488400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1580769494.488800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1582869583.044200"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1585095821.013500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IPsM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great prompt by "
                            },
                            {
                                "type": "user",
                                "user_id": "URC5MU2AZ"
                            },
                            {
                                "type": "text",
                                "text": " a while ago:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(Responses in thread plz.)",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580718898.455400",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1580718995.000000"
        },
        "client_msg_id": "55381BF3-DB13-4284-A299-69BF96393CCB",
        "text": "People like Alan Kay and many other designers and builders of systems of his time had a very different goal than most programmers today. When they learned programming that was the only UI for computers, and they thought hard about how to create a better UI for programming — a UI for the power of making computers do anything you want them to, not limited to any specific domain.\n\nBut commercialization forcefully shifted incentives towards less generic and more domain specific solutions. It was much easier to sell a program for spreadsheets. And one for text processing. And one for presentations. It was easier to sell because it was easier to see what specific problem these programs solved. And it was easier to use because you’d only have to know about that particular problem domain. And it was easier to build as you cut down complexity significantly and no longer had to try to make everything possible, but just a slice of a much smaller problem space.\n\nIt’s so easy to fall into the trap of specializing too early too quickly, losing that generality early in the process. Systems like Smalltalk that some of us admire kept that generality alive in the system by representing many things with just a few powerful concepts. It wasn’t just that everything was an object, it was also that almost everything was represented by almost the same kind of object.\n\nToday, we often want to get rid of too much generality as quickly as possible and favor distinguishing things from each other so we know what we’re dealing with. Life gets so much easier if you know exactly what you’re dealing with. And that’s when we end up with specific data structures representing specific things in specific apps solving specific problems (and specific people with their specific backgrounds making specific design decisions) — isolated universes. And so we spend most of our time writing algorithms to convert between them to make them work together again.\n\nWhen we start representing a specific thing in our code, we take that power away from our user who will now have to live with that thing as we designed it. The solution can’t be to design all the possible things for them individually — what we are clearly trying very hard currently. What we need to do is to give our users as few things as possible, just enough so they can design whatever it is they need to get their job done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People like Alan Kay and many other designers and builders of systems of his time had a very different goal than most programmers today. When they learned programming that was the only UI for computers, and they thought hard about how to create a better UI for programming — a UI for the power of making computers do anything you want them to, not limited to any specific domain.\n\nBut commercialization forcefully shifted incentives towards less generic and more domain specific solutions. It was much easier to sell a program for spreadsheets. And one for text processing. And one for presentations. It was easier to sell because it was easier to see what specific problem these programs solved. And it was easier to use because you’d only have to know about that particular problem domain. And it was easier to build as you cut down complexity significantly and no longer had to try to make everything possible, but just a slice of a much smaller problem space.\n\nIt’s so easy to fall into the trap of specializing too early too quickly, losing that generality early in the process. Systems like Smalltalk that some of us admire kept that generality alive in the system by representing many things with just a few powerful concepts. It wasn’t just that everything was an object, it was also that almost everything was represented by almost the same kind of object.\n\nToday, we often want to get rid of too much generality as quickly as possible and favor distinguishing things from each other so we know what we’re dealing with. Life gets so much easier if you know exactly what you’re dealing with. And that’s when we end up with specific data structures representing specific things in specific apps solving specific problems (and specific people with their specific backgrounds making specific design decisions) — isolated universes. And so we spend most of our time writing algorithms to convert between them to make them work together again.\n\nWhen we start representing a specific thing in our code, we take that power away from our user who will now have to live with that thing as we designed it. The solution can’t be to design all the possible things for them individually — what we are clearly trying very hard currently. What we need to do is to give our users as few things as possible, just enough so they can design whatever it is they need to get their job done."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UT39HTL9X",
                    "UJBAJNFLK",
                    "U8A5MS6R1"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1580731306.457100",
        "edited": {
            "user": "UFLN9JFRT",
            "ts": "1580731409.000000"
        },
        "client_msg_id": "cb570288-cd31-4777-9522-62f20abd9439",
        "text": "<@UDQBTJ211> Cool to have you here. I was so inspired by your Algojammer project that I tried to copy (badly) it for my own project, Yazz Pilot",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580241505.237300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Jo8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Cool to have you here. I was so inspired by your Algojammer project that I tried to copy (badly) it for my own project, Yazz Pilot"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1580731377.457800",
        "client_msg_id": "dda2134a-794d-4c71-a29f-f117d8de6c7c",
        "text": "Above image is from the bubble sort demo",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580241505.237300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V2NBb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Above image is from the bubble sort demo"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580746249.460400",
        "client_msg_id": "2DD4D221-0FAC-4C3D-8D68-A04D40238485",
        "text": "Reese Paradox: In many cases, removing accidental complexity makes software feel more complex.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jwKaw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reese Paradox: In many cases, removing accidental complexity makes software feel more complex."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UFB8STN7K"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UKJGU23KP",
                    "U9C92716C"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580749778.461000",
        "client_msg_id": "0e7d1e41-37e6-49a8-afe4-58edcd54edd6",
        "text": "(re: Reese Paradox: this is a very important thing to understand if, like me, you like to \"simplify\" - it turns out busy work actually serves a purpose and if you remove all of it, people lose themselves. You just can't think that quickly about complex systems.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GR7Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(re: Reese Paradox: this is a very important thing to understand if, like me, you like to \"simplify\" - it turns out busy work actually serves a purpose and if you remove all of it, people lose themselves. You just can't think that quickly about complex systems.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580749913.461200",
        "client_msg_id": "48bd33cd-6d56-4efc-82af-53cdeabf4653",
        "text": "I would really appreciate further elaboration on this idea. Maybe in a new thread?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dP2G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would really appreciate further elaboration on this idea. Maybe in a new thread?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580751504.462400",
        "client_msg_id": "C6E74A77-C457-4732-BCEA-86242AA93342",
        "text": "Let's talk about the positive benefits of accidental \/ incidental complexity in this thread.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "reply_count": 63,
        "reply_users_count": 10,
        "latest_reply": "1580924992.044000",
        "reply_users": [
            "UC2A2ARPT",
            "UCUSW7WVD",
            "U8A5MS6R1",
            "UKJGU23KP",
            "UGS8TUVK6",
            "UKDM3GLAJ",
            "UEBG0NPDK",
            "U5STGTB3J",
            "UHZUS56SV",
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580751521.462800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580751571.463100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580752431.463400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580752623.463900"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580752710.464300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580752822.464500"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580752894.464700"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580752958.464900"
            },
            {
                "user": "UGS8TUVK6",
                "ts": "1580753661.465300"
            },
            {
                "user": "UKDM3GLAJ",
                "ts": "1580754281.465700"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580754517.465900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580754982.466300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580755572.466600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580755794.466900"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580755847.467300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580756052.467500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580756297.467700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1580756403.468000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580756659.468200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1580757488.478900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580760287.480200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580760562.480400"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580760834.480900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580761003.481100"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580761361.481400"
            },
            {
                "user": "UKDM3GLAJ",
                "ts": "1580761459.481600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580761660.481800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580761779.482300"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580762000.482600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580762123.482800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580762541.484000"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1580762589.484200"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580764158.484700"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580764636.484900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580766205.485400"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580767174.487100"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580767256.488100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1580778870.489900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580789094.491400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580790725.492100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580796314.493500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580797713.493800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580798329.494100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580841634.499100"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580845199.499500"
            },
            {
                "user": "UKDM3GLAJ",
                "ts": "1580847517.499800"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580847963.000000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580849895.000200"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580851645.000600"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580852475.000800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580854036.001600"
            },
            {
                "user": "UKDM3GLAJ",
                "ts": "1580854343.002100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580854506.002400"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580856793.004300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580857410.007500"
            },
            {
                "user": "UHZUS56SV",
                "ts": "1580858713.007800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580865680.011800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580866348.012000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580866437.012200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580884447.019100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1580898747.043200"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580924471.043800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580924992.044000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdzBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let's talk about the positive benefits of accidental \/ incidental complexity in this thread."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580751521.462800",
        "client_msg_id": "38758AF5-9A06-4619-A21A-808C6E66F175",
        "text": "Paging <@UCUSW7WVD> and <@UEBG0NPDK> ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zTZuC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paging "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580751571.463100",
        "client_msg_id": "ecc9a854-1fe3-4fee-a9be-542b2e74a856",
        "text": "For starters, some examples would be good.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X=+0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For starters, some examples would be good."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580752431.463400",
        "client_msg_id": "3bf556e2-8b06-4dcb-81c9-1e7f19dccd43",
        "text": "As a caveat, I've read Silver Bullet, Tar Pit, etc. only a handful of times, so I might not have internalized all the nuance of incidental vs essential. So these examples are based on my naive view.\n\nType systems, syntax highlighting, keyboard shortcuts, choice of language, literate programming, and all other programmer affordances are at their core incidental to the problem that the software you write needs to solve. They're also incidental to the act of programming. You feel this when you fiddle with your linter instead of creating a better abstraction or implementing a feature.\n\nFor that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\n\nUsing a mouse to move the insertion point. The ability to delete characters. Agile.\n\nIf you stood in the middle of your programming memory palace, spun around in a circle, and pointed at a random object.. chances are good it represents something incidental. Something meant to make your job easier, or even humanly possible.\n\nNow, this viewpoint is taking Brooks (etc) past the point of usefulness, far into absurdity. But the reason I like to do that is to establish that the essence vs. incident of complexity is not binary. It's not even a linear spectrum. Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\n\nAs I like to say, incidental complexity is a resource to be spent, not an evil to be purged.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EWY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a caveat, I've read Silver Bullet, Tar Pit, etc. only a handful of times, so I might not have internalized all the nuance of incidental vs essential. So these examples are based on my naive view.\n\nType systems, syntax highlighting, keyboard shortcuts, choice of language, literate programming, and all other programmer affordances are at their core incidental to the problem that the software you write needs to solve. They're also incidental to the act of programming. You feel this when you fiddle with your linter instead of creating a better abstraction or implementing a feature.\n\nFor that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\n\nUsing a mouse to move the insertion point. The ability to delete characters. Agile.\n\nIf you stood in the middle of your programming memory palace, spun around in a circle, and pointed at a random object.. chances are good it represents something incidental. Something meant to make your job easier, or even humanly possible.\n\nNow, this viewpoint is taking Brooks (etc) past the point of usefulness, far into absurdity. But the reason I like to do that is to establish that the essence vs. incident of complexity is not binary. It's not even a linear spectrum. Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\n\nAs I like to say, incidental complexity is a resource to be spent, not an evil to be purged."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1580752510.463600",
        "edited": {
            "user": "UGLSY9X3J",
            "ts": "1580752593.000000"
        },
        "client_msg_id": "b1ba65be-639f-4e76-ac15-e687fa5dc7d8",
        "text": "just finished, loved the interview! Alan Kay in one interview talked about one of the tells for a PL designer is to be _physically ill_ when using existing programming languages. Blow embodies this perfectly",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0TpSu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just finished, loved the interview! Alan Kay in one interview talked about one of the tells for a PL designer is to be"
                            },
                            {
                                "type": "text",
                                "text": " physically ill ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "when using existing programming languages. Blow embodies this perfectly"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1580752623.463900",
        "client_msg_id": "46f15456-8b9b-4fd7-ba4a-c2999c323418",
        "text": "This is not a fully formed thought but...\nWhen making something is hard, you think about what's really valuable. E.g. older movies without CGI would have to rely more on the storyline. Many newer ones are more about special effects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8\/GSy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is not a fully formed thought but...\nWhen making something is hard, you think about what's really valuable. E.g. older movies without CGI would have to rely more on the storyline. Many newer ones are more about special effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UF1ATC4RF"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580752710.464300",
        "client_msg_id": "f1d969b0-b16d-45fa-8939-714e9bd72d66",
        "text": "I’d argue that abstraction and duplication are both incidental complexity.\n\nThe debate over them is about in which circumstances choosing one or another minimizes incidental complexity.\n\nWhich would lead to the argument that you’re still trying to purge incidental complexity, it’s just that all of our approaches leave some incidental complexity in place.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aj+=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d argue that abstraction and duplication are both incidental complexity.\n\nThe debate over them is about in which circumstances choosing one or another minimizes incidental complexity.\n\nWhich would lead to the argument that you’re still trying to purge incidental complexity, it’s just that all of our approaches leave some incidental complexity in place."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580752822.464500",
        "client_msg_id": "9ec2c71f-a33d-425f-a06d-ff23e144a408",
        "text": "<@UC2A2ARPT> <@UKJGU23KP> This is a kind of mind-blowing idea. I'm not a scholar of those papers either, but it never occurred to me to interpret 'accidental complexity' so broadly. Regardless, it feels like a very fertile line of thought.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcBTv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " This is a kind of mind-blowing idea. I'm not a scholar of those papers either, but it never occurred to me to interpret 'accidental complexity' so broadly. Regardless, it feels like a very fertile line of thought."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580752894.464700",
        "client_msg_id": "92acf179-c9b8-44f4-95f6-11ac80a516bb",
        "text": "To be fair, I’ve read Brooks twice and while I’ve read the intro to Out of the Tar Pit many times, I think I’ve only read the whole thing once. It’s possible that I’m not using the authors’ own interpretations of what the terms meant.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j7aQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To be fair, I’ve read Brooks twice and while I’ve read the intro to Out of the Tar Pit many times, I think I’ve only read the whole thing once. It’s possible that I’m not using the authors’ own interpretations of what the terms meant."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580752958.464900",
        "client_msg_id": "39446ada-4564-4336-a4aa-7a775d3499d2",
        "text": "<@UC2A2ARPT> “Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.”\n\nThis is a really great few sentences .",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2GIrZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " “Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.”\n\nThis is a really great few sentences ."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UD31LGQKB"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGS8TUVK6",
        "type": "message",
        "ts": "1580753661.465300",
        "client_msg_id": "47f95861-03f4-45ec-b5ab-3fc301f90f62",
        "text": "This is a bit of a tangent but regarding abstraction I’m with Zach Tellman who argues that we can only talk about the usefulness of it in a given context. Highly recommend his book <http:\/\/elementsofclojure.com> (which we might have called elements of software as well) or his recent appearance on the CoRecursive podcast: <https:\/\/corecursive.com\/042-zach-tellman-software-in-context\/> Thinking the same might be true for incidental complexity – you have to talk about the context.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b2204b9c98e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-10\/691633887223_2b2204b9c98e11f0ad1f_72.jpg",
            "first_name": "Martin",
            "real_name": "Martin Kavalar",
            "display_name": "mk",
            "team": "T5TCAFTA9",
            "name": "martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a bit of a tangent but regarding abstraction I’m with Zach Tellman who argues that we can only talk about the usefulness of it in a given context. Highly recommend his book "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/elementsofclojure.com"
                            },
                            {
                                "type": "text",
                                "text": " (which we might have called elements of software as well) or his recent appearance on the CoRecursive podcast: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/corecursive.com\/042-zach-tellman-software-in-context\/"
                            },
                            {
                                "type": "text",
                                "text": " Thinking the same might be true for incidental complexity – you have to talk about the context."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UKDM3GLAJ",
                    "UD31LGQKB",
                    "U8A5MS6R1"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1580754281.465700",
        "client_msg_id": "78ec40f9-aec3-4f5b-90b3-8de462a3895f",
        "text": "Is it really incidental though? If I have a text editor that allows me to move forward and back, and I’d like to move to the beginning of the document, I have a procedure for getting there. I press back many times until I get there. But there is a cost to doing this (time, keypresses, cycles in evaluating 1000 `move-back` commands). So we introduce a home button. It fully and minimally captures the action I was trying to take. We have made the keyboard more complex, and every layer of software in between that needs to care about this keycode, but is that complexity really incidental? It is perfectly and minimally in service of a real:tm: problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N0lV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it really incidental though? If I have a text editor that allows me to move forward and back, and I’d like to move to the beginning of the document, I have a procedure for getting there. I press back many times until I get there. But there is a cost to doing this (time, keypresses, cycles in evaluating 1000 "
                            },
                            {
                                "type": "text",
                                "text": "move-back",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " commands). So we introduce a home button. It fully and minimally captures the action I was trying to take. We have made the keyboard more complex, and every layer of software in between that needs to care about this keycode, but is that complexity really incidental? It is perfectly and minimally in service of a real"
                            },
                            {
                                "type": "emoji",
                                "name": "tm",
                                "unicode": "2122-fe0f"
                            },
                            {
                                "type": "text",
                                "text": " problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580754517.465900",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1580754533.000000"
        },
        "client_msg_id": "6193de62-0882-4763-896e-b08fd22714bf",
        "text": "My take: it’s essential complexity for a document editor, but the idea of editing files is incidental complexity for programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My take: it’s essential complexity for a document editor, but the idea of editing files is incidental complexity for programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1580754982.466300",
        "client_msg_id": "be807e4b-23a6-4de2-bd70-ee5210390e43",
        "text": "This topic reminded me of this essay on complexity: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1578176757362700?thread_ts=1578176757.362700>\n\n&gt; we can then start to analyze things like that fact that I want to \"simplify my life\". On its own, the statement is meaningless because we do not know in regards to which aspect in my life I would like to make easier. If I buy more appliances, to reduce my working time -- say a food processor, for example -- I save time in chopping. But it comes at the expense of having to buy the machine, washing it afterward, and occasionally performing some type of maintenance to keep it in working order. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1578176757362700?thread_ts=1578176757.362700",
                "fallback": "[January 4th, 2020 2:25 PM] shalabh.chaturvedi: I enjoyed reading this essay by <@UN7K3UT4G> posted inside a thread: <http:\/\/theprogrammersparadox.blogspot.com\/2007\/12\/nature-of-simple.html>\n\nWe often talk of simplicity but what exactly is it?\n&gt;  In any comparison of multi-dimensional things, we cannot easily pin one up against the other.\nIt also connects with what <@UC2A2ARPT> was saying about incidental complexity: <https:\/\/twitter.com\/spiralganglion\/status\/1198636841831825408>",
                "ts": "1578176757.362700",
                "author_id": "U8A5MS6R1",
                "author_subname": "Shalabh Chaturvedi",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I enjoyed reading this essay by <@UN7K3UT4G> posted inside a thread: <http:\/\/theprogrammersparadox.blogspot.com\/2007\/12\/nature-of-simple.html>\n\nWe often talk of simplicity but what exactly is it?\n&gt;  In any comparison of multi-dimensional things, we cannot easily pin one up against the other.\nIt also connects with what <@UC2A2ARPT> was saying about incidental complexity: <https:\/\/twitter.com\/spiralganglion\/status\/1198636841831825408>",
                "author_name": "Shalabh Chaturvedi",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U8A5MS6R1",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1578176757362700?thread_ts=1578176757.362700",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "esT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This topic reminded me of this essay on complexity: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1578176757362700?thread_ts=1578176757.362700"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we can then start to analyze things like that fact that I want to \"simplify my life\". On its own, the statement is meaningless because we do not know in regards to which aspect in my life I would like to make easier. If I buy more appliances, to reduce my working time -- say a food processor, for example -- I save time in chopping. But it comes at the expense of having to buy the machine, washing it afterward, and occasionally performing some type of maintenance to keep it in working order. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580755572.466600",
        "client_msg_id": "d035f338-5315-49e1-bae1-7667ca03a343",
        "text": "I'll echo what <@UC2A2ARPT> said with a simple example from Eve, and add another perspective as well.\n\nFrom Eve: It's not essential in a relational language to have removal, instead the simplest mechanism is to assert a retraction. As a person though, that's pretty mind bendy. It's much easier to think of removing something as an action, rather than an addition of a fact to the world. Having removal or set (remove the current add this new one) is purely incidental, but as Ivan pointed out, extremely useful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7n7mt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll echo what "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " said with a simple example from Eve, and add another perspective as well.\n\nFrom Eve: It's not essential in a relational language to have removal, instead the simplest mechanism is to assert a retraction. As a person though, that's pretty mind bendy. It's much easier to think of removing something as an action, rather than an addition of a fact to the world. Having removal or set (remove the current add this new one) is purely incidental, but as Ivan pointed out, extremely useful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "US370TRJA",
                    "UMWF81HTP",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580755794.466900",
        "client_msg_id": "c762042d-ab32-4ed0-b8e7-57b7707d6474",
        "text": "The other perspective that underlies Ivan's points I think: programming is a process performed by people and as a result we have to deal with things like inferential distance (as the example above shows). What we forget though is it's not just about making things simple\/intuitive\/easy to work with, it's  just as much about crafting the entire process to manage emotional context. If something is objectively better, but feels bad, then it's just going to largely get binned as bad. When we remove all incidental complexity from the process, there's a second order effect to the pacing: you've now moved all of the essential (and likely hard) parts of the problem all right next to each other.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RrsyW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other perspective that underlies Ivan's points I think: programming is a process performed by people and as a result we have to deal with things like inferential distance (as the example above shows). What we forget though is it's not just about making things simple\/intuitive\/easy to work with, it's  just as much about crafting the entire process to manage emotional context. If something is objectively better, but feels bad, then it's just going to largely get binned as bad. When we remove all incidental complexity from the process, there's a second order effect to the pacing: you've now moved all of the essential (and likely hard) parts of the problem all right next to each other."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580755842.467100",
        "client_msg_id": "bd0be2df-1a31-4a0f-b1b8-edb29cd579bf",
        "text": "<@UEBG0NPDK> and <@UCUSW7WVD> — Waiting eagerly for your paradoxen.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " — Waiting eagerly for your paradoxen."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580755847.467300",
        "client_msg_id": "eda566d2-d928-46e4-9ebb-af6aeee995f5",
        "text": "The effect is that you've made it feel *much* harder than it used to be, because the complex bits were spread out among more mundane considerations. Monotony was breaking the difficulty.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aQzUw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The effect is that you've made it feel "
                            },
                            {
                                "type": "text",
                                "text": "much",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " harder than it used to be, because the complex bits were spread out among more mundane considerations. Monotony was breaking the difficulty."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580756052.467500",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1580758032.000000"
        },
        "client_msg_id": "fd01eb3e-d231-4bba-880c-02c07d2ff3a7",
        "text": "Pacing and emotion management are very important aspects of the problem to consider and are well understood in other domains. E.g. you can't watch a movie that runs at 110% the whole 2 hours, it's emotionally exhausting and you start to tune out at some point. In the programming context, you get one of two effects: either you cause long thinking pauses in between the actual \"points of progress,\" which makes it feel stuttery and  like it never flows. Or you end up just getting distracted, because it's much easier to do something else than consider all the difficult things about your problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QT1YY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pacing and emotion management are very important aspects of the problem to consider and are well understood in other domains. E.g. you can't watch a movie that runs at 110% the whole 2 hours, it's emotionally exhausting and you start to tune out at some point. In the programming context, you get one of two effects: either you cause long thinking pauses in between the actual \"points of progress,\" which makes it feel stuttery and  like it never flows. Or you end up just getting distracted, because it's much easier to do something else than consider all the difficult things about your problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580756297.467700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580756327.000000"
        },
        "client_msg_id": "4e173b88-bba7-4bf6-82d9-0d19355bc654",
        "text": "Beautifully illustrated, Chris.\n\nTo zoom back in from my _reductio ad absurdum_ to _what Silver Bullet \/ Tar Pit were meaning_ — when looking at the frustrating cruft that builds up in, say, a tower of abstractions, each piece of cruft was originally created as an affordance for, say, legacy or convenience or familiarity or flexibility. Taking my absurd examples in one hand, and these practical examples in the other, you can see that it's simply a case of: one person's needless complexity is another person's accessibility.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G3Uhv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beautifully illustrated, Chris.\n\nTo zoom back in from my "
                            },
                            {
                                "type": "text",
                                "text": "reductio ad absurdum",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "what Silver Bullet \/ Tar Pit were meaning",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " — when looking at the frustrating cruft that builds up in, say, a tower of abstractions, each piece of cruft was originally created as an affordance for, say, legacy or convenience or familiarity or flexibility. Taking my absurd examples in one hand, and these practical examples in the other, you can see that it's simply a case of: one person's needless complexity is another person's accessibility."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1580756403.468000",
        "client_msg_id": "2425c337-7d0c-488c-9967-e41b97383573",
        "text": "Another interesting effect: if you make things simple enough, people then think they're trivial and ignore them :slightly_smiling_face: We've struggled a lot with that in various contexts over the years.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Fp1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another interesting effect: if you make things simple enough, people then think they're trivial and ignore them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " We've struggled a lot with that in various contexts over the years."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1580756659.468200",
        "client_msg_id": "70969684-2a7f-4037-92f1-de2a23c27daf",
        "text": "&gt; objectively better, but feels bad\nSometimes I prefer to drive on town streets that are always moving instead of the freeway which has a single strech of very slow congestion. The freeway might actually be faster overall, but its more painful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5p\/k",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "objectively better, but feels bad"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSometimes I prefer to drive on town streets that are always moving instead of the freeway which has a single strech of very slow congestion. The freeway might actually be faster overall, but its more painful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1580757488.478900",
        "client_msg_id": "B9DB736C-AF37-48B0-920A-60D5C82E8FEB",
        "text": "Reading through this thread I get the impression that essential\/accidental complexity is conflated with good\/bad user experience or usability and accessibility. I’m still pondering how I feel about that, but felt like just pointing this out could be useful by itself…?\n\nMy initial feeling is that these things are neither orthogonal nor directly related but somewhere in between (yay, what a safe position to take… ;-). It should be possible to remove accidental complexity in extreme ways and then still provide a good experience. Although some might interpret that as adding accidental complexity back in for the sake of experience. :thinking_face:\n\nThe other observation I want to make is that we (including myself) prefer talking about removing accidental complexity. It’s always easier to identify things we don’t want. It’s much harder to identify what we want. I wonder if we’d be better off thinking about what essential really means other than that convenient “necessary for the problem at hand” definition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSnXS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reading through this thread I get the impression that essential\/accidental complexity is conflated with good\/bad user experience or usability and accessibility. I’m still pondering how I feel about that, but felt like just pointing this out could be useful by itself…?\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "My initial feeling is that these things are neither orthogonal nor directly related but somewhere in between (yay, what a safe position to take… ;-). It should be possible to remove accidental complexity in extreme ways and then still provide a good experience. Although some might interpret that as adding accidental complexity back in for the sake of experience. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The other observation I want to make is that we (including myself) prefer talking about removing accidental complexity. It’s always easier to identify things we don’t want. It’s much harder to identify what we want. I wonder if we’d be better off thinking about what essential really means other than that convenient “necessary for the problem at hand” definition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1580757592.479100",
        "edited": {
            "user": "UQ706GB9U",
            "ts": "1580757655.000000"
        },
        "client_msg_id": "16a9aeab-33d3-4844-8d33-45737292dc49",
        "text": "`async\/await` is interesting as an integration of async directly in languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580590491.307600",
        "parent_user_id": "UT39HTL9X",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "veFY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "async\/await",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is interesting as an integration of async directly in languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580760287.480200",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580760653.000000"
        },
        "client_msg_id": "e995ce58-6fca-4fc0-95e8-611cc9fe2650",
        "text": "Yeah, these great examples reinforce my sense that essential\/accidental is a useful dichotomy -- and we humans are terrible at distinguishing the two. Our math sides push us too far towards declarativity IMO, and anything imperative is treated as accidental complexity. But anything that exists in users' mental models _a priori_ is, I think, by definition essential.\n\nAs an example, I manage a deployment system in my day job, and it operates as a convergence engine: you give it the desired state (package versions, number of hosts, etc.) and it takes the steps to get from here to there. Once we released it, however, we uncovered several cases where people care _how_ we get from here to there:\n\na) Sometimes there are hosts that we think can be reused but customers don't want to allow, for reasons our tooling can't see (and there'll always be some of those reasons: outdated secrets, corrupted data, etc.)\n\nb) Sometimes our customers want for a specific cluster to not be modified, while another subset is. Rather than have to painfully specify the desired state to be identical to the existing state in those cases, they'd rather just get a checkbox that says \"hands off this cluster!\"\n\nBoth these changes have been difficult because of the deep architectural division between ends and means in our tool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FBlc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, these great examples reinforce my sense that essential\/accidental is a useful dichotomy -- and we humans are terrible at distinguishing the two. Our math sides push us too far towards declarativity IMO, and anything imperative is treated as accidental complexity. But anything that exists in users' mental models "
                            },
                            {
                                "type": "text",
                                "text": "a priori",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is, I think, by definition essential.\n\nAs an example, I manage a deployment system in my day job, and it operates as a convergence engine: you give it the desired state (package versions, number of hosts, etc.) and it takes the steps to get from here to there. Once we released it, however, we uncovered several cases where people care "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we get from here to there:\n\na) Sometimes there are hosts that we think can be reused but customers don't want to allow, for reasons our tooling can't see (and there'll always be some of those reasons: outdated secrets, corrupted data, etc.)\n\nb) Sometimes our customers want for a specific cluster to not be modified, while another subset is. Rather than have to painfully specify the desired state to be identical to the existing state in those cases, they'd rather just get a checkbox that says \"hands off this cluster!\"\n\nBoth these changes have been difficult because of the deep architectural division between ends and means in our tool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580760562.480400",
        "client_msg_id": "c334e7ae-baa1-4d79-b3ac-81cd4cf21d54",
        "text": "Anecdote regarding putting things too close together: we've been trying to onboard teams in my company to a new tool. Our good intentions originally were to do all the legwork and present them with a single go\/no-go decision. And we kept finding that people would put off the decision.\n\nOne of the things we discovered (this is an ongoing issue) was that our decision to show all the services owned by a team in a single document was counter-productive. Talking about each service separately helped people feel less overwhelmed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9+EF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anecdote regarding putting things too close together: we've been trying to onboard teams in my company to a new tool. Our good intentions originally were to do all the legwork and present them with a single go\/no-go decision. And we kept finding that people would put off the decision.\n\nOne of the things we discovered (this is an ongoing issue) was that our decision to show all the services owned by a team in a single document was counter-productive. Talking about each service separately helped people feel less overwhelmed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580760750.480700",
        "client_msg_id": "e2cf8486-f056-4495-8d8f-857da40e5e11",
        "text": "I thought I'd give others a chance first :smile:\n\nThe Agaram Paradox: to get to better interfaces, expose your implementations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h0H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought I'd give others a chance first "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe Agaram Paradox: to get to better interfaces, expose your implementations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UC2A2ARPT",
                    "UKJGU23KP",
                    "UFB8STN7K",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580760834.480900",
        "client_msg_id": "ce1af757-e9da-4c72-9bdd-19c190377aa4",
        "text": "I think things that give the user a good experience can be essential complexity, but it’s more debatable. We _know_ that not crashing or corrupting data is essential, but you can always argue (and sometimes you’ll be right) that a particular thing that makes an application feel nice to use isn’t really essential.\n\n(Also, what’s essential now isn’t the same as what was essential in the past. At lunch, I watched half of Modern Compiler Construction, where Anders Hejlsberg compares a 32kb compiler to a modern compiler--what users want has changed).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xkl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think things that give the user a good experience can be essential complexity, but it’s more debatable. We "
                            },
                            {
                                "type": "text",
                                "text": "know",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that not crashing or corrupting data is essential, but you can always argue (and sometimes you’ll be right) that a particular thing that makes an application feel nice to use isn’t really essential.\n\n(Also, what’s essential now isn’t the same as what was essential in the past. At lunch, I watched half of Modern Compiler Construction, where Anders Hejlsberg compares a 32kb compiler to a modern compiler--what users want has changed)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580761003.481100",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580761039.000000"
        },
        "client_msg_id": "bd4f4172-42d3-4aa0-aeca-08f1e673782b",
        "text": "Yeah, user mental model feels like a superior scalpel here than user experience for teasing apart the two categories. Experience may be at a local optimum. But what's in the user's head you can never get away from.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1BUgG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, user mental model feels like a superior scalpel here than user experience for teasing apart the two categories. Experience may be at a local optimum. But what's in the user's head you can never get away from."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580761361.481400",
        "client_msg_id": "9ef0aa2a-0742-497c-b9ad-a6a8ce014cc9",
        "text": "I guess I’m assuming that if something doesn’t match your mental model, you’ll probably have a bad experience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UKn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I’m assuming that if something doesn’t match your mental model, you’ll probably have a bad experience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1580761459.481600",
        "client_msg_id": "c456bcad-9ac9-4e63-b774-85a7daebe0f1",
        "text": "I think we’re describing a property of a system. Since users are different, we can’t design something that will seem essential to all users, but I think we can design systems that empower users to strip away the pieces that they feel are inessential. Programming itself, I believe, has this property. I can choose to use a high-level library, or I can look at its dependencies and use those, or I can re-implement the small piece I need from scratch. Emacs, to the extent that its functionality is implemented as modes on top of a fairly bare-bones editor also has this property.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N8\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we’re describing a property of a system. Since users are different, we can’t design something that will seem essential to all users, but I think we can design systems that empower users to strip away the pieces that they feel are inessential. Programming itself, I believe, has this property. I can choose to use a high-level library, or I can look at its dependencies and use those, or I can re-implement the small piece I need from scratch. Emacs, to the extent that its functionality is implemented as modes on top of a fairly bare-bones editor also has this property."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580761660.481800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580761665.000000"
        },
        "client_msg_id": "eea37f3c-8cca-467a-937a-5b0be53d0421",
        "text": "With respect to mental models..\n\nI have a blog post draft I've been sitting on for over a year. It's about the positive value of flawed mental models, and by extension that harm that can come from us toolmakers being too concerned with instilling correct mental models in the users of our tools.\n\nA motivating example:\n&gt; Hammers can hit nails. That's their very purpose. But they can also hit screws, which is a great way to make a screw stay put while you reach for the screwdriver. They can also dent and deform sheet metal, which is useful for crafting a steel drum. They can knock loose a stuck fitting or lid, especially when hitting the free end of a long wrench on a stuck nut. They can punch a hole in drywall, making it easier to tear down. They can also smash your hand.\n&gt; Hammers are tools for working with nails. This is a conceptual constraint placed on hammers by their designers. Hammers are designed with this specific intent in mind. But sometimes, hammers are just tools for amplifying the force of your arm. Sometimes, hammers are but tools for surviving a forceful impact.\nThe [unfinished] draft, if you're interested: <https:\/\/ivanish.ca\/mental-models\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sATtZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With respect to mental models..\n\nI have a blog post draft I've been sitting on for over a year. It's about the positive value of flawed mental models, and by extension that harm that can come from us toolmakers being too concerned with instilling correct mental models in the users of our tools.\n\nA motivating example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hammers can hit nails. That's their very purpose. But they can also hit screws, which is a great way to make a screw stay put while you reach for the screwdriver. They can also dent and deform sheet metal, which is useful for crafting a steel drum. They can knock loose a stuck fitting or lid, especially when hitting the free end of a long wrench on a stuck nut. They can punch a hole in drywall, making it easier to tear down. They can also smash your hand.\nHammers are tools for working with nails. This is a conceptual constraint placed on hammers by their designers. Hammers are designed with this specific intent in mind. But sometimes, hammers are just tools for amplifying the force of your arm. Sometimes, hammers are but tools for surviving a forceful impact."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe [unfinished] draft, if you're interested: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ivanish.ca\/mental-models\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580761779.482300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580761863.000000"
        },
        "client_msg_id": "f4aa1132-f425-4108-837e-5e3cb01ae2eb",
        "text": "So to that end, I don't think mental models are a superior scalpel — if these mental models are what drive the distinction between essential and accidental, that's going to force us to be even more careful about mental model correctness, and then lose the benefit of seeing our tool users as unreliable narrators, a font of happy accidents, or intentional creative misusers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WGPI7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to that end, I don't think mental models are a superior scalpel — if these mental models are what drive the distinction between essential and accidental, that's going to force us to be even more careful about mental model correctness, and then lose the benefit of seeing our tool users as unreliable narrators, a font of happy accidents, or intentional creative misusers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580762000.482600",
        "client_msg_id": "d1cd463e-58bd-421a-b440-0460f7c109d3",
        "text": "I think that’s right. I think it matters when the mental model has too much slippage. Or when the mental model and the underlying model differ in ways that result in the user being surprised\/stuck.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WDEXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that’s right. I think it matters when the mental model has too much slippage. Or when the mental model and the underlying model differ in ways that result in the user being surprised\/stuck."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580762123.482800",
        "client_msg_id": "354c8d32-7026-49d7-b033-f337953eadc7",
        "text": "Surprise can lead to excitement (further to what Chris Granger was talking about above), and being stuck can lead to creative alternatives (like my hammer examples). I see both outcomes _constantly_ from the artists on my team.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gnw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Surprise can lead to excitement (further to what Chris Granger was talking about above), and being stuck can lead to creative alternatives (like my hammer examples). I see both outcomes "
                            },
                            {
                                "type": "text",
                                "text": "constantly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the artists on my team."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580762349.483300",
        "client_msg_id": "820d3bb7-2015-41ad-91bf-39b6a896a70f",
        "text": "&gt; The Agaram Paradox: to get to better interfaces, expose your implementations.\nDiscuss!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1580795956.493300",
        "reply_users": [
            "UC2A2ARPT",
            "UD31LGQKB",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1580762413.483400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580762438.483800"
            },
            {
                "user": "UD31LGQKB",
                "ts": "1580777008.489700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580784726.491000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580794095.492500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1580795956.493300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vVK5",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Agaram Paradox: to get to better interfaces, expose your implementations."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDiscuss!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580762413.483400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580762418.000000"
        },
        "client_msg_id": "53b087a6-0ac0-4af9-9ea0-273c4be979e8",
        "text": "(Backlink: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1580760750480700?thread_ts=1580718026.447200&amp;cid=C5T9GPWFL>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3k4E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Backlink: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1580760750480700?thread_ts=1580718026.447200&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580762438.483800",
        "client_msg_id": "0f736c5e-46fc-420c-80fa-29b307177a6f",
        "text": "<@UCUSW7WVD> — I'd love a fuller explanation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PIHUB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " — I'd love a fuller explanation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580762541.484000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580762664.000000"
        },
        "client_msg_id": "74e326af-3b2d-4ccc-9a95-c35fbf57c65a",
        "text": "<@UC2A2ARPT> I totally agree with that! By \"mental model\" I mean what people come to the computer _with_ (which is usually about a problem), and not what the computer tries to 'instill' in them (which I think of more as the information architecture of a _solution_)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I totally agree with that! By \"mental model\" I mean what people come to the computer "
                            },
                            {
                                "type": "text",
                                "text": "with",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (which is usually about a problem), and not what the computer tries to 'instill' in them (which I think of more as the information architecture of a "
                            },
                            {
                                "type": "text",
                                "text": "solution",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1580762589.484200",
        "client_msg_id": "46f0a3cb-51aa-457a-a3f2-d741489fef97",
        "text": "I don’t know how seriously we’re disagreeing. If you’re just saying that can sometimes be true, I imagine so. But if you think it’s the norm, I’m going to disagree and say it’s “man bites dog”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MVm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t know how seriously we’re disagreeing. If you’re just saying that can sometimes be true, I imagine so. But if you think it’s the norm, I’m going to disagree and say it’s “man bites dog”."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHZUS56SV",
        "type": "message",
        "ts": "1580764158.484700",
        "client_msg_id": "ccd0e49d-7090-4882-801a-1817aace08dd",
        "text": "I'm not sure to agree with \"For that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nI always understood accidental\/incidental complexity as relative to a problem that a human is trying to solve. So the problem and the fact that a human is trying to solve it are important in order to consider whether an abstraction is essential or not.\n\nYou will always express your computation using some kind of abstraction. If your solution is expressed in the language of the domain, I would consider that there is little accidental complexity. But as soon as those abstractions get in your way and you see yourself doing more and more housekeeping then you have accidental complexity and a different abstraction is probably necessary to get rid of it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga164d5ab3ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0a164d5ab3ffe877513fe9c400908eaa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Benoît Fleury",
            "display_name": "Benoît Fleury",
            "team": "T5TCAFTA9",
            "name": "me1796",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z4dnz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure to agree with \"For that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nI always understood accidental\/incidental complexity as relative to a problem that a human is trying to solve. So the problem and the fact that a human is trying to solve it are important in order to consider whether an abstraction is essential or not.\n\nYou will always express your computation using some kind of abstraction. If your solution is expressed in the language of the domain, I would consider that there is little accidental complexity. But as soon as those abstractions get in your way and you see yourself doing more and more housekeeping then you have accidental complexity and a different abstraction is probably necessary to get rid of it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHZUS56SV",
        "type": "message",
        "ts": "1580764636.484900",
        "client_msg_id": "44fa7cb9-f87a-4318-b91d-6c769b09c9dc",
        "text": "And that's no different from scientific theories. To take the famous example of Ptolemaic epicycles. If you want to predict the position of a planet in our solar system, an heliocentric model is not \"strictly necessary\". It is just much easier because you have a lot less accidental complexity.\n\nWhat is also interesting in this example is that the abstractions of the geocentric model are easier than the heliocentric ones. They just don't scale as well to solve actual problems. Illustrating that what seems harder at first can make things simpler later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga164d5ab3ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0a164d5ab3ffe877513fe9c400908eaa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Benoît Fleury",
            "display_name": "Benoît Fleury",
            "team": "T5TCAFTA9",
            "name": "me1796",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5bB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And that's no different from scientific theories. To take the famous example of Ptolemaic epicycles. If you want to predict the position of a planet in our solar system, an heliocentric model is not \"strictly necessary\". It is just much easier because you have a lot less accidental complexity.\n\nWhat is also interesting in this example is that the abstractions of the geocentric model are easier than the heliocentric ones. They just don't scale as well to solve actual problems. Illustrating that what seems harder at first can make things simpler later."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580766205.485400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580766271.000000"
        },
        "client_msg_id": "aeb9f885-1a75-4c47-b83c-ea1c1716c00b",
        "text": "&gt; abstractions of the geocentric model are easier than the heliocentric ones\nI don't follow. Would you mind explaining that point a bit more? Do you mean that we developed the geocentric model first, and thus it was \"easier\" to discover than the later, more elusive heliocentric one?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEUZw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "abstractions of the geocentric model are easier than the heliocentric ones"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow. Would you mind explaining that point a bit more? Do you mean that we developed the geocentric model first, and thus it was \"easier\" to discover than the later, more elusive heliocentric one?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHZUS56SV",
        "type": "message",
        "ts": "1580767174.487100",
        "client_msg_id": "44A37D2C-5F6D-4C36-A203-FAA51654A0BA",
        "text": "Easier because circles are easier to describe than ellipses.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga164d5ab3ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0a164d5ab3ffe877513fe9c400908eaa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Benoît Fleury",
            "display_name": "Benoît Fleury",
            "team": "T5TCAFTA9",
            "name": "me1796",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tbt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Easier because circles are easier to describe than ellipses."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHZUS56SV",
        "type": "message",
        "ts": "1580767256.488100",
        "client_msg_id": "D931193F-820A-4C35-9E17-41B07F3FF41B",
        "text": "They’re neat and simple compared to an ellipse.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga164d5ab3ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0a164d5ab3ffe877513fe9c400908eaa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Benoît Fleury",
            "display_name": "Benoît Fleury",
            "team": "T5TCAFTA9",
            "name": "me1796",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qxlB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They’re neat and simple compared to an ellipse."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1580767300.488400",
        "client_msg_id": "67af54ae-3e99-457e-bd3a-9809d37b2970",
        "text": "Software is the hardest thing. Fuller version: cheap complexity has large costs that are hidden, long-term, and compounding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XgrL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Software is the hardest thing. Fuller version: cheap complexity has large costs that are hidden, long-term, and compounding."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1580769494.488800",
        "client_msg_id": "30933ac0-819f-4dc6-b11b-f82078294fec",
        "text": "Removing complexity from one part of a system often has the side effect of introducing complexity somewhere else.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RSrK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Removing complexity from one part of a system often has the side effect of introducing complexity somewhere else."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD31LGQKB",
        "type": "message",
        "ts": "1580777008.489700",
        "client_msg_id": "0a17af32-77ab-41f0-81a5-93e655868f24",
        "text": "Suggestive! Not sure it's related but in a projectional editing context I increasingly think of exposing configuration as choosing some projection of the source implementation admitting bidirectional transformation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7e6e0f8e031",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-19\/699535022069_b7e6e0f8e031cdcf896f_72.jpg",
            "first_name": "",
            "real_name": "andrew blinn",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "me1856",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qyRS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Suggestive! Not sure it's related but in a projectional editing context I increasingly think of exposing configuration as choosing some projection of the source implementation admitting bidirectional transformation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1580778870.489900",
        "client_msg_id": "e02b04e3-de60-41c1-89d4-8b50fe1b5042",
        "text": "I don't agree with Ivan's definition of complexity.\n\nThe first sentence of Out Of The Tar Pit is \"Complexity is the single major difficulty in the successful development of large-scale software systems.\"\n\nThe goal of this paper is to explore ways of reducing complexity, so as to make software engineering less difficult.\n\nIvan said \"Ivan: abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nThat can't be right. Programming without abstractions is virtually impossible. The only \"programming languages\" that lack abstraction mechanisms are mathematical formalisms like Turing machines and the SKI combinator calculus, and a few esoteric languages like Brainfuck.\n\nIf you eliminate Ivan's kind of complexity from programming, then you are reduced to programming in Brainfuck. Brainfuck programs are not less complex than, say, well written Lisp programs, in any way that I can see. They are actually far *more* complicated, using any reasonable metric for measuring the complexity of a program.\n\nAbstractions are our principle tool in eliminating complexity from software. Tar Pit advocates the use of functional programming and the relational model to reduce complexity, and these are methodologies for constructing software abstractions.\n\nWhatever complexity Ivan is talking about, it's not the kind of complexity that Tar Pit is teaching us to eliminate from software.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XBRMZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't agree with Ivan's definition of complexity.\n\nThe first sentence of Out Of The Tar Pit is \"Complexity is the single major difficulty in the successful development of large-scale software systems.\"\n\nThe goal of this paper is to explore ways of reducing complexity, so as to make software engineering less difficult.\n\nIvan said \"Ivan: abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nThat can't be right. Programming without abstractions is virtually impossible. The only \"programming languages\" that lack abstraction mechanisms are mathematical formalisms like Turing machines and the SKI combinator calculus, and a few esoteric languages like Brainfuck.\n\nIf you eliminate Ivan's kind of complexity from programming, then you are reduced to programming in Brainfuck. Brainfuck programs are not less complex than, say, well written Lisp programs, in any way that I can see. They are actually far "
                            },
                            {
                                "type": "text",
                                "text": "more",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " complicated, using any reasonable metric for measuring the complexity of a program.\n\nAbstractions are our principle tool in eliminating complexity from software. Tar Pit advocates the use of functional programming and the relational model to reduce complexity, and these are methodologies for constructing software abstractions.\n\nWhatever complexity Ivan is talking about, it's not the kind of complexity that Tar Pit is teaching us to eliminate from software."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580780491.490500",
        "client_msg_id": "2c720bd6-3531-4be0-bfa2-c51b5a140517",
        "text": "Episode #44 — Making Your Own Tools: Devine Lu Linvega\n\n<https:\/\/futureofcoding.org\/episodes\/044>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580780491.490500",
        "reply_count": 14,
        "reply_users_count": 7,
        "latest_reply": "1581199614.053900",
        "reply_users": [
            "UMWF81HTP",
            "UC2A2ARPT",
            "UBN9AFS0N",
            "UA14TGLTC",
            "USUMN6XLH",
            "U8A5MS6R1",
            "UMPQ9A65N"
        ],
        "replies": [
            {
                "user": "UMWF81HTP",
                "ts": "1580790264.491900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580793328.492300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1580807963.496300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1580807981.496500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1580808020.496700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1580826819.497600"
            },
            {
                "user": "USUMN6XLH",
                "ts": "1580856952.006700"
            },
            {
                "user": "USUMN6XLH",
                "ts": "1580856963.007200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580859990.008000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580873766.015000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580873895.015200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1580884299.018100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1580885690.019700"
            },
            {
                "user": "UMPQ9A65N",
                "ts": "1581199614.053900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dFa\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Episode #44 — Making Your Own Tools: Devine Lu Linvega\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/044"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "UD31LGQKB",
                    "UE3KC0VK6",
                    "UGLSY9X3J",
                    "UA14TGLTC",
                    "UMWF81HTP",
                    "UP00ZLX6G",
                    "UMPQ9A65N",
                    "UFPRPSA4S",
                    "U8A5MS6R1",
                    "UBSMEUXAA",
                    "U85HCL7JP"
                ],
                "count": 11
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580784726.491000",
        "client_msg_id": "9964d333-4594-4085-9acb-d7d32e52bf64",
        "text": "Ok, I guess it was a bad idea in this case to say, \"responses in thread plz\" :smile:\n\nThis idea is basically at the heart of everything I write or do about Mu. Typically we tend to emphasize interfaces, identify them with 'good practice' and therefore they become a means of signalling among programmers. But at the start a new sub-system often has just one caller. Even if it's a function, it doesn't necessarily form a good abstraction. You often don't have a sense for what other callers may need yet. Prematurely thinking of it as an interface makes us reluctant to modify it, because that would signal that we didn't know what we were doing before. (This is particularly true if we also packaged up the function prematurely into a 'package'. Now signature changes require incrementing the major version, which is more visible to others.)\n\nThe alternative, better approach is to admit up front that we're all fools together and think of functions at the start as just loose bags of implementation rather than an interface. Then we're more willing to modify it, less likely to package it. As a result the interface has a chance to change. It gets time to grow into what it needs to be. And it stabilizes when it makes sense for it to stabilize.\n\nAbstractions should be names for algorithms so we don't have to think about the details all the time. Abstractions should rarely turn into frozen interfaces that we pass on to others so they _never_ have to think about the details. That turns a useful technical idea into a social artifact. We need to be _a lot_ less promiscuous about getting into social counterparty relationships.\n\n(I wrote about this long ago: <http:\/\/akkartik.name\/post\/libraries>, <http:\/\/akkartik.name\/post\/libraries2>. Hopefully I've gotten better at describing it over the years.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "096H8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, I guess it was a bad idea in this case to say, \"responses in thread plz\" "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis idea is basically at the heart of everything I write or do about Mu. Typically we tend to emphasize interfaces, identify them with 'good practice' and therefore they become a means of signalling among programmers. But at the start a new sub-system often has just one caller. Even if it's a function, it doesn't necessarily form a good abstraction. You often don't have a sense for what other callers may need yet. Prematurely thinking of it as an interface makes us reluctant to modify it, because that would signal that we didn't know what we were doing before. (This is particularly true if we also packaged up the function prematurely into a 'package'. Now signature changes require incrementing the major version, which is more visible to others.)\n\nThe alternative, better approach is to admit up front that we're all fools together and think of functions at the start as just loose bags of implementation rather than an interface. Then we're more willing to modify it, less likely to package it. As a result the interface has a chance to change. It gets time to grow into what it needs to be. And it stabilizes when it makes sense for it to stabilize.\n\nAbstractions should be names for algorithms so we don't have to think about the details all the time. Abstractions should rarely turn into frozen interfaces that we pass on to others so they "
                            },
                            {
                                "type": "text",
                                "text": "never",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have to think about the details. That turns a useful technical idea into a social artifact. We need to be "
                            },
                            {
                                "type": "text",
                                "text": "a lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " less promiscuous about getting into social counterparty relationships.\n\n(I wrote about this long ago: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/libraries"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/libraries2"
                            },
                            {
                                "type": "text",
                                "text": ". Hopefully I've gotten better at describing it over the years.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580789094.491400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580789353.000000"
        },
        "client_msg_id": "cb5a151c-8edc-453c-8101-5fd16086c300",
        "text": "Here's how I think about complexity.\n\nHow many different ideas do you need to know in order to understand what a program does?\n\nThe second-least complex way to write a piece of software would be to push a button and have the exact program you need be spit out. You hardly need to know any ideas in that case — push button, get program that magically does what you want. All the baggage and pain and coordination and effort of software development is gone, like magic.\n\nEvery time you introduce a new idea that needs to be understood — whether it's functions, function composition, currying, partial application, the existence of one particular function in your codebase, the history of that function and previous issues it had that are now avoided by doing things in a slightly surprising way, the syntax for the documentation explaining that change, the fact that the change was made to bring the resulting program closer in line with the end user expectations for what this program does — you add an additional complexity that you, the programmer, need to deal with to work on this program, which you wouldn't need to deal with in the magical example above. _All_ of this is incidental complexity.\n\nMy whole point is that Out of the Tar Pit is wrong. They say that reducing incidental complexity is crucially important. I say that it's not — instead, you want to be empowered to choose exactly what incidental complexity you need to deal with.\n\nWhen you draw a line and say \"These ideas are incidental complexity because they meet criteria X, and these ideas are not because they don't,\" you're making a value judgment. When you read Tar Pit with that lens, is painfully clear what values the authors hold (\"Mutable state is evil\"), and they of course base their _what is incidental_ selection criteria on those values. Hogwash. Incidental complexity, by their own definition, is broad enough to include mutable state, immutability, any even the purely theoretical notion that state, and change, are concepts that exist.\n\n(The absolutely least complex way to write a piece of software is to not have to do anything. Hat tip to Steve Jobs, paraphrased _the line of code that has the least bugs, runs the fastest, requires the least documentation, etc etc is the line you never wrote._)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e5K5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's how I think about complexity.\n\nHow many different ideas do you need to know in order to understand what a program does?\n\nThe second-least complex way to write a piece of software would be to push a button and have the exact program you need be spit out. You hardly need to know any ideas in that case — push button, get program that magically does what you want. All the baggage and pain and coordination and effort of software development is gone, like magic.\n\nEvery time you introduce a new idea that needs to be understood — whether it's functions, function composition, currying, partial application, the existence of one particular function in your codebase, the history of that function and previous issues it had that are now avoided by doing things in a slightly surprising way, the syntax for the documentation explaining that change, the fact that the change was made to bring the resulting program closer in line with the end user expectations for what this program does — you add an additional complexity that you, the programmer, need to deal with to work on this program, which you wouldn't need to deal with in the magical example above. "
                            },
                            {
                                "type": "text",
                                "text": "All",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of this is incidental complexity.\n\nMy whole point is that Out of the Tar Pit is wrong. They say that reducing incidental complexity is crucially important. I say that it's not — instead, you want to be empowered to choose exactly what incidental complexity you need to deal with.\n\nWhen you draw a line and say \"These ideas are incidental complexity because they meet criteria X, and these ideas are not because they don't,\" you're making a value judgment. When you read Tar Pit with that lens, is painfully clear what values the authors hold (\"Mutable state is evil\"), and they of course base their "
                            },
                            {
                                "type": "text",
                                "text": "what is incidental",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " selection criteria on those values. Hogwash. Incidental complexity, by their own definition, is broad enough to include mutable state, immutability, any even the purely theoretical notion that state, and change, are concepts that exist.\n\n(The absolutely least complex way to write a piece of software is to not have to do anything. Hat tip to Steve Jobs, paraphrased "
                            },
                            {
                                "type": "text",
                                "text": "the line of code that has the least bugs, runs the fastest, requires the least documentation, etc etc is the line you never wrote.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMWF81HTP",
        "type": "message",
        "ts": "1580790264.491900",
        "client_msg_id": "69b1cbf6-fc12-48a7-a6a7-1996231eb930",
        "text": "This was a great episode. Beyond my general fascination with Devine's work, I really liked the sonic flairs you added, I think it adds a lot of personality and a hand-crafted feel to the podcast(reminds me a bit of Radiolab's production!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4022671f3400",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-03\/775814402657_4022671f340032b9eb75_72.jpg",
            "first_name": "yoshiki",
            "real_name": "yoshiki",
            "display_name": "yoshiki",
            "team": "T5TCAFTA9",
            "name": "yoshikischmitz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cepoZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was a great episode. Beyond my general fascination with Devine's work, I really liked the sonic flairs you added, I think it adds a lot of personality and a hand-crafted feel to the podcast(reminds me a bit of Radiolab's production!)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580790725.492100",
        "client_msg_id": "381f57ed-046a-4b0f-b7ab-9a523aa49f17",
        "text": "I'm rereading Tar Pit for the umpteenth time. Never liked it, and jeez it has more italics than a Robert Ludlum novel.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "23+fR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm rereading Tar Pit for the umpteenth time. Never liked it, and jeez it has more italics than a Robert Ludlum novel."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580793328.492300",
        "client_msg_id": "e83f16db-e21a-4df6-bbaf-0388de5bb3c8",
        "text": "That means a lot. Thank you. It's going to take me a while to hone-in on exactly how this show should sound, but it's something I'm going to keep exploring. I'm sure there will be plenty of cases where I get it wrong, but that's the price you have to pay to eventually get it right.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0QKjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That means a lot. Thank you. It's going to take me a while to hone-in on exactly how this show should sound, but it's something I'm going to keep exploring. I'm sure there will be plenty of cases where I get it wrong, but that's the price you have to pay to eventually get it right."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UMWF81HTP",
                    "UA14TGLTC",
                    "U85HCL7JP"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1580794095.492500",
        "client_msg_id": "d844f5f5-97ba-48b9-9cee-9febde85b97d",
        "text": "That rings quite true in my experience. It's one of the reasons I'm so happy to be the only programmer on my team, and one with a strong case of NIH at that — all my interfaces are as permeable as I want them to be, since I own all code inside and out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x5bW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That rings quite true in my experience. It's one of the reasons I'm so happy to be the only programmer on my team, and one with a strong case of NIH at that — all my interfaces are as permeable as I want them to be, since I own all code inside and out."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580795956.493300",
        "client_msg_id": "5b6fc6c2-0688-4a80-b87f-68cc63212996",
        "text": "On my cynical days I think interfaces were invented by hired-gun programmers to spread responsibility around so that screwups can't have accountability or consequences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w+8P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On my cynical days I think interfaces were invented by hired-gun programmers to spread responsibility around so that screwups can't have accountability or consequences."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580796314.493500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580796337.000000"
        },
        "client_msg_id": "7f831447-3c14-42cf-b7a4-cb94d3dac653",
        "text": "<@UC2A2ARPT> My _a priori_ biases are very similar to yours. However when I read your last comment my first reaction was, \"that's not what they mean by incidental complexity.\" So I went back to reread the paper.\n\nYou're right, they do say \"accidental complexity is all the rest\" except the essence of the problem as seen by users. Which is identical to what I was saying above, and opens them up to your interpretation. And that seems like the most acute criticism I've seen so far of this paper: the terms are so broad that they're very open to interpretation, and the authors' interpretation serves only to reveal their biases.\n\nThe authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". _But_ the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -&gt; Formal requirements\" may indicate that formal requirements are _themselves_ accidental complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TMY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " My "
                            },
                            {
                                "type": "text",
                                "text": "a priori",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " biases are very similar to yours. However when I read your last comment my first reaction was, \"that's not what they mean by incidental complexity.\" So I went back to reread the paper.\n\nYou're right, they do say \"accidental complexity is all the rest\" except the essence of the problem as seen by users. Which is identical to what I was saying above, and opens them up to your interpretation. And that seems like the most acute criticism I've seen so far of this paper: the terms are so broad that they're very open to interpretation, and the authors' interpretation serves only to reveal their biases.\n\nThe authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". "
                            },
                            {
                                "type": "text",
                                "text": "But",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -> Formal requirements\" may indicate that formal requirements are "
                            },
                            {
                                "type": "text",
                                "text": "themselves",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " accidental complexity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UKJGU23KP",
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "UJBAJNFLK"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580797713.493800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580797749.000000"
        },
        "client_msg_id": "1a7b0474-50f9-4ced-a199-fac30f5be652",
        "text": "To push back one tiny part of your comment, though:\n\n&gt; Every time you introduce a new idea that needs to be understood — whether it's functions, function composition, currying, partial application, ...\nThese seem like accidental complexity for a music-creation app, but essential complexity for a programming language.\n\n&gt; ...the existence of one particular function in your codebase, the history of that function and previous issues it had that are now avoided by doing things in a slightly surprising way, the syntax for the documentation explaining that change, the fact that the change was made to bring the resulting program closer in line with the end user expectations for what this program does — you add an additional  complexity that you, the programmer, need to deal with to work on this program...\nThese seem like accidental complexity for the users of a program, but potentially essential complexity for someone working with it given our current context (the world already exists, the codebase already exists in the world, etc.)\n\nSo the context seems crucial here. What is the system under consideration, who is the target audience, all this affects where the line is.\n\nThe further to one extreme you draw the line, the less useful the distinction becomes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bVlv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To push back one tiny part of your comment, though:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Every time you introduce a new idea that needs to be understood — whether it's functions, function composition, currying, partial application, ..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These seem like accidental complexity for a music-creation app, but essential complexity for a programming language.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...the existence of one particular function in your codebase, the history of that function and previous issues it had that are now avoided by doing things in a slightly surprising way, the syntax for the documentation explaining that change, the fact that the change was made to bring the resulting program closer in line with the end user expectations for what this program does — you add an additional  complexity that you, the programmer, need to deal with to work on this program..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThese seem like accidental complexity for the users of a program, but potentially essential complexity for someone working with it given our current context (the world already exists, the codebase already exists in the world, etc.)\n\nSo the context seems crucial here. What is the system under consideration, who is the target audience, all this affects where the line is.\n\nThe further to one extreme you draw the line, the less useful the distinction becomes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1580798329.494100",
        "client_msg_id": "d289e3cd-7d64-4342-801f-fa8f4458a96b",
        "text": "Perhaps my fundamental criticism of this whole dichotomy is that it treats \"users\" as immutable rather than capable of learning. As <@UJN1TAYEQ> points out, if you treat the user's goals as gospel (say that they want to make this one specific app), then maybe teaching them programming shouldn't include functions. The insanity of that proposition puts this whole framing in sharp relief for me. To some extent someone wanting to do something in a new area needs to learn from its traditions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6sOq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps my fundamental criticism of this whole dichotomy is that it treats \"users\" as immutable rather than capable of learning. As "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " points out, if you treat the user's goals as gospel (say that they want to make this one specific app), then maybe teaching them programming shouldn't include functions. The insanity of that proposition puts this whole framing in sharp relief for me. To some extent someone wanting to do something in a new area needs to learn from its traditions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1580802925.494500",
        "edited": {
            "user": "UC6997THT",
            "ts": "1580804174.000000"
        },
        "client_msg_id": "b4ff7ffa-fd7a-4f08-8e86-228bb064c370",
        "text": "My personal bias is that JBlow doesn't really know what he's talking about and is ranting about the same things I ranted about before I got schooled. Or in other words, when all my experience was game dev I had a similar opinions (GC is shit, memory allocation should be avoided at all costs, languages far from the metal suck, ...)  and that it took getting out of game dev to accept that each thing has their place.\n\nAs one example back when JAI (his language) started he mentioned he didn't care about memory errors because he doesn't make those kinds of bugs. I nodded in agreement when I read that. But, thinking about it more I'm just guessing most games he worked on first off have to only deal with a limited number of situations compared to many other apps, and are coded by a fairly small team. Compare say to Chrome which in 2013 had at least 700 programmers working on it. You just can't expected 700 programmers to all know exactly what assumptions each other were making. You arguably need the language to help you find, prevent, enforce the very issues he doens't care about.\n\nAs another example he doesn't care about security what so ever AFAICT. About bad data allowing an app to be compromised, About sandboxing and all the things needed to make an app\/os safe from exploitation. He probably uses very few 3rd party libraries and those few he does use are *probably* trustworth. But, aruably most devs throw libs together and many of those libs do bad things (install hooks for analytics, report data they shouldn't, ...). Mobile apps on both iOS and Android seem to be full of those issues from 3rd party libs.\n\nOther examples include hating on GC and yet 10s of 1000s of games have shipped via Unity with GC (and Unreal has GC as well). That includes hit 60fps action games. Maybe you could argue hating on load times (I hate load times) but it's never affected Valve's old games all of which have horrible load pauses (Half Life, Half Life 2, Portal, etc... basically all Source Engine games)\n\nHe sees browsers as bloated (and I'm not saying they aren't to some degree) but before I worked on one I had no idea all the issues they have to deal with that I never had to deal with in games. Threats from all levels. Untrusted data everywhere, bad videos, bad jpegs, bad network requests, bad code, handling every language on the planet and many other things.\n\nHe had a rant speech someone else posted here once and in it he had these conflicting rants. He ranted that he was upset that each platform has a different GPU API. But at the same time he wants his own engine. He doesn't want to use Unreal or Unity. To put it another way, he's upset that different people have different ideas for how you should access the GPU and thinks there should be just one way but there shouldn't be just one way to make a game engine. I'd argue the 2 go hand in hand. There are muliple game engines because their are different opinions on what is best. Similarly there are mulitple GPU APIs because their are different opinions on what is best. To have one of either would require commitees to argue forever about what the one true way is and stifle innovation. By having multiple of each different teams can advance faster by not having to coordinate. Microsoft doesn't have to wait for some committee to approve a new feature. They just add what they want to DirectX and the others play catch-up. Apple doesn't have to wait for anyone else to add stuff to Metal.\n\nI could go on, like on the ridiculousness of comparing 8bit computers booting up instantly to today's machines. Yes my Atari 800, Apple II and C64 turned on immediately. They didn't connect to hard drives, sd cards, network storage. They had a 320x240 screen with max 4 bits of color. They didn't draw 100k+ international characters, didn't support infinite input devices, multiple monitors, virtual monitors over a network. They didn't multitask. Taking a step up to 80s PCs we no longer have to run QEMM to optimize how are memory is used or set dip switches on our PCI cards to allocate interrupts. That's not to say things couldn't be more optimized if you started from scratch but if you start digging through all the pieces you'll uncover why they are the way they are. Why for example it's better that there is a full computer in your hard drive and it's not just a dumb device run by your PC and why there is a negotiation for how to talk to it etc... as just one example of why todays machines are not comparible to 8bit computers and to see some kind of ideal as more like the 80s is to not really think deeply about the issue.\n\nAnyway I liked the idea of JAI optimizing for programmer joy but I don't know if JAI will actually be joyful except for people who drink his kool-aid.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "02r=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My personal bias is that JBlow doesn't really know what he's talking about and is ranting about the same things I ranted about before I got schooled. Or in other words, when all my experience was game dev I had a similar opinions (GC is shit, memory allocation should be avoided at all costs, languages far from the metal suck, ...)  and that it took getting out of game dev to accept that each thing has their place.\n\nAs one example back when JAI (his language) started he mentioned he didn't care about memory errors because he doesn't make those kinds of bugs. I nodded in agreement when I read that. But, thinking about it more I'm just guessing most games he worked on first off have to only deal with a limited number of situations compared to many other apps, and are coded by a fairly small team. Compare say to Chrome which in 2013 had at least 700 programmers working on it. You just can't expected 700 programmers to all know exactly what assumptions each other were making. You arguably need the language to help you find, prevent, enforce the very issues he doens't care about.\n\nAs another example he doesn't care about security what so ever AFAICT. About bad data allowing an app to be compromised, About sandboxing and all the things needed to make an app\/os safe from exploitation. He probably uses very few 3rd party libraries and those few he does use are "
                            },
                            {
                                "type": "text",
                                "text": "probably",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " trustworth. But, aruably most devs throw libs together and many of those libs do bad things (install hooks for analytics, report data they shouldn't, ...). Mobile apps on both iOS and Android seem to be full of those issues from 3rd party libs.\n\nOther examples include hating on GC and yet 10s of 1000s of games have shipped via Unity with GC (and Unreal has GC as well). That includes hit 60fps action games. Maybe you could argue hating on load times (I hate load times) but it's never affected Valve's old games all of which have horrible load pauses (Half Life, Half Life 2, Portal, etc... basically all Source Engine games)\n\nHe sees browsers as bloated (and I'm not saying they aren't to some degree) but before I worked on one I had no idea all the issues they have to deal with that I never had to deal with in games. Threats from all levels. Untrusted data everywhere, bad videos, bad jpegs, bad network requests, bad code, handling every language on the planet and many other things.\n\nHe had a rant speech someone else posted here once and in it he had these conflicting rants. He ranted that he was upset that each platform has a different GPU API. But at the same time he wants his own engine. He doesn't want to use Unreal or Unity. To put it another way, he's upset that different people have different ideas for how you should access the GPU and thinks there should be just one way but there shouldn't be just one way to make a game engine. I'd argue the 2 go hand in hand. There are muliple game engines because their are different opinions on what is best. Similarly there are mulitple GPU APIs because their are different opinions on what is best. To have one of either would require commitees to argue forever about what the one true way is and stifle innovation. By having multiple of each different teams can advance faster by not having to coordinate. Microsoft doesn't have to wait for some committee to approve a new feature. They just add what they want to DirectX and the others play catch-up. Apple doesn't have to wait for anyone else to add stuff to Metal.\n\nI could go on, like on the ridiculousness of comparing 8bit computers booting up instantly to today's machines. Yes my Atari 800, Apple II and C64 turned on immediately. They didn't connect to hard drives, sd cards, network storage. They had a 320x240 screen with max 4 bits of color. They didn't draw 100k+ international characters, didn't support infinite input devices, multiple monitors, virtual monitors over a network. They didn't multitask. Taking a step up to 80s PCs we no longer have to run QEMM to optimize how are memory is used or set dip switches on our PCI cards to allocate interrupts. That's not to say things couldn't be more optimized if you started from scratch but if you start digging through all the pieces you'll uncover why they are the way they are. Why for example it's better that there is a full computer in your hard drive and it's not just a dumb device run by your PC and why there is a negotiation for how to talk to it etc... as just one example of why todays machines are not comparible to 8bit computers and to see some kind of ideal as more like the 80s is to not really think deeply about the issue.\n\nAnyway I liked the idea of JAI optimizing for programmer joy but I don't know if JAI will actually be joyful except for people who drink his kool-aid."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    }
]