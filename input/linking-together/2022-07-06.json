[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1657092913.777719",
        "client_msg_id": "8e9b645a-b7e7-4b8e-8ce6-0ff2169971dd",
        "text": "Superficial Simplicity\n\n\"For the last decade I’ve chased and wrestled with the ideal of “simple” software, but I’ve come to see it as a false summit and want to spend some ink on why in the hope that it can lead to a better understanding of simplicity and more intelligent conversations about complexity.\"\n\n<https:\/\/arrdem.com\/2022\/07\/04\/superficial_simplicity\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657092913.777719",
        "reply_count": 37,
        "reply_users_count": 4,
        "latest_reply": "1658215012.796569",
        "reply_users": [
            "UK3LH8CF5",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UK3LH8CF5",
                "ts": "1657119528.661059"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1657176667.596309"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657219158.113779"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657219984.017679"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657221437.712859"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657221966.105879"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657223416.920189"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657223647.723139"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657223732.054699"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657223949.971929"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657224041.066319"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657224071.105889"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657224386.643129"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657225559.418449"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1657233771.241589"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657264483.606359"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657893069.813629"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657893199.610849"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1657896628.062959"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1657900430.162759"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1657919255.701829"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658141162.609439"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658151368.370859"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658152605.053129"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658152734.074259"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658156931.796139"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658157044.096069"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658157313.368549"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1658157318.765909"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658157377.043969"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658157495.859859"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658157519.177989"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658157661.526359"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658157677.286329"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1658157919.670699"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1658210409.276409"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1658215012.796569"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iziy9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Superficial Simplicity\n\n\"For the last decade I’ve chased and wrestled with the ideal of “simple” software, but I’ve come to see it as a false summit and want to spend some ink on why in the hope that it can lead to a better understanding of simplicity and more intelligent conversations about complexity.\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arrdem.com\/2022\/07\/04\/superficial_simplicity\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UK3LH8CF5",
                    "U0245E9RB2B",
                    "U014WA16VNJ",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1657104717.142299",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1657106590.000000"
        },
        "client_msg_id": "c96b5024-d9d3-4826-b999-e118b455dd72",
        "text": "Squeak Smalltalk 6.0 Released\n\nWhat's your reason for not using Smalltalk? :smile:\n\n<https:\/\/twitter.com\/LinqLover\/status\/1544584834034663428>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657104717.142299",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1657121776.319189",
        "reply_users": [
            "UJBAJNFLK",
            "U01HKV85Y1J"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1657110567.145029"
            },
            {
                "user": "U01HKV85Y1J",
                "ts": "1657121776.319189"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/twitter.com\/LinqLover\/status\/1544584834034663428",
                "ts": 1657092696,
                "image_url": "https:\/\/pbs.twimg.com\/media\/FW93s1rWYAIPVMn.png",
                "image_width": 589,
                "image_height": 589,
                "image_bytes": 66251,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/LinqLover\/status\/1544584834034663428",
                "fallback": "<https:\/\/twitter.com\/LinqLover|@LinqLover>: :mega: We finally have released Squeak 6.0! :tada:\n\nSome highlights: high-DPI support, improved TrueType support, new SistaV1 bytecode set, and many improvements to our programming tools for code writing, object inspection, and process debugging. :confetti_ball:\n\n<https:\/\/squeak.org\/> <https:\/\/pbs.twimg.com\/media\/FW93s1rWYAIPVMn.png>",
                "text": ":mega: We finally have released Squeak 6.0! :tada:\n\nSome highlights: high-DPI support, improved TrueType support, new SistaV1 bytecode set, and many improvements to our programming tools for code writing, object inspection, and process debugging. :confetti_ball:\n\n<https:\/\/squeak.org\/> <https:\/\/pbs.twimg.com\/media\/FW93s1rWYAIPVMn.png>",
                "author_name": "Christoph Thiede",
                "author_link": "https:\/\/twitter.com\/LinqLover\/status\/1544584834034663428",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1343538936245874689\/3mfXI406_normal.jpg",
                "author_subname": "@LinqLover",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xv9le",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Squeak Smalltalk 6.0 Released\n\nWhat's your reason for not using Smalltalk? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/LinqLover\/status\/1544584834034663428"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01HKV85Y1J",
                    "U014WA16VNJ",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1657110567.145029",
        "client_msg_id": "d4149936-ad1b-4c24-9fe5-4fbcbc39846a",
        "text": "Squeak actually was my main reason for not using Smalltalk, during the period when I believed it was the only option I had. Its generous use of colors creates visual overload for me. It's only when I discovered Pharo with its much more sober look that I explored Smalltalk more seriously. And since then I have been using it more and more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657104717.142299",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hSi5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Squeak actually was my main reason for not using Smalltalk, during the period when I believed it was the only option I had. Its generous use of colors creates visual overload for me. It's only when I discovered Pharo with its much more sober look that I explored Smalltalk more seriously. And since then I have been using it more and more."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1657119528.661059",
        "client_msg_id": "ab4f4cd4-abbe-4e90-9c9e-ce8a190ff1db",
        "text": "Literally came here to post this. I think this tension is an important one. Simplicity (even in the Rich Hickey sense) isn't an absolute good. Nor do I think it is quite as clear cut objective as Rich thinks.\n\nAnd yet, I think an emphasis on simplicity has helped me tremendously in developing my own taste.\n\nClojure's focus on simplicity has helped it be an incredibly productive tool. But it also introduces many frustrations (error messages, lack of java.lang.Function integration, etc).\n\n\nOther than moderation, how can we better articulate this view point? This distinction isn't quite the same one as worse is better. Are there any good articulations of this middle ground in a more detailed way?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657092913.777719",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iB17",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Literally came here to post this. I think this tension is an important one. Simplicity (even in the Rich Hickey sense) isn't an absolute good. Nor do I think it is quite as clear cut objective as Rich thinks.\n\nAnd yet, I think an emphasis on simplicity has helped me tremendously in developing my own taste.\n\nClojure's focus on simplicity has helped it be an incredibly productive tool. But it also introduces many frustrations (error messages, lack of java.lang.Function integration, etc).\n\n\nOther than moderation, how can we better articulate this view point? This distinction isn't quite the same one as worse is better. Are there any good articulations of this middle ground in a more detailed way?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01HKV85Y1J",
        "type": "message",
        "ts": "1657121776.319189",
        "client_msg_id": "c994a60a-0a8e-427d-8c00-9f9f46e67a1d",
        "text": "Squeak was my first \"real programming\" experience. I absolutely love it, and I'm so happy it continues to exist. Congrats Squeak team! :tada:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf67023e922f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f67023e922f1b8898e41ad2ff927b301.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "David Brooks",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brodavi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657104717.142299",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ks8F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Squeak was my first \"real programming\" experience. I absolutely love it, and I'm so happy it continues to exist. Congrats Squeak team! "
                            },
                            {
                                "type": "emoji",
                                "name": "tada",
                                "unicode": "1f389"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03B14DUZSA",
        "type": "message",
        "ts": "1657124061.939799",
        "client_msg_id": "d013d3b9-146c-41ad-825d-b7583bb6b73c",
        "text": "Brad Cox muses on the overly broad meaning of \"object\" across his writing, and splits them into 5 different types analogous to hardware - process\/appliance, card\/task, chip\/late-bound methods\/software-ic, block\/procedure\/statically bound method, and gate\/conditional. What Bracha is talking about here is more at the task level, while Java objects exists mostly at the block level, yet what Bracha, as well as Ungar in a comment, are touching on are the commonalities found in objects that an object oriented system should be consciously designed around.\n\n&gt; There is something about these discussions that sets a tone and expectations. Like that there is a singular truth. How can we ever have discussions again if we can not understand each other’s perspectives?\nI don't know what it is about Gilad Bracha that evokes this feeling so well - Richard Gabriel mused on it before in <https:\/\/dreamsongs.com\/Files\/Incommensurability.pdf>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7358a16bdea5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-02\/4314864832259_7358a16bdea535168748_72.png",
            "first_name": "Riley",
            "real_name": "Riley Stewart",
            "display_name": "Riley Stewart",
            "team": "T5TCAFTA9",
            "name": "me1307",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656755068.057889",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TjR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Brad Cox muses on the overly broad meaning of \"object\" across his writing, and splits them into 5 different types analogous to hardware - process\/appliance, card\/task, chip\/late-bound methods\/software-ic, block\/procedure\/statically bound method, and gate\/conditional. What Bracha is talking about here is more at the task level, while Java objects exists mostly at the block level, yet what Bracha, as well as Ungar in a comment, are touching on are the commonalities found in objects that an object oriented system should be consciously designed around.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is something about these discussions that sets a tone and expectations. Like that there is a singular truth. How can we ever have discussions again if we can not understand each other’s perspectives?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't know what it is about Gilad Bracha that evokes this feeling so well - Richard Gabriel mused on it before in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dreamsongs.com\/Files\/Incommensurability.pdf"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1657133128.284989",
        "client_msg_id": "9d611a3e-6e44-40fa-a12c-0a9555db4805",
        "text": "I'm kinda with Nick. The categorization there almost seems to vague to even be wrong. Neither of them are well-defined, but in my mind there's a lot of overlap between \"patterns\" and \"functions\". Any \"data\" structure can be seen as a \"function\", e.g. key -&gt; value.\n\nAnyway, where are the \"data\" and \"patterns\" in lambda calculus? These might be good ideas if they were fleshed out more, but they're demonstrably not universal or necessary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1656799112.623639",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fCDKJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm kinda with Nick. The categorization there almost seems to vague to even be wrong. Neither of them are well-defined, but in my mind there's a lot of overlap between \"patterns\" and \"functions\". Any \"data\" structure can be seen as a \"function\", e.g. key -> value.\n\nAnyway, where are the \"data\" and \"patterns\" in lambda calculus? These might be good ideas if they were fleshed out more, but they're demonstrably not universal or necessary."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1657176667.596309",
        "client_msg_id": "f5970185-39d8-4769-9097-c6f38ede9f25",
        "text": "There's some discussion of interface vs implementation complexity in the literature: <https:\/\/homepage.cs.uri.edu\/~thenry\/resources\/unix_art\/ch13s01.html>\n\nThe more recent <https:\/\/vitalik.ca\/general\/2022\/02\/28\/complexity.html> is also in this vein.\n\nOverall, though, I find this tradition of writing to not be very actionable. Einstein said all that needed to be said: keep things as simple as possible but no simpler. Now everyone knows to try to keep things parsimonious. Slightly fewer people know to take the whole stack of dependencies into account when measuring complexity, though the recent focus on software supply chains helps here. For the most part we've accomplished what we can with broad generalizations. What remains is the centuries-long task of hill-climbing to simpler solutions in all the domains where software is eating the world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1657092913.777719",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y4db",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's some discussion of interface vs implementation complexity in the literature: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/homepage.cs.uri.edu\/~thenry\/resources\/unix_art\/ch13s01.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe more recent "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vitalik.ca\/general\/2022\/02\/28\/complexity.html"
                            },
                            {
                                "type": "text",
                                "text": " is also in this vein.\n\nOverall, though, I find this tradition of writing to not be very actionable. Einstein said all that needed to be said: keep things as simple as possible but no simpler. Now everyone knows to try to keep things parsimonious. Slightly fewer people know to take the whole stack of dependencies into account when measuring complexity, though the recent focus on software supply chains helps here. For the most part we've accomplished what we can with broad generalizations. What remains is the centuries-long task of hill-climbing to simpler solutions in all the domains where software is eating the world."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]