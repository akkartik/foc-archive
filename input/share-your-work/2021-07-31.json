[
    {
        "user": "U0282PL61U1",
        "type": "message",
        "ts": "1627766831.002900",
        "edited": {
            "user": "U0282PL61U1",
            "ts": "1627769782.000000"
        },
        "client_msg_id": "0168f110-a60a-4a86-8ba6-cc47a578f17b",
        "text": "That lisp syntax - I have built something <https:\/\/plannr.xyzzyapps.link\/docs\/tools.html|quite similar >and I am calling it p-expressions \/ r-expressions \/ f-expressions … is this a completely a new lisp ? My approach is to build a transpiler over hylang and I have written an app with this dialect. I am trying to move towards the direction of newtonscript where I want to introduce more “natural language” primitives over lisp especially for `setv`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8f365fd896e9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529753983250_8f365fd896e9c8f573b5_72.jpg",
            "first_name": "xyzzy",
            "real_name": "xyzzy",
            "display_name": "xyzzy",
            "team": "T5TCAFTA9",
            "name": "moodyharsh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HFct",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That lisp syntax - I have built something "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/plannr.xyzzyapps.link\/docs\/tools.html",
                                "text": "quite similar "
                            },
                            {
                                "type": "text",
                                "text": "and I am calling it p-expressions \/ r-expressions \/ f-expressions … is this a completely a new lisp ? My approach is to build a transpiler over hylang and I have written an app with this dialect. I am trying to move towards the direction of newtonscript where I want to introduce more “natural language” primitives over lisp especially for "
                            },
                            {
                                "type": "text",
                                "text": "setv",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1627768865.003200",
        "client_msg_id": "fe2e6b1c-e102-4eac-ab6c-538dbf82aabd",
        "text": "Yeah, it's a new concoction. You can read more about it at <https:\/\/github.com\/akkartik\/mu\/tree\/main\/shell#readme|https:\/\/github.com\/akkartik\/mu\/tree\/main\/shell#readme>. I spent a few years noodling on Lisp variants like Readable s-expressions a few years ago when I worked on <https:\/\/github.com\/akkartik\/wart|https:\/\/github.com\/akkartik\/wart> So I reused some of those ideas here. But I don't care too much about these syntax issues anymore. These days the first thing I evaluate a language on is how many languages it takes to build it, starting from machine code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MJr\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it's a new concoction. You can read more about it at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/tree\/main\/shell#readme",
                                "text": "https:\/\/github.com\/akkartik\/mu\/tree\/main\/shell#readme"
                            },
                            {
                                "type": "text",
                                "text": ". I spent a few years noodling on Lisp variants like Readable s-expressions a few years ago when I worked on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/wart",
                                "text": "https:\/\/github.com\/akkartik\/wart"
                            },
                            {
                                "type": "text",
                                "text": " So I reused some of those ideas here. But I don't care too much about these syntax issues anymore. These days the first thing I evaluate a language on is how many languages it takes to build it, starting from machine code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0282PL61U1",
        "type": "message",
        "ts": "1627769668.003500",
        "client_msg_id": "214fdf9d-9af4-44c4-b76d-753263b83fd4",
        "text": "I will add a reference to it.  <http:\/\/users.rcn.com\/david-moon\/Lunar\/|Lunar> is the only implementation I know that supports an alternate syntax. My conclusion with respect to the syntax of lisp is .. lisp has an inflexible space-based lexer. I am not particularly interested in supporting infix notation as much as I am interested in getting rid of scope related parens.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8f365fd896e9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529753983250_8f365fd896e9c8f573b5_72.jpg",
            "first_name": "xyzzy",
            "real_name": "xyzzy",
            "display_name": "xyzzy",
            "team": "T5TCAFTA9",
            "name": "moodyharsh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZbOM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will add a reference to it.  "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/users.rcn.com\/david-moon\/Lunar\/",
                                "text": "Lunar"
                            },
                            {
                                "type": "text",
                                "text": " is the only implementation I know that supports an alternate syntax. My conclusion with respect to the syntax of lisp is .. lisp has an inflexible space-based lexer. I am not particularly interested in supporting infix notation as much as I am interested in getting rid of scope related parens."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1627769789.003800",
        "client_msg_id": "e30a20ae-c1bf-4ca2-98ad-e90d34d486ee",
        "text": "Yeah, that's fair. Do you care about having Lisp macros?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cF=X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's fair. Do you care about having Lisp macros?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0282PL61U1",
        "type": "message",
        "ts": "1627770124.004000",
        "edited": {
            "user": "U0282PL61U1",
            "ts": "1627770258.000000"
        },
        "client_msg_id": "08c8f770-a65e-4471-9937-56b0794e7eb6",
        "text": "S-expressions are completely supported as I will be parsing them as is. Parens begin s-expression parsing. Additionally I am getting rid of reader macros in favour of general preprocessing and template based code generation. Another goal is to build a two way syntax parsers that will take s-expressions syntax and translate it freely to and from the new syntax so that you can use an editor to read and port code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8f365fd896e9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-28\/8529753983250_8f365fd896e9c8f573b5_72.jpg",
            "first_name": "xyzzy",
            "real_name": "xyzzy",
            "display_name": "xyzzy",
            "team": "T5TCAFTA9",
            "name": "moodyharsh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "syI5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "S-expressions are completely supported as I will be parsing them as is. Parens begin s-expression parsing. Additionally I am getting rid of reader macros in favour of general preprocessing and template based code generation. Another goal is to build a two way syntax parsers that will take s-expressions syntax and translate it freely to and from the new syntax so that you can use an editor to read and port code."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]