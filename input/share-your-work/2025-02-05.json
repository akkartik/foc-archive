[
    {
        "user": "U07RHJSL1U6",
        "type": "message",
        "ts": "1738770261.977009",
        "client_msg_id": "4e3988b5-4dc4-4510-b222-8b0ee93216d6",
        "text": "I'm getting increasingly more and more into the \"app as a home cooked meal\" paradigm, and this is me sharing some of that playful approach to coding with a non technical audience.\n\nI hope that part of the future of coding, particularly AI facilitated, is more people able to _satisfy their curiosity_ with code, in a playful way.\n\nI wonder if there is a world where there are lots of programs that are totally ephemeral and just spun up on demand.\n<https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP|https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP>\n\nProject itself is at <http:\/\/conradgodfrey.com\/grep_britain|conradgodfrey.com\/grep_britain>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9f6d57662d26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-14\/7867638790710_9f6d57662d269dafb7f7_72.jpg",
            "first_name": "Conrad",
            "real_name": "Conrad Godfrey",
            "display_name": "Conrad Godfrey",
            "team": "T5TCAFTA9",
            "name": "conradjgodfrey",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738770261.977009",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1739207902.130799",
        "reply_users": [
            "UBKNXPBAB",
            "UJBAJNFLK",
            "U07QGK18BUL",
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "UBKNXPBAB",
                "ts": "1738778070.921819"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1738784050.984909"
            },
            {
                "user": "U07QGK18BUL",
                "ts": "1738927745.583769"
            },
            {
                "user": "U07QGK18BUL",
                "ts": "1738927949.935429"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1739207902.130799"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1739207902.130799",
        "attachments": [
            {
                "from_url": "https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/1tQQEyzqbAE\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/1tQQEyzqbAE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"I Found Hidden Patterns in UK place names using Code\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP",
                "fallback": "YouTube Video: I Found Hidden Patterns in UK place names using Code",
                "title": "I Found Hidden Patterns in UK place names using Code",
                "title_link": "https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP",
                "author_name": "Conrad Godfrey",
                "author_link": "https:\/\/www.youtube.com\/@ConradGodfrey",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fD\/J9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm getting increasingly more and more into the \"app as a home cooked meal\" paradigm, and this is me sharing some of that playful approach to coding with a non technical audience.\n\nI hope that part of the future of coding, particularly AI facilitated, is more people able to "
                            },
                            {
                                "type": "text",
                                "text": "satisfy their curiosity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with code, in a playful way.\n\nI wonder if there is a world where there are lots of programs that are totally ephemeral and just spun up on demand.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP",
                                "text": "https:\/\/youtube.com\/shorts\/1tQQEyzqbAE?si=dRqizqIJdvrp1zxP"
                            },
                            {
                                "type": "text",
                                "text": "\n\nProject itself is at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/conradgodfrey.com\/grep_britain",
                                "text": "conradgodfrey.com\/grep_britain"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "U85HCL7JP",
                    "U0798H9AXFF",
                    "UP00ZLX6G"
                ],
                "count": 5
            },
            {
                "name": "ok_hand",
                "users": [
                    "U02E4DAQGSZ",
                    "U01H6M7BVGD",
                    "U0798H9AXFF"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "U06MJU6LBN3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1738774507.841919",
        "client_msg_id": "756c5f37-c3fa-4022-af6f-d50e4e6f8bcd",
        "text": "&gt;  \"The basic motivation for a lot of my recent work has been the fact that programming systems are much more interesting and important than programming languages. A language is always embedded in some system, but the properties of the system matter more than the properties of the language. And while we know very well how to study programming languages, we only know little about how to study programming systems.\"\nI really like this point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738704357.662679",
        "parent_user_id": "UDCLA1HU4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jbA2P",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " \"The basic motivation for a lot of my recent work has been the fact that programming systems are much more interesting and important than programming languages. A language is always embedded in some system, but the properties of the system matter more than the properties of the language. And while we know very well how to study programming languages, we only know little about how to study programming systems.\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI really like this point."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDCLA1HU4"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U01QUBNJSEQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1738775004.152919",
        "client_msg_id": "cb3dbad6-7b7d-4240-9544-feb29db2024d",
        "text": "Thank you for the clarification! I think I get it now.\n\nHowever, if a function returns, isn't it the caller that determines who to call next? My homomorphism is roughly as follows:\n\n• Utility in a pipeline: receives inputs (all at once or streamed), produces output (all at once or streamed), doesn't know where the input came from, doesn't know where it goes to\n• Function call: receives input all at once, returns data all at once, doesn't know where the data or control goes to (unless you passed a callback to it)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738331917.986289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1u9hG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the clarification! I think I get it now.\n\nHowever, if a function returns, isn't it the caller that determines who to call next? My homomorphism is roughly as follows:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Utility in a pipeline: receives inputs (all at once or streamed), produces output (all at once or streamed), doesn't know where the input came from, doesn't know where it goes to"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Function call: receives input all at once, returns data all at once, doesn't know where the data or control goes to (unless you passed a callback to it)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1738775073.889689",
        "client_msg_id": "042a39a8-0435-49b0-92a9-1e12c9de3d01",
        "text": "Despite the differences under the hood, I still conceptually see them as pretty much the same. It's a single chain of tubes.\n\nThank you for your points, I now understand better the distinctions you made earlier!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738331917.986289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KScw2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Despite the differences under the hood, I still conceptually see them as pretty much the same. It's a single chain of tubes.\n\nThank you for your points, I now understand better the distinctions you made earlier!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1738778070.921819",
        "client_msg_id": "25fd3f90-669a-4eb6-bfe8-7a65f264e7cb",
        "text": "very delightful video. very cozy. :ok_hand:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738770261.977009",
        "parent_user_id": "U07RHJSL1U6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7bLw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "very delightful video. very cozy. "
                            },
                            {
                                "type": "emoji",
                                "name": "ok_hand",
                                "unicode": "1f44c"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK",
                    "UDQBTJ211",
                    "U07QGK18BUL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1738784050.984909",
        "client_msg_id": "a9035b5e-166f-438e-b9ec-6a28714a4463",
        "text": "Much of scientific computing is like that. Exploring datasets, or computational models, using one-off code. Computational notebooks were invented for that mode of working. But it's still too much like programming for most people, including most scientists.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738770261.977009",
        "parent_user_id": "U07RHJSL1U6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GVOgN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Much of scientific computing is like that. Exploring datasets, or computational models, using one-off code. Computational notebooks were invented for that mode of working. But it's still too much like programming for most people, including most scientists."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738793202.411439",
        "client_msg_id": "d0e8ccc9-6a70-462e-a60c-c121654948b1",
        "text": "Your questions and observations are wonderful! Thanks!\n\nThese things are definitely different, and, the difference results in bugs and hard-to-reason-about-ness in async programs.\n\n&gt; Function call: receives input all at once, returns data all at once, doesn't know where the data or control goes to...\nThe word `return` is loaded. It surreptitiously contains a scheduling decision AND it surreptitiously contains a routing decision (the _callee_ must send data back to the _caller_ - no choice. The decisions are hard-baked into the syntax.\n\n... reaching for another way to say this (I seem to be batting 0 everywhere I try to expand on this) ...\nSyntax such as f(g(h(x))) does not allow for the possibility that j(k(h(x))) gets to run until f(g(h(x))) is finished, i.e. f(...) makes a data-flow decision (stack-based data transfer instead of queue-based data transfer) - AND - it makes a scheduling design - AND - f(...) blocks any other input from reaching h(x) until it decides to allow this.\n\nLet's say you press a key on the keyboard, then click the left mouse button. That's different than a click on the left mouse button followed by a keypress. You can't differentiate these with f(g(h(x))) syntax followed by j(k(h(x))) syntax. F(g(h(x))) is fine if you have a single thread and no feedback. That's the way computers used to be in 1950. Today, computers are no longer like that (internet, robotics, IoT, etc), hence, strict sequential syntax cannot cope with reality any more. The best you can do is to write two async programlets that describe the innards of these things, but, it is hard to write a 3rd program that connects the two (without a lot of futzing and edge-cases and gotchas).\n\nPure functions are nice if all of your problems can be solved in a sequential manner, but, that ain't the case any more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738331917.986289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fVlq6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your questions and observations are wonderful! Thanks!\n\nThese things are definitely different, and, the difference results in bugs and hard-to-reason-about-ness in async programs.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Function call: receives input all at once, returns data all at once, doesn't know where the data or control goes to..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The word "
                            },
                            {
                                "type": "text",
                                "text": "return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is loaded. It surreptitiously contains a scheduling decision AND it surreptitiously contains a routing decision (the "
                            },
                            {
                                "type": "text",
                                "text": "callee",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " must send data back to the "
                            },
                            {
                                "type": "text",
                                "text": "caller",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - no choice. The decisions are hard-baked into the syntax.\n\n... reaching for another way to say this (I seem to be batting 0 everywhere I try to expand on this) ...\nSyntax such as f(g(h(x))) does not allow for the possibility that j(k(h(x))) gets to run until f(g(h(x))) is finished, i.e. f(...) makes a data-flow decision (stack-based data transfer instead of queue-based data transfer) - AND - it makes a scheduling design - AND - f(...) blocks any other input from reaching h(x) until it decides to allow this.\n\nLet's say you press a key on the keyboard, then click the left mouse button. That's different than a click on the left mouse button followed by a keypress. You can't differentiate these with f(g(h(x))) syntax followed by j(k(h(x))) syntax. F(g(h(x))) is fine if you have a single thread and no feedback. That's the way computers used to be in 1950. Today, computers are no longer like that (internet, robotics, IoT, etc), hence, strict sequential syntax cannot cope with reality any more. The best you can do is to write two async programlets that describe the innards of these things, but, it is hard to write a 3rd program that connects the two (without a lot of futzing and edge-cases and gotchas).\n\nPure functions are nice if all of your problems can be solved in a sequential manner, but, that ain't the case any more."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U0887QU9G2V"
                ],
                "count": 1
            }
        ]
    }
]