[
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1693135196.899589",
        "client_msg_id": "b6b04498-74e3-4cd6-b3af-ba0a3a7db388",
        "text": "This inspired me to <https:\/\/elk.zone\/universeodon.com\/@TodePond\/110961152121821795|draw up a couple of my past state machines>!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ij=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This inspired me to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/elk.zone\/universeodon.com\/@TodePond\/110961152121821795",
                                "text": "draw up a couple of my past state machines"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1693142281.081259",
        "client_msg_id": "23d5bc72-4d8e-44dc-9070-f94d3992bc8c",
        "text": "• I find that just drawing the diagrams, even using cave-man technologies, makes code “fall off the bone” (i.e. easy-to-write). Is that your conclusion, too?\n• Every time I feel unsatisfied about code that I’m writing, I scribble a diagram of my intentions.\n• The {cellpond, coding, drawing} diagram immediately makes me think of Harel’s Statecharts.  Are you aware of StateCharts?  If not, here is my reading of Harel’s original paper <https:\/\/guitarvydas.github.io\/2020\/12\/09\/StateCharts.html>\n• Thoughts such as “It looks quite complicated...” can be tamed in the same way that good PowerPoint presentations are tamed.  What I call The Rule of 7. No more than a few items on any one slide.  Elide, defer, hashtag in a structured manner.  In Programming, I conclude that The Rule of 7 translates into Nesting (goal: Russian Dolls for code (aka Matryoshka dolls)).  If I squint in just the right way, I see Lambdas as being Nesting applied to textual code, and, Structured Programming is Nesting applied to textual code, and, “{...}” is the ASCII Art form of Nesting applied to textual code.  Global variables and free variables are Anti-Nesting. <https:\/\/en.wikipedia.org\/wiki\/Matryoshka_doll>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZXXw",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I find that just drawing the diagrams, even using cave-man technologies, makes code “fall off the bone” (i.e. easy-to-write). Is that your conclusion, too?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Every time I feel unsatisfied about code that I’m writing, I scribble a diagram of my intentions."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The {cellpond, coding, drawing} diagram immediately makes me think of Harel’s Statecharts.  Are you aware of StateCharts?  If not, here is my reading of Harel’s original paper "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/guitarvydas.github.io\/2020\/12\/09\/StateCharts.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Thoughts such as “It looks quite complicated...” can be tamed in the same way that good PowerPoint presentations are tamed.  What I call The Rule of 7. No more than a few items on any one slide.  Elide, defer, hashtag in a structured manner.  In Programming, I conclude that The Rule of 7 translates into Nesting (goal: Russian Dolls for code (aka Matryoshka dolls)).  If I squint in just the right way, I see Lambdas as being Nesting applied to textual code, and, Structured Programming is Nesting applied to textual code, and, “{...}” is the ASCII Art form of Nesting applied to textual code.  Global variables and free variables are Anti-Nesting. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikipedia.org\/wiki\/Matryoshka_doll"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1693150474.578739",
        "client_msg_id": "5b3dd776-0842-40ce-b30c-8fc5f61e1b2a",
        "text": "- I like \"fall off the bone\" as an analogy (although I'd love a vegetarian version :smile:). I do find that diagrams like this help with it a lot. Not only state machines - any diagram helps. But usually, instead of drawing first, and coding after, I prefer to do them roughly at the same time, bit by bit. Like breadcrumbs through a maze! Or afterwards, so I can communicate how it works if I'm working with a team.\n\n- I used to be a teacher. We tried to encourage kids: \"If you don't understand a maths problem, draw a picture\". I think it's been drilled in to me as well.\n\n- Yes I'm aware of state charts :) We use it in tldraw. It helps to organise different 'tools' a bit better. Thanks for the link though, I'll check it out! Cellpond would have been much easier to make if I had modelled it as a state chart. I ended up rewriting a lot of code, and it became hard to make changes to it. But for my own personal projects, I've never landed on an abstraction for state charts that feels nice. I like my state machines to be quite loose and easy to mess around with. State charts sometimes feel more complex and ingrained. And I've never seen an implementation that really makes the most of the nesting. I'm sure there's a way of achieving it though. Not enough time!\n\n- The Rule of 7 seems to apply here :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1691945999.321379",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bzz5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- I like \"fall off the bone\" as an analogy (although I'd love a vegetarian version "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "). I do find that diagrams like this help with it a lot. Not only state machines - any diagram helps. But usually, instead of drawing first, and coding after, I prefer to do them roughly at the same time, bit by bit. Like breadcrumbs through a maze! Or afterwards, so I can communicate how it works if I'm working with a team.\n\n- I used to be a teacher. We tried to encourage kids: \"If you don't understand a maths problem, draw a picture\". I think it's been drilled in to me as well.\n\n- Yes I'm aware of state charts :) We use it in tldraw. It helps to organise different 'tools' a bit better. Thanks for the link though, I'll check it out! Cellpond would have been much easier to make if I had modelled it as a state chart. I ended up rewriting a lot of code, and it became hard to make changes to it. But for my own personal projects, I've never landed on an abstraction for state charts that feels nice. I like my state machines to be quite loose and easy to mess around with. State charts sometimes feel more complex and ingrained. And I've never seen an implementation that really makes the most of the nesting. I'm sure there's a way of achieving it though. Not enough time!\n\n- The Rule of 7 seems to apply here :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "carrot",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "guitar",
                "users": [
                    "UGWUJUZHT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]