[
    {
        "subtype": "thread_broadcast",
        "user": "U02E4DAQGSZ",
        "thread_ts": "1744463141.415349",
        "root": {
            "user": "U02E4DAQGSZ",
            "type": "message",
            "ts": "1744463141.415349",
            "edited": {
                "user": "U02E4DAQGSZ",
                "ts": "1744464829.000000"
            },
            "client_msg_id": "8c8f4f71-03f7-434a-bcca-b0f362f4298f",
            "text": "I am back on the original goal of exporting my Observable notebooks to my offline-first format (lopecode), in a way that preserves editability. I started a notebook called jumpgate, that can do the conversion, and then opens a PR against Github. The first notebook I am trying to get this working with is Jumpgate itself.\nI use lightning-fs + isomorphic-git to do the Github part within a browser. The prototype is working\nsourcecode on Observable: <https:\/\/observablehq.com\/@tomlarkworthy\/jumpgate>\ngit PR opened by the notebook: <https:\/\/github.com\/tomlarkworthy\/lopecode\/pull\/4>\nas my repo is configured as a static host as well, we can see the result of jumpgate after going through the jumpgate here: <https:\/\/tomlarkworthy.github.io\/lopecode\/notebooks\/@tomlarkworthy_jumpgate.html#view=S100%28%40tomlarkworthy%2Fmodule-selection%29>\n\nCurrently its slow as hell as the git checkout takes a long time. lightning-fs is storing itself in indexdb so there is not need to do a full checkout everytime, we should be able to merge with what exists. I went with simplicity for now as the stateful logic gets complicated as you have to do different git commands depending on whether you have done an initial clone etc.\nI am not sure how to manage the PR branch either, I keep force pushing a single branch but thats probably not correct either, I should use a fresh one each time but then you need to be careful not to fill indexdb with orphaned work. If anyone has a strong opinion on what the ideal github workflow for syncing offline files is LMK\n\nThe jumpgate does not add the extra functionality to make a notebook editable, I need to next mixin with my editor notebooks to get the thing to do what I want. Good stage though, Having notebooks open PRs is cool.",
            "team": "T5TCAFTA9",
            "thread_ts": "1744463141.415349",
            "reply_count": 1,
            "reply_users_count": 1,
            "latest_reply": "1747686761.587639",
            "reply_users": [
                "U02E4DAQGSZ"
            ],
            "replies": [
                {
                    "user": "U02E4DAQGSZ",
                    "ts": "1747686761.587639"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "from_url": "https:\/\/observablehq.com\/@tomlarkworthy\/jumpgate",
                    "service_icon": "https:\/\/static.observablehq.com\/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                    "ts": 1743939278,
                    "id": 1,
                    "original_url": "https:\/\/observablehq.com\/@tomlarkworthy\/jumpgate",
                    "fallback": "Observable: Jumpgate",
                    "text": "Bulk transfer notebooks between storage mediums. TODO make offline first (including runtime) Source configuration Source to filesystem Target configuration Deps",
                    "title": "Jumpgate",
                    "title_link": "https:\/\/observablehq.com\/@tomlarkworthy\/jumpgate",
                    "service_name": "Observable"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "dcvu6",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I am back on the original goal of exporting my Observable notebooks to my offline-first format (lopecode), in a way that preserves editability. I started a notebook called jumpgate, that can do the conversion, and then opens a PR against Github. The first notebook I am trying to get this working with is Jumpgate itself.\nI use lightning-fs + isomorphic-git to do the Github part within a browser. The prototype is working\nsourcecode on Observable: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/observablehq.com\/@tomlarkworthy\/jumpgate"
                                },
                                {
                                    "type": "text",
                                    "text": "\ngit PR opened by the notebook: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/tomlarkworthy\/lopecode\/pull\/4"
                                },
                                {
                                    "type": "text",
                                    "text": "\nas my repo is configured as a static host as well, we can see the result of jumpgate after going through the jumpgate here: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/tomlarkworthy.github.io\/lopecode\/notebooks\/@tomlarkworthy_jumpgate.html#view=S100%28%40tomlarkworthy%2Fmodule-selection%29"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nCurrently its slow as hell as the git checkout takes a long time. lightning-fs is storing itself in indexdb so there is not need to do a full checkout everytime, we should be able to merge with what exists. I went with simplicity for now as the stateful logic gets complicated as you have to do different git commands depending on whether you have done an initial clone etc.\nI am not sure how to manage the PR branch either, I keep force pushing a single branch but thats probably not correct either, I should use a fresh one each time but then you need to be careful not to fill indexdb with orphaned work. If anyone has a strong opinion on what the ideal github workflow for syncing offline files is LMK\n\nThe jumpgate does not add the extra functionality to make a notebook editable, I need to next mixin with my editor notebooks to get the thing to do what I want. Good stage though, Having notebooks open PRs is cool."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1747686761.587639",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1747687838.000000"
        },
        "client_msg_id": "1da5a9bb-86de-4899-b83f-844c63eaffdf",
        "text": "I am writing a computational blog post and I want the windows arranged a certain way. Jumpgate supports injecting the window configuration but I have to keep specifying it and its annoying when iterating. So I added form population via URL parameters so now I just need a web link to have a specific export preconfigured. That is the next step in exporting everything repeatably, by building up a list of exports as a list of links to Jumpgate.\n\nThe other thing heavier usage of Jumpgate showed was the git checkout step was slow, over 30 seconds, bottlenecked by the necessary git CORS proxy, so I made my own isomorphic-git proxy. Its super easy to setup on CloudFlare and in reduced my checkout to 3s! The instructions are making their <https:\/\/github.com\/isomorphic-git\/isomorphic-git\/pull\/2095|way upstream> if browser interaction with git interests you.\n\nStill, the git checkout step is not scaling well. Every notebook is 1-2Mb, and they all get downloaded before I can push a new version. I experimented with merging empty repositories, that works for unseen files, but not for updates to existing files (merge conflict between unrelated histories). git sparse checkout *should* be the answer, but not supported by isomorphic git ;'( Other ideas welcome. There have been several failed attempts to add sparse checkouts to isomorphic git, so its not an easy feature.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bY\/Tt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am writing a computational blog post and I want the windows arranged a certain way. Jumpgate supports injecting the window configuration but I have to keep specifying it and its annoying when iterating. So I added form population via URL parameters so now I just need a web link to have a specific export preconfigured. That is the next step in exporting everything repeatably, by building up a list of exports as a list of links to Jumpgate.\n\nThe other thing heavier usage of Jumpgate showed was the git checkout step was slow, over 30 seconds, bottlenecked by the necessary git CORS proxy, so I made my own isomorphic-git proxy. Its super easy to setup on CloudFlare and in reduced my checkout to 3s! The instructions are making their "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/isomorphic-git\/isomorphic-git\/pull\/2095",
                                "text": "way upstream"
                            },
                            {
                                "type": "text",
                                "text": " if browser interaction with git interests you.\n\nStill, the git checkout step is not scaling well. Every notebook is 1-2Mb, and they all get downloaded before I can push a new version. I experimented with merging empty repositories, that works for unseen files, but not for updates to existing files (merge conflict between unrelated histories). git sparse checkout "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be the answer, but not supported by isomorphic git ;'( Other ideas welcome. There have been several failed attempts to add sparse checkouts to isomorphic git, so its not an easy feature."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]