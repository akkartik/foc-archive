[
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1606226570.107100",
        "client_msg_id": "BCB3D7B7-0D3C-4BF8-8BBB-B3BA80B2C371",
        "text": "Oops, mobile is hard to read :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606178161.100100",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TiLp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oops, mobile is hard to read :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1606226703.108400",
        "client_msg_id": "9241C51C-77A2-4CCC-9F54-333CC1EC4650",
        "text": "I thought you had made both comments, but with each of you making one my comment applies less",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606178161.100100",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Goc1H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought you had made both comments, but with each of you making one my comment applies less"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1606229953.108800",
        "client_msg_id": "81d14db2-1912-4719-807e-a296ff889511",
        "text": "<@U01DUNFS2N4> While most Lisps allow one to tinker with the inner workings of cons cells, it's probably worth noting that the standard list building process of `(cons elem the-list)`  (construct a new list with `elem` as the head and `the-list` as the tail) does not modify `the-list` in any way, allowing other reference holders to continue as if nothing has happened. It's a form of \"unenforced immutability,\" if you will.\n\nYou can read about how this works in the context of Common Lisp here:\n<http:\/\/blog.thezerobit.com\/2012\/07\/21\/immutable-persistent-data-structures-in-common-lisp.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606178161.100100",
        "parent_user_id": "U01DUNFS2N4",
        "attachments": [
            {
                "title": "Immutable Persistent Data Structures in Common Lisp - the zero bit stream",
                "title_link": "http:\/\/blog.thezerobit.com\/2012\/07\/21\/immutable-persistent-data-structures-in-common-lisp.html",
                "text": "0. The Rationale Clojure, Scala, and Haskell (and other languages) have recently brought the idea of immutable (and persistent) data structures into â€¦",
                "fallback": "Immutable Persistent Data Structures in Common Lisp - the zero bit stream",
                "from_url": "http:\/\/blog.thezerobit.com\/2012\/07\/21\/immutable-persistent-data-structures-in-common-lisp.html",
                "service_name": "blog.thezerobit.com",
                "id": 1,
                "original_url": "http:\/\/blog.thezerobit.com\/2012\/07\/21\/immutable-persistent-data-structures-in-common-lisp.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TV=c6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01DUNFS2N4"
                            },
                            {
                                "type": "text",
                                "text": " While most Lisps allow one to tinker with the inner workings of cons cells, it's probably worth noting that the standard list building process of "
                            },
                            {
                                "type": "text",
                                "text": "(cons elem the-list)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  (construct a new list with "
                            },
                            {
                                "type": "text",
                                "text": "elem",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as the head and "
                            },
                            {
                                "type": "text",
                                "text": "the-list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as the tail) does not modify "
                            },
                            {
                                "type": "text",
                                "text": "the-list ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "in any way, allowing other reference holders to continue as if nothing has happened. It's a form of \"unenforced immutability,\" if you will.\n\nYou can read about how this works in the context of Common Lisp here:\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/blog.thezerobit.com\/2012\/07\/21\/immutable-persistent-data-structures-in-common-lisp.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1606234884.109100",
        "client_msg_id": "590c0ee9-00f7-408f-bcd8-92a367374406",
        "text": "Ah, interesting. I've come across this before, but I didn't think about it w.r.t. this topic",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606178161.100100",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AE\/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, interesting. I've come across this before, but I didn't think about it w.r.t. this topic"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]