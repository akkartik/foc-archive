[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1591006798.267100",
        "client_msg_id": "1d1d96d5-03cf-474b-b0ca-eb0d2185bb0e",
        "text": "Hi from another Northerner, in York :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590930526.265600",
        "parent_user_id": "U014DGL57HA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6j85Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi from another Northerner, in York "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591027908.267500",
        "client_msg_id": "eef944f4-514e-4238-ba0a-3d8a9385c933",
        "text": "I suppose it depends on what you mean by RAM. All uCISC instructions read from and write to memory. That memory is up to 128 kb dedicated SRAM for the given processor. However, you are correct that the main multi-GB main memory bank is not directly accessible. I suppose you could look at it as RISC with up to 2^16 registers or CISC with isolated RAM banks. It's also RISC in that it is ultra reduced to instructions that are required to execute in constant cycle time and you only have 2 of them and a minimal set of mathematical operations. But it's complex in the sense that you can have attached higher order \"complex\" functions attached to the CPU as devices.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6QsM5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose it depends on what you mean by RAM. All uCISC instructions read from and write to memory. That memory is up to 128 kb dedicated SRAM for the given processor. However, you are correct that the main multi-GB main memory bank is not directly accessible. I suppose you could look at it as RISC with up to 2^16 registers or CISC with isolated RAM banks. It's also RISC in that it is ultra reduced to instructions that are required to execute in constant cycle time and you only have 2 of them and a minimal set of mathematical operations. But it's complex in the sense that you can have attached higher order \"complex\" functions attached to the CPU as devices."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591028461.267700",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1591028487.000000"
        },
        "client_msg_id": "a1f92424-5bd5-42be-925d-cd6580f83029",
        "text": "Wow... <@UJN1TAYEQ> you have really turned my perspective around here. So, imagine a minimal microcontroller instantiation of the architecture. Say, a single CPU with 4k of memory. Suddenly it is CISC because the 4k of main memory and single core is basically a CISC setup where each instruction loads and stores from memory. However, given a 12k LUT ECP5 FPGA which can fit roughly 6 cores with up to 5k dedicated block RAM each, (30k mem total). In a microcontroller config where there is no main mem, is this still CISC? Add 16mb of main memory to that same processor, now we are RISC basically because the logic of how you program the thing has changed simply by adding main RAM. Scale up to desktop or server and you now have a very, very RISC like setup because you will end up decomposing problems in such a way that you treat the attached memory like thousands of registers that you load from main RAM.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=qm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow... "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " you have really turned my perspective around here. So, imagine a minimal microcontroller instantiation of the architecture. Say, a single CPU with 4k of memory. Suddenly it is CISC because the 4k of main memory and single core is basically a CISC setup where each instruction loads and stores from memory. However, given a 12k LUT ECP5 FPGA which can fit roughly 6 cores with up to 5k dedicated block RAM each, (30k mem total). In a microcontroller config where there is no main mem, is this still CISC? Add 16mb of main memory to that same processor, now we are RISC basically because the logic of how you program the thing has changed simply by adding main RAM. Scale up to desktop or server and you now have a very, very RISC like setup because you will end up decomposing problems in such a way that you treat the attached memory like thousands of registers that you load from main RAM."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591028813.268000",
        "client_msg_id": "468d5c6f-9c74-4408-a2a5-d29f83bc3c1e",
        "text": "Perhaps I am not seeing clearly, but suddenly the difference between CISC and RISC has blurred for me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AfoLC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps I am not seeing clearly, but suddenly the difference between CISC and RISC has blurred for me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1591028921.268200",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1591028987.000000"
        },
        "client_msg_id": "4f380742-174a-4339-993b-ca7c958ac5d1",
        "text": "I'm not following all the details of this conversation, but I've never before seen RISC associated with software-managed memory. All computers have cache hierarchies for the last 30 years, regardless of what kind of processor they have.\n\nSoftware-managed memory is more associated with VLIW architectures like Itanium.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a0O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not following all the details of this conversation, but I've never before seen RISC associated with software-managed memory. All computers have cache hierarchies for the last 30 years, regardless of what kind of processor they have.\n\nSoftware-managed memory is more associated with VLIW architectures like Itanium."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591029556.268600",
        "client_msg_id": "710d844e-35f5-4532-b8c7-8d8191a79425",
        "text": "Perhaps, in summary, the CISC view:\n• Local CPU memory is considered RAM. You can, but do not need to have a copy of local CPU memory in main memory. It's really just part of the RAM dedicated to a single CPU.\n• Instructions read from and write to RAM in one step since local memory is RAM.\n• Registers are primarily for addressing RAM\nRISC view:\n• Local CPU memory is not considered RAM, it is a Really Large Register Array (RLRA) that you load to\/from main memory (i.e. software controlled cache)\n• Main memory is the real RAM area, local CPU memory will typically be a copy of some part of RAM (thus the caching part)\n• Registers are an indexing mechanism of the instruction for accessing the RLRA",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7pb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps, in summary, the CISC view:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Local CPU memory is considered RAM. You can, but do not need to have a copy of local CPU memory in main memory. It's really just part of the RAM dedicated to a single CPU."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Instructions read from and write to RAM in one step since local memory is RAM."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Registers are primarily for addressing RAM"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nRISC view:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Local CPU memory is not considered RAM, it is a Really Large Register Array (RLRA) that you load to\/from main memory (i.e. software controlled cache)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Main memory is the real RAM area, local CPU memory will typically be a copy of some part of RAM (thus the caching part)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Registers are an indexing mechanism of the instruction for accessing the RLRA"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1591029713.268800",
        "client_msg_id": "720f316c-942c-4db3-b488-a8eb79863bfd",
        "text": "I'm gonna need a citation for that..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zc7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm gonna need a citation for that.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591030049.269000",
        "client_msg_id": "474fd64c-ff5b-4987-8d7a-cb62cb3f5101",
        "text": "Great, now I'm going to have to go find and read a bunch of papers to definitively determine if my ISA is RISC or CISC  :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z32RU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great, now I'm going to have to go find and read a bunch of papers to definitively determine if my ISA is RISC or CISC  "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1591031657.269200",
        "client_msg_id": "4bc34058-8635-42d9-bbf7-41f8711cc8b7",
        "text": "It's neither :smiling_imp: because the terms are meaningless. They're shades of gray that were given the illusion of crisp boundaries by some of the most savvy marketing seen in CS academia.\n\nWhen I suggested the name uCISC, I intended it as an elaborate, subtle troll. Robert's instruction set has properties of both RISC and CISC. It has few registers like CISC, _and_ few instructions like RISC (says so right in the name!) The hope is that this helps deconstruct a dichotomy that I've always found about as useful as drawing a continental boundary through Timbuktu.\n\nIf this gets people to ask more questions about instruction design, I'm happy to answer them. AMA. (In a previous life I did processor architecture research.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's neither "
                            },
                            {
                                "type": "emoji",
                                "name": "smiling_imp",
                                "unicode": "1f608"
                            },
                            {
                                "type": "text",
                                "text": " because the terms are meaningless. They're shades of gray that were given the illusion of crisp boundaries by some of the most savvy marketing seen in CS academia.\n\nWhen I suggested the name uCISC, I intended it as an elaborate, subtle troll. Robert's instruction set has properties of both RISC and CISC. It has few registers like CISC, "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " few instructions like RISC (says so right in the name!) The hope is that this helps deconstruct a dichotomy that I've always found about as useful as drawing a continental boundary through Timbuktu.\n\nIf this gets people to ask more questions about instruction design, I'm happy to answer them. AMA. (In a previous life I did processor architecture research.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1591036125.269900",
        "client_msg_id": "953cefff-540f-4760-a147-32763f5e0cb2",
        "text": "I agree with Kartik that they are marketing terms. My statement that uCISC \"takes the RISC philosophy one step further\" is also a marketing claim that I happen to think sounds cool. The term RISC was coined by Dave Patterson. The original idea was that by using a small simple instruction set and a simple micro-architecture, you need fewer transistors for a given amount of compute, or conversely, you get more compute out of a given transistor budget.\n\nFrom the abstract of the original RISC paper by Patterson: \"The limited number of instructions and addressing modes leads to a small control section and to a short machine cycle time. Such a machine also requires a much smaller layout effort and thus leads to a shorter design cycle.\" Doesn't this also apply to uCISC?\n\n<https:\/\/www2.eecs.berkeley.edu\/Pubs\/TechRpts\/1982\/CSD-82-106.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590881147.261300",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T+o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with Kartik that they are marketing terms. My statement that uCISC \"takes the RISC philosophy one step further\" is also a marketing claim that I happen to think sounds cool. The term RISC was coined by Dave Patterson. The original idea was that by using a small simple instruction set and a simple micro-architecture, you need fewer transistors for a given amount of compute, or conversely, you get more compute out of a given transistor budget.\n\nFrom the abstract of the original RISC paper by Patterson: \"The limited number of instructions and addressing modes leads to a small control section and to a short machine cycle time. Such a machine also requires a much smaller layout effort and thus leads to a shorter design cycle.\" Doesn't this also apply to uCISC?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www2.eecs.berkeley.edu\/Pubs\/TechRpts\/1982\/CSD-82-106.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]