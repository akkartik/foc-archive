[
    {
        "subtype": "thread_broadcast",
        "user": "U79HM6726",
        "thread_ts": "1642919054.017700",
        "root": {
            "text": "Hello everyone!\n\nAfter a year of work, I am finally presenting the result of my Master's thesis!:tada::mortar_board:\nI developed and studied a live programming environment that can provide meaningful information about the runtime behaviour of a program in practically every edit state, while retaining the intuitive and flexible interface of text editors.\n\nTo provide meaningful runtime behaviour information in edit states containing incomplete programs with syntax, type or logic errors, the programming environment has to isolate errors and continue functioning for unaffected parts of the program.\nI call this error tolerance.\n\nTolerance of syntax errors is realized with an integrated structure editor that incorporates a notion of incompleteness I call construction sites.\nEssentially, these are abstract syntax tree nodes that can contain arbitrary characters and other AST nodes.\n\nEvaluation of the program continues \"around errors\" instead of aborting with an exception or resulting in some \"undefined\" value.\nBecause the results this produces are much more informative than an exception or undefined value, they can help the programmer find the sources of issues and resolve them much better.\n\nBecause the programming environment is often evaluating unfinished code, evaluation diverges much more often.\nThe programming environment handles this smoothly by only evaluating parts of the runtime information that are displayed and providing a mode of evaluation where the number of reductions is limited by a configurable number.\nThis enables partial results in cases of non-termination.\n\nYou can try out the editor for yourself at <https:\/\/cdfa.github.io\/frugel\/> :eyes: or by downloading a much better performing native executable <https:\/\/github.com\/cdfa\/frugel\/releases|from GitHub>.\nI also created a demo video :tv: (<https:\/\/archive.org\/details\/demo_20220123|WebArchive version> (still uploading), <https:\/\/drive.google.com\/file\/d\/1h4UM7midD373UdpzWUFxzdKcraitEpDk\/view?usp=sharing|Google Drive version>) and attached a draft version of the thesis.\nI hope to follow up this week with a version that fixes some bugs.\nThis Wednesday, I will be giving an online presentation about it.\nIf you are interested in attending, I can PM you a link to watch it.\n\nPlease let me know what you think!",
            "files": [
                {
                    "id": "F030GM3GK32",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "U011PF3F5EE",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "7vlIJ",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hello everyone!\n\nAfter a year of work, I am finally presenting the result of my Master's thesis!"
                                },
                                {
                                    "type": "emoji",
                                    "name": "tada",
                                    "unicode": "1f389"
                                },
                                {
                                    "type": "emoji",
                                    "name": "mortar_board",
                                    "unicode": "1f393"
                                },
                                {
                                    "type": "text",
                                    "text": "\nI developed and studied a live programming environment that can provide meaningful information about the runtime behaviour of a program in practically every edit state, while retaining the intuitive and flexible interface of text editors.\n\nTo provide meaningful runtime behaviour information in edit states containing incomplete programs with syntax, type or logic errors, the programming environment has to isolate errors and continue functioning for unaffected parts of the program.\nI call this error tolerance.\n\nTolerance of syntax errors is realized with an integrated structure editor that incorporates a notion of incompleteness I call construction sites.\nEssentially, these are abstract syntax tree nodes that can contain arbitrary characters and other AST nodes.\n\nEvaluation of the program continues \"around errors\" instead of aborting with an exception or resulting in some \"undefined\" value.\nBecause the results this produces are much more informative than an exception or undefined value, they can help the programmer find the sources of issues and resolve them much better.\n\nBecause the programming environment is often evaluating unfinished code, evaluation diverges much more often.\nThe programming environment handles this smoothly by only evaluating parts of the runtime information that are displayed and providing a mode of evaluation where the number of reductions is limited by a configurable number.\nThis enables partial results in cases of non-termination.\n\nYou can try out the editor for yourself at "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/cdfa.github.io\/frugel\/"
                                },
                                {
                                    "type": "text",
                                    "text": " "
                                },
                                {
                                    "type": "emoji",
                                    "name": "eyes",
                                    "unicode": "1f440"
                                },
                                {
                                    "type": "text",
                                    "text": " or by downloading a much better performing native executable "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/cdfa\/frugel\/releases",
                                    "text": "from GitHub"
                                },
                                {
                                    "type": "text",
                                    "text": ".\nI also created a demo video "
                                },
                                {
                                    "type": "emoji",
                                    "name": "tv",
                                    "unicode": "1f4fa"
                                },
                                {
                                    "type": "text",
                                    "text": " ("
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/archive.org\/details\/demo_20220123",
                                    "text": "WebArchive version"
                                },
                                {
                                    "type": "text",
                                    "text": " (still uploading), "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/drive.google.com\/file\/d\/1h4UM7midD373UdpzWUFxzdKcraitEpDk\/view?usp=sharing",
                                    "text": "Google Drive version"
                                },
                                {
                                    "type": "text",
                                    "text": ") and attached a draft version of the thesis.\nI hope to follow up this week with a version that fixes some bugs.\nThis Wednesday, I will be giving an online presentation about it.\nIf you are interested in attending, I can PM you a link to watch it.\n\nPlease let me know what you think!"
                                }
                            ]
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1642919054.017700",
            "client_msg_id": "821fe6ce-326c-4f9f-9a5a-0fa9bd85fdc0",
            "thread_ts": "1642919054.017700",
            "reply_count": 34,
            "reply_users_count": 6,
            "latest_reply": "1658344464.832859",
            "reply_users": [
                "U016VUZGUUQ",
                "UCUSW7WVD",
                "U011PF3F5EE",
                "U02U0AS3J49",
                "U025PBD75TM",
                "U79HM6726"
            ],
            "replies": [
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1642919317.018100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1642919357.018300"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1642994136.030500"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1642994193.030700"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1643033038.031800"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643036818.032000"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643127459.284479"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643139249.400669"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643208847.790529"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643247327.991359"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643280970.810369"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643285277.043279"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1643398408.597269"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643544795.233999"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643544932.904829"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643552677.670339"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643552847.204469"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553339.842319"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553353.521349"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553416.626759"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553453.013759"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553661.754279"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553870.295309"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643554042.140949"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643555039.299969"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643555443.940659"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643555982.581469"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1643556404.644109"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643571638.165189"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643890592.526969"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1647460180.641189"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344327.850409"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344443.427429"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344464.832859"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1643544795.233999",
        "client_msg_id": "2bd8b6c2-b1b5-4510-a1fa-9a9ed5a0acb7",
        "text": "Nice work!\n\nIn section “7.3 Lamdu”:\n\n&gt; For example, if we attempt to insert a number where a function is expected, the expression is transformed to an application term with a hole for the argument. This term can then be typed as a free type variable. However, the number is inserted in the function position of the application term, which still results in a type error.\nThe last sentence is incorrect. The number is actually inserted in the argument of the application term in the underlying language, and there is no type error.\nPerhaps the confusion stems from the sugared surface language showing it as a number with a question mark next to it (which we call a “fragment” with a number in it).",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tz7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice work!\n\nIn section “7.3 Lamdu”:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, if we attempt to insert a number where a function is expected, the expression is transformed to an application term with a hole for the argument. This term can then be typed as a free type variable. However, the number is inserted in the function position of the application term, which still results in a type error."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe last sentence is incorrect. The number is actually inserted in the argument of the application term in the underlying language, and there is no type error.\nPerhaps the confusion stems from the sugared surface language showing it as a number with a question mark next to it (which we call a “fragment” with a number in it)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643544932.904829",
        "client_msg_id": "d5e8e95e-c6be-4707-8eb1-dc34549e6ba6",
        "text": "&gt; However, evaluation is not continued around hole arguments in application terms or under partially applied lambda terms and function values are not displayed.\nTrue, however this isn’t by design, just that we didn’t get to it yet. So much to do :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZGUo",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, evaluation is not continued around hole arguments in application terms or under partially applied lambda terms and function values are not displayed."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "True, however this isn’t by design, just that we didn’t get to it yet. So much to do "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643552677.670339",
        "client_msg_id": "efd6c2cc-d9ec-4897-8777-2cb4cdedde75",
        "text": "<@U016VUZGUUQ> Yeah I could definitely see the idea being applied to structured data more generally! It's basically allowing less structure with the highest granularity possible.\nNot sure exactly what you mean with \"whether I'm serializing the AST with construction sites\", but there is a partial linearization step in the edit loop where the AST is mostly serialized. However, this step is \"partial\" in the senses that construction sites in the AST are preserved. To do this, it serializes the AST to a construction site (called a root construction site) instead of plain text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hyLF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Yeah I could definitely see the idea being applied to structured data more generally! It's basically allowing less structure with the highest granularity possible.\nNot sure exactly what you mean with \"whether I'm serializing the AST with construction sites\", but there is a partial linearization step in the edit loop where the AST is mostly serialized. However, this step is \"partial\" in the senses that construction sites in the AST are preserved. To do this, it serializes the AST to a construction site (called a root construction site) instead of plain text."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643552847.204469",
        "client_msg_id": "3f744585-4123-4671-a919-eb6315579019",
        "text": "<@U79HM6726> Oh I should have another look with this information in mind. Does your editor completely prevent type errors then?\nThanks for pointing it out in any case. I'll update the online version of the thesis when I can.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gwe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " Oh I should have another look with this information in mind. Does your editor completely prevent type errors then?\nThanks for pointing it out in any case. I'll update the online version of the thesis when I can."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643553339.842319",
        "client_msg_id": "1761e513-ca31-4b48-9684-2f1b958eca44",
        "text": "<@U011PF3F5EE> yes, wrapping type errors in “fragments” was a key feature of Lamdu since 2013! And was at a novel solution for this problem (it was later adopted by Hazel too)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7NK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U011PF3F5EE"
                            },
                            {
                                "type": "text",
                                "text": " yes, wrapping type errors in “fragments” was a key feature of Lamdu since 2013! And was at a novel solution for this problem (it was later adopted by Hazel too)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643553353.521349",
        "edited": {
            "user": "U011PF3F5EE",
            "ts": "1643553549.000000"
        },
        "client_msg_id": "12044bd3-a9f9-4cb8-8d2a-2b5c3a72d283",
        "text": "Displaying bodies of (partially applied) functions is definitely challenging, mostly because of variable capture and preserving the names of binders. It's even worse when the same function values can show up in several places because you would like to see the same \"fresh\" variable names\/identifiers in all places",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0t\/i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Displaying bodies of (partially applied) functions is definitely challenging, mostly because of variable capture and preserving the names of binders. It's even worse when the same function values can show up in several places because you would like to see the same \"fresh\" variable names\/identifiers in all places"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643553416.626759",
        "client_msg_id": "8936269b-a9d2-4971-94d2-31512475b856",
        "text": "So to clarify, yes, Lamdu does completely prevent type errors. The code always type-checks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p10",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to clarify, yes, Lamdu does completely prevent type errors. The code always type-checks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643553453.013759",
        "edited": {
            "user": "U011PF3F5EE",
            "ts": "1643553482.000000"
        },
        "client_msg_id": "e9f70a5f-5b3a-4b4e-8b50-509c6fa9364b",
        "text": "<@U79HM6726> Ah cool! Is the mechanism documented anywhere currently?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fi6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " Ah cool! Is the mechanism documented anywhere currently?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643553661.754279",
        "client_msg_id": "5a04a8c6-238f-42ad-ab1e-1edf3e401f54",
        "text": "Closest thing to documentation would be our short 10 mins video on the topic <https:\/\/youtu.be\/viF1bVTOO6k>\n\nThe mechanism is very close to Hazel’s although our solution is more general and works also for refactorings, and we also have a novel solution for cross-definition changes",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/viF1bVTOO6k",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/viF1bVTOO6k\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/viF1bVTOO6k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/viF1bVTOO6k",
                "fallback": "YouTube Video: Steady Typing",
                "title": "Steady Typing",
                "title_link": "https:\/\/youtu.be\/viF1bVTOO6k",
                "author_name": "Lamdu",
                "author_link": "https:\/\/www.youtube.com\/c\/Lamdu",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KUyw2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Closest thing to documentation would be our short 10 mins video on the topic "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/viF1bVTOO6k"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe mechanism is very close to Hazel’s although our solution is more general and works also for refactorings, and we also have a novel solution for cross-definition changes"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643553870.295309",
        "client_msg_id": "9e04ac08-6e38-43e8-8a50-a83d0f29ce8f",
        "text": "Something I thought is very cool is that Lamdu has some I\/O capabilities. If I understand correctly, you're currently asking the user when to run I\/O actions, but this seems to get in the way of live programming. Do you have plans for more advanced solutions?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xg2Ai",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something I thought is very cool is that Lamdu has some I\/O capabilities. If I understand correctly, you're currently asking the user when to run I\/O actions, but this seems to get in the way of live programming. Do you have plans for more advanced solutions?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U79HM6726",
        "thread_ts": "1642919054.017700",
        "root": {
            "text": "Hello everyone!\n\nAfter a year of work, I am finally presenting the result of my Master's thesis!:tada::mortar_board:\nI developed and studied a live programming environment that can provide meaningful information about the runtime behaviour of a program in practically every edit state, while retaining the intuitive and flexible interface of text editors.\n\nTo provide meaningful runtime behaviour information in edit states containing incomplete programs with syntax, type or logic errors, the programming environment has to isolate errors and continue functioning for unaffected parts of the program.\nI call this error tolerance.\n\nTolerance of syntax errors is realized with an integrated structure editor that incorporates a notion of incompleteness I call construction sites.\nEssentially, these are abstract syntax tree nodes that can contain arbitrary characters and other AST nodes.\n\nEvaluation of the program continues \"around errors\" instead of aborting with an exception or resulting in some \"undefined\" value.\nBecause the results this produces are much more informative than an exception or undefined value, they can help the programmer find the sources of issues and resolve them much better.\n\nBecause the programming environment is often evaluating unfinished code, evaluation diverges much more often.\nThe programming environment handles this smoothly by only evaluating parts of the runtime information that are displayed and providing a mode of evaluation where the number of reductions is limited by a configurable number.\nThis enables partial results in cases of non-termination.\n\nYou can try out the editor for yourself at <https:\/\/cdfa.github.io\/frugel\/> :eyes: or by downloading a much better performing native executable <https:\/\/github.com\/cdfa\/frugel\/releases|from GitHub>.\nI also created a demo video :tv: (<https:\/\/archive.org\/details\/demo_20220123|WebArchive version> (still uploading), <https:\/\/drive.google.com\/file\/d\/1h4UM7midD373UdpzWUFxzdKcraitEpDk\/view?usp=sharing|Google Drive version>) and attached a draft version of the thesis.\nI hope to follow up this week with a version that fixes some bugs.\nThis Wednesday, I will be giving an online presentation about it.\nIf you are interested in attending, I can PM you a link to watch it.\n\nPlease let me know what you think!",
            "files": [
                {
                    "id": "F030GM3GK32",
                    "mode": "hidden_by_limit"
                }
            ],
            "upload": false,
            "user": "U011PF3F5EE",
            "display_as_bot": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "7vlIJ",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hello everyone!\n\nAfter a year of work, I am finally presenting the result of my Master's thesis!"
                                },
                                {
                                    "type": "emoji",
                                    "name": "tada",
                                    "unicode": "1f389"
                                },
                                {
                                    "type": "emoji",
                                    "name": "mortar_board",
                                    "unicode": "1f393"
                                },
                                {
                                    "type": "text",
                                    "text": "\nI developed and studied a live programming environment that can provide meaningful information about the runtime behaviour of a program in practically every edit state, while retaining the intuitive and flexible interface of text editors.\n\nTo provide meaningful runtime behaviour information in edit states containing incomplete programs with syntax, type or logic errors, the programming environment has to isolate errors and continue functioning for unaffected parts of the program.\nI call this error tolerance.\n\nTolerance of syntax errors is realized with an integrated structure editor that incorporates a notion of incompleteness I call construction sites.\nEssentially, these are abstract syntax tree nodes that can contain arbitrary characters and other AST nodes.\n\nEvaluation of the program continues \"around errors\" instead of aborting with an exception or resulting in some \"undefined\" value.\nBecause the results this produces are much more informative than an exception or undefined value, they can help the programmer find the sources of issues and resolve them much better.\n\nBecause the programming environment is often evaluating unfinished code, evaluation diverges much more often.\nThe programming environment handles this smoothly by only evaluating parts of the runtime information that are displayed and providing a mode of evaluation where the number of reductions is limited by a configurable number.\nThis enables partial results in cases of non-termination.\n\nYou can try out the editor for yourself at "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/cdfa.github.io\/frugel\/"
                                },
                                {
                                    "type": "text",
                                    "text": " "
                                },
                                {
                                    "type": "emoji",
                                    "name": "eyes",
                                    "unicode": "1f440"
                                },
                                {
                                    "type": "text",
                                    "text": " or by downloading a much better performing native executable "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/cdfa\/frugel\/releases",
                                    "text": "from GitHub"
                                },
                                {
                                    "type": "text",
                                    "text": ".\nI also created a demo video "
                                },
                                {
                                    "type": "emoji",
                                    "name": "tv",
                                    "unicode": "1f4fa"
                                },
                                {
                                    "type": "text",
                                    "text": " ("
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/archive.org\/details\/demo_20220123",
                                    "text": "WebArchive version"
                                },
                                {
                                    "type": "text",
                                    "text": " (still uploading), "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/drive.google.com\/file\/d\/1h4UM7midD373UdpzWUFxzdKcraitEpDk\/view?usp=sharing",
                                    "text": "Google Drive version"
                                },
                                {
                                    "type": "text",
                                    "text": ") and attached a draft version of the thesis.\nI hope to follow up this week with a version that fixes some bugs.\nThis Wednesday, I will be giving an online presentation about it.\nIf you are interested in attending, I can PM you a link to watch it.\n\nPlease let me know what you think!"
                                }
                            ]
                        }
                    ]
                }
            ],
            "type": "message",
            "ts": "1642919054.017700",
            "client_msg_id": "821fe6ce-326c-4f9f-9a5a-0fa9bd85fdc0",
            "thread_ts": "1642919054.017700",
            "reply_count": 34,
            "reply_users_count": 6,
            "latest_reply": "1658344464.832859",
            "reply_users": [
                "U016VUZGUUQ",
                "UCUSW7WVD",
                "U011PF3F5EE",
                "U02U0AS3J49",
                "U025PBD75TM",
                "U79HM6726"
            ],
            "replies": [
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1642919317.018100"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1642919357.018300"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1642994136.030500"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1642994193.030700"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1643033038.031800"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643036818.032000"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643127459.284479"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643139249.400669"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643208847.790529"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1643247327.991359"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643280970.810369"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643285277.043279"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1643398408.597269"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643544795.233999"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643544932.904829"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643552677.670339"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643552847.204469"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553339.842319"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553353.521349"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553416.626759"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553453.013759"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643553661.754279"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643553870.295309"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643554042.140949"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643555039.299969"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643555443.940659"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643555982.581469"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1643556404.644109"
                },
                {
                    "user": "U79HM6726",
                    "ts": "1643571638.165189"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1643890592.526969"
                },
                {
                    "user": "U025PBD75TM",
                    "ts": "1647460180.641189"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344327.850409"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344443.427429"
                },
                {
                    "user": "U011PF3F5EE",
                    "ts": "1658344464.832859"
                }
            ],
            "is_locked": false,
            "subscribed": false
        },
        "type": "message",
        "ts": "1643554042.140949",
        "client_msg_id": "0a2ea998-6764-4886-8f0c-f82e989604e8",
        "text": "I would like to hear about your ideas for more advanced solutions :slightly_smiling_face:\n\nOne idea we have in mind is that you should be able to “record” results of IO interactions and then re-evaluate from recorded runs. Then you could modify the program up to a point where the IO actions that it invoked changed.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dM2B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to hear about your ideas for more advanced solutions "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne idea we have in mind is that you should be able to “record” results of IO interactions and then re-evaluate from recorded runs. Then you could modify the program up to a point where the IO actions that it invoked changed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643555039.299969",
        "client_msg_id": "27a8e868-b67d-41cf-a3de-4c0861f7cfce",
        "text": "So for example, if you make an API request and you're modifying code that uses the returned data, it would not make the request after every edit but reuse saved data?\nWould you \"snapshot\" other program state (like values of variables) that is also relevant to the code processing the request's data as well, or recompute it from literals\/other cached data?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SU=AS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So for example, if you make an API request and you're modifying code that uses the returned data, it would not make the request after every edit but reuse saved data?\nWould you \"snapshot\" other program state (like values of variables) that is also relevant to the code processing the request's data as well, or recompute it from literals\/other cached data?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U011PF3F5EE",
        "type": "message",
        "ts": "1643555443.940659",
        "edited": {
            "user": "U011PF3F5EE",
            "ts": "1643555477.000000"
        },
        "client_msg_id": "e3c9925d-c274-4c42-8df3-f3e99bd34fb5",
        "text": "Currently, my main concern is making it safe to automatically run I\/O actions. If you're building a system that could launch rockets, you wouldn't want to launch the rockets repeatedly, but still find out if you would get a \"rockets launched successful\" return message from the external system depending on how you tweak parameters of the launch call.\nTo do it safely, you also need a \"test\" version of the external system, which the programming environment could help the user set up.\nI think with an explicitly set up test environment (a bit like a Docker container) that the programming environment can reset when necessary, it should be possible to make running I\/O actions automatically safe.\nIt's also a lot of work though:upside_down_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8c584928085",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8c584928085a3914c09526e31d7bb5ad.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "Colin",
            "real_name": "Colin",
            "display_name": "cdfa",
            "team": "T5TCAFTA9",
            "name": "colinderoos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WcOX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently, my main concern is making it safe to automatically run I\/O actions. If you're building a system that could launch rockets, you wouldn't want to launch the rockets repeatedly, but still find out if you would get a \"rockets launched successful\" return message from the external system depending on how you tweak parameters of the launch call.\nTo do it safely, you also need a \"test\" version of the external system, which the programming environment could help the user set up.\nI think with an explicitly set up test environment (a bit like a Docker container) that the programming environment can reset when necessary, it should be possible to make running I\/O actions automatically safe.\nIt's also a lot of work though"
                            },
                            {
                                "type": "emoji",
                                "name": "upside_down_face",
                                "unicode": "1f643"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643555982.581469",
        "client_msg_id": "2c42f8e3-07c2-4349-93dc-67cee8f2e29c",
        "text": "&gt; if you make an API request and you’re modifying code that uses the returned data, it would not make the request after every edit but reuse saved data?\nExactly.\n&gt; Would you “snapshot” other program state (like values of variables) that is also relevant to the code processing the request’s data as well, or recompute it from literals\/other cached data?\nOnly the descriptions for the IO actions and their results will be saved, the other stuff will be recomputed normally",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pChun",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you make an API request and you’re modifying code that uses the returned data, it would not make the request after every edit but reuse saved data?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would you “snapshot” other program state (like values of variables) that is also relevant to the code processing the request’s data as well, or recompute it from literals\/other cached data?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Only the descriptions for the IO actions and their results will be saved, the other stuff will be recomputed normally"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1643556404.644109",
        "client_msg_id": "f6d7688a-1c3e-4b96-8f89-9049f716622e",
        "text": "Separate detecting side effects from deciding how to deal with them. The former is key, and it's some tedious but fairly straightforward work, tagging low-level primitives in your standard libraries that invoke OS syscalls.\n\nOnce you have such primitives tagged the UI can do a variety of things when they're directly or indirectly invoked. Record and replay (won't help for launching rockets), switch to a mocked or fake version. Most important, the UI will be able to ask the programmer what they'd like.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49=SH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Separate detecting side effects from deciding how to deal with them. The former is key, and it's some tedious but fairly straightforward work, tagging low-level primitives in your standard libraries that invoke OS syscalls.\n\nOnce you have such primitives tagged the UI can do a variety of things when they're directly or indirectly invoked. Record and replay (won't help for launching rockets), switch to a mocked or fake version. Most important, the UI will be able to ask the programmer what they'd like."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1643571638.165189",
        "client_msg_id": "2A30AD33-81FA-4703-A09D-E5B2DEB44A1C",
        "text": "This discussion is assuming that we did this distinction (which we did)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642919054.017700",
        "parent_user_id": "U011PF3F5EE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mP34",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This discussion is assuming that we did this distinction (which we did)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U011PF3F5EE"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJVEPCVT6",
        "type": "message",
        "ts": "1643571893.429719",
        "client_msg_id": "11b2223c-4d2f-4db5-94c9-d1b550439d36",
        "text": "Hi FoC,\n\nWe just released version Alpha 1.8.0 of CRANQ (<http:\/\/cranq.io|cranq.io>)!\n\nFor those that don't know, CRANQ is - despite what the website says - a general-purpose \"low-coding\" IDE and code repository. It compiles to JavaScript (npm packages), and is fully extensible from within. This release is still far from our original vision - lacking in instrumentation, types, search, and general UX - but is usable enough to prototype APIs and integrations.\n\nQuick download links:\n• Linux (deb): <https:\/\/release.cranq.io\/cranq_1.8.0_amd64.deb>\n• Linux (rpm): <https:\/\/release.cranq.io\/Cranq-1.8.0-1.x86_64.rpm>\n• MacOs: <https:\/\/release.cranq.io\/Cranq-1.8.0-x64.dmg>\n• Windows: <https:\/\/release.cranq.io\/Cranq-1.8.0_Setup.exe>\nThoughts, feedback welcome.\nWe're also looking for case studies - projects that we help you build in CRANQ. DM me if you'd like to participate in our alpha programme.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9ae6680c0eb6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-01-30\/3025680183365_9ae6680c0eb63c7a6caa_72.jpg",
            "first_name": "Dan",
            "real_name": "Dan Stocker",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dan346",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643571893.429719",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1643579296.516129",
        "reply_users": [
            "UL2SJ88Q3"
        ],
        "replies": [
            {
                "user": "UL2SJ88Q3",
                "ts": "1643579190.508259"
            },
            {
                "user": "UL2SJ88Q3",
                "ts": "1643579296.516129"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8OfQ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi FoC,\n\nWe just released version Alpha 1.8.0 of CRANQ ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cranq.io",
                                "text": "cranq.io"
                            },
                            {
                                "type": "text",
                                "text": ")!\n\nFor those that don't know, CRANQ is - despite what the website says - a general-purpose \"low-coding\" IDE and code repository. It compiles to JavaScript (npm packages), and is fully extensible from within. This release is still far from our original vision - lacking in instrumentation, types, search, and general UX - but is usable enough to prototype APIs and integrations.\n\nQuick download links:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Linux (deb): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/release.cranq.io\/cranq_1.8.0_amd64.deb"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Linux (rpm): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/release.cranq.io\/Cranq-1.8.0-1.x86_64.rpm"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "MacOs: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/release.cranq.io\/Cranq-1.8.0-x64.dmg"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Windows: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/release.cranq.io\/Cranq-1.8.0_Setup.exe"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThoughts, feedback welcome.\nWe're also looking for case studies - projects that we help you build in CRANQ. DM me if you'd like to participate in our alpha programme."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL2SJ88Q3",
        "type": "message",
        "ts": "1643579190.508259",
        "client_msg_id": "dea9a3ed-532e-4616-82ba-8d392e42ef07",
        "text": "&gt; despite what the website says...\n&gt; Thoughts, feedback welcome\n&gt; \nMy first thought would be that if the website doesn't actually say what it is, that's a problem.\nAfter looking at the website, the second problem is that what it does actually say is prone to making me assume that whatever you're peddling lies somewhere on the spectrum from speculative nonsense to outright fraud. No offense intended, and I get why marketing to the crypto crowd might make sense... but having that front and center isn't likely to make me take something seriously as a general tool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea40cf1a7c83",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-24\/8076913595155_ea40cf1a7c836d55cf1c_72.png",
            "first_name": "Andrew",
            "real_name": "Andrew Beyer",
            "display_name": "abeyer",
            "team": "T5TCAFTA9",
            "name": "beyer.andrew",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643571893.429719",
        "parent_user_id": "UJVEPCVT6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4aKBY",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "despite what the website says...\n"
                            },
                            {
                                "type": "text",
                                "text": "Thoughts, feedback welcome\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first thought would be that if the website doesn't actually say what it is, that's a problem.\nAfter looking at the website, the second problem is that what it does actually say is prone to making me assume that whatever you're peddling lies somewhere on the spectrum from speculative nonsense to outright fraud. No offense intended, and I get why marketing to the crypto crowd might make sense... but having that front and center isn't likely to make me take something seriously as a general tool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL2SJ88Q3",
        "type": "message",
        "ts": "1643579296.516129",
        "client_msg_id": "1103f2ce-bfbc-4737-9233-eb15198182ca",
        "text": "That said this _does_ look like an interesting tool, so maybe reconsider how it's presented",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea40cf1a7c83",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-24\/8076913595155_ea40cf1a7c836d55cf1c_72.png",
            "first_name": "Andrew",
            "real_name": "Andrew Beyer",
            "display_name": "abeyer",
            "team": "T5TCAFTA9",
            "name": "beyer.andrew",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1643571893.429719",
        "parent_user_id": "UJVEPCVT6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oih",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That said this "
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " look like an interesting tool, so maybe reconsider how it's presented"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1643580036.993399",
        "client_msg_id": "0d0474a2-ab10-4197-b0cd-63f1683c3407",
        "text": "Really cool! :ok_hand:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1642515310.005800",
        "parent_user_id": "U01FAFPDFL4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cL68",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really cool! "
                            },
                            {
                                "type": "emoji",
                                "name": "ok_hand",
                                "unicode": "1f44c"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]