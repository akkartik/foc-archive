[
    {
        "subtype": "thread_broadcast",
        "user": "UEQ6M68H0",
        "thread_ts": "1593313532.166800",
        "root": {
            "user": "UC2A2ARPT",
            "type": "message",
            "ts": "1593313532.166800",
            "client_msg_id": "CBA51820-973C-4E94-A79A-80369CEA4308",
            "text": "Branching off a new thread from an <@UEQ6M68H0> post: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&amp;channel=C5T9GPWFL&amp;message_ts=1593274446.009800|https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&amp;channel=C5T9GPWFL&amp;message_ts=1593274446.009800>",
            "team": "T5TCAFTA9",
            "thread_ts": "1593313532.166800",
            "reply_count": 16,
            "reply_users_count": 6,
            "latest_reply": "1593791472.190300",
            "reply_users": [
                "UC2A2ARPT",
                "UJN1TAYEQ",
                "UEQ6M68H0",
                "ULK0Z4MPV",
                "UC6997THT",
                "UKDM3GLAJ"
            ],
            "replies": [
                {
                    "user": "UC2A2ARPT",
                    "ts": "1593313564.167300"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593320641.167500"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1593357532.171500"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1593387076.171700"
                },
                {
                    "user": "ULK0Z4MPV",
                    "ts": "1593388046.171900"
                },
                {
                    "user": "ULK0Z4MPV",
                    "ts": "1593388238.172200"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593392718.172800"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593393466.173100"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593393539.173300"
                },
                {
                    "user": "ULK0Z4MPV",
                    "ts": "1593400471.173500"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593427223.173800"
                },
                {
                    "user": "UJN1TAYEQ",
                    "ts": "1593427680.174100"
                },
                {
                    "user": "UC6997THT",
                    "ts": "1593755116.180500"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1593761567.182100"
                },
                {
                    "user": "UKDM3GLAJ",
                    "ts": "1593785509.182700"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1593791472.190300"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&amp;channel=C5T9GPWFL&amp;message_ts=1593274446.009800",
                    "fallback": "[June 27th, 2020 9:14 AM] magicmouse94937: <@UK500AGQ4> whenever you’re talking about User interface libraries, Inevitably you will ask for a text entry field. The text entry field is the most complicated part of every operating system. To render text in a box and handle text entry, that is over 1 million lines of code more than your typical project. There are not even 100 people alive in the world who know the truetype language that underlies text rendering. The text editing library code is therefore deeply tied to either the operating system vendor or one of the few companies that has spent millions of dollars to understand it. So Google, Adobe, Apple, Microsoft, and a few Japanese companies and Samsung, Are among the few places where this technology has been mastered. Text entry is incredibly complicated when you get to Asian languages or right to left languages like Hebrew and Arabic. Haven’t you ever wondered why the PDF file format took over as the World standard for documents? It’s because it was the only file format that allowed font embedding, and had missing font fail over technology. Nowadays with soft keyboards on mobile devices the world has gotten very concentrated into just two operating systems. iOS and android, and the market is split between those two about 80\/20 Although the economic value of the Apple platform is about 50% due to their more well heeled customer base.\n\na Console based Product in python can be very platform independent, but the minute you ask for Graphics and the black box of a text entry field you are now tied to an operating system or a platform technology like Adobe Air which offers platform independent text entry fields and font rendering. I am pretty sure that Unity has a cross platform input field technology as well, but I have not used it. The Google Flutter library is an attempt to make a cross platform technology which is powerful, and there is also QT which has been around long enough to cover all sorts of stuff. There are very few Python libraries which delve into font rendering and text entry fields in their full glory. In Photoshop, when you are putting in text, you have the ability to select 5 different rendering styles (\"soft\", \"hard\", \"sharp\", etc.), and you can massage the font rendering process very finely. MS went though a big effort to render fonts on LCD screens more beautifully by doing sub-pixel rendering, i think they called it \"Clear Type\". This is a very deep area and affects output quality very noticeably. Apple has always had terrific rendering, why artists overwhelmingly prefer OSX over Windows. Human languages are really complicated and supporting them is a huge task. English with its lack of accented letters and very simple structure is pretty much the easiest language on earth. Japanese is actually the most difficult language on earth to handle properly. So the benchmark for most technologies, is how well does it handle Japanese? Korean and Chinese are tough but more uniform than Japanese. calligraphic Arabic is basically impossible. But all the right to left languages present very tricky rendering problems because people intermix left to right and right to left sections in the same sentence.\n\nIf you can avoid having a text entry field Like most game machines have a grade of alphabetic characters you type with, then it becomes a great deal easier and now you’re back to simple polygons and bezier splines and there are dozens of libraries that do those.  Python  has a huge library set.\n\nSo the decision point in your library selection process will revolve around, are you going to be doing text entry? And will you have user added fonts in your universe? A lot of GPU graphics libraries start to fizzle out when you get into text entry and fonts. Many a game has been built using bitmaps  of letters, Arranged in spritesheets  so that the GPU you can draw text quickly. The game machine companies spend big money in their OS to handle the intricacies of text so the game programmers don't duplicate a lot of effort.\n\nanyway you have touched on a deep subject that does not permit a simple answer. I spent much of my career making Japanese software and so this area was of great interest to me",
                    "ts": "1593274446.009800",
                    "author_id": "UEQ6M68H0",
                    "author_subname": "Edward de Jong",
                    "channel_id": "C5T9GPWFL",
                    "is_msg_unfurl": true,
                    "is_reply_unfurl": true,
                    "text": "<@UK500AGQ4> whenever you’re talking about User interface libraries, Inevitably you will ask for a text entry field. The text entry field is the most complicated part of every operating system. To render text in a box and handle text entry, that is over 1 million lines of code more than your typical project. There are not even 100 people alive in the world who know the truetype language that underlies text rendering. The text editing library code is therefore deeply tied to either the operating system vendor or one of the few companies that has spent millions of dollars to understand it. So Google, Adobe, Apple, Microsoft, and a few Japanese companies and Samsung, Are among the few places where this technology has been mastered. Text entry is incredibly complicated when you get to Asian languages or right to left languages like Hebrew and Arabic. Haven’t you ever wondered why the PDF file format took over as the World standard for documents? It’s because it was the only file format that allowed font embedding, and had missing font fail over technology. Nowadays with soft keyboards on mobile devices the world has gotten very concentrated into just two operating systems. iOS and android, and the market is split between those two about 80\/20 Although the economic value of the Apple platform is about 50% due to their more well heeled customer base.\n\na Console based Product in python can be very platform independent, but the minute you ask for Graphics and the black box of a text entry field you are now tied to an operating system or a platform technology like Adobe Air which offers platform independent text entry fields and font rendering. I am pretty sure that Unity has a cross platform input field technology as well, but I have not used it. The Google Flutter library is an attempt to make a cross platform technology which is powerful, and there is also QT which has been around long enough to cover all sorts of stuff. There are very few Python libraries which delve into font rendering and text entry fields in their full glory. In Photoshop, when you are putting in text, you have the ability to select 5 different rendering styles (\"soft\", \"hard\", \"sharp\", etc.), and you can massage the font rendering process very finely. MS went though a big effort to render fonts on LCD screens more beautifully by doing sub-pixel rendering, i think they called it \"Clear Type\". This is a very deep area and affects output quality very noticeably. Apple has always had terrific rendering, why artists overwhelmingly prefer OSX over Windows. Human languages are really complicated and supporting them is a huge task. English with its lack of accented letters and very simple structure is pretty much the easiest language on earth. Japanese is actually the most difficult language on earth to handle properly. So the benchmark for most technologies, is how well does it handle Japanese? Korean and Chinese are tough but more uniform than Japanese. calligraphic Arabic is basically impossible. But all the right to left languages present very tricky rendering problems because people intermix left to right and right to left sections in the same sentence.\n\nIf you can avoid having a text entry field Like most game machines have a grade of alphabetic characters you type with, then it becomes a great deal easier and now you’re back to simple polygons and bezier splines and there are dozens of libraries that do those.  Python  has a huge library set.\n\nSo the decision point in your library selection process will revolve around, are you going to be doing text entry? And will you have user added fonts in your universe? A lot of GPU graphics libraries start to fizzle out when you get into text entry and fonts. Many a game has been built using bitmaps  of letters, Arranged in spritesheets  so that the GPU you can draw text quickly. The game machine companies spend big money in their OS to handle the intricacies of text so the game programmers don't duplicate a lot of effort.\n\nanyway you have touched on a deep subject that does not permit a simple answer. I spent much of my career making Japanese software and so this area was of great interest to me",
                    "author_name": "Edward de Jong",
                    "author_link": "https:\/\/futureofcoding.slack.com\/team\/UEQ6M68H0",
                    "author_icon": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_48.jpg",
                    "mrkdwn_in": [
                        "text"
                    ],
                    "id": 1,
                    "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&amp;channel=C5T9GPWFL&amp;message_ts=1593274446.009800",
                    "footer": "Thread in Slack Conversation"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "Ygo",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Branching off a new thread from an "
                                },
                                {
                                    "type": "user",
                                    "user_id": "UEQ6M68H0"
                                },
                                {
                                    "type": "text",
                                    "text": " post: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&channel=C5T9GPWFL&message_ts=1593274446.009800",
                                    "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1593274446009800?thread_ts=1593225852.497700&channel=C5T9GPWFL&message_ts=1593274446.009800"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1593761567.182100",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593762588.000000"
        },
        "client_msg_id": "969CDE44-9529-4FBC-8DEA-BB48BB642AAC",
        "text": "text input has a dependency on font rendering, because you’re drawing text. And having to interact with the directionality of the text you’re typing in, which in the case of Hebrew and Arabic might require you to switch directions in the middle of a single text entry field. And for Asian scripts like Korean Chinese and Japanese you type phonetically and then convert that into a selection of characters. With Chinese because of the large number of homonyms you type in \"bai\" And you get to see 15 different glyphs to choose from. Text entry is incredibly complicated, like I said this is why operating systems are valuable and important because the difficulty the seemingly simple text entry field presents is an almost unfathomably deep problem. It is the main reason why there are so few competing operating systems in the graphical interactive software world. If it weren't for text you would see 100 operating systems, and they would be lean and mean, not the sweathogs of today. I can remember when Win95 would run in 4 MB of RAM; now they recommend 1000 times the RAM to run Windows 10. The amount of bloat and excess in modern OS'es is rather embarrassing. There are billions of people using non Roman alphabet languages, and they present incredible challenges.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WOQB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "text input has a dependency on font rendering, because you’re drawing text. And having to interact with the directionality of the text you’re typing in, which in the case of Hebrew and Arabic might require you to switch directions in the middle of a single text entry field. And for Asian scripts like Korean Chinese and Japanese you type phonetically and then convert that into a selection of characters. With Chinese because of the large number of homonyms you type in \"bai\" And you get to see 15 different glyphs to choose from. Text entry is incredibly complicated, like I said this is why operating systems are valuable and important because the difficulty the seemingly simple text entry field presents is an almost unfathomably deep problem. It is the main reason why there are so few competing operating systems in the graphical interactive software world. If it weren't for text you would see 100 operating systems, and they would be lean and mean, not the sweathogs of today. I can remember when Win95 would run in 4 MB of RAM; now they recommend 1000 times the RAM to run Windows 10. The amount of bloat and excess in modern OS'es is rather embarrassing. There are billions of people using non Roman alphabet languages, and they present incredible challenges."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UNCP67JSK",
                    "U014WA16VNJ"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1593785509.182700",
        "client_msg_id": "ec64a8ac-454c-4366-ae3b-c552c12e954e",
        "text": "<@UEQ6M68H0> Are you saying that text entry is representative of the sort of problems that bloat operating systems, or that text entry is _the_ problem that bloats operating systems?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593313532.166800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "24y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Are you saying that text entry is representative of the sort of problems that bloat operating systems, or that text entry is "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problem that bloats operating systems?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1593791472.190300",
        "client_msg_id": "FF24376E-3C89-4290-8F74-E52B007AC73E",
        "text": "Text entry represents about 1 million lines of code if you include rendering. But that is not why operating systems are so bloated. The reason they’re bloated it’s because they don’t put small teams on operating systems do you have gigantic teams who use giant team approaches to making the operating systems. No small team can build a text entry field from scratch. The reason is that you have 20 different language input method editors, each requiring intimate knowledge of the human language. So you have a team for each one and you end up with 1000 people on the operating system team and guess what you’ll get: a giant bloated mess. \n\nIf you look at my hero prof Wirth’s Lilith machine, You’ll see an operating system written from scratch in the Oberon language that a single person can understand the entirety of. It was graphical and did a lot of stuff. But he didn’t try to do Asian input methods because that would’ve been 10 times more than the code that the rest of the operating system took. And of course It got no traction because if you don’t do Asian languages you’re cutting out a good fraction of the entire human race. There have been some great operating system work from Nokia, Symbian wasn’t bad and they had evolved into something terrific, but they were destroyed by Microsoft Mole named Elop , Who infiltrated their organization and convince them to drop their very lean operating system in return for windows mobile which destroyed their company and caused them to completely collapse. Other than Adobe I don’t know any other company that knows enough about about human writing systems To build an actual competitive operating system that would suffice in today’s mobile world. I wouldn’t be surprised if Samsung is gradually building enough knowledge to do it, I don’t know the internals of Samsung but they are big enough to have enough engineers on staff to conquer this tough area where you need a team for each region you’re supporting. You can spend an entire lifetime and still not master Japanese text. Japanese is by far the most difficult language on earth to process. They use four different writing systems simultaneously: romaji, hiragana, katakana, and kanji, And to top it off family names in Japanese are not even in their character set and are therefore non-drawable, so people have to be able to add custom glyphs to their computers. No other language on earth has this problem. I made a lot of money in Japan because I knew how to work with their language it’s a fascinating subject that is immensely complex.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593313532.166800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9qlZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Text entry represents about 1 million lines of code if you include rendering. But that is not why operating systems are so bloated. The reason they’re bloated it’s because they don’t put small teams on operating systems do you have gigantic teams who use giant team approaches to making the operating systems. No small team can build a text entry field from scratch. The reason is that you have 20 different language input method editors, each requiring intimate knowledge of the human language. So you have a team for each one and you end up with 1000 people on the operating system team and guess what you’ll get: a giant bloated mess. \n\n"
                            },
                            {
                                "type": "text",
                                "text": "If you look at "
                            },
                            {
                                "type": "text",
                                "text": "my hero prof Wirth’s"
                            },
                            {
                                "type": "text",
                                "text": " Lilith machine"
                            },
                            {
                                "type": "text",
                                "text": ", You’ll see an operating system written from scratch in the Oberon language that a single person can understand the entirety of. It was graphical and did a lot of stuff. But he didn’t try to do Asian input methods because that would’ve been 10 times more than the code that the rest of the operating system took. And of course It got no traction because if you don’t do Asian languages you’re cutting out a good fraction of the entire human race. There have been some great operating system work from Nokia, Symbian wasn’t bad and they had evolved into something terrific, but they were destroyed by Microsoft Mole named Elop , Who infiltrated their organization and convince them to drop their very lean operating system in return for windows mobile which destroyed their company and caused them to completely collapse. Other than Adobe I don’t know any other company that knows enough about about human writing systems To build an actual competitive operating system that would suffice in today’s mobile world. I wouldn’t be surprised if Samsung is gradually building enough knowledge to do it, I don’t know the internals of Samsung but they are big enough to have enough engineers on staff to conquer this tough area "
                            },
                            {
                                "type": "text",
                                "text": "where you"
                            },
                            {
                                "type": "text",
                                "text": " need a team for each region you’re supporting. You can spend an entire lifetime and still not master Japanese"
                            },
                            {
                                "type": "text",
                                "text": " text. Japanese is by far the most difficult language on earth to process. They use four different writing systems simultaneously: romaji, hiragana, katakana, and kanji, And to top it off family names in Japanese are not even in their character set and are therefore non-drawable, so people have to be able to add custom glyphs to their computers. No other language on earth has this problem. I made a lot of money in Japan because I knew how to work with their language it’s a fascinating subject that is immensely complex."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1593840778.209800",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1593873428.000000"
        },
        "client_msg_id": "96C6DA4A-C946-4F2D-BFAA-3D9F7D866411",
        "text": "A comprehensive look at what’s new in Metal from WWDC2020. TBDR is coming to Macs with Apple Silicon, harmonizing CPU and GPU architectures across all Apple devices. This comes after they’ve been designing their own CPUs for a decade and their own GPUs for six years.\n\nThe GPU compute capabilities seem very mature. Have a look at the function pointer feature and the ray tracing APIs.\n\nSeems like Apple is ramping up to position this as a serious alternative to the energy-hungry overdraw-heavy classic world of desktop graphics. \nWill be interesting to see how the industry reacts to a different approach of slicing the market: previously you’d build for either PC\/console or mobile, mobile often being second thought ported separately if at all. Soon you can access part of mobile + part of notebook\/desktop (+ perhaps a more capable Apple TV which would qualify as a gaming console?) with the same architecture, but of course limited to Apple devices. It was easy to ignore Macs for gaming in the past, but now it basically comes “for free” if you consider shipping for mobile\/iOS.\n\n<http:\/\/metalkit.org\/2020\/07\/03\/wwdc20-whats-new-in-metal.html|http:\/\/metalkit.org\/2020\/07\/03\/wwdc20-whats-new-in-metal.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593840778.209800",
        "reply_count": 19,
        "reply_users_count": 7,
        "latest_reply": "1594133985.238100",
        "reply_users": [
            "UHDQ62M4P",
            "UC6997THT",
            "UEQ6M68H0",
            "U5STGTB3J",
            "UC2A2ARPT",
            "UJN1TAYEQ",
            "UN57U8V53"
        ],
        "replies": [
            {
                "user": "UHDQ62M4P",
                "ts": "1593841756.210000"
            },
            {
                "user": "UC6997THT",
                "ts": "1593848500.210300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1593849799.210500"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1593856235.215400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1593872396.219100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593876270.219500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593876375.219700"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1593889260.230800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1593891917.231000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1593892206.231200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1593892557.231400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593894728.235000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593894749.235200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593894800.235400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593894865.235600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1593894980.235800"
            },
            {
                "user": "UC6997THT",
                "ts": "1594017606.236200"
            },
            {
                "user": "UN57U8V53",
                "ts": "1594133937.237900"
            },
            {
                "user": "UN57U8V53",
                "ts": "1594133985.238100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wTde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A comprehensive look at what’s new in Metal from WWDC2020. TBDR is coming to Macs with Apple Silicon, harmonizing CPU and GPU architectures across all Apple devices. This comes after they’ve been designing their own CPUs for a decade and their own GPUs for six years.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "The GPU compute capabilities seem very mature. Have a look at the function pointer feature and the ray tracing APIs.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nSeems like Apple is ramping up to position this as a serious alternative to the energy-hungry overdraw-heavy classic world of desktop graphics. \nWill be interesting to see how the industry reacts to a different approach of slicing the market: previously you’d build for either PC\/console or mobile, mobile often being second thought ported separately if at all. Soon you can access part of mobile + part of notebook\/desktop (+ perhaps a more capable Apple TV which would qualify as a gaming console?) with the same architecture, but of course limited to Apple devices. It was easy to ignore Macs for gaming in the past, but now it basically comes “for free” if you consider shipping for mobile\/iOS.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/metalkit.org\/2020\/07\/03\/wwdc20-whats-new-in-metal.html",
                                "text": "http:\/\/metalkit.org\/2020\/07\/03\/wwdc20-whats-new-in-metal.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_with_monocle",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1593841756.210000",
        "client_msg_id": "b71070d9-251d-4cb4-8864-cf9f9c65da3e",
        "text": "correction: it is not an alternative to overdraw, it just makes overdraw cheap",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593840778.209800",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QPdk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "correction: it is not an alternative to overdraw, it just makes overdraw cheap"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]