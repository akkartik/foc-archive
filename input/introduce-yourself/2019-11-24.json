[
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574612329.233700",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1574612385.000000"
        },
        "client_msg_id": "425e9067-d8f4-4117-a3c0-f570b42ddeb4",
        "text": "I wonder how one gets hired at MS. I landed interviews at Google and FB, but MS never called. Congrats on the opportunity to get paid to learn and use the LSP. I'm envious!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566791812.110500",
        "parent_user_id": "UMPQ9A65N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=q7v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder how one gets hired at MS. I landed interviews at Google and FB, but MS never called. Congrats on the opportunity to get paid to learn and use the LSP. I'm envious!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574619130.234100",
        "client_msg_id": "c0f45c67-3697-4ea5-8a83-d3f44112cc85",
        "text": "You mean this?\n\n  interface TreeNode {\n   children: TreeNode[]\n   line: string\n  }",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567179493.037600",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TFn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mean this?\n\n  interface TreeNode {\n   children: TreeNode[]\n   line: string\n  }"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574619585.234300",
        "client_msg_id": "fd2106e2-0344-44d4-9b44-1f4566564948",
        "text": "I'm scratching my head about how this could be used in practice... given the intro in the paper, it follows that TN would encode these two JSON snippets the same way: {”mozilla”:802} and {”mozilla”:\"802\"}. And obvious questions arise like how you can store a string like `\"   hello\\n world\\0\"` in TN. My own LES language <http:\/\/loyc.net\/les> answers these questions in a way that developers are already familiar with... and LES3 generalizes literals to support new data types. So what's the TN equivalent?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567179493.037600",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XAt3D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm scratching my head about how this could be used in practice... given the intro in the paper, it follows that TN would encode these two JSON snippets the same way: {”mozilla”:802} and {”mozilla”:\"802\"}. And obvious questions arise like how you can store a string like "
                            },
                            {
                                "type": "text",
                                "text": "\"   hello\\n world\\0\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in TN. My own LES language "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/les"
                            },
                            {
                                "type": "text",
                                "text": " answers these questions in a way that developers are already familiar with... and LES3 generalizes literals to support new data types. So what's the TN equivalent?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574621438.234700",
        "client_msg_id": "e3765d8b-1532-466a-81d0-1b387311e2d9",
        "text": "A debugger that can jump back in time is a huge win! Not that you need FoC folks to tell you that. Even more impressive if it can step back by one line in a performant way (less than a second on a large page?) ...\n\nI wonder how you've done it, I mean, if your JS and WebAssembly is compiled by SpiderMonkey, it's sounds like a giant feat to undo all the things that it is doing. There's a trick to it, right?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568217996.158700",
        "parent_user_id": "UN9R2KEUE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1HFn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A debugger that can jump back in time is a huge win! Not that you need FoC folks to tell you that. Even more impressive if it can step back by one line in a performant way (less than a second on a large page?) ...\n\nI wonder how you've done it, I mean, if your JS and WebAssembly is compiled by SpiderMonkey, it's sounds like a giant feat to undo all the things that it is doing. There's a trick to it, right?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574622001.235100",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1574622074.000000"
        },
        "client_msg_id": "65da479a-339d-4cbb-a1ef-73d44fb5ff08",
        "text": "Here's hoping someone like you might implement a structured editor for Loyc trees <http:\/\/loyc.net\/loyc-trees> ... I don't have time to make one myself",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1568600405.006700",
        "parent_user_id": "UJZS8UUJV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dT1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's hoping someone like you might implement a structured editor for Loyc trees "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/loyc.net\/loyc-trees"
                            },
                            {
                                "type": "text",
                                "text": " ... I don't have time to make one myself"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]