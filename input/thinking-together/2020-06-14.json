[
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1592151355.265000",
        "client_msg_id": "b26e34d6-8a9a-4008-952f-a4abfea6b81f",
        "text": "I come a bit late (!) too this conversation, but I agree with <@UC2A2ARPT> when he says:\n&gt; This is why I see potential for visual programming — it's not just a way to make the programming experience more _live_, it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so.\nAnd Scratch offer something like that: you program the sprites and even the scene. You have a simple sound editor and a drawing tool built in, and I see lots of children spending more time drawing than programming, some doesn't even feel like to program at all. In the end you might feel that programming is only one mean among others in your creation process.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I come a bit late (!) too this conversation, but I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " when he says:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is why I see potential for visual programming — it's not just a way to make the programming experience more "
                            },
                            {
                                "type": "text",
                                "text": "live",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And Scratch offer something like that: you program the sprites and even the scene. You have a simple sound editor and a drawing tool built in, and I see lots of children spending more time drawing than programming, some doesn't even feel like to program at all. In the end you might feel that programming is only one mean among others in your creation process."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1592151775.265200",
        "client_msg_id": "aea1dcf6-39e3-4aca-b6ee-a901a605b524",
        "text": "I also like the local maxima point from <@U6FKVSVCK>. I feel the same that it is difficult to make an incremental move from one maximum (now\/text programming only for experts) to an other (future\/programming that end user can do).\n&gt; There's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first).\nThat is why I guess that a good approach can be to make something that is targeted at end-user programmers. Maybe with a secondary focus to make some expert programmers happy, but not try to convince or make them move all at once.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MRHF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like the local maxima point from "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": ". I feel the same that it is difficult to make an incremental move from one maximum (now\/text programming only for experts) to an other (future\/programming that end user can do).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is why I guess that a good approach can be to make something that is targeted at end-user programmers. Maybe with a secondary focus to make some expert programmers happy, but not try to convince or make them move all at once."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1592154031.266000",
        "client_msg_id": "635a2a9e-0d23-45fa-9f18-67a887125a37",
        "text": "Very interesting discussion! Especially the Pixar anecdote (thanks <@U6FKVSVCK> for sharing it :slightly_smiling_face: ). I guess that any \"advanced\" are the tools, you will always be able to use it in a messing way. And there will be always cases where it is reasonable to program messy things (as for the Pixar example). For me this is inherent to the act of programming: you are always making compromise between \"perfect\" (at least perceived perfection, but that is another subject) and \"useful\/actually used\". And I guess it is important to have this central aspect of programming in mind when creating programming tool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cl4ML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting discussion! Especially the Pixar anecdote (thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " for sharing it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " ). I guess that any \"advanced\" are the tools, you will always be able to use it in a messing way. And there will be always cases where it is reasonable to program messy things (as for the Pixar example). For me this is inherent to the act of programming: you are always making compromise between \"perfect\" (at least perceived perfection, but that is another subject) and \"useful\/actually used\". And I guess it is important to have this central aspect of programming in mind when creating programming tool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1592158721.266200",
        "client_msg_id": "3658f3a1-c53c-46c7-9bca-8623c6af4061",
        "text": "My understanding is that all WASM modules are running in a separate thread and are not able to directly call the \"operating system\" which includes the event and screen model. And you have to used shared memory blocks to communicate between these two processes. That is not what i call a full opening to other languages in the browser universe.  On a  mac or pc, or mobile device you can write in any language, and as long as you package it as an executable for the OS, the OS doesn't care a bit which source languages you used.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PU6S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My understanding is that all WASM modules are running in a separate thread and are not able to directly call the \"operating system\" which includes the event and screen model. And you have to used shared memory blocks to communicate between these two processes. That is not what i call a full opening to other languages in the browser universe.  On a  mac or pc, or mobile device you can write in any language, and as long as you package it as an executable for the OS, the OS doesn't care a bit which source languages you used."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1592161232.292200",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1592161532.000000"
        },
        "client_msg_id": "1FF0E9EC-FE00-4948-A450-7C84AF47C26C",
        "text": "It depends on what’s in the shim. In one sense, you’re right that Go can’t directly call the OS because it only has access to thunks and data that the VM owner puts in its environment, but on the other hand, the OS is accessed in JavaScript entirely through the global object so the “opening” doesn’t need to be very wide at all for access to the OS to be about even in JS and wasm in practice.\n\nThere must be synchronization overhead if the wasm executes in another thread (I didn’t know it did, that’s good to know!), but I haven’t noticed it. Wasm must be implemented in a more efficient way than Web Workers, because worker isolation is so strict that you can’t call one synchronously from, say, an event handler that needs to finish in one JS event loop tick, but you can call wasm in an event handler.\n\nThe people working on WASI are trying to create a shim that encompasses every functionality that you’d typically get from an OS, so that every compiler can just target that one shim instead of inventing a new one for their language. That’ll provide some of the language-independence you’re talking about, especially since if it becomes standard, browsers can implement DOM access directly instead of relying on memory sharing with JS.\n\nIf you’re curious, the Go shim is here, just a few hundred lines: <https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js|https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js> The system calls it exports to wasm binaries are in importObject (syscall\/js.valueGet, syscall\/js.valueSet, etc).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "attachments": [
            {
                "fallback": "[golang\/go] misc\/wasm\/wasm_exec.js",
                "text": "```\n\/\/ Copyright 2018 The Go Authors. All rights reserved.\n\/\/ Use of this source code is governed by a BSD-style\n\/\/ license that can be found in the LICENSE file.\n\n(() =&gt; {\n\t\/\/ Map multiple JavaScript environments to a single common API,\n\t\/\/ preferring web standards over Node.js API.\n\t\/\/\n\t\/\/ Environments considered:\n\t\/\/ - Browsers\n\t\/\/ - Node.js\n\t\/\/ - Electron\n\t\/\/ - Parcel\n\n\tif (typeof global !== \"undefined\") {\n\t\t\/\/ global already exists\n\t} else if (typeof window !== \"undefined\") {\n\t\twindow.global = window;\n\t} else if (typeof self !== \"undefined\") {\n\t\tself.global = self;\n\t} else {\n\t\tthrow new Error(\"cannot export Go (neither global, window nor self is defined)\");\n\t}\n\n\tif (!global.require &amp;&amp; typeof require !== \"undefined\") {\n\t\tglobal.require = require;\n\t}\n\n\tif (!global.fs &amp;&amp; global.require) {\n\t\tconst fs = require(\"fs\");\n\t\tif (Object.keys(fs) !== 0) {\n\t\t\tglobal.fs = fs;\n\t\t}\n\t}\n\n\tconst enosys = () =&gt; {\n\t\tconst err = new Error(\"not implemented\");\n\t\terr.code = \"ENOSYS\";\n\t\treturn err;\n\t};\n\n\tif (!global.fs) {\n\t\tlet outputBuf = \"\";\n\t\tglobal.fs = {\n\t\t\tconstants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, \/\/ unused\n\t\t\twriteSync(fd, buf) {\n\t\t\t\toutputBuf += decoder.decode(buf);\n\t\t\t\tconst nl = outputBuf.lastIndexOf(\"\\n\");\n\t\t\t\tif (nl != -1) {\n\t\t\t\t\tconsole.log(outputBuf.substr(0, nl));\n\t\t\t\t\toutputBuf = outputBuf.substr(nl + 1);\n\t\t\t\t}\n\t\t\t\treturn buf.length;\n\t\t\t},\n\t\t\twrite(fd, buf, offset, length, position, callback) {\n\t\t\t\tif (offset !== 0 || length !== buf.length || position !== null) {\n\t\t\t\t\tcallback(enosys());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst n = this.writeSync(fd, buf);\n\t\t\t\tcallback(null, n);\n\t\t\t},\n\t\t\tchmod(path, mode, callback) { callback(enosys()); },\n\t\t\tchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tclose(fd, callback) { callback(enosys()); },\n\t\t\tfchmod(fd, mode, callback) { callback(enosys()); },\n\t\t\tfchown(fd, uid, gid, callback) { callback(enosys()); },\n\t\t\tfstat(fd, callback) { callback(enosys()); },\n\t\t\tfsync(fd, callback) { callback(null); },\n\t\t\tftruncate(fd, length, callback) { callback(enosys()); },\n\t\t\tlchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tlink(path, link, callback) { callback(enosys()); },\n\t\t\tlstat(path, callback) { callback(enosys()); },\n\t\t\tmkdir(path, perm, callback) { callback(enosys()); },\n\t\t\topen(path, flags, mode, callback) { callback(enosys()); },\n\t\t\tread(fd, buffer, offset, length, position, callback) { callback(enosys()); },\n\t\t\treaddir(path, callback) { callback(enosys()); },\n\t\t\treadlink(path, callback) { callback(enosys()); },\n\t\t\trename(from, to, callback) { callback(enosys()); },\n\t\t\trmdir(path, callback) { callback(enosys()); },\n\t\t\tstat(path, callback) { callback(enosys()); },\n\t\t\tsymlink(path, link, callback) { callback(enosys()); },\n\t\t\ttruncate(path, length, callback) { callback(enosys()); },\n\t\t\tunlink(path, callback) { callback(enosys()); },\n\t\t\tutimes(path, atime, mtime, callback) { callback(enosys()); },\n\t\t};\n\t}\n\n\tif (!global.process) {\n\t\tglobal.process = {\n\t\t\tgetuid() { return -1; },\n\t\t\tgetgid() { return -1; },\n\t\t\tgeteuid() { return -1; },\n\t\t\tgetegid() { return -1; },\n\t\t\tgetgroups() { throw enosys(); },\n\t\t\tpid: -1,\n\t\t\tppid: -1,\n\t\t\tumask() { throw enosys(); },\n\t\t\tcwd() { throw enosys(); },\n\t\t\tchdir() { throw enosys(); },\n\t\t}\n\t}\n\n\tif (!global.crypto) {\n\t\tconst nodeCrypto = require(\"crypto\");\n\t\tglobal.crypto = {\n\t\t\tgetRandomValues(b) {\n\t\t\t\tnodeCrypto.randomFillSync(b);\n\t\t\t},\n\t\t};\n\t}\n\n\tif (!global.performance) {\n\t\tglobal.performance = {\n\t\t\tnow() {\n\t\t\t\tconst [sec, nsec] = process.hrtime();\n\t\t\t\treturn sec * 1000 + nsec \/ 1000000;\n\t\t\t},\n\t\t};\n\t}\n\n\tif (!global.TextEncoder) {\n\t\tglobal.TextEncoder = require(\"util\").TextEncoder;\n\t}\n\n\tif (!global.TextDecoder) {\n\t\tglobal.TextDecoder = require(\"util\").TextDecoder;\n\t}\n\n\t\/\/ End of polyfills for common API.\n\n\tconst encoder = new TextEncoder(\"utf-8\");\n\tconst decoder = new TextDecoder(\"utf-8\");\n\n\tglobal.Go = class {\n\t\tconstructor() {\n\t\t\tthis.argv = [\"js\"];\n\t\t\tthis.env = {};\n\t\t\tthis.exit = (code) =&gt; {\n\t\t\t\tif (code !== 0) {\n\t\t\t\t\tconsole.warn(\"exit code:\", code);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._exitPromise = new Promise((resolve) =&gt; {\n\t\t\t\tthis._resolveExitPromise = resolve;\n\t\t\t});\n\t\t\tthis._pendingEvent = null;\n\t\t\tthis._scheduledTimeouts = new Map();\n\t\t\tthis._nextCallbackTimeoutID = 1;\n\n\t\t\tconst setInt64 = (addr, v) =&gt; {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t\tthis.mem.setUint32(addr + 4, Math.floor(v \/ 4294967296), true);\n\t\t\t}\n\n\t\t\tconst getInt64 = (addr) =&gt; {\n\t\t\t\tconst low = this.mem.getUint32(addr + 0, true);\n\t\t\t\tconst high = this.mem.getInt32(addr + 4, true);\n\t\t\t\treturn low + high * 4294967296;\n\t\t\t}\n\n\t\t\tconst loadValue = (addr) =&gt; {\n\t\t\t\tconst f = this.mem.getFloat64(addr, true);\n\t\t\t\tif (f === 0) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(f)) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\n\t\t\t\tconst id = this.mem.getUint32(addr, true);\n\t\t\t\treturn this._values[id];\n\t\t\t}\n\n\t\t\tconst storeValue = (addr, v) =&gt; {\n\t\t\t\tconst nanHead = 0x7FF80000;\n\n\t\t\t\tif (typeof v === \"number\" &amp;&amp; v !== 0) {\n\t\t\t\t\tif (isNaN(v)) {\n\t\t\t\t\t\tthis.mem.setUint32(addr + 4, nanHead, true);\n\t\t\t\t\t\tthis.mem.setUint32(addr, 0, true);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.mem.setFloat64(addr, v, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (v === undefined) {\n\t\t\t\t\tthis.mem.setFloat64(addr, 0, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet id = this._ids.get(v);\n\t\t\t\tif (id === undefined) {\n\t\t\t\t\tid = this._idPool.pop();\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\tid = this._values.length;\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[id] = v;\n\t\t\t\t\tthis._goRefCounts[id] = 0;\n\t\t\t\t\tthis._ids.set(v, id);\n\t\t\t\t}\n\t\t\t\tthis._goRefCounts[id]++;\n\t\t\t\tlet typeFlag = 0;\n\t\t\t\tswitch (typeof v) {\n\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\ttypeFlag = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\ttypeFlag = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"symbol\":\n\t\t\t\t\t\ttypeFlag = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\ttypeFlag = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n\t\t\t\tthis.mem.setUint32(addr, id, true);\n\t\t\t}\n\n\t\t\tconst loadSlice = (addr) =&gt; {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn new Uint8Array(this._inst.exports.mem.buffer, array, len);\n\t\t\t}\n\n\t\t\tconst loadSliceOfValues = (addr) =&gt; {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\tconst a = new Array(len);\n\t\t\t\tfor (let i = 0; i &lt; len; i++) {\n\t\t\t\t\ta[i] = loadValue(array + i * 8);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\tconst loadString = (addr) =&gt; {\n\t\t\t\tconst saddr = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n\t\t\t}\n\n\t\t\tconst timeOrigin = Date.now() - performance.now();\n\t\t\tthis.importObject = {\n\t\t\t\tgo: {\n\t\t\t\t\t\/\/ Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)\n\t\t\t\t\t\/\/ may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported\n\t\t\t\t\t\/\/ function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).\n\t\t\t\t\t\/\/ This changes the SP, thus we have to update the SP used by the imported function.\n\n\t\t\t\t\t\/\/ func wasmExit(code int32)\n\t\t\t\t\t\"runtime.wasmExit\": (sp) =&gt; {\n\t\t\t\t\t\tconst code = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tthis.exited = true;\n\t\t\t\t\t\tdelete this._inst;\n\t\t\t\t\t\tdelete this._values;\n\t\t\t\t\t\tdelete this._goRefCounts;\n\t\t\t\t\t\tdelete this._ids;\n\t\t\t\t\t\tdelete this._idPool;\n\t\t\t\t\t\tthis.exit(code);\n\t\t\t\t\t},\n\n\t\t\t\t\t\/\/ func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)\n\t\t\t\t\t\"runtime.wasmWrite\": (sp) =&gt; {\n\t\t\t\t\t\tconst fd = getInt64(sp + 8);\n\t\t\t\t\t\tconst p = getInt64(sp + 16);\n\t\t\t\t\t\tconst n = this.mem.getInt32(sp + 24, true);\n\t\t\t\t\t\tfs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n\t\t\t\t\t},\n\n\t\t\t\t\t\/\/ func resetMemoryDataView()\n\t\t\t\t\t\"runtime.resetMemoryDataView\": (sp) =&gt; {\n\t\t\t\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\t\t\t},\n\n\t\t\t\t\t\/\/ func nanotime1() int64\n\t\t\t\t\t\"runtime.nanotime1\": (sp) =&gt; {\n\t\t\t\t\t\tsetInt64…",
                "title": "misc\/wasm\/wasm_exec.js",
                "footer": "<https:\/\/github.com\/golang\/go|golang\/go>",
                "id": 1,
                "title_link": "https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l6h\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It depends on what’s in the shim. In one sense, you’re right that Go can’t directly call the OS because it only has access to thunks and data that the VM owner puts in its environment, but on the other hand, the OS is accessed in JavaScript entirely through the global object so the “opening” doesn’t need to be very wide at all for access to the OS to be about even in JS and wasm in practice.\n\nThere must be synchronization overhead if the wasm executes in another thread (I didn’t know it did, that’s good to know!), but I haven’t noticed it. Wasm must be implemented in a more efficient way than Web Workers, because worker isolation is so strict that you can’t call one synchronously from, say, an event handler that needs to finish in one JS event loop tick, but you can call wasm in an event handler.\n\nThe people working on WASI are trying to create a shim that encompasses every functionality that you’d typically get from an OS, so that every compiler can just target that one shim instead of inventing a new one for their language. That’ll provide some of the language-independence you’re talking about, especially since if it becomes standard, browsers can implement DOM access directly instead of relying on memory sharing with JS.\n\nIf you’re curious, the Go shim is here, just a few hundred lines: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js",
                                "text": "https:\/\/github.com\/golang\/go\/blob\/master\/misc\/wasm\/wasm_exec.js"
                            },
                            {
                                "type": "text",
                                "text": " The system calls it exports to wasm binaries are in importObject (syscall\/js.valueGet, syscall\/js.valueSet, etc)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1592162624.294200",
        "client_msg_id": "b213a0e8-edba-42de-968c-a4a6c917948e",
        "text": "A paper on the history of Objective-C and (relevant to this group) it’s motivation of enabling a “software IC” marketplace. <https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/3386332>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592162624.294200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1592164688.294700",
        "reply_users": [
            "U013HU44GLS"
        ],
        "replies": [
            {
                "user": "U013HU44GLS",
                "ts": "1592164688.294700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A paper on the history of Objective-C and (relevant to this group) it’s motivation of enabling a “software IC” marketplace. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/3386332"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "U013HU44GLS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013HU44GLS",
        "type": "message",
        "ts": "1592164688.294700",
        "client_msg_id": "d35f9835-e12d-4e0f-8530-0cf24253cbc0",
        "text": "I know it's not exactly the most popular language, but it's my favorite",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cb9e0e557132",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-12\/1132600153425_cb9e0e5571321437af24_72.jpg",
            "first_name": "Jean-Louis",
            "real_name": "Jean-Louis Villecroze",
            "display_name": "CocoaGeek",
            "team": "T5TCAFTA9",
            "name": "jeanlouis.villecroze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592162624.294200",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OBgC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know it's not exactly the most popular language, but it's my favorite"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1592166684.295000",
        "client_msg_id": "2dbe5438-508d-4634-b0be-262aedd6f045",
        "text": "<@UFEQUBNNT> I'm currently prototyping a desktop program written in Rust in which I'm using wasm-compiled Rust code as sandboxed plugins. My impression is that wasm is still under heavy development and important proposals like wasm interface types aren't there yet. For my pretty simple use case, I was able to use wasmtime [1]. Due to the lack of interface types, the interaction between VM and wasm code is painfully low-level, but it can be done. What's your use case and which PL would you like to embed the Wasm VM into?\n[1] <https:\/\/github.com\/bytecodealliance\/wasmtime>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "attachments": [
            {
                "fallback": "bytecodealliance\/wasmtime",
                "text": "Standalone JIT-style runtime for WebAssembly, using Cranelift",
                "title": "bytecodealliance\/wasmtime",
                "footer": "<https:\/\/github.com\/bytecodealliance\/wasmtime|bytecodealliance\/wasmtime>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1504015315,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Website",
                        "value": "<https:\/\/wasmtime.dev\/>",
                        "short": true
                    },
                    {
                        "title": "Stars",
                        "value": "3240",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/bytecodealliance\/wasmtime",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7+YOQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " I'm currently prototyping a desktop program written in Rust in which I'm using wasm-compiled Rust code as sandboxed plugins. My impression is that wasm is still under heavy development and important proposals like wasm interface types aren't there yet. For my pretty simple use case, I was able to use wasmtime [1]. Due to the lack of interface types, the interaction between VM and wasm code is painfully low-level, but it can be done. What's your use case and which PL would you like to embed the Wasm VM into?\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/bytecodealliance\/wasmtime"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1592169728.296900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1592169798.000000"
        },
        "client_msg_id": "eac54eac-9af3-4563-9e0d-b27b8bc15518",
        "text": ":lower_left_paintbrush: <https:\/\/futureofcoding.org\/episodes\/048|Episode 48 • Jennifer Jacobs • Para &amp; Dynamic Brushes> :art:\n\nThere’s a small handful of people that I’ve been requested again and again to interview on the Future of Coding podcast. <http:\/\/jenniferjacobs.mat.ucsb.edu\/|Jennifer Jacobs> is one of those people. Her work on <http:\/\/jenniferjacobs.mat.ucsb.edu\/#db|Dynamic Brushes> in particular, and parametric drawing in general, occupies a major intersection between disciplines and provides insights that we can all apply to our own work. This interview touches on childhood education, programming tools for both non-programmers and expert programmers, tangible interfaces, wearable and embodied computation, aesthetics, the relationship between academia and industry, means of evaluating the efficacy of projects, geometric encodings of first-order logic, symbolic representations, whether <https:\/\/en.wikipedia.org\/wiki\/Scratch_(programming_language)|Scratch> could exist outside MIT, and more. Jennifer does a wonderful job articulating the nature her own work, but also the works of her collaborators, peers, and influences, so that we come away with a great understanding for the broader spaces in which her research fits. Jennifer is already am important figure in our Future of Coding field, and I am very excited to follow her career and see all the places the impacts of her work will be felt.\n\nYou’ll notice right away that <@U5TCAFTD3> is sitting in the interviewer chair this time. This is the first of a handful of episodes that Steve recorded in 2019 but didn’t release. I’m planning to edit and release them throughout 2020, so you’ll hear a bit more of Steve yet.\n\n<https:\/\/futureofcoding.org\/episodes\/048>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592169728.296900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1592213080.310400",
        "reply_users": [
            "UCUSW7WVD",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1592193278.298000"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1592213080.310400"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1592399218.000791",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LhEFI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "lower_left_paintbrush",
                                "unicode": "1f58c-fe0f"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/048",
                                "text": "Episode 48 • Jennifer Jacobs • Para & Dynamic Brushes"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "art",
                                "unicode": "1f3a8"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere’s a small handful of people that I’ve been requested again and again to interview on the Future of Coding podcast. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jenniferjacobs.mat.ucsb.edu\/",
                                "text": "Jennifer Jacobs"
                            },
                            {
                                "type": "text",
                                "text": " is one of those people. Her work on "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/jenniferjacobs.mat.ucsb.edu\/#db",
                                "text": "Dynamic Brushes"
                            },
                            {
                                "type": "text",
                                "text": " in particular, and parametric drawing in general, occupies a major intersection between disciplines and provides insights that we can all apply to our own work. This interview touches on childhood education, programming tools for both non-programmers and expert programmers, tangible interfaces, wearable and embodied computation, aesthetics, the relationship between academia and industry, means of evaluating the efficacy of projects, geometric encodings of first-order logic, symbolic representations, whether "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Scratch_(programming_language)",
                                "text": "Scratch"
                            },
                            {
                                "type": "text",
                                "text": " could exist outside MIT, and more. Jennifer does a wonderful job articulating the nature her own work, but also the works of her collaborators, peers, and influences, so that we come away with a great understanding for the broader spaces in which her research fits. Jennifer is already am important figure in our Future of Coding field, and I am very excited to follow her career and see all the places the impacts of her work will be felt.\n\nYou’ll notice right away that "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " is sitting in the interviewer chair this time. This is the first of a handful of episodes that Steve recorded in 2019 but didn’t release. I’m planning to edit and release them throughout 2020, so you’ll hear a bit more of Steve yet.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/048"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013HU44GLS",
                    "UF6RLAL7J",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UFB8STN7K",
                    "UJRDRMWQN",
                    "UPVBV34EL",
                    "US370TRJA",
                    "UAVCC2X70",
                    "UJ6LDMMN0"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "U014Y19RYA3",
        "type": "message",
        "ts": "1592178205.297300",
        "client_msg_id": "324a5963-8912-4a78-9b8c-170e851e02e9",
        "text": "I think it's easier to understand WASM if you forget about the \"web\" part and just see it as a lightweight re-imagining of JVM\/.NET without all the built-in garbage collector, OOP system, heavy runtime gunk and just the basics you need to run C (from whence you can run mostly anything)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3ab4d3a66e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ab4d3a66e470ce10eb7ec812fab3c46.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Stephen",
            "real_name": "Stephen Paul Weber",
            "display_name": "singpolyma",
            "team": "T5TCAFTA9",
            "name": "singpolyma",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hOj1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's easier to understand WASM if you forget about the \"web\" part and just see it as a lightweight re-imagining of JVM\/.NET without all the built-in garbage collector, OOP system, heavy runtime gunk and just the basics you need to run C (from whence you can run mostly anything)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U014Y19RYA3",
        "type": "message",
        "ts": "1592178283.297500",
        "client_msg_id": "5d6cb434-e96e-41ec-8e29-96aa3213e027",
        "text": "the fact that you can also easily export any functions you want from your host into the WASM space to enable easy interop (at the C level of ints, floats, and pointers) to call any function in the place the WASM is embedded is very nice -- it enables restricting the code's view of the outside world to whatever you want it to have",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3ab4d3a66e4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ab4d3a66e470ce10eb7ec812fab3c46.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Stephen",
            "real_name": "Stephen Paul Weber",
            "display_name": "singpolyma",
            "team": "T5TCAFTA9",
            "name": "singpolyma",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jqR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the fact that you can also easily export any functions you want from your host into the WASM space to enable easy interop (at the C level of ints, floats, and pointers) to call any function in the place the WASM is embedded is very nice -- it enables restricting the code's view of the outside world to whatever you want it to have"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1592193278.298000",
        "client_msg_id": "95befdc2-98c5-4c54-983d-724362e38a65",
        "text": "I haven't watched it yet, but the 5-minute Para demo is :exploding_head:\n\n<https:\/\/youtu.be\/Tdvj8XMrqXc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1592169728.296900",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Adobe MAX 2014 Sneaks: #ProjectPara  | Adobe Creative Cloud",
                "title_link": "https:\/\/youtu.be\/Tdvj8XMrqXc",
                "author_name": "Adobe Creative Cloud",
                "author_link": "https:\/\/www.youtube.com\/user\/AdobeCreativeCloud",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Tdvj8XMrqXc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Adobe MAX 2014 Sneaks: #ProjectPara  | Adobe Creative Cloud",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Tdvj8XMrqXc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/Tdvj8XMrqXc",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/Tdvj8XMrqXc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DHhA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't watched it yet, but the 5-minute Para demo is "
                            },
                            {
                                "type": "emoji",
                                "name": "exploding_head",
                                "unicode": "1f92f"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/Tdvj8XMrqXc"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1592201244.298800",
        "client_msg_id": "52fd31be-03bd-40d9-b42e-274b2659204b",
        "text": "PR sent! Feel free to DM me if you want to discuss the direction I've taken things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591605576.049500",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gc==t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "PR sent! Feel free to DM me if you want to discuss the direction I've taken things."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1592202932.299100",
        "client_msg_id": "bc9e47d6-bb48-4355-9dc6-71541ca3176a",
        "text": "Going with the Scatch example.  You can make costumes for your sprites.  You can program sprites to change costumes.  But you can't program sprites to make costumes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EZd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Going with the Scatch example.  You can make costumes for your sprites.  You can program sprites to change costumes.  But you can't program sprites to make costumes."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]