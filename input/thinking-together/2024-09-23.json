[
    {
        "user": "U04BQN4K3AP",
        "type": "message",
        "ts": "1727077286.414899",
        "client_msg_id": "cb807daa-577d-4ed0-bd35-80c6cb9b77de",
        "text": "Not sure if this is the right place to post this and whether this is interesting to this group, but I gave a short presentation last week about the *future of programming systems* and curious what you think about it. I wrote it down in a blog post here: <https:\/\/blog.waleson.com\/2024\/09\/the-future-of-programming-systems-four.html>\n\nThere are four thoughts that I think will shape the future:\n• Software development systems have a lot of vestigial parts (left-overs from the way it evolved)\n• Understanding is crucial to development, and with the right mediums we can understand the subject much faster\n• Most software platforms developed bottom-up, from the silicon, instead of focusing on the needs of the people\n• Software is truly different from other technologies in the freedom it gives us, so we can and should invent new abstractions that make things simpler than they are now\nThis isn't in the post, but I think that in the future we'll see:\n• Great integration between design tools, version control, IDEs, databases, monitoring &amp; logging systems.\n• High-level concepts as first class systems in the programming systems. Simple examples are an email or phone number type as a database primitive, instead of strings.\n• Better reasoning \/ business logic rules so that IDEs can give feedback on \"you are not allowed to store PII in this database\".\nThis way all stakeholders can collaborate and the system can check correctness much better, and we require less discipline\/in-depth knowledge from the team members.\n\nI suspect most of these ideas have come by in this community already, but still curious what you think!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3f6bb318da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3f6bb318da6a41ad15bf0040637dfca7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Jouke",
            "real_name": "Jouke Waleson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jouke",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727077286.414899",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1727175371.544699",
        "reply_users": [
            "UJBAJNFLK",
            "U04BQN4K3AP",
            "U0123H7JRDM"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1727158379.866259"
            },
            {
                "user": "U04BQN4K3AP",
                "ts": "1727164166.880259"
            },
            {
                "user": "U04BQN4K3AP",
                "ts": "1727164647.819399"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1727168391.400269"
            },
            {
                "user": "U04BQN4K3AP",
                "ts": "1727168743.350109"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727175371.544699"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gRwjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if this is the right place to post this and whether this is interesting to this group, but I gave a short presentation last week about the "
                            },
                            {
                                "type": "text",
                                "text": "future of programming systems",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and curious what you think about it. I wrote it down in a blog post here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.waleson.com\/2024\/09\/the-future-of-programming-systems-four.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere are four thoughts that I think will shape the future:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Software development systems have a lot of vestigial parts (left-overs from the way it evolved)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Understanding is crucial to development, and with the right mediums we can understand the subject much faster"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most software platforms developed bottom-up, from the silicon, instead of focusing on the needs of the people"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Software is truly different from other technologies in the freedom it gives us, so we can and should invent new abstractions that make things simpler than they are now"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis isn't in the post, but I think that in the future we'll see:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Great integration between design tools, version control, IDEs, databases, monitoring & logging systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "High-level concepts as first class systems in the programming systems. Simple examples are an email or phone number type as a database primitive, instead of strings."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Better reasoning \/ business logic rules so that IDEs can give feedback on \"you are not allowed to store PII in this database\"."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis way all stakeholders can collaborate and the system can check correctness much better, and we require less discipline\/in-depth knowledge from the team members.\n\nI suspect most of these ideas have come by in this community already, but still curious what you think!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1727106583.853929",
        "client_msg_id": "2a2bac27-af33-4800-9dcd-873e8684a4c5",
        "text": "&gt; <https:\/\/www.youtube.com\/watch?v=kZRE7HIO3vk|The Thirty Million Line Problem>  \nI watched this several years ago and deeply disagree with the conclusion. IIRC, Moratori blames USB Plug'N'Play on the exponential rise in complexity in software development. He bases his conclusion on a graph that shows the correlation between complexity and the invention of USB Plug'N'Play. Basic science says that correlation does not imply causation. The fact that the hockey stick curve of complexity jumps upwards at the same time as USB Plug'N'Play was invented does not necessarily mean that USB Plug'N'Play *caused* the rise in complexity. In fact, a different explanation for this particular correlation might be as a manifestation of incidental complexity caused by something much deeper and invented much earlier (hint: over-use of the function-based paradigm).\n\n[Note that this, also, ties in with bicycles-for-the-mind thread. Programmers have forgotten how the hardware works and have veered off into believing that there is only one way to program hardware - i.e. with lines of code written in programming languages buttressed by operating systems.]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=kZRE7HIO3vk",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/kZRE7HIO3vk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/kZRE7HIO3vk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"The Thirty Million Line Problem\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=kZRE7HIO3vk",
                "fallback": "YouTube Video: The Thirty Million Line Problem",
                "title": "The Thirty Million Line Problem",
                "title_link": "https:\/\/www.youtube.com\/watch?v=kZRE7HIO3vk",
                "author_name": "Molly Rocket",
                "author_link": "https:\/\/www.youtube.com\/@MollyRocket",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ge+t\/",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=kZRE7HIO3vk",
                                "text": "The Thirty Million Line Problem"
                            },
                            {
                                "type": "text",
                                "text": "  "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI watched this several years ago and deeply disagree with the conclusion. IIRC, Moratori blames USB Plug'N'Play on the exponential rise in complexity in software development. He bases his conclusion on a graph that shows the correlation between complexity and the invention of USB Plug'N'Play. Basic science says that correlation does not imply causation. The fact that the hockey stick curve of complexity jumps upwards at the same time as USB Plug'N'Play was invented does not necessarily mean that USB Plug'N'Play "
                            },
                            {
                                "type": "text",
                                "text": "caused",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the rise in complexity. In fact, a different explanation for this particular correlation might be as a manifestation of incidental complexity caused by something much deeper and invented much earlier (hint: over-use of the function-based paradigm).\n\n[Note that this, also, ties in with bicycles-for-the-mind thread. Programmers have forgotten how the hardware works and have veered off into believing that there is only one way to program hardware - i.e. with lines of code written in programming languages buttressed by operating systems.]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1727106723.175299",
        "client_msg_id": "7fc9fb0e-17ca-43a2-ad5d-63cc595fc9ff",
        "text": "Or it could be content-addressable code, such as in Unison? Where you can hash the paths inside each function, in order to find overlaps?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727049812.369579",
        "parent_user_id": "U06MCTWJKSR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RIJPU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or it could be content-addressable code, such as in Unison? Where you can hash the paths inside each function, in order to find overlaps?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1727106803.795339",
        "client_msg_id": "10244110-b925-411d-a878-5ca557778699",
        "text": "I am used to tab for completion, and to not preselect, but I haven't used a standard IDE for a long time -- one reason is because they annoy me a lot with their completion flows :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727073095.141339",
        "parent_user_id": "U03U0SCU5LH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "srbVb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am used to tab for completion, and to not preselect, but I haven't used a standard IDE for a long time -- one reason is because they annoy me a lot with their completion flows "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1727110278.493799",
        "client_msg_id": "487a1ead-c7e1-4cae-a791-50eff6f481db",
        "text": "I've gone back and forth on whether the incidental vs essential complexity dichotomy is a useful perspective. I now think it is useful but has to be situated in a specific context. Say you wanted to build a game of pong that runs over a network. You decide to build it multiple times using various stacks and various programming languages. if you build it on posix\/c, you will need to first build a network messaging protocol with message formats that you parse. If you pick a higher level stack like python, you may be able to easily reuse http with json or similar. So some pieces of the puzzle only need to be built in some stacks, but not all. To think about essential complexity, consider the pieces _you must build in all stacks._ On first thought, this includes the actual logic of the gameplay - for instance, you'd need a representation of a ball and bats and players and scores. This looks like essential complexity. However this is not clear cut either. What about drawing rectangles or circles? If you have a graphics library that can do these then you dont need to build it, otherwise you do. The boundary is quite fuzzy here.\n\nIt's not just about libraries though. Consider the knowledge we have accumulated and internalized by being part of society. Are math skill necessary? For example, knowledge of angles and such (even if you have a library to do arithmetic and trigonometry, you will still need a mental model to apply that library). What if the specific problem domain you are working on (say it's not pong) would benefit from a new kind of math\/model? You could build it and even implement a library but to use it others will have to first learn that math\/model. Does learning this new model now count as incidental complexity because it was not already familiar? What even can we consider the familiar, ubiquitous baseline?\n\nI say situated in a context because the narrower the scope of the kinds of programming you are doing, the easier it becomes to distinguish between essential and incidental and the easier it becomes to establish the 'baseline' of what we expect the programmers know and understand.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6IAcM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've gone back and forth on whether the incidental vs essential complexity dichotomy is a useful perspective. I now think it is useful but has to be situated in a specific context. Say you wanted to build a game of pong that runs over a network. You decide to build it multiple times using various stacks and various programming languages. if you build it on posix\/c, you will need to first build a network messaging protocol with message formats that you parse. If you pick a higher level stack like python, you may be able to easily reuse http with json or similar. So some pieces of the puzzle only need to be built in some stacks, but not all. To think about essential complexity, consider the pieces "
                            },
                            {
                                "type": "text",
                                "text": "you must build in all stacks.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " On first thought, this includes the actual logic of the gameplay - for instance, you'd need a representation of a ball and bats and players and scores. This looks like essential complexity. However this is not clear cut either. What about drawing rectangles or circles? If you have a graphics library that can do these then you dont need to build it, otherwise you do. The boundary is quite fuzzy here.\n\nIt's not just about libraries though. Consider the knowledge we have accumulated and internalized by being part of society. Are math skill necessary? For example, knowledge of angles and such (even if you have a library to do arithmetic and trigonometry, you will still need a mental model to apply that library). What if the specific problem domain you are working on (say it's not pong) would benefit from a new kind of math\/model? You could build it and even implement a library but to use it others will have to first learn that math\/model. Does learning this new model now count as incidental complexity because it was not already familiar? What even can we consider the familiar, ubiquitous baseline?\n\nI say situated in a context because the narrower the scope of the kinds of programming you are doing, the easier it becomes to distinguish between essential and incidental and the easier it becomes to establish the 'baseline' of what we expect the programmers know and understand."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1727140652.150989",
        "client_msg_id": "8bda9aca-889d-4354-8043-8bfdb5faf120",
        "text": "Functional Programming Is Letting Us Down\n\n<https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/functional-programming-is-letting?r=1egdky&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727140652.150989",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1727337584.335639",
        "reply_users": [
            "U01AD80KMLK",
            "UJBAJNFLK",
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "U01AD80KMLK",
                "ts": "1727157711.589569"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727158642.101889"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1727171399.620839"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1727174715.656089"
            },
            {
                "user": "U01AD80KMLK",
                "ts": "1727175780.682899"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1727181108.571749"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727242639.436099"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1727316771.426419"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727337584.335639"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "flMVJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Functional Programming Is Letting Us Down\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/functional-programming-is-letting?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1727147725.976049",
        "client_msg_id": "df3f08b1-eff2-4c1f-b008-e4bc3cc60aae",
        "text": "See, that's the thing. I feel like pre select is great 90% of the time, but if it isn't, it's *really* irritating.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf6784b7d6d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df6784b7d6d97fb67dec89320cc88a84.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Dany",
            "real_name": "Dany",
            "display_name": "Dany",
            "team": "T5TCAFTA9",
            "name": "bitteldany",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727073095.141339",
        "parent_user_id": "U03U0SCU5LH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r5hSO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See, that's the thing. I feel like pre select is great 90% of the time, but if it isn't, it's "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " irritating."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U01AD80KMLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1727153473.610919",
        "client_msg_id": "178350ae-53bd-40f9-958b-833a4e31d443",
        "text": "<@U07BD7U4S4R>\n\n&gt; If everything is complicated, why not deal with essential complexity instead of incidental one?\nYou definitely should if you can. Particularly if it seems obvious enough to have you asking \"why not?\"\n\nThe problem in my experience is that we don't yet know how to reliably separate those two categories. And that brings the ontology into question.\n\n&gt; For some reason I get \"then it does not matter\" from \"everything is complicated\" comments.\nYeah, that's not my intent. I was responding to, \"why are there so many lines of code?\" Maybe it's because we haven't yet done the work to reduce them. And maybe we haven't because it's more effort to do so. It's hard not easy.\n\nBasically I'm saying: reduce your ambitions.\n\n\"The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility..\" -- Dijkstra",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tf1LH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U07BD7U4S4R"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If everything is complicated, why not deal with essential complexity instead of incidental one?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYou definitely should if you can. Particularly if it seems obvious enough to have you asking \"why not?\"\n\nThe problem in my experience is that we don't yet know how to reliably separate those two categories. And that brings the ontology into question.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For some reason I get \"then it does not matter\" from \"everything is complicated\" comments."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah, that's not my intent. I was responding to, \"why are there so many lines of code?\" Maybe it's because we haven't yet done the work to reduce them. And maybe we haven't because it's more effort to do so. It's hard not easy.\n\nBasically I'm saying: reduce your ambitions.\n\n\"The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility..\" -- Dijkstra"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01AD80KMLK",
        "type": "message",
        "ts": "1727157711.589569",
        "client_msg_id": "3e590f6f-ade2-4d74-b432-c42aae21fe5d",
        "text": "Is this a PDF published through a substack?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a07cdcb6d037",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-09\/1376906509376_a07cdcb6d037bf7b6a5e_72.jpg",
            "first_name": "",
            "real_name": "Denny Vrandečić",
            "display_name": "Denny Vrandečić",
            "team": "T5TCAFTA9",
            "name": "dvrandecic",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727140652.150989",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QrPJS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this a PDF published through a substack?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1727158379.866259",
        "client_msg_id": "67aabc7e-67af-4567-ae48-5a8c3dd6bbff",
        "text": "I hope your predictions will become true!\n\nOne obstacle I see is the widespread belief in \"software\" and \"programming\" as universal abstractions. Human-friendly environments will have to be domain-specific. As a researcher working on protein dynamics, I have no use for your \"phone number\" entity, but I have lots of others that even my colleagues in neighboring domains would have no use for.\n\nDomain-specific tools would necessarily need to a fragmentation of the software professions, and I suspect that is something many people don't want to happen.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727077286.414899",
        "parent_user_id": "U04BQN4K3AP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bwph5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope your predictions will become true!\n\nOne obstacle I see is the widespread belief in \"software\" and \"programming\" as universal abstractions. Human-friendly environments will have to be domain-specific. As a researcher working on protein dynamics, I have no use for your \"phone number\" entity, but I have lots of others that even my colleagues in neighboring domains would have no use for.\n\nDomain-specific tools would necessarily need to a fragmentation of the software professions, and I suspect that is something many people don't want to happen."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1727158642.101889",
        "client_msg_id": "68d59f98-41d5-4692-938b-090da53d629d",
        "text": "&gt; The fact that we have pushed the function-based paradigm this far is not a testame_g_nt to functional thinking, but, is a testament to the tenacity of the human spirit. Humans will find workarounds for their inadequate tools, even if it takes them 50+ years.\nTrue but only part of the story. There has to be inertia in technology if you want it to be useful. For stuff that lots of people depend on, you can't just pull the plug and start from scratch every couple of years.\n\nFor that reason, the only possibility I see for your ideas to become reality is as a _generalization_ of today's function-based systems. Future systems must allow today's software to remain usable, and then open up new ways that can be explored incrementally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727140652.150989",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Yu66",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The fact that we have pushed the function-based paradigm this far is not a testame"
                            },
                            {
                                "type": "text",
                                "text": "g",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "nt to functional thinking, but, is a testament to the tenacity of the human spirit. Humans will find workarounds for their inadequate tools, even if it takes them 50+ years."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nTrue but only part of the story. There has to be inertia in technology if you want it to be useful. For stuff that lots of people depend on, you can't just pull the plug and start from scratch every couple of years.\n\nFor that reason, the only possibility I see for your ideas to become reality is as a "
                            },
                            {
                                "type": "text",
                                "text": "generalization",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of today's function-based systems. Future systems must allow today's software to remain usable, and then open up new ways that can be explored incrementally."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]