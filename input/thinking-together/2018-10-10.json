[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539155779.000100",
        "client_msg_id": "772bfc63-30b4-46e5-8f92-d6c12907dfc8",
        "text": "<@U8A5MS6R1> To abstract is to recognize that some detail is irrelevant to the situation at hand.  For instance, when you call a parametrically polymorphic function like `flip :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c`, you can ignore the concrete types of the arguments.  An abstraction is leaky when you can't end up ignoring the detail that you hoped to.  An abstraction is improper when it turns out there is no common pattern, when the \"compression\" is in some sense \"bigger\" than the uncompressed duplicate code.  The sense of \"bigger\" can be tricky.  In some cases, code that feels more abstract, better factored uses significantly more lines, syntax tree nodes.  It may be that they are just more regular.  It's like a how a complicated motion on a plane may just be the shadow of a uniform motion in space.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XHhXe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " To abstract is to recognize that some detail is irrelevant to the situation at hand.  For instance, when you call a parametrically polymorphic function like "
                            },
                            {
                                "type": "text",
                                "text": "flip :: (a -> b -> c) -> b -> a -> c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you can ignore the concrete types of the arguments.  An abstraction is leaky when you can't end up ignoring the detail that you hoped to.  An abstraction is improper when it turns out there is no common pattern, when the \"compression\" is in some sense \"bigger\" than the uncompressed duplicate code.  The sense of \"bigger\" can be tricky.  In some cases, code that feels more abstract, better factored uses significantly more lines, syntax tree nodes.  It may be that they are just more regular.  It's like a how a complicated motion on a plane may just be the shadow of a uniform motion in space."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U5TCAFTD3",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539189940.000100",
        "client_msg_id": "07ceba83-a634-4070-8950-345b460d9792",
        "text": "<@U5TCAFTD3> - oh ya Victor's ladder of abstraction is a great read - I just read it again :smile:. (I think it is compatible with what I am saying - which is simply that abstractions are compressed representation of repeated patterns.. the things\/concepts being abstracted over). But you're right, the 'purpose' may not be just to have a compressed representation but rather have a better understanding via different views. This fits in with the concept of 'schemas' in psychology, I suppose?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=UoPS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " - oh ya Victor's ladder of abstraction is a great read - I just read it again "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": ". (I think it is compatible with what I am saying - which is simply that abstractions are compressed representation of repeated patterns.. the things\/concepts being abstracted over). But you're right, the 'purpose' may not be just to have a compressed representation but rather have a better understanding via different views. This fits in with the concept of 'schemas' in psychology, I suppose?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539190271.000100",
        "client_msg_id": "ad046286-8299-4f66-a7df-7dd63e4ddcab",
        "text": "<@UCGAK10LS> - Consider also that 'connected copies' may represent things that are not functions.. data that shares a schema, perhaps? I agree that finding a good UX is key to keeping things comprehensible. Something that lets you glide between the abstractions and their refinements with ease, maybe.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l3Ods",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " - Consider also that 'connected copies' may represent things that are not functions.. data that shares a schema, perhaps? I agree that finding a good UX is key to keeping things comprehensible. Something that lets you glide between the abstractions and their refinements with ease, maybe."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539191241.000100",
        "client_msg_id": "1d9dd2c2-462d-4e83-ac16-fa9fe127b0e8",
        "text": "One perspective I'm taking is why have one 'primary' view of the program - the one consisting of functions. Perhaps the views that provide the refinements of the abstractions are just as important? E.g. views that show functions inlined\/unrolled and macros expanded, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xc8I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One perspective I'm taking is why have one 'primary' view of the program - the one consisting of functions. Perhaps the views that provide the refinements of the abstractions are just as important? E.g. views that show functions inlined\/unrolled and macros expanded, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539191322.000100",
        "client_msg_id": "76098d4a-b7e5-4661-808e-120fb3a34820",
        "text": "<@UA14TGLTC> - great points - I like the plane projection analogy.\n\n&gt; An abstraction is leaky when you can't end up ignoring the detail that you hoped to.\n\nDo you mean when abstractions force you to specify a detail that you think unimportant or force you to elide one that turns out to be relevant later? Perhaps both? E.g. GC languages don't let you specify deallocation but this may turn out to be something you care about in certain cases. We work around these things to indirectly effect what we can't directly specify. Same thing with things like lazy evaluation, or mapping of high level types to bytes.\n\nI've been thinking about abstraction as 'lossy compression' (except in maths, which has lossless abstractions, but the uncompressed worlds in maths are imaginary).\n\nBTW a great paper from PPIG is \"The Abstract is an Enemy\" <http:\/\/www.ppig.org\/library\/paper\/abstract-enemy-alternative-perspectives-computational-thinking>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o1S9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " - great points - I like the plane projection analogy.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An abstraction is leaky when you can't end up ignoring the detail that you hoped to."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nDo you mean when abstractions force you to specify a detail that you think unimportant or force you to elide one that turns out to be relevant later? Perhaps both? E.g. GC languages don't let you specify deallocation but this may turn out to be something you care about in certain cases. We work around these things to indirectly effect what we can't directly specify. Same thing with things like lazy evaluation, or mapping of high level types to bytes.\n\nI've been thinking about abstraction as 'lossy compression' (except in maths, which has lossless abstractions, but the uncompressed worlds in maths are imaginary).\n\nBTW a great paper from PPIG is \"The Abstract is an Enemy\" "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.ppig.org\/library\/paper\/abstract-enemy-alternative-perspectives-computational-thinking"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539201698.000100",
        "client_msg_id": "bd284c81-9759-4022-b54d-f405b886ea05",
        "text": "Stumbled upon this: <http:\/\/symbolflux.com\/writing>. Much interesting stuff related to some discussions here (programs as not text, as graphs etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539201698.000100",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1547774570.337200",
        "reply_users": [
            "UD43R8ZFV",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UD43R8ZFV",
                "ts": "1547524456.322500"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1547526140.322800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1547759890.336300"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1547760489.336800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1547769033.337000"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1547774570.337200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kJP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Stumbled upon this: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/symbolflux.com\/writing"
                            },
                            {
                                "type": "text",
                                "text": ". Much interesting stuff related to some discussions here (programs as not text, as graphs etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UCKRZS3DZ",
                    "U7C7B75R6",
                    "U5TCAFTD3",
                    "UCQ4BBFQ9",
                    "UD43R8ZFV"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1539202611.000100",
        "client_msg_id": "55e6ea7e-55d8-4b19-95bc-94e1cfa3e1dd",
        "text": "First Strange Loop conference videos are just arrived. <https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw\/videos>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "Strange Loop",
                "title_link": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw\/videos",
                "text": "Videos from the Strange Loop conference in St. Louis, MO.",
                "fallback": "YouTube: Strange Loop",
                "thumb_url": "https:\/\/yt3.ggpht.com\/a-\/AN66SAwsNNjzEtkXuuJwRsV89IEPsf9V102byi6wZw=s900-mo-c-c0xffffffff-rj-k-no",
                "from_url": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw\/videos",
                "thumb_width": 900,
                "thumb_height": 900,
                "service_icon": "https:\/\/s.ytimg.com\/yts\/img\/favicon-vfl8qSV2F.ico",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw\/videos"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yl8or",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First Strange Loop conference videos are just arrived. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw\/videos"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "U85HCL7JP",
                    "UCXR52MU2",
                    "UA14TGLTC",
                    "U5TCAFTD3",
                    "UBSMEUXAA"
                ],
                "count": 6
            },
            {
                "name": "beers",
                "users": [
                    "UC2A2ARPT",
                    "UCKRZS3DZ",
                    "U5TCAFTD3"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539231478.000100",
        "client_msg_id": "F5B01C4D-490A-4AE0-8A62-43E46330996A",
        "text": "Usually an abstraction leaks when it does something weird.  Here's an example from just now.  I'm writing on an iPhone.  I select some text.  It has two blue dots marking the beginning and ending of the selection.  I scroll up to check your message.  As I do this, the dots stay suck in place on the screen disconnected from their associated selection.\n\nThe abstraction is that things drawn on the screen have spacial connection.  The leak is that they don't actually, that the parts line up accidentally from specific rendering pathways, that other pathways won't automatically work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t25Gd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Usually an abstraction leaks when it does something weird.  Here's an example from just now.  I'm writing on an iPhone.  I select some text.  It has two blue dots marking the beginning and ending of the selection.  I scroll up to check your message.  As I do this, the dots stay suck in place on the screen disconnected from their associated selection.\n\nThe abstraction is that things drawn on the screen have spacial connection.  The leak is that they don't actually, that the parts line up accidentally from specific rendering pathways, that other pathways won't automatically work."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]