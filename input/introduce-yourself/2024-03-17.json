[
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710672289.336689",
        "client_msg_id": "7ce1f649-4a33-4807-af41-73fb3e374092",
        "text": "Hello, World\nI'm an independent researcher based in Sweden\/Czechia\/Germany. I've been spending the last six years researching how to make better text editors (both plain text and rich text), GUIs, GUI frameworks, portable assembly, web browsers and visual programming. I don't publish much, because this is a rabbit hole where making a _better something_ depends on making a _better something else_, and most things are broken most of the time because of working an a dependency, which then depends on another dependency, but sometimes I go out and speak at events.\n\nThe latest addition to my suite of technologies is an unconventional programming language that unifies all my previous technologies. It's a general purpose language and multimedia authoring language unified, that can be used to describe apps, network services, documents, slideshows, websites, pictures and videos in an amount of code that is close to the theoretical minimum, and from that generates code that has an efficiency close to the theoretical maximum. It uses pointers for efficiency and propositional logic for correctness, including complete memory safety. This language proves that in traditional computing there is no tradeoff between efficiency, robustness and ease of use. The same programming language is going to be used for writing high-performance algorithms as for teaching children programming.\n\nDoing research in the future of coding gets lonely. Even among people who work with programming, there are few who understand what I'm doing. I met someone at Jetbrains who showed a good understanding of what I'm doing. He took a look at my visual code editor and recommended me Future of Coding. I've been delaying posting anything here for a year, as I've been feeling overwhelmed with things to do even before starting to involve other people, but now I feel the time is right. I'm writing here in hope to connect with interesting people. Feel free to ask me anything about my research or even get to know me on a personal level. I have have a lot to tell.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1711369331.222379",
        "reply_users": [
            "U0217A6C4KW",
            "U04SAJZ155H",
            "UN57U8V53",
            "U06QXRQ3ZJ7"
        ],
        "replies": [
            {
                "user": "U0217A6C4KW",
                "ts": "1710677359.186089"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710677904.420749"
            },
            {
                "user": "UN57U8V53",
                "ts": "1710720880.977499"
            },
            {
                "user": "UN57U8V53",
                "ts": "1710721093.206139"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710742304.040189"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1710742513.118989"
            },
            {
                "user": "U06QXRQ3ZJ7",
                "ts": "1711342549.981149"
            },
            {
                "user": "U04SAJZ155H",
                "ts": "1711369331.222379"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p6Hjj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello, World\nI'm an independent researcher based in Sweden\/Czechia\/Germany. I've been spending the last six years researching how to make better text editors (both plain text and rich text), GUIs, GUI frameworks, portable assembly, web browsers and visual programming. I don't publish much, because this is a rabbit hole where making a "
                            },
                            {
                                "type": "text",
                                "text": "better something",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " depends on making a "
                            },
                            {
                                "type": "text",
                                "text": "better something else",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and most things are broken most of the time because of working an a dependency, which then depends on another dependency, but sometimes I go out and speak at events.\n\nThe latest addition to my suite of technologies is an unconventional programming language that unifies all my previous technologies. It's a general purpose language and multimedia authoring language unified, that can be used to describe apps, network services, documents, slideshows, websites, pictures and videos in an amount of code that is close to the theoretical minimum, and from that generates code that has an efficiency close to the theoretical maximum. It uses pointers for efficiency and propositional logic for correctness, including complete memory safety. This language proves that in traditional computing there is no tradeoff between efficiency, robustness and ease of use. The same programming language is going to be used for writing high-performance algorithms as for teaching children programming.\n\nDoing research in the future of coding gets lonely. Even among people who work with programming, there are few who understand what I'm doing. I met someone at Jetbrains who showed a good understanding of what I'm doing. He took a look at my visual code editor and recommended me Future of Coding. I've been delaying posting anything here for a year, as I've been feeling overwhelmed with things to do even before starting to involve other people, but now I feel the time is right. I'm writing here in hope to connect with interesting people. Feel free to ask me anything about my research or even get to know me on a personal level. I have have a lot to tell."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "U0123H7JRDM",
                    "UNCP67JSK",
                    "UC2A2ARPT",
                    "U06BUK2M2RH",
                    "UFPRPSA4S",
                    "U85HCL7JP",
                    "UMV4B97GT",
                    "U06131CATV3",
                    "U0296ACR13M",
                    "U013ZLJARC7",
                    "U06NSFX5119",
                    "UA14TGLTC",
                    "U04PDG834SF",
                    "UJBAJNFLK",
                    "U06AEM4TRT2"
                ],
                "count": 15
            },
            {
                "name": "+1",
                "users": [
                    "U0217A6C4KW"
                ],
                "count": 1
            },
            {
                "name": "fire",
                "users": [
                    "U023V63MF6V"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "U05EREC3DCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0217A6C4KW",
        "type": "message",
        "ts": "1710677359.186089",
        "client_msg_id": "ad7ed383-34b3-44dd-a0d1-b87b79540dba",
        "text": "Very interesting -- which language is that? and is there a short video where you show some of the things you've been working on?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cdfa9a6e73",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cdfa9a6e7316183ea783fb260f6a071.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Francisco Garau",
            "display_name": "Francisco Garau",
            "team": "T5TCAFTA9",
            "name": "fgarau",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1NczF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting -- which language is that? and is there a short video where you show some of the things you've been working on?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710677904.420749",
        "client_msg_id": "64df00ce-b1bf-4322-bf17-dc91f24b67e9",
        "text": "No short videos yet, although there are some long talks showing last year's progress that I would be embarrased to show as a first impression today. Maybe I can start making short videos for <#C0120A3L30R|two-minute-week>.\n\nThe programming language is my newest thing, so it's not described anywhere in public. I call it _Pointerscript_ for now. _Pointer_ as in machine-oriented and efficient. _Script_ as in domain-oriented and easy to use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XygYu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No short videos yet, although there are some long talks showing last year's progress that I would be embarrased to show as a first impression today. Maybe I can start making short videos for "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe programming language is my newest thing, so it's not described anywhere in public. I call it "
                            },
                            {
                                "type": "text",
                                "text": "Pointerscript",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for now. "
                            },
                            {
                                "type": "text",
                                "text": "Pointer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as in machine-oriented and efficient. "
                            },
                            {
                                "type": "text",
                                "text": "Script",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as in domain-oriented and easy to use."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U0217A6C4KW",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1710720880.977499",
        "client_msg_id": "264e13b1-1efb-46ff-a122-771ac36ed46b",
        "text": "that's super interesting to me as I'm taking the opposite approach or trying to have the programmer\/user describe as little as possible\/needed then generating code\/questions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rHv8Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that's super interesting to me as I'm taking the opposite approach or trying to have the programmer\/user describe as little as possible\/needed then generating code\/questions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1710721093.206139",
        "client_msg_id": "100776f9-9d57-463b-84cd-37db9503ad93",
        "text": "what's your motivating languages? I've been happily motivated by futhark, scribble, and darklang",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yy\/iX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what's your motivating languages? I've been happily motivated by futhark, scribble, and darklang"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710742304.040189",
        "client_msg_id": "8e183339-32c7-4616-9dcf-f86d5b3100a7",
        "text": "<@UN57U8V53> My main motivation is *Rust*. Before learning Rust, I've grown out of a number of languages as I've seen their flaws that can't be unseen. When learning Rust, I was amazed at how well-designed the language is, and I couldn't even imagine a better language, but I knew the time would come when someone could. Now even my Rust code is death by a thousand paper cuts. This happens in two ways.\n\nRust likes to sprinkle runtime checks and panics everywhere. It gives me the three options to accept that the program can panic at runtime, check my work in Compiler Explorer and try workarounds in the hope that some of the checks will go away, or write unsafe code that is completely unchecked, neither of which is satisfying. Just as Rust has done with other things, I want one option to beat them all. Most things I do are very easy to prove correct, if only the language allowed me to write proofs, so I consider that a high-priority feature.\n\nMy Rust code tends to be overwhelmingly verbose in a way that makes me want to automatically generate it. For this, Rust has four competing options that are disappointing in four differente ways. There's generic code, declarative macros, procedural macros and build scripts. I often make new code generators for various purposes and choose a different approach every time, and my generator code often ends up being longer than the code it generates. Here too, I want one option to beat them all. I think *Zig* does it the right way.\n\nMy motivating languages are:\n• *Rust* — For not compromising efficiency, safety and productivity\n• *Lean* — For propositional proofs and first class types\n• *Smalltalk* — For the visual code browser\n• *Typst* — For authoring documents with a real programming language and instant previews\n• *Austral* — For linear types and capabilities\nI've also had a brief look at *Zig* and *Scribble*, but only after already researching the corresponding features that I originally got from Lean and Typst. Capabilities I got from elsewhere before I saw them in Austral.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p+Y9Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": " My main motivation is "
                            },
                            {
                                "type": "text",
                                "text": "Rust",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Before learning Rust, I've grown out of a number of languages as I've seen their flaws that can't be unseen. When learning Rust, I was amazed at how well-designed the language is, and I couldn't even imagine a better language, but I knew the time would come when someone could. Now even my Rust code is death by a thousand paper cuts. This happens in two ways.\n\nRust likes to sprinkle runtime checks and panics everywhere. It gives me the three options to accept that the program can panic at runtime, check my work in Compiler Explorer and try workarounds in the hope that some of the checks will go away, or write unsafe code that is completely unchecked, neither of which is satisfying. Just as Rust has done with other things, I want one option to beat them all. Most things I do are very easy to prove correct, if only the language allowed me to write proofs, so I consider that a high-priority feature.\n\nMy Rust code tends to be overwhelmingly verbose in a way that makes me want to automatically generate it. For this, Rust has four competing options that are disappointing in four differente ways. There's generic code, declarative macros, procedural macros and build scripts. I often make new code generators for various purposes and choose a different approach every time, and my generator code often ends up being longer than the code it generates. Here too, I want one option to beat them all. I think "
                            },
                            {
                                "type": "text",
                                "text": "Zig",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does it the right way.\n\nMy motivating languages are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Rust",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " — For not compromising efficiency, safety and productivity"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Lean",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " — For propositional proofs and first class types"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Smalltalk",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " — For the visual code browser"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Typst",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " — For authoring documents with a real programming language and instant previews"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Austral",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " — For linear types and capabilities"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI've also had a brief look at "
                            },
                            {
                                "type": "text",
                                "text": "Zig",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "Scribble",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but only after already researching the corresponding features that I originally got from Lean and Typst. Capabilities I got from elsewhere before I saw them in Austral."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710742513.118989",
        "client_msg_id": "c0ac027e-a267-4506-a37d-891b03e3d6e4",
        "text": "<@UN57U8V53> How do you mean the opposite approach? I try to have the programmer describe close to the theoretical minimum. It's basically Rust, but the programmer describes as little as in Typst.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710672289.336689",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZYVlQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": " How do you mean the opposite approach? I try to have the programmer describe close to the theoretical minimum. It's basically Rust, but the programmer describes as little as in Typst."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]