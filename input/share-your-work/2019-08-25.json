[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566751445.185000",
        "text": "\/poll \"What's your favorite color?\" \"Blue\" \"Red\" \"Green\" \"Yellow\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UZqv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/poll \"What's your favorite color?\" \"Blue\" \"Red\" \"Green\" \"Yellow\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566751550.185500",
        "text": "\/poll \"Which way should the fundamental record type for a rectangle be defined? Currently  it is a_rect with fields left, top, width, height, but it could be shortened to a_box with fields x,y, width, height. This would also affect draw_rect and solve_rect which would then become draw_box and solve_box. It saves about 0.2% typing.\"  \"a_rect\" \"a_box\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pt=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/poll \"Which way should the fundamental record type for a rectangle be defined? Currently  it is a_rect with fields left, top, width, height, but it could be shortened to a_box with fields x,y, width, height. This would also affect draw_rect and solve_rect which would then become draw_box and solve_box. It saves about 0.2% typing.\"  \"a_rect\" \"a_box\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "",
        "attachments": [
            {
                "fallback": "Open Slack to cast your vote in this Simple Poll",
                "title": "Which way should the fundamental record type for a rectangle be defined? Currently  it is a_rect with fields left, top, width, height, but it could be shortened to a_box with fields x,y, width, height. This would also affect draw_rect and solve_rect which would then become draw_box and solve_box. It saves about 0.2% typing.",
                "id": 1,
                "color": "6ecadc",
                "fields": [
                    {
                        "title": "",
                        "value": ":one: a_rect    `3`\n<@UHWC9PXBL>, <@UAVCC2X70>, <@UD43R8ZFV>\n\n",
                        "short": false
                    },
                    {
                        "title": "",
                        "value": ":two: a_box\n\n\n",
                        "short": false
                    }
                ],
                "mrkdwn_in": [
                    "fields"
                ]
            },
            {
                "callback_id": "0d700ff6-99d5-44fd-94f3-718015f7f1b7",
                "fallback": "Open Slack to cast your vote in this Simple Poll",
                "id": 2,
                "color": "6ecadc",
                "actions": [
                    {
                        "id": "1",
                        "name": "vote",
                        "text": ":one:",
                        "type": "button",
                        "value": "1",
                        "style": ""
                    },
                    {
                        "id": "2",
                        "name": "vote",
                        "text": ":two:",
                        "type": "button",
                        "value": "2",
                        "style": ""
                    },
                    {
                        "id": "3",
                        "name": "delete-v2",
                        "text": "Delete Poll",
                        "type": "button",
                        "value": "",
                        "style": "danger",
                        "confirm": {
                            "text": "Are you sure you want to delete the Poll?",
                            "title": "Delete Poll?",
                            "ok_text": "Yes",
                            "dismiss_text": "No"
                        }
                    }
                ]
            },
            {
                "callback_id": "0d700ff6-99d5-44fd-94f3-718015f7f1b7",
                "fallback": "Open Slack to cast your vote in this Simple Poll",
                "footer": "Simple Poll        <https:\/\/simplepoll.rocks\/dashboard\/futureofcoding\/settings\/|Edit Settings>",
                "id": 3,
                "footer_icon": "https:\/\/simplepoll.rocks\/static\/main\/favicon.png",
                "color": "6ecadc"
            }
        ],
        "type": "message",
        "ts": "1566751550.185600",
        "bot_id": "B7205UT0R"
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566751740.188700",
        "client_msg_id": "b12dd996-a691-4192-ba39-4f207bddb7d9",
        "text": "okay at the 11th hour, asking for community opinion on the name of the fundamental structure that holds a rectangle. using rectangles is extremely common in graphics programming, and the original Apple Quickdraw rectangle was .left .top, .width, .height. I could even go as far as making it .x .y, .h .v, but .width and .height are more readable. The point is already with a record name a_xy, with fields .x .y\n\nSeems slightly more consistent to make the rectangle .x .y .width .height",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eI4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "okay at the 11th hour, asking for community opinion on the name of the fundamental structure that holds a rectangle. using rectangles is extremely common in graphics programming, and the original Apple Quickdraw rectangle was .left .top, .width, .height. I could even go as far as making it .x .y, .h .v, but .width and .height are more readable. The point is already with a record name a_xy, with fields .x .y\n\nSeems slightly more consistent to make the rectangle .x .y .width .height"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1566758616.191100",
        "client_msg_id": "04124805-57b4-4947-8b45-d85e08c7dc0e",
        "text": "Both options are pretty bad :slightly_smiling_face: From a graphics programming pov, you want `struct Rect { vec2 pos; vec2 size; }` (or equivalent in your language), that way you can keep most computations to work on whole vectors at once. Repeating code for x &amp; y (and w\/h) separately leads to very clumsy code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDe7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both options are pretty bad "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " From a graphics programming pov, you want "
                            },
                            {
                                "type": "text",
                                "text": "struct Rect { vec2 pos; vec2 size; }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (or equivalent in your language), that way you can keep most computations to work on whole vectors at once. Repeating code for x & y (and w\/h) separately leads to very clumsy code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UHWC9PXBL",
                    "ULADE0N0J",
                    "U79HM6726",
                    "UD43R8ZFV"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566763788.192800",
        "client_msg_id": "3240b05d-6ca3-4159-9747-d386b7cc91d3",
        "text": "It's also worth consider how often you need to work with object centers rather than the corner of their AABB. I find I mostly work with centers, so I actually prefer top\/left because that's unambiguous. Saying x\/y could mean the corner point, or the center point, or an origin point \/ center of rotation.\n\nAlso agree with Wouter — Rects are best represented as pairs of vectors.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=0e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's also worth consider how often you need to work with object centers rather than the corner of their AABB. I find I mostly work with centers, so I actually prefer top\/left because that's unambiguous. Saying x\/y could mean the corner point, or the center point, or an origin point \/ center of rotation.\n\nAlso agree with Wouter — Rects are best represented as pairs of vectors."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1566778546.197000",
        "client_msg_id": "f2c70c17-02ec-4031-9cc3-c2733f0707d4",
        "text": "if a rectangle was a record holding two vectors, then referring to the left side of a rectangle would be a very clumsy expression box.pos.x  vs. the simpler box.left.  I agree that once you use x and y you might be thinking of the center point, however in all systems i am aware of that use upper left corner of the screen as the origin, the first coordinate of a rectangle is the upper left corner. That dates back to Apple's Quickdraw, which used .left, .top, .width, and .height, although one could in Object Pascal and Modula-2 via a fixed length structure like this interchangably as a point of xy and a record of h and v, or whatever you notation pleased you. Untagged record variants was in those languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566778546.197000",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1567626191.041200",
        "reply_users": [
            "U6FKVSVCK"
        ],
        "replies": [
            {
                "user": "U6FKVSVCK",
                "ts": "1567626062.041000"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1567626191.041200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pIr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if a rectangle was a record holding two vectors, then referring to the left side of a rectangle would be a very clumsy expression box.pos.x  vs. the simpler box.left.  I agree that once you use x and y you might be thinking of the center point, however in all systems i am aware of that use upper left corner of the screen as the origin, the first coordinate of a rectangle is the upper left corner. That dates back to Apple's Quickdraw, which used .left, .top, .width, and .height, although one could in Object Pascal and Modula-2 via a fixed length structure like this interchangably as a point of xy and a record of h and v, or whatever you notation pleased you. Untagged record variants was in those languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1566785155.199200",
        "client_msg_id": "82284c74-adab-481a-81d9-9d17d8a1151f",
        "text": "<@UEQ6M68H0> the amount of times you want to do something with the whole position or size dwarfs the amount of times you want to just do something with the left.. if your experience is otherwise I will bet you simply haven't written enough graphics-oriented code, or the language has no good support for the concept of a vector",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YBcuM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " the amount of times you want to do something with the whole position or size dwarfs the amount of times you want to just do something with the left.. if your experience is otherwise I will bet you simply haven't written enough graphics-oriented code, or the language has no good support for the concept of a vector"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1566785315.201100",
        "client_msg_id": "f184a9a0-ef8e-4d24-9646-275032a14f14",
        "text": "for example, no-one that writes GLSL or any other shader language would dream of treating a rectangle as anything other than position\/size. That is easy because in glsl everything that works on scalars also works on vectors. If you're doing graphics programming in a language that does not have primitive operations on vectors you're in a world of hurt",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7lD7e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for example, no-one that writes GLSL or any other shader language would dream of treating a rectangle as anything other than position\/size. That is easy because in glsl everything that works on scalars also works on vectors. If you're doing graphics programming in a language that does not have primitive operations on vectors you're in a world of hurt"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL7BSANUE",
        "type": "message",
        "ts": "1566785944.202200",
        "client_msg_id": "b2f2e353-1adf-493a-956a-02dd6641a2a2",
        "text": "Agree with suggestions origin and size should be separate, in Core Graphics `CGRect` is the product of `CGPoint` and `CGSize` and this works well",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf09493c792a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df09493c792a92b50f9235f1a4a98171.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Daniel Clelland",
            "display_name": "Daniel Clelland",
            "team": "T5TCAFTA9",
            "name": "daniel.clelland",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W4L8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agree with suggestions origin and size should be separate, in Core Graphics "
                            },
                            {
                                "type": "text",
                                "text": "CGRect",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the product of "
                            },
                            {
                                "type": "text",
                                "text": "CGPoint",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "CGSize",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and this works well"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL7BSANUE",
        "type": "message",
        "ts": "1566786036.202900",
        "client_msg_id": "f29e55f6-83dc-4ec8-9bf1-b7f72051fec0",
        "text": "wild card suggestion: rect as the product of two closed ranges",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf09493c792a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df09493c792a92b50f9235f1a4a98171.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Daniel Clelland",
            "display_name": "Daniel Clelland",
            "team": "T5TCAFTA9",
            "name": "daniel.clelland",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W9x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wild card suggestion: rect as the product of two closed ranges"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL7BSANUE",
        "type": "message",
        "ts": "1566786127.204400",
        "edited": {
            "user": "UL7BSANUE",
            "ts": "1566786848.000000"
        },
        "client_msg_id": "fe7987cf-6698-4820-a242-f2ffa8989c13",
        "text": "Wrote a pretty complex charting library recently and leaned pretty heavily on a helper function which looked like `CGRect.init(minX:maxX:minY:maxY:)`. This fit that particular domain more closely than origin\/size or x\/y\/width\/height did",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf09493c792a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df09493c792a92b50f9235f1a4a98171.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Daniel Clelland",
            "display_name": "Daniel Clelland",
            "team": "T5TCAFTA9",
            "name": "daniel.clelland",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3HZR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wrote a pretty complex charting library recently and leaned pretty heavily on a helper function which looked like "
                            },
                            {
                                "type": "text",
                                "text": "CGRect.init(minX:maxX:minY:maxY:)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This fit that particular domain more closely than origin\/size or x\/y\/width\/height did"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1566789918.208500",
        "client_msg_id": "256473e9-992b-43fe-b5c4-b3ded0eb341e",
        "text": "Surely, surely, the math works out best for pair of opposing vectors!  :wink:  No need to limit yourself to vec2 or even that one vector be relatively less than the other...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gP7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Surely, surely, the math works out best for pair of opposing vectors!  "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": "  No need to limit yourself to vec2 or even that one vector be relatively less than the other..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566801688.212600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566801780.000000"
        },
        "client_msg_id": "19c8ce30-ecf3-4026-9153-6eb5370a0aec",
        "text": "<https:\/\/ivanish.ca\/hest-time-travel\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LCCAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/ivanish.ca\/hest-time-travel\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566801692.212900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566801884.000000"
        },
        "client_msg_id": "39b52fe2-c704-4951-9468-14d50b94ae72",
        "text": "I've written the first blog post about my own future of coding project, the artistic programming tool Hest. In the post I describe how the programming model emerges from geometric primitives, the inspirations behind the editor GUI, the design of the time travel capability, and end with a problem that emerged from the intersection of two of my favorite features. I welcome feedback about both the design of Hest and the problem I'm currently grappling with, plus the blog post itself. I do a lot of writing but not a lot of blogging so suggestions about how to better utilize the medium, or places where you lose the thread of thought, would be lovely. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "reply_count": 44,
        "reply_users_count": 6,
        "latest_reply": "1567576458.039000",
        "reply_users": [
            "UC21F8Q48",
            "U8A5MS6R1",
            "UHWC9PXBL",
            "U7C7B75R6",
            "UC2A2ARPT",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UC21F8Q48",
                "ts": "1566844772.217200"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566845280.218500"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566845559.218800"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566846803.219800"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566846871.220200"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566847790.220700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566848390.221500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566849072.225100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566849211.225400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566849282.227300"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1566851073.227500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566880195.239800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566880588.240200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566880756.240400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566880882.240800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1566881058.241000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566881894.241300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566882053.241700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566882206.242100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566882704.242600"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1566929165.262400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566935187.264500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566936382.265500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566937494.272300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566937609.274300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566937642.275400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566937873.278200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1566938048.280400"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1566940094.280700"
            },
            {
                "user": "U7C7B75R6",
                "ts": "1566941289.280900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566941811.281100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1566942139.281300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1567341978.009200"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1567349086.009800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1567349127.010300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1567349140.010800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1567403785.011100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1567405944.011900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1567530113.013700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1567543228.021300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1567566151.030500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1567566175.031300"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1567576284.038800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1567576458.039000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5RK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've written the first blog post about my own future of coding project, the artistic programming tool Hest. In the post I describe how the programming model emerges from geometric primitives, the inspirations behind the editor GUI, the design of the time travel capability, and end with a problem that emerged from the intersection of two of my favorite features. I welcome feedback about both the design of Hest and the problem I'm currently grappling with, plus the blog post itself. I do a lot of writing but not a lot of blogging so suggestions about how to better utilize the medium, or places where you lose the thread of thought, would be lovely. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6",
                    "UA14TGLTC",
                    "U8A5MS6R1"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UJN1TAYEQ",
                    "U8A5MS6R1",
                    "U7C7B75R6"
                ],
                "count": 3
            }
        ]
    }
]