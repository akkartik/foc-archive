[
    {
        "user": "UAJKEBGP8",
        "type": "message",
        "ts": "1664877796.642749",
        "client_msg_id": "E12F3EFD-201E-42AF-B717-B8029B4BFBB9",
        "text": "<https:\/\/petevilter.me\/post\/datalog-typechecking\/|https:\/\/petevilter.me\/post\/datalog-typechecking\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "72578ab3b4f8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-09\/2610495978720_72578ab3b4f8ab9ef250_72.jpg",
            "first_name": "Srini",
            "real_name": "Srini K",
            "display_name": "Srini K",
            "team": "T5TCAFTA9",
            "name": "skadamat",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0TzXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/petevilter.me\/post\/datalog-typechecking\/",
                                "text": "https:\/\/petevilter.me\/post\/datalog-typechecking\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1664889855.728339",
        "client_msg_id": "6fb5bdda-442e-442a-95d1-b96d902e8587",
        "text": "Visual interface for building streaming data pipelines natively on Apache Kafka\n\nRapidly build, test, and deploy pipelines using a visual canvas extensible with SQL\n\n<https:\/\/www.confluent.io\/blog\/building-streaming-data-pipelines-visually\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/www.confluent.io\/blog\/building-streaming-data-pipelines-visually\/",
                "thumb_url": "https:\/\/cdn.confluent.io\/wp-content\/uploads\/seo-logo-meadow.png",
                "thumb_width": 748,
                "thumb_height": 748,
                "service_icon": "https:\/\/www.confluent.io\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.confluent.io\/blog\/building-streaming-data-pipelines-visually\/",
                "fallback": "Confluent: Build Streaming Data Pipelines Visually with Stream Designer",
                "text": "Confluent’s new Stream Designer is the industry’s first visual interface for rapidly building, testing, and deploying streaming data pipelines natively on Apache Kafka.",
                "title": "Build Streaming Data Pipelines Visually with Stream Designer",
                "title_link": "https:\/\/www.confluent.io\/blog\/building-streaming-data-pipelines-visually\/",
                "service_name": "Confluent"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0re",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visual interface for building streaming data pipelines natively on Apache Kafka\n\nRapidly build, test, and deploy pipelines using a visual canvas extensible with SQL\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.confluent.io\/blog\/building-streaming-data-pipelines-visually\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1664945940.180779",
        "client_msg_id": "ad3665b3-af54-4250-912d-c5a5fa50c97a",
        "text": "I really appreciated the <https:\/\/futureofcoding.org\/episodes\/058|latest FoC ep> about \"The Structure of a Programming Language Revolution\". I'm in The Academy, and I'm perpetually fascinated by what's happened to academic PL. This essay provided some missing links. Thanks <@UC2A2ARPT> &amp; <@UK3LH8CF5>!\n\nOne fun aha I had afterwards: The systems vs. languages distinction helps clear up something I've always wondered about prototypal object-oriented programming. Namely, why use prototypes at all? Rather than writing:\n```\/\/ Version A\n\nfunction Dog () { }\n\nDog.prototype = {\n  bark: function () { ... },\n  fetch: function () { ... },\n}```\nyou could just write:\n```\/\/ Version B\n\nfunction bark () { ... }\nfunction fetch () { ... }\n\nfunction Dog () {\n  this.bark = bark;\n  this.fetch = fetch;\n}```\nSure, maybe that's a hair less ergonomic. There's a (extremely tiny bit) more memory used to store the slots. But that hardly seems worth inventing a whole new language feature and making such a big deal about it.\n\nI think part of the answer is that prototypal inheritance was born in Self, a programming _system_. If you want to modify a \"prototype\" in a programming _language_, the two approaches above are equivalent. You modify the (literal) prototype in version A, or you modify the constructor in version B, and then you re-run your code. But if you want to modify a \"prototype\" in a programming _system_, you'll discover you already have a bunch of instances of the class running around. Version B doesn't work, because it only changes how new instances are constructed, not how existing instances behave. A live connection between the instance and its prototype is required to enable live development in a living system.\n\nI feel like Dan Brown over here, finding secret traces of the past in the present.\n\n(Ominous hole in my theory: This doesn't explain why prototypes were brought into Javascript, where they ostensibly no longer had much use.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1664945940.180779",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1665724069.080309",
        "reply_users": [
            "UGWUJUZHT",
            "U03B14DUZSA",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1665274641.131949"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1665513794.865529"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1665724069.080309"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "If2X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really appreciated the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/058",
                                "text": "latest FoC ep"
                            },
                            {
                                "type": "text",
                                "text": " about \"The Structure of a Programming Language Revolution\". I'm in The Academy, and I'm perpetually fascinated by what's happened to academic PL. This essay provided some missing links. Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " & "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "!\n\nOne fun aha I had afterwards: The systems vs. languages distinction helps clear up something I've always wondered about prototypal object-oriented programming. Namely, why use prototypes at all? Rather than writing:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/\/ Version A\n\nfunction Dog () { }\n\nDog.prototype = {\n  bark: function () { ... },\n  fetch: function () { ... },\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could just write:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/\/ Version B\n\nfunction bark () { ... }\nfunction fetch () { ... }\n\nfunction Dog () {\n  this.bark = bark;\n  this.fetch = fetch;\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure, maybe that's a hair less ergonomic. There's a (extremely tiny bit) more memory used to store the slots. But that hardly seems worth inventing a whole new language feature and making such a big deal about it.\n\nI think part of the answer is that prototypal inheritance was born in Self, a programming "
                            },
                            {
                                "type": "text",
                                "text": "system",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If you want to modify a \"prototype\" in a programming "
                            },
                            {
                                "type": "text",
                                "text": "language",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", the two approaches above are equivalent. You modify the (literal) prototype in version A, or you modify the constructor in version B, and then you re-run your code. But if you want to modify a \"prototype\" in a programming "
                            },
                            {
                                "type": "text",
                                "text": "system",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you'll discover you already have a bunch of instances of the class running around. Version B doesn't work, because it only changes how new instances are constructed, not how existing instances behave. A live connection between the instance and its prototype is required to enable live development in a living system.\n\nI feel like Dan Brown over here, finding secret traces of the past in the present.\n\n(Ominous hole in my theory: This doesn't explain why prototypes were brought into Javascript, where they ostensibly no longer had much use.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U02U0AS3J49",
                    "UFPRPSA4S",
                    "UA14TGLTC"
                ],
                "count": 4
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    }
]