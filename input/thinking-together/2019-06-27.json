[
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1561626331.400200",
        "client_msg_id": "5417171d-9db6-4ff5-890f-ec55a33d08f3",
        "text": "If you like the style of the other \"The Little X'er\" books it might work for you. I don't, I'm afraid, and the book was a bit of a disappointment for me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561588276.396900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jdo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you like the style of the other \"The Little X'er\" books it might work for you. I don't, I'm afraid, and the book was a bit of a disappointment for me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1561626440.400400",
        "client_msg_id": "54579e88-2099-48f1-8ed3-9eb686fb2ba4",
        "text": "If you haven't already, I recommend getting hold of Types and Programming Languages, Pierce. It's not new, but it's a great gateway to all that is.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561588276.396900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/1Ya",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you haven't already, I recommend getting hold of Types and Programming Languages, Pierce. It's not new, but it's a great gateway to all that is."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561636601.400600",
        "client_msg_id": "63f5133e-aa17-446f-9f9d-9d5012ef5317",
        "text": "They have something going for them, but do feel a little to arbitrary.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561588276.396900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RS2w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They have something going for them, but do feel a little to arbitrary."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561640528.401000",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1561642526.000000"
        },
        "client_msg_id": "fcc546fa-b464-4587-8365-4bdcb5be76f0",
        "text": "That CGAL reference explains why constructive reals are not the answer. It's because you can't compare two constructive reals x and y and determine if x &lt; y, x == y or x &gt; y (this is equivalent to solving the halting problem). You can only get an *approximate* answer, that might be wrong, which isn't good enough for making CGAL-style geometric constructions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "alU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That CGAL reference explains why constructive reals are not the answer. It's because you can't compare two constructive reals x and y and determine if x < y, x == y or x > y (this is equivalent to solving the halting problem). You can only get an "
                            },
                            {
                                "type": "text",
                                "text": "approximate",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " answer, that might be wrong, which isn't good enough for making CGAL-style geometric constructions."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561642394.401300",
        "client_msg_id": "a01c8942-4885-4a45-84fb-17d1724cada1",
        "text": "I have a related problem (geometry vs floating point numbers) in my Curv project. Curv is a 3D modelling language. If I use a boundary representation for 3D objects (like a triangle mesh, or a spline surface), then CSG operations (union, intersection, etc) become intractable, if coordinates are floating point numbers. Curv makes heavy use of trigonometric and exponential functions (sin, sqrt, etc), and I want fast updates for live programming, so it's hard to avoid floating point.\n\nMy solution was to switch from an explicit, or boundary representation (where you store coordinates of points on the surface of the shape) to an implicit, or signed distance field (SDF) representation. An SDF represents a shape as a function that maps an arbitrary point P in 3-space onto the distance from that point to the closest surface on the shape. The result is positive if P is outside the shape, 0 if P is on the boundary, or negative if P is inside. With this change in representation, the CSG operations become trivial, and the numeric instabilities that CGAL warns of go away.\n\nI'm using a small piece of Conal Elliot's continuous-time FRP in Curv, and I'm interested in extending that to support a more general notion of interactive animations that are defined using FRP. I am hoping that my trick of flipping the representation of shapes (from explicit to implicit) will continue to be helpful in making FRP work in my system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bd1L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a related problem (geometry vs floating point numbers) in my Curv project. Curv is a 3D modelling language. If I use a boundary representation for 3D objects (like a triangle mesh, or a spline surface), then CSG operations (union, intersection, etc) become intractable, if coordinates are floating point numbers. Curv makes heavy use of trigonometric and exponential functions (sin, sqrt, etc), and I want fast updates for live programming, so it's hard to avoid floating point.\n\nMy solution was to switch from an explicit, or boundary representation (where you store coordinates of points on the surface of the shape) to an implicit, or signed distance field (SDF) representation. An SDF represents a shape as a function that maps an arbitrary point P in 3-space onto the distance from that point to the closest surface on the shape. The result is positive if P is outside the shape, 0 if P is on the boundary, or negative if P is inside. With this change in representation, the CSG operations become trivial, and the numeric instabilities that CGAL warns of go away.\n\nI'm using a small piece of Conal Elliot's continuous-time FRP in Curv, and I'm interested in extending that to support a more general notion of interactive animations that are defined using FRP. I am hoping that my trick of flipping the representation of shapes (from explicit to implicit) will continue to be helpful in making FRP work in my system."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561644086.401600",
        "client_msg_id": "b622d916-06cc-4141-bb9c-9dbc45c81e6e",
        "text": "In Curv, a 3D shape is a continuous function of space: it's a function f : (x,y,z) -&gt; signed_distance. An animated shape is a continuous function of space\/time: f : (x,y,z,t) -&gt; signed_distance. In Elliot's Functional Reactive Animation paper, a Behaviour is a continuous function of time. So Curv and FRP use the same implicit representation of time, and in Curv, space and time are treated the same way. I'm hoping that this correspondence will help when I later extend Curv to support a larger subset of FRP.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DLs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Curv, a 3D shape is a continuous function of space: it's a function f : (x,y,z) -> signed_distance. An animated shape is a continuous function of space\/time: f : (x,y,z,t) -> signed_distance. In Elliot's Functional Reactive Animation paper, a Behaviour is a continuous function of time. So Curv and FRP use the same implicit representation of time, and in Curv, space and time are treated the same way. I'm hoping that this correspondence will help when I later extend Curv to support a larger subset of FRP."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF2GNRUTV",
        "type": "message",
        "ts": "1561644992.402100",
        "client_msg_id": "df81cb62-6e9d-416c-9550-a58d725601c2",
        "text": "`\/me` goes to add Pierce book to amazon wishlist, already in wishlist :open_mouth:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g49320ca20ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/649320ca20cacd083cf9225990f990b0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Cedric Cogell",
            "display_name": "cogell",
            "team": "T5TCAFTA9",
            "name": "cedric.cogell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561588276.396900",
        "parent_user_id": "UJNJQD2AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y\/iTg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/me",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " goes to add Pierce book to amazon wishlist, already in wishlist "
                            },
                            {
                                "type": "emoji",
                                "name": "open_mouth",
                                "unicode": "1f62e"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UDYGH7K8V"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561645458.402300",
        "client_msg_id": "a7598bf8-b0c0-4998-9b9b-9172e39af20a",
        "text": "<@UJNJQD2AC> I think the problem is that the types that are automatically inferred by soft typing can become very complicated. Which is a problem if the user has to look at an inferred type and understand what it means. But I think that proponents of dynamic typing will make the same criticism of any attempt to impose a static type system on idiomatic dynamically typed code. The general criticism is: if your starting point is a dynamically typed language, and the programming idioms used by such a language, and if you impose a static type system, then you add a lot of complexity and friction to the development process. In many cases, this creates a net loss of productivity, and the addition of static typing is simply not worth it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561056918.039200",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LVQg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " I think the problem is that the types that are automatically inferred by soft typing can become very complicated. Which is a problem if the user has to look at an inferred type and understand what it means. But I think that proponents of dynamic typing will make the same criticism of any attempt to impose a static type system on idiomatic dynamically typed code. The general criticism is: if your starting point is a dynamically typed language, and the programming idioms used by such a language, and if you impose a static type system, then you add a lot of complexity and friction to the development process. In many cases, this creates a net loss of productivity, and the addition of static typing is simply not worth it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561648444.402600",
        "client_msg_id": "36d4eefe-1648-4912-a55d-df154038775b",
        "text": "One potentially useful search would be \"exact real arithmetic geometry\". E.g. <https:\/\/icfp18.sigplan.org\/details\/npfl-2018-papers\/5\/Exact-Real-Arithmetic-for-Geometric-Operations>\n\nAlthough, I think that CGAL is the most practical solution (that I've seen at least)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "title": "Exact Real Arithmetic for Geometric Operations (NPFL 2018 Numerical Programming in Functional Languages) - ICFP 2018",
                "title_link": "https:\/\/icfp18.sigplan.org\/details\/npfl-2018-papers\/5\/Exact-Real-Arithmetic-for-Geometric-Operations",
                "text": "Videos are available online. This workshop aims to bring together researchers and practitioners exploring and utilising functional or declarative programming languages to solve numerically oriented problems including but not limited to Embedded domain specific languages for expressing numerical problems and generating efficient code e.g. generating llvm à la Julia \/ Haskell accelerate Use of types to ensure static correctness of matrix and higher rank computations e.g. use Naperian aka representable functors for statically type APL-like programming Dynamical systems \/ solving syst ...",
                "fallback": "Exact Real Arithmetic for Geometric Operations (NPFL 2018 Numerical Programming in Functional Languages) - ICFP 2018",
                "image_url": "https:\/\/icfp18.sigplan.org\/getImage\/carousel\/skyline.jpg?1488894339000",
                "from_url": "https:\/\/icfp18.sigplan.org\/details\/npfl-2018-papers\/5\/Exact-Real-Arithmetic-for-Geometric-Operations",
                "image_width": 835,
                "image_height": 250,
                "image_bytes": 396250,
                "service_icon": "https:\/\/icfp18.sigplan.org\/favicon.ico",
                "service_name": "icfp18.sigplan.org",
                "id": 1,
                "original_url": "https:\/\/icfp18.sigplan.org\/details\/npfl-2018-papers\/5\/Exact-Real-Arithmetic-for-Geometric-Operations"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z66Ck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One potentially useful search would be \"exact real arithmetic geometry\". E.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/icfp18.sigplan.org\/details\/npfl-2018-papers\/5\/Exact-Real-Arithmetic-for-Geometric-Operations"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlthough, I think that CGAL is the most practical solution (that I've seen at least)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561648477.402900",
        "client_msg_id": "6e7cdf5d-84eb-45e3-81f6-f3b19fb81d87",
        "text": "This challenge by Conal is kinda strange <https:\/\/twitter.com\/conal\/status\/1143690906454777856>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/conal|@conal>: <https:\/\/twitter.com\/spiralganglion|@spiralganglion> <https:\/\/twitter.com\/chatur_shalabh|@chatur_shalabh> What makes you think that computers can't use real numbers?",
                "ts": 1561512135,
                "author_name": "Conal Elliott",
                "author_link": "https:\/\/twitter.com\/conal\/status\/1143690906454777856",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/77498688\/two_conals_and_sof_spiral_600_normal.jpg",
                "author_subname": "@conal",
                "text": "<https:\/\/twitter.com\/spiralganglion|@spiralganglion> <https:\/\/twitter.com\/chatur_shalabh|@chatur_shalabh> What makes you think that computers can't use real numbers?",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/conal\/status\/1143690906454777856",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/conal\/status\/1143690906454777856",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dXwiw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This challenge by Conal is kinda strange "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/conal\/status\/1143690906454777856"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561648565.403200",
        "client_msg_id": "ba29bd97-4ad6-4685-9e0b-32d26117ed25",
        "text": "unless I'm missing something, it's mostly who, not what: Chaitin. Do a computation to a given accuracy with a non-computable number. Or, worse, do a computation with a non-limit-computable number",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WmJW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "unless I'm missing something, it's mostly who, not what: Chaitin. Do a computation to a given accuracy with a non-computable number. Or, worse, do a computation with a non-limit-computable number"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561653072.403700",
        "client_msg_id": "5b41f667-df53-4a2f-8a56-a5c534121ee6",
        "text": "The problem with reals goes farther back, to Hilbert. There an uncountable infinity of real numbers, far more than the countable infinity of the integers or rationals. The \"constructive reals\" is the largest subset of the real number line for which it is even theoretically possible to represent on a computer or even on an ideal Turing machine with infinite memory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2\/sO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The problem with reals goes farther back, to Hilbert. There an uncountable infinity of real numbers, far more than the countable infinity of the integers or rationals. The \"constructive reals\" is the largest subset of the real number line for which it is even theoretically possible to represent on a computer or even on an ideal Turing machine with infinite memory."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1561654348.404000",
        "client_msg_id": "b82b3ed5-6b00-4812-a7eb-4c1025370d79",
        "text": "One more idea: there's a set of numbers larger than the rationals but smaller than computable numbers: the set of algebraic numbers. I have vague memories of people using this set for computations, but no details. For geometry, that might be a good fit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oCR4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One more idea: there's a set of numbers larger than the rationals but smaller than computable numbers: the set of algebraic numbers. I have vague memories of people using this set for computations, but no details. For geometry, that might be a good fit."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561654730.404300",
        "client_msg_id": "f98a1716-a979-45a2-b6c9-9156a3f51f44",
        "text": "Yeah, I'm not so sure real numbers exist.  A continuum?  Sure.  But individual points all along it?  Not so sure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mu\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I'm not so sure real numbers exist.  A continuum?  Sure.  But individual points all along it?  Not so sure."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561656389.404600",
        "client_msg_id": "e7ba8cf9-ac99-4047-ac6c-7cdcbebbce7c",
        "text": "<@UA14TGLTC> if you take the position that the only real numbers that exist are the ones that, in principle, can be computed by an algorithm, then those are the constructive reals, and you are a constructive mathematician. The much larger set of nonconstructive reals have no relevance to computer science, or physics, or anything else that is \"real\", so it's hard to take them seriously if you aren't really deep into theoretical math. If you take them seriously, you get things like chaitins number, which is either really cool, or its a number that doesn't exist",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gCt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " if you take the position that the only real numbers that exist are the ones that, in principle, can be computed by an algorithm, then those are the constructive reals, and you are a constructive mathematician. The much larger set of nonconstructive reals have no relevance to computer science, or physics, or anything else that is \"real\", so it's hard to take them seriously if you aren't really deep into theoretical math. If you take them seriously, you get things like chaitins number, which is either really cool, or its a number that doesn't exist"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561656689.404800",
        "client_msg_id": "0bb84e5d-9e88-410a-9a1f-dd9a76073383",
        "text": "Konrad, I was actually just wondering earlier if there's a set which is larger than the algebraics but smaller than the computables which might have nicer properties. In any case, as Doug points out, you can take computable reals seriously and develop constructive analysis, etc. It's very interesting. Idk what set of numbers Conal wants is, but I'm fairly sure it's not the reals",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cxTZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Konrad, I was actually just wondering earlier if there's a set which is larger than the algebraics but smaller than the computables which might have nicer properties. In any case, as Doug points out, you can take computable reals seriously and develop constructive analysis, etc. It's very interesting. Idk what set of numbers Conal wants is, but I'm fairly sure it's not the reals"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1561660402.405000",
        "client_msg_id": "a322a3aa-8fc0-4b0b-9d30-9a508874b8e6",
        "text": "Found the answer: no <https:\/\/www.wikiwand.com\/en\/Richardson%27s_theorem>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "Wikiwand",
                "title": "Richardson's theorem | Wikiwand",
                "title_link": "https:\/\/www.wikiwand.com\/en\/Richardson%27s_theorem",
                "text": "In mathematics, Richardson's theorem establishes a limit on the extent to which an algorithm can decide whether certain mathematical expressions are equal. It states that for a certain fairly natural class of expressions, it is undecidable whether a particular expression E satisfies the equation E = 0, and similarly undecidable whether the functions defined by expressions E and F are everywhere equal . It was proved in 1968 by computer scientist Daniel Richardson of the University of Bath.",
                "fallback": "Wikiwand: Richardson's theorem | Wikiwand",
                "image_url": "http:\/\/assets.wikiwand.com\/img\/wikiwand_icon.png",
                "from_url": "https:\/\/www.wikiwand.com\/en\/Richardson%27s_theorem",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 18581,
                "service_icon": "http:\/\/assets.wikiwand.com\/img\/wikiwand_icon_apple.png",
                "id": 1,
                "original_url": "https:\/\/www.wikiwand.com\/en\/Richardson%27s_theorem"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S\/ffG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Found the answer: no "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.wikiwand.com\/en\/Richardson%27s_theorem"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1561661016.405300",
        "client_msg_id": "f3813f17-61a4-41b0-84b0-534ea168559a",
        "text": "<@UJN1TAYEQ> guilty as charged.  I feel that \"real\" numbers are just a lazy way of saying that a continuum is full of \"stuff.\"  What's less lazy?  Well, showing the a countable set of points has measure zero <https:\/\/www.youtube.com\/watch?v=cyW5z-M2yzw> for a start.  (While we're on this tangent, I also don't believe in the Axiom of Choice for what it's worth.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Music And Measure Theory",
                "title_link": "https:\/\/www.youtube.com\/watch?v=cyW5z-M2yzw",
                "author_name": "3Blue1Brown",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCYO_jab_esuFRV4b17AJtAw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/cyW5z-M2yzw\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Music And Measure Theory",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/cyW5z-M2yzw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=cyW5z-M2yzw",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=cyW5z-M2yzw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "26wJa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " guilty as charged.  I feel that \"real\" numbers are just a lazy way of saying that a continuum is full of \"stuff.\"  What's less lazy?  Well, showing the a countable set of points has measure zero "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=cyW5z-M2yzw"
                            },
                            {
                                "type": "text",
                                "text": " for a start.  (While we're on this tangent, I also don't believe in the Axiom of Choice for what it's worth.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561667124.406200",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1561671693.000000"
        },
        "client_msg_id": "d7e6fbb5-c13c-4ddb-b09d-2170f469ba53",
        "text": "Just sharing a naive idea that came to mind which might be useful in practice.\n\n1. Don't track points, only track intervals. So every point is in represented as a circle, line is a band etc. - it's fuzzy. You can compute 'to the left of' correctly when there is no overlap, but in overlap cases it's not known until the system calculates some more precision.\n\n2. Represent imprecision in the UI (e.g. orange glow instead of an intersection point). Then when the user 'zooms in' to the intersection it computes more precision (~reduce the circle radius). This exposes the imprecision to the user and outsources the halting problem.\n\nExact points can still be represented as circles with radius=0 and the null symbolic expression. Inexact points are represented as (center, radius, symbolic_expression_to_evaluate_more_precision).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R=L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just sharing a naive idea that came to mind which might be useful in practice.\n\n1. Don't track points, only track intervals. So every point is in represented as a circle, line is a band etc. - it's fuzzy. You can compute 'to the left of' correctly when there is no overlap, but in overlap cases it's not known until the system calculates some more precision.\n\n2. Represent imprecision in the UI (e.g. orange glow instead of an intersection point). Then when the user 'zooms in' to the intersection it computes more precision (~reduce the circle radius). This exposes the imprecision to the user and outsources the halting problem.\n\nExact points can still be represented as circles with radius=0 and the null symbolic expression. Inexact points are represented as (center, radius, symbolic_expression_to_evaluate_more_precision)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1561667370.406400",
        "client_msg_id": "e3b569af-8637-4a98-acbb-3d3b9bd5ee63",
        "text": "(is this cgal?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cqP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(is this cgal?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1561671496.406900",
        "client_msg_id": "02677db7-0cd2-481d-983b-91462dc3c1ff",
        "text": "<@U8A5MS6R1> CGAL uses simple algorithms that assume exact arithmetic. In my experience of the CGAL CSG operators, you need to tell CGAL to use rational numbers. If you tell it to use floating point numbers, then you'll get garbage output for some good inputs. Even with these simplifying assumptions, the code for CSG operations is extremely complex, and can only be written by experts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561516587.375600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dnY3t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " CGAL uses simple algorithms that assume exact arithmetic. In my experience of the CGAL CSG operators, you need to tell CGAL to use rational numbers. If you tell it to use floating point numbers, then you'll get garbage output for some good inputs. Even with these simplifying assumptions, the code for CSG operations is extremely complex, and can only be written by experts."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]