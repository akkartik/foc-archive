[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1653380383.030479",
        "client_msg_id": "6676b524-788a-4b84-8ed0-f2f53b739e8c",
        "text": "There's also Pure (<https:\/\/agraef.github.io\/pure-lang\/>), probably the closest to a general-purpose programming language based on term rewriting.\n\nMy own Leibniz project (<https:\/\/science-in-the-digital-era.khinsen.net\/#Leibniz>) is based on term algebras and term rewriting as well. Its main inspiration is the OBJ family of algebraic specification languages, the latest of which (Maude) has already been mentioned. But the older papers on OBJ, mainly by Joseph Goguen and collaborators, are still worth reading.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653308886.510549",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/lx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's also Pure ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/agraef.github.io\/pure-lang\/"
                            },
                            {
                                "type": "text",
                                "text": "), probably the closest to a general-purpose programming language based on term rewriting.\n\nMy own Leibniz project ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/science-in-the-digital-era.khinsen.net\/#Leibniz"
                            },
                            {
                                "type": "text",
                                "text": ") is based on term algebras and term rewriting as well. Its main inspiration is the OBJ family of algebraic specification languages, the latest of which (Maude) has already been mentioned. But the older papers on OBJ, mainly by Joseph Goguen and collaborators, are still worth reading."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1653380934.946739",
        "client_msg_id": "0fc814e4-f013-49a7-9c18-811c0c06877c",
        "text": "A technique that looks like a nice complement to term rewriting is equality saturation (<https:\/\/arxiv.org\/abs\/1012.1802>). I am currently playing with it in Leibniz. Instead of reducing a term to a normal form, equality saturation compactly represents _all_ equivalent terms, so that you can pick the one that is \"best\" for your purposes. Of course this works only for rewriting systems implementing equivalence transformations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653308886.510549",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/arxiv.org\/abs\/1012.1802",
                "thumb_url": "https:\/\/static.arxiv.org\/icons\/twitter\/arxiv-logo-twitter-square.png",
                "thumb_width": 1000,
                "thumb_height": 1000,
                "service_icon": "https:\/\/static.arxiv.org\/static\/browse\/0.3.4\/images\/icons\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/arxiv.org\/abs\/1012.1802",
                "fallback": "arXiv.org: Equality Saturation: A New Approach to Optimization",
                "text": "Optimizations in a traditional compiler are applied sequentially, with each optimization destructively modifying the program to produce a transformed program that is then passed to the next...",
                "title": "Equality Saturation: A New Approach to Optimization",
                "title_link": "https:\/\/arxiv.org\/abs\/1012.1802",
                "service_name": "arXiv.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ww0Dh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A technique that looks like a nice complement to term rewriting is equality saturation ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/1012.1802"
                            },
                            {
                                "type": "text",
                                "text": "). I am currently playing with it in Leibniz. Instead of reducing a term to a normal form, equality saturation compactly represents "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " equivalent terms, so that you can pick the one that is \"best\" for your purposes. Of course this works only for rewriting systems implementing equivalence transformations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I've been thinking about the limitations and shortcomings that VPL environments have when they focus on program structure instead of the desired outcome a user has in mind.\n\nAnother word for structure is recipe. Recipes are difficult for most non-coders to wrestle with because they force a mental model of “do A, then B, then C to hopefully achieve the X that I want”. A recipe by its definition means that the outcome – the thing the user is trying to achieve - is a separate thing, which usually divides the UI into two distinct and somewhat disconnected parts.\n\nThis brings me to outcome-driven coding (ODC). I’m making up this term, surely there is a term grounded in research? :grin: With ODC, we’re flipping the script, and letting users work in a way that follows a pattern of “Tinker and change until it (the outcome, not the recipe) feels right”.\n\nBy mostly hiding the program structure, and showing the outcome of running the program live, an ODC tool can be made on top of an existing programming language, leveraging an entire eco-system of existing work, be it open source, or existing code bases that a product team is working on. This is a big deal for adoption of such a tool, and the foundation for collaboration with developers using IDEs.\n\nThere’s an interesting trade-off here that has to do with expressive power versus complexity in a VPL environment. With ODC, we can manage that complexity by deciding on which parts of a code base that visual programming is best suited for, and which parts to “leave alone but still execute to show the real product outcome”. Parts of a code base are inherently about the human element and the user experience. Let's call this \"design code\". Design code naturally centers on using and defining design system components, the visual language, use of data, navigation flows, and pages. This is where visual programming shines.\n\nThe ODC approach lets us create a tool that is optimized to work with design code visually, in a way that UX designers prefer, while allowing traditional business logic code to execute unhampered inside the tool. The key is to allow collaboration on a single shared code base, with tools specialized for the unique skills and needs of the people in a cross-functional team.\n\nWould be great to hear what this group thinks of this hybrid approach, and whether there is existing work that is similar. Thanks :slightly_smiling_face:",
        "files": [
            {
                "id": "F03GHKG3VRU",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U03GBV8B58V",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iZD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about the limitations and shortcomings that VPL environments have when they focus on program structure instead of the desired outcome a user has in mind.\n\nAnother word for structure is recipe. Recipes are difficult for most non-coders to wrestle with because they force a mental model of “do A, then B, then C to hopefully achieve the X that I want”. A recipe by its definition means that the outcome – the thing the user is trying to achieve - is a separate thing, which usually divides the UI into two distinct and somewhat disconnected parts.\n\nThis brings me to outcome-driven coding (ODC). I’m making up this term, surely there is a term grounded in research? "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            },
                            {
                                "type": "text",
                                "text": " With ODC, we’re flipping the script, and letting users work in a way that follows a pattern of “Tinker and change until it (the outcome, not the recipe) feels right”.\n\nBy mostly hiding the program structure, and showing the outcome of running the program live, an ODC tool can be made on top of an existing programming language, leveraging an entire eco-system of existing work, be it open source, or existing code bases that a product team is working on. This is a big deal for adoption of such a tool, and the foundation for collaboration with developers using IDEs.\n\nThere’s an interesting trade-off here that has to do with expressive power versus complexity in a VPL environment. With ODC, we can manage that complexity by deciding on which parts of a code base that visual programming is best suited for, and which parts to “leave alone but still execute to show the real product outcome”. Parts of a code base are inherently about the human element and the user experience. Let's call this \"design code\". Design code naturally centers on using and defining design system components, the visual language, use of data, navigation flows, and pages. This is where visual programming shines.\n\nThe ODC approach lets us create a tool that is optimized to work with design code visually, in a way that UX designers prefer, while allowing traditional business logic code to execute unhampered inside the tool. The key is to allow collaboration on a single shared code base, with tools specialized for the unique skills and needs of the people in a cross-functional team.\n\nWould be great to hear what this group thinks of this hybrid approach, and whether there is existing work that is similar. Thanks "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1653382869.317309",
        "client_msg_id": "5df0da74-7f37-47a4-a57e-7bd6c0676e83",
        "thread_ts": "1653382869.317309",
        "reply_count": 14,
        "reply_users_count": 4,
        "latest_reply": "1653555925.882379",
        "reply_users": [
            "U03GBV8B58V",
            "UDQBTJ211",
            "UA14TGLTC",
            "U03B14DUZSA"
        ],
        "replies": [
            {
                "user": "U03GBV8B58V",
                "ts": "1653383345.526409"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1653383494.666519"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1653383520.781969"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653383601.246569"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1653383716.429479"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653383766.003069"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653383794.763639"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653406539.177889"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653409180.253319"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653410070.884739"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1653447489.859979"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653461993.180579"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1653517677.899219"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1653555925.882379"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "text": "ODC in action:",
        "files": [
            {
                "id": "F03GHM6D5FY",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U03GBV8B58V",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ND\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ODC in action:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1653383345.526409",
        "client_msg_id": "d4ec181e-865d-4074-94f5-3f62d8025262",
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1653383494.666519",
        "client_msg_id": "21ae7a97-63c0-44a6-9763-08278d015cca",
        "text": "This is kind of what Wrangler does <http:\/\/vis.stanford.edu\/wrangler\/|http:\/\/vis.stanford.edu\/wrangler\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lcjW+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is kind of what Wrangler does "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/vis.stanford.edu\/wrangler\/",
                                "text": "http:\/\/vis.stanford.edu\/wrangler\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1653383520.781969",
        "client_msg_id": "64ca349e-da91-4d5f-9bda-328f5760ba4d",
        "text": "It's now a commercial company called Trifacta",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s11Oc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's now a commercial company called Trifacta"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653383601.246569",
        "client_msg_id": "68dc1c24-9c54-4ab9-86c8-852c1a45488f",
        "text": "Cool, thanks. Didn't know about them :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1qzS6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool, thanks. Didn't know about them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1653383716.429479",
        "client_msg_id": "688368d8-07d6-4835-a67a-c962b0b55c64",
        "text": "It's definitely a very promising idea. Sketch-n-sketch is also similar. I'm not familiar enough with the research to know the right things to Google",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jXxmF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's definitely a very promising idea. Sketch-n-sketch is also similar. I'm not familiar enough with the research to know the right things to Google"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653383766.003069",
        "client_msg_id": "21909b13-f828-49e8-979f-dcc5e4264ade",
        "text": "I know the feeling :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6+Ot",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know the feeling "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653383794.763639",
        "client_msg_id": "6682d4ce-1e2e-49a6-bc06-21498403ad28",
        "text": "Structured editing is one of the terms we seem to overlap a bit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6OOh6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Structured editing is one of the terms we seem to overlap a bit."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653406539.177889",
        "client_msg_id": "4acbc5fc-5118-4c19-b977-d2e1fa596f30",
        "text": "Love the hybrid approach.  Start with the concrete, gradually abstract.\n\nHow similar\/different is outcome-driven coding to programming by example?  Certainly, normal people don't follow recipes, let alone write them.  They have a sense for what a good outcome will be, and if it's not going that way they'll double check, tweak, and outright ignore the steps.  Is improvisation what makes us human?\n\nGood programmers, on the other hand, generally have two uncanny skills:\n\n1) Can play computer, can model, often in their heads, what the steps will actually do rather than what they should do, it's like how an artist can imagine what a subject actually looks like rather than an simpler abstraction.\n\n2) Can sense edge cases and complicating interactions.  Yes, but when you combine this with that what happens?\n\nLiveness helps to address (1).  There are challenges certainly, but what do we do to help a person with (2)?  You could say static checks try to address (2).  I have a recent example in mind.\n\nTrying RubyMine for fun, it flagged an _obviously_ fine stretch of code:\n```@instance_variable = [an, array, of, things]\n@instance_variable.map(&amp;:whatever)\n# ... later in the method ...\n@instance_variable = nil```\nas potentially raising \"NoMethodError: undefined method for nil:NilClass.\"  Smart tool not so smart?  Typing `@instance_variable` based on all its uses ignoring control flow?  Replace `@instance_variable` with `local_variable` no error.  Why the difference?  Thread safety!  Would be nice if the tool explained as much, but there you have it.  (Of course, no sane person uses threads in Ruby, or ever, but that's another conversation.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+BJO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Love the hybrid approach.  Start with the concrete, gradually abstract.\n\nHow similar\/different is outcome-driven coding to programming by example?  Certainly, normal people don't follow recipes, let alone write them.  They have a sense for what a good outcome will be, and if it's not going that way they'll double check, tweak, and outright ignore the steps.  Is improvisation what makes us human?\n\nGood programmers, on the other hand, generally have two uncanny skills:\n\n1) Can play computer, can model, often in their heads, what the steps will actually do rather than what they should do, it's like how an artist can imagine what a subject actually looks like rather than an simpler abstraction.\n\n2) Can sense edge cases and complicating interactions.  Yes, but when you combine this with that what happens?\n\nLiveness helps to address (1).  There are challenges certainly, but what do we do to help a person with (2)?  You could say static checks try to address (2).  I have a recent example in mind.\n\nTrying RubyMine for fun, it flagged an "
                            },
                            {
                                "type": "text",
                                "text": "obviously",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fine stretch of code:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@instance_variable = [an, array, of, things]\n@instance_variable.map(&:whatever)\n# ... later in the method ...\n@instance_variable = nil"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as potentially raising \"NoMethodError: undefined method for nil:NilClass.\"  Smart tool not so smart?  Typing "
                            },
                            {
                                "type": "text",
                                "text": "@instance_variable",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " based on all its uses ignoring control flow?  Replace "
                            },
                            {
                                "type": "text",
                                "text": "@instance_variable",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "local_variable",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " no error.  Why the difference?  Thread safety!  Would be nice if the tool explained as much, but there you have it.  (Of course, no sane person uses threads in Ruby, or ever, but that's another conversation.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653409180.253319",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653409610.000000"
        },
        "client_msg_id": "b5bab4e6-1876-4f99-8d38-29e3077e9182",
        "text": "ODC and Programming By Example are definitely related, but PBE is more general in my mind since it can also consist of textual\/symbolic\/node-based structures. With ODC, the user interacts directly with the program output on a canvas, and the examples being pulled in are also viewed based on their output before being added.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bpu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ODC and Programming By Example are definitely related, but PBE is more general in my mind since it can also consist of textual\/symbolic\/node-based structures. With ODC, the user interacts directly with the program output on a canvas, and the examples being pulled in are also viewed based on their output before being added."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653410070.884739",
        "client_msg_id": "d000d2a1-8796-4a4d-9681-0ff18d63e770",
        "text": "Having to \"play the computer\" is one of the pains we're trying to solve for designers.\n\nToday, with vector based tools, designers have to imagine how their design will look in the final medium (after handoff to dev). We want them to immediately see the real output -- the user experience that ships -- and pass real data though it, so they can evaluate the quality and robustness of the design in real time and improve it as needed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xFkO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having to \"play the computer\" is one of the pains we're trying to solve for designers.\n\nToday, with vector based tools, designers have to imagine how their design will look in the final medium (after handoff to dev). We want them to immediately see the real output -- the user experience that ships -- and pass real data though it, so they can evaluate the quality and robustness of the design in real time and improve it as needed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653447489.859979",
        "client_msg_id": "a74b146a-316d-46df-8fd5-f2ddd550e894",
        "text": "Another potential difference between ODC and PBE can be level of granularity.  Instead of working back from a finished example, ODC can leverage the steps you went through.  Reifying steps is a great way to understand a complex artifact and then abstract from there.  I keep coming back to the Fusion 360 Timeline as a potentially crazy powerful tool.  Here's a video with a flavor of how its used.  <https:\/\/www.youtube.com\/watch?v=o5NsPOcXLho>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=o5NsPOcXLho",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/o5NsPOcXLho\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/o5NsPOcXLho?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=o5NsPOcXLho",
                "fallback": "YouTube Video: Fusion 360: 8 Fusion 360 Timeline Tricks You MUST Know to Master Fusion 360 | #fusionFridays",
                "title": "Fusion 360: 8 Fusion 360 Timeline Tricks You MUST Know to Master Fusion 360 | #fusionFridays",
                "title_link": "https:\/\/www.youtube.com\/watch?v=o5NsPOcXLho",
                "author_name": "Product Design Online",
                "author_link": "https:\/\/www.youtube.com\/c\/ProductDesignOnline",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jCm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another potential difference between ODC and PBE can be level of granularity.  Instead of working back from a finished example, ODC can leverage the steps you went through.  Reifying steps is a great way to understand a complex artifact and then abstract from there.  I keep coming back to the Fusion 360 Timeline as a potentially crazy powerful tool.  Here's a video with a flavor of how its used.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=o5NsPOcXLho"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653461993.180579",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653462450.000000"
        },
        "client_msg_id": "098dbdd7-b893-4bc5-98eb-011815db6d16",
        "text": "Nice, the timeline looks like a powerful learning tool. Cool how he fixed the rounding of the box. I think for code, it's way more complicated (halting problem etc.)\n\nInteresting that you thought of CAD. CAD inspired our approach, but in the sense that current vector graphics UX design tools are CAD (focus on geometry) where they should be more specialized like BIM (understand the physics, i.e. a digital product is the interplay of code and data).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653382869.317309",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jNtJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice, the timeline looks like a powerful learning tool. Cool how he fixed the rounding of the box. I think for code, it's way more complicated (halting problem etc.)\n\nInteresting that you thought of CAD. CAD inspired our approach, but in the sense that current vector graphics UX design tools are CAD (focus on geometry) where they should be more specialized like BIM (understand the physics, i.e. a digital product is the interplay of code and data)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]