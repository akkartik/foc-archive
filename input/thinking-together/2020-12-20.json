[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1608515585.357600",
        "client_msg_id": "2c7f7b6f-9034-4459-8683-a39495031df3",
        "text": "I miss AOP.  :cry:  Not sure why it didn't catch on more.  Weave order isn't in principle more difficult than regular imperative coding, which of course is ordering error prone.  Rails hooks in particular create an especially gnarly, overcomplicated call graph.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6c+MG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I miss AOP.  "
                            },
                            {
                                "type": "emoji",
                                "name": "cry",
                                "unicode": "1f622"
                            },
                            {
                                "type": "text",
                                "text": "  Not sure why it didn't catch on more.  Weave order isn't in principle more difficult than regular imperative coding, which of course is ordering error prone.  Rails hooks in particular create an especially gnarly, overcomplicated call graph."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1608516378.357800",
        "client_msg_id": "bd34f746-502f-4d62-b4ec-c7561b684531",
        "text": "i kind of think that declarative approaches where the system figures out the order to do something in shine when the details of the execution don't matter, just the end result, and i think for the things that the rails callback system gets used for, or for turn based game programming or whatever, the order of execution really does matter",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B3+S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i kind of think that declarative approaches where the system figures out the order to do something in shine when the details of the execution don't matter, just the end result, and i think for the things that the rails callback system gets used for, or for turn based game programming or whatever, the order of execution really does matter"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1608516413.358000",
        "client_msg_id": "f33caf8e-fa45-4cf8-9502-ed823640404d",
        "text": "that going more declarative and towards the constraint solving world might actually make it harder to reason about if you want control over the inner bits for say a database transaction boundary or what have you",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "clR\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that going more declarative and towards the constraint solving world might actually make it harder to reason about if you want control over the inner bits for say a database transaction boundary or what have you"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1608516450.358200",
        "edited": {
            "user": "U016LEA3J1H",
            "ts": "1608516457.000000"
        },
        "client_msg_id": "c1175e36-8e50-4108-b3d2-507a96fe2779",
        "text": "i think i am saying the manner in which and the order all the things compose is often essential complexity that you can't fully abstract away",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jE5N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think i am saying the manner in which and the order all the things compose is often essential complexity that you can't fully abstract away"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1608516583.360700",
        "edited": {
            "user": "U016LEA3J1H",
            "ts": "1608516613.000000"
        },
        "client_msg_id": "ab398f48-d6db-4dda-846f-f42cd36cd184",
        "text": "for those that have used node and wire programming systems frequently, how often are both your hands on your keyboard vs only one? been watching a designer colleagues hand movement recently and it's super interesting how different it is than my own, and that designers don't seem to complain about having to move back and forth that much. I think drawing boxes (or if you take it all the way, AutoCAD style work) with a keyboard is a non-starter, and they're only typing rarely, so they end up with mouse hand for the fine inputs and keyboard hand for tool selection or chords",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608516583.360700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1608569653.372500",
        "reply_users": [
            "UHWC9PXBL",
            "UA14TGLTC",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1608520957.363400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1608521339.363800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1608569653.372500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T0h3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for those that have used node and wire programming systems frequently, how often are both your hands on your keyboard vs only one? been watching a designer colleagues hand movement recently and it's super interesting how different it is than my own, and that designers don't seem to complain about having to move back and forth that much. I think drawing boxes (or if you take it all the way, AutoCAD style work) with a keyboard is a non-starter, and they're only typing rarely, so they end up with mouse hand for the fine inputs and keyboard hand for tool selection or chords"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1608520806.362200",
        "client_msg_id": "6986B1A0-3A03-4CC4-883A-91777B1F7F15",
        "text": "right, i’m asking about systems that help you explicitly declare exactly the essential ordering complexity, eg “lightning strikes after pushback effects”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pih",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right, i’m asking about systems that help you explicitly declare exactly the essential ordering complexity, eg “lightning strikes after pushback effects”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1608520957.363400",
        "client_msg_id": "640D4D79-1C52-4C0B-9C3A-92A2EB24D542",
        "text": "i’m also curious if any of these systems are designed to be used specifically with one hand on the keyboard and one on a mouse the vast majority of the time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608516583.360700",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o2ss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’m also curious if any of these systems are designed to be used specifically with one hand on the keyboard and one on a mouse the vast majority of the time"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1608521260.363600",
        "client_msg_id": "036020a0-65ea-4cbf-8e0f-409f7287b656",
        "text": "It's like multiple inheritance: lots of ways to do it, every one wrong.  So it's best to have a common-case, easy-to-reason about default together with a flexible, explicit construct when the default isn't right.\n\nA potentially better, but more conceptually challenging step, is having a system that's really good at assisting with order.  People have certainly looked into this with types and contracts and what have you, but I don't feel like it's been nailed.  AOP, for instance, was good for describing long distance ordering constraints as a double check.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uzx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's like multiple inheritance: lots of ways to do it, every one wrong.  So it's best to have a common-case, easy-to-reason about default together with a flexible, explicit construct when the default isn't right.\n\nA potentially better, but more conceptually challenging step, is having a system that's really good at assisting with order.  People have certainly looked into this with types and contracts and what have you, but I don't feel like it's been nailed.  AOP, for instance, was good for describing long distance ordering constraints as a double check."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1608521339.363800",
        "client_msg_id": "af50571c-c306-4d34-9fac-7ffffefbed5e",
        "text": "Depends on the tool, but I see the default as right hand on mouse and left hand on keyboard.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608516583.360700",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NXrHI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Depends on the tool, but I see the default as right hand on mouse and left hand on keyboard."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1608529537.368100",
        "client_msg_id": "0CD5705E-5426-4516-A790-82CE0DB2853D",
        "text": "exactly! i’m asking if there are any environments or languages that let you declare loose constraints in an ad hoc manner (eg, this requires this to happen first, this construct never happens without or before this other thing) and then just orders it for you  and points out any cycles that can’t be resolved. id guess build systems (although a lot of them seem to err to extremes), and i’d be really interested in any examples with type systems",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SVJI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "exactly! i’m asking if there are any environments or languages that let you declare loose constraints in an ad hoc manner (eg, this requires this to happen first, this construct never happens without or before this other thing) and then just orders it for you  and points out any cycles that can’t be resolved. id guess build systems (although a lot of them seem to err to extremes), and i’d be really interested in any examples with type systems"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1608530338.368300",
        "client_msg_id": "05d472b9-8d1b-49de-be8e-80b380b28c61",
        "text": "the power of AOP seems coming from \"extract cross cutting concerns\", by re-organize the code, \"shorten the editing distance between related code\".  But that leaves two questions: 1. what is the value of re-organizing the code, just to allow me move my mouse less? 2. The pointcut \/ advice seems complex. My recent thought on this is: The value of re-organize the code is to re-design the dependency relationship between packages. If cross cutting concern extracted out into same package, there is little extra benefit. If extracting cross cutting concern allows us to optimize the dependency graph, so that more package can be removed from dependency list, it worth the trouble. It is just a package management game in the end.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h2N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the power of AOP seems coming from \"extract cross cutting concerns\", by re-organize the code, \"shorten the editing distance between related code\".  But that leaves two questions: 1. what is the value of re-organizing the code, just to allow me move my mouse less? 2. The pointcut \/ advice seems complex. My recent thought on this is: The value of re-organize the code is to re-design the dependency relationship between packages. If cross cutting concern extracted out into same package, there is little extra benefit. If extracting cross cutting concern allows us to optimize the dependency graph, so that more package can be removed from dependency list, it worth the trouble. It is just a package management game in the end."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFNXF0F9",
        "type": "message",
        "ts": "1608530455.368500",
        "client_msg_id": "614fa57b-7f05-4a21-b032-fbbd496aa7b2",
        "text": "In a typical inverted dependency relationship, the bottom package serves us integration between the top packages. It is kind of manifest file or configuration file, declaring how those upper packages integrated with each other. In this sense, introducing new language of pointcut \/ advice is not necessary. We just need to invert the dependency relationship, and keep the bottom package minimal.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5651704a60f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/15651704a60f7ef1539f9b1fa2506188.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "taowen",
            "display_name": "taowen",
            "team": "T5TCAFTA9",
            "name": "taowen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608395248.354400",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hf44O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a typical inverted dependency relationship, the bottom package serves us integration between the top packages. It is kind of manifest file or configuration file, declaring how those upper packages integrated with each other. In this sense, introducing new language of pointcut \/ advice is not necessary. We just need to invert the dependency relationship, and keep the bottom package minimal."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    }
]