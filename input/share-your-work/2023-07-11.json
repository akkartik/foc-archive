[
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1689083336.878249",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1689083406.000000"
        },
        "client_msg_id": "2441f514-e3b5-4fc1-8538-b2c31911d91b",
        "text": "I've started to work on a structural editor for my language coil <https:\/\/coil-editor.netlify.app\/>\n\nIt's still early &amp; buggy, but the idea is to directly turn the AST into html with contenteditable for leaf attribute nodes.\n\nSo an expression like:\n`document.body`\nwhich is the coil AST:\n```{type: :property_lookup, lhs: {type: :id_lookup, name: \"document\"}, property: \"body\"}```\nTurns into:\n```&lt;div data-kind=\"property_lookup\"&gt;\n  &lt;div data-attr=\"lhs\"&gt;\n    &lt;div data-kind=\"id_lookup\"&gt;\n      &lt;div data-attr=\"name\" contenteditable&gt;document&lt;\/div&gt;\n    &lt;\/div&gt;\n  &lt;\/div&gt;\n  &lt;div data-attr=\"property\" contenteditable&gt;body&lt;\/div&gt;\n&lt;\/div&gt;```\nAnd now we can easily query this expression with css selectors. So all the syntax highlighting AND formatting is done in css. It also means that static analysis can be done using querySelector.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689083336.878249",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1689173930.393469",
        "reply_users": [
            "U03LJBR6THT",
            "U04E5QAD6DD",
            "U03LMRE6MQE"
        ],
        "replies": [
            {
                "user": "U03LJBR6THT",
                "ts": "1689084896.166049"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1689111135.927889"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1689112303.583349"
            },
            {
                "user": "U03LMRE6MQE",
                "ts": "1689173272.597409"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1689173720.524199"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1689173788.144059"
            },
            {
                "user": "U03LJBR6THT",
                "ts": "1689173930.393469"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H862r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've started to work on a structural editor for my language coil "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/coil-editor.netlify.app\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's still early & buggy, but the idea is to directly turn the AST into html with contenteditable for leaf attribute nodes.\n\nSo an expression like:\n"
                            },
                            {
                                "type": "text",
                                "text": "document.body",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nwhich is the coil AST:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "{type: :property_lookup, lhs: {type: :id_lookup, name: \"document\"}, property: \"body\"}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Turns into:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "<div data-kind=\"property_lookup\">\n  <div data-attr=\"lhs\">\n    <div data-kind=\"id_lookup\">\n      <div data-attr=\"name\" contenteditable>document<\/div>\n    <\/div>\n  <\/div>\n  <div data-attr=\"property\" contenteditable>body<\/div>\n<\/div>"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnd now we can easily query this expression with css selectors. So all the syntax highlighting AND formatting is done in css. It also means that static analysis can be done using querySelector."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U04E5QAD6DD",
                    "U05PRFSG069"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03LJBR6THT",
        "type": "message",
        "ts": "1689084896.166049",
        "client_msg_id": "fc224633-718e-4983-8897-5bce5208f22d",
        "text": "Where I see this going is establishing a highly extendable editor system.\n\nI want it to be attainable for an average library author to ship with a linter, and editor plugins.\n\nTo start I need a dead simple editor system. So with embedding AST information in the html, it gives web developers a clear path how to inspect the AST &amp; come up with custom rules, or swap out parts of the ast with something more visually interesting (imagine putting in a colour picker in usages of a color function).\n\nI haven't realized its full potential yet, there might need to be more metadata in the DOM, but I'm starting small &amp; seeing how far I can get.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0afa5db0b2d5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5524013698279_0afa5db0b2d593650747_72.jpg",
            "first_name": "Marcelle",
            "real_name": "Marcelle Rusu",
            "display_name": "Marcelle Rusu",
            "team": "T5TCAFTA9",
            "name": "marcelrusu0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689083336.878249",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kXq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where I see this going is establishing a highly extendable editor system.\n\nI want it to be attainable for an average library author to ship with a linter, and editor plugins.\n\nTo start I need a dead simple editor system. So with embedding AST information in the html, it gives web developers a clear path how to inspect the AST & come up with custom rules, or swap out parts of the ast with something more visually interesting (imagine putting in a colour picker in usages of a color function).\n\nI haven't realized its full potential yet, there might need to be more metadata in the DOM, but I'm starting small & seeing how far I can get."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U05G29UQHKK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1689111135.927889",
        "client_msg_id": "c22977f3-7c7b-4ab1-8bb5-a76537bac7a7",
        "text": "I'd wondered about such things myself. You are lot further along than I am, though! The \"ground truth\" representation is still the AST, right? Do you have to do a lot of work to keep the DOM and AST in sync with each other? Are you using something like ProseMirror or…hmm…looks like your are writing your own! Cool!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689083336.878249",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "suF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd wondered about such things myself. You are lot further along than I am, though! The \"ground truth\" representation is still the AST, right? Do you have to do a lot of work to keep the DOM and AST in sync with each other? Are you using something like ProseMirror or…hmm…looks like your are writing your own! Cool!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "The code to do the mapping from html to ast, and vice versa is here <https:\/\/github.com\/coil-language\/coil-lang\/blob\/main\/editor\/src\/ast.coil|https:\/\/github.com\/coil-language\/coil-lang\/blob\/main\/editor\/src\/ast.coil>\n\nThe file is 67 lines of coil so its totally manageable, and I suspect it shouldn't have to grow much larger.\n\nIn terms of keeping them in sync, the data is stored in the dom, so when you edit a node, it will parse it as coil code &amp; turn it back into dom. So I guess ground truth is html. We only turn it back into coil AST when we evaluate it.\n\nKeeping the state in the dom lets us use query selectors for all sorts of things. Here's an example of checking for using undefined variables:\n\nAnd here's the linter in coil\n```\nfn lint-unused-variables {\n  let ids = document.querySelectorAll(\"\n      [data-kind=let] &gt;\n      [data-attr=assign_expr]\n      [data-text]\")\n    ::map(:textContent)\n    ::into(Set[])\n\n  document.querySelectorAll(\"[data-kind=id_lookup] [data-text]\")\n    ::reject(:textContent ids)\n    ::each($.setAttribute[\"data-warn\", \"Use of undefined variable\"])\n}```",
        "files": [
            {
                "id": "F05H9DQ0800",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U03LJBR6THT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6xqRD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The code to do the mapping from html to ast, and vice versa is here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/coil-language\/coil-lang\/blob\/main\/editor\/src\/ast.coil",
                                "text": "https:\/\/github.com\/coil-language\/coil-lang\/blob\/main\/editor\/src\/ast.coil"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe file is 67 lines of coil so its totally manageable, and I suspect it shouldn't have to grow much larger.\n\nIn terms of keeping them in sync, the data is stored in the dom, so when you edit a node, it will parse it as coil code & turn it back into dom. So I guess ground truth is html. We only turn it back into coil AST when we evaluate it.\n\nKeeping the state in the dom lets us use query selectors for all sorts of things. Here's an example of checking for using undefined variables:\n\nAnd here's the linter in coil\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nfn lint-unused-variables {\n  let ids = document.querySelectorAll(\"\n      [data-kind=let] >\n      [data-attr=assign_expr]\n      [data-text]\")\n    ::map(:textContent)\n    ::into(Set[])\n\n  document.querySelectorAll(\"[data-kind=id_lookup] [data-text]\")\n    ::reject(:textContent ids)\n    ::each($.setAttribute[\"data-warn\", \"Use of undefined variable\"])\n}"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1689112303.583349",
        "edited": {
            "user": "U03LJBR6THT",
            "ts": "1689114444.000000"
        },
        "client_msg_id": "8aadb242-3597-44a3-bd79-52d172a900fb",
        "thread_ts": "1689083336.878249",
        "parent_user_id": "U03LJBR6THT",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    }
]