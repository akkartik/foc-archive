[
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1605172819.398700",
        "client_msg_id": "e08c4fd9-e9ee-42ca-987a-cace973cd046",
        "text": "Erlang\/Elixir, too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AmZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Erlang\/Elixir, too."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1605186819.404500",
        "client_msg_id": "5aca824e-180c-4cd4-aec3-e902e45eb47d",
        "text": "Are there any languages\/compilers in existence which perform optimization steps while staying in the high level language, and makes these steps visible to the user?\n\nFor example, instead of compiling from a tail-recursive C function, directly to a loop in assembly, it first optimises to a loop in C, then the translation to ASM is a dumb single-pass compilation.\n\nFor example, this (contrived) tail call elimination is quite hard to follow if you are expecting function calls to appear in the assembly <https:\/\/godbolt.org\/z\/jhecj5>\n\nYou could have a compiler that first said, \"You code is equivalent to this code\" <https:\/\/godbolt.org\/z\/3v6ezj> - which is easier to see why it compiles to those same instructions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1605383420.460600",
        "reply_users": [
            "UBN9AFS0N",
            "UPX3PH28N",
            "U01661S9F34"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1605187174.404700"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1605187224.404900"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1605194047.413700"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1605194219.413900"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1605211967.414200"
            },
            {
                "user": "U01661S9F34",
                "ts": "1605383420.460600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Compiler Explorer - C++ (x86-64 gcc 8.2)",
                "title_link": "https:\/\/godbolt.org\/z\/jhecj5",
                "text": "static int sum_int(int num, int acc) { if (num == 0) return acc; return sum_int(num - 1, acc + num); } int sum(int num) { return sum_int(num, 0); }",
                "fallback": "Compiler Explorer - C++ (x86-64 gcc 8.2)",
                "from_url": "https:\/\/godbolt.org\/z\/jhecj5",
                "service_icon": "https:\/\/godbolt.org\/favicon.ico?v=1",
                "service_name": "godbolt.org",
                "id": 1,
                "original_url": "https:\/\/godbolt.org\/z\/jhecj5"
            },
            {
                "title": "Compiler Explorer - C++ (x86-64 gcc 8.2)",
                "title_link": "https:\/\/godbolt.org\/z\/3v6ezj",
                "text": "int sum(int num) { int r = 0; while(num != 0){ r += num; num--; } return r; }",
                "fallback": "Compiler Explorer - C++ (x86-64 gcc 8.2)",
                "from_url": "https:\/\/godbolt.org\/z\/3v6ezj",
                "service_icon": "https:\/\/godbolt.org\/favicon.ico?v=1",
                "service_name": "godbolt.org",
                "id": 2,
                "original_url": "https:\/\/godbolt.org\/z\/3v6ezj"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B7UJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there any languages\/compilers in existence which perform optimization steps while staying in the high level language, and makes these steps visible to the user?\n\nFor example, instead of compiling from a tail-recursive C function, directly to a loop in assembly, it first optimises to a loop in C, then the translation to ASM is a dumb single-pass compilation.\n\nFor example, this (contrived) tail call elimination is quite hard to follow if you are expecting function calls to appear in the assembly "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/godbolt.org\/z\/jhecj5"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYou could have a compiler that first said, \"You code is equivalent to this code\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/godbolt.org\/z\/3v6ezj"
                            },
                            {
                                "type": "text",
                                "text": " - which is easier to see why it compiles to those same instructions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1605187174.404700",
        "client_msg_id": "b0be16df-4f37-4cba-9a9e-451f70f7cac3",
        "text": "<http:\/\/nanopass.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e9\/O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/nanopass.org\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1605187224.404900",
        "client_msg_id": "66a7f1d7-2323-445f-a53d-a9010c6f488b",
        "text": "<https:\/\/www.youtube.com\/watch?v=Os7FE3J-U5Q>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1M+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=Os7FE3J-U5Q"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1605191179.413500",
        "client_msg_id": "8B879729-A9B0-405A-8E65-B608B686E239",
        "text": "This is very close to what I am imagining: a gradual typechecker that can deal with holes. Sort of a combination between the Typescript compiler and Hazel. Except in addition to being \"gradually typed\", the language would be \"gradually programmed\": the user would initially provide only names with some (loose) type annotations and (later) maybe some implementation details attached to them (which is why I realize my use of the term \"pseudocode\" was probably more misleading than anything). ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tnqw0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is very close to what I am imagining: a gradual typechecker that can deal with holes. Sort of a combination between the Typescript compiler and Hazel. Except in addition to being \"gradually typed\", the language would be \"gradually programmed\": the user would initially provide only names with some (loose) type annotations and (later) maybe some implementation details attached to them (which is why I realize my use of the term \"pseudocode\" was probably more misleading than anything). "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1605194047.413700",
        "client_msg_id": "75e14712-c963-494e-bea4-5ade32657208",
        "text": "GHC has a couple of intermediate forms that the code goes through. <https:\/\/downloads.haskell.org\/~ghc\/latest\/docs\/html\/users_guide\/debugging.html|https:\/\/downloads.haskell.org\/~ghc\/latest\/docs\/html\/users_guide\/debugging.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SUedN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "GHC has a couple of intermediate forms that the code goes through. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/downloads.haskell.org\/~ghc\/latest\/docs\/html\/users_guide\/debugging.html",
                                "text": "https:\/\/downloads.haskell.org\/~ghc\/latest\/docs\/html\/users_guide\/debugging.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1605194219.413900",
        "client_msg_id": "fb81eda7-749e-443a-b5b0-77832c8846b0",
        "text": "Another interesting thing in GHC are rewrite rules: the programmer can specify how to transform expressions in high-level language into equivalent but faster expressions. <https:\/\/downloads.haskell.org\/~ghc\/7.0.3\/docs\/html\/users_guide\/rewrite-rules.html|https:\/\/downloads.haskell.org\/~ghc\/7.0.3\/docs\/html\/users_guide\/rewrite-rules.html> <https:\/\/wiki.haskell.org\/GHC\/Using_rules|https:\/\/wiki.haskell.org\/GHC\/Using_rules>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0wEO=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another interesting thing in GHC are rewrite rules: the programmer can specify how to transform expressions in high-level language into equivalent but faster expressions. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/downloads.haskell.org\/~ghc\/7.0.3\/docs\/html\/users_guide\/rewrite-rules.html",
                                "text": "https:\/\/downloads.haskell.org\/~ghc\/7.0.3\/docs\/html\/users_guide\/rewrite-rules.html"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.haskell.org\/GHC\/Using_rules",
                                "text": "https:\/\/wiki.haskell.org\/GHC\/Using_rules"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1605211967.414200",
        "client_msg_id": "ca8b7b54-1b66-4975-a83f-d1022fdec558",
        "text": "to add more, almost all optimization passes on Erlang\/Elixir are done one a representation called \"core erlang\" which is a low level yet human readabble functional language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605186819.404500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "id51",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to add more, almost all optimization passes on Erlang\/Elixir are done one a representation called \"core erlang\" which is a low level yet human readabble functional language"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPX3PH28N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1605217151.414500",
        "client_msg_id": "c0f40849-a823-4f78-a83e-9f9f8e8008a3",
        "text": "<@UG0EL18H3> You may like something like this\n<https:\/\/github.com\/fulcrologic\/guardrails>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "fulcrologic\/guardrails",
                "title_link": "https:\/\/github.com\/fulcrologic\/guardrails",
                "text": "A middle ground between unguarded functions and enforced spec instrumentation. - fulcrologic\/guardrails",
                "fallback": "GitHub: fulcrologic\/guardrails",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/30102823?s=400&v=4",
                "from_url": "https:\/\/github.com\/fulcrologic\/guardrails",
                "thumb_width": 211,
                "thumb_height": 211,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/fulcrologic\/guardrails"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zN1H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " You may like something like this\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/fulcrologic\/guardrails"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1605220210.414900",
        "client_msg_id": "e5191cd8-fa42-4693-8ede-9b436966b5f9",
        "text": "It allows the use of any level of specification that you want. not-nil? int? positive-int? etc. I'm using it in my current work projects to instrument common functions so I don't get calling semantics wrong.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZHW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It allows the use of any level of specification that you want. not-nil? int? positive-int? etc. I'm using it in my current work projects to instrument common functions so I don't get calling semantics wrong."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1605229741.415100",
        "client_msg_id": "a052d006-769d-4f10-a06d-6bc723ae2509",
        "text": "Sounds like assertions? Or Eiffel-style Design by Contract? <https:\/\/en.wikipedia.org\/wiki\/Design_by_contract|https:\/\/en.wikipedia.org\/wiki\/Design_by_contract>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q21SC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like assertions? Or Eiffel-style Design by Contract? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Design_by_contract",
                                "text": "https:\/\/en.wikipedia.org\/wiki\/Design_by_contract"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1605230026.415300",
        "client_msg_id": "061a5a21-0f14-4ea5-be92-f8e89adc8a62",
        "text": "<@UG0EL18H3> I do something in Mu that I haven't seen very often (but that seems similar to Go within a single package): I allow types to be used before declaration, which makes it easier to reorganize code. The compiler manages holes in its table of type definitions. But it still reports holes as errors after reading all of the input source. Maybe there's further to take it here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605124537.384800",
        "parent_user_id": "U01DUNFS2N4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lv5Vx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " I do something in Mu that I haven't seen very often (but that seems similar to Go within a single package): I allow types to be used before declaration, which makes it easier to reorganize code. The compiler manages holes in its table of type definitions. But it still reports holes as errors after reading all of the input source. Maybe there's further to take it here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    }
]