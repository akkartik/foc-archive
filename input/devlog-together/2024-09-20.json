[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1726823842.580059",
        "client_msg_id": "0bb947dc-647d-45d6-8698-096cc2b4b6cf",
        "text": "The current Obsidian editor does something like that, too.\n\nAs a user, when writing a long essay, I occasionally find this behaviour disconcerting - the appearance on the screen changes so dramatically that it is disconcerting. I feel \"not in control\".\n\nThe older Obsidian editor had two modes (1) writing and (2) reading. That felt clumsy. I guess that I could enable that behaviour with some option, but, I never do.\n\nEmacs md-mode shows a hint of the styling, e.g. `_abc_` is displayed with abc italicized but leaving the underscores visible and taking up space that doesn't appear in the final rendering in a browser.\n\nTraditional WYSIWYG editors like Microsoft Word and Apple Pages make formatting characters invisible, but, show formatting details in a property box off to the side (where you're not looking) while binding formatting operations to certain keystrokes, e.g. command-I for italic.\n\nPlantUML uses two side-by-side Siamese Twin windows - a writing window and a preview window. Our \"Slider\" app in the Handmade Jam (last year?) did that (two windows), too.\n\nA freebie \"user-friendly\" LaTeX editor (LyX) tries to straddle both views at once - like the new Obsidian editor - but, I find myself not using it.\n\nThus far, as a user, I find all of the above choices evil. I tend to favour WYSIWYG, but, wonder if the two-window approach would be better if the tool made the windows entirely separate instead of being bolted together.\n\nI find translucency intriguing (<https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1726773202938769>), but haven't used a word processing editor that contains it.\n\nCurrently, I use the lesser of two evils. I switched from using Obsidian (out-of-human-control formatting) to using Pages (WYSIWYG with a property box at the side). My frequency of swearing hasn't decreased, but the target of swearing has moved.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726811395.937989",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1726773202938769",
                "ts": "1726773202.938769",
                "author_id": "U0378MDUG1Y",
                "channel_id": "C5T9GPWFL",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5T9GPWFL",
                        "ts": "1726773202.938769",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "A7u+p",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "I like this metaphor of translucent software both as a callback to the translucent hardware aesthetic of the 2000s, but also to progressively display the underlying mechanisms of software "
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "if",
                                                    "style": {
                                                        "bold": false,
                                                        "italic": true,
                                                        "strike": false
                                                    }
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " you want to see it.\n\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/x.com\/lesliexin\/status\/1836643348490187183",
                                                    "text": "https:\/\/x.com\/lesliexin\/status\/1836643348490187183"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1726773202938769",
                "fallback": "[September 19th, 2024 12:13 PM] chris.shank.23: I like this metaphor of translucent software both as a callback to the translucent hardware aesthetic of the 2000s, but also to progressively display the underlying mechanisms of software _if_ you want to see it.\n\n<https:\/\/x.com\/lesliexin\/status\/1836643348490187183|https:\/\/x.com\/lesliexin\/status\/1836643348490187183>",
                "text": "I like this metaphor of translucent software both as a callback to the translucent hardware aesthetic of the 2000s, but also to progressively display the underlying mechanisms of software _if_ you want to see it.\n\n<https:\/\/x.com\/lesliexin\/status\/1836643348490187183|https:\/\/x.com\/lesliexin\/status\/1836643348490187183>",
                "author_name": "Christopher Shank",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U0378MDUG1Y",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_48.png",
                "author_subname": "Christopher Shank",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PQTua",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The current Obsidian editor does something like that, too.\n\nAs a user, when writing a long essay, I occasionally find this behaviour disconcerting - the appearance on the screen changes so dramatically that it is disconcerting. I feel \"not in control\".\n\nThe older Obsidian editor had two modes (1) writing and (2) reading. That felt clumsy. I guess that I could enable that behaviour with some option, but, I never do.\n\nEmacs md-mode shows a hint of the styling, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "_abc_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is displayed with abc italicized but leaving the underscores visible and taking up space that doesn't appear in the final rendering in a browser.\n\nTraditional WYSIWYG editors like Microsoft Word and Apple Pages make formatting characters invisible, but, show formatting details in a property box off to the side (where you're not looking) while binding formatting operations to certain keystrokes, e.g. command-I for italic.\n\nPlantUML uses two side-by-side Siamese Twin windows - a writing window and a preview window. Our \"Slider\" app in the Handmade Jam (last year?) did that (two windows), too.\n\nA freebie \"user-friendly\" LaTeX editor (LyX) tries to straddle both views at once - like the new Obsidian editor - but, I find myself not using it.\n\nThus far, as a user, I find all of the above choices evil. I tend to favour WYSIWYG, but, wonder if the two-window approach would be better if the tool made the windows entirely separate instead of being bolted together.\n\nI find translucency intriguing ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1726773202938769"
                            },
                            {
                                "type": "text",
                                "text": "), but haven't used a word processing editor that contains it.\n\nCurrently, I use the lesser of two evils. I switched from using Obsidian (out-of-human-control formatting) to using Pages (WYSIWYG with a property box at the side). My frequency of swearing hasn't decreased, but the target of swearing has moved."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]