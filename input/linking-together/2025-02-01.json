[
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1738432255.847549",
        "client_msg_id": "6445ef06-fd44-4f85-83be-4c6624fe4af9",
        "text": "I am using Erlang as a benchmark since it's the canonical model of decoupling functional components via message passing with per-process message queues, where programs are modeled as choreographed distributed systems",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wuCGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am using Erlang as a benchmark since it's the canonical model of decoupling functional components via message passing with per-process message queues, where programs are modeled as choreographed distributed systems"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1738432568.772069",
        "client_msg_id": "d28a35a8-5b61-4666-a578-9d8929795a03",
        "text": "I'm assuming it's the closest thing we have to the unix model of composition but for the applications domain",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HziRo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm assuming it's the closest thing we have to the unix model of composition but for the applications domain"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1738437336.103019",
        "client_msg_id": "7cbb1f06-dc74-499e-b9fd-f7735a3560e7",
        "text": "While I agree personally with this perspective, teaching NumPy (whose core is APL in Python syntax) for many years lead me to the conclusion that for many people, loops seem more natural. Maybe due to prior exposure to more mainstream languages, I can't say. All my exercises started with \"remember: no loops!\", and yet, most solutions implemented by the students had at least one explicit loop.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DaDBa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While I agree personally with this perspective, teaching NumPy (whose core is APL in Python syntax) for many years lead me to the conclusion that for many people, loops seem more natural. Maybe due to prior exposure to more mainstream languages, I can't say. All my exercises started with \"remember: no loops!\", and yet, most solutions implemented by the students had at least one explicit loop."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738443675.882939",
        "client_msg_id": "55dfd8b1-f563-45bb-9941-8fe24aa65802",
        "text": "When I look at Erlang all I see are it's faults and its relationship to functional programming. Maybe I should look again? Let me know if you have a suggestion of a good overview \/ starting place.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3jSLJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I look at Erlang all I see are it's faults and its relationship to functional programming. Maybe I should look again? Let me know if you have a suggestion of a good overview \/ starting place."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738443785.533899",
        "client_msg_id": "bb41d21e-97b7-42cd-acb7-f304e61f8be6",
        "text": "Message passing can result in a big mess (aka \"state explosion\") when it's laid out flat. What we need is \"GOTO Considered Harmful\" for message passing. [It may be a surprise, but, I have a suggestion. Function-based, synchronous, 1-in, 1-out perspective is insufficient for practical\/useful message-passing style].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1737733719.957079",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wCpA7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Message passing can result in a big mess (aka \"state explosion\") when it's laid out flat. What we need is \"GOTO Considered Harmful\" for message passing. [It may be a surprise, but, I have a suggestion. Function-based, synchronous, 1-in, 1-out perspective is insufficient for practical\/useful message-passing style]."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1738445754.705139",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1738445770.000000"
        },
        "client_msg_id": "6e28e41f-97c3-4142-b127-2e5fac7249ab",
        "text": "FWIW: I endeared myself to my summer employer by taking a few minutes to rewrite Fortran-oriented-APL into APL-oriented-APL. What took 1 weekend to run on an S\/370, took mere minutes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FJ68N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW: I endeared myself to my summer employer by taking a few minutes to rewrite Fortran-oriented-APL into APL-oriented-APL. What took 1 weekend to run on an S\/370, took mere minutes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "This looks really cool, and if you want a more generalized language that is both stack and array based there's UIUA <https:\/\/www.uiua.org\/> Enjoy!\nAside: discovering APL when trying to write a program to implement the Space Groups in architectural computation is what led me down the array programming and then Future of Coding (and then esolangs) wormhole. \n\n(The program is out as a C# based plugin for the visual programming language Grasshopper but hasn't been implemented in APL yet.)",
        "username": "duanerobot",
        "attachments": [
            {
                "from_url": "https:\/\/www.uiua.org\/",
                "service_icon": "https:\/\/www.uiua.org\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.uiua.org\/",
                "fallback": "Uiua",
                "text": "A stack-based array programming language",
                "title": "Uiua",
                "title_link": "https:\/\/www.uiua.org\/",
                "service_name": "uiua.org"
            }
        ],
        "type": "message",
        "ts": "1738446058.918379",
        "edited": {
            "user": "BEYLABLRH",
            "ts": "1738446060.000000"
        },
        "bot_id": "BEYLABLRH",
        "app_id": "A1BKR8Y8J",
        "thread_ts": "1738338222.269849",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oWn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks really cool, and if you want a more generalized language that is both stack and array based there's UIUA "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.uiua.org\/"
                            },
                            {
                                "type": "text",
                                "text": " Enjoy!\nAside: discovering APL when trying to write a program to implement the Space Groups in architectural computation is what led me down the array programming and then Future of Coding (and then esolangs) wormhole. \n\n(The program is out as a C# based plugin for the visual programming language Grasshopper but hasn't been implemented in APL yet.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT",
                    "U02QC0PPER3"
                ],
                "count": 2
            }
        ]
    }
]