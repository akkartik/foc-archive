[
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756050461.259259",
        "client_msg_id": "be7879d8-58af-4895-99b2-00a51da305a0",
        "text": "Wrote a little followup to the post from last week based on the conversation with <@U01MCG14D38> and <@U06BZTE8Q3B>: <https:\/\/worksonmymachine.ai\/p\/safe-is-what-we-call-things-later>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1756443997.424069",
        "reply_users": [
            "UCUSW7WVD",
            "U05GSC0B4A0",
            "UJBAJNFLK",
            "U013ZLJARC7",
            "U01MCG14D38"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1756055631.791289"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1756055976.545219"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1756056120.524119"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1756057452.715379"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1756068122.548279"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1756124031.673639"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1756124152.327629"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1756125161.097609"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1756407786.868009"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1756408772.009719"
            },
            {
                "user": "U05GSC0B4A0",
                "ts": "1756408935.652539"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1756414194.003109"
            },
            {
                "user": "U01MCG14D38",
                "ts": "1756416198.951649"
            },
            {
                "user": "U01MCG14D38",
                "ts": "1756417852.151949"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1756443997.424069"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/$s_!uFO-!,w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3f379140-9bf0-4d61-9d54-94c39a09e5d4_1536x1024.png",
                "image_width": 1200,
                "image_height": 600,
                "image_bytes": 122530,
                "from_url": "https:\/\/worksonmymachine.ai\/p\/safe-is-what-we-call-things-later",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/%24s_!9zQE!,f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F79a62e06-4f9d-4616-a89d-2464f6fa19f4%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/worksonmymachine.ai\/p\/safe-is-what-we-call-things-later",
                "fallback": "Safe Is What We Call Things Later",
                "text": "Some Software Engineering Folklore",
                "title": "Safe Is What We Call Things Later",
                "title_link": "https:\/\/worksonmymachine.ai\/p\/safe-is-what-we-call-things-later",
                "service_name": "worksonmymachine.ai"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XAHDc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wrote a little followup to the post from last week based on the conversation with "
                            },
                            {
                                "type": "user",
                                "user_id": "U01MCG14D38"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U06BZTE8Q3B"
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/worksonmymachine.ai\/p\/safe-is-what-we-call-things-later"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UEZQXJK9V",
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "U06BZTE8Q3B",
                    "U08LU2QRWB0",
                    "U06SS0DHZD1"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1756055631.791289",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1756055685.000000"
        },
        "client_msg_id": "168334cd-9cb5-46d0-ae4e-f1b8f711d3b7",
        "text": "Nice article! Minor quibble:\n\n> You can tell what type of programmer you were taught by based on which part of object-oriented programming they teach first. Did your teacher start with inheritance? Class hierarchies, abstract base classes, the whole \"a Dog is-a Mammal is-an Animal\" taxonomy? Then you were taught by what we call a _formalist_. They showed you the blueprints before they showed you the building.\nI was taught by a formalist, but I just wasn't taught OO for the longest time! I learned programming with functions and records. Fortran then COBOL then Pascal then C in the first couple of years. I don't know, is this uncommon? Perhaps because of this educational trajectory, I tend to associate what you call the formalist camp with Fortran and Algol, and the informalist camp with Lisp. Lisp was the original fun thing that empowered people to try things out without thinking too hard about failure. The different kinds of OO just attached to camps that already existed.\n\n(My prejudice: OO is just not that important. A hype cycle among many, 25 years from anything interesting in either direction.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MHNdu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice article! Minor quibble:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can tell what type of programmer you were taught by based on which part of object-oriented programming they teach first. Did your teacher start with inheritance? Class hierarchies, abstract base classes, the whole \"a Dog is-a Mammal is-an Animal\" taxonomy? Then you were taught by what we call a "
                            },
                            {
                                "type": "text",
                                "text": "formalist",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". They showed you the blueprints before they showed you the building."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI was taught by a formalist, but I just wasn't taught OO for the longest time! I learned programming with functions and records. Fortran then COBOL then Pascal then C in the first couple of years. I don't know, is this uncommon? Perhaps because of this educational trajectory, I tend to associate what you call the formalist camp with Fortran and Algol, and the informalist camp with Lisp. Lisp was the original fun thing that empowered people to try things out without thinking too hard about failure. The different kinds of OO just attached to camps that already existed.\n\n(My prejudice: OO is just not that important. A hype cycle among many, 25 years from anything interesting in either direction.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756055976.545219",
        "client_msg_id": "fb2185da-f240-47f0-9be0-f7bc7619c54b",
        "text": "Huh that's super interesting...you know...I left Lisp out because I'm not super familiar with all the details there (or would have known that Fortran\/Algol would be the Formalist camp languages)...but I guess one way of looking at that was just the previous pendulum swing before where my story started :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SEYff",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Huh that's super interesting...you know...I left Lisp out because I'm not super familiar with all the details there (or would have known that Fortran\/Algol would be the Formalist camp languages)...but I guess one way of looking at that was just the previous pendulum swing before where my story started "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756056120.524119",
        "client_msg_id": "7f238b6e-e457-44d9-8d25-8e615043da39",
        "text": "I wish I knew more of the folklore around Lisp...from what I've picked up...it kind of looks a bit like it's trajectory rhymes a bit with javascript\/typescript...where it comes out as this informalist, fun empowering thing and then changed based on the businesses built up around it into something a bit more formal? At least from a popular usage standpoint?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ga7sc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wish I knew more of the folklore around Lisp...from what I've picked up...it kind of looks a bit like it's trajectory rhymes a bit with javascript\/typescript...where it comes out as this informalist, fun empowering thing and then changed based on the businesses built up around it into something a bit more formal? At least from a popular usage standpoint?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1756057452.715379",
        "client_msg_id": "f6047121-3603-4fe7-8731-d69b746a07f6",
        "text": "Actually there's probably something really interesting to learn about the evolution of lisp over time - I remember <https:\/\/www.randomhacks.net\/2005\/12\/03\/why-ruby-is-an-acceptable-lisp\/|Ruby is an Acceptable LISP> and then at the same time you have Richard Gabriel talking about why LISP failed in <https:\/\/www.dreamsongs.com\/RiseOfWorseIsBetter.html|The Rise of Worse is Better> and Steve Yegge in <https:\/\/gist.github.com\/swerner\/319ac8935105f50bfa9d102b528ca114|Notes from the Mystery Machine Bus> talks about the Clojure community being more on the \"strongly conservative\" end of his spectrum.\n\nI wonder if that's just the trajectory that the highly informal languages that get popular go through?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+gO74",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually there's probably something really interesting to learn about the evolution of lisp over time - I remember "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.randomhacks.net\/2005\/12\/03\/why-ruby-is-an-acceptable-lisp\/",
                                "text": "Ruby is an Acceptable LISP"
                            },
                            {
                                "type": "text",
                                "text": " and then at the same time you have Richard Gabriel talking about why LISP failed in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.dreamsongs.com\/RiseOfWorseIsBetter.html",
                                "text": "The Rise of Worse is Better"
                            },
                            {
                                "type": "text",
                                "text": " and Steve Yegge in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/swerner\/319ac8935105f50bfa9d102b528ca114",
                                "text": "Notes from the Mystery Machine Bus"
                            },
                            {
                                "type": "text",
                                "text": " talks about the Clojure community being more on the \"strongly conservative\" end of his spectrum.\n\nI wonder if that's just the trajectory that the highly informal languages that get popular go through?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1756068122.548279",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1756068354.000000"
        },
        "client_msg_id": "a7f5eb38-f12a-4026-926c-1b6b23cfae87",
        "text": "> it looks like its trajectory rhymes with javascript\/typescript...where it comes out as this informalist, fun empowering thing and then changed based on the businesses built up around it into something a bit more formal? At least from a popular usage standpoint?\n> \nAbsolutely. It's before my time as well, but my impression after immersing in it for a while is that it started out in academia, where people were experimenting with extremely out-there programs. Then the greater interactivity qualitatively changes outcomes, helps you get to programs you would just never be able to write for the first time. (After you've done it the first time, you know something is possible, that this particular place is interesting enough to chew through glass to get to, _then_ you can get there with Fortran or Algol.) Since this sort of research was happening in academia, there was less pressure to chase performance.\n\nAs Lisp went more mainstream it encountered people who need performance. And after the initial, justifiable critiques Lisp performance also became a meme, an easy soft spot to punch it at even from lay programmers who don't actually need performance, who would actually benefit from it if they had been more open-minded. \n\nThe critique\/meme of performance nerdsniped the Lisp community, who all seem to have thought that they could convince narrow-minded people just by being better. And they built amazing compiler tech but I think were never in with a chance. What they did manage to do using the emphasis on compilers was hobble Lisp's late bound nature to some extent. In trying to protect against critiques of Lisp's weaknesses, they squandered some its strengths, the interactivity. It is still there, but it feels less accessible. This is speculation, but I think the first generation of Lisp programmers had an easier time seeing the benefit of interactivity than someone coming to Common Lisp today. Or maybe I'm just one of the brain-damaged ones never quite able to see the light even though I do see the promise of Lisp in other places like macros.\n\nAnyway, going mainstream did change it, though I think the rhetoric back then was about performance vs flexibility. Rigor was a bit of an independent axis. There were rigorous people on both sides; Dijsktra saved his best disses for the functional programming camp, which was trying to do to Lisp some of the same things he was trying to do to Fortran and Algol.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756050461.259259",
        "parent_user_id": "U05GSC0B4A0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/mEH2",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it looks like its trajectory rhymes with javascript\/typescript...where it comes out as this informalist, fun empowering thing and then changed based on the businesses built up around it into something a bit more formal? At least from a popular usage standpoint?\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAbsolutely. It's before my time as well, but my impression after immersing in it for a while is that it started out in academia, where people were experimenting with extremely out-there programs. Then the greater interactivity qualitatively changes outcomes, helps you get to programs you would just never be able to write for the first time. (After you've done it the first time, you know something is possible, that this particular place is interesting enough to chew through glass to get to, "
                            },
                            {
                                "type": "text",
                                "text": "then",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you can get there with Fortran or Algol.) Since this sort of research was happening in academia, there was less pressure to chase performance.\n\nAs Lisp went more mainstream it encountered people who need performance. And after the initial, justifiable critiques Lisp performance also became a meme, an easy soft spot to punch it at even from lay programmers who don't actually need performance, who would actually benefit from it if they had been more open-minded. \n\nThe critique\/meme of performance nerdsniped the Lisp community, who all seem to have thought that they could convince narrow-minded people just by being better. And they built amazing compiler tech but I think were never in with a chance. What they did manage to do using the emphasis on compilers was hobble Lisp's late bound nature to some extent. In trying to protect against critiques of Lisp's weaknesses, they squandered some its strengths, the interactivity. It is still there, but it feels less accessible. This is speculation, but I think the first generation of Lisp programmers had an easier time seeing the benefit of interactivity than someone coming to Common Lisp today. Or maybe I'm just one of the brain-damaged ones never quite able to see the light even though I do see the promise of Lisp in other places like macros.\n\nAnyway, going mainstream did change it, though I think the rhetoric back then was about performance vs flexibility. Rigor was a bit of an independent axis. There were rigorous people on both sides; Dijsktra saved his best disses for the functional programming camp, which was trying to do to Lisp some of the same things he was trying to do to Fortran and Algol."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]