[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1719644706.897259",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1719644767.000000"
        },
        "client_msg_id": "41DA1FD9-F9E4-4A7A-94D1-17256830E592",
        "text": "This makes me wonder: back in those days of APL and Pygmalion, all those programming scientists we look to were educated in many different fields. Computer science wasn’t a thing yet and even when it slowly became one, there just wasn’t that much material around yet. So they were exposed to many other ideas. Think of Alan Kay and how he was influenced by biology which lead to Smalltalk’s object-orientation and message passing.\n\nThat doesn’t happen anymore, because now we’re obviously drowning in computer science material, so much so that fragmented sub-communities in computer science haven’t even heard of each other. Could this be a reason why we no longer see such astonishing and groundbreaking ideas that seem to have been much more likely to appear back then?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1718804841.784739",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ahw\/N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This makes me wonder: back in those days of APL and Pygmalion, all those programming scientists we look to were educated in many different fields. Computer science wasn’t a thing yet and even when it slowly became one, there just wasn’t that much material around yet. So they were exposed to many other ideas. Think of Alan Kay and how he was influenced by biology which lead to Smalltalk’s object-orientation and message passing.\n\nThat doesn’t happen anymore, because now we’re obviously drowning in computer science material, so much so that fragmented sub-communities in computer science haven’t even heard of each other. Could this be a reason why we no longer see such astonishing and groundbreaking ideas that seem to have been much more likely to appear back then?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719647021.745029",
        "client_msg_id": "ec3f2410-b8e2-44a7-9be4-b717e979fdf4",
        "text": "What are your use cases for t2t? Code transformation, data transformation, or both?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719606573.026489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pwx5O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are your use cases for t2t? Code transformation, data transformation, or both?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1719654413.433109",
        "client_msg_id": "7e2ba87a-a3a2-407b-a3b4-c5b732b96402",
        "text": "I’ve used t2t for both, but, emphasize code transformation because I feel that the idea of code transformation is under-utilized. It drastically changes the realm of compiler writing. One can create new languages, but does not need to write whole compilers (simply lean on existing compilers). When one can create new languages in minutes\/hours instead of months, it changes one’s approach to problem solving, e.g. one can create multiple nano-DSLs on a per-project basis (“awk” and REGEX on steroids) instead of building general purpose languages. It makes it reasonable to create S\/W Architecture languages that describe Design Intent instead of Implementation and Production Engineering. To me, Python, Common Lisp, Javascript, Odin, (Haskell, Rust, …), etc., are just assemblers for HHLLs (higher-than-high-level languages). This is like Lisp macros and Functional Programming done by pipelining instead of cramming all of the concepts into a single hair-ball of complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719606573.026489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8yoMm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve used t2t for both, but, emphasize code transformation because I feel that the idea of code transformation is under-utilized. It drastically changes the realm of compiler writing. One can create new languages, but does not need to write whole compilers (simply lean on existing compilers). When one can create new languages in minutes\/hours instead of months, it changes one’s approach to problem solving, e.g. one can create multiple nano-DSLs on a per-project basis (“awk” and REGEX on steroids) instead of building general purpose languages. It makes it reasonable to create S\/W Architecture languages that describe Design Intent instead of Implementation and Production Engineering. To me, Python, Common Lisp, Javascript, Odin, (Haskell, Rust, …), etc., are just assemblers for HHLLs (higher-than-high-level languages). This is like Lisp macros and Functional Programming done by pipelining instead of cramming all of the concepts into a single hair-ball of complexity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719666061.529359",
        "client_msg_id": "7cd65887-91bf-4678-ae13-fd8d6cde2af6",
        "text": "What I find most attractive about t2t for code is that I can look at the intermediate code. The idea of taking many small steps towards the goal rather than a big obscure one sounds tempting (though I haven't ever done multi-step t2t).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719606573.026489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qDThn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What I find most attractive about t2t for code is that I can look at the intermediate code. The idea of taking many small steps towards the goal rather than a big obscure one sounds tempting (though I haven't ever done multi-step t2t)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1719666713.459399",
        "client_msg_id": "080cd784-4764-4d17-a7da-304fe3bdfb5e",
        "text": "There are side-benefits, too. Like, if you own the transpiler, you can easily insert tracing\/debugging\/instrumentation tidbits. Like, \"macros\" for textual languages instead of only for list-based languages (like Lisp, Scheme). A down-side is that, to really do t2t in small steps, you need to emphasize machine-readability (easy to do), but, machine-readable code not= human-readable code (machine-readable code is more verbose and repetitive, but, understandable to humans, albeit boring and TL;DR). FYI at one point, I got up to 15 steps in building a Ceptre-to-Prolog transpiler before I veered off in some other direction. I would be happy to kibitz if anyone wants to try out the stuff I've got - I imagine that it ain't packaged in pristine shrink-wrapped form yet...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719606573.026489",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bIVoi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are side-benefits, too. Like, if you own the transpiler, you can easily insert tracing\/debugging\/instrumentation tidbits. Like, \"macros\" for textual languages instead of only for list-based languages (like Lisp, Scheme). A down-side is that, to really do t2t in small steps, you need to emphasize machine-readability (easy to do), but, machine-readable code not= human-readable code (machine-readable code is more verbose and repetitive, but, understandable to humans, albeit boring and TL;DR). FYI at one point, I got up to 15 steps in building a Ceptre-to-Prolog transpiler before I veered off in some other direction. I would be happy to kibitz if anyone wants to try out the stuff I've got - I imagine that it ain't packaged in pristine shrink-wrapped form yet..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1719699229.379119",
        "client_msg_id": "2ff2d63e-28de-441a-8556-a90315324800",
        "text": "I did a four hour livestream performance art piece where I explore the nature of recursion and infinity and time. And it starts with me doing some crappy live coding\n<https:\/\/youtube.com\/live\/hlsDbXSZ2ko|https:\/\/youtube.com\/live\/hlsDbXSZ2ko>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "image_url": "https:\/\/i.ytimg.com\/vi\/hlsDbXSZ2ko\/maxresdefault.jpg",
                "image_width": 1280,
                "image_height": 720,
                "image_bytes": 29474,
                "from_url": "https:\/\/youtube.com\/live\/hlsDbXSZ2ko",
                "service_icon": "https:\/\/www.youtube.com\/s\/desktop\/28bb7000\/img\/favicon.ico",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/hlsDbXSZ2ko\/maxresdefault.jpg",
                "thumb_width": 1280,
                "thumb_height": 720,
                "id": 1,
                "original_url": "https:\/\/youtube.com\/live\/hlsDbXSZ2ko",
                "fallback": "YouTube: Reaction Reaction",
                "text": "I react LIVE to theo's reaction to my video!here's theo's reaction: <https:\/\/www.youtube.com\/watch?v=2jX84iTXKg8my> original video: <https:\/\/www.youtube.com\/wat>...",
                "title": "Reaction Reaction",
                "title_link": "https:\/\/youtube.com\/live\/hlsDbXSZ2ko",
                "service_name": "YouTube"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yK17U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did a four hour livestream performance art piece where I explore the nature of recursion and infinity and time. And it starts with me doing some crappy live coding\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtube.com\/live\/hlsDbXSZ2ko",
                                "text": "https:\/\/youtube.com\/live\/hlsDbXSZ2ko"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U07B10M57RN",
                    "U079PRQNZQD",
                    "U0123H7JRDM"
                ],
                "count": 3
            },
            {
                "name": "frog",
                "users": [
                    "UBN9AFS0N",
                    "U85HCL7JP",
                    "U075U25QC00",
                    "U079PRQNZQD",
                    "UJBAJNFLK",
                    "U06JCQL6ERJ",
                    "U06SS0DHZD1",
                    "UA14TGLTC"
                ],
                "count": 8
            },
            {
                "name": "heart",
                "users": [
                    "U05SU27S1M2",
                    "UMV4B97GT",
                    "U051DSNTHCJ"
                ],
                "count": 3
            }
        ]
    }
]