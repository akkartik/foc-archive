[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1708934803.130819",
        "client_msg_id": "67e70819-543d-4876-a78b-914c7a739a9e",
        "text": "<@UC2A2ARPT> I have been thinking along similar lines for a while, except that my target audience is not artists but scientists. But I only made progress once I enlarged focus from tools (at whatever meta-level) to the people using the tools, to the activities of those people, and to the knowledge embedded in the tools.\n\nOne conclusion from that perspective is that  the number of meta-levels in tooling should be the same as the number of meta-levels in people's specializations (Conway's law). Which may of course evolve over time. In particular, new technologies\/tools can lead to a new meta-level of specialization. That may or may not be a good thing. Specialization leads to higher complexity in social structures, increasing efficiency but reducing resilience and autonomy. Do artists value more new tools to have fun with more or less than tools that they can control and shape themselves? I don't know.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UgWiR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I have been thinking along similar lines for a while, except that my target audience is not artists but scientists. But I only made progress once I enlarged focus from tools (at whatever meta-level) to the people using the tools, to the activities of those people, and to the knowledge embedded in the tools.\n\nOne conclusion from that perspective is that  the number of meta-levels in tooling should be the same as the number of meta-levels in people's specializations (Conway's law). Which may of course evolve over time. In particular, new technologies\/tools can lead to a new meta-level of specialization. That may or may not be a good thing. Specialization leads to higher complexity in social structures, increasing efficiency but reducing resilience and autonomy. Do artists value more new tools to have fun with more or less than tools that they can control and shape themselves? I don't know."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Progress on the binary operations explorable: step through binary AND, shift left and shift right.",
        "files": [
            {
                "id": "F06LHPQ8F0D",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F06L64TU7K9",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BDW2h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Progress on the binary operations explorable: step through binary AND, shift left and shift right."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1708946757.889959",
        "client_msg_id": "df758fa1-a59c-4b45-b227-1071a49669bd",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "see-it",
                "users": [
                    "U03R0B9U1GD",
                    "U023V63MF6V"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1708948157.362639",
        "client_msg_id": "dd826f24-072a-4604-a41e-c2b8916f9289",
        "text": "I conclude that computers are a new medium and that we need artists to explore new ways to create new things with the new medium. <https:\/\/guitarvydas.github.io\/2024\/02\/11\/Computers-Are-A-New-Medium.html>. Scientists could use the new medium to explore the things they think about, instead of remaining stuck with the old medium. I've seen someone do a very technical thing with Blender that is impractical to do with paper and pencil.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/guitarvydas.github.io\/2024\/02\/11\/Computers-Are-A-New-Medium.html",
                "ts": 1707609600,
                "id": 1,
                "original_url": "https:\/\/guitarvydas.github.io\/2024\/02\/11\/Computers-Are-A-New-Medium.html",
                "fallback": "Computing Simplicity: Computers are a new medium",
                "text": "Various thoughts on making programming simpler, and, breaking programming down into several disciplines: Architecture, Engineering, Implementation. Concurrency is not parallelism and concurrency is not multitasking.",
                "title": "Computers are a new medium",
                "title_link": "https:\/\/guitarvydas.github.io\/2024\/02\/11\/Computers-Are-A-New-Medium.html",
                "service_name": "Computing Simplicity"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6iNK4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I conclude that computers are a new medium and that we need artists to explore new ways to create new things with the new medium. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/guitarvydas.github.io\/2024\/02\/11\/Computers-Are-A-New-Medium.html"
                            },
                            {
                                "type": "text",
                                "text": ". Scientists could use the new medium to explore the things they think about, instead of remaining stuck with the old medium. I've seen someone do a very technical thing with Blender that is impractical to do with paper and pencil."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1708950804.972619",
        "client_msg_id": "ce8b72fd-57a5-4772-af62-e2490ba4b531",
        "text": "&gt; I wonder how this might have gone differently if game design (the discipline concerned with the dynamic \/ interactive part of games) had been the more demanding of technological brute force,\nThe medium as the message, baby!\n\nWould another way to pose this same question be like:\n\n• *Do the tools we use to build new tools influence what we can produce?* \nWhich could be maybe further made into:\n\n• *Do the tools we use to build new tools limit what we can produce?*\nThis has me thinking about the distance (relationships?) between tools, meta tools, and meta meta tools (and onwards).\n\nLike, you can make a jig out of wood while doing wood working (meta tool and tool are very close here)\n\nIt would be difficult to bake yourself a useful oven out of flour, water, and salt, or even a bowl and spoon, really, so, the meta tools for baking are of a totally different sort than the tools used in baking.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hw0K8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder how this might have gone differently if game design (the discipline concerned with the dynamic \/ interactive part of games) had been the more demanding of technological brute force,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe medium as the message, baby!\n\nWould another way to pose this same question be like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Do the tools we use to build new tools influence what we can produce? ",
                                        "style": {
                                            "bold": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich could be maybe further made into:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Do the tools we use to build new tools limit what we can produce?",
                                        "style": {
                                            "bold": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis has me thinking about the distance (relationships?) between tools, meta tools, and meta meta tools (and onwards).\n\nLike, you can make a jig out of wood while doing wood working (meta tool and tool are very close here)\n\nIt would be difficult to bake yourself a useful oven out of flour, water, and salt, or even a bowl and spoon, really, so, the meta tools for baking are of a totally different sort than the tools used in baking."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1708951017.405289",
        "client_msg_id": "7ae1137f-7df5-425f-b6b6-296eda592df9",
        "text": "I run into a flavor of this in my professional life (batman music) where I help devs and designers build accessible interfaces usually out of fundamentally inaccessible tools — there has to be a moment where a leap happens across tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2T2d0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I run into a flavor of this in my professional life (batman music) where I help devs and designers build accessible interfaces usually out of fundamentally inaccessible tools — there has to be a moment where a leap happens across tools."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "&gt; ... It would be difficult to bake yourself a useful oven out of flour, water, and salt, ...\nOne can think of \"baking\" as requiring (1) heat, and, (2) mushy stuff that can be shaped.\n\nIf you incidentally want the baked thing to taste good, you make the mushy stuff out of flour, water and salt.",
        "files": [
            {
                "id": "F06LEJ9CMSA",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CFcw1",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... It would be difficult to bake yourself a useful oven out of flour, water, and salt, ..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOne can think of \"baking\" as requiring (1) heat, and, (2) mushy stuff that can be shaped.\n\nIf you incidentally want the baked thing to taste good, you make the mushy stuff out of flour, water and salt."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1708953449.324979",
        "client_msg_id": "0da2c9fa-c4a9-4c1d-b6c4-f8463271fab4",
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1708953529.562089",
        "client_msg_id": "e507ef05-efca-4b0f-a0b4-eb0ed188dc69",
        "text": "(I figured someone would point this out, but I struggled to come up with another example of distance)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G+MAP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I figured someone would point this out, but I struggled to come up with another example of distance)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1708955026.883409",
        "client_msg_id": "f0cab5be-53ab-4ad4-85c8-862493959a88",
        "text": "&gt; **Do the tools we use to build new tools influence what we can produce?**\nYes.\n\n&gt; • **Do the tools we use to build new tools limit what we can produce?**\nYes, Yes, Yes.\n\nIt seems to me that it is difficult to do FoC until you upgrade PoC to PoC (Past of C, Present of C, resp.). Note that the ground rules for Present-of-C are now _very_ different than they were when Past-of-C was first invented, e.g. we don't need time-sharing due to `$$$` and we don't need to worry about about heaps\/GC\/malloc\/memory-sharing due to `$$$` and we are allowed to overlap cells (e.g. \"characters\" and beyond). Old-time notation uses the simplifying assumption of tossing out _time_ to allow equations to be written down on papyrus. The new medium allows us to add back \"t\" and \"z\" and to explore phenomena that are inconvenient when stripped down to written equations on papyrus. We are indoctrinated - by 2000+ years of using papyrus - to think that we must use only papyrus and writing utensils, thus, we find it difficult to invent new ways to use this new medium.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "szEdr",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*"
                            },
                            {
                                "type": "text",
                                "text": "Do the tools we use to build new tools influence what we can produce?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "*"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "*"
                                    },
                                    {
                                        "type": "text",
                                        "text": "Do the tools we use to build new tools limit what we can produce?",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "*"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes, Yes, Yes.\n\nIt seems to me that it is difficult to do FoC until you upgrade PoC to PoC (Past of C, Present of C, resp.). Note that the ground rules for Present-of-C are now "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " different than they were when Past-of-C was first invented, e.g. we don't need time-sharing due to "
                            },
                            {
                                "type": "text",
                                "text": "$$$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and we don't need to worry about about heaps\/GC\/malloc\/memory-sharing due to "
                            },
                            {
                                "type": "text",
                                "text": "$$$",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and we are allowed to overlap cells (e.g. \"characters\" and beyond). Old-time notation uses the simplifying assumption of tossing out "
                            },
                            {
                                "type": "text",
                                "text": "time",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to allow equations to be written down on papyrus. The new medium allows us to add back \"t\" and \"z\" and to explore phenomena that are inconvenient when stripped down to written equations on papyrus. We are indoctrinated - by 2000+ years of using papyrus - to think that we must use only papyrus and writing utensils, thus, we find it difficult to invent new ways to use this new medium."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": ":steam_locomotive: All onboard the shift operation train (showing intermediate results during stepping)",
        "files": [
            {
                "id": "F06MA6PM848",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UBN9AFS0N",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qangk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "steam_locomotive",
                                "unicode": "1f682"
                            },
                            {
                                "type": "text",
                                "text": " All onboard the shift operation train (showing intermediate results during stepping)"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1708955380.237999",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1708955499.000000"
        },
        "client_msg_id": "7007f4c6-ef11-47c7-ac85-bda6d4910af7",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMV4B97GT"
                ],
                "count": 2
            },
            {
                "name": "see-it",
                "users": [
                    "U03R0B9U1GD",
                    "U023V63MF6V"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1708955618.202579",
        "client_msg_id": "09435a51-cfea-499e-a53f-b4aa0a589c0a",
        "text": "Moldable development is coming to Common Lisp: <https:\/\/codeberg.org\/khinsen\/clog-inspector>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708955618.202579",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1718893903.640679",
        "reply_users": [
            "UJBAJNFLK",
            "UE1JQM9HQ"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1711100979.557299"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1717311201.259379"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1717311290.608619"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1717311321.142549"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1717361494.554839"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1718893903.640679"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/codeberg.org\/avatars\/81e0f0f0f0b27d785c72d168dcbf6f17",
                "image_width": 290,
                "image_height": 290,
                "image_bytes": 1329,
                "from_url": "https:\/\/codeberg.org\/khinsen\/clog-inspector",
                "service_icon": "https:\/\/codeberg.org\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/codeberg.org\/khinsen\/clog-inspector",
                "fallback": "Codeberg.org: clog-inspector",
                "text": "A moldable Common Lisp object inspector based on CLOG",
                "title": "clog-inspector",
                "title_link": "https:\/\/codeberg.org\/khinsen\/clog-inspector",
                "service_name": "Codeberg.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c4Sbj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Moldable development is coming to Common Lisp: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codeberg.org\/khinsen\/clog-inspector"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "flying_saucer",
                "users": [
                    "UBN9AFS0N",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7",
                    "U0123H7JRDM",
                    "UML4ZEKDK"
                ],
                "count": 3
            },
            {
                "name": "alien",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UFEQUBNNT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1708974162.251379",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1708974341.000000"
        },
        "client_msg_id": "b24c8910-078f-4671-8852-2b436e6fb633",
        "text": "I think one of the things that holds back these non-coding-but-capable-of-expressing-computations-typically-expressed-by-coding tools is that we almost always create them to be high level. We don't start with primitives of the system and design a system around that and then figure out  a way to work our way up. Instead, we start from the beginning with all the capabilities of modern computers. Hosted on top of high level systems (more often than not today, in the browser).\n\nFocusing on this high level setup first (flash is a great example of such a tool), creates a usable system faster, but fails to have the properties that generalize in the way that programming languages have. I don't think this is an accidental property. It took us a long time of working with lower level language to figure out good abstractions for the higher level ones. To figure out how they should be implemented, to figure out idioms, etc. We are still in the process of getting better at this.\n\nI think, if we began at the lower level, we'd have a greater chance of over time. slowly, discovering those things. I think there is this temptation that because we want to get away from coding and all that we bring with it, we also want to get rid of the details of the computer. But I think that's a mistake. We don't even know what the assembly of coding-but-not is. We don't know how to go from a higher-level coding-but-not representation, into a lower level coding-but-not representation. So we are stuck relying on code when we want to make these systems fast, or interoperate with existing things.\n\nImagine a system that is coding-but-not, but can interop with the unixy-C world we have today. That can compete with C on speed. That can interact with the computer in any way coding-that-is-code can. Now we can start making the tools for others to make tools without needing to leave our ecosystem of coding-but-not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708920344.786469",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wk5kn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think one of the things that holds back these non-coding-but-capable-of-expressing-computations-typically-expressed-by-coding tools is that we almost always create them to be high level. We don't start with primitives of the system and design a system around that and then figure out  a way to work our way up. Instead, we start from the beginning with all the capabilities of modern computers. Hosted on top of high level systems (more often than not today, in the browser).\n\nFocusing on this high level setup first (flash is a great example of such a tool), creates a usable system faster, but fails to have the properties that generalize in the way that programming languages have. I don't think this is an accidental property. It took us a long time of working with lower level language to figure out good abstractions for the higher level ones. To figure out how they should be implemented, to figure out idioms, etc. We are still in the process of getting better at this.\n\nI think, if we began at the lower level, we'd have a greater chance of over time. slowly, discovering those things. I think there is this temptation that because we want to get away from coding and all that we bring with it, we also want to get rid of the details of the computer. But I think that's a mistake. We don't even know what the assembly of coding-but-not is. We don't know how to go from a higher-level coding-but-not representation, into a lower level coding-but-not representation. So we are stuck relying on code when we want to make these systems fast, or interoperate with existing things.\n\nImagine a system that is coding-but-not, but can interop with the unixy-C world we have today. That can compete with C on speed. That can interact with the computer in any way coding-that-is-code can. Now we can start making the tools for others to make tools without needing to leave our ecosystem of coding-but-not."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U03CEGR3HSL",
                    "UML4ZEKDK",
                    "U0123H7JRDM"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1708992943.623279",
        "client_msg_id": "a73e0c25-392a-4e78-b20c-cbc0be07bcad",
        "text": "Hi everyone,\nI have a big question about a programming-related problem I only partly understand, hoping not to get an answer, but rather pointers to where I should be looking. Here it goes.\n\nFor the past two years I have been working on SplootCode wanting to make code more accessible to non-engineers. The initial product (as is today) is basically a structured editor with drag and drop a-la-Scratch capabilities, and some other things to help non-engineers see and understand what the code is doing. You can see an example tiny program <https:\/\/app.splootcode.io\/shared\/mattia\/for-loops-example\/EPdLhGOx7p1SbPDIDisgbfpV|here>.\n\nDuring the interviews I conducted with several people, I bumped into a non-native English speaker who revealed their frustrations with having to learn English in order to code.\n\nAfter speaking to another dozen non-native speakers - some of whom teach programming in non-English speaking countries using their native language - I figured that this is a really big problem for a lot people, and I want to solve it.\n\nSince I have been deep into SplootCode for over two years, I am sure that I am suffering from sunk cost fallacy like crazy, thus the reason I am asking the question here is to get some outside perspective.\n---\nSo, to solve the problem for people, I am wanting to address the nested problem that – AFAIK – the vast majority of programming languages, with the exclusion of any purely symbolic ones, are effectively a subset of the English language.\n\nMy first train of thoughts was: “perfect use case for building on top of SplootCode! The structured editing part means half the work is done already since I can label keywords however I want”.\nFollowed by: “but wait! how can this be actually solved so that anyone can use their own tool of choice, which is what people will need?”\n---\nThus my question is:\nI believe that the proper solution is to add a _layer_* to code – call the `tongue` layer – that defines the _label_** for each `tongue`.\n*What do I need to understand thoroughly, in order to build such a solution? Who should I speak to?*\n\n*_layer_ intended as a standalone structure that doesn’t interact with anything but the semantic label of any literal, variable, operator, or function (or any other atomic structure that may exist within a programming language)\n\n**_label_ intended as the human-readable part of an atomic structure of a program. For example, the `if` in the structure `if () {}` in javascript, would be `se` in Italian, and `もし` in Japanese.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b4428844860e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-04\/7821406731430_b4428844860ebf0c4033_72.jpg",
            "first_name": "Mattia",
            "real_name": "Mattia Fregola",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mattia.fregola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "reply_count": 10,
        "reply_users_count": 6,
        "latest_reply": "1709067566.352219",
        "reply_users": [
            "UCUSW7WVD",
            "UGWUJUZHT",
            "UMV4B97GT",
            "U04E5QAD6DD",
            "UEP7RL0HX",
            "UBN9AFS0N"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1708998758.312289"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1709000096.346619"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1709000418.776099"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1709000882.534809"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1709001752.032089"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1709014343.854129"
            },
            {
                "user": "UEP7RL0HX",
                "ts": "1709021653.916759"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1709023849.326489"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1709025853.428819"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1709067566.352219"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xabwf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone,\nI have a big question about a programming-related problem I only partly understand, hoping not to get an answer, but rather pointers to where I should be looking. Here it goes.\n\nFor the past two years I have been working on SplootCode wanting to make code more accessible to non-engineers. The initial product (as is today) is basically a structured editor with drag and drop a-la-Scratch capabilities, and some other things to help non-engineers see and understand what the code is doing. You can see an example tiny program "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/app.splootcode.io\/shared\/mattia\/for-loops-example\/EPdLhGOx7p1SbPDIDisgbfpV",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nDuring the interviews I conducted with several people, I bumped into a non-native English speaker who revealed their frustrations with having to learn English in order to code.\n\nAfter speaking to another dozen non-native speakers - some of whom teach programming in non-English speaking countries using their native language - I figured that this is a really big problem for a lot people, and I want to solve it.\n\nSince I have been deep into SplootCode for over two years, I am sure that I am suffering from sunk cost fallacy like crazy, thus the reason I am asking the question here is to get some outside perspective.\n---\nSo, to solve the problem for people, I am wanting to address the nested problem that – AFAIK – the vast majority of programming languages, with the exclusion of any purely symbolic ones, are effectively a subset of the English language.\n\nMy first train of thoughts was: “perfect use case for building on top of SplootCode! The structured editing part means half the work is done already since I can label keywords however I want”.\nFollowed by: “but wait! how can this be actually solved so that anyone can use their own tool of choice, which is what people will need?”\n---\nThus my question is:\nI believe that the proper solution is to add a "
                            },
                            {
                                "type": "text",
                                "text": "layer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* to code – call the "
                            },
                            {
                                "type": "text",
                                "text": "tongue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " layer – that defines the "
                            },
                            {
                                "type": "text",
                                "text": "label",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "** for each "
                            },
                            {
                                "type": "text",
                                "text": "tongue",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n"
                            },
                            {
                                "type": "text",
                                "text": "What do I need to understand thoroughly, in order to build such a solution? Who should I speak to?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n*"
                            },
                            {
                                "type": "text",
                                "text": "layer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " intended as a standalone structure that doesn’t interact with anything but the semantic label of any literal, variable, operator, or function (or any other atomic structure that may exist within a programming language)\n\n**"
                            },
                            {
                                "type": "text",
                                "text": "label",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " intended as the human-readable part of an atomic structure of a program. For example, the "
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the structure "
                            },
                            {
                                "type": "text",
                                "text": "if () {}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in javascript, would be "
                            },
                            {
                                "type": "text",
                                "text": "se",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Italian, and "
                            },
                            {
                                "type": "text",
                                "text": "もし",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in Japanese."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1708998758.312289",
        "client_msg_id": "9b3ccf78-c1d4-4a87-adb9-04f5d34c7420",
        "text": "One thought: maybe you need to understand the internalization process. As I understand it, there are libraries that let you wrap all string literals in your program in an annotation and then look up the literal in a language-specific list of translations.\n\nSo one lens here is that you \"just\" need to perform this internationalization process to a compiler codebase..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jia+w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thought: maybe you need to understand the internalization process. As I understand it, there are libraries that let you wrap all string literals in your program in an annotation and then look up the literal in a language-specific list of translations.\n\nSo one lens here is that you \"just\" need to perform this internationalization process to a compiler codebase.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1709000096.346619",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1709000279.000000"
        },
        "client_msg_id": "28871bb4-473d-40b8-ae89-855231d76e23",
        "text": "It sounds - from my very biased perspective - like you are describing text-to-text translation. If so, then you want to dig into technologies that make text-to-text-transformation easy, e.g. PEG parsing, LLMs (large language models \"AI\"), macros (you can learn about macros in Lisp, but lisp uses Lists instead of Text for macros). For PEG, I would suggest OhmJS (pdubroy on ohmland discord <https:\/\/discord.gg\/7FqKRZdv>, and <http:\/\/ohmjs.org|ohmjs.org>) and LLMs (elimisteve on ohmland and programming simplicity discords (<https:\/\/discord.gg\/ZEy2ajN3XQ>)) (and, TXL (Source Transformation Language by James Cordy) <http:\/\/txl.ca|txl.ca>) and the fields of Program Transformation and meta-programming. I have been dabbling in this sort of stuff and would be happy to elucidate (including a DSL for t2t for use alongside OhmJS). (REGEX and CFGs look tantalizingly close, but aren't as good at this as Ohm and PEG and LLMs). Note that OhmJS can do more than just t2t transformation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "attachments": [
            {
                "from_url": "https:\/\/discord.gg\/7FqKRZdv",
                "id": 1,
                "original_url": "https:\/\/discord.gg\/7FqKRZdv",
                "fallback": "Discord: Join the Ohm Land Discord Server!",
                "text": "Check out the Ohm Land community on Discord - hang out with 142 other members and enjoy free voice and text chat.",
                "title": "Join the Ohm Land Discord Server!",
                "title_link": "https:\/\/discord.gg\/7FqKRZdv",
                "service_name": "Discord"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eQjLc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds - from my very biased perspective - like you are describing text-to-text translation. If so, then you want to dig into technologies that make text-to-text-transformation easy, e.g. PEG parsing, LLMs (large language models \"AI\"), macros (you can learn about macros in Lisp, but lisp uses Lists instead of Text for macros). For PEG, I would suggest OhmJS (pdubroy on ohmland discord "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.gg\/7FqKRZdv"
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ohmjs.org",
                                "text": "ohmjs.org"
                            },
                            {
                                "type": "text",
                                "text": ") and LLMs (elimisteve on ohmland and programming simplicity discords ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.gg\/ZEy2ajN3XQ"
                            },
                            {
                                "type": "text",
                                "text": ")) (and, TXL (Source Transformation Language by James Cordy) "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/txl.ca",
                                "text": "txl.ca"
                            },
                            {
                                "type": "text",
                                "text": ") and the fields of Program Transformation and meta-programming. I have been dabbling in this sort of stuff and would be happy to elucidate (including a DSL for t2t for use alongside OhmJS). (REGEX and CFGs look tantalizingly close, but aren't as good at this as Ohm and PEG and LLMs). Note that OhmJS can do more than just t2t transformation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709000418.776099",
        "client_msg_id": "45252daf-486e-48b8-8ad0-af9fd57a722e",
        "text": "Thanks <@UCUSW7WVD>, sounds inline with it, I’ll deep dive!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b4428844860e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-04\/7821406731430_b4428844860ebf0c4033_72.jpg",
            "first_name": "Mattia",
            "real_name": "Mattia Fregola",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mattia.fregola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L6Nji",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ", sounds inline with it, I’ll deep dive!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709000882.534809",
        "client_msg_id": "4c802c63-7787-4190-8d8d-a1b088efae22",
        "text": "Indeed <@UGWUJUZHT> , I will definitely leverage LLMs for the text-to-text translation part.\nThanks for the links on the transformations too, I’ll look dive into Ohm and read up on PEG parsing as well!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b4428844860e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-04\/7821406731430_b4428844860ebf0c4033_72.jpg",
            "first_name": "Mattia",
            "real_name": "Mattia Fregola",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mattia.fregola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Crz\/9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " , I will definitely leverage LLMs for the text-to-text translation part.\nThanks for the links on the transformations too, I’ll look dive into Ohm and read up on PEG parsing as well!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1709001752.032089",
        "client_msg_id": "4f149474-f907-4c9f-8174-edda7f0eedf2",
        "text": "You might be interested in this thread: <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1706212534780349>\n\nThe language there has a graphical symbolic representation and a text representation that, as far as I can tell, is not language-specific.\n\nI think <https:\/\/github.com\/wordplaydev\/wordplay\/blob\/main\/LANGUAGE.md|WordPlay> is also designed to be natural-language-agnostic?\n\nNone of that is probably all that useful to you for your own language except for inspiration. :-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zNvnr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might be interested in this thread: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1706212534780349"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe language there has a graphical symbolic representation and a text representation that, as far as I can tell, is not language-specific.\n\nI think "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/wordplaydev\/wordplay\/blob\/main\/LANGUAGE.md",
                                "text": "WordPlay"
                            },
                            {
                                "type": "text",
                                "text": " is also designed to be natural-language-agnostic?\n\nNone of that is probably all that useful to you for your own language except for inspiration. :-)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMV4B97GT",
        "type": "message",
        "ts": "1709014343.854129",
        "client_msg_id": "25505BC9-604C-48D4-8D30-2591C88917CE",
        "text": "Thank you <@U04E5QAD6DD> , inspiration is always awesome :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b4428844860e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-04\/7821406731430_b4428844860ebf0c4033_72.jpg",
            "first_name": "Mattia",
            "real_name": "Mattia Fregola",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mattia.fregola",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1708992943.623279",
        "parent_user_id": "UMV4B97GT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iV0+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank"
                            },
                            {
                                "type": "text",
                                "text": " you "
                            },
                            {
                                "type": "user",
                                "user_id": "U04E5QAD6DD"
                            },
                            {
                                "type": "text",
                                "text": " , inspiration is always awesome :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    }
]