[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721377717.385419",
        "client_msg_id": "ee41f3c3-1e60-4ae0-9cc8-7c1670181662",
        "text": "That's indeed the main lesson learned (for me) from a few years in \"moldable development\" land. Support for situated development tools is much more valuable than generic development tools. The tools are better adapted to the specific task, and perhaps even more importantly, the user understands the situated tool perfectly well.\n\nI suspect that all this remains true if you cross out \"development\" - it should apply to any software tool. My near-term goal is \"moldable data science\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317585.631879",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W43sY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's indeed the main lesson learned (for me) from a few years in \"moldable development\" land. Support for situated development tools is much more valuable than generic development tools. The tools are better adapted to the specific task, and perhaps even more importantly, the user understands the situated tool perfectly well.\n\nI suspect that all this remains true if you cross out \"development\" - it should apply to any software tool. My near-term goal is \"moldable data science\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UE1JQM9HQ",
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721378377.553849",
        "client_msg_id": "8a0f5b60-0ed7-4c1e-9fa0-b98a2d263489",
        "text": "If you look at complex social systems such as tax rules, big changes happen only after some major breakdown: after wars, revolutions, etc. Inversely, accumulated unsolved problems are the cause of such major breakdowns. The interesting fundamental question thus is if complex systems can undergo major change in an evolutionary rather then disruptive way. I don't know the answer.\n\nIn a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\n\nAn underappreciated concept in this space is the narrow waist (<https:\/\/www.oilshell.org\/cross-ref.html?tag=narrow-waist#narrow-waist>): a system layer that permits independent evolution both above and below it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BNYC6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you look at complex social systems such as tax rules, big changes happen only after some major breakdown: after wars, revolutions, etc. Inversely, accumulated unsolved problems are the cause of such major breakdowns. The interesting fundamental question thus is if complex systems can undergo major change in an evolutionary rather then disruptive way. I don't know the answer.\n\nIn a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\n\nAn underappreciated concept in this space is the narrow waist ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.oilshell.org\/cross-ref.html?tag=narrow-waist#narrow-waist"
                            },
                            {
                                "type": "text",
                                "text": "): a system layer that permits independent evolution both above and below it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U03U0SCU5LH",
        "type": "message",
        "ts": "1721381519.804989",
        "client_msg_id": "f5acd5c6-f02a-43c8-973e-89351605e463",
        "text": "Isn't the \"narrow waist\" part of the problem and not the solution? One could argue that CPU &lt;-&gt; GPU divide is a narrow waist. Both are developed independently, but at this point we're really putting a smaller supercomputer into a bigger computer.\nThe communication between the two is a big source of complexity in todays compute.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf6784b7d6d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df6784b7d6d97fb67dec89320cc88a84.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0007-72.png",
            "first_name": "Dany",
            "real_name": "Dany",
            "display_name": "Dany",
            "team": "T5TCAFTA9",
            "name": "bitteldany",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tQt4p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't the \"narrow waist\" part of the problem and not the solution? One could argue that CPU <-> GPU divide is a narrow waist. Both are developed independently, but at this point we're really putting a smaller supercomputer into a bigger computer.\nThe communication between the two is a big source of complexity in todays compute."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721383237.747189",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1721383299.000000"
        },
        "client_msg_id": "A3AC05CD-1C92-43BB-AF26-F8BEDB2A1205",
        "text": "I have also been struggling with the “narrow waist” concept. I’m not entirely sure how to properly distinguish it from or how it interacts with layer architectures (which seem to be the primary example) and separation between interface and implementation.\n\nThere is something important all of these point at, which has to do with stabilizing one part while allowing another to change. But the distinction isn’t as clear as they all make it look.\n\nThe description I like most so far is the one Herbert Simon makes in _The Architecture of Complexity_, where he talks about “nearly decomposable systems”. That seems to capture the not quite clear boundary between what can change and what is stable best. \n\nAnd I have a suspicion that there is no clear boundary that can be drawn, and that the subtle interactions between different scales, what makes Simon call it _*nearly*_ decomposable, are actually not a bug but a feature.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6uCbe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have also been struggling with the “narrow waist” concept. I’m not entirely sure how to properly distinguish it from or how it interacts with layer architectures (which seem to be the primary example) and separation between interface and implementation.\n\nThere is something important all of these point at, which has to do with stabilizing one part while allowing another to change. But the distinction isn’t as clear as they all make it look.\n\nThe description I like most so far is the one Herbert Simon makes in "
                            },
                            {
                                "type": "text",
                                "text": "The Architecture of Complexity",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where he talks about “nearly decomposable systems”. That seems to capture the not quite clear boundary between what can change and what is stable best. \n\nAnd I have a suspicion that there is no clear boundary that can be drawn, and that the subtle interactions between different scales, what makes Simon call it "
                            },
                            {
                                "type": "text",
                                "text": "nearly",
                                "style": {
                                    "bold": true,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " decomposable, are actually not a bug but a feature."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Yeah this is basically notebook programming. There are two levels to what you want to diagram too. 1. the program specification (e.g. the source or configuration) or 2. The runtime state. Text source code is just a narrow view of 1. I think that can be enhanced with diagrams across for both 1 and 2. <https:\/\/observablehq.com\/plot\/> is incredibly flexible for quite a huge range of visualizations (grammar of graphics). I use it for schematic like diagrams, but obviously it also does more recognisable mathy charts too.",
        "files": [
            {
                "id": "F07D6E4LGQ2",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U02E4DAQGSZ",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G3ff2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah this is basically notebook programming. There are two levels to what you want to diagram too. 1. the program specification (e.g. the source or configuration) or 2. The runtime state. Text source code is just a narrow view of 1. I think that can be enhanced with diagrams across for both 1 and 2. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/plot\/"
                            },
                            {
                                "type": "text",
                                "text": " is incredibly flexible for quite a huge range of visualizations (grammar of graphics). I use it for schematic like diagrams, but obviously it also does more recognisable mathy charts too."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721384586.715049",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1721384626.000000"
        },
        "client_msg_id": "05db7533-7693-442b-96d4-361ca69d38f6",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721389030.240499",
        "client_msg_id": "b9c28ad9-eda0-49e8-89a5-b6aad1a3ae52",
        "text": "&gt; stabilizing one part while allowing another to change\nQuestion: Is the \/bin\/sh pipe operator `|` a (restricted) form of narrow waist?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CGQ+Q",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "stabilizing one part while allowing another to change"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nQuestion: Is the \/bin\/sh pipe operator "
                            },
                            {
                                "type": "text",
                                "text": "|",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a (restricted) form of narrow waist?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U02E4DAQGSZ> This isn’t “basically notebook programming” if that’s taken in the sense of notebook programming today, right? Notebooks today can’t use graphics to define part of a program, only to visualize data. Here’s another screenshot from my paper I linked above.",
        "files": [
            {
                "id": "F07D56L4XJR",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tkV++",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " This isn’t “basically notebook programming” if that’s taken in the sense of notebook programming today, right? Notebooks today can’t use graphics to define part of a program, only to visualize data. Here’s another screenshot from my paper I linked above."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721403667.690699",
        "client_msg_id": "ac273e0d-4a66-446f-812a-8a70a13e4d90",
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721403731.829909",
        "client_msg_id": "ee7700cd-eade-4f3f-91b0-d11c356a72d0",
        "text": "I begin to wonder whether my paper is relevant to this discussion and could perhaps provide a clarifying framework.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXMZ8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I begin to wonder whether my paper is relevant to this discussion and could perhaps provide a clarifying framework."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UML4ZEKDK",
                    "UC2A2ARPT",
                    "U05UK5T7LPP"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721405887.139429",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1721406410.000000"
        },
        "client_msg_id": "e997b778-a767-43eb-b271-312458637915",
        "text": "notebooks are definitely capable of reading external data and making dynamic, executable decisions based on it. The also have a ton of affordances for representing data visually, and for implementing UIs inline. So together all those things seem like level 3 to me, but some assembly is required. The browser itself has <https:\/\/observablehq.com\/@tomlarkworthy\/local-storage-view|local storage >and the env has internet access so I think persistence is a red herring if you consider the system as a whole.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eVG+l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "notebooks are definitely capable of reading external data and making dynamic, executable decisions based on it. The also have a ton of affordances for representing data visually, and for implementing UIs inline. So together all those things seem like level 3 to me, but some assembly is required. The browser itself has "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/local-storage-view",
                                "text": "local storage "
                            },
                            {
                                "type": "text",
                                "text": "and the env has internet access so I think persistence is a red herring if you consider the system as a whole."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1721406666.662579",
        "client_msg_id": "ce0d0ea0-f2b2-4b37-9bc3-4c0bd327e71c",
        "text": "What <@UCYF51KT2> is arguing for in level 3, and what <@UBKNXPBAB> seems to be referring to, is the desire for such tools that _don't_ require \"some assembly\". The amount of assembly needed to go from notebook to programming-with-diagrams is about the same amount of assembly to go from smalltalk to programming-with-diagrams or the web platform to programming-with-diagrams. So while notebooks certainly are nice environments to work in, and while it would be nice if notebooks offered p-w-d out of the box, I don't think it's true that \"this is basically notebook programming\", unless it's also true that this is basically smalltalk or basically javascript.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzRf8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " is arguing for in level 3, and what "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " seems to be referring to, is the desire for such tools that "
                            },
                            {
                                "type": "text",
                                "text": "don't",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " require \"some assembly\". The amount of assembly needed to go from notebook to programming-with-diagrams is about the same amount of assembly to go from smalltalk to programming-with-diagrams or the web platform to programming-with-diagrams. So while notebooks certainly are nice environments to work in, and while it would be nice if notebooks offered p-w-d out of the box, I don't think it's true that \"this is basically notebook programming\", unless it's also true that this is basically smalltalk or basically javascript."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721409850.042859",
        "client_msg_id": "b64a5c24-a421-4513-9618-35eed5168300",
        "text": "I appreciate the reminder to go reread <@UBKNXPBAB>'s paper. Very useful framework and I'd completely forgotten about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XH8GS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I appreciate the reminder to go reread "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": "'s paper. Very useful framework and I'd completely forgotten about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            },
            {
                "name": "pray",
                "users": [
                    "UBKNXPBAB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721410128.690499",
        "client_msg_id": "f8930a78-440a-4240-9d0f-dbdf88cb6d99",
        "text": "&gt; In a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems.\nIndeed. Any foc style work or ideation we do should completely ignore the status quo for this reason. I feel if you think about product-market-fit you've already lost. Depends on your goals of course, I'm taking about research.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2F+xh",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a well-delimited technology context, starting from scratch is a realistic approach in a research setting, but not in real-life applications. Research projects of this kind can then influence the evolution of mainstream tech. That looks like a reasonable way to evolve rather than disrupt working systems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIndeed. Any foc style work or ideation we do should completely ignore the status quo for this reason. I feel if you think about product-market-fit you've already lost. Depends on your goals of course, I'm taking about research."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721413560.288119",
        "client_msg_id": "d9290f00-874d-4737-9ac1-cf4622e5ba02",
        "text": "With great timing, somebody just showed me <https:\/\/holzer.online\/articles\/calculate-contrast-ratio\/index.html> which manages in a very narrow way to be both live and rich (if I understand correctly).\n\nStill not composable, though..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/holzer.online\/articles\/calculate-contrast-ratio\/index.html",
                "id": 1,
                "original_url": "https:\/\/holzer.online\/articles\/calculate-contrast-ratio\/index.html",
                "fallback": "How to calculate the contrast ratio of two colors - Fabian's public notepad",
                "text": "Thoughts on topics like software engineering, web development, blogging and the web in general",
                "title": "How to calculate the contrast ratio of two colors - Fabian's public notepad",
                "title_link": "https:\/\/holzer.online\/articles\/calculate-contrast-ratio\/index.html",
                "service_name": "holzer.online"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lXFr3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With great timing, somebody just showed me "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/holzer.online\/articles\/calculate-contrast-ratio\/index.html"
                            },
                            {
                                "type": "text",
                                "text": " which manages in a very narrow way to be both live and rich (if I understand correctly).\n\nStill not composable, though.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721416401.970359",
        "client_msg_id": "ca144f6a-3dfe-4239-98d7-037594129b0b",
        "text": "<@U03U0SCU5LH> I wouldn't call CPU\/GPU a narrow waist. CPU and GPU are not different technology layers. CPUs are not implemented in terms of GPUs, nor the other way round.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b+mS4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03U0SCU5LH"
                            },
                            {
                                "type": "text",
                                "text": " I wouldn't call CPU\/GPU a narrow waist. CPU and GPU are not different technology layers. CPUs are not implemented in terms of GPUs, nor the other way round."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721416530.218349",
        "client_msg_id": "279850f6-46c4-4a8c-846f-14cf2ce8c3e6",
        "text": "<@U5STGTB3J> I agree that Simon's perspective is still a very useful one, though rarely adopted in practice. But I see this as distinct from the narrow waist context, which is about layers, not interacting modules.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hTzUK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I agree that Simon's perspective is still a very useful one, though rarely adopted in practice. But I see this as distinct from the narrow waist context, which is about layers, not interacting modules."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721418672.242329",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1721418791.000000"
        },
        "client_msg_id": "b5ae460e-522c-46c3-8be5-f5b1ad7087f9",
        "text": "Now I'm rereading <https:\/\/faculty.sites.iastate.edu\/tesfatsi\/archive\/tesfatsi\/ArchitectureOfComplexity.HSimon1962.pdf>\n\nI swear, sometimes I think I only read the first 5 pages of any paper. I very often have no memory of the rest.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tl1RD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now I'm rereading "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/faculty.sites.iastate.edu\/tesfatsi\/archive\/tesfatsi\/ArchitectureOfComplexity.HSimon1962.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI swear, sometimes I think I only read the first 5 pages of any paper. I very often have no memory of the rest."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "A good example of a narrow waist is in the internet architecture. TCP\/IP is the waist with heterogeneity and evolution both above and below it.\n\nI believe the concept of a file is also a narrow waist. Not only do you have different filesystems underneath, you can also map it to different mediums (SSD, HDD, optical, remote). Of course there is the entire world of applications above it.",
        "files": [
            {
                "id": "F07D6H51KJR",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vbyq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A good example of a narrow waist is in the internet architecture. TCP\/IP is the waist with heterogeneity and evolution both above and below it.\n\nI believe the concept of a file is also a narrow waist. Not only do you have different filesystems underneath, you can also map it to different mediums (SSD, HDD, optical, remote). Of course there is the entire world of applications above it."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1721419619.271729",
        "client_msg_id": "7080527f-cd69-4052-9aab-441db7640b57",
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420135.478359",
        "client_msg_id": "467aba81-ca3b-4c74-87c7-ef5663b944e5",
        "text": "<@U02E4DAQGSZ>: Notebooks are great at displaying runtime state. You can also use them to render UIs, with which you can modify transient state. But the persistent code that makes up a notebook can only be edited through the notebook’s code editor. If I want to edit a state chart graphically and have that be part of the code my notebook runs, I can’t do that with Observable or Jupyter or whatever without very awkward workflows (like copy-pasting text from an Observable output cell into a code cell). Interactions with graphical things rendered in a notebook don’t survive a browser refresh. So they do not pull off the <@UCYF51KT2> level-3 thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sr63s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": ": Notebooks are great at displaying runtime state. You can also use them to render UIs, with which you can modify transient state. But the persistent code that makes up a notebook can only be edited through the notebook’s code editor. If I want to edit a state chart graphically and have that be part of the code my notebook runs, I can’t do that with Observable or Jupyter or whatever without very awkward workflows (like copy-pasting text from an Observable output cell into a code cell). Interactions with graphical things rendered in a notebook don’t survive a browser refresh. So they do not pull off the "
                            },
                            {
                                "type": "user",
                                "user_id": "UCYF51KT2"
                            },
                            {
                                "type": "text",
                                "text": " level-3 thing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420174.061549",
        "client_msg_id": "6aa50ab0-34bc-4133-9193-98ac1c157cdf",
        "text": "(There are some Jupyter extensions like mage that partially fix this.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mdM4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(There are some Jupyter extensions like mage that partially fix this.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420326.876539",
        "client_msg_id": "7013bebb-3188-4377-9084-8f23614ad19b",
        "text": "I roughly agree with <@UC2A2ARPT>’s response, except that notebooks do have a slight advantage – if I’m ok editing a “diagrammatic program” through textual data, then I can do that in Observable, and also have Observable visualize the “diagrammatic program”, live, in the place where I’m editing it. Doing that in a trad dev environment would make it harder to see that visualization.\n\nMy issue is that I don’t want to edit a diagrammatic program through textual data – I wanna edit it through a diagram!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qGslF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I roughly agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "’s response, except that notebooks do have a slight advantage – if I’m ok editing a “diagrammatic program” through textual data, then I can do that in Observable, and also have Observable visualize the “diagrammatic program”, live, in the place where I’m editing it. Doing that in a trad dev environment would make it harder to see that visualization.\n\nMy issue is that I don’t want to edit a diagrammatic program through textual data – I wanna edit it through a diagram!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721420725.120529",
        "client_msg_id": "bb7b8b80-f56c-40d5-a680-d87194c83ea3",
        "text": "<@UCUSW7WVD> That website is an interesting case, because there we’re not talking about a program-authoring environment being live and\/or rich; we’re talking about a (one-off) program-reading environment being live and\/or rich. I agree that it’s kinda live! (Wish it had a more fine-grained liveness tho – like don’t you want to see the relativeLuminance values, not just the final output?) As a test rig of the code, it’s kinda rich, in that you’re editing the test inputs with a direct-manipulation editor… but it feels weird to call that rich, cuz we’re not editing the _program_ in a rich way, just some test inputs. But I see where you’re coming from.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Wxfi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " That website is an interesting case, because there we’re not talking about a program-authoring environment being live and\/or rich; we’re talking about a (one-off) program-reading environment being live and\/or rich. I agree that it’s kinda live! (Wish it had a more fine-grained liveness tho – like don’t you want to see the relativeLuminance values, not just the final output?) As a test rig of the code, it’s kinda rich, in that you’re editing the test inputs with a direct-manipulation editor… but it feels weird to call that rich, cuz we’re not editing the "
                            },
                            {
                                "type": "text",
                                "text": "program",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a rich way, just some test inputs. But I see where you’re coming from."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721422293.900169",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1721422588.000000"
        },
        "client_msg_id": "4652e2f0-5380-47b4-9689-9afb64c10722",
        "text": "Ok, I'm gonna do one more comment on the subject of how come I don't remember all this from _The architecture of complexity_. Hopefully it's not too off-topic.\n\nIn 2 pages from page 8 to page 10, the paper makes the statement that I think Stefan was pointing at above:\n• When subsystems are out of equilibrium, you can ignore macroscopic interactions between subsystems. They're in the noise compared to the churn going on within each subsystem.\n• When subsystems are in equilibrium, cross-subsystem interactions dominate. You can even summarize each subsystem with a few gross aggregate metrics.\nThis duality is really interesting! It connects up with Christopher Alexander's _A City is not a Tree_ (<https:\/\/www.patternlanguage.com\/archive\/cityisnotatree.html>)\n\nHowever, in the rest of the (17-page) paper Simon focuses exclusively on the second bullet. The result is to belabor something we moderns at least get told all the time: to manage complexity, divide and conquer. This is why I totally missed the gold.\n\nI think I'm saying I appreciate <@U5STGTB3J> for highlighting this point almost more than I appreciate Herb Simon :smile:\n\nPerhaps an alternative explanation is that Herb Simon had several thoughts on the subject and put them into a single paper. If so, a unitary introduction and conclusion feels counter-productive. This is a series of short stories, not a novella.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e2sis",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, I'm gonna do one more comment on the subject of how come I don't remember all this from "
                            },
                            {
                                "type": "text",
                                "text": "The architecture of complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Hopefully it's not too off-topic.\n\nIn 2 pages from page 8 to page 10, the paper makes the statement that I think Stefan was pointing at above:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When subsystems are out of equilibrium, you can ignore macroscopic interactions between subsystems. They're in the noise compared to the churn going on within each subsystem."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "When subsystems are in equilibrium, cross-subsystem interactions dominate. You can even summarize each subsystem with a few gross aggregate metrics."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis duality is really interesting! It connects up with Christopher Alexander's "
                            },
                            {
                                "type": "text",
                                "text": "A City is not a Tree",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.patternlanguage.com\/archive\/cityisnotatree.html"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nHowever, in the rest of the (17-page) paper Simon focuses exclusively on the second bullet. The result is to belabor something we moderns at least get told all the time: to manage complexity, divide and conquer. This is why I totally missed the gold.\n\nI think I'm saying I appreciate "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " for highlighting this point almost more than I appreciate Herb Simon "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPerhaps an alternative explanation is that Herb Simon had several thoughts on the subject and put them into a single paper. If so, a unitary introduction and conclusion feels counter-productive. This is a series of short stories, not a novella."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721422571.053629",
        "client_msg_id": "293d6a23-7ab1-410b-8724-380d4bcc5e16",
        "text": "observable views are a UI + a data-channel and they can be 2-way bound to other UI components, composed <https:\/\/observablehq.com\/@tomlarkworthy\/view|hierarchically>, or *even bound to persistence [<https:\/\/observablehq.com\/@tomlarkworthy\/local-storage-view|local> view, <https:\/\/observablehq.com\/@tomlarkworthy\/shareview|shared> view]*. Diagrammatic editing is a little hard, and this conversation has made me try to see if Plot can be made editable (they do expose their grammar-of-graphics scales and an interactive <https:\/\/observablehq.com\/plot\/interactions\/pointer|pointer> mark which seems relevant)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZE23u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "observable views are a UI + a data-channel and they can be 2-way bound to other UI components, composed "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/view",
                                "text": "hierarchically"
                            },
                            {
                                "type": "text",
                                "text": ", or "
                            },
                            {
                                "type": "text",
                                "text": "even bound to persistence [",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/local-storage-view",
                                "text": "local",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " view, ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/shareview",
                                "text": "shared",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " view]",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Diagrammatic editing is a little hard, and this conversation has made me try to see if Plot can be made editable (they do expose their grammar-of-graphics scales and an interactive "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/plot\/interactions\/pointer",
                                "text": "pointer"
                            },
                            {
                                "type": "text",
                                "text": " mark which seems relevant)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721423535.695159",
        "client_msg_id": "CFDFA672-AF62-48C7-B0D5-4558A9E6BA11",
        "text": "<@U8A5MS6R1> That’s the example I had in mind. So, ok, if that’s a narrow waist, then is, say, LLVM also a narrow waist (between compiler front- and backends), or is that something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jiZjW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "That’s"
                            },
                            {
                                "type": "text",
                                "text": " the example I had in mind"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " So, ok, if "
                            },
                            {
                                "type": "text",
                                "text": "that’s"
                            },
                            {
                                "type": "text",
                                "text": " a narrow waist, then is, say, LLVM also a narrow waist (between compiler front- and backends), or is that something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721423789.187259",
        "client_msg_id": "2b245483-5f89-440e-8edd-0c28e7905f2a",
        "text": "Yes LLVM is also a narrow waist.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xPUX\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes LLVM is also a narrow waist."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721423929.217909",
        "client_msg_id": "b1ae1692-aa65-4ba8-ace3-b490c59adea5",
        "text": "Layering is essential in narrow waists, but not vice versa. You can have layering without large ecosystems above and below a specific narrow layer. I create systems with layers, but they are no ecosystems above and below it - it's just a cylinder shape, not an hourglass.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9\/Hms",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Layering is essential in narrow waists, but not vice versa. You can have layering without large ecosystems above and below a specific narrow layer. I create systems with layers, but they are no ecosystems above and below it - it's just a cylinder shape, not an hourglass."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721424094.712079",
        "client_msg_id": "843ca1b8-2d24-480e-bda9-852f14ed63f1",
        "text": "From the original link above\n&gt; The narrow waist (of an hourglass) is a software concept that solves an interoperability problem, avoiding an O(M × N) explosion.\nSo LLVM certainly fits that definition. Without LLMV you'd have M × N, specifically `(C, C++, Rust, Haskell, ...) × (x86, arm, mips, ...)`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aY4Js",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the original link above\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The narrow waist (of an hourglass) is a software concept that solves an interoperability problem, avoiding an O(M × N) explosion."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So LLVM certainly fits that definition. Without LLMV you'd have M × N, specifically "
                            },
                            {
                                "type": "text",
                                "text": "(C, C++, Rust, Haskell, ...) × (x86, arm, mips, ...)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721424117.665379",
        "client_msg_id": "4cea0039-1b9e-456e-9c9e-c375f9980b7e",
        "text": "<@U02E4DAQGSZ> The only part of your comment which is relevant to what I’m talking about is the part about local\/shared persistence. I appreciate the effort you’ve put into getting around Observable’s lack of support for this stuff! But those approaches are limited and awkward:\n\n• If we’re talking about using UI to edit your notebook’s code, local persistence is a non-starter… the point of notebooks is to share code.\n• The shared view has no authentication. So if you used it to author part of the notebook’s code, anyone with access to the notebook would be able to modify it’s code. If you added authentication, you would then have two separate, parallel auth systems to keep synchronized — one for Observable &amp; one for your sharing system.\n• In both local + shared situations, you have to add IDs by hand whenever you want to persist something. If you clone a cell, it keeps the same ID, so it edits the same underlying (local or cloud) state. You gotta remember to change them or you’ll clobber stuff. Same for cloning \/ forking notebooks.\nIn short, I think these approaches all get very awkward, arguably no less awkward than copy-pasting code into cells. I’d be curious to hear whether you’ve heard of them being used successfully in practice, in the face of these problems.\n\nPersonally, I’d like it if Observable could add persistent UI-editable state, so we wouldn’t have to make up work-arounds. But I don’t see that happening, given that the company is no longer focusing on the notebook product. Perhaps some other notebook product could get in the game, maybe something open-source?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gYaBf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " The only part of your comment which is relevant to what I’m talking about is the part about local\/shared persistence. I appreciate the effort you’ve put into getting around Observable’s lack of support for this stuff! But those approaches are limited and awkward:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If we’re talking about using UI to edit your notebook’s code, local persistence is a non-starter… the point of notebooks is to share code."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The shared view has no authentication. So if you used it to author part of the notebook’s code, anyone with access to the notebook would be able to modify it’s code. If you added authentication, you would then have two separate, parallel auth systems to keep synchronized — one for Observable & one for your sharing system."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In both local + shared situations, you have to add IDs by hand whenever you want to persist something. If you clone a cell, it keeps the same ID, so it edits the same underlying (local or cloud) state. You gotta remember to change them or you’ll clobber stuff. Same for cloning \/ forking notebooks."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn short, I think these approaches all get very awkward, arguably no less awkward than copy-pasting code into cells. I’d be curious to hear whether you’ve heard of them being used successfully in practice, in the face of these problems.\n\nPersonally, I’d like it if Observable could add persistent UI-editable state, so we wouldn’t have to make up work-arounds. But I don’t see that happening, given that the company is no longer focusing on the notebook product. Perhaps some other notebook product could get in the game, maybe something open-source?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1721424249.754149",
        "client_msg_id": "d790a849-10f1-4952-9d69-b4b8a324877e",
        "text": "(As for interactivity in Observable Plot, which is besides any point I’m making but a good question: I know that lack of good interactivity is one of the main reasons my advisor hasn’t switched his data vis course to use Observable Plot.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "URMyT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(As for interactivity in Observable Plot, which is besides any point I’m making but a good question: I know that lack of good interactivity is one of the main reasons my advisor hasn’t switched his data vis course to use Observable Plot.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721424507.264839",
        "client_msg_id": "DA1D9CF5-5B43-48AC-82B0-1C10B1E8D658",
        "text": "<@U8A5MS6R1> Thanks, that makes sense. Now I’m wondering: What would be a good example for a layer architecture that doesn’t have a narrow waist?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jOUBB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, that makes sense"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Now "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " wondering: What would be a good example for a layer architecture that "
                            },
                            {
                                "type": "text",
                                "text": "doesn’t"
                            },
                            {
                                "type": "text",
                                "text": " have a narrow waist?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721425153.871259",
        "client_msg_id": "b8c2982f-3f18-4193-853e-cb69e6e676e1",
        "text": "Layers are essential to narrow waist but not vice versa. I create systems all the time with layers, but no special narrow layer that has diversity above and below. I have a web app handing request above and an db access layer below, with an actual db underneath - it's like a cylinder. There are no ecosystems involved. You can say libraries like sqlalchemy orm try to do a narrow waist, but have not been as successful. The leaky abstraction principle also applies - some waists work better in their context than others.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C1wI7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Layers are essential to narrow waist but not vice versa. I create systems all the time with layers, but no special narrow layer that has diversity above and below. I have a web app handing request above and an db access layer below, with an actual db underneath - it's like a cylinder. There are no ecosystems involved. You can say libraries like sqlalchemy orm try to do a narrow waist, but have not been as successful. The leaky abstraction principle also applies - some waists work better in their context than others."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721425367.582499",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1721425441.000000"
        },
        "client_msg_id": "e42642c4-7afd-4b8b-97d5-c0eff5bc41fc",
        "text": "The downside of well established narrow waists is you cant move the waist because it is so deeply entrenched in systems and minds. So with TCP\/IP, you have all different physical protocols designed and optimized to cater to its specific features. Same with LLVM backends. Similar to how \"and then our tools shape us\", language designers comfortable with LLVM may end up designing languages that can be easily mapped to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Onadp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The downside of well established narrow waists is you cant move the waist because it is so deeply entrenched in systems and minds. So with TCP\/IP, you have all different physical protocols designed and optimized to cater to its specific features. Same with LLVM backends. Similar to how \"and then our tools shape us\", language designers comfortable with LLVM may end up designing languages that can be easily mapped to it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721425372.942729",
        "client_msg_id": "081e4eeb-562b-440e-8e8e-8eadc7fc056e",
        "text": "Sounds like layers can have two purposes:\n• 'vertically' to separate concerns\n• 'horizontally' as a narrow waist",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0PFj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like layers can have two purposes:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'vertically' to separate concerns"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'horizontally' as a narrow waist"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721425838.255409",
        "client_msg_id": "39DE7576-FDF4-4E27-99E3-1831C8CE048B",
        "text": "<@UCUSW7WVD> Thanks. I found the room temperature example useful to illustrate this.\n\nSimon also points out in that paper that it’s not quite clear if we see hierarchies everywhere because they are everywhere, or just because we are adapted to see hierarchies. That’s also pretty much just a sentence or paragraph at most, but in my view one of the most thoughtful observations in there.\n\nI’ve mentioned Alicia Juarrero somewhere here before who wrote two books that take this idea of interactions across subsystems on different hierarchy levels much further with a comprehensive theory about constraints. In case you were looking for another rabbit hole… :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "82iIW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks. I found the room temperature example useful to illustrate this."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Simon also points out in that paper that it’s not quite clear if we see hierarchies everywhere because they are everywhere, or just because we are adapted to see hierarchies. That’s also pretty much just a sentence or paragraph at most, but in my view one of the most thoughtful observations in there."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I’ve mentioned Alicia Juarrero "
                            },
                            {
                                "type": "text",
                                "text": "somewhere "
                            },
                            {
                                "type": "text",
                                "text": "here before who wrote two books that take this idea of interactions across subsystems on different hierarchy levels much further with a "
                            },
                            {
                                "type": "text",
                                "text": "comprehensive "
                            },
                            {
                                "type": "text",
                                "text": "theory about constraints."
                            },
                            {
                                "type": "text",
                                "text": " In case you were looking for another rabbit hole… :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721426120.904779",
        "client_msg_id": "21004a94-51f8-460c-9132-96f9714002d5",
        "text": "Kartik - I didn't get the vertical vs horizontal - can you elaborate \/ give an example of vertical?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XMT7p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kartik - I didn't get the vertical vs horizontal - can you elaborate \/ give an example of vertical?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1721426510.861799",
        "client_msg_id": "2e467465-07a8-4da4-8db4-f128acce12cb",
        "text": "<@U8A5MS6R1> I was imagining the layers stacked one on another. So as you move vertically you cross layer boundaries.\n\nImagine you have a system. As you separate concerns it's often natural to have one concern treat another as a black box. Caller vs callee. You're basically creating a layer boundary here. So this is what I think of as 'vertical'.\n\nBut another reason to create a layer doesn't start from a system at all. Instead you have a bunch of systems of two kinds that want to talk across a requirement\/provider boundary. I imagine these alternatives lined up horizontally in two lines, one above another (but here 'vertical' doesn't mean caller-callee, hehe. It's symmetric; either side can initiate a connection). In this case you form a new system \"fully formed from the brow of Zeus\" as it were, to intermediate the two sides. This is the thin waist. Before it existed there was cacophony. After it exists you suddenly find yourself in a layered architecture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tCA4h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I was imagining the layers stacked one on another. So as you move vertically you cross layer boundaries.\n\nImagine you have a system. As you separate concerns it's often natural to have one concern treat another as a black box. Caller vs callee. You're basically creating a layer boundary here. So this is what I think of as 'vertical'.\n\nBut another reason to create a layer doesn't start from a system at all. Instead you have a bunch of systems of two kinds that want to talk across a requirement\/provider boundary. I imagine these alternatives lined up horizontally in two lines, one above another (but here 'vertical' doesn't mean caller-callee, hehe. It's symmetric; either side can initiate a connection). In this case you form a new system \"fully formed from the brow of Zeus\" as it were, to intermediate the two sides. This is the thin waist. Before it existed there was cacophony. After it exists you suddenly find yourself in a layered architecture."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1721427691.217549",
        "client_msg_id": "2d551219-07b7-4b13-aa11-806a6a8f13ce",
        "text": "yeah makes sense. \"interoperability standards\" often seem synonymous with narrow waists. it's not about a single system but an ecosystem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y4+Ck",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah makes sense. \"interoperability standards\" often seem synonymous with narrow waists. it's not about a single system but an ecosystem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1721427907.748439",
        "client_msg_id": "A98576A6-DE08-4182-A30C-663EFC91447B",
        "text": "<@UJBAJNFLK> About Simon’s approach: What do you mean by “rarely adopted”? Simon was trying to describe and explain complex systems. I’m not sure there was anything to adopt?\n\nI think his observations do apply to layer architectures. First, in the form of leaky abstractions. But even if the interfaces are well specified and achieve good separation, which is incredibly difficult to achieve, there are still subtle effects that can be ignored most of the time, but then sometimes do shine through, like, I don’t know, packet size constraints on the IP layer causing performance issues on the HTTP layer or something like that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TqoMp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " About Simon’s approach: What do you mean by “rarely adopted”? Simon was trying to describe and explain complex systems. I’m not sure there was anything to adopt?\n\nI think his observations do apply to layer architectures. First, in the form of leaky abstractions. But even if the interfaces are well specified and achieve good separation, which is incredibly difficult to achieve, there are still subtle effects that can be ignored most of the time, but then sometimes do shine through, like, I "
                            },
                            {
                                "type": "text",
                                "text": "don’t"
                            },
                            {
                                "type": "text",
                                "text": " know, packet size constraints on the IP layer causing performance issues on the HTTP layer or something like that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721428605.569979",
        "client_msg_id": "1412960f-58a1-4780-a3a4-5d9b865f3ad4",
        "text": "I have build several apps on Observable using these techniques\n• (commercial) <https:\/\/observablehq.com\/@categorise\/surveyslate-filler?username=demoResponder#FnMcjZO1pn1uqmMh%7Ccell-types>. &lt;-- magic link authentication to AWS, hosted on a custom domain, persistence is just S3. Whole application is a single cell assembled heirarchically and bound to S3\n• (fun) <https:\/\/thetarot.online\/-O2C-4yex9ykAwoZ_Jvz|thetarot.online> no auth, custom domain, also embedded in a Medium article\n• (personal) <https:\/\/observablehq.com\/@tomlarkworthy\/minecraft-servers-be|minecraft server front end> Firebase login and backend\nThe things you say are true in that there are numerous annoying frictions, CORS being the worse one IMHO, but still, compared to setting up Jest on a Typescript project, or installing Numpy, these are not deal breakers, and the reactive environment makes up for all that, with surplus IMHO. There is a bit of a complexity\/performance ceiling, but I would say that is true of Jupyter and Excel too, it doesn't stop them being incredibly useful internal micro-apps.\nThere are several open source Observable-likes in existence already\n• <https:\/\/github.com\/asg017\/dataflow>\n• <https:\/\/starboard.gg\/>\nBuilding something that is good enough IDE\/Visual Env\/Ecosystem is basically too large a project to pull off. Even Observable hasn't really pulled it off! I don't think saving the state of the notebook is _the_ problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/thetarot.online\/-O2C-4yex9ykAwoZ_Jvz",
                "image_url": "https:\/\/storage.googleapis.com\/download\/storage\/v1\/b\/larkworthy-dfb11.appspot.com\/o\/@tomlarkworthy%2Ftarot-backend%2Fimages%2F-O2C-4yex9ykAwoZ_Jvz?generation=1721426275938809&alt=media",
                "image_width": 800,
                "image_height": 406,
                "image_bytes": 365794,
                "id": 1,
                "original_url": "https:\/\/thetarot.online\/-O2C-4yex9ykAwoZ_Jvz",
                "fallback": "Tarot Reading for Tom on behalf of Joshua Horowitz",
                "text": "Will Joshua have a realisation about the ability to develop faster on Observable reactive Notebooks?",
                "title": "Tarot Reading for Tom on behalf of Joshua Horowitz",
                "title_link": "https:\/\/thetarot.online\/-O2C-4yex9ykAwoZ_Jvz",
                "service_name": "thetarot.online"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zpkn8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have build several apps on Observable using these techniques\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(commercial) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/observablehq.com\/@categorise\/surveyslate-filler?username=demoResponder#FnMcjZO1pn1uqmMh%7Ccell-types"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". <-- magic link authentication to AWS, hosted on a custom domain, persistence is just S3. Whole application is a single cell assembled heirarchically and bound to S3"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(fun) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/thetarot.online\/-O2C-4yex9ykAwoZ_Jvz",
                                        "text": "thetarot.online"
                                    },
                                    {
                                        "type": "text",
                                        "text": " no auth, custom domain, also embedded in a Medium article"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(personal) "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/observablehq.com\/@tomlarkworthy\/minecraft-servers-be",
                                        "text": "minecraft server front end"
                                    },
                                    {
                                        "type": "text",
                                        "text": " Firebase login and backend"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe things you say are true in that there are numerous annoying frictions, CORS being the worse one IMHO, but still, compared to setting up Jest on a Typescript project, or installing Numpy, these are not deal breakers, and the reactive environment makes up for all that, with surplus IMHO. There is a bit of a complexity\/performance ceiling, but I would say that is true of Jupyter and Excel too, it doesn't stop them being incredibly useful internal micro-apps.\nThere are several open source Observable-likes in existence already\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/asg017\/dataflow"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/starboard.gg\/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Building something that is good enough IDE\/Visual Env\/Ecosystem is basically too large a project to pull off. Even Observable hasn't really pulled it off! I don't think saving the state of the notebook is "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UBKNXPBAB"
                ],
                "count": 1
            }
        ]
    }
]