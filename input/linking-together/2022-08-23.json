[
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1661296709.406409",
        "client_msg_id": "3139ff25-93c8-4086-bfb7-785068225e71",
        "text": "Here's a classic paper that I have enjoyed for a long time.\n\nIt really captures why it is so hard to learn your way around a program unless you are able to work with someone who wrote it or has been maintaining it.\n\nIt also captures why having a rotating group of programmers who all work on the same code base without extended mentorship leads to a complete breakdown in conceptual integrity within the code base.\n\nProgramming as Theory Building\n<https:\/\/pages.cs.wisc.edu\/~remzi\/Naur.pdf|https:\/\/pages.cs.wisc.edu\/~remzi\/Naur.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "reply_count": 32,
        "reply_users_count": 10,
        "latest_reply": "1661908676.610629",
        "reply_users": [
            "UCUSW7WVD",
            "U03CEGR3HSL",
            "UK3LH8CF5",
            "UJBAJNFLK",
            "U013ZLJARC7",
            "U71PMQ1V0",
            "U02U0AS3J49",
            "UA14TGLTC",
            "UJFN50C00",
            "U03B14DUZSA"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1661297115.565659"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1661298654.369509"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661300058.099309"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1661300188.987669"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661300513.955829"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661300812.039139"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661310464.874839"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1661312764.841389"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661315242.168719"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1661316106.144949"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661320159.650429"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1661329325.896099"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661344087.570649"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661348485.424419"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661350562.761579"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1661352454.348989"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661354213.538869"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661355742.019529"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1661357167.014179"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661357300.759659"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1661399628.505289"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1661410771.606489"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661433761.343459"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1661504279.429049"
            },
            {
                "user": "UJFN50C00",
                "ts": "1661661261.642299"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1661665775.752049"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1661672606.570449"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1661750779.741649"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1661786704.099379"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1661787492.083059"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1661789602.687549"
            },
            {
                "user": "U03B14DUZSA",
                "ts": "1661908676.610629"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7Zs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a classic paper that I have enjoyed for a long time.\n\nIt really captures why it is so hard to learn your way around a program unless you are able to work with someone who wrote it or has been maintaining it.\n\nIt also captures why having a rotating group of programmers who all work on the same code base without extended mentorship leads to a complete breakdown in conceptual integrity within the code base.\n\nProgramming as Theory Building\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pages.cs.wisc.edu\/~remzi\/Naur.pdf",
                                "text": "https:\/\/pages.cs.wisc.edu\/~remzi\/Naur.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "U0245E9RB2B",
                    "U014WA16VNJ",
                    "UJFN50C00"
                ],
                "count": 4
            },
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC",
                    "USJ9LD0E4",
                    "UJFN50C00"
                ],
                "count": 4
            },
            {
                "name": "heart",
                "users": [
                    "USJ9LD0E4",
                    "UJFN50C00"
                ],
                "count": 2
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1661297098.725499",
        "client_msg_id": "35dd68b6-3b37-436c-b12b-41a66bb275a4",
        "text": "<@UE6EFEPTQ> the link I shared above is pretty short and to the point:\n\n&gt; This image shows Terminal Phase with the ability to _undo mistakes and restore previous state_ visibly exposed. But here’s the wild thing: the gameplay code of Terminal Phase was fully written and released _before_ any consideration was given to showing off time travel as a demo. The time travel interface was added on within just a couple of short hours _after the game was already written_ and _without modifying any core gameplay code_. The only thing that needed to be added was some scaffolding to keep a certain amount of state and display it to the user.\n&gt; This game prototype is entirely local, but where Goblins gets _really_ exciting is applications running over a _distributed network…_\n&gt; Please note that there are some interesting things happening here:\n&gt; • The two participants are speaking over a peer to peer network (Tor Onion Services, in this case, though Goblins is designed to be flexible as to the particular network substrate chosen)\n&gt; • No participant in the chat can fake messages coming from any other participant in the chat (on an object identity level; avoiding naming conflicts through a <https:\/\/github.com\/cwebber\/rebooting-the-web-of-trust-spring2018\/blob\/petnames\/draft-documents\/petnames.md|petname system> came in <https:\/\/spritelyproject.org\/news\/petname-systems.html|later iterations> of the system)\n&gt; • Communication is end-to-end encrypted\n&gt; • And, the entire chat system backend, for both rooms and for users, is <https:\/\/gitlab.com\/spritely\/goblin-chat\/-\/blob\/946f4a1ba825197eb0fbb6b8be47a60982287b0f\/chat-backend.rkt|a mere 154 lines of code>!\n&gt; But here is the _even more amazing_ part: the core chat protocol _does not mention the network even once_. It does not need to… in fact, the entire chat program was written using Goblins’ asynchronous programming style locally, within the same process. When the chat code was connected to Goblins’ networking code, the chat system _just works_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1660904754.095659",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3Dv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " the link I shared above is pretty short and to the point:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This image shows Terminal Phase with the ability to "
                            },
                            {
                                "type": "text",
                                "text": "undo mistakes and restore previous state",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " visibly exposed. But here’s the wild thing: the gameplay code of Terminal Phase was fully written and released "
                            },
                            {
                                "type": "text",
                                "text": "before",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " any consideration was given to showing off time travel as a demo. The time travel interface was added on within just a couple of short hours "
                            },
                            {
                                "type": "text",
                                "text": "after the game was already written",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "without modifying any core gameplay code",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The only thing that needed to be added was some scaffolding to keep a certain amount of state and display it to the user.\nThis game prototype is entirely local, but where Goblins gets "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exciting is applications running over a "
                            },
                            {
                                "type": "text",
                                "text": "distributed network…",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please note that there are some interesting things happening here:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The two participants are speaking over a peer to peer network (Tor Onion Services, in this case, though Goblins is designed to be flexible as to the particular network substrate chosen)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "No participant in the chat can fake messages coming from any other participant in the chat (on an object identity level; avoiding naming conflicts through a "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/cwebber\/rebooting-the-web-of-trust-spring2018\/blob\/petnames\/draft-documents\/petnames.md",
                                        "text": "petname system"
                                    },
                                    {
                                        "type": "text",
                                        "text": " came in "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/spritelyproject.org\/news\/petname-systems.html",
                                        "text": "later iterations"
                                    },
                                    {
                                        "type": "text",
                                        "text": " of the system)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Communication is end-to-end encrypted"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "And, the entire chat system backend, for both rooms and for users, is "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/gitlab.com\/spritely\/goblin-chat\/-\/blob\/946f4a1ba825197eb0fbb6b8be47a60982287b0f\/chat-backend.rkt",
                                        "text": "a mere 154 lines of code"
                                    },
                                    {
                                        "type": "text",
                                        "text": "!"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 1
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But here is the "
                            },
                            {
                                "type": "text",
                                "text": "even more amazing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " part: the core chat protocol "
                            },
                            {
                                "type": "text",
                                "text": "does not mention the network even once",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It does not need to… in fact, the entire chat program was written using Goblins’ asynchronous programming style locally, within the same process. When the chat code was connected to Goblins’ networking code, the chat system "
                            },
                            {
                                "type": "text",
                                "text": "just works",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661297115.565659",
        "client_msg_id": "2fe7ea3e-6abe-4e60-b98f-26ede1691b45",
        "text": "I love that one. Now I'm inspired to go back and find every single thread in our archives that mentions it. In chronological order:\n\n• <http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1544559968.252500.html>\n• <http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1568644207.175000.html>\n• <http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1586022158.113700.html>\n• <http:\/\/akkartik.name\/archives\/foc\/linking-together\/1598713285.112800.html>\n• <http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1600909562.010100.html>\n• <http:\/\/akkartik.name\/archives\/foc\/linking-together\/1634856571.005600.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WwhF3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love that one. Now I'm inspired to go back and find every single thread in our archives that mentions it. In chronological order:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1544559968.252500.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1568644207.175000.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1586022158.113700.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/linking-together\/1598713285.112800.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1600909562.010100.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http:\/\/akkartik.name\/archives\/foc\/linking-together\/1634856571.005600.html"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03CEGR3HSL",
                    "UJBAJNFLK",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1661298654.369509",
        "client_msg_id": "b1494da4-0748-4de5-91f8-725d539b13d8",
        "text": "It's fascinating that it keeps coming up as a touch point in other conversations.\n\nI think it's definitely possible to recover the theory of a program in many cases, but it's often a huge undertaking.\n\nAfter reading the Lions book I felt like I had much of the theory of Unix v6, but that was after a huge amount of time and effort and with the aid of amazing documentation.\n\nBut, if one accepts that the theory of a program is much better maintained by passing it on from one person to another, what does that imply about how to create software?\n\nShould we stop trying to make programmers plug compatible? Never let a team who maintains a program get smaller than two? Accept that a programmer we have who has the theory of our program is more valuable to us than one who knows the language but does not have the theory of our code?\n\nIf so, should we start offering people ways to advance in their career without changing employers every two years, so we can keep them on the program they know and to which they can already add the most value?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w2uX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's fascinating that it keeps coming up as a touch point in other conversations.\n\nI think it's definitely possible to recover the theory of a program in many cases, but it's often a huge undertaking.\n\nAfter reading the Lions book I felt like I had much of the theory of Unix v6, but that was after a huge amount of time and effort and with the aid of amazing documentation.\n\nBut, if one accepts that the theory of a program is much better maintained by passing it on from one person to another, what does that imply about how to create software?\n\nShould we stop trying to make programmers plug compatible? Never let a team who maintains a program get smaller than two? Accept that a programmer we have who has the theory of our program is more valuable to us than one who knows the language but does not have the theory of our code?\n\nIf so, should we start offering people ways to advance in their career without changing employers every two years, so we can keep them on the program they know and to which they can already add the most value?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661300058.099309",
        "client_msg_id": "08d90d44-9109-4ff5-940d-35510118e45f",
        "text": "On the other hand, there's some creative destruction that happens every time a programmer switches projects or a project folds up.\n\nAdmittedly, most of the touch points were added by me :sweat_smile: As I said in one of them, it's one of 3 major influences of mine (along with the Parnas paper you mentioned at <https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1660888406320979>) The way I think about it is, it's a lucid statement of a _problem_, not a situation without a solution.\n\nWe have technical tools to manage the problem: better languages, version control (which provides a Schelling Point for crucial information in commit logs), automated tests (Schelling point in test names), creative ways to introduce new Schelling points for a reader like Literate Programming and Aspect-Oriented Programming or Common Lisp's `advice` facility.\n\nWe also have at least one counter-example of a program that does uncommonly well at preserving its theory over generations of contributors: with thanks to <@UJBAJNFLK>[1], `emacs`[2].\n\n[1] <http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1650464577.515109.html#1650702843.175699>\n[2] <https:\/\/merveilles.town\/@akkartik\/108796658699867329>\n\nI think the key reason lack of theory is still a pain point is social: lack of incentives. If a program breaks users complain. If a program's theory breaks, nobody complains immediately. So it can rot quite badly before anyone notices, badly enough that the tech debt is impossible to repay.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AME",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the other hand, there's some creative destruction that happens every time a programmer switches projects or a project folds up.\n\nAdmittedly, most of the touch points were added by me "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": " As I said in one of them, it's one of 3 major influences of mine (along with the Parnas paper you mentioned at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1660888406320979"
                            },
                            {
                                "type": "text",
                                "text": ") The way I think about it is, it's a lucid statement of a "
                            },
                            {
                                "type": "text",
                                "text": "problem",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not a situation without a solution.\n\nWe have technical tools to manage the problem: better languages, version control (which provides a Schelling Point for crucial information in commit logs), automated tests (Schelling point in test names), creative ways to introduce new Schelling points for a reader like Literate Programming and Aspect-Oriented Programming or Common Lisp's "
                            },
                            {
                                "type": "text",
                                "text": "advice",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " facility.\n\nWe also have at least one counter-example of a program that does uncommonly well at preserving its theory over generations of contributors: with thanks to "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "[1], "
                            },
                            {
                                "type": "text",
                                "text": "emacs",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "[2].\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/archives\/foc\/thinking-together\/1650464577.515109.html#1650702843.175699"
                            },
                            {
                                "type": "text",
                                "text": "\n[2] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/merveilles.town\/@akkartik\/108796658699867329"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think the key reason lack of theory is still a pain point is social: lack of incentives. If a program breaks users complain. If a program's theory breaks, nobody complains immediately. So it can rot quite badly before anyone notices, badly enough that the tech debt is impossible to repay."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1661300188.987669",
        "client_msg_id": "98387953-99a9-46ef-83fe-015c6602dd1a",
        "text": "Now I have to ask. What's the third major influence? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tvo57",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now I have to ask. What's the third major influence? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661300513.955829",
        "client_msg_id": "3e081dde-7b9c-414f-be3f-9e5380539a82",
        "text": "#1 is Christopher Alexander via Richard Gabriel: <https:\/\/github.com\/akkartik\/mu#credits|https:\/\/github.com\/akkartik\/mu#credits>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l+99",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "#1 is Christopher Alexander via Richard Gabriel: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu#credits",
                                "text": "https:\/\/github.com\/akkartik\/mu#credits"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661300812.039139",
        "client_msg_id": "b391bb6a-8ca2-4803-9517-e34f7735caaa",
        "text": "Heh, I actually gave Naur top billing when I wrote that! I think he's more relevant to that particular project, but CA articulated the ethos I aspire to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dDoK3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heh, I actually gave Naur top billing when I wrote that! I think he's more relevant to that particular project, but CA articulated the ethos I aspire to."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1661310464.874839",
        "client_msg_id": "191269b8-a0ef-4f19-8b51-e6cf8bef7b29",
        "text": "Yeah, this is by far my favorite programming paper. So full of insights and yet so misunderstood. I wrote a post a while again attempting to explain and defend it <https:\/\/jimmyhmiller.github.io\/incommunicability>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QvW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, this is by far my favorite programming paper. So full of insights and yet so misunderstood. I wrote a post a while again attempting to explain and defend it "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jimmyhmiller.github.io\/incommunicability"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03CEGR3HSL",
                    "UJBAJNFLK",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1661312764.841389",
        "client_msg_id": "134b9119-c924-4c5c-a35d-ce53c68024fd",
        "text": "<@UK3LH8CF5> nice blog post!\n\nWhen you say a theory cannot be communicated, are you saying that when someone who has the theory is passing it on to an apprentice, they are doing something more like training or teaching than explaining or communicating?\n\nMy experiences have somewhat mirrored Naur's when he talks about having to work closely with someone over time and coach them and have them make proposals and help them understand what is right and wrong about their proposals. It's a form of communicating, in a way, but it's not just explaining.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y=Aog",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " nice blog post!\n\nWhen you say a theory cannot be communicated, are you saying that when someone who has the theory is passing it on to an apprentice, they are doing something more like training or teaching than explaining or communicating?\n\nMy experiences have somewhat mirrored Naur's when he talks about having to work closely with someone over time and coach them and have them make proposals and help them understand what is right and wrong about their proposals. It's a form of communicating, in a way, but it's not just explaining."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1661315242.168719",
        "client_msg_id": "fb8ae78f-0d17-4124-9875-da678bba5f9e",
        "text": "Yeah theory is a know-how. It can't be stated in propositional form. But others can gain that theory through like you said, working closely with someone over time.\n\nIt is incommunicable, not untransferrable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lH4S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah theory is a know-how. It can't be stated in propositional form. But others can gain that theory through like you said, working closely with someone over time.\n\nIt is incommunicable, not untransferrable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1661316106.144949",
        "client_msg_id": "b31b60a9-1524-47ee-8e75-043b48d6eabf",
        "text": "Naur's paper is one of my personal classics as well. Especially since \"theory building\" is very much my official job description (I am a researcher in theoretical physics), though in a different context. I have been thinking about the commonalities of building theories in science and developing software for a while. A summary: <https:\/\/science-in-the-digital-era.khinsen.net\/#Formalization>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g1L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Naur's paper is one of my personal classics as well. Especially since \"theory building\" is very much my official job description (I am a researcher in theoretical physics), though in a different context. I have been thinking about the commonalities of building theories in science and developing software for a while. A summary: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/science-in-the-digital-era.khinsen.net\/#Formalization"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1661320159.650429",
        "client_msg_id": "7707175c-fb09-4fed-b7ea-4f793c385cbd",
        "text": "<@UK3LH8CF5> Thanks for that context on Gilbert Ryle! It helps see where Naur is coming from.\n\nMy attitude still is that \"impossible\" is hard to prove, \"forever\" is a very long time. I totally agree with the premise that \"an essential part of any program, the theory of it, is something that could not be conceivably be expressed, but is inextricably bound to human beings.\" However, we're also only concerned with communicating theories to other human beings, not AIs or dolphins or aliens. It seems plausible that one human being can recreate in their head, at a distance, what some other had in theirs. This is the premise of all distance learning. It's the utopia Neal Stephenson's _\"Young Lady's Illustrated Primer\"_ is pointing at.\n\nWe already use a key part of learning from someone without interactivity quite pervasively in our society: exercises. 90% of my chess knowledge comes from a slim volume of I believe 16 chess games called \"Chess Mastery by Question and Answer,\" where Fred Reinfeld peppers the reader with questions after every couple of moves. What do you think of this move? What would happen if White played ___? Ramanujan may have been a genius, but a lot of his unique ability also came from happening upon a textbook of math exercises at a formative time.\n\nI'm totally willing to grant that there are aspects of muscle memory in juggling or bicycling that you can't learn just from reading books. But I wouldn't put programming in the same category.\n\nThis is a useful conversation, because it helps explain to me the class of activities Naur is right about:\n• that involve muscle memory\n• where a good interactive curriculum doesn't exist yet\n• where the distance in mental space between teacher and student is too vast",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661296709.406409",
        "parent_user_id": "U03CEGR3HSL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for that context on Gilbert Ryle! It helps see where Naur is coming from.\n\nMy attitude still is that \"impossible\" is hard to prove, \"forever\" is a very long time. I totally agree with the premise that \"an essential part of any program, the theory of it, is something that could not be conceivably be expressed, but is inextricably bound to human beings.\" However, we're also only concerned with communicating theories to other human beings, not AIs or dolphins or aliens. It seems plausible that one human being can recreate in their head, at a distance, what some other had in theirs. This is the premise of all distance learning. It's the utopia Neal Stephenson's "
                            },
                            {
                                "type": "text",
                                "text": "\"Young Lady's Illustrated Primer\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is pointing at.\n\nWe already use a key part of learning from someone without interactivity quite pervasively in our society: exercises. 90% of my chess knowledge comes from a slim volume of I believe 16 chess games called \"Chess Mastery by Question and Answer,\" where Fred Reinfeld peppers the reader with questions after every couple of moves. What do you think of this move? What would happen if White played ___? Ramanujan may have been a genius, but a lot of his unique ability also came from happening upon a textbook of math exercises at a formative time.\n\nI'm totally willing to grant that there are aspects of muscle memory in juggling or bicycling that you can't learn just from reading books. But I wouldn't put programming in the same category.\n\nThis is a useful conversation, because it helps explain to me the class of activities Naur is right about:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "that involve muscle memory"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "where a good interactive curriculum doesn't exist yet"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "where the distance in mental space between teacher and student is too vast"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    }
]