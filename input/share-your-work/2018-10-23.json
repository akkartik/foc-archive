[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1540318843.000100",
        "client_msg_id": "804f1a1e-f087-4c0f-805c-11d0e945f211",
        "text": "Thought provoking write-up. I think 'there is something there' to be explored further. The problems identified are very real.\nSome existing solutions let you specify 'glue like' service APIs (e.g. protobuf, thrift, etc.) and generate client or server stubs in your language that give you language internal support for APIs. It might be useful to contrast those with this idea.\n\nOne different is this\n&gt; Each glue program would publish this graph on some predetermined port ie :5555.\nI really like this - pushing stuff into the runtime, live system right next to the service. IOW, the objects\/services\/apis should publish their properties (rather than storing them offline in some source control system).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "De\/an",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thought provoking write-up. I think 'there is something there' to be explored further. The problems identified are very real.\nSome existing solutions let you specify 'glue like' service APIs (e.g. protobuf, thrift, etc.) and generate client or server stubs in your language that give you language internal support for APIs. It might be useful to contrast those with this idea.\n\nOne different is this"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Each glue program would publish this graph on some predetermined port ie :5555."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like this - pushing stuff into the runtime, live system right next to the service. IOW, the objects\/services\/apis should publish their properties (rather than storing them offline in some source control system)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1540318962.000100",
        "client_msg_id": "9e65b109-ede1-455e-a838-ac23364be5c1",
        "text": "Also. the paradox IIUC, is a key observation - programming within a program\/language\/environment is much more fluent and cohesive than when programming to connect different programs together. Why?\n\nAre there other ways to solve\/avoid this? E.g. how much of the types\/schema models should be provided by the programming languages vs the system itself?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w5T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also. the paradox IIUC, is a key observation - programming within a program\/language\/environment is much more fluent and cohesive than when programming to connect different programs together. Why?\n\nAre there other ways to solve\/avoid this? E.g. how much of the types\/schema models should be provided by the programming languages vs the system itself?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1540328769.000100",
        "client_msg_id": "07a4c31f-54b4-49dc-8ac1-efc923b722e0",
        "text": "Sorry for the delay all. Was heads down on a release yesterday.\n\n<@UC21F8Q48>  -- I agree there are some big benefits &amp; ideally you wouldn't tie the representation to a specific language. OpenAPI is pretty great so I'd imagine targeting that or a similar spec. It does get more difficult to do this across language but I think Optic can help w\/ that.\n\nRe: State management. This is just an unrelated idea I tried to jam in there. I've always thought that global state  creates a huge surface area for bugs to flow across. A per-client actor model puts all the important state info for each consumer in the same place.\n\n<@UDCLT064X> lol on the name. Agree re strong typing. I really like strong types w\/inference. Best of both worlds. Scala, Rust &amp; Swift shine here.\n\n<@U8A5MS6R1> thanks man! I will write something up to contrast the two approaches for sure -- will be helpful research. I totally agree that runtimes are underused. Anything live should also explain itself to other things that are live. I imagine compilers reading in these descriptions constantly and running validations on the connecting code.\n\nRe: paradox -- One idea I've had is to add a method to the base class for Object in every lang called toDescription(). It could serialize the object into a higher level concept conforming to a shared schema for an API endpoint or anything else you might want. The compiler collects every instance of these descriptions, throws them in a graph and publishes them so other services can consume them. Maybe this is just a library someone makes and not a lang, but it should exist.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1540147440.000100",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n+Egx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry for the delay all. Was heads down on a release yesterday.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": "  -- I agree there are some big benefits & ideally you wouldn't tie the representation to a specific language. OpenAPI is pretty great so I'd imagine targeting that or a similar spec. It does get more difficult to do this across language but I think Optic can help w\/ that.\n\nRe: State management. This is just an unrelated idea I tried to jam in there. I've always thought that global state  creates a huge surface area for bugs to flow across. A per-client actor model puts all the important state info for each consumer in the same place.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDCLT064X"
                            },
                            {
                                "type": "text",
                                "text": " lol on the name. Agree re strong typing. I really like strong types w\/inference. Best of both worlds. Scala, Rust & Swift shine here.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " thanks man! I will write something up to contrast the two approaches for sure -- will be helpful research. I totally agree that runtimes are underused. Anything live should also explain itself to other things that are live. I imagine compilers reading in these descriptions constantly and running validations on the connecting code.\n\nRe: paradox -- One idea I've had is to add a method to the base class for Object in every lang called toDescription(). It could serialize the object into a higher level concept conforming to a shared schema for an API endpoint or anything else you might want. The compiler collects every instance of these descriptions, throws them in a graph and publishes them so other services can consume them. Maybe this is just a library someone makes and not a lang, but it should exist."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]