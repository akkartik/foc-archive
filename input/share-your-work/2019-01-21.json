[
    {
        "subtype": "channel_topic",
        "user": "U5TCAFTD3",
        "topic": "Get feedback on your projects",
        "text": "set the channel topic: Get feedback on your projects",
        "type": "message",
        "ts": "1548086585.038300",
        "reactions": [
            {
                "name": "wink",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548087037.044600",
        "edited": {
            "user": "U5TCAFTD3",
            "ts": "1548087789.000000"
        },
        "client_msg_id": "cb09259f-ef16-4d72-a955-e80702156fd6",
        "text": "As many of you know, I'm obsessed with original-Conal-Elliott FRP. It took be forever to understand it, so I've balked at trying to explain it to others.\n\nLast week, <@U6KQ2S410> convinced me to spend some real time on an essay to explain it. I just finished draft 1. (So please don't share around on social media just yet.)\n\n<https:\/\/futureofcoding.org\/drafts\/dctp>\n\nThe essay was written for people who already like ReactJS and functional programming, and maybe even have some Haskell experience.\n\nIt's at least a 20-minute read, so give it a go when you get a chance. No rush. At this stage, I'm looking for birds-eye-view feedback. Do you follow the overall argument arc? If not, where do you fall through the cracks? Does the tone work for you or is it too informal?\n\nReally appreciate anyone taking the time to review and give feedback. This piece is important to me :heart:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "reply_count": 26,
        "reply_users_count": 8,
        "latest_reply": "1548548454.060300",
        "reply_users": [
            "UFB8STN7K",
            "U5TCAFTD3",
            "UCKRZS3DZ",
            "UC2A2ARPT",
            "UC6997THT",
            "UFD2JRE58",
            "UA14TGLTC",
            "UD43R8ZFV"
        ],
        "replies": [
            {
                "user": "UFB8STN7K",
                "ts": "1548095621.044900"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548095861.045100"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548095920.045300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548095986.045500"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548096051.045700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548096088.046000"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548096140.046200"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548096155.046400"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548096182.046600"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548096218.046800"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548096354.047000"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548096406.047200"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1548096789.047400"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1548097635.047600"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1548098974.047900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1548103764.048100"
            },
            {
                "user": "UC6997THT",
                "ts": "1548141414.049000"
            },
            {
                "user": "UC6997THT",
                "ts": "1548141503.049200"
            },
            {
                "user": "UFD2JRE58",
                "ts": "1548155845.049600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1548213012.051200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1548213020.051400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1548217597.052400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1548218368.053100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1548219308.053300"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1548453660.057600"
            },
            {
                "user": "UD43R8ZFV",
                "ts": "1548548454.060300"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1548587226.000208",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mOyPF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As many of you know, I'm obsessed with original-Conal-Elliott FRP. It took be forever to understand it, so I've balked at trying to explain it to others.\n\nLast week, "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " convinced me to spend some real time on an essay to explain it. I just finished draft 1. (So please don't share around on social media just yet.)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/drafts\/dctp"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe essay was written for people who already like ReactJS and functional programming, and maybe even have some Haskell experience.\n\nIt's at least a 20-minute read, so give it a go when you get a chance. No rush. At this stage, I'm looking for birds-eye-view feedback. Do you follow the overall argument arc? If not, where do you fall through the cracks? Does the tone work for you or is it too informal?\n\nReally appreciate anyone taking the time to review and give feedback. This piece is important to me "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F",
                    "UA14TGLTC",
                    "UFD2JRE58",
                    "UBSMEUXAA",
                    "U8A5MS6R1",
                    "UDJ8A6RNH",
                    "UCXR52MU2",
                    "UCSJ44X1S"
                ],
                "count": 8
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548095621.044900",
        "client_msg_id": "a555f472-d62b-46db-afcf-2378168bd55d",
        "text": "First: thanks for writing this up. I appreciate the effort you’ve put in, and I think the article is heading in the right direction.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X\/YAm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First: thanks for writing this up. I appreciate the effort you’ve put in, and I think the article is heading in the right direction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548095861.045100",
        "client_msg_id": "f02d572e-dae4-456e-96d9-18dbc5d59e85",
        "text": "My main critique: the article feels disjointed, and the primary claims aren’t sufficiently backed up by the examples. For example, you introduce denotational programming, along with three fairly abstract claims about its benefits. Then you explain the basics of continuous time and interactivity, but those lessons aren’t placed in context of your claims. I think a much stronger article would have a main running example. You would implement that example in both “normal” JS and in your alternative version. You could demonstrate how simple extensions to your example are easy in the FRP version (showing modularity), and perhaps you could embed a subtle bug in the JS version (showing how reasoning is more difficult).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zur2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My main critique: the article feels disjointed, and the primary claims aren’t sufficiently backed up by the examples. For example, you introduce denotational programming, along with three fairly abstract claims about its benefits. Then you explain the basics of continuous time and interactivity, but those lessons aren’t placed in context of your claims. I think a much stronger article would have a main running example. You would implement that example in both “normal” JS and in your alternative version. You could demonstrate how simple extensions to your example are easy in the FRP version (showing modularity), and perhaps you could embed a subtle bug in the JS version (showing how reasoning is more difficult)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UEH6T3RJB"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548095920.045300",
        "client_msg_id": "8d07fc6a-9ef8-451d-ad11-c207d558cf03",
        "text": "As it stands, the examples provided are not enough to convince me of your claims, particularly since some of them (like the odd-button-generator) are contrived.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HxL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As it stands, the examples provided are not enough to convince me of your claims, particularly since some of them (like the odd-button-generator) are contrived."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548095986.045500",
        "client_msg_id": "1d20b6df-a466-4e45-ba2b-7e1e325b4f76",
        "text": "Wonderful feedback! Thanks <@UFB8STN7K>. That's a great idea",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hJWP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wonderful feedback! Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": ". That's a great idea"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFB8STN7K"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548096051.045700",
        "client_msg_id": "5103dbfd-3fc2-4ce9-b242-e13427fb6d2b",
        "text": "I would focus on having significantly smaller scope to the article. “FRP Will Save Programming” is an extremely broad claim that’s difficult to defend. Distill out the essential concepts of FRP\/DTCP\/whatnot, show a few concise examples, maybe add your generalizations at the end.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FN7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would focus on having significantly smaller scope to the article. “FRP Will Save Programming” is an extremely broad claim that’s difficult to defend. Distill out the essential concepts of FRP\/DTCP\/whatnot, show a few concise examples, maybe add your generalizations at the end."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548096088.046000",
        "client_msg_id": "7a12ba26-918a-462e-90df-f363f41f94fb",
        "text": "This is a good point",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fj1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a good point"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548096140.046200",
        "client_msg_id": "7a911c77-33df-4c74-9f5e-ccf9acca54e5",
        "text": "Is there a way for me to not defend the point but merely show a new perspective for people who are potentially eager for it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sz0W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way for me to not defend the point but merely show a new perspective for people who are potentially eager for it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548096155.046400",
        "client_msg_id": "8befb09e-5ef3-4be2-aad2-79d0b2dea7a6",
        "text": "Does that make sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EQFj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does that make sense?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548096182.046600",
        "client_msg_id": "1530913e-0eb4-49be-9861-64c27f5858dd",
        "text": "One last thing: I would focus your efforts on the “interactivity” section. The continuous time part makes perfect sense--representing graphics as a pure function of time--but the interactivity part lost me. There’s a lot of helper functions here I don’t understand, there’s a framework I don’t understand, and none of it is really explained. What is a `function*`? Why is this a coroutine? Is this the simplest way to implement these functions? This is a serious concern, because I would imagine most JS people reading this would think “wow this is crazy Haskell code. I could do this just as easily with a for loop and a counter variable.” You run the risk of turning people off from the paradigm.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Afn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One last thing: I would focus your efforts on the “interactivity” section. The continuous time part makes perfect sense--representing graphics as a pure function of time--but the interactivity part lost me. There’s a lot of helper functions here I don’t understand, there’s a framework I don’t understand, and none of it is really explained. What is a "
                            },
                            {
                                "type": "text",
                                "text": "function*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Why is this a coroutine? Is this the simplest way to implement these functions? This is a serious concern, because I would imagine most JS people reading this would think “wow this is crazy Haskell code. I could do this just as easily with a for loop and a counter variable.” You run the risk of turning people off from the paradigm."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548096218.046800",
        "client_msg_id": "55e9977d-fd35-4fed-8995-fe75084c0fa4",
        "text": "Yes, great point! That's a great comment as well",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3r8X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, great point! That's a great comment as well"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548096354.047000",
        "client_msg_id": "6f8cdda7-c652-4197-a63a-02e112dc4bcc",
        "text": "I think you should consider what points you want to make. Why should people care about this new perspective? You already enumerated a few reasons in the denotative programming section, so just go for those. “FRP Can Simplify UI Programming” seems like a sensible title for such a perspective.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aOWn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you should consider what points you want to make. Why should people care about this new perspective? You already enumerated a few reasons in the denotative programming section, so just go for those. “FRP Can Simplify UI Programming” seems like a sensible title for such a perspective."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548096406.047200",
        "client_msg_id": "788ff7bc-8070-4d12-93ff-b9882aaf61cc",
        "text": "Also, semi-related, you may be interested in the classic graphics essay “A Pixel Is _Not_ A Little Square!” <http:\/\/alvyray.com\/Memos\/CG\/Microsoft\/6_pixel.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yLOBV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, semi-related, you may be interested in the classic graphics essay “A Pixel Is "
                            },
                            {
                                "type": "text",
                                "text": "Not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " A Little Square!” "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/alvyray.com\/Memos\/CG\/Microsoft\/6_pixel.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1548096789.047400",
        "client_msg_id": "927f9a38-361c-4792-9e8f-fab69702dd2b",
        "text": "Actual last thing… I’m not a huge fan of the example in from Li Haoyi’s blog. It feels like a strawman. In standard OOP practice, I would write:\n```\nfingers = fingers.soak2seconds(sugar2.dissolve(espresso))\nmixture\n  .beat(cheese.beat())\n  .fold(cream)\n  .assemble(fingers)\n  ...\n```\n\nAnd that reads way more naturally to me than the denotational version, which has the classic “inside-out” functional programming readability issue.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NbA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actual last thing… I’m not a huge fan of the example in from Li Haoyi’s blog. It feels like a strawman. In standard OOP practice, I would write:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fingers = fingers.soak2seconds(sugar2.dissolve(espresso))\nmixture\n  .beat(cheese.beat())\n  .fold(cream)\n  .assemble(fingers)\n  ...\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAnd that reads way more naturally to me than the denotational version, which has the classic “inside-out” functional programming readability issue."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1548097635.047600",
        "client_msg_id": "52e9f867-2395-4944-b189-3f4ef86e6a77",
        "text": "That's an interesting point. I may need to look at it more closely but I think your OOP syntax isnt incompatible with denotational principles",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B6B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's an interesting point. I may need to look at it more closely but I think your OOP syntax isnt incompatible with denotational principles"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1548098974.047900",
        "client_msg_id": "7cc8afbf-5fb7-4b42-aa74-2c1749e0e1dc",
        "text": "&gt; The only solution is to “move I\/O entirely out of our programming model into the implementation of a denotationally simple model for whole systems.”\n\nSo DCTP can used only as a DSL inside something bigger and imperative, right? Seems like there is no way around it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5etw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only solution is to “move I\/O entirely out of our programming model into the implementation of a denotationally simple model for whole systems.”"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nSo DCTP can used only as a DSL inside something bigger and imperative, right? Seems like there is no way around it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1548103764.048100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1548104170.000000"
        },
        "client_msg_id": "3946d947-4a6f-4685-9aa7-c3410b5f9d56",
        "text": "Gonna come back with some feedback in a bit, after I've finished the first read-through, but...\n\nI mentioned the Haskellcast Conal interview, about 9 months ago, in a video chat we had with Shaun Lebron and Dennis Heihoff. Maybe you heard about it before that — :shrug: — but if that was the first time it crossed your path, well, I'm glad it played a part in leading to this essay! It's a fantastic discussion, agreed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lTYGa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gonna come back with some feedback in a bit, after I've finished the first read-through, but...\n\nI mentioned the Haskellcast Conal interview, about 9 months ago, in a video chat we had with Shaun Lebron and Dennis Heihoff. Maybe you heard about it before that — "
                            },
                            {
                                "type": "emoji",
                                "name": "shrug",
                                "unicode": "1f937"
                            },
                            {
                                "type": "text",
                                "text": " — but if that was the first time it crossed your path, well, I'm glad it played a part in leading to this essay! It's a fantastic discussion, agreed."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1548141414.049000",
        "edited": {
            "user": "UC6997THT",
            "ts": "1548141659.000000"
        },
        "client_msg_id": "85788657-d417-4365-abf7-3f179ec9bf94",
        "text": "A bunch of random comments: sorry if this is harsh\n\nI've seen that example of tiramisu before and the first is **far more easy to follow** than the second.\n\nTo me it's like reverse polish notation (RPN) vs infix or whatever it's called. As someone with lisp experience and forth experience I get RPN but I count myself as an exception. I'm sure all of you get it too but the average person will be lost. I don't agree that having to dig through a bunch of nested parentheses some how makes the data flow obvious. The first one seems vastly more obvious to me. Step 1 flows to step 2, step 2 flows to step 3, etc.  Yes, as a programmer I get all the benefits of the RPN tiramisu recipe but that's not how people think. They read a recipe top to bottom and follow the top instructions before they bottom.\n\nI guess what I'm trying to say is I'm not denying the RPN style is better for many definitions of better but one of those benefits is not \"The beauty of the denotational style is that the flow of data is so clear\"\n\nIt's not clear at all. Rather, after you've spent time parsing it in your mind you can deduce a bunch of things you can't with the top style. But \"clear\"? Not even a little\n\n---\n\nAnother benefit claims to be \"Equational reasoning. In denotational programming, the equal sign (=) means what it does in a mathematics textbook\"\n\nBeing like a math textbooks is not better except for mathematicians. Most people find math equations cryptic and hard to parse.\n\n---\n\nThe first GPU area where you made functions to draw moire patterns and circle also set off alarm bells. Shadertoy is a famous site which I guess you could call DCTP for fragment shaders. But, they show how poor this style works for real world problems. Compare any shadertoy shader that draws a city or a forest to an actual game that draws a city or a forest. The shadertoy shader will run at less than 1fps fullscreen. The game will run at 60fps on the same computer and if it's it a good game will look significantly better.\n\nI know your point was demonstrate something else, just pointing out it was raising concerns with it's direction and is related to a recent thread I started which is that FRP\/DCTP seems to fail at perf at scale without just as much extra engineering as non FRP\/DCTP.\n\n---\n\nI got lost at the first counter example. I know what `function*` means and `yield` but it was not remotely clear how yielding a button, followed by the next yield (no clue what it's doing even ignoring liftnow and sample), and then it yields a span. Em, okay, a function that's yielding 3 completely unrelated types? Yea, completely lost.\n\nAfter that it seemed to meander with a bunch of claims with no real connection. I kind of got lost.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m3jg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A bunch of random comments: sorry if this is harsh\n\nI've seen that example of tiramisu before and the first is **far more easy to follow** than the second.\n\nTo me it's like reverse polish notation (RPN) vs infix or whatever it's called. As someone with lisp experience and forth experience I get RPN but I count myself as an exception. I'm sure all of you get it too but the average person will be lost. I don't agree that having to dig through a bunch of nested parentheses some how makes the data flow obvious. The first one seems vastly more obvious to me. Step 1 flows to step 2, step 2 flows to step 3, etc.  Yes, as a programmer I get all the benefits of the RPN tiramisu recipe but that's not how people think. They read a recipe top to bottom and follow the top instructions before they bottom.\n\nI guess what I'm trying to say is I'm not denying the RPN style is better for many definitions of better but one of those benefits is not \"The beauty of the denotational style is that the flow of data is so clear\"\n\nIt's not clear at all. Rather, after you've spent time parsing it in your mind you can deduce a bunch of things you can't with the top style. But \"clear\"? Not even a little\n\n---\n\nAnother benefit claims to be \"Equational reasoning. In denotational programming, the equal sign (=) means what it does in a mathematics textbook\"\n\nBeing like a math textbooks is not better except for mathematicians. Most people find math equations cryptic and hard to parse.\n\n---\n\nThe first GPU area where you made functions to draw moire patterns and circle also set off alarm bells. Shadertoy is a famous site which I guess you could call DCTP for fragment shaders. But, they show how poor this style works for real world problems. Compare any shadertoy shader that draws a city or a forest to an actual game that draws a city or a forest. The shadertoy shader will run at less than 1fps fullscreen. The game will run at 60fps on the same computer and if it's it a good game will look significantly better.\n\nI know your point was demonstrate something else, just pointing out it was raising concerns with it's direction and is related to a recent thread I started which is that FRP\/DCTP seems to fail at perf at scale without just as much extra engineering as non FRP\/DCTP.\n\n---\n\nI got lost at the first counter example. I know what "
                            },
                            {
                                "type": "text",
                                "text": "function*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " means and "
                            },
                            {
                                "type": "text",
                                "text": "yield",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but it was not remotely clear how yielding a button, followed by the next yield (no clue what it's doing even ignoring liftnow and sample), and then it yields a span. Em, okay, a function that's yielding 3 completely unrelated types? Yea, completely lost.\n\nAfter that it seemed to meander with a bunch of claims with no real connection. I kind of got lost."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1548141503.049200",
        "edited": {
            "user": "UC6997THT",
            "ts": "1548141728.000000"
        },
        "client_msg_id": "306b29d3-1941-4fc4-8fce-0baa2293fb7c",
        "text": "One thing that did stick out though is more of the same, this claim\n\n&gt;  I would describe how I want my HTML to look like for any value of state, and then React would figure out what it needs to do (virtual-dom-diffing) to mutate the DOM to look the way I want it to (JQuery-esque mutations). I no longer have to worry about manually, imperatively keeping the state and the DOM in sync. React does it for me\n\nAs pointed out above this is not my experience. It might be the goal but the overhead of managing all those hidden objects ends up killing perf on any non-trivial project and so the abstraction leaks as you have to add more and more ways to prevent react from shuffling so many DOM objects around.\n\nI blame that on the DOM, not on React, but I feel like it's kind of a truism that idealism often fails against reality.\n\nMaybe a good example would actually be a spreadsheet in react with a toolbar showing various formatting options. The toolbar needs to reflect the format of the currently selected cell, possibly multiple cells. Updating any individual cell or cell format, the naive solution would have react generate some intermediate format (virtual dom) of 30 or 40 toolbar settings and then 390 cells (just checked the default Google Spreadsheet on my laptop).  It would then diff all 420 objects only to up the properties of 1 cell.\n\nThe amount of work required to make it just deal with an individual cell and ignore everything else so you get better perf I think is still unfortunately a  important problem with React style FRP.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/ihW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing that did stick out though is more of the same, this claim\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " I would describe how I want my HTML to look like for any value of state, and then React would figure out what it needs to do (virtual-dom-diffing) to mutate the DOM to look the way I want it to (JQuery-esque mutations). I no longer have to worry about manually, imperatively keeping the state and the DOM in sync. React does it for me"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAs pointed out above this is not my experience. It might be the goal but the overhead of managing all those hidden objects ends up killing perf on any non-trivial project and so the abstraction leaks as you have to add more and more ways to prevent react from shuffling so many DOM objects around.\n\nI blame that on the DOM, not on React, but I feel like it's kind of a truism that idealism often fails against reality.\n\nMaybe a good example would actually be a spreadsheet in react with a toolbar showing various formatting options. The toolbar needs to reflect the format of the currently selected cell, possibly multiple cells. Updating any individual cell or cell format, the naive solution would have react generate some intermediate format (virtual dom) of 30 or 40 toolbar settings and then 390 cells (just checked the default Google Spreadsheet on my laptop).  It would then diff all 420 objects only to up the properties of 1 cell.\n\nThe amount of work required to make it just deal with an individual cell and ignore everything else so you get better perf I think is still unfortunately a  important problem with React style FRP."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]