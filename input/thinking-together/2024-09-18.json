[
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1726651545.837029",
        "client_msg_id": "09aea324-0bd7-455a-a6e7-4ed585fa6818",
        "text": "<@UCUSW7WVD> I don’t think that quite gets at what’s interesting to me about the Python test case. I don’t see that script as, like, a degenerate program, in the same way that a single-frozen-frame movie would be a degenerate movie. I think that script DOES take advantage of the dynamism the medium provides. But its output is entirely static! This means you shouldn’t judge something to be a “program” or a “dynamic artifact” solely on the basis of its externally visible behavior treated as a black box. Sometimes you care about how the externally visible behavior responds to edits in the artifact itself. But I don’t know how to pin this down.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AtUcw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I don’t think that quite gets at what’s interesting to me about the Python test case. I don’t see that script as, like, a degenerate program, in the same way that a single-frozen-frame movie would be a degenerate movie. I think that script DOES take advantage of the dynamism the medium provides. But its output is entirely static! This means you shouldn’t judge something to be a “program” or a “dynamic artifact” solely on the basis of its externally visible behavior treated as a black box. Sometimes you care about how the externally visible behavior responds to edits in the artifact itself. But I don’t know how to pin this down."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1726652964.016439",
        "client_msg_id": "ea9e86e7-7683-437f-8c68-b20b6b0db2ac",
        "text": "<@U07BD7U4S4R> I think you've basically nailed it in what you said there. This is exactly how I started my journey: looking for \"the essence of programming\". I described it as seeking a \"Target and Domain Independent\" programming language: one that was unconstrained by having to execute it on specific hardware Target, and untarnished by the needs of any given Domain. My conclusion was exactly what you're saying: that programs move one state to the next. That's basically it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tKLi\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U07BD7U4S4R"
                            },
                            {
                                "type": "text",
                                "text": " I think you've basically nailed it in what you said there. This is exactly how I started my journey: looking for \"the essence of programming\". I described it as seeking a \"Target and Domain Independent\" programming language: one that was unconstrained by having to execute it on specific hardware Target, and untarnished by the needs of any given Domain. My conclusion was exactly what you're saying: that programs move one state to the next. That's basically it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1726674940.173979",
        "client_msg_id": "8d3de4a0-266d-4e0f-9f56-bec2706f4de2",
        "text": "Yes, absolutely. It needn't be a complex set of institutional incentives, even; but your response is not knowable to me, thus you can form a niche that I wouldn't be able to predict. See, if I ascribe someone a fixed utility function, then - first off, that says more about me than about them. But let's say the point of a given role is that I can predict that person's utility function, i.e. what kinds of resource and relationship I can offer in exchange for their labor.\n\nNow if you've got four hats, then I don't know what your switching condition is. Maybe you want to work from home because of family commitments; or conversely, maybe those are pushing you to the office. And all that gives you freedom from the simplifying gaze of post-Fordism and (ugh) scientific management, in terms of being able to defy its expectations. (Not as in being able to make money outside of it.)\n\nNow a really important corollary of the 'freedom of multiple hats' is the ability to switch between metrics, critique, and other evaluation strategies. That's going to make up the part of my tenure packet, or grant proposal, that I can actually design on the spot. It's critical that my strategy be legible to the manager, or the funding source, or whoever is evaluating that. And that's how I hit the impasse where some methods are respectable right now, and some other methods are actually productive for my questions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726527776.289049",
        "parent_user_id": "U05UK5T7LPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/nzDh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, absolutely. It needn't be a complex set of institutional incentives, even; but your response is not knowable to me, thus you can form a niche that I wouldn't be able to predict. See, if I ascribe someone a fixed utility function, then - first off, that says more about me than about them. But let's say the point of a given role is that I can predict that person's utility function, i.e. what kinds of resource and relationship I can offer in exchange for their labor.\n\nNow if you've got four hats, then I don't know what your switching condition is. Maybe you want to work from home because of family commitments; or conversely, maybe those are pushing you to the office. And all that gives you freedom from the simplifying gaze of post-Fordism and (ugh) scientific management, in terms of being able to defy its expectations. (Not as in being able to make money outside of it.)\n\nNow a really important corollary of the 'freedom of multiple hats' is the ability to switch between metrics, critique, and other evaluation strategies. That's going to make up the part of my tenure packet, or grant proposal, that I can actually design on the spot. It's critical that my strategy be legible to the manager, or the funding source, or whoever is evaluating that. And that's how I hit the impasse where some methods are respectable right now, and some other methods are actually productive for my questions."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1726675190.969349",
        "edited": {
            "user": "U05UK5T7LPP",
            "ts": "1726675803.000000"
        },
        "client_msg_id": "b7466558-ab5b-4b1a-81ea-7623fca803ee",
        "text": "Which is not to say that just browbeating the managers into respecting humanistic inquiry is a reasonable solution for getting grants. (Or conversely, to argue that research artifacts themselves act as repositories of knowledge.) But there's a version of our institutions that rewards broader knowledge than a manager 'really needs' to have, and is capable of addressing the long-running _n-cultures problem_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726527776.289049",
        "parent_user_id": "U05UK5T7LPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K0+m3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which is not to say that just browbeating the managers into respecting humanistic inquiry is a reasonable solution for getting grants. (Or conversely, to argue that research artifacts themselves act as repositories of knowledge.) But there's a version of our institutions that rewards broader knowledge than a manager 'really needs' to have, and is capable of addressing the long-running"
                            },
                            {
                                "type": "text",
                                "text": " n-cultures problem",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1726711210.906959",
        "client_msg_id": "4D027378-0302-4634-964E-8185B1D9E8B8",
        "text": "Is the ability to pick data points off a wire lead to non-deterministic behavior of the system?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726374402.150029",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/WCo0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is the ability to pick data points off a wire lead to non-deterministic behavior of the system?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Reminds me of this diagram",
        "files": [
            {
                "id": "F07MMR2K9PH",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0378MDUG1Y",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CTNnR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of this diagram"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1726711400.263499",
        "client_msg_id": "5A40F052-AD2D-4B06-991D-61524E94645A",
        "thread_ts": "1726374402.150029",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1726712831.583009",
        "client_msg_id": "782749d7-b141-4f07-ad6d-96d1459e4300",
        "text": "re: state vs. IO\nit seems to me that IO is state too. The question is: at what point it becomes more useful\/convenient to start distinguishing between the two.\nWhat would be the difference?\nShould *the* programming language treat them as the same, but let user introduce the difference when necessary. Or should the difference be baked in already?\nWhat is the difference, again?\nWhat other differences between seemingly same things are better (\"better\" when, for whom?) to be baked into *the* language?\n\nIt seems that the programming languages game is all about designing syntax(tool) convenience proportionally to task frequency. Seeing a lot of same things as different – breeds proliferation of tools. So maybe seeing similar things as the same would reduce tools ... \"fragmentation\"? (e.g. java's classes with their personal new-every-time-DSLs vs clojure's \"everything is a map, but these several functions is all you ever have to learn\")",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726569392.396589",
        "parent_user_id": "U07BD7U4S4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qzwlh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: state vs. IO\nit seems to me that IO is state too. The question is: at what point it becomes more useful\/convenient to start distinguishing between the two.\nWhat would be the difference?\nShould "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming language treat them as the same, but let user introduce the difference when necessary. Or should the difference be baked in already?\nWhat is the difference, again?\nWhat other differences between seemingly same things are better (\"better\" when, for whom?) to be baked into "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " language?\n\nIt seems that the programming languages game is all about designing syntax(tool) convenience proportionally to task frequency. Seeing a lot of same things as different – breeds proliferation of tools. So maybe seeing similar things as the same would reduce tools ... \"fragmentation\"? (e.g. java's classes with their personal new-every-time-DSLs vs clojure's \"everything is a map, but these several functions is all you ever have to learn\")"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]