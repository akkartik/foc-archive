[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721474362.047749",
        "client_msg_id": "df4f581d-47c2-4c71-b1dc-6777a3fb4343",
        "text": "Level 3 is straight-forward (and “easy”) with currently-available technologies:\n1. use diagram editors that save diagrams in some kind of XML or JSON format (I use <http:\/\/draw.io|draw.io>, I use Kinopio, I’ve used yEd in the past), then, use XML parsing libraries or OhmJS to inhale the info\n2. isolate software components from one another - make each unit of software be completely stand-alone - meaning data *and* control flow - [hint: closures, queues, avoid function-calling for inter-component communication (level-3 innovation is discouraged by function-calling-think (in fact, at one point, I used mostly Prolog for thinking along with Javascript and Bash and Lisp for clean-up))]\n3. think of current GPLs - Haskell, Python, Javascript, Rust, Lisp - as just *assembly* languages for level 3.\n(aside: meaning of “easy” == Zac Nowicki of Kagi created a <http:\/\/draw.io|draw.io>+Odin based Level 3 DPL for me in less than a week)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YZAbR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Level 3 is straight-forward (and “easy”) with currently-available technologies:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "use diagram editors that save diagrams in some kind of XML or JSON format (I use "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/draw.io",
                                        "text": "draw.io"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", I use Kinopio, I’ve used yEd in the past), then, use XML parsing libraries or OhmJS to inhale the info"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "isolate software components from one another - make each unit of software be completely stand-alone - meaning data "
                                    },
                                    {
                                        "type": "text",
                                        "text": "and",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " control flow - [hint: closures, queues, avoid function-calling for inter-component communication (level-3 innovation is discouraged by function-calling-think (in fact, at one point, I used mostly Prolog for thinking along with Javascript and Bash and Lisp for clean-up))]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "think of current GPLs - Haskell, Python, Javascript, Rust, Lisp - as just "
                                    },
                                    {
                                        "type": "text",
                                        "text": "assembly",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " languages for level 3."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(aside: meaning of “easy” == Zac Nowicki of Kagi created a "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": "+Odin based Level 3 DPL for me in less than a week)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1721485484.377879",
        "client_msg_id": "34088456-6207-4b5d-9181-ce361236b379",
        "text": "ok, interesting, just a prototype but if you click on the plot it adds a point there. The nice thing is that you can work in the coordinate space of the diagram, not pixels or viewport. Maybe plot can be an input :thinking_face:\n<https:\/\/observablehq.com\/d\/e627aaaaa9857257>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721317807.883659",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "image_url": "https:\/\/static.observableusercontent.com\/thumbnail\/e057bdd4575e5260c4e76bb71b18b988a3bd968e649d8ed89558ea5cebb4c681.jpg",
                "image_width": 640,
                "image_height": 400,
                "image_bytes": 4713,
                "from_url": "https:\/\/observablehq.com\/d\/e627aaaaa9857257",
                "service_icon": "https:\/\/static.observablehq.com\/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "ts": 1721484997,
                "id": 1,
                "original_url": "https:\/\/observablehq.com\/d\/e627aaaaa9857257",
                "fallback": "Observable: Direct Manipulation Plot Experiment",
                "title": "Direct Manipulation Plot Experiment",
                "title_link": "https:\/\/observablehq.com\/d\/e627aaaaa9857257",
                "service_name": "Observable"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MuzQQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, interesting, just a prototype but if you click on the plot it adds a point there. The nice thing is that you can work in the coordinate space of the diagram, not pixels or viewport. Maybe plot can be an input "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/d\/e627aaaaa9857257"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721491225.301399",
        "client_msg_id": "9da5f269-90b8-45f7-b3c4-7ecfb074e12c",
        "text": "<@U5STGTB3J> I meant rarely adopted when designing software systems. Simon's discussion is about both natural (evolved) systems and about human-made artifacts (and he says it's for the same reason of economy in construction). His artifact example, a watch, ends up made from nearly decomposable subsystems not through insight into complex systems, but because watchmakers are clever people and end up designing watches in a way that is easier for them to build. In software, I don't see this happening. On the contrary, it is very difficult to achieve such a design, because our toolboxes are set up for strong coupling of submodules via shared dependencies.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721279487.692989",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F1doE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I meant rarely adopted when designing software systems. Simon's discussion is about both natural (evolved) systems and about human-made artifacts (and he says it's for the same reason of economy in construction). His artifact example, a watch, ends up made from nearly decomposable subsystems not through insight into complex systems, but because watchmakers are clever people and end up designing watches in a way that is easier for them to build. In software, I don't see this happening. On the contrary, it is very difficult to achieve such a design, because our toolboxes are set up for strong coupling of submodules via shared dependencies."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1721505021.867499",
        "client_msg_id": "C07FB3B7-974E-475F-A81A-BD08D7899DFD",
        "text": "<https:\/\/merveilles.town\/@zens\/112793890297088472|https:\/\/merveilles.town\/@zens\/112793890297088472>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/merveilles.town\/@zens\/112793890297088472",
                "service_icon": "https:\/\/merveilles.town\/favicon.ico",
                "thumb_url": "https:\/\/assets.merveilles.town\/accounts\/avatars\/000\/094\/513\/original\/6fb0fdd82cb9b193.png",
                "thumb_width": 96,
                "thumb_height": 96,
                "ts": 1721098179,
                "id": 1,
                "original_url": "https:\/\/merveilles.town\/@zens\/112793890297088472",
                "fallback": "Merveilles: Luci for dyeing (@zens@merveilles.town)",
                "text": "a huge formative experience happened when I was 16. I was brought into my mother’s office and hired to compell a guy to use his computer who was refusing to use his computer, and exclusively used his IBM selectric. \n\nFirst up, the guy was an unlikable jerk. However, first thing he does when I get there is refuse to even talk to me about the situation until AFTER I read The Invisible Computer by Donald Norman. \n\nIt’s a good book I cannot summarise in the 50 characters I have left in this post",
                "title": "Luci for dyeing (@zens@merveilles.town)",
                "title_link": "https:\/\/merveilles.town\/@zens\/112793890297088472",
                "service_name": "Merveilles"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fgHOx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/merveilles.town\/@zens\/112793890297088472",
                                "text": "https:\/\/merveilles.town\/@zens\/112793890297088472"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UML4ZEKDK",
                    "U05UK5T7LPP"
                ],
                "count": 3
            }
        ]
    }
]