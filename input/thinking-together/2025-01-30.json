[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1738255027.264089",
        "client_msg_id": "09927bbe-91b3-454a-a655-e7966d0ec6e5",
        "text": "<https:\/\/registerspill.thorstenball.com\/p\/how-might-ai-change-programming|How might AI change programming?>\n\nInteresting list of questions to think about",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738255027.264089",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1738617852.709789",
        "reply_users": [
            "U05PY5AQCA2",
            "UA14TGLTC",
            "U0887QU9G2V"
        ],
        "replies": [
            {
                "user": "U05PY5AQCA2",
                "ts": "1738268131.554029"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1738308674.250209"
            },
            {
                "user": "U0887QU9G2V",
                "ts": "1738617852.709789"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4792e958-4010-409b-bfd3-022620df92e3_964x498.png",
                "image_width": 964,
                "image_height": 498,
                "image_bytes": 44653,
                "from_url": "https:\/\/registerspill.thorstenball.com\/p\/how-might-ai-change-programming",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F739b9dad-50d5-47bb-b804-491a05807afd%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/registerspill.thorstenball.com\/p\/how-might-ai-change-programming",
                "fallback": "How might AI change programming?",
                "text": "It will change it. But how?",
                "title": "How might AI change programming?",
                "title_link": "https:\/\/registerspill.thorstenball.com\/p\/how-might-ai-change-programming",
                "service_name": "registerspill.thorstenball.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gNoHC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/registerspill.thorstenball.com\/p\/how-might-ai-change-programming",
                                "text": "How might AI change programming?"
                            },
                            {
                                "type": "text",
                                "text": "\n\nInteresting list of questions to think about"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1738268131.554029",
        "client_msg_id": "B2F584C9-C26A-4DE1-BCE1-6D1777F72144",
        "text": "When the efficiency of use of an input drops dramatically, so the price of the product drops dramatically, the demand will rise, maybe enough to raise the price of the input:\n\nThere may be a boom in demand for programmers.\n\nNvidia stock may yet go much higher.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738255027.264089",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B\/ecv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When the efficiency of use of an input drops dramatically, so the price of the product drops dramatically, the demand will rise, maybe enough to raise the price of the input:\n\nThere may be a boom in demand for programmers.\n\nNvidia stock may yet go much higher."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1738281403.545119",
        "client_msg_id": "8f1868b4-aa32-45d9-8ca6-de834bafe238",
        "text": "Is it neuro-symbolic AI if a generative AI system is used to generate a symbolic representation, which is then modified by a human user, and provided back to the generative AI in a later phase? Or does neuro-generative AI specifically require _automated_ _reasoning_ over the symbolic knowledge? I'm playing with a system for editing propositional argument maps that were generated by an LLM, and I'm not sure that counts. Is it \"reasoning over symbolic knowledge\" if a symbolic data structure is only being used to generate a graphical UI? It seems borderline, but I'm inclined to think not, and if we aren't reasoning over it, it doesn't count...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738281403.545119",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1738753049.273259",
        "reply_users": [
            "UJBAJNFLK",
            "U08294YLWJH"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1738302718.280189"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1738752864.076569"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1738752944.622989"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1738753049.273259"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2RgtU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it neuro-symbolic AI if a generative AI system is used to generate a symbolic representation, which is then modified by a human user, and provided back to the generative AI in a later phase? Or does neuro-generative AI specifically require "
                            },
                            {
                                "type": "text",
                                "text": "automated",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "reasoning",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " over the symbolic knowledge? I'm playing with a system for editing propositional argument maps that were generated by an LLM, and I'm not sure that counts. Is it \"reasoning over symbolic knowledge\" if a symbolic data structure is only being used to generate a graphical UI? It seems borderline, but I'm inclined to think not, and if we aren't reasoning over it, it doesn't count..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Hey, folks. I'm experimenting with a universal structured input interface for my research project. The idea is that commands\/functions will provide a schema and invoking them prompts the user with a form. I'm pushing for super tight constraints on information density (I want interfaces to spread over time to save screen space, non-negotiable). Now since inputs are going to be generated I cannot have exceptional designs\/behavior – it's all going to be rigorously data driven and I can only affect the design\/experience by changing the data model. Below are two videos showing how a user would invoke a function for data input. Each video represents a distinct data model. The one with a tabular data model yields a short \"time-to-first-field\" (less overhead) interaction. The one with a composable tree model (much much more powerful) yields more overhead (2 more steps to reach the first field). Can you share your opinions? Not seeking any specific kind of feedback, just wanna hear your thoughts.",
        "files": [
            {
                "id": "F08B6S2S0VA",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F08AXMU04PQ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "USitk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, folks. I'm experimenting with a universal structured input interface for my research project. The idea is that commands\/functions will provide a schema and invoking them prompts the user with a form. I'm pushing for super tight constraints on information density (I want interfaces to spread over time to save screen space, non-negotiable). Now since inputs are going to be generated I cannot have exceptional designs\/behavior – it's all going to be rigorously data driven and I can only affect the design\/experience by changing the data model. Below are two videos showing how a user would invoke a function for data input. Each video represents a distinct data model. The one with a tabular data model yields a short \"time-to-first-field\" (less overhead) interaction. The one with a composable tree model (much much more powerful) yields more overhead (2 more steps to reach the first field). Can you share your opinions? Not seeking any specific kind of feedback, just wanna hear your thoughts."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1738294629.091119",
        "edited": {
            "user": "USLACKBOT",
            "ts": "1738295801.000000"
        },
        "client_msg_id": "3179d19d-8707-4142-a1b9-3bff582da6d8",
        "thread_ts": "1738294629.091119",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1738295723.670969",
        "reply_users": [
            "U08A3DJ5VKM"
        ],
        "replies": [
            {
                "user": "U08A3DJ5VKM",
                "ts": "1738295723.670969"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "U08A3DJ5VKM",
        "type": "message",
        "ts": "1738295723.670969",
        "edited": {
            "user": "U08A3DJ5VKM",
            "ts": "1738295806.000000"
        },
        "client_msg_id": "f0ddab37-6847-4fa2-ba86-0e3c1b81569b",
        "text": "just to clarify the deal with spreading interfaces over time, since most tech minds find them so weird and wasteful: it's super easy to create arbitrarily complex interfaces where you cram lots of affordances in the screen, it can be done in an infinite number of ways; the opposite is not true; if you have minimal space to work, then there's a very small set of usable interfaces for any given interaction pattern. I want to find those minimal interfaces first, as the other kind I can do at any time",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f15ff7293c76",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-24\/8368890056976_f15ff7293c7610751dc7_72.jpg",
            "first_name": "Jon",
            "real_name": "Jon Secchis",
            "display_name": "Jon Secchis",
            "team": "T5TCAFTA9",
            "name": "jon979",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738294629.091119",
        "parent_user_id": "U08A3DJ5VKM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o1RpT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just to clarify the deal with spreading interfaces over time, since most tech minds find them so weird and wasteful: it's super easy to create arbitrarily complex interfaces where you cram lots of affordances in the screen, it can be done in an infinite number of ways; the opposite is not true; if you have minimal space to work, then there's a very small set of usable interfaces for any given interaction pattern. I want to find those minimal interfaces first, as the other kind I can do at any time"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1738302718.280189",
        "client_msg_id": "f44a6541-6040-41e5-a097-a5aa40ce8b85",
        "text": "Is this just about jargon? That's so fluent around AI that I wouldn't worry about it at this point in time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738281403.545119",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DnxXb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this just about jargon? That's so fluent around AI that I wouldn't worry about it at this point in time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1738308674.250209",
        "client_msg_id": "bd276e75-1f57-473b-afc7-16fb429104fd",
        "text": "These are some great questions.  Hot takes...\n\n&gt; Will we never see another new programming language reach the mainstream?\nEven at this point, you can drop your syntax into a prompt and LLMs can pick it up reasonably well.  A better technique will to be to automatically translate a bunch of program and then use those to retrain.  Similar sort of thing is happening with teaching LLMs math.  What we're beginning to see is feedback between more analytical systems and \"intuitive\" pattern recognizers.  It's all janky now, but results seem promising.\n\n&gt; Will we see languages that are optimized for synthetic data generation? ... Will we change how we modularize code? ... When will we store the prompt alongside the code it generated?\nI bet!\n\n&gt; Will we see a melting of language servers and LLMs?\nAgain with the intuitive\/symbolic distinction, there's benefit in delineating between creative and verification aspects of an assistant.  Now I want you to try something new vs just check and refine what's already here.\n\n&gt; Will techniques that trade code density for performance, such as loop unrolling, become popular because loops won’t have to be unrolled by hand?\nDon't JITs already do this?  I thought that was one of their superpowers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738255027.264089",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zTolH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are some great questions.  Hot takes...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will we never see another new programming language reach the mainstream?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nEven at this point, you can drop your syntax into a prompt and LLMs can pick it up reasonably well.  A better technique will to be to automatically translate a bunch of program and then use those to retrain.  Similar sort of thing is happening with teaching LLMs math.  What we're beginning to see is feedback between more analytical systems and \"intuitive\" pattern recognizers.  It's all janky now, but results seem promising.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will we see languages that are optimized for synthetic data generation? ... Will we change how we modularize code? ... When will we store the prompt alongside the code it generated?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI bet!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will we see a melting of language servers and LLMs?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAgain with the intuitive\/symbolic distinction, there's benefit in delineating between creative and verification aspects of an assistant.  Now I want you to try something new vs just check and refine what's already here.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will techniques that trade code density for performance, such as loop unrolling, become popular because loops won’t have to be unrolled by hand?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDon't JITs already do this?  I thought that was one of their superpowers."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]