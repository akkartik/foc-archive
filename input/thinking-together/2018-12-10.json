[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1544429097.207900",
        "client_msg_id": "81f604d0-8cfd-497d-ba52-02606cc94caf",
        "text": "Interesting - while I'd seen the video and the blog post earlier, I didn't think of them being incompatible in the least, but felt they're part of the same greater counter culture movement in computing. It seems 'real hackers' -  who memorize large APIs in the blink of eye - would look at Victors work as unnecessary, leaky abstractions, maybe just 'toys' for kids that are interesting but can be ignored. But Victor's anti text file position would brush strongly against the real hacker culture. \"Programming is hard, deal with it\".\n\nI didn't see Victor as presenting a past that had great ideas that were lost, but rather as having great spirit and humility that were lost. Perhaps many ideas were not deeply explored and we latched onto some workable but fundamentally weak ideas that we have been working hard at optimizing ever since, while simultaneously solidifying the hacker club?\n\nI haven't seen the last 50 years.. I've only worked in the industry for about 20 years - the first 10-12 of which were fully immersed and happily seeking out local optimizations, until the creeping feeling of some deep misalignment got the better of me. My perspective has formed and shifted mainly due to talks and references by Alan Kay. One shift was that 'oh there could be fundamentally different ways to do computing' and the other was 'oh computing is primarily a medium and augmentation for humans' instead of being about programming and controlling machines. The latter is the noble goal, though to be honest I'm drawn selfishly to the former. My day to day pain is having ideas that takes an incredible amount of tedium and ceremony to implement. Another one is being locked out of my own software via the preferences page wall. Yet another is having to read large gobs of text while trying to decipher a high level view. I don't think the deep stack can be papered over with another layer of abstraction here - we'll just have to throw away a lot of stuff. Yes the problem isn't just technical, we want to start with a culture that values humane artifacts. I hope the number of people in our counter culture can grow to a critical mass where we don't need the entire world to flip, but we can be self sustaining.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qH=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting - while I'd seen the video and the blog post earlier, I didn't think of them being incompatible in the least, but felt they're part of the same greater counter culture movement in computing. It seems 'real hackers' -  who memorize large APIs in the blink of eye - would look at Victors work as unnecessary, leaky abstractions, maybe just 'toys' for kids that are interesting but can be ignored. But Victor's anti text file position would brush strongly against the real hacker culture. \"Programming is hard, deal with it\".\n\nI didn't see Victor as presenting a past that had great ideas that were lost, but rather as having great spirit and humility that were lost. Perhaps many ideas were not deeply explored and we latched onto some workable but fundamentally weak ideas that we have been working hard at optimizing ever since, while simultaneously solidifying the hacker club?\n\nI haven't seen the last 50 years.. I've only worked in the industry for about 20 years - the first 10-12 of which were fully immersed and happily seeking out local optimizations, until the creeping feeling of some deep misalignment got the better of me. My perspective has formed and shifted mainly due to talks and references by Alan Kay. One shift was that 'oh there could be fundamentally different ways to do computing' and the other was 'oh computing is primarily a medium and augmentation for humans' instead of being about programming and controlling machines. The latter is the noble goal, though to be honest I'm drawn selfishly to the former. My day to day pain is having ideas that takes an incredible amount of tedium and ceremony to implement. Another one is being locked out of my own software via the preferences page wall. Yet another is having to read large gobs of text while trying to decipher a high level view. I don't think the deep stack can be papered over with another layer of abstraction here - we'll just have to throw away a lot of stuff. Yes the problem isn't just technical, we want to start with a culture that values humane artifacts. I hope the number of people in our counter culture can grow to a critical mass where we don't need the entire world to flip, but we can be self sustaining."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCQ4BBFQ9"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1544442685.208200",
        "client_msg_id": "96c51706-3b6b-4793-ab42-cf7a7081c9dc",
        "text": "Ok, cool, thanks! Excited to see",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544018368.066100",
        "parent_user_id": "UEBU4L0BD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bPHsX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, cool, thanks! Excited to see"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1544442713.208400",
        "client_msg_id": "e1d3f71b-3de4-4a89-b6db-4d724693e0b0",
        "text": "Yeah, mindstorms is great!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544018671.068800",
        "parent_user_id": "UEBU4L0BD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/yL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, mindstorms is great!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1544442853.208600",
        "client_msg_id": "1138a4a1-b307-4b54-94a8-42f9240ae678",
        "text": "Some motivations:\n\n• democratize coding\n• simplify coding\n• allow businesses to build software more cost-effectively\n• build simpler languages for teaching coding\n• augment decentralized software creation\n• tools for thinking\n• media to accelerate science",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544018671.068800",
        "parent_user_id": "UEBU4L0BD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fy2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some motivations:\n\n• democratize coding\n• simplify coding\n• allow businesses to build software more cost-effectively\n• build simpler languages for teaching coding\n• augment decentralized software creation\n• tools for thinking\n• media to accelerate science"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1544462284.209400",
        "client_msg_id": "6e2efc5f-69ac-49f1-8441-3f85a144ac6e",
        "text": "A bit of counter perspective to \"Victor’s Arthurian myth of the hacker-kings of yore whose wisdom we have forgotten\": 1. I've never heard a satisfying explanation as to why it has taken so long to replicate the feature list from \"the Mother of all Demos\", this is a bit tongue-in-cheek but until that has a satisfying explanation the \"hacker-king\" title seems appropriate. 2. Much of the history that Bret talks about isn't mainstream knowledge among programmers, I'd be shocked if even a third of the programmers I've worked with had even heard of Engelbart or Kay for example, until their accomplishments are more widely-known I don't think there's any harm in propping them up the way Bret does.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hxl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A bit of counter perspective to \"Victor’s Arthurian myth of the hacker-kings of yore whose wisdom we have forgotten\": 1. I've never heard a satisfying explanation as to why it has taken so long to replicate the feature list from \"the Mother of all Demos\", this is a bit tongue-in-cheek but until that has a satisfying explanation the \"hacker-king\" title seems appropriate. 2. Much of the history that Bret talks about isn't mainstream knowledge among programmers, I'd be shocked if even a third of the programmers I've worked with had even heard of Engelbart or Kay for example, until their accomplishments are more widely-known I don't think there's any harm in propping them up the way Bret does."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1544465061.223900",
        "client_msg_id": "06612B23-5F73-4AE5-AF61-1616FC9678B9",
        "text": "I was confused by the connection <@UEH6T3RJB> was making between Bret’s talk and <@U6KQ2S410>’s article. I wasn’t sure if that was just meant as commentary or criticism. When <@U6KQ2S410> chimed in the strong language used made it appear to be criticism rather than just commentary.\n\nI feel like I agree with both sides but just can’t understand why there are sides…\n\nWhat I can understand is a feeling of tiredness to have fanboys like myself constantly shoving Bret into the spotlight. The demos he shows off are impressive, but just demos and not available to the public to investigate, learn from, or build on. There are no products. And no significant published research.\n\nThat would all be valid criticism. I still believe Bret’s contribution of getting most of us here excited about the topic, and inspire many of us to further investigate what the future of programming could and should be, are worth pointing to his talks, who are just of a different kind and much more entertaining than many of the academic or product talks that might demo substantially more important ideas and technologies.\nOne is not better than the other. \nBoth are valuable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/dNkz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was confused by the connection "
                            },
                            {
                                "type": "user",
                                "user_id": "UEH6T3RJB"
                            },
                            {
                                "type": "text",
                                "text": " was making between Bret’s talk and "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": "’s article. I wasn’t sure if that was just meant as commentary or criticism. When "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " chimed in the strong language used made it appear to be criticism rather than just commentary.\n\nI feel like I agree with both sides but just can’t understand why there are sides…\n\nWhat I can understand is a feeling of tiredness to have fanboys like myself constantly shoving Bret into the spotlight. The demos he shows off are impressive, but just demos and not available to the public to investigate, learn from, or build on. There are no products. And no significant published research.\n\nThat would all be valid criticism. I still believe Bret’s contribution of getting most of us here excited about the topic, and inspire many of us to further investigate what the future of programming could and should be, are worth pointing to his talks, who are just of a different kind and much more entertaining than many of the academic or product talks that might demo substantially more important ideas and technologies.\nOne is not better than the other. \nBoth are valuable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1544478400.224700",
        "client_msg_id": "6a2ffd3b-a930-49e8-84c3-54ff59d758cd",
        "text": "_(After a couple of days reading through a few citations..)_ A problem shared by myself as well. I can totally relate, particularly since one of the big reasons I left academia was that I found rejection hard to take :slightly_smiling_face: You're a better sophont than me for continuing to plug away.\n\nUpon further reflection, I think it depends on the audience this is intended for. Perhaps you're writing for people who think reuse is a) great, b) attainable, and c) just a matter of sufficient foresight. In which case this is a pretty nice way to take them carefully through their own belief system and point out the holes in it.\n\nWhereas when I read it, I started out seeing words like 'reuse' and rolling my eyes, then saw reuse defined as \"the capacity of a design to empower others to continue the design process via extension or adaption\" and did a double-take, and gradually (and with lots of breaks) grokked where you were going. It's possible I'm still misunderstanding part of the paper, but I found sections 2, 3 and 4 to be an extended sidebar before you returned to your original definition of OAP. Perhaps there are two separate papers here? Then again, I may not have read the whole thing if you hadn't already built up currency with me with your previous paper :slightly_smiling_face: and splitting the solution off into a separate paper would risk the audience never getting to it. It's a hard problem, introducing strange ideas to people. That's why most research stays comfortably in the shallows of ideas its audience is used to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544229974.163900",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tAlL=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(After a couple of days reading through a few citations..)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " A problem shared by myself as well. I can totally relate, particularly since one of the big reasons I left academia was that I found rejection hard to take "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " You're a better sophont than me for continuing to plug away.\n\nUpon further reflection, I think it depends on the audience this is intended for. Perhaps you're writing for people who think reuse is a) great, b) attainable, and c) just a matter of sufficient foresight. In which case this is a pretty nice way to take them carefully through their own belief system and point out the holes in it.\n\nWhereas when I read it, I started out seeing words like 'reuse' and rolling my eyes, then saw reuse defined as \"the capacity of a design to empower others to continue the design process via extension or adaption\" and did a double-take, and gradually (and with lots of breaks) grokked where you were going. It's possible I'm still misunderstanding part of the paper, but I found sections 2, 3 and 4 to be an extended sidebar before you returned to your original definition of OAP. Perhaps there are two separate papers here? Then again, I may not have read the whole thing if you hadn't already built up currency with me with your previous paper "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " and splitting the solution off into a separate paper would risk the audience never getting to it. It's a hard problem, introducing strange ideas to people. That's why most research stays comfortably in the shallows of ideas its audience is used to."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1544479941.225300",
        "client_msg_id": "c06b73eb-41bb-4e99-8862-e4a59f8cdfe4",
        "text": "A couple more detailed comments\/questions:\n\n1. While the way you cast seemingly comforting terms like 'reuse' in new settings is a nice linguistic hack, it is a bit double-edged. For example, I gradually grew aware that I think of 'reuse' as the assumption that people can't see inside encapsulated layers like classes. That would be like a C++ `.h` file that doesn't include implementations, or a Java `.class` file distributed in binary form with just APIdoc-generated comments. Whereas you're assuming that you can see inside classes, you just can't (or choose not to) modify them directly. Which leads naturally to the DOM model of hanging listeners and overrides on the skeleton of a given set of classes. I wonder if this distinction is worth explicitly drawing out. Otherwise you're bringing in distracting associations for your reader. (I've had this issue with past papers as well, now that I think about it.) This sort of reasoning is why I lately try to avoid the terms 'reuse' and 'abstraction' (and a few others).\n\nThe statement of the principle at the start didn't immediately paint a crisp picture in my mind. It wasn't obvious why \"fire up your text editor and modify a few lines of code\" was not following the principle. (<https:\/\/xkcd.com\/722> came to mind.) At the same time, I could imagine other readers with a different background seeing it and thinking, \"this is why we have late binding\/dynamic dispatch\/polymorphism\/inheritance\/...\" So depending on the reader, the principle as stated will seem either trivially satisfied or a nice ivory-tower goal but not very actionable.\n\nBy the time you return to it in section 5, my sense of your meaning is a lot more rich. But perhaps you should start with a problem rather than the principle? Hmm, which arguably is what you're doing in sections 2-4, but I didn't realize that at the time. Maybe you need to condense the problem down a bit?\n\nSpeaking of that, I found Table 2 quite confusing. Coming from a Lisp background, I found myself wondering if you were just looking for some maximally-flexible way to specify lexical and dynamic scope. It was only when I got to section 3.3.2 that I realized that `β` may be deep inside the implementation of `α`. The colons obfuscate that because they make the pattern seem like a superficial use of an existing type.\n\n2. It's hard to discuss a general term like 'reuse', particularly after bringing up economic considerations, without causing me to wonder precisely what is difficult about modifying some code directly rather than adapting or extending it. Might the paper benefit from a focus in a specific language's operational eco-system? For example, if you were speaking in terms of Python you'd be able to say something concrete like, \"it's useful not to modify alpha directly because it comes from a package downloaded from pypi and you don't want to fork the upstream package and be responsible for merging in all future changes.\" Newspeak or Beta may have different reasons, and I'm not familiar with their eco-system. Why is it not an option to modify these classes directly? What _exactly_ causes the network horizon in these situations? (I have my own answers to these questions, but I'm not sure if my answers match yours.)\n\n3. A slightly less subtle way to beat my own drum:\n&gt; ...“available for use” meant that a module’s content should not be modifiable by its consumers, promoting uses such as caching, verification, etc.\nCan we verify use even in the presence of modification, based on type checks, contracts, _ahem_ tests, etc.?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544229974.163900",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "Computer Problems",
                "title_link": "https:\/\/xkcd.com\/722\/",
                "author_name": "xkcd",
                "author_link": "https:\/\/xkcd.com\/",
                "image_url": "https:\/\/imgs.xkcd.com\/comics\/computer_problems.png",
                "image_width": 587,
                "image_height": 254,
                "image_bytes": 33544,
                "text": "[Title text] \"This is how I explain computer problems to my cat. My cat usually seems happier than me.\"",
                "fallback": "xkcd: Computer Problems",
                "service_icon": "https:\/\/a.slack-edge.com\/cdbf3\/img\/unfurl_icons\/xkcd.png",
                "id": 1,
                "original_url": "https:\/\/xkcd.com\/722"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zJw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A couple more detailed comments\/questions:\n\n1. While the way you cast seemingly comforting terms like 'reuse' in new settings is a nice linguistic hack, it is a bit double-edged. For example, I gradually grew aware that I think of 'reuse' as the assumption that people can't see inside encapsulated layers like classes. That would be like a C++ "
                            },
                            {
                                "type": "text",
                                "text": ".h",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " file that doesn't include implementations, or a Java "
                            },
                            {
                                "type": "text",
                                "text": ".class",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " file distributed in binary form with just APIdoc-generated comments. Whereas you're assuming that you can see inside classes, you just can't (or choose not to) modify them directly. Which leads naturally to the DOM model of hanging listeners and overrides on the skeleton of a given set of classes. I wonder if this distinction is worth explicitly drawing out. Otherwise you're bringing in distracting associations for your reader. (I've had this issue with past papers as well, now that I think about it.) This sort of reasoning is why I lately try to avoid the terms 'reuse' and 'abstraction' (and a few others).\n\nThe statement of the principle at the start didn't immediately paint a crisp picture in my mind. It wasn't obvious why \"fire up your text editor and modify a few lines of code\" was not following the principle. ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/xkcd.com\/722"
                            },
                            {
                                "type": "text",
                                "text": " came to mind.) At the same time, I could imagine other readers with a different background seeing it and thinking, \"this is why we have late binding\/dynamic dispatch\/polymorphism\/inheritance\/...\" So depending on the reader, the principle as stated will seem either trivially satisfied or a nice ivory-tower goal but not very actionable.\n\nBy the time you return to it in section 5, my sense of your meaning is a lot more rich. But perhaps you should start with a problem rather than the principle? Hmm, which arguably is what you're doing in sections 2-4, but I didn't realize that at the time. Maybe you need to condense the problem down a bit?\n\nSpeaking of that, I found Table 2 quite confusing. Coming from a Lisp background, I found myself wondering if you were just looking for some maximally-flexible way to specify lexical and dynamic scope. It was only when I got to section 3.3.2 that I realized that "
                            },
                            {
                                "type": "text",
                                "text": "β",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may be deep inside the implementation of "
                            },
                            {
                                "type": "text",
                                "text": "α",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The colons obfuscate that because they make the pattern seem like a superficial use of an existing type.\n\n2. It's hard to discuss a general term like 'reuse', particularly after bringing up economic considerations, without causing me to wonder precisely what is difficult about modifying some code directly rather than adapting or extending it. Might the paper benefit from a focus in a specific language's operational eco-system? For example, if you were speaking in terms of Python you'd be able to say something concrete like, \"it's useful not to modify alpha directly because it comes from a package downloaded from pypi and you don't want to fork the upstream package and be responsible for merging in all future changes.\" Newspeak or Beta may have different reasons, and I'm not familiar with their eco-system. Why is it not an option to modify these classes directly? What "
                            },
                            {
                                "type": "text",
                                "text": "exactly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " causes the network horizon in these situations? (I have my own answers to these questions, but I'm not sure if my answers match yours.)\n\n3. A slightly less subtle way to beat my own drum:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...“available for use” meant that a module’s content should not be modifiable by its consumers, promoting uses such as caching, verification, etc."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can we verify use even in the presence of modification, based on type checks, contracts, "
                            },
                            {
                                "type": "text",
                                "text": "ahem",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tests, etc.?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1544481846.231100",
        "client_msg_id": "A0E35589-2741-4342-A24E-A6859F8C0B98",
        "text": "<@UE0ETTCG7> both points.  With (1), consider how forces push us away from an Engelbart computing substrate.  Take WWW hyperlinks for example how much and attention is required just to sustain this minimal level of interoperability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCSqu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE0ETTCG7"
                            },
                            {
                                "type": "text",
                                "text": " both points.  With (1), consider how forces push us away from an Engelbart computing substrate.  Take WWW hyperlinks for example how much and attention is required just to sustain this minimal level of interoperability."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544495953.231500",
        "client_msg_id": "5a380ebf-d783-4e38-be13-50bfee09fabe",
        "text": "Fundamentally what Herr Kohlgruber is talking about is having software enter the age of interchangeable parts. This has not happened yet in the software field. It was pioneered by several inventors in the 1800's such as Eli Whitney, and was used to devastating success during the civil war, where it permitted mass-production of guns which previously had not existed.  Interchangeable parts is indeed a worth goal of any next generation product, and i consider it a crucial criteria on which to evaluate any new programming system. We know from past experience that this is a tricky issue, as programs = algorithms + data structures, and data is something people just can't seem to agree on how to store. So it won't be easy.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538602518.000100",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ti8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fundamentally what Herr Kohlgruber is talking about is having software enter the age of interchangeable parts. This has not happened yet in the software field. It was pioneered by several inventors in the 1800's such as Eli Whitney, and was used to devastating success during the civil war, where it permitted mass-production of guns which previously had not existed.  Interchangeable parts is indeed a worth goal of any next generation product, and i consider it a crucial criteria on which to evaluate any new programming system. We know from past experience that this is a tricky issue, as programs = algorithms + data structures, and data is something people just can't seem to agree on how to store. So it won't be easy."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544497169.231700",
        "client_msg_id": "248b1a48-5945-42b9-bd70-9d36320fcf59",
        "text": "You are correct that Smalltalk and Lisp have serious problems that cause them to stay at near zero usage rate. Smalltalk's only contribution to modern languages is the use of named parameters, which makes it easier to skip args if a function has many optional parameters. Otherwise it has almost nothing to add to FORTRAN, and its perverse methodology of sending the plus operator to the number 3 is very counterintuitive for someone trained in algebra. We are used to calling functions with numeric arguments like sine(30) not sending the function sin to the number 30. I could give you 100 reasons why smalltak is useless, but it would offend the nostalgists out there. Lisp is like a bad coin, it just gets recirculated over and over. The main reason LISP is so abhorred in the business world is that it can be considered a \"write only\" language, where nobody but the author can understand or improve an existing program. Maintainability is a major concern for businesses that run programs for decades. In the hands of an expert LISP is supremely powerful, so it will never go away, but it represents the ultimate in non-reusable parts!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541742837.092100",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rvwpm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You are correct that Smalltalk and Lisp have serious problems that cause them to stay at near zero usage rate. Smalltalk's only contribution to modern languages is the use of named parameters, which makes it easier to skip args if a function has many optional parameters. Otherwise it has almost nothing to add to FORTRAN, and its perverse methodology of sending the plus operator to the number 3 is very counterintuitive for someone trained in algebra. We are used to calling functions with numeric arguments like sine(30) not sending the function sin to the number 30. I could give you 100 reasons why smalltak is useless, but it would offend the nostalgists out there. Lisp is like a bad coin, it just gets recirculated over and over. The main reason LISP is so abhorred in the business world is that it can be considered a \"write only\" language, where nobody but the author can understand or improve an existing program. Maintainability is a major concern for businesses that run programs for decades. In the hands of an expert LISP is supremely powerful, so it will never go away, but it represents the ultimate in non-reusable parts!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544497393.232000",
        "client_msg_id": "5c7837e0-bea5-4712-beaa-9df418b3d10b",
        "text": "The book Programs = Algorithms + Data Structures (available in both Modula-2 and Oberon formats) has an excellent coverage of data structures.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542752544.254200",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=9Mb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The book Programs = Algorithms + Data Structures (available in both Modula-2 and Oberon formats) has an excellent coverage of data structures."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544497412.232200",
        "client_msg_id": "0fda642a-f845-4d56-b629-17de2c55836e",
        "text": "By Prof. Wirth, the inventor of Pascal, Modula-2, and Oberon languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542752544.254200",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o=M7y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By Prof. Wirth, the inventor of Pascal, Modula-2, and Oberon languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544498837.232400",
        "client_msg_id": "fbe157ff-fc9e-4d84-8414-7176d03aec7d",
        "text": "The goals expressed in Bret Victor's demo are laudable. They are inspiring. The fact that he lacks the technical ability to create a product or publish research that would allow someone else to build a working system should be acknowledged. There are many artists\/designers in history from Leonardo to DuChamp to Colani who imagine more than they can build at the time. The fact that current development environments are so saddled with unnecessary complexity can and will be rectified.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n0j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The goals expressed in Bret Victor's demo are laudable. They are inspiring. The fact that he lacks the technical ability to create a product or publish research that would allow someone else to build a working system should be acknowledged. There are many artists\/designers in history from Leonardo to DuChamp to Colani who imagine more than they can build at the time. The fact that current development environments are so saddled with unnecessary complexity can and will be rectified."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544499031.232600",
        "client_msg_id": "2a979785-e737-441a-8cf2-aef8a2ba506e",
        "text": "One thing i am working towards is a concrete set of tests\/tasks that can be applied to each new language\/system so that we can objectively measure their performance, in the sense of how much further towards the goals do they take us. One of the key goals is interchangeable parts, and another is the issue maintainability. If i take a program and intentionally damage it in some minor way, and then give that program to a new person, how long will it take for that new person to find and fix the problem? Too often we allow people to submit work that only they understand. If real progress is to be made, we have to democratize the software development process, and the priesthood must be dis-empowered.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LzDe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing i am working towards is a concrete set of tests\/tasks that can be applied to each new language\/system so that we can objectively measure their performance, in the sense of how much further towards the goals do they take us. One of the key goals is interchangeable parts, and another is the issue maintainability. If i take a program and intentionally damage it in some minor way, and then give that program to a new person, how long will it take for that new person to find and fix the problem? Too often we allow people to submit work that only they understand. If real progress is to be made, we have to democratize the software development process, and the priesthood must be dis-empowered."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1544499122.232800",
        "client_msg_id": "00f94a5f-527b-40b7-801c-6882a4c1af41",
        "text": "Once i am elected emperor, i will introduce a fine for anyone inventing and using new gobbledygook terms like \"functors\" and \"monads\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544264389.176500",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "08Ak",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Once i am elected emperor, i will introduce a fine for anyone inventing and using new gobbledygook terms like \"functors\" and \"monads\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "upside_down_face",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1544510580.233100",
        "client_msg_id": "e57a25d4-c1d6-42b6-a5ed-3454e4770a0f",
        "text": "<@UEQ6M68H0> I think you're too extreme in your reasoning, in some parts right though.\n\nIf I'm not mistaken, it was Smalltalk that brought very idea of IDE. As for sending '+' to a number -- it was done to make language design more orthogonal. That was a reasonable pursuit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541742837.092100",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U3m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I think you're too extreme in your reasoning, in some parts right though.\n\nIf I'm not mistaken, it was Smalltalk that brought very idea of IDE. As for sending '+' to a number -- it was done to make language design more orthogonal. That was a reasonable pursuit."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1544514766.233300",
        "client_msg_id": "908cc2ab-a273-45c4-95b9-af1d9cb5fb8a",
        "text": "And we do spend a few years drilling operator precedence into our youth, so it's not exactly intrinsic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541742837.092100",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dw0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And we do spend a few years drilling operator precedence into our youth, so it's not exactly intrinsic."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]