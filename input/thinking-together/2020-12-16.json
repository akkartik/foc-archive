[
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1608106745.324600",
        "client_msg_id": "5d6f1aef-99dd-4880-813a-e7c03c589b9f",
        "text": "I think if it's sufficiently easy, there won't be such a thing as \"guys who make delivery app\", because the value add of that would be very low. Put another way, the restaurants will handle their own deliveries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z6xb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think if it's sufficiently easy, there won't be such a thing as \"guys who make delivery app\", because the value add of that would be very low. Put another way, the restaurants will handle their own deliveries."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1608147222.324800",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1608147251.000000"
        },
        "client_msg_id": "0de21891-5716-4c01-9a90-973c9e2e38e8",
        "text": "<@UKDM3GLAJ>\n&gt; I’ve had a project in the same direction of unwalling the data in apps\n&gt; .\nTell me more!\n\n&gt; How do you convince anybody developing a piece of software to build it using this framework rather than a framework in which they own the data?\n&gt; .\nWell if they're the kind of people who want to control my life and my stuff, I'm fine with them doing that the old way!\n\n&gt; Like, if you find a way to make this a compelling platform for the guys who want to get rich making the next great food delivery app, then you’ve solved the hard problem.\n&gt; .\nGetting rich making killer apps is definitely not in my list of primary use cases!\n\nThis is about people helping each other create a shared, open cyberspace that they own themselves, and where they build functionality together (not apps, but useful open source, sharable behaviours for objects).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "woH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKDM3GLAJ"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve had a project in the same direction of unwalling the data in apps\n."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tell me more!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do you convince anybody developing a piece of software to build it using this framework rather than a framework in which they own the data?\n."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well if they're the kind of people who want to control my life and my stuff, I'm fine with them doing that the old way!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, if you find a way to make this a compelling platform for the guys who want to get rich making the next great food delivery app, then you’ve solved the hard problem.\n."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Getting rich making killer apps is definitely not in my list of primary use cases!\n\nThis is about people helping each other create a shared, open cyberspace that they own themselves, and where they build functionality together (not apps, but useful open source, sharable behaviours for objects)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1608147321.325100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1608147371.000000"
        },
        "client_msg_id": "3fdaf3e5-7d19-40ae-ac55-b658184547c3",
        "text": "&gt; I think if it's sufficiently easy, there won't be such a thing as \"guys who make delivery app\", because the value add of that would be very low. Put another way, the restaurants will handle their own deliveries.\n&gt; .\nExactly... I think... I mean, you're speaking from my point of view, right?, not pulling a rhetorical trick there? :smile: (excuse my wariness after the demolition job you\/yours did!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fOU",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think if it's sufficiently easy, there won't be such a thing as \"guys who make delivery app\", because the value add of that would be very low. Put another way, the restaurants will handle their own deliveries.\n."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly... I think... I mean, you're speaking from my point of view, right?, not pulling a rhetorical trick there? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " (excuse my wariness after the demolition job you\/yours did!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1608152324.325600",
        "client_msg_id": "71b83135-f010-4920-af19-24f65036b7bd",
        "text": "<@UJBAJNFLK> I didn't realise that Hypercore is the new Dat! Yes, I've looked into that, but unfortunately there is no C binding. There's a dead-looking C++ implementation and a dead-looking Rust implementation. Also, it has a clear use-case that drives its design, so I'm not sure about the cost of that ongoing mismatch of goals. But thanks for the tip! In fact, if anyone on this thread knows of a good C-based P2P infra, I'd be glad to hear about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FY=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I didn't realise that Hypercore is the new Dat! Yes, I've looked into that, but unfortunately there is no C binding. There's a dead-looking C++ implementation and a dead-looking Rust implementation. Also, it has a clear use-case that drives its design, so I'm not sure about the cost of that ongoing mismatch of goals. But thanks for the tip! In fact, if anyone on this thread knows of a good C-based P2P infra, I'd be glad to hear about it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1608152978.325800",
        "client_msg_id": "d2939c32-9218-4d07-9199-75ba94a016bc",
        "text": "Haha no tricks. To be clear, I have followed Onex for a while, I think its great - I was as surprised\/disappointed as you that she just didn't get it at all...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E4AU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haha no tricks. To be clear, I have followed Onex for a while, I think its great - I was as surprised\/disappointed as you that she just didn't get it at all..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1608154101.326000",
        "client_msg_id": "db881d77-e386-49c9-bbd7-2c0833e01250",
        "text": ":smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3b8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1608154269.326200",
        "client_msg_id": "56331366-401b-4264-80fd-4b74c8754ad0",
        "text": "<@UJBAJNFLK> The Object Network differs from the Fediverse by virtue of being much lower level in the stack. The Fediverse ties high level social platforms together. The Object Network has a more ambitious goal that starts from much lower level basics..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "doj=A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " The Object Network differs from the Fediverse by virtue of being much lower level in the stack. The Fediverse ties high level social platforms together. The Object Network has a more ambitious goal that starts from much lower level basics.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1608189301.334500",
        "client_msg_id": "6c520d9a-9a46-4ec0-ac11-2a7981508b2c",
        "text": "<@UE6EFEPTQ> Good point about being lower level than the Fediverse. As for P2P, it seems that C is not popular at all in that space. The main P2P software I actually use daily is Syncthing, written in Go. IPFS is Go and JS. All of them *could* be implemented in C, being defined in terms of protocols rather than APIs, but nobody does it. I guess it's a cultural issue: C is the lingua franca of Unix and a process-centric view of computing. P2P takes a data-centric and network-based approach. Rejecting the \"old world\" leads to rejecting its lingua franca as well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607884598.282600",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " Good point about being lower level than the Fediverse. As for P2P, it seems that C is not popular at all in that space. The main P2P software I actually use daily is Syncthing, written in Go. IPFS is Go and JS. All of them "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be implemented in C, being defined in terms of protocols rather than APIs, but nobody does it. I guess it's a cultural issue: C is the lingua franca of Unix and a process-centric view of computing. P2P takes a data-centric and network-based approach. Rejecting the \"old world\" leads to rejecting its lingua franca as well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "*Conditionals and multi-line functions*\n\nI've been noodling on how to do conditionals in my postfix shell. Some ideas for keywords\/functions:\n\n* `return` seems quite essential. Stops executing the current function and returns top of stack.\n* `if{` and `}` and `}else{`. Here's how factorial would look with them:\n```n fact\n  = n 1 &lt;= if{ 0 return } n 1- fact n *```\n* `-&gt;` executes rest of line only if top of stack is true. Factorial again, this time in two lines:\n```n fact\n  = n 1 &lt;= -&gt; 0 return\n    n 1- fact n *```\n* `-&lt;` executes one of the next two words depending on whether top of stack is true or false.\n* `-&gt;` and `-&lt;` may also work well with `{` and `}` which group words together:\n```n fact\n  = n 1 &lt;= -&gt; {0 return} n 1- fact n *```\nA more challenging example is binary search. The gold standard here is Bret Victor's demo in _\"Inventing on Principle\"_ (linked above; screenshot below). Some attempts in postfix:\n```array key bsearch\n  = array key 0 array len bsearch-range          # delegate to helper with explicit low and high\n\n# option A\narray key low high bsearch-range\n  = low high &gt;= if{ null return }                # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] key = if{ mid return }          # if array[mid] == key, return mid\n    array mid [] key &lt; if{ array key mid high bsearch-range return }  # if array[mid] &lt; key, recurse over [mid, high)\n    array key low mid bsearch-range              # otherwise recurse over [low, mid)\n\n# option B\narray key low high bsearch-range\n  = low high &gt;= -&gt; null return                   # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] key = -&gt; mid return             # if array[mid] == key, return mid\n    array mid [] key &lt; -&gt; array key mid high bsearch-range return   # if array[mid] &lt; key, recurse over [mid, high)\n    array key low mid bsearch-range              # otherwise recurse over [low, mid)\n\n# option C\narray key low high bsearch-range\n  = low high &gt;= -&gt; null return                   # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] =midval                         # midval = array[mid]\n    midval key = -&gt; mid return                   # if midval == key, return mid\n    midval key &lt; =upper?                         # upper? = (midval &lt; key)\n    # return bsearch-range(array, key, upper ? mid : low, upper ? high : mid)\n    array key upper? -&lt; mid low upper? -&lt; high mid bsearch-range```\nBut how to visualize a function spanning multiple lines that operates on an array? There aren't enough dimensions.",
        "files": [
            {
                "id": "F01H42Y3U7L",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ElDqc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Conditionals and multi-line functions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI've been noodling on how to do conditionals in my postfix shell. Some ideas for keywords\/functions:\n\n* "
                            },
                            {
                                "type": "text",
                                "text": "return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " seems quite essential. Stops executing the current function and returns top of stack.\n* "
                            },
                            {
                                "type": "text",
                                "text": "if{",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "}else{",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Here's how factorial would look with them:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "n fact\n  = n 1 <= if{ 0 return } n 1- fact n *"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* "
                            },
                            {
                                "type": "text",
                                "text": "->",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " executes rest of line only if top of stack is true. Factorial again, this time in two lines:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "n fact\n  = n 1 <= -> 0 return\n    n 1- fact n *"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* "
                            },
                            {
                                "type": "text",
                                "text": "-<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " executes one of the next two words depending on whether top of stack is true or false.\n* "
                            },
                            {
                                "type": "text",
                                "text": "->",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "-<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may also work well with "
                            },
                            {
                                "type": "text",
                                "text": "{",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which group words together:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "n fact\n  = n 1 <= -> {0 return} n 1- fact n *"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A more challenging example is binary search. The gold standard here is Bret Victor's demo in "
                            },
                            {
                                "type": "text",
                                "text": "\"Inventing on Principle\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (linked above; screenshot below). Some attempts in postfix:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "array key bsearch\n  = array key 0 array len bsearch-range          # delegate to helper with explicit low and high\n\n# option A\narray key low high bsearch-range\n  = low high >= if{ null return }                # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] key = if{ mid return }          # if array[mid] == key, return mid\n    array mid [] key < if{ array key mid high bsearch-range return }  # if array[mid] < key, recurse over [mid, high)\n    array key low mid bsearch-range              # otherwise recurse over [low, mid)\n\n# option B\narray key low high bsearch-range\n  = low high >= -> null return                   # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] key = -> mid return             # if array[mid] == key, return mid\n    array mid [] key < -> array key mid high bsearch-range return   # if array[mid] < key, recurse over [mid, high)\n    array key low mid bsearch-range              # otherwise recurse over [low, mid)\n\n# option C\narray key low high bsearch-range\n  = low high >= -> null return                   # not found\n    low high + 2 div =mid                        # mid = (low+high)\/2\n    array mid [] =midval                         # midval = array[mid]\n    midval key = -> mid return                   # if midval == key, return mid\n    midval key < =upper?                         # upper? = (midval < key)\n    # return bsearch-range(array, key, upper ? mid : low, upper ? high : mid)\n    array key upper? -< mid low upper? -< high mid bsearch-range"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut how to visualize a function spanning multiple lines that operates on an array? There aren't enough dimensions."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1608190990.334700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1608191566.000000"
        },
        "thread_ts": "1607887127.284300",
        "parent_user_id": "UCUSW7WVD"
    }
]