[
    {
        "user": "UEH6T3RJB",
        "type": "message",
        "ts": "1545909354.097500",
        "client_msg_id": "3dd1f892-b050-4011-ae96-d2d5ea10b612",
        "text": "Cheers, <@UC2A2ARPT> - I think this is an incredibly interesting line of speculation. It reminds us that most of our current arguments are \"fish talking about the absence of water\" arguments - that is, we yearn for feedback largely because we don't know how to get it and have never had it, rather than having a clear-sighted view of when it is appropriate and what it is good for.\nAll I can connect it to at present is the \"Spectrum of Forgiveness\" point in my \"Not a Craft\" paper of 2016 - <https:\/\/github.com\/amb26\/papers\/raw\/master\/ppig-2016b\/ppig-2016b.pdf> . This looks at some other qualities than responsiveness that we also don't have, in this case, durability and malleability, and places some real materials on a spectrum with respect to them. This appears in section 7 of the paper, and when I presented this it got illustrated in slide 15 of this deck - <https:\/\/docs.google.com\/presentation\/d\/1Lnt-5Ht7MSj52tVDgOow0HVN94ifnQDhOWjaTMvIy2M\/edit?usp=sharing> . The preso was a bit disingenuous in suggesting that \"more forgiveness is better\" given that obviously lots of people *do* work in ceramics and appreciate the lack of forgiveness of the materials, perhaps largely since they get a lot of durability in exchange for it. Our predicament in software is that all the tradeoffs are currently terrible - we work in a material which is simultaneously unforgiving, brittle and unresponsive - no wonder we yearn for being able to move along *any* of these three axes : P All the while convincing ourselves that we are \"wizards\" and can think far better than the general public.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5184556fcf3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/75184556fcf3aa660f5e56b8e5bdd46d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "",
            "real_name": "Antranig Basman",
            "display_name": "Bosmon",
            "team": "T5TCAFTA9",
            "name": "amb26slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ic4o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cheers, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " - I think this is an incredibly interesting line of speculation. It reminds us that most of our current arguments are \"fish talking about the absence of water\" arguments - that is, we yearn for feedback largely because we don't know how to get it and have never had it, rather than having a clear-sighted view of when it is appropriate and what it is good for.\nAll I can connect it to at present is the \"Spectrum of Forgiveness\" point in my \"Not a Craft\" paper of 2016 - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/amb26\/papers\/raw\/master\/ppig-2016b\/ppig-2016b.pdf"
                            },
                            {
                                "type": "text",
                                "text": " . This looks at some other qualities than responsiveness that we also don't have, in this case, durability and malleability, and places some real materials on a spectrum with respect to them. This appears in section 7 of the paper, and when I presented this it got illustrated in slide 15 of this deck - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.google.com\/presentation\/d\/1Lnt-5Ht7MSj52tVDgOow0HVN94ifnQDhOWjaTMvIy2M\/edit?usp=sharing"
                            },
                            {
                                "type": "text",
                                "text": " . The preso was a bit disingenuous in suggesting that \"more forgiveness is better\" given that obviously lots of people "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " work in ceramics and appreciate the lack of forgiveness of the materials, perhaps largely since they get a lot of durability in exchange for it. Our predicament in software is that all the tradeoffs are currently terrible - we work in a material which is simultaneously unforgiving, brittle and unresponsive - no wonder we yearn for being able to move along "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of these three axes : P All the while convincing ourselves that we are \"wizards\" and can think far better than the general public."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "U8A5MS6R1",
                    "U85HCL7JP"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UEGFXUK3M"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1545948262.099000",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1545948683.000000"
        },
        "client_msg_id": "a582d183-1177-42e2-a88f-a57f0acef0cf",
        "text": "Interesting discussion.\n\nI agree that feedback isn't all good, it might be irrelevant or worse, misguiding. I feel thinking of 'feedback' isn't complete without considering the context of the 'medium'. I'm still trying to refine this notion, please pardon the rambling below.\n\nIn the canvas\/painting 'medium', the feedback is that you immediately see visible paint on the canvas the moment you touch it with the brush.\n\nWe've had shifts from little feedback to more feedback and indirect manipulation to direct in the past. For instance, the shift from line editors and teletypes to interactive screens. The medium here is the document metaphor - which still existed with line editors, but editing was so tedious back then - commands to switch the current line, not having a live view of the full document in front of you, etc. In this case I can't think of downsides of 'more feedback'. Perhaps with less feedback, more thought went into getting a good design the first time and favoring economy of keystrokes, local reasoning? In any case, no one misses the teletypes (I hope :smile:)\n\nToday the text document editing experience itself is very responsive and direct. You immediately see characters as you type, in the full document. This is great when the document itself is the final product (Google docs) but for programs, we realize that the document is only a means to indirectly manipulate some other system behavior. So we introduce the idea of a feedback loop (edit document -&gt; view final behavior) that we try to optimize. Instead, could we imagine a different medium that we project the system behavior onto, such that it could be manipulated more directly?  I agree with <@UEH6T3RJB> here - we don't really know what we don't have. Maybe 'fast but narrow feedback' might work for us because we can't really hold too many moving parts in our heads. In the end I think whenever I'm looping through a series of steps in my workflow, there is an opportunity of seeking out a better medium.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "slhr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting discussion.\n\nI agree that feedback isn't all good, it might be irrelevant or worse, misguiding. I feel thinking of 'feedback' isn't complete without considering the context of the 'medium'. I'm still trying to refine this notion, please pardon the rambling below.\n\nIn the canvas\/painting 'medium', the feedback is that you immediately see visible paint on the canvas the moment you touch it with the brush.\n\nWe've had shifts from little feedback to more feedback and indirect manipulation to direct in the past. For instance, the shift from line editors and teletypes to interactive screens. The medium here is the document metaphor - which still existed with line editors, but editing was so tedious back then - commands to switch the current line, not having a live view of the full document in front of you, etc. In this case I can't think of downsides of 'more feedback'. Perhaps with less feedback, more thought went into getting a good design the first time and favoring economy of keystrokes, local reasoning? In any case, no one misses the teletypes (I hope "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nToday the text document editing experience itself is very responsive and direct. You immediately see characters as you type, in the full document. This is great when the document itself is the final product (Google docs) but for programs, we realize that the document is only a means to indirectly manipulate some other system behavior. So we introduce the idea of a feedback loop (edit document -> view final behavior) that we try to optimize. Instead, could we imagine a different medium that we project the system behavior onto, such that it could be manipulated more directly?  I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UEH6T3RJB"
                            },
                            {
                                "type": "text",
                                "text": " here - we don't really know what we don't have. Maybe 'fast but narrow feedback' might work for us because we can't really hold too many moving parts in our heads. In the end I think whenever I'm looping through a series of steps in my workflow, there is an opportunity of seeking out a better medium."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVBSJGG5",
        "type": "message",
        "ts": "1545957900.099500",
        "client_msg_id": "05aa2889-1e44-4f0e-9d38-21f27151bc4c",
        "text": "<https:\/\/hackernoon.com\/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8e74eba7c6b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/48e74eba7c6b653f9307d063c361b5a1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Ildar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "theildar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545714776.037100",
        "parent_user_id": "UEQ6M68H0",
        "attachments": [
            {
                "service_name": "Hacker Noon",
                "title": "Why Senior Devs Write Dumb Code and How to Spot a Junior From A Mile Away",
                "title_link": "https:\/\/hackernoon.com\/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a",
                "text": "One of my all time favorite quotes is from Brian Goetz, a smart dude in the Java world who is one of the authors of Java Concurrency in…",
                "fallback": "Hacker Noon: Why Senior Devs Write Dumb Code and How to Spot a Junior From A Mile Away",
                "image_url": "https:\/\/cdn-images-1.medium.com\/max\/1200\/1*tVBYGseoy-YC402sORy8ow.jpeg",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "3 min read",
                        "short": true
                    }
                ],
                "ts": 1509031704,
                "from_url": "https:\/\/hackernoon.com\/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a",
                "image_width": 124,
                "image_height": 250,
                "image_bytes": 170934,
                "service_icon": "https:\/\/cdn-images-1.medium.com\/fit\/c\/304\/304\/1*76XiKOa05Yya6_CdYX8pVg.jpeg",
                "id": 1,
                "original_url": "https:\/\/hackernoon.com\/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eSH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/hackernoon.com\/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1545983608.108800",
        "client_msg_id": "a5c57965-677d-483b-9113-e38ef32931a5",
        "text": "actually Mr. Reese has an excellent point. If Tolstoy wrote War &amp; Peace a sentence at a time, and had a group of editors watching over his shoulder as he wrote longhand onto paper this very complex novel, would it have helped or hindered? i think most of us can imagine it would have prevented the creation of the work. If people want to have any fluidity in their creative process having interruptions that distract you from the larger goal is indeed counter-productive. When you want to check a section, you might indicate such, It is an interesting contest, to see if the graphical input of programs can beat the textual in flexibility and speed at the same time. Clearly that is the goal of many of the people on this board. I am of the opinion that we must improve the underlying language first before attempting a graphical input assist, because the current languages have deep intrinsic flaws that prevent robust programs, and hinder interchangeable parts. If we create a graphical programming system, let's say something like Luna is trying to do, how do you copy\/paste code unless you have an underlying textual form. So whatever graphical assist one invents, it must produce a textual form in order to be printed, and sections adapted. If you pin a programming language to a single IDE and editor you doom that language, because no IDE lasts nearly as long as a language does. A language has a grammar, a set of abstractions, and a runtime to support its execution on the operating system of the time. An IDE is a much more complex thing, that usually depends deeply on the graphical primitives of an OS.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545983608.108800",
        "reply_count": 16,
        "reply_users_count": 8,
        "latest_reply": "1546610097.272800",
        "reply_users": [
            "UDJ2TKB99",
            "UBSMEUXAA",
            "U85MWBKEY",
            "U5STGTB3J",
            "UF3V37GCE",
            "UEQ6M68H0",
            "U8A5MS6R1",
            "UEZPBFZPC"
        ],
        "replies": [
            {
                "user": "UDJ2TKB99",
                "ts": "1545997596.109900"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1546057017.110600"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1546057230.110800"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1546090604.123600"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1546109595.149000"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1546110125.153500"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1546124786.159900"
            },
            {
                "user": "UF3V37GCE",
                "ts": "1546130568.160100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1546133828.160300"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1546190531.190900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1546213388.192100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1546214997.208500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1546234683.209600"
            },
            {
                "user": "UEZPBFZPC",
                "ts": "1546609531.272400"
            },
            {
                "user": "UEZPBFZPC",
                "ts": "1546609714.272600"
            },
            {
                "user": "UEZPBFZPC",
                "ts": "1546610097.272800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EnnpM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "actually Mr. Reese has an excellent point. If Tolstoy wrote War & Peace a sentence at a time, and had a group of editors watching over his shoulder as he wrote longhand onto paper this very complex novel, would it have helped or hindered? i think most of us can imagine it would have prevented the creation of the work. If people want to have any fluidity in their creative process having interruptions that distract you from the larger goal is indeed counter-productive. When you want to check a section, you might indicate such, It is an interesting contest, to see if the graphical input of programs can beat the textual in flexibility and speed at the same time. Clearly that is the goal of many of the people on this board. I am of the opinion that we must improve the underlying language first before attempting a graphical input assist, because the current languages have deep intrinsic flaws that prevent robust programs, and hinder interchangeable parts. If we create a graphical programming system, let's say something like Luna is trying to do, how do you copy\/paste code unless you have an underlying textual form. So whatever graphical assist one invents, it must produce a textual form in order to be printed, and sections adapted. If you pin a programming language to a single IDE and editor you doom that language, because no IDE lasts nearly as long as a language does. A language has a grammar, a set of abstractions, and a runtime to support its execution on the operating system of the time. An IDE is a much more complex thing, that usually depends deeply on the graphical primitives of an OS."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UDJ2TKB99",
                    "U5TCAFTD3"
                ],
                "count": 2
            }
        ]
    }
]