[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1623302187.094800",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1623302220.000000"
        },
        "client_msg_id": "9bc72400-974c-452b-a326-6f0268db88c9",
        "text": "In my (not yet prototyped) designs for various potential approaches to abstraction, there would be the ability to create an abstraction that has distinct \"ports\" for multiple inputs, like what you'd find in a traditional node-and-wire \/ patcher visual programming system. I'm not sure that I'd want this to be part of the core language model, but I'd like to be able to build abstractions that can do this out of whatever the core model allows.\n\nIn the current prototypes, yes, you can attach multiple edges to a node. I wrote a blog post about how that makes the time-rewinding behaviour a little thorny: <http:\/\/ivanish.ca\/hest-time-travel|ivanish.ca\/hest-time-travel>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623018113.065400",
        "parent_user_id": "U0242H3GHHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rOl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my (not yet prototyped) designs for various potential approaches to abstraction, there would be the ability to create an abstraction that has distinct \"ports\" for multiple inputs, like what you'd find in a traditional node-and-wire \/ patcher visual programming system. I'm not sure that I'd want this to be part of the core language model, but I'd like to be able to build abstractions that can do this out of whatever the core model allows.\n\nIn the current prototypes, yes, you can attach multiple edges to a node. I wrote a blog post about how that makes the time-rewinding behaviour a little thorny: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ivanish.ca\/hest-time-travel",
                                "text": "ivanish.ca\/hest-time-travel"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1623302384.095100",
        "client_msg_id": "a068e4f0-4d3b-475f-8fd5-8045d6df1e80",
        "text": "As for how this is different than a sync node — that's the entire point of this inquiry into coordination mechanisms.\n\nRight now, if you have two lines that come in to a single point (function), then that function will be invoked whenever _any_ data arrives at it. Up until now, I've been regarding this as.. akin to having a function that is called from more than one place. Each incoming edge represents a different caller of the function. But this doesn't offer a nice way to build systems that need to call a function with more than one argument. So that's what I'm trying to.. figure out.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623018113.065400",
        "parent_user_id": "U0242H3GHHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VK7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for how this is different than a sync node — that's the entire point of this inquiry into coordination mechanisms.\n\nRight now, if you have two lines that come in to a single point (function), then that function will be invoked whenever "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " data arrives at it. Up until now, I've been regarding this as.. akin to having a function that is called from more than one place. Each incoming edge represents a different caller of the function. But this doesn't offer a nice way to build systems that need to call a function with more than one argument. So that's what I'm trying to.. figure out."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]