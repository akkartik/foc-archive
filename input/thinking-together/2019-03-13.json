[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1552462605.302000",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1552462626.000000"
        },
        "client_msg_id": "fdef736e-9b64-47e7-83e1-58275d6e6e15",
        "text": "When i compare the same program written in two different languages, i count the number of words, which is an approximation to the number of tokens, which is a very strong measurement of the effort to originate the program. Whether the tokens are shorter or longer words doesn't matter that much in complexity; APL showed that you could cause the reader to crawl as you deciphered the symbols, and LISP with all the parentheses indicating order of calculation was also extremely difficult to read. Unfortunately tokens are inevitably parsed into a tree, and thus don't read linearly. Our eyes are trained to read words in sequence, so there has always been an interesting tug of war between syntaxes that are easier to read vs. more densely packed.  But back to Felix's question, it is quite surprising that my recent tests have shown with my progression of programs that go from 150 to 1500 words (clock, wristwatch, snake, tictactoe, minesweeper, chess) that as the program size gets to 1500, the different languages start to diverge greatly, and that once you reach that stage they no resemble each other. If the program is very short, then all the programs look almost alike. There are extremely subtle progressive non-linear effects. For example, if you have a complexity coefficient of  1.02 versus 1.10 to the 50th power, one is around 3, and the other is 117, a huge difference. Programs are not linear, there are exponential processes involved, and what appears to be a small advantage of one language over another when applied to a sufficiently large problem., becomes a huge difference in size and complexity. This is my beef with Java, what i refer to as the COBOL of our time. A language which inevitably leads to ponderous, complex monstrosities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552336253.276400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When i compare the same program written in two different languages, i count the number of words, which is an approximation to the number of tokens, which is a very strong measurement of the effort to originate the program. Whether the tokens are shorter or longer words doesn't matter that much in complexity; APL showed that you could cause the reader to crawl as you deciphered the symbols, and LISP with all the parentheses indicating order of calculation was also extremely difficult to read. Unfortunately tokens are inevitably parsed into a tree, and thus don't read linearly. Our eyes are trained to read words in sequence, so there has always been an interesting tug of war between syntaxes that are easier to read vs. more densely packed.  But back to Felix's question, it is quite surprising that my recent tests have shown with my progression of programs that go from 150 to 1500 words (clock, wristwatch, snake, tictactoe, minesweeper, chess) that as the program size gets to 1500, the different languages start to diverge greatly, and that once you reach that stage they no resemble each other. If the program is very short, then all the programs look almost alike. There are extremely subtle progressive non-linear effects. For example, if you have a complexity coefficient of  1.02 versus 1.10 to the 50th power, one is around 3, and the other is 117, a huge difference. Programs are not linear, there are exponential processes involved, and what appears to be a small advantage of one language over another when applied to a sufficiently large problem., becomes a huge difference in size and complexity. This is my beef with Java, what i refer to as the COBOL of our time. A language which inevitably leads to ponderous, complex monstrosities."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1552475450.303100",
        "client_msg_id": "beecbcc6-4991-4902-b879-792b838e284a",
        "text": "Perhaps the referenced book could be considered a \"social psychology\" of Kuhn's paradigms..?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9HT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps the referenced book could be considered a \"social psychology\" of Kuhn's paradigms..?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1552475609.303300",
        "client_msg_id": "059fa064-8e28-429e-b703-5b6ba01b1092",
        "text": "I like the 'stages of circle development' - I see these processes happening around me all the time. Articulating them like this for others to internalise suggests that these processes can thereafter be intentionally planned, amplified and even subverted and short-circuited.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6gjF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the 'stages of circle development' - I see these processes happening around me all the time. Articulating them like this for others to internalise suggests that these processes can thereafter be intentionally planned, amplified and even subverted and short-circuited."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1552475648.303500",
        "client_msg_id": "a4ba88fd-2925-43bc-8239-57ec2f784634",
        "text": "<@U5TCAFTD3> is this group for you an intervention towards the 'formation' stage?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gegr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " is this group for you an intervention towards the 'formation' stage?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1552475984.303800",
        "client_msg_id": "decb79d0-ff6c-4145-b3d6-0b3e356b36a0",
        "text": "That's a good question. I don't know where this community would fit into that model...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lj42l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a good question. I don't know where this community would fit into that model..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGT2XN01W",
        "type": "message",
        "ts": "1552482891.306200",
        "edited": {
            "user": "UGT2XN01W",
            "ts": "1552482918.000000"
        },
        "client_msg_id": "f5991dd0-384f-49f3-92a6-6081b26b63ac",
        "text": "Hi there! I stumbled across the Future and Coding podcast and really enjoy it! I just saw this new scientific computing notebook by Mozilla that people here might enjoy: it runs entirely in the browser (with a scientific python stack crosscompiled to web assembly): <https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/> - quite cool as it lowers the barrier for participation because vs e.g. Jupyter there is no headache around provisioning backend resources for users to run arbitrary code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3405d9d5e0d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3405d9d5e0d530832a9511b27c6974e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Daniel Bachler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552482891.306200",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1552488776.307600",
        "reply_users": [
            "UF0770MK2",
            "UGLSY9X3J"
        ],
        "replies": [
            {
                "user": "UF0770MK2",
                "ts": "1552488626.307100"
            },
            {
                "user": "UGLSY9X3J",
                "ts": "1552488776.307600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Mozilla Hacks – the Web developer blog",
                "title": "Iodide: an experimental tool for scientific communication and exploration on the web – Mozilla Hacks - the Web developer blog",
                "title_link": "https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/",
                "text": "Meet Iodide, an experimental open source tool to help scientists write beautiful interactive documents using web technologies, all within a browser-based iterative workflow that will be familiar to many scientists.",
                "fallback": "Mozilla Hacks – the Web developer blog: Iodide: an experimental tool for scientific communication and exploration on the web – Mozilla Hacks - the Web developer blog",
                "image_url": "https:\/\/hacks.mozilla.org\/files\/2019\/03\/brain_2.png",
                "image_width": 356,
                "image_height": 250,
                "from_url": "https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/",
                "image_bytes": 366594,
                "service_icon": "https:\/\/2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com\/wp-content\/themes\/Hax\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jzn=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi there! I stumbled across the Future and Coding podcast and really enjoy it! I just saw this new scientific computing notebook by Mozilla that people here might enjoy: it runs entirely in the browser (with a scientific python stack crosscompiled to web assembly): "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/"
                            },
                            {
                                "type": "text",
                                "text": " - quite cool as it lowers the barrier for participation because vs e.g. Jupyter there is no headache around provisioning backend resources for users to run arbitrary code"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5TCAFTD3",
                    "UEGFXUK3M",
                    "UGLSY9X3J",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 5
            },
            {
                "name": "heart",
                "users": [
                    "UGK6F0RAA",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UF0770MK2",
        "type": "message",
        "ts": "1552488626.307100",
        "client_msg_id": "e2d13c55-d0f2-46b3-87e5-59a0574fd2a6",
        "text": "I'm a big fan of this Iodide project. I'm a core contributor to Jupyter (notebook, jupyterlab) and I love the idea of _kernels in the browser_. There are obvious limitations (e.g. memory in the browser) but I'm very excited to see where this work goes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5d21304ad08",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/95d21304ad08b822b69c6da2e63f4bca.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Grant",
            "real_name": "Grant Nestor",
            "display_name": "gnestor",
            "team": "T5TCAFTA9",
            "name": "grantnestor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552482891.306200",
        "parent_user_id": "UGT2XN01W",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LPtq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a big fan of this Iodide project. I'm a core contributor to Jupyter (notebook, jupyterlab) and I love the idea of "
                            },
                            {
                                "type": "text",
                                "text": "kernels in the browser",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". There are obvious limitations (e.g. memory in the browser) but I'm very excited to see where this work goes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGLSY9X3J",
        "type": "message",
        "ts": "1552488776.307600",
        "client_msg_id": "d76748d6-23fd-4462-afc6-2da1d1e526e3",
        "text": "yeah this is a neat project! At first I thought it was kind of like Idyll - <https:\/\/idyll-lang.org\/gallery> - but its really about publishing and presenting interactive “Results” without using much html\/css\/js",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g03ebdf13bbe",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e03ebdf13bbeacace66454bea388b927.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "",
            "real_name": "Srini Kadamati",
            "display_name": "srini",
            "team": "T5TCAFTA9",
            "name": "srini",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552482891.306200",
        "parent_user_id": "UGT2XN01W",
        "attachments": [
            {
                "title": "Idyll Example Gallery",
                "title_link": "https:\/\/idyll-lang.org\/gallery",
                "text": "Explorable explanations and interactive blog posts, made with Idyll.",
                "fallback": "Idyll Example Gallery",
                "image_url": "https:\/\/idyll-lang.org\/static\/images\/example-share.png",
                "from_url": "https:\/\/idyll-lang.org\/gallery",
                "image_width": 378,
                "image_height": 250,
                "image_bytes": 283587,
                "service_icon": "https:\/\/idyll-lang.org\/static\/images\/favicon.ico",
                "service_name": "idyll-lang.org",
                "id": 1,
                "original_url": "https:\/\/idyll-lang.org\/gallery"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yPx6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah this is a neat project! At first I thought it was kind of like Idyll - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/idyll-lang.org\/gallery"
                            },
                            {
                                "type": "text",
                                "text": " - but its really about publishing and presenting interactive “Results” without using much html\/css\/js"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1552489918.308600",
        "client_msg_id": "346de038-d1c1-460f-bf0e-7cc67f169875",
        "text": "We're in the formation stage, no? This forum is a 'magnet place' :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4RsJD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're in the formation stage, no? This forum is a 'magnet place' "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1552510862.310000",
        "client_msg_id": "0cb536fb-82dc-460d-908a-a3b183173d31",
        "text": "<@UEQ6M68H0> interesting insights... have you published the results of writing those set of programs in different languages and details of how exactly they start to look different? It definitely seems true that small programs can look somewhat similar in many different languages but large ones have emergent shapes that can differ quite a bit. Substrate determines structure. I assume it's not just the language but the frameworks and libraries in use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552336253.276400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=1nXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " interesting insights... have you published the results of writing those set of programs in different languages and details of how exactly they start to look different? It definitely seems true that small programs can look somewhat similar in many different languages but large ones have emergent shapes that can differ quite a bit. Substrate determines structure. I assume it's not just the language but the frameworks and libraries in use."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1552517892.310200",
        "client_msg_id": "292414af-89b1-4612-b0e5-f0a1d770d2c0",
        "text": "I agree strongly with <@UD512T5AT> that fluent cursor is the pain point. I have done some structural domain specific XML editor and while not FOP thing strictly issue was there close too. When you are implementing your own solution you are usually not alone. System will bring it's own limited cursor and selection that you have to somehow tolerate.\n\nJust ideas for your example: don't use parenthesis directly but somehow add one middle step there. For example: you cannot create real parenthesis but only 'suggestions'. Like: `( 2 * [{] )` -&gt; `( 2 * { 1 + 3 [}] )` -&gt; `( 2 * ( 1 + 3 )[] )` (suggestions will upgrade automatically as real parenthesis when match is found). Therefore editor is aware which parenthesis are connected and structure won't be completely broken in middle way. Or maybe selection itself can be considered by inputting that {} and adding node is separated concern.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J2+c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree strongly with "
                            },
                            {
                                "type": "user",
                                "user_id": "UD512T5AT"
                            },
                            {
                                "type": "text",
                                "text": " that fluent cursor is the pain point. I have done some structural domain specific XML editor and while not FOP thing strictly issue was there close too. When you are implementing your own solution you are usually not alone. System will bring it's own limited cursor and selection that you have to somehow tolerate.\n\nJust ideas for your example: don't use parenthesis directly but somehow add one middle step there. For example: you cannot create real parenthesis but only 'suggestions'. Like: "
                            },
                            {
                                "type": "text",
                                "text": "( 2 * [{] )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -> "
                            },
                            {
                                "type": "text",
                                "text": "( 2 * { 1 + 3 [}] )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -> "
                            },
                            {
                                "type": "text",
                                "text": "( 2 * ( 1 + 3 )[] )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (suggestions will upgrade automatically as real parenthesis when match is found). Therefore editor is aware which parenthesis are connected and structure won't be completely broken in middle way. Or maybe selection itself can be considered by inputting that {} and adding node is separated concern."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1552519491.310400",
        "client_msg_id": "58a6a788-d4e9-4ec2-b709-088e04662d3b",
        "text": "All great points above. One thing I didn't see mentioned is integration with the entrenched tooling. This is as much a technical issue (git compatible) as a cultural one (\"I wont give up my editor!\").",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0DmOj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All great points above. One thing I didn't see mentioned is integration with the entrenched tooling. This is as much a technical issue (git compatible) as a cultural one (\"I wont give up my editor!\")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDPV407CZ",
        "type": "message",
        "ts": "1552519997.313200",
        "edited": {
            "user": "UDPV407CZ",
            "ts": "1552527658.000000"
        },
        "client_msg_id": "0bf22d5a-f2dc-480e-9993-10ffdefc1787",
        "text": "Hi <@UBKNXPBAB>: I was asking <@U5TCAFTD3> about how dynamicland handles accessibility issues and he suggested that I ask you directly. I’m curious, I’ve spent some time thinking about approaches I’d take, but I’m wondering what you’ve (dynamicland) done as I haven’t seen any info regarding that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge26f4f6a649",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7e26f4f6a649fa977ba95c60f15fef2a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Niluka",
            "real_name": "Niluka Satharasinghe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "folcon",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552519997.313200",
        "reply_count": 9,
        "reply_users_count": 2,
        "latest_reply": "1562888797.210200",
        "reply_users": [
            "UGXH0HCSF",
            "UDPV407CZ"
        ],
        "replies": [
            {
                "user": "UGXH0HCSF",
                "ts": "1552692386.350300"
            },
            {
                "user": "UDPV407CZ",
                "ts": "1553022332.397200"
            },
            {
                "user": "UGXH0HCSF",
                "ts": "1553022740.397400"
            },
            {
                "user": "UGXH0HCSF",
                "ts": "1553022828.397600"
            },
            {
                "user": "UDPV407CZ",
                "ts": "1554132515.012000"
            },
            {
                "user": "UDPV407CZ",
                "ts": "1554132582.012200"
            },
            {
                "user": "UGXH0HCSF",
                "ts": "1554330498.030200"
            },
            {
                "user": "UDPV407CZ",
                "ts": "1554656621.090100"
            },
            {
                "user": "UDPV407CZ",
                "ts": "1562888797.210200"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1562938518.217400",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": ": I was asking "
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " about how dynamicland handles accessibility issues and he suggested that I ask you directly. I’m curious, I’ve spent some time thinking about approaches I’d take, but I’m wondering what you’ve (dynamicland) done as I haven’t seen any info regarding that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1552522099.313400",
        "client_msg_id": "70ce5ddc-bbe8-4601-a732-9f275a01fcf9",
        "text": "<@UEGFXUK3M> I do see little circles all the time.  Ruby on Rails is one big one that I observed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6vW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEGFXUK3M"
                            },
                            {
                                "type": "text",
                                "text": " I do see little circles all the time.  Ruby on Rails is one big one that I observed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD512T5AT",
        "type": "message",
        "ts": "1552523437.313700",
        "client_msg_id": "f85882c0-4b41-4b26-aa73-608ceb19eb32",
        "text": "<@U7C7B75R6> Ah interesting. So I’ve also been thinking about transient edit states, where the parentheses node isn’t constructed in expression construction mode until you move the delimiters and “commit” them. Your idea seems similar, but perhaps with the added benefit of not forcing you to think about where a delimiter (in your example, the right parentheses) should go until you’ve written the inner subexpression. Then again, a lot of people are used to bracket autocompletion, so I could see it being acceptable that you have a balanced pair of parentheses before constructing the inner subexpression. I also wonder what should happen in the case of Hazel, where every edit state has a live computed result, when you have a left parentheses but not the right one. For example, if I have `2 * (3 + 4`, should I assume there is no parentheses and compute `2 * 3 + 4`, or should I assume some default position for the closing parentheses and compute `2 * (3 + 4)`? I wonder if there would always be such a reasonable default position.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3f471057576c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-02\/652395123492_3f471057576c27bcd486_72.jpg",
            "first_name": "David",
            "real_name": "David Moon",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dmoon1221",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JXAE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U7C7B75R6"
                            },
                            {
                                "type": "text",
                                "text": " Ah interesting. So I’ve also been thinking about transient edit states, where the parentheses node isn’t constructed in expression construction mode until you move the delimiters and “commit” them. Your idea seems similar, but perhaps with the added benefit of not forcing you to think about where a delimiter (in your example, the right parentheses) should go until you’ve written the inner subexpression. Then again, a lot of people are used to bracket autocompletion, so I could see it being acceptable that you have a balanced pair of parentheses before constructing the inner subexpression. I also wonder what should happen in the case of Hazel, where every edit state has a live computed result, when you have a left parentheses but not the right one. For example, if I have "
                            },
                            {
                                "type": "text",
                                "text": "2 * (3 + 4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", should I assume there is no parentheses and compute "
                            },
                            {
                                "type": "text",
                                "text": "2 * 3 + 4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or should I assume some default position for the closing parentheses and compute "
                            },
                            {
                                "type": "text",
                                "text": "2 * (3 + 4)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? I wonder if there would always be such a reasonable default position."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD512T5AT",
        "type": "message",
        "ts": "1552524338.314000",
        "client_msg_id": "07ac2975-5a35-46ce-aa9c-68d5e3add4e4",
        "text": "<@U8A5MS6R1> One way I could see structure editing start to get integrated with existing tooling is as an editor plugin. What you store in version control is plain text, but the plugin can parse the program and then provide a structure editing interface that is automatically generated from compatible language grammars. It would be sweet if you had a Hazel-like editor plugin that takes a compatible language, detects which parts of it are purely functional (as needed for Hazel’s current model of liveness), then overlays those chunks of code with a live computation cell, where you can see a live result getting updated inline as you edit that piece of code. Underneath, the plugin is just making appropriate text changes to the file and that’s what gets committed to VC.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3f471057576c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-02\/652395123492_3f471057576c27bcd486_72.jpg",
            "first_name": "David",
            "real_name": "David Moon",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dmoon1221",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552233851.253900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ohc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " One way I could see structure editing start to get integrated with existing tooling is as an editor plugin. What you store in version control is plain text, but the plugin can parse the program and then provide a structure editing interface that is automatically generated from compatible language grammars. It would be sweet if you had a Hazel-like editor plugin that takes a compatible language, detects which parts of it are purely functional (as needed for Hazel’s current model of liveness), then overlays those chunks of code with a live computation cell, where you can see a live result getting updated inline as you edit that piece of code. Underneath, the plugin is just making appropriate text changes to the file and that’s what gets committed to VC."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1552536742.314500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1552537097.000000"
        },
        "client_msg_id": "21e19310-bb2d-4292-9970-632ea4311226",
        "text": "The Iodide tool mentioned in this recent post is an EXCELLENT example of \"living structure\" in the form of a self-contained, self-defined tool: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1552482891306200?thread_ts=1552482891.306200&amp;cid=C5T9GPWFL>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551553463.032700",
        "parent_user_id": "UAVCC2X70",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1552482891306200?thread_ts=1552482891.306200&amp;cid=C5T9GPWFL",
                "fallback": "[March 13th, 2019 6:14 AM] daniel: Hi there! I stumbled across the Future and Coding podcast and really enjoy it! I just saw this new scientific computing notebook by Mozilla that people here might enjoy: it runs entirely in the browser (with a scientific python stack crosscompiled to web assembly): <https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/> - quite cool as it lowers the barrier for participation because vs e.g. Jupyter there is no headache around provisioning backend resources for users to run arbitrary code",
                "ts": "1552482891.306200",
                "author_id": "UGT2XN01W",
                "author_subname": "Daniel Bachler",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Hi there! I stumbled across the Future and Coding podcast and really enjoy it! I just saw this new scientific computing notebook by Mozilla that people here might enjoy: it runs entirely in the browser (with a scientific python stack crosscompiled to web assembly): <https:\/\/hacks.mozilla.org\/2019\/03\/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web\/> - quite cool as it lowers the barrier for participation because vs e.g. Jupyter there is no headache around provisioning backend resources for users to run arbitrary code",
                "author_name": "Daniel Bachler",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UGT2XN01W",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/b3405d9d5e0d530832a9511b27c6974e.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F00b63%2Fimg%2Favatars%2Fava_0002-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1552482891306200?thread_ts=1552482891.306200&amp;cid=C5T9GPWFL",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rqd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Iodide tool mentioned in this recent post is an EXCELLENT example of \"living structure\" in the form of a self-contained, self-defined tool: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1552482891306200?thread_ts=1552482891.306200&amp;cid=C5T9GPWFL",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1552482891306200?thread_ts=1552482891.306200&cid=C5T9GPWFL"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1552542630.315000",
        "client_msg_id": "3dfba360-49a5-45ec-b6e5-34c7608411e3",
        "text": "i think we have to first look at the assertion that we are in a Dark Age of programming. I would have to agree. Firstly, a dark age is all about allegiance to entrenched interests that are holding back progress and stifling advances. Galileo vs. the Catholic Church for example. We do have a lot of suppression going on. The major firms are propping up the existing mess (most notably CSS\/JS\/HTML) rather than demolishing it and building something that actually makes sense. And academia is off the in the clouds publishing thousands of journal articles a year that are only read by each other and have near zero impact on the practitioners. So definitely things are ripe for a breakthrough. Where is the Cosimo De Medici to start it off though? Never underestimate the spark from a wealthy man with taste and vision.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1552441138.301100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xE9q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think we have to first look at the assertion that we are in a Dark Age of programming. I would have to agree. Firstly, a dark age is all about allegiance to entrenched interests that are holding back progress and stifling advances. Galileo vs. the Catholic Church for example. We do have a lot of suppression going on. The major firms are propping up the existing mess (most notably CSS\/JS\/HTML) rather than demolishing it and building something that actually makes sense. And academia is off the in the clouds publishing thousands of journal articles a year that are only read by each other and have near zero impact on the practitioners. So definitely things are ripe for a breakthrough. Where is the Cosimo De Medici to start it off though? Never underestimate the spark from a wealthy man with taste and vision."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UGXH0HCSF"
                ],
                "count": 3
            }
        ]
    }
]