[
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1578844877.143200",
        "client_msg_id": "bba07645-a877-429d-8be6-8704f3c86ec9",
        "text": "<@UCGAK10LS> which in particular are awkward? I started the UI trying to match Excel, but it diverged from that, clearly",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xsQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " which in particular are awkward? I started the UI trying to match Excel, but it diverged from that, clearly"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1578845231.143400",
        "client_msg_id": "20d898ad-7e42-498c-83c8-a6dba251f078",
        "text": "note I will make no claims of good UI.. TreeSheets was made purely to fill a personal need, then open sourced.. its very different from one of \"change the world\" startups with money behind them :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4sJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "note I will make no claims of good UI.. TreeSheets was made purely to fill a personal need, then open sourced.. its very different from one of \"change the world\" startups with money behind them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1578851844.144100",
        "client_msg_id": "8424ACC7-0CD7-41B0-9787-33D026062811",
        "text": "... in a good way!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QUpDb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... in a good way!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "grinning",
                "users": [
                    "UHDQ62M4P",
                    "UBSMEUXAA",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1578856902.144400",
        "client_msg_id": "fb188877-9349-4197-ae7a-786a1872ec42",
        "text": "My main goals for Curv are:\n• Artistic expressiveness. You can make any kind of 2D or 3D art, using a wide variety of techniques.\n• Ease of use. This covers a lot of ground, including the IDE and the language itself.\nMathematical purity is not a goal, but there are lots of areas in the design where mathematical purity makes important contributions to artistic expressiveness, ease of use, and ease of engineering. So I use mathematical purity as a tool, not as an end in itself:\n• Pure functional programming. This contributes greatly to ease of use, and simplifies the engineering (generating data-parallel rendering code). The semantics of the language are much simpler. A pure functional API for constructing shapes by composing functions is *so much nicer* than a 1990's style API where graphical primitives paint directly onto a canvas and you have to manage a set of global variables containing the current colour, the current line width, the current transformation matrix, etc.\n• Abstract algebra, what Haskell calls \"equational reasoning\". Unlike most programming languages, the equality operator `a==b` is an equivalence relation: `a==a`; `a==b` implies `b==a`; `a==b` and `b==c` implies `a==c`. Unlike most dynamic languages, the boolean operations obey all the axioms of a boolean algebra. For example, unlike in Python Javascript Lisp, the boolean and operator is commutative. This all falls under ease of use: simple language semantics, no surprises.\nHowever, there are some kinds of mathematical purity in Haskell culture that are detrimental to my goals.\n• Lazy function calls are a net loss; Curv uses strict argument evaluation in function calls.\n• Static typing is a big barrier to learning a language, and is incompatible with live programming, so Curv is dynamically typed.\n• I haven't built a Turing complete reactive API yet, but DCTP looks really hard to understand. The Elm language transitioned from \"mathematically pure\" FRP to \"the Elm architecture\", which is much easier to understand, and it is still \"pure functional\" and \"reactive\". So I'll probably take my lead from Elm, begin with the Elm architecture, and iterate from there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OHGt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My main goals for Curv are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Artistic expressiveness. You can make any kind of 2D or 3D art, using a wide variety of techniques."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Ease of use. This covers a lot of ground, including the IDE and the language itself."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mathematical purity is not a goal, but there are lots of areas in the design where mathematical purity makes important contributions to artistic expressiveness, ease of use, and ease of engineering. So I use mathematical purity as a tool, not as an end in itself:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Pure functional programming. This contributes greatly to ease of use, and simplifies the engineering (generating data-parallel rendering code). The semantics of the language are much simpler. A pure functional API for constructing shapes by composing functions is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "so much nicer",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " than a 1990's style API where graphical primitives paint directly onto a canvas and you have to manage a set of global variables containing the current colour, the current line width, the current transformation matrix, etc."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Abstract algebra, what Haskell calls \"equational reasoning\". Unlike most programming languages, the equality operator "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is an equivalence relation: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==a",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "; "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " implies "
                                    },
                                    {
                                        "type": "text",
                                        "text": "b==a",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "; "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "b==c",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " implies "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==c",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Unlike most dynamic languages, the boolean operations obey all the axioms of a boolean algebra. For example, unlike in Python Javascript Lisp, the boolean and operator is commutative. This all falls under ease of use: simple language semantics, no surprises."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, there are some kinds of mathematical purity in Haskell culture that are detrimental to my goals.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Lazy function calls are a net loss; Curv uses strict argument evaluation in function calls."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Static typing is a big barrier to learning a language, and is incompatible with live programming, so Curv is dynamically typed."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I haven't built a Turing complete reactive API yet, but DCTP looks really hard to understand. The Elm language transitioned from \"mathematically pure\" FRP to \"the Elm architecture\", which is much easier to understand, and it is still \"pure functional\" and \"reactive\". So I'll probably take my lead from Elm, begin with the Elm architecture, and iterate from there."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1578876791.145200",
        "client_msg_id": "ac2e0a6a-aa8c-4f64-9058-25b0ef41f867",
        "text": "<@UJN1TAYEQ> to defend Haskell culture — a bit of it and not to be confused with Haskell itself.  To make types consistent with liveness, you need holes: this part isn't filled in yet or these two parts are at odds because I'm reconciling them.  Now laziness strike me as nearly as important as purity: being able to ignore the timing of when a function gets evaluated.  Then treat change over time as a first class entity rather than a side effect function evaluation order.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q=O2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " to defend Haskell culture — a bit of it and not to be confused with Haskell itself.  To make types consistent with liveness, you need holes: this part isn't filled in yet or these two parts are at odds because I'm reconciling them.  Now laziness strike me as nearly as important as purity: being able to ignore the timing of when a function gets evaluated.  Then treat change over time as a first class entity rather than a side effect function evaluation order."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1578882161.145600",
        "client_msg_id": "24373528-3b55-49b8-8a6c-ae3028c4983b",
        "text": "Hazel has holes, and it is dynamically typed for this reason. It's a terminology issue. \"Dynamic typing\" is not academically respectable, so they had to use different terminology in the paper. But it's dynamic typing because they store type information in the data and check the type information at runtime, which Haskell doesn't do.\n\nI make a distinction between Haskell's lazy evaluation of function calls, and lazy data structures. No other languages I know have copied Haskell's lazy function calls, due to ease of use issues for the programmer (unpredictable performance and memory consumption), and due to high cost and complexity of implementation. Even Idris, which is even purer than Haskell, with its dependent types and total functions, uses strict evaluation order. Lazy function calls would be disastrous for Curv, but other forms of laziness will be necessary.\n\nCurv is a pure functional language. All functions are pure (have no side effects). The language guarantees that you can't use side effects to determine the order of evaluation of function calls within an expression. So yes, I do want to treat change over time as a first class entity. Curv totally works this way right now. However, the Haskell virtual machine (the way it implements laziness) is totally incompatible with running code on a GPU, so I may need to find new ways to model change over time in a pure functional language as Curv becomes more powerful. I feel that I cannot simply follow in Haskell's footsteps. Haskell just is not designed for GPUs. Haskell's model of laziness is intimately tied to a single-threaded execution model, while GPUs are data-parallel : that is part of the problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hazel has holes, and it is dynamically typed for this reason. It's a terminology issue. \"Dynamic typing\" is not academically respectable, so they had to use different terminology in the paper. But it's dynamic typing because they store type information in the data and check the type information at runtime, which Haskell doesn't do.\n\nI make a distinction between Haskell's lazy evaluation of function calls, and lazy data structures. No other languages I know have copied Haskell's lazy function calls, due to ease of use issues for the programmer (unpredictable performance and memory consumption), and due to high cost and complexity of implementation. Even Idris, which is even purer than Haskell, with its dependent types and total functions, uses strict evaluation order. Lazy function calls would be disastrous for Curv, but other forms of laziness will be necessary.\n\nCurv is a pure functional language. All functions are pure (have no side effects). The language guarantees that you can't use side effects to determine the order of evaluation of function calls within an expression. So yes, I do want to treat change over time as a first class entity. Curv totally works this way right now. However, the Haskell virtual machine (the way it implements laziness) is totally incompatible with running code on a GPU, so I may need to find new ways to model change over time in a pure functional language as Curv becomes more powerful. I feel that I cannot simply follow in Haskell's footsteps. Haskell just is not designed for GPUs. Haskell's model of laziness is intimately tied to a single-threaded execution model, while GPUs are data-parallel : that is part of the problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1578890895.145800",
        "client_msg_id": "f4b52c33-62a0-4d1b-b722-f27f54b4b27c",
        "text": "<@UHDQ62M4P> It wasn't clear to me how to navigate around using only the keyboard. Stuff like you can't exit a nested sheet using only the arrow keys: you hit an invisible wall at the edges. And how to get INTO a nested sheet took me a while: you can't navigate using the arrow keys from the cell text into the sheet, you need to hit SHIFT+ENTER.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MmFFv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " It wasn't clear to me how to navigate around using only the keyboard. Stuff like you can't exit a nested sheet using only the arrow keys: you hit an invisible wall at the edges. And how to get INTO a nested sheet took me a while: you can't navigate using the arrow keys from the cell text into the sheet, you need to hit SHIFT+ENTER."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1578890915.146000",
        "client_msg_id": "c7824c3a-09f3-4636-aa84-eca9cd2fd72a",
        "text": "The controls are learnable to be sure, they just defied my expectations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ys7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The controls are learnable to be sure, they just defied my expectations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1578890989.146200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1578891030.000000"
        },
        "client_msg_id": "07b80d27-9bf7-43f1-8fd0-7e1785e9de5f",
        "text": "...also zooming is unusable on a Mac trackpad, because we don't have discrete clicks",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tf52c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...also zooming is unusable on a Mac trackpad, because we don't have discrete clicks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1578891127.146500",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1578891266.000000"
        },
        "client_msg_id": "54cb5816-0f0a-475f-983e-4735d1cdcff9",
        "text": "The default text size is also too small for me and I couldn't find an app-wide slider for it (edit: nevermind, there's an option in Preferences, but I expected the \"zoom in\" under the View menu to do the same thing).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JuT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The default text size is also too small for me and I couldn't find an app-wide slider for it (edit: nevermind, there's an option in Preferences, but I expected the \"zoom in\" under the View menu to do the same thing)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD31LGQKB",
        "type": "message",
        "ts": "1578894684.146900",
        "client_msg_id": "368ae6cb-2cfc-4de7-94b5-fa1590f553d4",
        "text": "I think bits and pieces of humane interface are very good, which unfortunately makes it the best thing I've read in this space. When I get the chance to return to fructure, I have lots of thoughts about mouse\/pad navigation for structured editing. At a high level I'm still keen on approaching multimodal nav from the keyboard side, working on more richly spatializing key input. Less clickly clicky and more pushing and pulling and tossing and swishing. My hope is that by construing key input as physicalized interaction with tangible syntax, touch and mouse modes will drop out naturally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7e6e0f8e031",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-19\/699535022069_b7e6e0f8e031cdcf896f_72.jpg",
            "first_name": "",
            "real_name": "andrew blinn",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "me1856",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "unB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think bits and pieces of humane interface are very good, which unfortunately makes it the best thing I've read in this space. When I get the chance to return to fructure, I have lots of thoughts about mouse\/pad navigation for structured editing. At a high level I'm still keen on approaching multimodal nav from the keyboard side, working on more richly spatializing key input. Less clickly clicky and more pushing and pulling and tossing and swishing. My hope is that by construing key input as physicalized interaction with tangible syntax, touch and mouse modes will drop out naturally."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1578895849.150300",
        "client_msg_id": "014A5A79-926C-461F-9D1C-E1F28D790B4A",
        "text": "Another angle to look at this which could be inspirational might be through assistive technologies and their interaction models. How do you interact with just one button, two buttons\/one dimension (backward\/forward), and four buttons\/two dimensions (directional pad).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TrSjS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another angle to look at this which could be inspirational might be through assistive technologies and their interaction models. How do you interact with just one button, two buttons\/one dimension (backward\/forward), and four buttons\/two dimensions (directional pad)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD31LGQKB",
        "type": "message",
        "ts": "1578896843.150600",
        "client_msg_id": "4f302683-8293-436c-8f3a-eb310bd7a0c1",
        "text": "Excellent point. Relatedly Ive been using NES + SNES controllers during development as motivators to keep my core interaction model tight <https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19|https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19> <https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19|https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7e6e0f8e031",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-19\/699535022069_b7e6e0f8e031cdcf896f_72.jpg",
            "first_name": "",
            "real_name": "andrew blinn",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "me1856",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/disconcision|@disconcision>: #fructure <https:\/\/pbs.twimg.com\/media\/Dt3vlQ6WsAA0FGx.jpg>",
                "ts": 1544247021,
                "author_name": "andrew blinn",
                "author_link": "https:\/\/twitter.com\/disconcision\/status\/1071275770306150401",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/983773516880232448\/XsKqt1c8_normal.jpg",
                "author_subname": "@disconcision",
                "text": "#fructure <https:\/\/pbs.twimg.com\/media\/Dt3vlQ6WsAA0FGx.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19",
                "image_url": "https:\/\/pbs.twimg.com\/media\/Dt3vlQ6WsAA0FGx.jpg",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 94805,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https:\/\/twitter.com\/disconcision|@disconcision>: trying to button-mash a fixed-point combinator. as one do <https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1071284829134774272\/pu\/img\/LvbtYpMZP563UhfP.jpg>",
                "ts": 1544249228,
                "author_name": "andrew blinn",
                "author_link": "https:\/\/twitter.com\/disconcision\/status\/1071285028200472576",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/983773516880232448\/XsKqt1c8_normal.jpg",
                "author_subname": "@disconcision",
                "text": "trying to button-mash a fixed-point combinator. as one do",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19",
                "thumb_url": "https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1071284829134774272\/pu\/img\/LvbtYpMZP563UhfP.jpg",
                "thumb_width": 675,
                "thumb_height": 1200,
                "video_html_width": 675,
                "video_html_height": 1200,
                "video_html": "<video controls poster=\"https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1071284829134774272\/pu\/img\/LvbtYpMZP563UhfP.jpg\" width=\"675\" height=\"1200\"><source type=\"video\/mp4\" src=\"https:\/\/video.twimg.com\/ext_tw_video\/1071284829134774272\/pu\/vid\/720x1280\/OSMA_r-OZ3IY728l.mp4?tag=6\"><\/video>",
                "id": 2,
                "original_url": "https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Ah8s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excellent point. Relatedly Ive been using NES + SNES controllers during development as motivators to keep my core interaction model tight "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19",
                                "text": "https:\/\/twitter.com\/disconcision\/status\/1071275770306150401?s=19"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19",
                                "text": "https:\/\/twitter.com\/disconcision\/status\/1071285028200472576?s=19"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1578898239.150900",
        "client_msg_id": "4a993725-57ce-4e74-9321-748e9900db44",
        "text": "<@UCGAK10LS> Yeah I'm not a keyboard-only user, so no idea how easy that is. Also not sure how easy it is to match someone's expectations, since everyone has a different idea of what is natural, depending on what text editor, spreadsheet or outliner you come from. And yes, there are some new concepts to learn, such as how zoom and text scaling works in it, that are pretty powerful once you know.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Yeah I'm not a keyboard-only user, so no idea how easy that is. Also not sure how easy it is to match someone's expectations, since everyone has a different idea of what is natural, depending on what text editor, spreadsheet or outliner you come from. And yes, there are some new concepts to learn, such as how zoom and text scaling works in it, that are pretty powerful once you know."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ7QL15F",
        "type": "message",
        "ts": "1578899133.151200",
        "edited": {
            "user": "UEQ7QL15F",
            "ts": "1578901668.000000"
        },
        "client_msg_id": "9b3b474e-486f-4ddb-b7a1-0e80b7126bb8",
        "text": "“WHEN should I represent choices in a list. How can I use relative positioning effectively? How do I make important details visible at the right time? How do I avoid indirection?”\n\nThese are the kinds of problems interaction designers are skilled at solving. I haven’t seen a perfect book\/source on this topic, but a couple of, perhaps too mainstream\/practical, books I would recommend:\n\nAbout Face\n<https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571>\n\nDesigning Web Interfaces and Designing Interfaces:\n<https:\/\/www.amazon.com\/Designing-Web-Interfaces-Principles-Interactions\/dp\/0596516258>\n<https:\/\/www.amazon.co.uk\/dp\/1449379702\/>\n\nDon’t Make me Think\n<https:\/\/www.amazon.co.uk\/dp\/0321965515\/>\n\nRefactoring UI — more on the visual side, but does affect the “how to make important details visible” part:\n<https:\/\/refactoringui.com\/book\/>\n\nThere are also quite good articles, blog posts and ux.stackoverflow answers online on the usage of specific components or interactions, for example:\n<https:\/\/uxplanet.org\/checkbox-vs-toggle-switch-7fc6e83f10b8>\n<https:\/\/blog.prototypr.io\/how-to-choose-and-design-selection-controls-in-ux-ba4a68344118>\n\nAlso something quite important: many choices are specific to the target audience, what you want to optimize for and the user context. Most design problems are trade-offs between different goals, such as flexibility and ease-of-learning.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g52d221ae708",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a52d221ae708f36674644a348005633a.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Janne",
            "real_name": "Janne Aukia",
            "display_name": "jaukia",
            "team": "T5TCAFTA9",
            "name": "janne.aukia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZghFi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“WHEN should I represent choices in a list. How can I use relative positioning effectively? How do I make important details visible at the right time? How do I avoid indirection?”\n\nThese are the kinds of problems interaction designers are skilled at solving. I haven’t seen a perfect book\/source on this topic, but a couple of, perhaps too mainstream\/practical, books I would recommend:\n\nAbout Face\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/About-Face-Essentials-Interaction-Design\/dp\/1118766571"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDesigning Web Interfaces and Designing Interfaces:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Designing-Web-Interfaces-Principles-Interactions\/dp\/0596516258"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.co.uk\/dp\/1449379702\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDon’t Make me Think\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.co.uk\/dp\/0321965515\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRefactoring UI — more on the visual side, but does affect the “how to make important details visible” part:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/refactoringui.com\/book\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere are also quite good articles, blog posts and ux.stackoverflow answers online on the usage of specific components or interactions, for example:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/uxplanet.org\/checkbox-vs-toggle-switch-7fc6e83f10b8"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.prototypr.io\/how-to-choose-and-design-selection-controls-in-ux-ba4a68344118"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso something quite important: many choices are specific to the target audience, what you want to optimize for and the user context. Most design problems are trade-offs between different goals, such as flexibility and ease-of-learning."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    }
]