[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1741605309.408319",
        "client_msg_id": "a683f51b-1f7a-4f1c-90b4-e4e77d8fb390",
        "text": "I’ve come to believe that we’re missing out on approximately 90% of what’s possible because of how we program. It’s not just about the syntax, it goes much deeper - it’s rooted in culture, religion, dogmatism, and closed-mindedness. I think the word “function” has been overused, and the emphasis on efficiency has gone too far. Here are a few thoughts… YMMV. What do you think? <https:\/\/programmingsimplicity.substack.com\/p\/how-did-we-get-here?r=1egdky|How Did We Get Here?> <https:\/\/programmingsimplicity.substack.com\/p\/the-best-programming-language?r=1egdky|The Best Programming Language>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6bd7124a-2cf9-4e84-a6e9-daca0f79d234_656x1171.heic",
                "image_width": 656,
                "image_height": 600,
                "image_bytes": 43080,
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/how-did-we-get-here?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/how-did-we-get-here?r=1egdky",
                "fallback": "How Did We Get Here?",
                "text": "2025-02-07",
                "title": "How Did We Get Here?",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/how-did-we-get-here?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            },
            {
                "from_url": "https:\/\/programmingsimplicity.substack.com\/p\/the-best-programming-language?r=1egdky",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "thumb_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d69eba9-d5d3-4387-a046-9b881b00bd45_131x131.png",
                "thumb_width": 131,
                "thumb_height": 131,
                "id": 2,
                "original_url": "https:\/\/programmingsimplicity.substack.com\/p\/the-best-programming-language?r=1egdky",
                "fallback": "The Best Programming Language",
                "text": "2025-03-07",
                "title": "The Best Programming Language",
                "title_link": "https:\/\/programmingsimplicity.substack.com\/p\/the-best-programming-language?r=1egdky",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yuv6c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve come to believe that we’re missing out on approximately 90% of what’s possible because of how we program. It’s not just about the syntax, it goes much deeper - it’s rooted in culture, religion, dogmatism, and closed-mindedness. I think the word “function” has been overused, and the emphasis on efficiency has gone too far. Here are a few thoughts… YMMV. What do you think? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/how-did-we-get-here?r=1egdky",
                                "text": "How Did We Get Here?"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/programmingsimplicity.substack.com\/p\/the-best-programming-language?r=1egdky",
                                "text": "The Best Programming Language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1741605348.018929",
        "client_msg_id": "6194b6ec-4627-4289-a5d5-035c780ddc7a",
        "text": "I’m curious about your thoughts on this idea: Glamorous Toolkit and Live Programming environments seem to essentially be REPLs  that use modernized input and output technologies.\n\nBack in the 1950s, REPLs used the best I\/O and interface tech they had back then - mostly text-based command lines because computers couldn’t do much else. But now, environments like Glamorous Toolkit make output look better with graphics instead of just printing text, and Live Programming environments have GUIs with interactive stuff like sliders to change things while the program is running.\n\nThe only tricky part in designing modern REPLs seems to be figuring out how to keep things flexible while still working with strongly-typed, functional programming languages.\n\nDo you think I’m oversimplifying these modern programming environments? Am I missing something important about how they differ from traditional REPLs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "reply_count": 13,
        "reply_users_count": 4,
        "latest_reply": "1742230039.617159",
        "reply_users": [
            "U013ZLJARC7",
            "UGWUJUZHT",
            "UJBAJNFLK",
            "U03LMRE6MQE"
        ],
        "replies": [
            {
                "user": "U013ZLJARC7",
                "ts": "1741611856.464409"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1741615479.382129"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1741619387.912529"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1741679656.122659"
            },
            {
                "user": "U03LMRE6MQE",
                "ts": "1742045142.752909"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742055115.950369"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742067259.375729"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742116891.591469"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742128580.346509"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742130226.992809"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742139477.193009"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1742184067.661759"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1742230039.617159"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o1kST",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m curious about your thoughts on this idea: Glamorous Toolkit and Live Programming environments seem to essentially be REPLs  that use modernized input and output technologies.\n\nBack in the 1950s, REPLs used the best I\/O and interface tech they had back then - mostly text-based command lines because computers couldn’t do much else. But now, environments like Glamorous Toolkit make output look better with graphics instead of just printing text, and Live Programming environments have GUIs with interactive stuff like sliders to change things while the program is running.\n\nThe only tricky part in designing modern REPLs seems to be figuring out how to keep things flexible while still working with strongly-typed, functional programming languages.\n\nDo you think I’m oversimplifying these modern programming environments? Am I missing something important about how they differ from traditional REPLs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1741611856.464409",
        "client_msg_id": "a82a1c19-094a-4931-8726-da0371f5fcec",
        "text": "Sometimes pieces of the environment have an event loop of their own with which the coder can interact in a variety of ways. This is quite different from a 50s\/60s-style REPL where there’s a single thread of execution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q7Bf1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sometimes pieces of the environment have an event loop of their own with which the coder can interact in a variety of ways. This is quite different from a 50s\/60s-style REPL where there’s a single thread of execution."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1741615479.382129",
        "client_msg_id": "550659fb-68a4-4804-8de0-5270e77d9ab1",
        "text": "Actually, I'm still missing something. How is the modern main-loop different from the 50s\/60s idea? In the 50s\/60s REPL, the code runs a main-loop, and serially, runs a little GUI each time through. In the modern stand-beside Live thing, the main-loop serially runs a little GUI each time through. The GUI code is embedded in the main-loop in the 50s\/60s version, but is stand-beside in the modern version. The effect is the same, just the implementation details differ (slightly). In the end, either approach invokes a function(s) to change something at runtime. Only the presentation of the GUI is different. And the speed at which the main-loop comes around is faster today. ? <@U013ZLJARC7>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EdBRt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually, I'm still missing something. How is the modern main-loop different from the 50s\/60s idea? In the 50s\/60s REPL, the code runs a main-loop, and serially, runs a little GUI each time through. In the modern stand-beside Live thing, the main-loop serially runs a little GUI each time through. The GUI code is embedded in the main-loop in the 50s\/60s version, but is stand-beside in the modern version. The effect is the same, just the implementation details differ (slightly). In the end, either approach invokes a function(s) to change something at runtime. Only the presentation of the GUI is different. And the speed at which the main-loop comes around is faster today. ? "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1741619387.912529",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1741622337.000000"
        },
        "client_msg_id": "6392052e-5a3a-4f51-9f42-8ce0e96aafea",
        "text": "In the Smalltalk case, there are objects that can have their own threads of execution independent of the GUI loop. In the Lisp case, you can have running threads that are independent of the REPL loop. These threads can be doing various computations, passing messages to each other, &c, with the REPL allowing you to “talk” to them. Most music livecoders have multiple such threads of execution producing different streams of audio at any given time, for example.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1741605348.018929",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GtXKy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the Smalltalk case, there are objects that can have their own threads of execution independent of the GUI loop. In the Lisp case, you can have running threads that are independent of the REPL loop. These threads can be doing various computations, passing messages to each other, &c, with the REPL allowing you to “talk” to them. Most music livecoders have multiple such threads of execution producing different streams of audio at any given time, for example."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]