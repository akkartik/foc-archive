[
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1615626878.188100",
        "client_msg_id": "c0450451-201b-4506-8461-68aa8bfe32b4",
        "text": "Very slick yes.\n\nDuring the drawing of the rhombus, I was wondering how it was going to enforce that the sides were the same length. I was imagining some kind of slightly clumsy thing where they were tied together with shift+drag or something.\n\nThe actual solution is that it infers it from the fact that they are equal length.\n\nI think this is actually a really keen insight into how normal people think vs programmers.\n\nInteresting that the same technique was not used for the colours. Wouldn't it also be a safe assumption that colours that are the same in your \"example\" drawing are meant to be the same in the definition? When you have an explicit, editable, textual definition right there I feel like the bar is raised right up for making these kind of assumptions.\n\nIt also has this nice side effect, a little bit like unit testing, where it forces the user to draw the most generic version of the object, where nothing happens to be the same, only things are defined to be the same",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615528167.138300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6JhH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very slick yes.\n\nDuring the drawing of the rhombus, I was wondering how it was going to enforce that the sides were the same length. I was imagining some kind of slightly clumsy thing where they were tied together with shift+drag or something.\n\nThe actual solution is that it infers it from the fact that they are equal length.\n\nI think this is actually a really keen insight into how normal people think vs programmers.\n\nInteresting that the same technique was not used for the colours. Wouldn't it also be a safe assumption that colours that are the same in your \"example\" drawing are meant to be the same in the definition? When you have an explicit, editable, textual definition right there I feel like the bar is raised right up for making these kind of assumptions.\n\nIt also has this nice side effect, a little bit like unit testing, where it forces the user to draw the most generic version of the object, where nothing happens to be the same, only things are defined to be the same"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615646222.188400",
        "client_msg_id": "7ea1352b-963b-43f9-be05-593fadeba0f0",
        "text": "Hmm, the first things that come to mind with similar themes are MVC, the <https:\/\/docs.microsoft.com\/en-us\/dotnet\/architecture\/microservices\/microservice-ddd-cqrs-patterns\/infrastructure-persistence-layer-design|repository pattern> , and Model View View-Model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "title": "Designing the infrastructure persistence layer",
                "title_link": "https:\/\/docs.microsoft.com\/en-us\/dotnet\/architecture\/microservices\/microservice-ddd-cqrs-patterns\/infrastructure-persistence-layer-design",
                "text": ".NET Microservices Architecture for Containerized .NET Applications | Explore the repository pattern in the design of the infrastructure persistence layer.",
                "fallback": "Designing the infrastructure persistence layer",
                "thumb_url": "https:\/\/docs.microsoft.com\/en-us\/media\/logos\/logo-ms-social.png",
                "from_url": "https:\/\/docs.microsoft.com\/en-us\/dotnet\/architecture\/microservices\/microservice-ddd-cqrs-patterns\/infrastructure-persistence-layer-design",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/docs.microsoft.com\/favicon.ico",
                "service_name": "docs.microsoft.com",
                "id": 1,
                "original_url": "https:\/\/docs.microsoft.com\/en-us\/dotnet\/architecture\/microservices\/microservice-ddd-cqrs-patterns\/infrastructure-persistence-layer-design"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g5L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, the first things that come to mind with similar themes are MVC, the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.microsoft.com\/en-us\/dotnet\/architecture\/microservices\/microservice-ddd-cqrs-patterns\/infrastructure-persistence-layer-design",
                                "text": "repository pattern"
                            },
                            {
                                "type": "text",
                                "text": " , and Model View View-Model."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615646348.188700",
        "client_msg_id": "6312521e-29a3-49be-beac-1505ff4760f6",
        "text": "Given it's emphasis on OO (either OOP or Kay OO), it doesn't seem like something that I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) or functional programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Ri",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Given it's emphasis on OO (either OOP or Kay OO), it doesn't seem like something that I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) or functional programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1615647133.188900",
        "client_msg_id": "1e3c1d04-2290-42cc-be57-818a7e2aa67e",
        "text": "There is quite a bit of overlap with these ideas and the big picture of the software I've written. Things like microservices feel like they embody Kay OOP and the OO that Reenskaug describes here. I feel that we can see an advantage to OOP as something which enables a stricter separation of responsibilities, which is essentially what many architectures are currently built around. For example, a Third Party data sync integration is one object, while the browser client is one object, and some auth gateway is another object.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oAypn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is quite a bit of overlap with these ideas and the big picture of the software I've written. Things like microservices feel like they embody Kay OOP and the OO that Reenskaug describes here. I feel that we can see an advantage to OOP as something which enables a stricter separation of responsibilities, which is essentially what many architectures are currently built around. For example, a Third Party data sync integration is one object, while the browser client is one object, and some auth gateway is another object."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1615648422.189100",
        "client_msg_id": "cd9a39df-e7c7-45f7-a4fa-19227995a5f6",
        "text": "DCI have similarities with MVC because both were created by Trygve! :smile: <https:\/\/folk.universitetetioslo.no\/trygver\/index.html>\nIMO the most interesting idea in DCI is about making the  `compile` path equal to the `runtime` path. I hate having to play computer every time I read code.\nEvery concept that you mentioned above lacks this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/yTz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DCI have similarities with MVC because both were created by Trygve! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/folk.universitetetioslo.no\/trygver\/index.html"
                            },
                            {
                                "type": "text",
                                "text": "\nIMO the most interesting idea in DCI is about making the  "
                            },
                            {
                                "type": "text",
                                "text": "compile",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path equal to the "
                            },
                            {
                                "type": "text",
                                "text": "runtime",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path. I hate having to play computer every time I read code.\nEvery concept that you mentioned above lacks this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1615651718.189300",
        "client_msg_id": "6d85e7a2-1b53-4523-b357-5419868863bb",
        "text": "That bit wasn't clear to me either. How does it avoid fixating on small differences in length?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615528167.138300",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i8Dg\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That bit wasn't clear to me either. How does it avoid fixating on small differences in length?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1615660255.189600",
        "client_msg_id": "5d08379c-47d1-4ce5-ac1d-2d2c919f7c7b",
        "text": "Great work by <@U019PRL1BNU>! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615571467.178700",
        "parent_user_id": "U013ZLJARC7",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zne9k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great work by "
                            },
                            {
                                "type": "user",
                                "user_id": "U019PRL1BNU"
                            },
                            {
                                "type": "text",
                                "text": "! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1615662915.204800",
        "client_msg_id": "FE09832E-846F-466E-8110-69600DE4ADC8",
        "text": "Very familiar, have built a few systems in DCI – also familiar with Jim's book, which is a pretty good dive into DCI but relies on some custom libraries. In my mind, DCI should be doable with language convention alone. Dynamic languages (or langs that support dynamic invocation) are best suited, as method chains will be overridden. DCI also prefers true object-based languages, vs class-based (though Trygve's collaborator Jim Coplien has built DCI systems in C++ and Java, too – and has defined a custom DCI language charmingly called `trygve`).\n\nThe idea of DCI is essentially that a model can have a \"role\" snapped onto it as needed, which provides behavior for the model. When you need the system to do something (ie, a use case), you have a use case object load data models, snap roles on them, and the roles provide new functions – run the functions, then release everything (data model objects go back to being plain vanilla without particular role behaviors).\n\nWhat this does is deconstruct &amp; relieve the pressure put on traditional objects (at least the 90s-00s notions of objects) to be all things for all use cases. Instead, a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\n\nIt cleans up a codebase because what you primarily see are use cases (context object definitions), and then the models and roles that fulfill the use cases. It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n\nI haven't used it outside of database-oriented projects (tables are nice forcing functions to define models). It worked perfectly in rails. I'm not sure how I'd use it in a strongly-typed language. I think it has a lot of untapped potential.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fu4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very familiar, have built a few systems in DCI – also familiar with Jim's book, which is a pretty good dive into DCI but relies on some custom libraries. In my mind, DCI should be doable with language convention alone. Dynamic languages (or langs that support dynamic invocation) are best suited, as method chains will be overridden. DCI also prefers true object-based languages, vs class-based (though Trygve's collaborator Jim Coplien has built DCI systems in C++ and Java, too – and has defined a custom DCI language charmingly called "
                            },
                            {
                                "type": "text",
                                "text": "trygve",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").\n"
                            },
                            {
                                "type": "text",
                                "text": "\nThe idea of DCI is essentially that a model can have a \"role\" snapped onto it as needed, which provides behavior for the model. When you need the system to do something (ie, a use case), you have a use case object load data models, snap roles on them, and the roles provide new functions – run the functions, then release everything (data model objects go back to being plain vanilla without particular role behaviors).\n\nWhat this does is deconstruct & relieve the pressure put on traditional objects (at least the 90s-00s notions of objects) to be all things for all use cases. Instead, a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\n\nIt cleans up a codebase because what you primarily see are use cases (context object definitions), and then the models and roles that fulfill the use cases. It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n\nI haven't used it outside of database-oriented projects (tables are nice forcing functions to define models). It worked perfectly in rails. I'm not sure how I'd use it in a strongly-typed language. I think it has a lot of untapped potential."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1615665067.205100",
        "client_msg_id": "bf9df51b-387b-428b-880f-110bc6be3f58",
        "text": "Thanks for the explantion <@USH01JEDQ>!\n&gt;  It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n^ This is the part about DCI that I'm interested the most. Do you have en example a bit more involved than the classic `TransferMoney`?\nI'm looking into introducing DCI to Ruby\/Rails codebase :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "do3ku",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the explantion "
                            },
                            {
                                "type": "user",
                                "user_id": "USH01JEDQ"
                            },
                            {
                                "type": "text",
                                "text": "!\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "^ This is the part about DCI that I'm interested the most. Do you have en example a bit more involved than the classic "
                            },
                            {
                                "type": "text",
                                "text": "TransferMoney",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\nI'm looking into introducing DCI to Ruby\/Rails codebase "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1615665423.205300",
        "client_msg_id": "8091b6fc-7063-4079-a5be-44b9d459361c",
        "text": "Another question, do you have thoughts about having DCI in a frontend-end framework, e.g. React, Elm, Vue, or even vanilla js?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQ0uL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another question, do you have thoughts about having DCI in a frontend-end framework, e.g. React, Elm, Vue, or even vanilla js?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1615666886.212300",
        "client_msg_id": "92917FAC-E3A0-4C12-B37C-0C037F64EECB",
        "text": "Sure... In one system, which provided an infrastructure service, a useful model was a NetworkInterface, that represented fields like eth0, mac address, local IP. \n\nIt also had enough data that we could assign it a role as a SwitchPort, with functions that could communicate directly to switch firmware.\n\nOne use case was to ChangeSubnet, to move a machine NIC to a different network. The ChangeSubnet object could load the NetworkInterface(s) required for the request, add the SwitchPort role to the NetworkInterface, call a SwitchPort function to essentially change to a new switch port, and then update the NetworkInterface model fields accordingly. So in the end, the machine ended up on a new network, and the state of the row of the NetworkInterface table was properly kept up-to-date.\n\nIn our top level folder, there's a ChangeSubnet ruby file. You look into it to see how the business is done, and how the SwitchPort role is defined.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ftd0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure... In one system, which provided an infrastructure service, a useful model was a NetworkInterface, that represented fields like eth0, mac address, local IP. \n"
                            },
                            {
                                "type": "text",
                                "text": "\nIt also had enough data that we could assign it a role as a SwitchPort, with functions that could communicate directly to switch firmware.\n\nOne use case was to ChangeSubnet, to move a machine NIC to a different network. The ChangeSubnet object could load the NetworkInterface(s) required for the request, add the SwitchPort role to the NetworkInterface, call a SwitchPort function to essentially change to a new switch port, and then update the NetworkInterface model fields accordingly. So in the end, the machine ended up on a new network, and the state of the row of the NetworkInterface table was properly kept up-to-date.\n\nIn our top level folder, there's a ChangeSubnet ruby file. You look into it to see how the business is done, and how the SwitchPort role is defined."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1615667658.212500",
        "edited": {
            "user": "U85HCL7JP",
            "ts": "1615667679.000000"
        },
        "client_msg_id": "028c425b-d109-476a-bbb3-00f4236d71cb",
        "text": "Do you ever need to share Roles\/methods between Contexts? Is duplication the way to go?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RAM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you ever need to share Roles\/methods between Contexts? Is duplication the way to go?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1615684038.214000",
        "client_msg_id": "B1A152F0-56EA-4025-95BD-AE5A2CF9210C",
        "text": "Almost never – we kept roles as a folder of modules, but we could have just done it the recommended way of keeping the definitions in the context file",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KS3Sh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Almost never – we kept roles as a folder of modules, but we could have just done it the recommended way of keeping the definitions in the context file"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    }
]