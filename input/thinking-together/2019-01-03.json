[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1546529720.255400",
        "client_msg_id": "b3725941-d52a-4083-a62d-890d58932395",
        "text": "<@UEBG0NPDK> Welcome to the 2x club.  Two favorite lines, \"\"we deal with concurrency through this horrid mess of locks and sadness\" and \"C is not going to save us.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546382827.234000",
        "parent_user_id": "UCSJ44X1S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4M50",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Welcome to the 2x club.  Two favorite lines, \"\"we deal with concurrency through this horrid mess of locks and sadness\" and \"C is not going to save us.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1546530692.255600",
        "client_msg_id": "7298c6c2-782a-4dbd-a298-dfa46bbe56a6",
        "text": "<@UE6EFEPTQ> <@U8A5MS6R1> I've had some fun with managed time over time.  Once it's rich enough, you get a lot a nuance —  and a potential nightmare.  Suppose you have a nice, nice mechanism for dealing time (a run, an execution) in a first class way.  Soon you'll find yourself manipulating many runs at once, each with its own history.  At first it's like having many documents open, each with its own undo buffer.  Later it begins to feel more possible worldy.  You find that patch vs replay are just extremes and that there's value to inserting code updates in the middle of execution to find where it is that they actually make a difference.  With orchestration of runs a complicated as that, you are sure to want to inspect the process of inspecting processes.  Still not entirely comfortable with the ramifications of the feedback.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546382827.234000",
        "parent_user_id": "UCSJ44X1S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hptm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I've had some fun with managed time over time.  Once it's rich enough, you get a lot a nuance —  and a potential nightmare.  Suppose you have a nice, nice mechanism for dealing time (a run, an execution) in a first class way.  Soon you'll find yourself manipulating many runs at once, each with its own history.  At first it's like having many documents open, each with its own undo buffer.  Later it begins to feel more possible worldy.  You find that patch vs replay are just extremes and that there's value to inserting code updates in the middle of execution to find where it is that they actually make a difference.  With orchestration of runs a complicated as that, you are sure to want to inspect the process of inspecting processes.  Still not entirely comfortable with the ramifications of the feedback."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1546531332.255800",
        "client_msg_id": "b9ea68b6-99e4-435d-93a6-9569702c81f7",
        "text": "Stepping back from all that, the most direct way I've found to explain the how log-based systems relate to state-based ones is fundamental theorem of calculus.  If you record state changes, you get the log.  If you sum up the changes, you get the state.  Each brings out an aspect of what's going on.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546382827.234000",
        "parent_user_id": "UCSJ44X1S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QVkY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Stepping back from all that, the most direct way I've found to explain the how log-based systems relate to state-based ones is fundamental theorem of calculus.  If you record state changes, you get the log.  If you sum up the changes, you get the state.  Each brings out an aspect of what's going on."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1546531569.256000",
        "client_msg_id": "ce695ca5-bb96-49fc-a6ce-9b36d37ba25c",
        "text": "<@UEQ6M68H0> The academia conversation is big one to be had.  And academia is big: to what degree are the people using R, the people using Coq, and the people using commercial software, the same people?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546382827.234000",
        "parent_user_id": "UCSJ44X1S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DkBO3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " The academia conversation is big one to be had.  And academia is big: to what degree are the people using R, the people using Coq, and the people using commercial software, the same people?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEZPBFZPC",
        "type": "message",
        "ts": "1546533296.261900",
        "edited": {
            "user": "UEZPBFZPC",
            "ts": "1546533315.000000"
        },
        "client_msg_id": "a99e4314-0619-4171-9654-8d3377b104dd",
        "text": "I wanted to share a great talk about teaching computational thinking by Brown Univ. professor Shriram Krishnamurthi. <https:\/\/www.youtube.com\/watch?v=rM_E2IwlprY>\n\nAlso excited to see <@UETJZ9V0T> here. Your post on problem-solution ordering (<https:\/\/mkremins.github.io\/blog\/doors-headaches-intellectual-need\/>) has strongly influenced how I think about learning and teaching programming. In this talk Prof. Krishnamurthi adds an insight about inductive learning where you go from concrete instances to a generalized understanding (problem-solution ordering) - it is difficult to transfer a concept thus learned to other instances of the same underlying problem. So while inductive learning is essential to understand a problem in the first place, students also need to examine the problem purely in abstract so that they are able to transfer it to any other instance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge45ce1ec733",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2e45ce1ec733f588158cdf54c736c13d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0014-72.png",
            "first_name": "Jasim",
            "real_name": "Jasim A Basheer",
            "display_name": "Jasim",
            "team": "T5TCAFTA9",
            "name": "jasim.ab",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546533296.261900",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1546610509.273300",
        "reply_users": [
            "U5TCAFTD3",
            "UEZPBFZPC"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1546607291.271000"
            },
            {
                "user": "UEZPBFZPC",
                "ts": "1546608891.271700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1546608923.272000"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1546608930.272200"
            },
            {
                "user": "UEZPBFZPC",
                "ts": "1546610509.273300"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1546610509.273300",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Shriram Krishnamurthi, Teaching Computational Thinking 21 03 2018",
                "title_link": "https:\/\/www.youtube.com\/watch?v=rM_E2IwlprY",
                "author_name": "Teaching Support Center EPFL",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCRV2oFTYpAqBI1orGBOD5Xg",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/rM_E2IwlprY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Shriram Krishnamurthi, Teaching Computational Thinking 21 03 2018",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/rM_E2IwlprY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=rM_E2IwlprY",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=rM_E2IwlprY"
            },
            {
                "title": "Locked doors, headaches, and intellectual need",
                "title_link": "https:\/\/mkremins.github.io\/blog\/doors-headaches-intellectual-need\/",
                "text": "You know those things that, once you learn about them for the first time, you start seeing them absolutely everywhere? Recently, that’s been my experience with problem-solution ordering issues. They keep cropping up: not just in the context of gam...",
                "fallback": "Locked doors, headaches, and intellectual need",
                "from_url": "https:\/\/mkremins.github.io\/blog\/doors-headaches-intellectual-need\/",
                "service_name": "mkremins.github.io",
                "id": 2,
                "original_url": "https:\/\/mkremins.github.io\/blog\/doors-headaches-intellectual-need\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bgc6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wanted to share a great talk about teaching computational thinking by Brown Univ. professor Shriram Krishnamurthi. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=rM_E2IwlprY"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso excited to see "
                            },
                            {
                                "type": "user",
                                "user_id": "UETJZ9V0T"
                            },
                            {
                                "type": "text",
                                "text": " here. Your post on problem-solution ordering ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mkremins.github.io\/blog\/doors-headaches-intellectual-need\/"
                            },
                            {
                                "type": "text",
                                "text": ") has strongly influenced how I think about learning and teaching programming. In this talk Prof. Krishnamurthi adds an insight about inductive learning where you go from concrete instances to a generalized understanding (problem-solution ordering) - it is difficult to transfer a concept thus learned to other instances of the same underlying problem. So while inductive learning is essential to understand a problem in the first place, students also need to examine the problem purely in abstract so that they are able to transfer it to any other instance."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1546552317.263000",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1549090112.000000"
        },
        "client_msg_id": "be26ca7e-93ce-4383-ac7b-296c1087b2fd",
        "text": "I think the real reason academia is so heavily using R, ArcGIS and other subscription products is that they aren't sharing code; they instead need to share data using the same program, and their datasets are complex and it is just too painful to have different data structures, so they tend to standardize on a small set of products so it is easy to ship data back and forth. In many fields like Archaeology,. Geology, etc., the main work they do is actually collecting data. Data hoarding is a big problem in archaeology for example, because if you spent hot days using a small brush to delicately expose some ancient thing the last thing you want is some hotshot doing a better job analyzing your hard-won data. And let's not forget that the vast majority of people using computers are not in the computer field. But the real issue i see is that for the purposes of this future of coding group, i don't think we can expect a warm welcome from the academic communities in any field, because they are so already standardized on high quality subscription-based commercial software, with strong support groups already formed. I think the early adopter audience for new languages is going to come from the hobbyist and curious professionals, who have quite a different need set than the other users, but are at least open to something new. So this is why R, MatLab, ArcGIS and many other expensive subscription products dominate the academic space. In the hobbyist environment on the other hand, free tools are very common, and you see Python, Atom, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546382827.234000",
        "parent_user_id": "UCSJ44X1S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qiG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the real reason academia is so heavily using R, ArcGIS and other subscription products is that they aren't sharing code; they instead need to share data using the same program, and their datasets are complex and it is just too painful to have different data structures, so they tend to standardize on a small set of products so it is easy to ship data back and forth. In many fields like Archaeology,. Geology, etc., the main work they do is actually collecting data. Data hoarding is a big problem in archaeology for example, because if you spent hot days using a small brush to delicately expose some ancient thing the last thing you want is some hotshot doing a better job analyzing your hard-won data. And let's not forget that the vast majority of people using computers are not in the computer field. But the real issue i see is that for the purposes of this future of coding group, i don't think we can expect a warm welcome from the academic communities in any field, because they are so already standardized on high quality subscription-based commercial software, with strong support groups already formed. I think the early adopter audience for new languages is going to come from the hobbyist and curious professionals, who have quite a different need set than the other users, but are at least open to something new. So this is why R, MatLab, ArcGIS and many other expensive subscription products dominate the academic space. In the hobbyist environment on the other hand, free tools are very common, and you see Python, Atom, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]