[
    {
        "user": "UETFVV24Q",
        "type": "message",
        "ts": "1595438474.188900",
        "client_msg_id": "d022db9e-c95d-4d43-91b2-333593aabaed",
        "text": "my infatuation with spreadsheets is rooted in a respect for the original relational-model of data, where all data is tuples and tables. Very flexible and general-purpose model that should be used more. Spreadsheets are good since they’re the most natural way of working directly with relational-style data.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e6a851923d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-20\/1067569014342_3e6a851923d262ea9e74_72.png",
            "first_name": "",
            "real_name": "Andy F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andy.fischer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595371343.178500",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NnF+5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my infatuation with spreadsheets is rooted in a respect for the original relational-model of data, where all data is tuples and tables. Very flexible and general-purpose model that should be used more. Spreadsheets are good since they’re the most natural way of working directly with relational-style data."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UMH5FAW2Y"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1595438896.189100",
        "client_msg_id": "d368c648-80cc-422f-911c-7de396674fb0",
        "text": "\"Database for free\" is def a benefit",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595371343.178500",
        "parent_user_id": "USH01JEDQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l5krU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Database for free\" is def a benefit"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595452624.192300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1595452769.000000"
        },
        "client_msg_id": "AAD389D6-CC07-4931-B41C-D4F9FDFBE9F1",
        "text": "are there any lispers around who can explain the decision \/ make the argument for function call syntax looking like `(function-name arg1 arg2 arg3)` and not `(function-name (arg1 arg2 arg3))` or in clojure: `(function-name [arg1 arg2 arg3])`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "reply_count": 41,
        "reply_users_count": 9,
        "latest_reply": "1595603452.291700",
        "reply_users": [
            "UKP3B2J5D",
            "UCUSW7WVD",
            "UK3LH8CF5",
            "UHWC9PXBL",
            "UJN1TAYEQ",
            "UT60XSVCN",
            "UAVCC2X70",
            "U013ZLJARC7",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UKP3B2J5D",
                "ts": "1595452852.196200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595453508.196500"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1595454031.196700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454396.202900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1595454469.204600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454474.204900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454561.206900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454712.210300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1595454736.210600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454772.211700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454807.212600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595454848.212900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595454975.215700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595455027.216600"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1595455245.218500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595455581.219300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595457653.227500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595457917.233200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1595457990.233600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595458018.233900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595458168.235900"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1595461729.236900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595466257.243600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595466355.245100"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1595468455.245300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595470204.247000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595479232.248100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595480931.262300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595481564.262500"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1595493109.266100"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1595493335.266300"
            },
            {
                "user": "UT60XSVCN",
                "ts": "1595497171.266500"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595499783.267400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1595510199.268200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1595513868.268500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595564501.281300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595566869.281800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1595573271.283000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595598824.289600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1595602759.290300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1595603452.291700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UBX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are there any lispers around who can explain the decision \/ make the argument for function call syntax looking like "
                            },
                            {
                                "type": "text",
                                "text": "(function-name arg1 arg2 arg3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and not "
                            },
                            {
                                "type": "text",
                                "text": "(function-name (arg1 arg2 arg3))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or in clojure: "
                            },
                            {
                                "type": "text",
                                "text": "(function-name [arg1 arg2 arg3])",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1595452852.196200",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1595452957.000000"
        },
        "client_msg_id": "205CB1AF-3A33-430B-ACEB-800648069951",
        "text": "Less parenthesis perhaps? Plus conceptually, everything is a function? Plus lightest syntax possible?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g1euC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Less parenthesis perhaps? Plus conceptually, everything is a function? Plus lightest syntax possible?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595453508.196500",
        "client_msg_id": "1c176785-6b95-48fb-b97e-edae56c8468d",
        "text": "Yeah. It's an interesting question I haven't encountered before. It's not quite the usual discussion about `function-name(arg1 arg2 arg3)`. What would be the advantages of this approach, Garth?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1NKt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. It's an interesting question I haven't encountered before. It's not quite the usual discussion about "
                            },
                            {
                                "type": "text",
                                "text": "function-name(arg1 arg2 arg3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". What would be the advantages of this approach, Garth?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1595454031.196700",
        "client_msg_id": "5fe05e93-6d36-4faa-89ad-fe5a7cd32abb",
        "text": "<@UHWC9PXBL> Not 100% sure what sort of explanation you are looking for. `(function-name (arg1 arg2 arg3))` would have to have different evaluation semantics. Typically if you see `(something here)` it is a list and if it isn't quoted then it is a going to be interpreted as a function call.\n\nSo with this change you'd have to say that things are only function calls if their first argument is a list and functions only can take 1 argument (i.e. `(function-name (arg1) (arg2))` would be undefined? What would `(f x)` now mean? Would it just be like a quoted list?\n\nOf course, you wouldn't want `(arg1 arg2 arg3)` to be an actual list, because now you have allocate just to call a function so it is just syntatic grouping but at the macro level it is of course still a list.\n\nIn general, it would make syntax more awkward (just think about math). It would make the evaluation semantics much more awkward.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uyR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Not 100% sure what sort of explanation you are looking for. "
                            },
                            {
                                "type": "text",
                                "text": "(function-name (arg1 arg2 arg3))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would have to have different evaluation semantics. Typically if you see "
                            },
                            {
                                "type": "text",
                                "text": "(something here)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it is a list and if it isn't quoted then it is a going to be interpreted as a function call.\n\nSo with this change you'd have to say that things are only function calls if their first argument is a list and functions only can take 1 argument (i.e. "
                            },
                            {
                                "type": "text",
                                "text": "(function-name (arg1) (arg2))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would be undefined? What would "
                            },
                            {
                                "type": "text",
                                "text": "(f x)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " now mean? Would it just be like a quoted list?\n\nOf course, you wouldn't want "
                            },
                            {
                                "type": "text",
                                "text": "(arg1 arg2 arg3)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be an actual list, because now you have allocate just to call a function so it is just syntatic grouping but at the macro level it is of course still a list.\n\nIn general, it would make syntax more awkward (just think about math). It would make the evaluation semantics much more awkward."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454396.202900",
        "client_msg_id": "A9B3A784-7812-4354-BB70-F35999230576",
        "text": "i’ll be more coherent about why i’m having this thought later as i’m on my phone and can’t just type my way to coherency—i’m thinking about things like symmetry, especially for macros and fexprs, and also what i found confusing when i started with lisp (i’d say “a function takes a list of arguments” but syntactically it doesn’t look like that, so i found it harder to read where calls were... not that beginner’s confusion is a super productive place to go with lisp)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CquX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’ll be more coherent about why i’m having this thought later as i’m on my phone and can’t just type my way to coherency—i’m thinking about things like symmetry, especially for macros and fexprs, and also what i found confusing when i started with lisp (i’d say “a function takes a list of arguments” but syntactically it doesn’t look like that, so i found it harder to read where calls were... not that beginner’s confusion is a super productive place to go with lisp)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1595454469.204600",
        "client_msg_id": "d3ba3fa6-0b55-45f4-b8ce-e2aad5d2ed47",
        "text": "The original 1960 paper on Lisp provides the context. <https:\/\/web.cs.dal.ca\/~vlado\/pl\/recursive.pdf>\n• The original syntax for function call in Lisp was intended to be f[x,y].\n• The paper describes S-expressions, which are the Lisp syntax for literal constants. '42' is an S-expr representing a number. '(1 2 3)' is an S-expr representing a list of numbers. 'f' is a symbol. '(f x)' is a list of two symbols. And so on.\n• The paper provides source code for a Lisp interpreter. In order for the interpreter to work, programs must be represented as data structures. So the function call 'f[x]' is *encoded* as the data structure '(f x)'.\n• One of McCarthy's students implemented the interpreter described in the paper, but didn't bother to implement the complicated Lisp syntax. Instead, he just used S-expression syntax for programs.\n• Everybody in the lab liked using S-expression syntax, so the original Lisp syntax was never implemented.\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hfg6t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The original 1960 paper on Lisp provides the context. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/web.cs.dal.ca\/~vlado\/pl\/recursive.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The original syntax for function call in Lisp was intended to be f[x,y]."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The paper describes S-expressions, which are the Lisp syntax for literal constants. '42' is an S-expr representing a number. '(1 2 3)' is an S-expr representing a list of numbers. 'f' is a symbol. '(f x)' is a list of two symbols. And so on."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The paper provides source code for a Lisp interpreter. In order for the interpreter to work, programs must be represented as data structures. So the function call 'f[x]' is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "encoded",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " as the data structure '(f x)'."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "One of McCarthy's students implemented the interpreter described in the paper, but didn't bother to implement the complicated Lisp syntax. Instead, he just used S-expression syntax for programs."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Everybody in the lab liked using S-expression syntax, so the original Lisp syntax was never implemented."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454474.204900",
        "client_msg_id": "CF9631FD-ABEB-4742-8E06-64E9440DD3F0",
        "text": "another way of putting it is purely aesthetic... like a function being invoked is a different “type” (loosely) of thing than a list of inert data",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dz6+4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "another way of putting it is purely aesthetic... like a function being invoked is a different “type” (loosely) of thing than a list of inert data"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454561.206900",
        "client_msg_id": "5080C793-D266-4337-B578-719C88DF4622",
        "text": "<@UJN1TAYEQ> i’m familiar with the history side of this—it’s more like why do s-expressions consider the “listness” of a function call higher priority than its “pairness” if that makes sense",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vre2K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " i’m familiar with the history side of this—it’s more like why do s-expressions consider the “listness” of a function call higher priority than its “pairness” if that makes sense"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454712.210300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1595454738.000000"
        },
        "client_msg_id": "7152F464-7A89-453F-ACD3-6DAD1BA512C9",
        "text": "i’d consider arguments to a function hierarchically subordinate to the invoking of a function—like in the notation we use for mathematical functions—to ahistorically backpropogate a justification for f(x) notation, the parens show that x is in some sense being “put inside” the function x",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4xT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’d consider arguments to a function hierarchically subordinate to the invoking of a function—like in the notation we use for mathematical functions—to ahistorically backpropogate a justification for f(x) notation, the parens show that x is in some sense being “put inside” the function x"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1595454736.210600",
        "client_msg_id": "454b38bb-c579-4ebc-bf60-9f2e73cc3a0b",
        "text": "I think it is history and path-dependence. A syntax is chosen by a hacker based on pure expediency and ease of implementation, then the decision sticks. It's the same reason why the Lisp community took so many years to accept lexical scoping and lexical function closures, even though closures were invented in 1964. It's because that original interpreter used dynamic scoping, and once they started using the original interpreter, nobody wanted to change the design.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3yVG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it is history and path-dependence. A syntax is chosen by a hacker based on pure expediency and ease of implementation, then the decision sticks. It's the same reason why the Lisp community took so many years to accept lexical scoping and lexical function closures, even though closures were invented in 1964. It's because that original interpreter used dynamic scoping, and once they started using the original interpreter, nobody wanted to change the design."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454772.211700",
        "client_msg_id": "DC87C915-6B80-48AC-9CBB-60181F7795A1",
        "text": "totally! i’m wondering if anyone who works with lisp finds it more ergonomic for non-path-dependence reasons",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U+4y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "totally! i’m wondering if anyone who works with lisp finds it more ergonomic for non-path-dependence reasons"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454807.212600",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1595454841.000000"
        },
        "client_msg_id": "BDD49538-5C0C-427A-89A6-D0B6F9375911",
        "text": "(i know that i’m weirdly trying to evaluate the idea of adding MORE parens to lisp syntax)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7gNLv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(i know that i’m weirdly trying to evaluate the idea of adding MORE parens to lisp syntax)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595454848.212900",
        "client_msg_id": "50cd38e0-9cbf-4e3f-b50c-5b8cfd3664e3",
        "text": "Yeah, _more parens_ is drowning out everything else for me at the moment. I'm going to noodle on it and see if I can get past that..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wzkPZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, "
                            },
                            {
                                "type": "text",
                                "text": "more parens",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is drowning out everything else for me at the moment. I'm going to noodle on it and see if I can get past that.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595454975.215700",
        "client_msg_id": "D7DDFD40-02AD-4D35-A14E-9BB7EF2C4D8D",
        "text": "i’m particularly agnostic to more parens because i’m working on languages that are at a minimum frame-based, and at a maximum completely gamified—so the typing part gets mostly replaced by doing actions rather than typing syntax",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "392c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i’m particularly agnostic to more parens because i’m working on languages that are at a minimum frame-based, and at a maximum completely gamified—so the typing part gets mostly replaced by doing actions rather than typing syntax"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595455027.216600",
        "client_msg_id": "90A049A8-F204-45F3-A35D-126C1FAEE500",
        "text": "<@UKP3B2J5D> if you take the less parens logic to its conclusion you get something spacing-based like haskell",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "32eN2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " if you take the less parens logic to its conclusion you get something spacing-based like haskell"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1595455245.218500",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1595455304.000000"
        },
        "client_msg_id": "AB601774-514C-47E0-9F9D-11848EFD7484",
        "text": "Yeah and tbh, I struggle with no parens with Haskell sometimes. I think it’s the tension between explicit but tedious to write vs. implicit be could but be ambiguous",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xg8q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah and tbh, I struggle with no parens with Haskell sometimes. I think it’s the tension between explicit but tedious to write vs. implicit be could but be ambiguous"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595455581.219300",
        "client_msg_id": "3f91cfe3-2c67-4171-aff5-13529b81744a",
        "text": "Yeah, systems with fewer spaces have been discussed many times. Which is why this thread is interesting :smile:\n\n<@UHWC9PXBL> your reference to frame-based systems is helpful. Extra parens make a lot more sense if a \"function\" can take more than args. It might even make sense to indent it like this:\n\n```(function-name\n    (arg1 arg2 arg3)\n    (block1\n     block2\n     block3)\n    metadata1\n    ...)```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gey=C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, systems with fewer spaces have been discussed many times. Which is why this thread is interesting "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " your reference to frame-based systems is helpful. Extra parens make a lot more sense if a \"function\" can take more than args. It might even make sense to indent it like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(function-name\n    (arg1 arg2 arg3)\n    (block1\n     block2\n     block3)\n    metadata1\n    ...)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595457653.227500",
        "client_msg_id": "6217E678-017A-4DB4-A059-F0879F913D9C",
        "text": "this may be running way to far down into specifics but stuff like injecting runtime args for eg a thread macro—i know with lisp it would really just be eg `(cons (append (cdr (call-site)) new-arg))`, but if you look at it from a destructuring perspective or even more like a prolog-esque unification, something like (completely made up syntax)\n`return (function-name (...args additional-argument))` \nmakes more sense to me than `return (function-name ...args additional-arg)`... i think. i may have just persuaded myself out of this discussion lol",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vbg3i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this may be running way to far down into specifics but stuff like injecting runtime args for eg a thread macro—i know with lisp it would really just be eg "
                            },
                            {
                                "type": "text",
                                "text": "(cons (append (cdr (call-site)) new-arg))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but if you look at it from a destructuring perspective or even more like a prolog-esque unification, something like (completely made up syntax)\n"
                            },
                            {
                                "type": "text",
                                "text": "return (function-name (...args additional-argument))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \n"
                            },
                            {
                                "type": "text",
                                "text": "makes more sense to me than "
                            },
                            {
                                "type": "text",
                                "text": "return (function-name ...args additional-arg)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "... i think. i may have just persuaded myself out of this discussion lol"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595457917.233200",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1595457953.000000"
        },
        "client_msg_id": "09FE800B-544C-425F-A1A0-E1E63B717016",
        "text": "ok, here’s my take: original, mutable lisp, sees code firstly as a *list of instructions to be executed*, not a *data structure reflecting the semantics of code evaluation,* if that makes sense. i now realize that part of my interest in more parentheses comes from the idea of parens indicating order of execution, so it makes sense to parenthesize function arguments, as a mnemonic reminding the user that they’ll be evaluated before being passed to the function. i have no opinion anymore lol",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mqm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, here’s my take: original, mutable lisp, sees code firstly as a "
                            },
                            {
                                "type": "text",
                                "text": "list of instructions to be executed",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not a "
                            },
                            {
                                "type": "text",
                                "text": "data structure reflecting the semantics of code evaluation, ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "if that makes sense. i now realize that part of my interest in more parentheses comes from the idea of parens indicating order of execution, so it makes sense to parenthesize function arguments, as a mnemonic reminding the user that they’ll be evaluated before being passed to the function. i have no opinion anymore lol"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1595457990.233600",
        "client_msg_id": "bda1eda7-17c5-4e56-901f-409b65017ddd",
        "text": "So macros wouldn't have parens! I think you're on to something here.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l0nCl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So macros wouldn't have parens! I think you're on to something here."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "exploding_head",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595458018.233900",
        "client_msg_id": "0FD9EC1A-2110-46E3-9714-5A1FA8B8F936",
        "text": "exactly!!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Stg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "exactly!!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595458168.235900",
        "client_msg_id": "798A1720-2811-4476-9682-D13A3E8CE284",
        "text": "ironically i’m implementing the first pass of this in json because i’m uncultured swine and i live in a ditch with all the web app apis. but this has been super helpful!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ironically i’m implementing the first pass of this in json because i’m uncultured swine and i live in a ditch with all the web app apis. but this has been super helpful!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0165TZ39GV",
        "type": "message",
        "ts": "1595461156.236800",
        "client_msg_id": "358B58BC-BB02-4437-8C21-333D12B409AF",
        "text": "Has anyone tried out Bolt, recently acquired by Unity?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "dc2c7f9b4a4f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-06-29\/1217517778004_dc2c7f9b4a4f3937c08d_72.png",
            "first_name": "Joe",
            "real_name": "Joe Nash",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe.nash",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tlnOt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone tried out Bolt, recently acquired by Unity?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595461729.236900",
        "client_msg_id": "1833a0f9-2900-45c4-a6f7-274daf2adf7a",
        "text": "Well, it seems you want `(apply fun (list arg1 arg2 arg3))` to be the default, with syntactic sugar for it. It feels odd, but you are correct in pointing out that while function calls are destructured as pairs, syntactically there is no indication that this is the case. But honestly I can't think of a way to make this work short of the usual `fun(arg1 arg2)` syntax. \n\nThis is a bit unrelated, but it came to mind when thinking of uniform syntax—in fennel-lang, unquoting something that isn't quasiquoted moves its evaluation to compile time, which kind of gives you something like \"anonymous macros\" for free, which I've always found really neat.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VZx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, it seems you want "
                            },
                            {
                                "type": "text",
                                "text": "(apply fun (list arg1 arg2 arg3))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be the default, with syntactic sugar for it. It feels odd, but you are correct in pointing out that while function calls are destructured as pairs, syntactically there is no indication that this is the case. But honestly I can't think of a way to make this work short of the usual "
                            },
                            {
                                "type": "text",
                                "text": "fun(arg1 arg2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax. \n\nThis is a bit unrelated, but it came to mind when thinking of uniform syntax—in fennel-lang, unquoting something that isn't quasiquoted moves its evaluation to compile time, which kind of gives you something like \"anonymous macros\" for free, which I've always found really neat."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595466257.243600",
        "client_msg_id": "9DF7220F-6792-4773-81B3-69BD14DA2FA5",
        "text": "<@UT60XSVCN> i think you’ve nailed it, except i think i’m reaching for something maybe-impossible, which is `(apply (fun arglist))` , so that apply is the same kind of form as a function is—a tree-shape that dictates something about its children. \n\ni REALLY like the sound of the fennel-lang thing—i hadn’t heard of it. that’s exactly the kind of symmetry i go bananas for, particularly because it sounds like it deals with a model of managing the order of interpretation\/execution. thanks for pointing me to it! (for any lurkers the link is <https:\/\/fennel-lang.org\/|https:\/\/fennel-lang.org\/> )",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DvVJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UT60XSVCN"
                            },
                            {
                                "type": "text",
                                "text": " i think you’ve nailed it, except i think i’m reaching for something maybe-impossible, which is "
                            },
                            {
                                "type": "text",
                                "text": "(apply (fun arglist))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , so that apply is the same kind of form as a function is—a tree-shape that dictates something about its children. \n\ni REALLY like the sound of the fennel-lang thing—i hadn’t heard of it. that’s exactly the kind of symmetry i go bananas for, particularly because it sounds like it deals with a model of managing the order of interpretation\/execution. thanks for pointing me to it! (for any lurkers the link is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/fennel-lang.org\/",
                                "text": "https:\/\/fennel-lang.org\/"
                            },
                            {
                                "type": "text",
                                "text": " )"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595466355.245100",
        "client_msg_id": "6CAE44FD-FD4D-44D7-9B53-9A7E35045E40",
        "text": "in the example above, `arglist` might have to be something analogous to boxed. idk. trying to figure out if i can make it all consistent ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gxa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the example above, "
                            },
                            {
                                "type": "text",
                                "text": "arglist",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might have to be something analogous to boxed. idk. trying to figure out if i can make it all consistent "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT60XSVCN",
        "type": "message",
        "ts": "1595468455.245300",
        "client_msg_id": "fc6421ba-ec22-4fad-953a-cc120ff52758",
        "text": "I think there is something to be explored here, for sure, personally I wasn't really too comfortable with lisp style function calls until I did the interpreter chapter in sicp and implemented apply. I think for beginners it's hard to tell the difference between eval and apply—it took me a long time to understand it. I have it in my mind as one of those cs stopping points like recursion.\n\nUnfortunately I don't have any concrete ideas on the topic other than suggesting that everyone should study interpreters at some point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc3e6041047",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc3e6041047849518d1b042f0a29d5af.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "S.M Mukarram Nainar",
            "display_name": "S.M Mukarram Nainar",
            "team": "T5TCAFTA9",
            "name": "nainars",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VT6uq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there is something to be explored here, for sure, personally I wasn't really too comfortable with lisp style function calls until I did the interpreter chapter in sicp and implemented apply. I think for beginners it's hard to tell the difference between eval and apply—it took me a long time to understand it. I have it in my mind as one of those cs stopping points like recursion.\n\nUnfortunately I don't have any concrete ideas on the topic other than suggesting that everyone should study interpreters at some point."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1595470204.247000",
        "client_msg_id": "167A7683-A3FC-4721-A262-EAD0023EFCC0",
        "text": "yeah. this is definitely in the territory of trying to do something similar",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A2u2v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah. this is definitely in the territory of trying to do something similar"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595479232.248100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595484872.000000"
        },
        "client_msg_id": "f71a0935-fe0a-4f96-9bd0-8e75b2894773",
        "text": "I've been on this road before! Here's my story:\n\nMaking a Lisp\/Scheme-like language. There is no \"compile time\", just immediately invoked code -- BUT, that code can just happen to setup stuff to be invoked later. So compile time magic is replaced with regular old code of any sort, that just runs once at \"startup\". Any function can be a \"macro\", in this sense.\n\n(I think this is an unacknowledged genius of JavaScript, which is why people can do so many very interesting and powerful things with the language on levels that you don't really see elsewhere).\n\nWant to \"compile away\" that startup pass? Have that code do the \"setup\" and then just spit out the result, and send *that* off as the \"built\" code -- which is possible because all the \"code\" is just lists and stuff; just print it all out or copy it out of the inspector\/repl\/etc.\n\nOk, so who needs macro expansion, right? But beyond that, if a \"macro\" is just a function that *happens* to take unevaluated code as arguments, then there needs to be a good way to control when arguments are or are not evaluated before passing them in. And hey, if these \"macros\" can be called any time (at \"setup\" or on the fly at \"normal runtime\" -- something macro expansion cannot do), then what if I want to use an expression whose _result_ is the code to pass to the \"macro\"?\n\nI'll detail a could options I've gone through in a separate reply, since this is getting long",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rXmL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been on this road before! Here's my story:\n\nMaking a Lisp\/Scheme-like language. There is no \"compile time\", just immediately invoked code -- BUT, that code can just happen to setup stuff to be invoked later. So compile time magic is replaced with regular old code of any sort, that just runs once at \"startup\". Any function can be a \"macro\", in this sense.\n\n(I think this is an unacknowledged genius of JavaScript, which is why people can do so many very interesting and powerful things with the language on levels that you don't really see elsewhere).\n\nWant to \"compile away\" that startup pass? Have that code do the \"setup\" and then just spit out the result, and send "
                            },
                            {
                                "type": "text",
                                "text": "that",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " off as the \"built\" code -- which is possible because all the \"code\" is just lists and stuff; just print it all out or copy it out of the inspector\/repl\/etc.\n\nOk, so who needs macro expansion, right? But beyond that, if a \"macro\" is just a function that "
                            },
                            {
                                "type": "text",
                                "text": "happens",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to take unevaluated code as arguments, then there needs to be a good way to control when arguments are or are not evaluated before passing them in. And hey, if these \"macros\" can be called any time (at \"setup\" or on the fly at \"normal runtime\" -- something macro expansion cannot do), then what if I want to use an expression whose "
                            },
                            {
                                "type": "text",
                                "text": "result",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the code to pass to the \"macro\"?\n\nI'll detail a could options I've gone through in a separate reply, since this is getting long"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1595480888.262200",
        "client_msg_id": "9b6f0d66-a0ec-4517-9ec2-09c69470daa6",
        "text": "I'm not sure how to ask this but ... how often does simple ideas run into complex reality? I'm not sure I can explain myself well but I'm trying to think of examples. Let's say you have a configuration file stored (pick a format, JSON, yaml, xml, ...). You start with something simple\n\n```config = JSON.parse(readAsText('configfile'))\nprint(config.setting1);\nprint(config.setting2);```\nLooks great and it works. But then at some point you need to print an error message if the config file is wrong. First thing. the JSON\/Yaml\/XML is wrong and the message the library prints is cryptic. For JSON in JavaScript the message would be like \"unexpected } at character 2647\"\n\nThat's entirely not useful for the end user (let's skip the part whether or not JSON is useful for the end user for now).  So you go end up having to find a parser that will give a line number at least 'error on line 537'\n\nYou also maybe add a schema or something to check the structure of the file is correct. It will tell you there is no 'foobaz' setting or that 'size' must be a number not a string but in general that stuff happens after parsing so if you'll get an error \"size must be a number not a string\" when the error you want is \"size at line 537 is an error not a string\". Now your schema checker either needs to do it's own parsing making it vastly more complex than it was OR your schema checker needs to ingest a much more complex format of data than just the parsed data where every piece of data is annotated from where it came from.\n\nYou might argue such configuration should have a UI where you can't make those mistakes but that's just part of same problem. What started as a effectively 1 line of code is suddenly 1000s of lines of code.\n\nI feel like this pattern repeats itself in many other ways.\n\nMaybe this is like the text editor example where someone rants that a text editor can function in a few hundred lines of code but then someone else points out that it's not a few hundred lines of code when you have to support CJK, Thai, Arabic, and emoji",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595480888.262200",
        "reply_count": 6,
        "reply_users_count": 6,
        "latest_reply": "1595577451.283500",
        "reply_users": [
            "UCGAK10LS",
            "UC6997THT",
            "UA14TGLTC",
            "UAJ9DV971",
            "U01661S9F34",
            "UUQ2EQW21"
        ],
        "replies": [
            {
                "user": "UCGAK10LS",
                "ts": "1595492717.265600"
            },
            {
                "user": "UC6997THT",
                "ts": "1595498671.266900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1595500143.267600"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1595502825.267800"
            },
            {
                "user": "U01661S9F34",
                "ts": "1595532730.270400"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1595577451.283500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oBNe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure how to ask this but ... how often does simple ideas run into complex reality? I'm not sure I can explain myself well but I'm trying to think of examples. Let's say you have a configuration file stored (pick a format, JSON, yaml, xml, ...). You start with something simple\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "config = JSON.parse(readAsText('configfile'))\nprint(config.setting1);\nprint(config.setting2);"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nLooks great and it works. But then at some point you need to print an error message if the config file is wrong. First thing. the JSON\/Yaml\/XML is wrong and the message the library prints is cryptic. For JSON in JavaScript the message would be like \"unexpected } at character 2647\"\n\nThat's entirely not useful for the end user (let's skip the part whether or not JSON is useful for the end user for now).  So you go end up having to find a parser that will give a line number at least 'error on line 537'\n\nYou also maybe add a schema or something to check the structure of the file is correct. It will tell you there is no 'foobaz' setting or that 'size' must be a number not a string but in general that stuff happens after parsing so if you'll get an error \"size must be a number not a string\" when the error you want is \"size at line 537 is an error not a string\". Now your schema checker either needs to do it's own parsing making it vastly more complex than it was OR your schema checker needs to ingest a much more complex format of data than just the parsed data where every piece of data is annotated from where it came from.\n\nYou might argue such configuration should have a UI where you can't make those mistakes but that's just part of same problem. What started as a effectively 1 line of code is suddenly 1000s of lines of code.\n\nI feel like this pattern repeats itself in many other ways.\n\nMaybe this is like the text editor example where someone rants that a text editor can function in a few hundred lines of code but then someone else points out that it's not a few hundred lines of code when you have to support CJK, Thai, Arabic, and emoji"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595480931.262300",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595485275.000000"
        },
        "client_msg_id": "6a4ea61c-742b-42d6-b6a9-e5b7665c33c6",
        "text": "One option is to always evaluate everything, BUT have a concept of a \"code block\" that is not evaluated. This is the same idea as in SmallTalk or Rebol \/ Red, or lambda functions in languages like C# or JavaScript.\n\nIn my lang (which I'm piloting in JavaScript, so think JSON), \"functions\" are represented as objects with \"code\", \"args\", and \"parent\" (lexical scope) fields. The \"apply\" function (i.e. the part of the interpreter that handles function calls) creates a new \"lexical scope\" object with _its_ \"parent\" scope copied from the \"parent\" of the function. BUT, given a parent-less function-object, it uses the scope of the caller (dynamic scope) instead (Ta da! Closures! C# and JavaScript lambdas effectively do the same thing) ... So if I want to pass a code-block, I use { code: ..expr.. }. Otherwise I just use a regular old expression (which might happen to return a function).\n\n(Note: I'm making an editor where you build the code structure up directly, rather than type it out; so I care more about simple underlying structure than textual syntax, because I can dress it up. Not unlike how '(a b c) is shorthand for (list a b c) in some Lisps).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "470",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One option is to always evaluate everything, BUT have a concept of a \"code block\" that is not evaluated. This is the same idea as in SmallTalk or Rebol \/ Red, or lambda functions in languages like C# or JavaScript.\n\nIn my lang (which I'm piloting in JavaScript, so think JSON), \"functions\" are represented as objects with \"code\", \"args\", and \"parent\" (lexical scope) fields. The \"apply\" function (i.e. the part of the interpreter that handles function calls) creates a new \"lexical scope\" object with "
                            },
                            {
                                "type": "text",
                                "text": "its",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"parent\" scope copied from the \"parent\" of the function. BUT, given a parent-less function-object, it uses the scope of the caller (dynamic scope) instead (Ta da! Closures! C# and JavaScript lambdas effectively do the same thing) ... So if I want to pass a code-block, I use { code: ..expr.. }. Otherwise I just use a regular old expression (which might happen to return a function).\n\n(Note: I'm making an editor where you build the code structure up directly, rather than type it out; so I care more about simple underlying structure than textual syntax, because I can dress it up. Not unlike how '(a b c) is shorthand for (list a b c) in some Lisps)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1595481564.262500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595485537.000000"
        },
        "client_msg_id": "88dede1b-9a8b-458a-b114-bb9f72b973e5",
        "text": "In a scenario where JSON is passed ad-hoc as code to be evaluated and I needed to make the syntax as non-programmer friendly as possible, It was better to let the function itself determine when to evaluate which arguments (i.e. by manually calling eval as needed)\n\nSo an \"If\" (written as a lambda) would be:\n(cond, T, F) =&gt; eval(cond) ? eval(T) : eval(F)\n\nSo someone might expect all of this to be evaluated:\n[\"Foo\", [\"&lt;\", a, b], [c, d], [e, f]]\n\nBut (because it's documented) only expect either c-d or e-f to be evaluated for this:\n[\"If\", [\"&lt;\", a, b], [c, d], [e, f]]\n\nOr might expect this a-b-c to be used as-is as _a list_:\n[\"ExpectsListAndNum\", [a, b, c], 10]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1595452624.192300",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7QNUs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a scenario where JSON is passed ad-hoc as code to be evaluated and I needed to make the syntax as non-programmer friendly as possible, It was better to let the function itself determine when to evaluate which arguments (i.e. by manually calling eval as needed)\n\nSo an \"If\" (written as a lambda) would be:\n(cond, T, F) => eval(cond) ? eval(T) : eval(F)\n\nSo someone might expect all of this to be evaluated:\n[\"Foo\", [\"<\", a, b], [c, d], [e, f]]\n\nBut (because it's documented) only expect either c-d or e-f to be evaluated for this:\n[\"If\", [\"<\", a, b], [c, d], [e, f]]\n\nOr might expect this a-b-c to be used as-is as"
                            },
                            {
                                "type": "text",
                                "text": " a list",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n[\"ExpectsListAndNum\", [a, b, c], 10]"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]