[
    {
        "user": "UMH5FAW2Y",
        "type": "message",
        "ts": "1580837124.044400",
        "client_msg_id": "62be578c-712e-4d32-a9ae-190aa6bb2d92",
        "text": "Yeah, sorry for criticizing it for not being something it wasn't intended to be...I've also read through the Wrangling\/Viz notebook. My notes mostly focus on wrangling, although I get that's not really the most important part of the notebook.\n\n* Maybe worth emphasizing in the d3.csv() section that D3 has a lot of functionality outside of rendering visual elements. I think coming from data work in R or Python, people associate D3 with viz, so they expect its API to map to what viz libraries do in those languages. (I say \"people\", but mean \"me\".)\n* A minor point: I'm not sure about Pandas, but a tidy dataframe in R is a technically a list of column variables, not a list of row observations like the typical data array in js, although in practice you don't really ever think about it.\n* I really like the comparison between map\/filter and list comprehensions. The 1-1 translations are always great (I know you have a whole other notebook full of them). Consider including the Altair code that produces the equivalent of the vega-lite scatterplot.\n* Just an aside, as I've tried to do a little wrangling in js recently, this pattern has been useful: `data.map(x =&gt; ({...x, newVar: expr}))`\n* Dataforge (haven't used it) might be worth mentioning as the most Pandas-like option. <http:\/\/js4ds.org\/#s:dataforge>\n* I think the tutorial would flow better if the first chart you plot uses transformed data, rather than just the csv. Taking grouped counts and sums is a good realistic wrangling task.\n* Not sure it fits here, but I could see Math.sum(1,2,3) in js being confusing coming from python's sum([1,2,3]).\n* The part about getting Observable charts back into Pythonland is great. Definitely mention at the beginning that's where the tutorial is going.\n* And I saved my lamest gripe for last: iris is a boring dataset.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "051926604c26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-04\/1216047713558_051926604c2691293aaa_72.png",
            "first_name": "",
            "real_name": "Alex Wein",
            "display_name": "Alex Wein",
            "team": "T5TCAFTA9",
            "name": "alexwein",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MFWD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, sorry for criticizing it for not being something it wasn't intended to be...I've also read through the Wrangling\/Viz notebook. My notes mostly focus on wrangling, although I get that's not really the most important part of the notebook.\n\n* Maybe worth emphasizing in the d3.csv() section that D3 has a lot of functionality outside of rendering visual elements. I think coming from data work in R or Python, people associate D3 with viz, so they expect its API to map to what viz libraries do in those languages. (I say \"people\", but mean \"me\".)\n* A minor point: I'm not sure about Pandas, but a tidy dataframe in R is a technically a list of column variables, not a list of row observations like the typical data array in js, although in practice you don't really ever think about it.\n* I really like the comparison between map\/filter and list comprehensions. The 1-1 translations are always great (I know you have a whole other notebook full of them). Consider including the Altair code that produces the equivalent of the vega-lite scatterplot.\n* Just an aside, as I've tried to do a little wrangling in js recently, this pattern has been useful: "
                            },
                            {
                                "type": "text",
                                "text": "data.map(x => ({...x, newVar: expr}))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n* Dataforge (haven't used it) might be worth mentioning as the most Pandas-like option. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/js4ds.org\/#s:dataforge"
                            },
                            {
                                "type": "text",
                                "text": "\n* I think the tutorial would flow better if the first chart you plot uses transformed data, rather than just the csv. Taking grouped counts and sums is a good realistic wrangling task.\n* Not sure it fits here, but I could see Math.sum(1,2,3) in js being confusing coming from python's sum([1,2,3]).\n* The part about getting Observable charts back into Pythonland is great. Definitely mention at the beginning that's where the tutorial is going.\n* And I saved my lamest gripe for last: iris is a boring dataset."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE3KC0VK6",
        "type": "message",
        "ts": "1580838171.044600",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1580838198.000000"
        },
        "client_msg_id": "98fee7c7-9877-4639-9938-3d71bc244e0b",
        "text": "Thanks, again very helpful. You just taught me several important facts I didn't know and a bunch of things helpful things about approach",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2aabe3b15ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42aabe3b15ad406ed4237abd473bd55f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Thomas Ballinger",
            "display_name": "ballingt",
            "team": "T5TCAFTA9",
            "name": "me1542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXSE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, again very helpful. You just taught me several important facts I didn't know and a bunch of things helpful things about approach"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE3KC0VK6",
        "type": "message",
        "ts": "1580844307.044900",
        "client_msg_id": "43c1a8d4-4904-4576-b2cc-8b83a2b6b901",
        "text": "Iris is a boring data set isn't it :confused: I think it's staying for now but I'll be on the lookout for the next tutorial. Thanks again",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2aabe3b15ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42aabe3b15ad406ed4237abd473bd55f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Thomas Ballinger",
            "display_name": "ballingt",
            "team": "T5TCAFTA9",
            "name": "me1542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yjL=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Iris is a boring data set isn't it "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            },
                            {
                                "type": "text",
                                "text": " I think it's staying for now but I'll be on the lookout for the next tutorial. Thanks again"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP6G25H35",
        "type": "message",
        "ts": "1580867843.045300",
        "client_msg_id": "69801a13-d0fa-4b67-bb78-a1cc9ffbbff1",
        "text": "<@UE3KC0VK6> .. Do your customers want to do more than reports? So to make it easy to store and update  information as well as create reports, you could add something like  <https:\/\/pouchdb.com\/>\n\nThen things like this would work:\n```localStorage.setItem('name','Chris');```\nlet myName = localStorage.getItem('name');\n\nNo need for POST statements. No need for custom server side code.  For the end user, this would be a simpler solution.\n\nThis also opens up the option of people working off line, and the data syncing after they are back online.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "57dceb337de9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-12\/870368572213_57dceb337de9d471d315_72.jpg",
            "first_name": "Eddy",
            "real_name": "Eddy Parkinson",
            "display_name": "Eddy Parkinson",
            "team": "T5TCAFTA9",
            "name": "eddyparkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "anu3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE3KC0VK6"
                            },
                            {
                                "type": "text",
                                "text": " .. Do your customers want to do more than reports? So to make it easy to store and update  information as well as create reports, you could add something like  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pouchdb.com\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThen things like this would work:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "localStorage.setItem('name','Chris');"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "let myName = localStorage.getItem('name');\n\nNo need for POST statements. No need for custom server side code.  For the end user, this would be a simpler solution.\n\nThis also opens up the option of people working off line, and the data syncing after they are back online."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE3KC0VK6",
        "type": "message",
        "ts": "1580872678.049800",
        "client_msg_id": "3A110E1C-7360-4E6A-B924-339F55AF2276",
        "text": "Got it, that's a neat thought! I might try it in a notebook. There's no good integrated persistent state solution yet, similar to Jupyter notebook users have to choose their own. This would be a cool one to use, but as you say it would be slicker if we provided the backend.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2aabe3b15ad",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/42aabe3b15ad406ed4237abd473bd55f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Thomas Ballinger",
            "display_name": "ballingt",
            "team": "T5TCAFTA9",
            "name": "me1542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WtyUT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Got it, that's a neat thought! I might try it in a notebook. There's no good integrated persistent state solution yet, similar to Jupyter notebook users have to choose their own. This would be a cool one to use, but as you say it would be slicker if we provided the backend."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]