[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1661962300.475609",
        "client_msg_id": "5f35acea-b268-48e1-bcb3-b9ba9d8df030",
        "text": "What are alternative solutions to variables and scopes? Is there a proven abstraction that end users easily understand?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "reply_count": 38,
        "reply_users_count": 9,
        "latest_reply": "1662154679.863649",
        "reply_users": [
            "U03CEGR3HSL",
            "U03GBV8B58V",
            "UJBAJNFLK",
            "U040R67M66L",
            "UDQBTJ211",
            "UCGAK10LS",
            "U02E4DAQGSZ",
            "U03US9D90HW",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U03CEGR3HSL",
                "ts": "1661963815.079349"
            },
            {
                "user": "U03GBV8B58V",
                "ts": "1661964348.255999"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1661965168.600759"
            },
            {
                "user": "U040R67M66L",
                "ts": "1661967094.055919"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1661973016.755509"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1662001111.432409"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1662014446.658859"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1662017262.141839"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662019842.339559"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1662028061.125219"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662050280.817169"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662135011.308359"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662135192.427889"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662135220.188829"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662135416.798429"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1662136326.448549"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662140924.539159"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662142581.221269"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1662144969.810409"
            },
            {
                "user": "U03CEGR3HSL",
                "ts": "1662145282.127409"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662149764.267169"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662150299.117169"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662151339.470759"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662151537.574679"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662152126.166369"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662152393.448109"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662152586.890349"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1662153117.224259"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662153148.045989"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662153268.628089"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662153385.013169"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662153698.106909"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662153974.388189"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662154033.528309"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662154339.671729"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662154411.947479"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1662154467.619199"
            },
            {
                "user": "U03US9D90HW",
                "ts": "1662154679.863649"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aDS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are alternative solutions to variables and scopes? Is there a proven abstraction that end users easily understand?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1661963815.079349",
        "client_msg_id": "2337789a-dccc-4f21-9000-b2e4f00c30f3",
        "text": "Brian Harvey used to say that dynamic scope is what you get if you don't think about scope, so that's why it is easier for beginners to understand. But it still involves variables and a type of scoping.\n\nMaybe I'm suffering from a lack of imagination here, but I'm not sure how to easily perform abstraction without giving things names. Names are what help us humans remember the meaning and usage of a thing or a behavior. If one tried to create some form of graphical language where things were displayed but could not be named, I feel like the first thing people would ask for is the ability to use names so they're not stuck thinking about this thing and that thing and the other thing.\n\nIt did not take long for early programmers to invent so-called floating labels, allowing them to name pieces of code and data in memory. Even in spreadsheets, the ability to name cells and ranges makes formulas substantially easier to read.\n<https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED|https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED>\n\nOutside of computers, imagine trying to tell someone how to make a sandwich without using any names.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "from_url": "https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED",
                "image_url": "https:\/\/static.cambridge.org\/covers\/PSP_0_0_0\/mathematical_proceedings of the cambridge philosophical society.jpg?send-full-size-image=true",
                "image_width": 176,
                "image_height": 250,
                "image_bytes": 298396,
                "service_icon": "https:\/\/www.cambridge.org\/core\/cambridge-core\/public\/images\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED",
                "fallback": "Cambridge Core: The use of a ‘floating address’ system for orders in an automatic digital computer | Mathematical Proceedings of the Cambridge Philosophical Society | Cambridge Core",
                "text": "The use of a ‘floating address’ system for orders in an automatic digital computer - Volume 49 Issue 1",
                "title": "The use of a ‘floating address’ system for orders in an automatic digital computer | Mathematical Proceedings of the Cambridge Philosophical Society | Cambridge Core",
                "title_link": "https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED",
                "service_name": "Cambridge Core"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HWt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Brian Harvey used to say that dynamic scope is what you get if you don't think about scope, so that's why it is easier for beginners to understand. But it still involves variables and a type of scoping.\n\nMaybe I'm suffering from a lack of imagination here, but I'm not sure how to easily perform abstraction without giving things names. Names are what help us humans remember the meaning and usage of a thing or a behavior. If one tried to create some form of graphical language where things were displayed but could not be named, I feel like the first thing people would ask for is the ability to use names so they're not stuck thinking about this thing and that thing and the other thing.\n\nIt did not take long for early programmers to invent so-called floating labels, allowing them to name pieces of code and data in memory. Even in spreadsheets, the ability to name cells and ranges makes formulas substantially easier to read.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED",
                                "text": "https:\/\/www.cambridge.org\/core\/journals\/mathematical-proceedings-of-the-cambridge-philosophical-society\/article\/abs\/the-use-of-a-floating-address-system-for-orders-in-an-automatic-digital-computer\/66DB2A4ACA578BB871B1B4A75352A6ED"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOutside of computers, imagine trying to tell someone how to make a sandwich without using any names."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UA14TGLTC",
                    "U03FPD8BF19"
                ],
                "count": 3
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1661963881.369059",
        "client_msg_id": "D42F1CA8-F451-44F5-B9CA-BB7340290851",
        "text": "i like languages that take risks and go weird, so my favorite lisps are\n•  <https:\/\/picolisp.com\/wiki\/?home|picolisp> (FEXPRs, integrated database, only 3 data types)\n•  <http:\/\/www.newlisp.org\/|newLISP> (unique scoping (dynamic and lexical), fexprs, lots of really weird choices)\n• <https:\/\/www.red-lang.org\/p\/documentation.html?m=1|Red>\/<http:\/\/www.rebol.com\/|REBOL> (we can argue if they’re lisps or merely inspired by lisp, but the absolute wildest model i’ve ever seen for scoping, program execution, metaprogramming)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661481349.386469",
        "parent_user_id": "U03LT7540HZ",
        "attachments": [
            {
                "from_url": "http:\/\/www.newlisp.org\/",
                "service_icon": "http:\/\/www.newlisp.org\/favicon.ico",
                "id": 1,
                "original_url": "http:\/\/www.newlisp.org\/",
                "fallback": "newLISP  - Home",
                "text": "newLISP is a general purpose scripting language for developing web applications and programs in general in the domains of artificial intelligence (AI), statistics and machine learning.",
                "title": "newLISP  - Home",
                "title_link": "http:\/\/www.newlisp.org\/",
                "service_name": "newlisp.org"
            },
            {
                "from_url": "https:\/\/www.red-lang.org\/p\/documentation.html?m=1",
                "image_url": "https:\/\/3.bp.blogspot.com\/-DYgB9IIdOCw\/WILt2SrY8eI\/AAAAAAAAARA\/3NKQpJoHVKYFxi81F96LU25wC7EKoyYEACLcB\/w1200-h630-p-k-no-nu\/redmenu.gif",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 24417,
                "service_icon": "https:\/\/www.red-lang.org\/favicon.ico",
                "id": 2,
                "original_url": "https:\/\/www.red-lang.org\/p\/documentation.html?m=1",
                "fallback": "Documentation",
                "text": "The Red stack consists of two main layers,  the high-level Red language and a lower-level DSL called Red\/System, meant for system programmi...",
                "title": "Documentation",
                "title_link": "https:\/\/www.red-lang.org\/p\/documentation.html?m=1",
                "service_name": "red-lang.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H\/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i like languages that take risks and go weird, so my favorite lisps are"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/picolisp.com\/wiki\/?home",
                                        "text": "picolisp"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (FEXPRs, integrated database, only 3 data types)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.newlisp.org\/",
                                        "text": "newLISP"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (unique scoping (dynamic and lexical), fexprs, lots of really weird choices)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.red-lang.org\/p\/documentation.html?m=1",
                                        "text": "Red"
                                    },
                                    {
                                        "type": "text",
                                        "text": "\/"
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/www.rebol.com\/",
                                        "text": "REBOL"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "("
                                    },
                                    {
                                        "type": "text",
                                        "text": "we can argue if "
                                    },
                                    {
                                        "type": "text",
                                        "text": "they’re"
                                    },
                                    {
                                        "type": "text",
                                        "text": " lisps or merely inspired by "
                                    },
                                    {
                                        "type": "text",
                                        "text": "l"
                                    },
                                    {
                                        "type": "text",
                                        "text": "isp, but the absolute wildest model "
                                    },
                                    {
                                        "type": "text",
                                        "text": "i’ve"
                                    },
                                    {
                                        "type": "text",
                                        "text": " ever seen for scoping, program execution, metaprogramming)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1661964348.255999",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1661964395.000000"
        },
        "client_msg_id": "b43b6d4d-7889-4f16-819f-8ea86043edf7",
        "text": "I think we're bounded by human biology in what kind of scopes we can reason about. We're spatial creatures (2D\/3D plus time).\n\nI'm not aware of alternative solutions, but there are variations with important differences in their relationship to end users.\n\nAll scopes are essentially a set of nested spatial containers, but the spatial borders in traditional programming are functions and classes which is where the problems start for non-coders.\n\nThe best example of spatial scopes that make sense for end users are spreadsheet rows and columns, which are much more natural. The variables \"need a place to hang on the wall\" in the end user's mind, and a function doesn't tick that box (it's a position in a text file, but essentially non-spatial).\n\nFrom here I guess the remaining directions are 3D scopes or Graph scopes which is essentially the input\/output model seen with node\/flow-based programming.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "07POx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we're bounded by human biology in what kind of scopes we can reason about. We're spatial creatures (2D\/3D plus time).\n\nI'm not aware of alternative solutions, but there are variations with important differences in their relationship to end users.\n\nAll scopes are essentially a set of nested spatial containers, but the spatial borders in traditional programming are functions and classes which is where the problems start for non-coders.\n\nThe best example of spatial scopes that make sense for end users are spreadsheet rows and columns, which are much more natural. The variables \"need a place to hang on the wall\" in the end user's mind, and a function doesn't tick that box (it's a position in a text file, but essentially non-spatial).\n\nFrom here I guess the remaining directions are 3D scopes or Graph scopes which is essentially the input\/output model seen with node\/flow-based programming."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1661965168.600759",
        "client_msg_id": "eb4541e9-309f-41a8-a388-dc097239530c",
        "text": "The alternative I am trying out myself in my Leibniz project (<https:\/\/github.com\/khinsen\/leibniz-pharo>) is no scopes, or if you prefer a single scope. To make this practical, code units must be kept very small, which actually helps to keep them understandable. That means: no \"standard libraries\" with tons of definitions that might one day be useful. Small bits of functionality must be explicitly included.\n\nThe inspiration for this is mathematical notation in textbooks and research articles. They don't have scopes. Every bit of notation, once introduced, is valid for the whole text.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDbb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The alternative I am trying out myself in my Leibniz project ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/khinsen\/leibniz-pharo"
                            },
                            {
                                "type": "text",
                                "text": ") is no scopes, or if you prefer a single scope. To make this practical, code units must be kept very small, which actually helps to keep them understandable. That means: no \"standard libraries\" with tons of definitions that might one day be useful. Small bits of functionality must be explicitly included.\n\nThe inspiration for this is mathematical notation in textbooks and research articles. They don't have scopes. Every bit of notation, once introduced, is valid for the whole text."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U040R67M66L",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U040R67M66L",
        "type": "message",
        "ts": "1661967094.055919",
        "edited": {
            "user": "U040R67M66L",
            "ts": "1661973699.000000"
        },
        "client_msg_id": "a4f06924-ce10-4d04-a899-49249285a38b",
        "text": "I've thought about creating a single-scope logic\/\"relational\" language where \"functions\" are sets of rules about how the variables relate to one another. I guess it's not too terribly different from a database, per se, where variables are rows and rules are constraints.  Moreso inspired by Prolog, only Prolog rules take explicit arguments.\n\nI honestly have no idea if this is a _good_ idea, and in all probability it's probably a bad one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7cc0cfd88881",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-16\/8474137906145_7cc0cfd88881877be862_72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Arnett",
            "display_name": "J3RN",
            "team": "T5TCAFTA9",
            "name": "jonathan.arnett",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xRPZX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've thought about creating a single-scope logic\/\"relational\" language where \"functions\" are sets of rules about how the variables relate to one another. I guess it's not too terribly different from a database, per se, where variables are rows and rules are constraints.  Moreso inspired by Prolog, only Prolog rules take explicit arguments.\n\nI honestly have no idea if this is a "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " idea, and in all probability it's probably a bad one."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1661973016.755509",
        "client_msg_id": "d3c5d0fe-6f07-4b8d-8b31-abc60b4db16e",
        "text": "Wikipedia titles are globally unique, they just put the scope in brackets afterwards e.g. \"Franz Ferdinand (band)\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wikipedia titles are globally unique, they just put the scope in brackets afterwards e.g. \"Franz Ferdinand (band)\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1662001111.432409",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1662007884.000000"
        },
        "client_msg_id": "8523A42E-B098-4F00-ADA1-B800509A3FB8",
        "text": "The PL I’m designing doesn’t have nested scopes. It’s a relational programming language (Datalog-inspired) — it’s the only paradigm I know of where such a thing is possible (with some hard work!).\n\nAs a program gets large, the absence of a syntactic boundary (e.g. a file, or a code block) for limiting the places a definition can be accessed from becomes a problem. But I think it’s an easily solvable one.\n\nVariables, on the other hand, will remain essential for as long as humans use natural language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TqpV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The PL I’m designing doesn’t have nested scopes. It’s a relational programming language (Datalog-inspired) — it’s the only paradigm I know of where such a thing is possible (with some hard work!)."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "As a program gets large, the absence of a syntactic boundary (e.g. a file, or a code block) for limiting the places a definition can be accessed from becomes a problem. But I think it’s an easily solvable one."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Variables, on the other hand, will remain essential for as long as humans use natural language"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U040R67M66L"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1662014446.658859",
        "client_msg_id": "FFF78B3E-75BC-4D26-8219-061529BBF904",
        "text": "<@UDQBTJ211> That looks more like an ad-hoc namespace than a scope to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1661962300.475609",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hgM1O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " That"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "looks"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "more"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "like"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "an"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "ad-hoc"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "namespace"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "than"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "scope"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "me."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]