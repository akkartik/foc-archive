[
    {
        "user": "U03LMRE6MQE",
        "type": "message",
        "ts": "1706550381.020369",
        "client_msg_id": "9aa2bbf7-c62b-4cc5-9c82-c9c9d36b03cd",
        "text": "I've implemented an interpreter for Gleam, (in Gleam) so that I could make a bunch of tooling quickly. This is my first effort at brett victors version of Live Coding. <https:\/\/vimeo.com\/907533908>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ea29e26e919b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-23\/3708469439522_ea29e26e919bc202feb6_72.png",
            "first_name": "Peter",
            "real_name": "Peter Saxton",
            "display_name": "Peter Saxton",
            "team": "T5TCAFTA9",
            "name": "peterhsaxton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706550381.020369",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1707254866.291849",
        "reply_users": [
            "U02JQA5FY5C"
        ],
        "replies": [
            {
                "user": "U02JQA5FY5C",
                "ts": "1707254866.291849"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/vimeo.com\/907533908",
                "video_html": "<iframe src=\"https:\/\/player.vimeo.com\/video\/907533908?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" title=\"29\/01\/2024, Inventing on Principle for Gleam\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "thumb_url": "https:\/\/i.vimeocdn.com\/video\/1790057746-19562913e02543df8bc04fcf8acdffad7e5e0e1f6a9b6e5b9f11c0c43cfcc19e-d_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/vimeo.png",
                "id": 1,
                "original_url": "https:\/\/vimeo.com\/907533908",
                "fallback": "Vimeo Video: 29\/01\/2024, Inventing on Principle for Gleam",
                "title": "29\/01\/2024, Inventing on Principle for Gleam",
                "title_link": "https:\/\/vimeo.com\/907533908",
                "author_name": "crowdhailer",
                "author_link": "https:\/\/vimeo.com\/crowdhailer",
                "service_name": "Vimeo",
                "service_url": "https:\/\/vimeo.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8PJ5S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've implemented an interpreter for Gleam, (in Gleam) so that I could make a bunch of tooling quickly. This is my first effort at brett victors version of Live Coding. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vimeo.com\/907533908"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U02U0AS3J49",
                    "U0123H7JRDM",
                    "UJBAJNFLK"
                ],
                "count": 3
            },
            {
                "name": "fire",
                "users": [
                    "U02JQA5FY5C"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "The automorphisms of torsors are interesting to me because they play a part in a feature of screens and the free group\/torsor model that I find a bit mysterious. Remember this picture? <https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F06D7DYL9HN\/autodraw_1_4_2024.png>",
        "files": [
            {
                "id": "F06D7DYL9HN",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "x_files": [
            "F06D7DYL9HN"
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OXHy6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The automorphisms of torsors are interesting to me because they play a part in a feature of screens and the free group\/torsor model that I find a bit mysterious. Remember this picture? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/files.slack.com\/files-pri\/T5TCAFTA9-F06D7DYL9HN\/autodraw_1_4_2024.png"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1706585223.059629",
        "client_msg_id": "32c67073-2c79-4531-ae3d-972fb42c4e9c",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S"
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1706587287.409089",
        "client_msg_id": "b6ec7c27-3e26-494a-b82e-266494d0c58e",
        "text": "You might think (A-&gt;B)C is the same as (A-&gt;C)B. It kinda makes sense. With (A-&gt;C)B you are taking the transformation A-&gt;C that scales A down and shifts it a little and applying the same transform to B. But this actually isn't the case. The transforms (A-&gt;C) and (B-&gt;(A-&gt;B)C) are distinct. (Aside: An interesting question is if this relation implies every transformation commutes with every other transformation). I'm certain these are distinct transformations in the case with the torsor of framed rectangles. The reason for this is the transformation A-&gt;B  in some sense treats A (or some corner of it) as the origin. Consequently if (A-&gt;C) scales down the plane by a factor of 1\/2 and B is, say, 100 units out from A, and if B is a 1 unit by 1 unit square (these are not the proportions depicted in the image above), then (A-&gt;C)B will scale B to about 50 units from A, far from its initial position. Finally the translation component of the transform A-&gt;C won't move B much.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FFcnp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might think (A->B)C is the same as (A->C)B. It kinda makes sense. With (A->C)B you are taking the transformation A->C that scales A down and shifts it a little and applying the same transform to B. But this actually isn't the case. The transforms (A->C) and (B->(A->B)C) are distinct. (Aside: An interesting question is if this relation implies every transformation commutes with every other transformation). I'm certain these are distinct transformations in the case with the torsor of framed rectangles. The reason for this is the transformation A->B  in some sense treats A (or some corner of it) as the origin. Consequently if (A->C) scales down the plane by a factor of 1\/2 and B is, say, 100 units out from A, and if B is a 1 unit by 1 unit square (these are not the proportions depicted in the image above), then (A->C)B will scale B to about 50 units from A, far from its initial position. Finally the translation component of the transform A->C won't move B much."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "The image below I like as a playground to test these ideas. In the image below M=(P-&gt;Q)X, N=(P-&gt;Q)Y, A= (P-&gt;M)X, B=(P-&gt;M)Y, C=(P-&gt;N)X), D=(P-&gt;N)Y. If the aforementioned transformations were the same we would have B=C.",
        "files": [
            {
                "id": "F06G0C5LL06",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UFPRPSA4S",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sJNC4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The image below I like as a playground to test these ideas. In the image below M=(P->Q)X, N=(P->Q)Y, A= (P->M)X, B=(P->M)Y, C=(P->N)X), D=(P->N)Y. If the aforementioned transformations were the same we would have B=C."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1706587721.593379",
        "client_msg_id": "fa174ea3-011d-4a2f-840b-ee105fa5d7d0",
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1706588722.415999",
        "client_msg_id": "d1f30f43-7826-42e5-ac6f-14288d91d7b7",
        "text": "Although the transforms (A-&gt;C) and (B-&gt;(A-&gt;B)C) are distinct (referring to the image three posts back), they are closely related. For brevity I will write D for (A-&gt;B)C. Then the actual relation is (B-&gt;D) = (A-&gt;B)(A-&gt;C)(B-&gt;A). In the language of linear algebra (B-&gt;D) and (A-&gt;C) are similar transforms. In the language of group theory (B-&gt;D) and (A-&gt;C) are conjugates of each other. You can work this out formally but the intuition is that B-&gt;D first shifts the reference frame back to A. Then it applies the transformation (A-&gt;C). Lastly it shifts the reference frame back to B.\n\nIf this was all there was to it I would be happy to call it a day. The two transformations are distinct. There is a definitive simple relation between them. End of story. But there is more! There actually is a kind of way we can apply (A-&gt;C) to to B to get D, at least formally.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NxB2t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Although the transforms (A->C) and (B->(A->B)C) are distinct (referring to the image three posts back), they are closely related. For brevity I will write D for (A->B)C. Then the actual relation is (B->D) = (A->B)(A->C)(B->A). In the language of linear algebra (B->D) and (A->C) are similar transforms. In the language of group theory (B->D) and (A->C) are conjugates of each other. You can work this out formally but the intuition is that B->D first shifts the reference frame back to A. Then it applies the transformation (A->C). Lastly it shifts the reference frame back to B.\n\nIf this was all there was to it I would be happy to call it a day. The two transformations are distinct. There is a definitive simple relation between them. End of story. But there is more! There actually is a kind of way we can apply (A->C) to to B to get D, at least formally."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1706589571.941429",
        "client_msg_id": "232743d9-1c40-412d-9f8e-b60f831faeea",
        "text": "Recall that in the free group model of the free torsor we have (A-&gt;B)C = BA^{-1}C. Well, we can associate this to the right so it is B(A^{-1}C) and that we can think of as B(C&lt;-A). This is just like (A-&gt;C)B, only flipped around. What does this mean?! There is surely a mundane mathematical explanation, but I don't know what that is. One intuitive idea that occurred to me as I was writing this is that in a sense (A-&gt;C)B implicitly treats A as the origin while B(C&lt;-A) implicitly treats B as the origin. But torsors don't really have an origin\/identity element so this really needs a proper explanation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZrCpG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recall that in the free group model of the free torsor we have (A->B)C = BA^{-1}C. Well, we can associate this to the right so it is B(A^{-1}C) and that we can think of as B(C<-A). This is just like (A->C)B, only flipped around. What does this mean?! There is surely a mundane mathematical explanation, but I don't know what that is. One intuitive idea that occurred to me as I was writing this is that in a sense (A->C)B implicitly treats A as the origin while B(C<-A) implicitly treats B as the origin. But torsors don't really have an origin\/identity element so this really needs a proper explanation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1706592158.327019",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1706593462.000000"
        },
        "client_msg_id": "472a8ba1-8d6e-496f-8277-6a98a74dd9fa",
        "text": "What does this have to do with automorphisms? We can think of B(C<-A) as a kind of \"right multiplication\" or \"right action\" of (A->C) on B. This is rather unusual in the context of torsors. In those you are given only a left multiplication\/action out of the gate. In only very specific cases do you have a natural right multiplication, namely, when the G-torsor is G itself. In that case, given g and x in G, you can multiply x by g on the right by forming xg. <- there it is, x multiplied by g on the right. This makes sense because they are both elements of G, so you can just multiply them. However, for a general G-torsor X you wouldn't be able to form the product xg because in general you can't multiply elements of a torsor, you can only divide\/subtract them. The way around this is to first \"trivialize\" the torsor. All G-torsors are isomorphic to eachother. In particular every G-torsor is isomorphic to G as a G-torsor. Choosing an isomorphism of X with G is what we mean by \"trivializing\" X. This is equivalent to choosing an element of X to be the identity. It is also analogous to how you can make an affine space into a vector space by choosing an origin. By trivializing or identifying X with G, we can do right multiplication. The caveat being there are many different ways of doing right multiplication.\nAnd this has to do with automorphisms because right multiplication is always a torsor automorphism. This is a tenuous relation admittedly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fnsv3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does this have to do with automorphisms? We can think of B(C<-A) as a kind of \"right multiplication\" or \"right action\" of (A->C) on B. This is rather unusual in the context of torsors. In those you are given only a left multiplication\/action out of the gate. In only very specific cases do you have a natural right multiplication, namely, when the G-torsor is G itself. In that case, given g and x in G, you can multiply x by g on the right by forming xg. <- there it is, x multiplied by g on the right. This makes sense because they are both elements of G, so you can just multiply them. However, for a general G-torsor X you wouldn't be able to form the product xg because in general you can't multiply elements of a torsor, you can only divide\/subtract them. The way around this is to first \"trivialize\" the torsor. All G-torsors are isomorphic to eachother. In particular every G-torsor is isomorphic to G as a G-torsor. Choosing an isomorphism of X with G is what we mean by \"trivializing\" X. This is equivalent to choosing an element of X to be the identity. It is also analogous to how you can make an affine space into a vector space by choosing an origin. By trivializing or identifying X with G, we can do right multiplication. The caveat being there are many different ways of doing right multiplication.\nAnd this has to do with automorphisms because right multiplication is always a torsor automorphism. This is a tenuous relation admittedly."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1706592757.776529",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1706593707.000000"
        },
        "client_msg_id": "1193a63d-2549-45bf-bf87-1ebbb00aaa8b",
        "text": "Tangential comments\/Notes to self:\n-It's occurring to me when implementing screens either of you could have been implementing B(C<-A) instead of (A->C)B. Its perhaps the more natural thing to do if you are only ever copying one shape _into_ another.\n-One thing I don't understand is how B(C<-A) doesn't involve any arbitrary choices whereas for general torsors right multiplication involves an arbitrary choice. One thought is B(C<-A) only involves arbitrary choices when we try to write it out using conventional left multiplication, but that explanation has issues.\n-Affine transformations and affine spaces is probably a good place to try to make sense of B(C<-A). Is it related to the transpose?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704349378.649339",
        "parent_user_id": "UFPRPSA4S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6s0+U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tangential comments\/Notes to self:\n-It's occurring to me when implementing screens either of you could have been implementing B(C<-A) instead of (A->C)B. Its perhaps the more natural thing to do if you are only ever copying one shape "
                            },
                            {
                                "type": "text",
                                "text": "into",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " another.\n-One thing I don't understand is how B(C<-A) doesn't involve any arbitrary choices whereas for general torsors right multiplication involves an arbitrary choice. One thought is B(C<-A) only involves arbitrary choices when we try to write it out using conventional left multiplication, but that explanation has issues.\n-Affine transformations and affine spaces is probably a good place to try to make sense of B(C<-A). Is it related to the transpose?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05M5A8E0NT"
                ],
                "count": 1
            }
        ]
    }
]