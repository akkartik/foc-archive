[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613514848.149300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613519286.000000"
        },
        "client_msg_id": "9AEC167C-DCCE-42E4-8FD4-D7D29AD35E10",
        "text": "I've been <https:\/\/github.com\/ivanreese\/visual-programming-codex\/blob\/master\/inspirations.md|saying this> for years, but now that Bartosz says it... :p\n\n<https:\/\/bartoszmilewski.com\/2021\/02\/16\/functorio\/>\n\n(For once, the <https:\/\/news.ycombinator.com\/item?id=26157969|HN> discussion has some <https:\/\/news.ycombinator.com\/item?id=26158551|interesting> and <https:\/\/news.ycombinator.com\/item?id=26158765|relatable> thoughts.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "reply_count": 26,
        "reply_users_count": 8,
        "latest_reply": "1613985566.026400",
        "reply_users": [
            "UC2A2ARPT",
            "U8A5MS6R1",
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "UCGAK10LS",
            "U013ZLJARC7",
            "UHWC9PXBL",
            "UJ6LDMMN0"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1613515241.149900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1613515591.150200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613515692.150400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613515748.150600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1613515903.151100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613516663.151400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613518173.151600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613518374.152000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613518522.152500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613518849.152700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613519009.153100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1613520327.153800"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1613521412.154300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613524717.154800"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1613526096.155200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613534078.155400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613534187.155600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1613537099.156000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613537589.156300"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1613545263.157300"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1613569348.161700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613788777.001900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1613789086.003500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1613978786.020800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1613983343.025700"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1613985566.026400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "  Bartosz Milewski's Programming Cafe",
                "service_url": "http:\/\/bartoszmilewski.com",
                "title": "Functorio",
                "title_link": "https:\/\/bartoszmilewski.com\/2021\/02\/16\/functorio\/",
                "author_name": "Bartosz Milewski",
                "author_link": "https:\/\/bartoszmilewski.com\/author\/bartoszmilewski\/",
                "thumb_url": "https:\/\/bartoszmilewski.files.wordpress.com\/2020\/12\/redscienceassembler.png?fit=200%2C150",
                "thumb_width": 157,
                "thumb_height": 150,
                "text": "You might have heard people say that functional programming is more academic, and real engineering is done in imperative style. I&rsquo;m going to show you that real engineering is functional, and I&rsquo;m going to illustrate it using a computer game that is designed by engineers for engineers. It&rsquo;s a simulation game called Factorio, in which you are given resources that you have to explore, build factories that process them, create more and more complex systems, until you are finally able to launch a spaceship that may take you away from an inhospitable planet. If this is not engineering at its purest then I don&rsquo;t know what is. And yet almost all you do when playing this game has its functional programming counterparts and it can be used to teach basic concepts of not only programming but also, to some extent, category theory. So, without further ado, let&rsquo;s jump in.\nFunctions\nThe building blocks of every programming language are functions. A function takes input and produces output. In Factorio they are called assembling machines, or assemblers. Here&rsquo;s an assembler that produces copper wire.\n\nIf you bring up the info about the assembler you&rsquo;ll see the recipe that it&rsquo;s using. This one takes one copper plate and produces a pair of coils of copper wire.\n\nThis recipe is really a function signature in a strongly typed system. We see two types: copper plate and copper wire, and an arrow between them. Also, for every copper plate the assembler produces a pair of copper wires. In Haskell we would declare this function as\nmakeCopperWire :: CopperPlate -&gt; (CopperWire, CopperWire)\nNot only do we have types for different components, but we can combine types into tuples&ndash;here it&rsquo;s a homogenous pair (CopperWire, CopperWire). If you&rsquo;re not familiar with Haskell notation, here&rsquo;s what it might look like in C++:\nstd::pair makeCopperWire(CopperPlate);\nHere&rsquo;s another function signature in the form of an assembler recipe:\n\nIt takes a pair of iron plates and produces an iron gear wheel. We could write it as\nmakeGear :: (IronPlate, IronPlate) -&gt; Gear\nor, in C++,\nGear makeGear(IronPlate, IronPlate);\nMany recipes require a combination of differently typed ingredients, like the one for producing red science packs\n\nWe would declare this function as:\nmakeRedScience :: (CopperPlate, Gear) -&gt; RedScience\nPairs are examples of product types. Factorio recipes use the plus sign to denote tuples; I guess this is because we often read a sum as &ldquo;this and this&rdquo;, and &ldquo;and&rdquo; introduces a product type. The assembler requires both inputs to produce the output, so it accepts a product type. If it required either one, we&rsquo;d call it a sum type.\nWe can also tuple more than two ingredients, as in this recipe for producing electronic circuits (or green circuits, as they are commonly called)\n\nmakeGreenCircuit :: \n  (CopperWire, CopperWire, CopperWire, IronPlate) -&gt; GreenCircuit\nNow suppose that you have at your disposal the raw ingeredients: iron plates and copper plates. How would you go about producing red science or green circuits? This is where function composition kicks in. You can pass the output of the copper wire assembler as the input to the green circuit assembler. (You will still have to tuple it with an iron plate.)\n\n\nSimilarly, you can compose the gear assembler with the red science assembler.\n\n\nThe result is a new function with the following signature\nmakeRedScienceFrom :: \n    (CopperPlate, IronPlate, IronPlate) -&gt; RedScience\nAnd this is the implementation:\nmakeRedScienceFrom (cu, fe1, fe2) = \n    makeRedScience (cu, makeGear (fe1, fe2))\nYou start with one copper plate and two iron plates. You feed the iron plates to the gear assembler. You pair the resulting gear with the copper plate and pass it to the red science assembler.\nMost assemblers in Factorio take more than one argument, so I couldn&rsquo;t come up with a simpler example of composition, one that wouldn&rsquo;t require untupling and retupling. In Haskell we usually use functions in their curried form (we&rsquo;ll come back to this later), so composition is easy there.\nComposition is also a feature of a category, so we should ask the question if we can treat assemblers as arrows in a category. Their composition is obviously associative. But do we have an equivalent of an identity arrow? It is something that takes input of some type and returns it back unchanged. And indeed we have things called inserters that do exactly that. Here&rsquo;s an inserter between two assemblers.\n\nIn fact, in Factorio, you have to use an inserter for direct composition of assemblers, but that&rsquo;s an implementation detail (technically, inserting an identity function doesn&rsquo;t change anything).\nAn inserter is actually a polymorphic function, just like the identity function in Haskell\ninserter :: a -&gt; a\ninserter x = x\nIt works for any type a.\nBut the Factorio category has more structure. As we have seen, it supports finite products (tuples) of arbitrary types. Such a category is called cartesian. (We&rsquo;ll talk about the unit of this product later.)\nNotice that we have identified multiple Factorio subsystem as functions: assemblers, inserters, compositions of assemblers, etc. In a programming language they would all be just functions. If we were to design a language based on Factorio (we could call it Functorio), we would enclose the composition of assemblers into an assembler, or even make an assembler that takes two assemblers and produces their composition. That would be a higher-order assembler.\nHigher order functions\nThe defining feature of functional languages is the ability to make functions first-class objects. That means the ability to pass a function as an argument to another function, and to return a function as a result of another function. For instance, we should have a recipe for producing assemblers. And, indeed, there is such recipe. All it needs is green circuits, some gear wheels, and a few iron plates:\n\nIf Factorio were a strongly typed language all the way, there would be separate recipes for producing different assemblers (that is assemblers with different recipes). For instance, we could have:\nmakeRedScienceAssembler :: \n   (GreenCircuit, Gear, IronPlate) -&gt; RedScienceAssembler\nInstead, the recipe produces a generic assembler, and it lets the player manually set the recipe in it. In a way, the player provides one last ingredient, an element of the enumeration of all possible recipes. This enumeration is displayed as a menu of choices:\n\nAfter all, Factorio is an interactive game.\nSince we have identified the inserter as the identity function, we should have a recipe for producing it as well. And indeed there is one:\n\nDo we also have functions that take functions as arguments? In other words, recipes that use assemblers as input? Indeed we do:\n\nAgain, this recipe accepts a generic assembler that hasn&rsquo;t been assigned its own recipe yet.\nThis shows that Factorio supports higher-order functions and is indeed a functional language. What we have here is a way of treating functions (assemblers) not only as arrows between objects, but also as objects that can be produced and consumed by functions. In category theory, such objectified arrow types are called exponential objects. A category in which arrow types are represented as objects is called closed, so we can view Factorio as a cartesian closed category.\nIn a strongly typed Factorio, we could say that the object RedScienceAssembler\n\nis equivalent to its recipe\n\ntype RedScienceAssembler = \n    (CopperPlate, Gear) -&gt; RedScience\nWe could then write a higher-order recipe that produces this particular assembler as:\nmakeRedScienceAssembler :: \n     (GreenCircuit, Gear, IronPlate) \n  -&gt; ((CopperPlate, Gear) -&gt; RedScience)\nSimilarly, in a strongly typed Factorio we would replace this higher-order recipe\n\nwith the following signature\nmakeGreenScience …",
                "fallback": "  Bartosz Milewski's Programming Cafe Link: Functorio",
                "from_url": "https:\/\/bartoszmilewski.com\/2021\/02\/16\/functorio\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 2,
                "original_url": "https:\/\/bartoszmilewski.com\/2021\/02\/16\/functorio\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "joy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ivanreese\/visual-programming-codex\/blob\/master\/inspirations.md",
                                "text": "saying this"
                            },
                            {
                                "type": "text",
                                "text": " for years, but now that Bartosz says it... :p\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bartoszmilewski.com\/2021\/02\/16\/functorio\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(For once, the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=26157969",
                                "text": "HN"
                            },
                            {
                                "type": "text",
                                "text": " discussion has "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=26158551",
                                "text": "interesting"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=26158765",
                                "text": "relatable"
                            },
                            {
                                "type": "text",
                                "text": " thoughts.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U013ZLJARC7",
                    "UJ6LDMMN0",
                    "UBSMEUXAA",
                    "UEQ7QL15F"
                ],
                "count": 5
            },
            {
                "name": "star",
                "users": [
                    "USH01JEDQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613515241.149900",
        "client_msg_id": "1ad670fc-cf03-4daa-b81b-9c0cbe06cb1b",
        "text": "The absurd thing about this is how much I prefer looking at the pictures rather than the code. It's like Bartosz has the \"before\" and \"after\" reversed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FSBMa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The absurd thing about this is how much I prefer looking at the pictures rather than the code. It's like Bartosz has the \"before\" and \"after\" reversed."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "UCGAK10LS",
                    "UA14TGLTC",
                    "U01JHG5RQDQ",
                    "UHWC9PXBL"
                ],
                "count": 5
            },
            {
                "name": "joy",
                "users": [
                    "U013ZLJARC7",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1613515591.150200",
        "client_msg_id": "7c8f8d96-cecc-460d-98a1-da4e1126680a",
        "text": "I assume Factorio assemblers consume the objects you feed them?\nWhich functional languages do this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/zOL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I assume Factorio assemblers consume the objects you feed them?\nWhich functional languages do this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613515692.150400",
        "client_msg_id": "9868d073-5cbf-4742-940e-218040aab099",
        "text": "I am obliged to point out that this bit..\n\n&gt; In Factorio, the nesting of functors is drastically limited. It’s possible to produce belts, and you can put them on belts, so you can have a beltful of belts, `Belt Belt`. Similarly you can store chests inside chests. But you can’t have belts of _loaded_ belts. You can’t pick a belt filled with copper plates and put it on another belt. In other words, you cannot transport beltfuls of stuff.\n... is something you can do in Hest. And it's bonkers. And it's weird. And I don't like it. It hurts to think about.\n\nAnd thanks to this article, I now know why.\n\n&gt; Realistically, that wouldn’t make much sense in real world, but in Functorio, this is exactly what we need to implement monads.\nAh. Monads. Didn't see you come in. There's beer in the fridge. I'm going out. I'll be back.. later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+lIm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am obliged to point out that this bit..\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Factorio, the nesting of functors is drastically limited. It’s possible to produce belts, and you can put them on belts, so you can have a beltful of belts, "
                            },
                            {
                                "type": "text",
                                "text": "Belt Belt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Similarly you can store chests inside chests. But you can’t have belts of "
                            },
                            {
                                "type": "text",
                                "text": "loaded",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " belts. You can’t pick a belt filled with copper plates and put it on another belt. In other words, you cannot transport beltfuls of stuff."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n... is something you can do in Hest. And it's bonkers. And it's weird. And I don't like it. It hurts to think about.\n\nAnd thanks to this article, I now know why.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Realistically, that wouldn’t make much sense in real world, but in Functorio, this is exactly what we need to implement monads."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAh. Monads. Didn't see you come in. There's beer in the fridge. I'm going out. I'll be back.. later."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "UN57U8V53"
                ],
                "count": 3
            },
            {
                "name": "smile",
                "users": [
                    "UAVCC2X70",
                    "UA14TGLTC",
                    "UML4ZEKDK",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613515748.150600",
        "client_msg_id": "9f78a5d2-73c9-4fbd-bbc6-2912828dae2d",
        "text": "<@U8A5MS6R1> Bartosz talks about that in the section on Linear Types.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wrkVd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Bartosz talks about that in the section on Linear Types."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1613515903.151100",
        "client_msg_id": "5f32b166-1c38-46bc-9867-60b606e612ca",
        "text": "So you're saying Hest has monads? :exploding_head:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PyFg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So you're saying Hest has monads? "
                            },
                            {
                                "type": "emoji",
                                "name": "exploding_head",
                                "unicode": "1f92f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613516663.151400",
        "client_msg_id": "7b84a83a-2ec7-4397-a6b9-b1481fbdd7ad",
        "text": "Such a cool idea. I knew where he was going after the first paragraph. And yet I never thought of it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Mtg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Such a cool idea. I knew where he was going after the first paragraph. And yet I never thought of it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613518173.151600",
        "client_msg_id": "9ec74d66-7d31-4e1e-bc76-1903c0e1165e",
        "text": "<@U8A5MS6R1> — It has _something_. You can put conveyors (loaded with stuff) on conveyors. But it's weird to think about, and I don't like it, and I'm kinda just ignoring that it is even possible for now. It's emergent from Hest's elements in the way that, say, (absent ASLR, etc) using pointers to that point at your own code is emergent. You can do it but.. don't.\n\nConveyors conveying conveyors even looks weird. They tend to wander around unpredictably. So maybe a good term for them would be \"nomads\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aTC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " — It has "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". You can put conveyors (loaded with stuff) on conveyors. But it's weird to think about, and I don't like it, and I'm kinda just ignoring that it is even possible for now. It's emergent from Hest's elements in the way that, say, (absent ASLR, etc) using pointers to that point at your own code is emergent. You can do it but.. don't.\n\nConveyors conveying conveyors even looks weird. They tend to wander around unpredictably. So maybe a good term for them would be \"nomads\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            },
            {
                "name": "unicorn_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613518374.152000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613518379.000000"
        },
        "client_msg_id": "0a88d0a9-877c-4698-958f-d617208523bd",
        "text": "Two examples:\n\n<https:\/\/twitter.com\/spiralganglion\/status\/1145188460203872256|Bezier curves>. This is just cute for the sake of cute. It doesn't accomplish anything meaningful in terms of code.\n\n<https:\/\/twitter.com\/spiralganglion\/status\/1153777314443849728|Whatever the hell this is>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X6Abw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Two examples:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1145188460203872256",
                                "text": "Bezier curves"
                            },
                            {
                                "type": "text",
                                "text": ". This is just cute for the sake of cute. It doesn't accomplish anything meaningful in terms of code.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1153777314443849728",
                                "text": "Whatever the hell this is"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613518522.152500",
        "client_msg_id": "469e53f6-73a6-49ef-b37e-4204a83de5a5",
        "text": "I've seen the invisible-middle demo before, and kinda nodded along. But the bezier curve, whaa, what the heck is even that? Is it a single curve? Extremely mind-bending.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SZ5Kb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've seen the invisible-middle demo before, and kinda nodded along. But the bezier curve, whaa, what the heck is even that? Is it a single curve? Extremely mind-bending."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613518849.152700",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613518926.000000"
        },
        "client_msg_id": "8bc55d7b-7e72-4ab7-8927-b73704454534",
        "text": "The bezier curve thing is just... me dialling-in what I want Hest to _look_ like. It's not actually doing any computation*. It's literally just using the 3 essential language primitives (points, edges, and conveyance) to do the geometric construction of a bezier curve. It's playing off the fact that the programming tools _are_ art tools.\n\n(* thank goodness, because I don't want to even start to think about what it _means_ to do multiple nested layers of conveyors. Gross gross yuck no get it out of my body)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a0q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The bezier curve thing is just... me dialling-in what I want Hest to "
                            },
                            {
                                "type": "text",
                                "text": "look ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "like. It's not actually doing any computation*. It's literally just using the 3 essential language primitives (points, edges, and conveyance) to do the geometric construction of a bezier curve. It's playing off the fact that the programming tools "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " art tools.\n\n(* thank goodness, because I don't want to even start to think about what it "
                            },
                            {
                                "type": "text",
                                "text": "means",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to do multiple nested layers of conveyors. Gross gross yuck no get it out of my body)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613519009.153100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613519053.000000"
        },
        "client_msg_id": "3d4da929-ce6d-4e19-8682-679b08bef59f",
        "text": "&gt; I knew where he was going after the first paragraph. And yet I never thought of it.\n<@UCUSW7WVD> — Have you played Factorio? Or any of the other process-oriented programming games? (SpaceChem being my favourite, though it's _very_ imperative.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fpUQ",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I knew where he was going after the first paragraph. And yet I never thought of it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " — Have you played Factorio? Or any of the other process-oriented programming games? (SpaceChem being my favourite, though it's "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " imperative.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1613520327.153800",
        "client_msg_id": "38c76e6e-b1dc-4f9e-9950-c15f8579ebda",
        "text": "No, not yet. It's been on my mind to do that. Especially if I do end up taking some time off from Mu.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, not yet. It's been on my mind to do that. Especially if I do end up taking some time off from Mu."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1613521412.154300",
        "client_msg_id": "9e27b5bc-ad89-4653-a678-8c22362ca165",
        "text": "It's been a while, but I seem to remember \"points carrying points\" being close to the essence of Bezier curves even if you're not doing visual programming. So, if that's a natural way to implement them in Hest, neato.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GdF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's been a while, but I seem to remember \"points carrying points\" being close to the essence of Bezier curves even if you're not doing visual programming. So, if that's a natural way to implement them in Hest, neato."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613524717.154800",
        "client_msg_id": "362b8d7f-1318-4e77-84a0-09e1220043af",
        "text": "The thought of making a programming language feel like a video game is (very) exciting, but I've concluded in the past that a lot of the _*fun*_ in video games is making incremental, measurable progress towards goals. Video games usually set this up by creating webs of _artificial hurdles_, and you obviously don't want to be doing that in a PL. For example, in Factorio you periodically run into bottlenecks in your factory, for example a belt reaches its capacity, or you start running low on a resource. It's _fun_ to resolve these artificial constraints, and that's what most of Factorio is about. There's no analogue of these things for writing code :confused: (except perhaps performance optimization, which is rarely \"fun\").",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "teoPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thought of making a programming language feel like a video game is (very) exciting, but I've concluded in the past that a lot of the "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in video games is making incremental, measurable progress towards goals. Video games usually set this up by creating webs of "
                            },
                            {
                                "type": "text",
                                "text": "artificial hurdles",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and you obviously don't want to be doing that in a PL. For example, in Factorio you periodically run into bottlenecks in your factory, for example a belt reaches its capacity, or you start running low on a resource. It's "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to resolve these artificial constraints, and that's what most of Factorio is about. There's no analogue of these things for writing code "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            },
                            {
                                "type": "text",
                                "text": " (except perhaps performance optimization, which is rarely \"fun\")."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_multiplication_x",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1613526096.155200",
        "client_msg_id": "d1ce6878-ee71-4a66-bfd7-2fe3d1a77929",
        "text": "Disagree, I think? The hurdles don't have to be artificial to be fun. There are lots of times in programming when you can make incremental, measurable progress. If you've got your abstractions and data model set up right, you can crunch your way through e.g. UI or web request handling (recent examples for me). At its best, writing video game code itself feels the same. TDD is (in my understanding) in large part a way to make that feedback loop more repeatable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aex",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disagree, I think? The hurdles don't have to be artificial to be fun. There are lots of times in programming when you can make incremental, measurable progress. If you've got your abstractions and data model set up right, you can crunch your way through e.g. UI or web request handling (recent examples for me). At its best, writing video game code itself feels the same. TDD is (in my understanding) in large part a way to make that feedback loop more repeatable."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613534078.155400",
        "client_msg_id": "cde55942-ac77-4fba-8b08-804ded99b2d1",
        "text": "I've definitely had fun programming before, don't get me wrong :stuck_out_tongue:. But much of my time spent in the IDE is struggling to figure out what low-level thing needs to be done next, and the correct steps to accomplish it (and then of course, figuring out that you've done something wrong, and trying to figure out _why_ it's wrong). That deep, low-level problem-solving is definitely not as fun as running around building conveyer belts. It tends to be much more mentally exhausting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y0o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've definitely had fun programming before, don't get me wrong "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": ". But much of my time spent in the IDE is struggling to figure out what low-level thing needs to be done next, and the correct steps to accomplish it (and then of course, figuring out that you've done something wrong, and trying to figure out "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it's wrong). That deep, low-level problem-solving is definitely not as fun as running around building conveyer belts. It tends to be much more mentally exhausting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613534187.155600",
        "client_msg_id": "f6726381-bdd1-4402-b0fd-eda6c1a471c4",
        "text": "Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and *should*) be automated\/abstracted?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcMH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") be automated\/abstracted?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1613536241.155800",
        "client_msg_id": "017cc28c-dee5-4e87-864d-d485dec56798",
        "text": "Just watched the recording of \"The mouse holds us\". Really liked the last monologue :slightly_smiling_face: cool stuff.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1612492183.060600",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CYml",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just watched the recording of \"The mouse holds us\". Really liked the last monologue "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " cool stuff."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1613537099.156000",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613574684.000000"
        },
        "client_msg_id": "1561961d-7d68-4634-a80a-8d382b209a7d",
        "text": "&gt; a lot of the _*fun*_ in video games is making incremental, measurable progress towards goals. [lots of good thoughts excised for brevity] There's no analogue of these things for writing code\nI don't believe that that's true. I can't prove it, but it doesn't feel right. But I would totally agree with _There's no *known* analogue of these things for writing code._\n\nI have it as one of my ambient background shower-thought processing tasks to figure out how to design game dynamics (to borrow the sorta dated \"mechanics \/ dynamics \/ aesthetics\" framework) that encode programming-related tasks, such that you can enjoy playing with these dynamics in a game-y system while still accomplishing actual creative \/ expressive work (loathe to say _productive work_, but sub that in if that thought doesn't irritate you the way it does me).\n\nIt's easy to imagine a ton of kinda-bad \"gamification\"-y visions. The most well-known bad example is probably Github's contribution tracking. It incentivizes opening and closing a lot of low-value issues, and making a lot of tiny low-value commits. But Github also fosters the _social motivation_ to write good docs, which is very good (and very conventional) _dynamics_ design.\n\nI think once we're playing in the \"Factorio is my IDE\" space, there's _plenty_ of unexplored possibility and very little should be taken as a given.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OSYe",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a lot of the "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in video games is making incremental, measurable progress towards goals. [lots of good thoughts excised for brevity] There's no analogue of these things for writing code"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't believe that that's true. I can't prove it, but it doesn't feel right. But I would totally agree with "
                            },
                            {
                                "type": "text",
                                "text": "There's no ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "known",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " analogue of these things for writing code.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have it as one of my ambient background shower-thought processing tasks to figure out how to design game dynamics (to borrow the sorta dated \"mechanics \/ dynamics \/ aesthetics\" framework) that encode programming-related tasks, such that you can enjoy playing with these dynamics in a game-y system while still accomplishing actual creative \/ expressive work (loathe to say "
                            },
                            {
                                "type": "text",
                                "text": "productive work",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but sub that in if that thought doesn't irritate you the way it does me).\n\nIt's easy to imagine a ton of kinda-bad \"gamification\"-y visions. The most well-known bad example is probably Github's contribution tracking. It incentivizes opening and closing a lot of low-value issues, and making a lot of tiny low-value commits. But Github also fosters the "
                            },
                            {
                                "type": "text",
                                "text": "social motivation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to write good docs, which is very good (and very conventional) "
                            },
                            {
                                "type": "text",
                                "text": "dynamics",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " design.\n\nI think once we're playing in the \"Factorio is my IDE\" space, there's "
                            },
                            {
                                "type": "text",
                                "text": "plenty",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of unexplored possibility and very little should be taken as a given."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U01JHG5RQDQ",
                    "UML4ZEKDK",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1613537589.156300",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613537690.000000"
        },
        "client_msg_id": "1c591c5e-9ccc-40ac-a61c-7eab77096e87",
        "text": "If you can prove me wrong, you'll be a legend Ivan  :heart_eyes:. I'm ready to implement (steal :smirk:) promising ideas at a moment's notice. But yeah, the key point is not to add artificial elements to the act of programming, such that you're able to \"score points\" and get dopamine hits whilst doing very little actual work. I definitely see gamification working for chores like code review, which can be quite rote.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o2wTs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you can prove me wrong, you'll be a legend Ivan  "
                            },
                            {
                                "type": "emoji",
                                "name": "heart_eyes",
                                "unicode": "1f60d"
                            },
                            {
                                "type": "text",
                                "text": ". I'm ready to implement (steal "
                            },
                            {
                                "type": "emoji",
                                "name": "smirk",
                                "unicode": "1f60f"
                            },
                            {
                                "type": "text",
                                "text": ") promising ideas at a moment's notice. But yeah, the key point is not to add artificial elements to the act of programming, such that you're able to \"score points\" and get dopamine hits whilst doing very little actual work. I definitely see gamification working for chores like code review, which can be quite rote."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1613545263.157300",
        "client_msg_id": "ccea155a-7eae-4e02-aa3a-681467f93f73",
        "text": "Yes, the key is to make sure the goals or \"points\" are real. This probably means they need to be self-defined, seeing how measuring software productivity is an open problem and will likely remain that way forever.\n\nI just remembered: possibly the most video-game-like experience I've had while \"programming\" was my brief experience trying to prove things in Coq. Real goals (of a sort, these were practice problems), with a little dopamine hit when I proved each one, including subgoals. Sometimes I had to think creatively, sometimes I could just grind through. Similar to the TDD example, I guess, treating a spec as the goal. If it's not exactly a research direction in itself, I think this is at least a potential payoff of improving the ergonomics of formal methods.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCBKy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, the key is to make sure the goals or \"points\" are real. This probably means they need to be self-defined, seeing how measuring software productivity is an open problem and will likely remain that way forever.\n\nI just remembered: possibly the most video-game-like experience I've had while \"programming\" was my brief experience trying to prove things in Coq. Real goals (of a sort, these were practice problems), with a little dopamine hit when I proved each one, including subgoals. Sometimes I had to think creatively, sometimes I could just grind through. Similar to the TDD example, I guess, treating a spec as the goal. If it's not exactly a research direction in itself, I think this is at least a potential payoff of improving the ergonomics of formal methods."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "U013ZLJARC7",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    }
]