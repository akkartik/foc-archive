[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1563701845.051300",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1563702063.000000"
        },
        "client_msg_id": "ad64900d-84f7-4ea6-8a5b-b72ba471044d",
        "text": "Just because a lot of popular declarative languages (spreadsheets, SQL, CSS, makefiles, XSLT, etc) started off not Turing Complete doesn't mean declarative languages in general can't be! Once you add any kind of circularity over evolving state, you get TCness, and it doesn't need to make the language much more complex or hard to understand.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DizIM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just because a lot of popular declarative languages (spreadsheets, SQL, CSS, makefiles, XSLT, etc) started off not Turing Complete doesn't mean declarative languages in general can't be! Once you add any kind of circularity over evolving state, you get TCness, and it doesn't need to make the language much more complex or hard to understand."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1563718410.052400",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1563718585.000000"
        },
        "client_msg_id": "1456986a-e157-46b4-a2cf-45ae6542ebba",
        "text": "I’m not aware of evidence that defects\/kloc is constant between different languages.\n\nMy thought was that it’s inconsistent with comparisons of bug rates between different languages. Most of those studies show small or inconsistent effects, but some languages are much more concise than others. So if defects\/line was constant, those languages would have much fewer bugs.  <https:\/\/twitter.com\/hillelogram\/status\/1119733770838528001>\n<https:\/\/twitter.com\/hyperpape\/status\/1119717643156635648>\n(the threading is totally broken here)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/hillelogram|@hillelogram>: <https:\/\/twitter.com\/hyperpape|@hyperpape> Update on checking a bit the claim that defects\/kloc is constant may be unsubstantiated",
                "ts": 1555800309,
                "author_name": "Hillel",
                "author_link": "https:\/\/twitter.com\/hillelogram\/status\/1119733770838528001",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1152944649914527744\/cmKdy535_normal.png",
                "author_subname": "@hillelogram",
                "text": "<https:\/\/twitter.com\/hyperpape|@hyperpape> Update on checking a bit the claim that defects\/kloc is constant may be unsubstantiated",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/hillelogram\/status\/1119733770838528001",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/hillelogram\/status\/1119733770838528001",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https:\/\/twitter.com\/hyperpape|@hyperpape>: <https:\/\/twitter.com\/hillelogram|@hillelogram> Thanks, I didn’t realize 2 was a cross language finding. I actually don’t understand that. Some languages are significantly more terse.",
                "ts": 1555796464,
                "author_name": "Justin",
                "author_link": "https:\/\/twitter.com\/hyperpape\/status\/1119717643156635648",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/581592005924507648\/YRv7rCxm_normal.jpg",
                "author_subname": "@hyperpape",
                "text": "<https:\/\/twitter.com\/hillelogram|@hillelogram> Thanks, I didn’t realize 2 was a cross language finding. I actually don’t understand that. Some languages are significantly more terse.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/hyperpape\/status\/1119717643156635648",
                "id": 2,
                "original_url": "https:\/\/twitter.com\/hyperpape\/status\/1119717643156635648",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4cG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m not aware of evidence that defects\/kloc is constant between different languages.\n\nMy thought was that it’s inconsistent with comparisons of bug rates between different languages. Most of those studies show small or inconsistent effects, but some languages are much more concise than others. So if defects\/line was constant, those languages would have much fewer bugs.  "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/hillelogram\/status\/1119733770838528001"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/hyperpape\/status\/1119717643156635648"
                            },
                            {
                                "type": "text",
                                "text": "\n(the threading is totally broken here)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1563719362.052900",
        "client_msg_id": "b2dfe4a5-556b-4054-9904-d599261ede04",
        "text": "This should the universal hand sign to indicate that you don't know what you are doing in a field.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548321427.500100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hahQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This should the universal hand sign to indicate that you don't know what you are doing in a field."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563724295.053100",
        "client_msg_id": "725ab6d4-4a7a-4b64-a624-b277c6863da8",
        "text": "I like what you are saying in that thread <@UCUSW7WVD>.  As an experiment I built a simple build system that is just regular JS functions using memoization. So far it’s very easy to read and extend. It feels like having a bunch of build-centric utility functions is better than creating a new declarative language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "et8R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like what you are saying in that thread "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ".  As an experiment I built a simple build system that is just regular JS functions using memoization. So far it’s very easy to read and extend. It feels like having a bunch of build-centric utility functions is better than creating a new declarative language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563724494.053300",
        "client_msg_id": "959893ac-6baf-484a-b295-e26530bf098b",
        "text": "also, async and arrow functions make the JS surprisingly concise. If I can write a build system in a ‘declarative style’ while still using regular functions, then the need for a custom build system seems much less.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lG3c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also, async and arrow functions make the JS surprisingly concise. If I can write a build system in a ‘declarative style’ while still using regular functions, then the need for a custom build system seems much less."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563724526.053500",
        "client_msg_id": "eeccd26d-3e4a-4ed6-8691-0f89b3fb3a37",
        "text": "Am I missing something? Why did build systems evolve towards declarative DSLs ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Am I missing something? Why did build systems evolve towards declarative DSLs ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1563724981.053700",
        "client_msg_id": "d4d7ffd7-86dd-4928-a17d-99a38d768741",
        "text": "? they started as declarative languages: makefiles!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0=x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "? they started as declarative languages: makefiles!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1563725040.053900",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1563725092.000000"
        },
        "client_msg_id": "be2d6382-0b5d-4617-a9c1-b73ed3b32bb3",
        "text": "it's more powerful to be able to describe the \"what\" not the \"how\" of a build: to describe the end state, then hit \"go\", and let the algorithms decide on the necessary steps",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ornE6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's more powerful to be able to describe the \"what\" not the \"how\" of a build: to describe the end state, then hit \"go\", and let the algorithms decide on the necessary steps"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1563725055.054100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1563725074.000000"
        },
        "client_msg_id": "5c0b2894-2729-4e85-b95c-b224b9ed6c48",
        "text": "this gives idempotency: you can say \"go\" whenever you like",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7UhI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this gives idempotency: you can say \"go\" whenever you like"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563727407.054600",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1563727625.000000"
        },
        "client_msg_id": "876afa5f-b8d0-412c-8198-ea0524c884e2",
        "text": "Yeah, it was this kind of spherical-cow theoretical thinking :smile:\n\nWhen `make` was created the only language available on most Unix machines was C[1]. Many of its design choices are understandable in the context of that constraint. Nobody wanted to design a whole new language, they just wanted to compile their C files. Less understandable is everyone else who's blindly cargo-culted the `make` model ever since, even though there were better options available.\n\n[1] According to Wikipedia, `make` was created in 1976, and `\/bin\/sh` in 1977.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TD7\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it was this kind of spherical-cow theoretical thinking "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhen "
                            },
                            {
                                "type": "text",
                                "text": "make",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was created the only language available on most Unix machines was C[1]. Many of its design choices are understandable in the context of that constraint. Nobody wanted to design a whole new language, they just wanted to compile their C files. Less understandable is everyone else who's blindly cargo-culted the "
                            },
                            {
                                "type": "text",
                                "text": "make",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " model ever since, even though there were better options available.\n\n[1] According to Wikipedia, "
                            },
                            {
                                "type": "text",
                                "text": "make",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was created in 1976, and "
                            },
                            {
                                "type": "text",
                                "text": "\/bin\/sh",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in 1977."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1563729316.055000",
        "client_msg_id": "58a1d1e9-f915-4c0d-80cd-df24517ff665",
        "text": "I've never used Erlang but I've used Akka quite a bit. I find it a lot better and (mostly) less error-prone than threads and mutexes, but coherence business logic gets lost in translation. I think streams async\/await do a much better job of keeping logic coherent, at the cost of some power and generality",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562895704.212400",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GA7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've never used Erlang but I've used Akka quite a bit. I find it a lot better and (mostly) less error-prone than threads and mutexes, but coherence business logic gets lost in translation. I think streams async\/await do a much better job of keeping logic coherent, at the cost of some power and generality"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1563729364.055200",
        "client_msg_id": "3272479f-613f-4149-a254-1d03f36ef012",
        "text": "Is there a great FRP video either of you know of?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562990343.225500",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qEL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a great FRP video either of you know of?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKQT95T1V",
        "type": "message",
        "ts": "1563729655.055400",
        "client_msg_id": "3d536f04-27b3-4ba0-a2f8-f9cc3df1b1be",
        "text": "I'm a big fan of this concept. I think positional parameters are bad, unless they're a list. But they sure are convenient in most cases.\n\nI read about one language whose name I can't remember where parameters are named by their type, instead of having value-level identifiers. You could add tick marks to have multiple params of the same type, or make lower-case aliases. I thought it was a radical, but clever, idea.\n\nAlso, Objective C kind of does named-only params, but isn't so hot for first-class functions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5602bab02fb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c5602bab02fb00f0c9a052ee6c220513.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "",
            "real_name": "Alan Johnson",
            "display_name": "Alan Johnson",
            "team": "T5TCAFTA9",
            "name": "alan135",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+iHZU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a big fan of this concept. I think positional parameters are bad, unless they're a list. But they sure are convenient in most cases.\n\nI read about one language whose name I can't remember where parameters are named by their type, instead of having value-level identifiers. You could add tick marks to have multiple params of the same type, or make lower-case aliases. I thought it was a radical, but clever, idea.\n\nAlso, Objective C kind of does named-only params, but isn't so hot for first-class functions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563736929.055900",
        "client_msg_id": "9b2122ae-981b-41a0-9f68-98131a544053",
        "text": "here’s an example of what I’m talking about. In the early days of Java people used make files or shell scripts. At some point they started using Ant. Ant is declarative with a syntax based on XML. It worked fine, but people kept extending it to do more things as their code bases got bigger",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rb0L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "here’s an example of what I’m talking about. In the early days of Java people used make files or shell scripts. At some point they started using Ant. Ant is declarative with a syntax based on XML. It worked fine, but people kept extending it to do more things as their code bases got bigger"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563736972.056100",
        "client_msg_id": "9badb627-6d66-4432-a618-0df1cc705979",
        "text": "The only way to extend ANT was to add new tasks, written in Java, but all data had to go from one section to another as strings. You would spend a lot of time thinking about how to shoe-horn what you wanted into the ANT model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JF1+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only way to extend ANT was to add new tasks, written in Java, but all data had to go from one section to another as strings. You would spend a lot of time thinking about how to shoe-horn what you wanted into the ANT model."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563737024.056300",
        "client_msg_id": "2ccd0848-f795-4d72-be9e-8f1e6835c192",
        "text": "Even though, by definition, you had this very powerful language, Java, which it was built in. Eventually ANT became hard to maintain so they built Maven, which grew into even more of a mess (though it did introduce the repo system which is still the only good part of Maven)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ffhq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even though, by definition, you had this very powerful language, Java, which it was built in. Eventually ANT became hard to maintain so they built Maven, which grew into even more of a mess (though it did introduce the repo system which is still the only good part of Maven)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563737047.056500",
        "client_msg_id": "d569b7fd-db9e-40a1-b488-9d981de2ee27",
        "text": "Today lots of tools still run on make, or things which generate make.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PzguV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Today lots of tools still run on make, or things which generate make."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563737095.056700",
        "client_msg_id": "c4e5a08b-9a2d-42c1-97fa-4bf7de7ae800",
        "text": "I think it would be an interesting experiment to use functional programming in a proper turing complete language to as a build system. Would it be more extensible and easier to understand than a make file? Maybe, maybe not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563675156.049700",
        "parent_user_id": "UKFSDUCH2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z=T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it would be an interesting experiment to use functional programming in a proper turing complete language to as a build system. Would it be more extensible and easier to understand than a make file? Maybe, maybe not."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1563737752.056900",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1563738062.000000"
        },
        "client_msg_id": "0b931359-9811-43b5-9d24-8abf7044e5a8",
        "text": "Deklan has the right idea, of taking a relatively simple task and examining that same project expressed in many different languages\/frameworks. The only problem in his test case was using TodoMVC, which as a task relies too heavily on the underlying OS libraries to yield useful information. There is over a million lines of code to handle a text entry field and draw text in the OS, so you are merely encoding the tip of the iceberg. I suggest you start with a progression of test programs, like i have been using for Beads, where i have an analog clock, then a wristwatch simulation, then snake, tic tac toe, minesweeper, chess. Those types of programs which are graphical and interactive really highlight the differences in languages\/frameworks.\n\nIn the tiniest example projects, which are only about a few hundred words most of the languages look alike but by the time you reach chess which is about 1500 words, the differences in verbosity and clarity between languages really starts to manifest. My own goal is to reach the optimum readability, which is a balance between compactness, abstraction, amount of punctuation, regularity of grammar, and aesthetics.\n\nThe number of defects per lines of code varies greatly depending on the language, but my long experience shows that a more concise language is more productive, up to a point. When you reach the stratosphere of conciseness as in APL, FORTH and LISP, code gets very hard to read and repair. There was a reputation back in its heyday, that APL was a \"write-only\" language. We all know that single character variable names are very compact, fast to type, but obscure the meaning of the program. So that is why i count program size in words, not characters, because i don't want to reward intentional obfuscation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6nF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Deklan has the right idea, of taking a relatively simple task and examining that same project expressed in many different languages\/frameworks. The only problem in his test case was using TodoMVC, which as a task relies too heavily on the underlying OS libraries to yield useful information. There is over a million lines of code to handle a text entry field and draw text in the OS, so you are merely encoding the tip of the iceberg. I suggest you start with a progression of test programs, like i have been using for Beads, where i have an analog clock, then a wristwatch simulation, then snake, tic tac toe, minesweeper, chess. Those types of programs which are graphical and interactive really highlight the differences in languages\/frameworks.\n\nIn the tiniest example projects, which are only about a few hundred words most of the languages look alike but by the time you reach chess which is about 1500 words, the differences in verbosity and clarity between languages really starts to manifest. My own goal is to reach the optimum readability, which is a balance between compactness, abstraction, amount of punctuation, regularity of grammar, and aesthetics.\n\nThe number of defects per lines of code varies greatly depending on the language, but my long experience shows that a more concise language is more productive, up to a point. When you reach the stratosphere of conciseness as in APL, FORTH and LISP, code gets very hard to read and repair. There was a reputation back in its heyday, that APL was a \"write-only\" language. We all know that single character variable names are very compact, fast to type, but obscure the meaning of the program. So that is why i count program size in words, not characters, because i don't want to reward intentional obfuscation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKFSDUCH2",
        "type": "message",
        "ts": "1563740743.057500",
        "client_msg_id": "ade35b21-d330-427a-af24-635988e6c61e",
        "text": "I wrote up my thoughts on build systems here: <https:\/\/joshondesign.com\/2019\/07\/21\/thoughts_build_systems>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcc9260f41ff",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0cc9260f41ff521633069f4d94782cc7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Josh Marinacci",
            "display_name": "Josh Marinacci",
            "team": "T5TCAFTA9",
            "name": "joshua",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vnDD8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote up my thoughts on build systems here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/joshondesign.com\/2019\/07\/21\/thoughts_build_systems"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1563741130.059800",
        "client_msg_id": "ac75e0c5-69ab-4f66-b5a6-7f83e45a8f72",
        "text": "In Modula2 and Beads, the dependency graph is trivial to construct because imports are required to be at the start of the program, so a typical program doesn't need a makefile. In Red they use the clever trick of allowing compilation in the language itself, and since there is compile time execution in Red, a makefile is just a Red program. A very elegant solution. I personally despise all the horrible make systems like Gradle, Ant, Leiningen, etc. which are very complex and a horrible additional burden to a learning programmer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563741130.059800",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1563916112.279400",
        "reply_users": [
            "UKFSDUCH2",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UKFSDUCH2",
                "ts": "1563814743.067600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1563821720.077200"
            },
            {
                "user": "UKFSDUCH2",
                "ts": "1563825966.077500"
            },
            {
                "user": "UKFSDUCH2",
                "ts": "1563825991.077900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1563915838.278900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1563916112.279400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Uq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Modula2 and Beads, the dependency graph is trivial to construct because imports are required to be at the start of the program, so a typical program doesn't need a makefile. In Red they use the clever trick of allowing compilation in the language itself, and since there is compile time execution in Red, a makefile is just a Red program. A very elegant solution. I personally despise all the horrible make systems like Gradle, Ant, Leiningen, etc. which are very complex and a horrible additional burden to a learning programmer."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P",
                    "UHWC9PXBL",
                    "U79HM6726",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563741502.059900",
        "client_msg_id": "e884ab6d-1a8d-4e38-aaf9-906d4e9c79f5",
        "text": "<@UKJGU23KP> I'm not surprised the bugs\/KLOC thing is folklore. It's an interesting conversation nonetheless",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z5V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " I'm not surprised the bugs\/KLOC thing is folklore. It's an interesting conversation nonetheless"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563741724.060100",
        "client_msg_id": "fe270d4b-fe31-4f9f-9cdb-04f32375c74a",
        "text": "<@UEQ6M68H0> I'm not sure I understand. Frontend libraries are optimized for working with the built-in UI primitives. What is the importance of not using them?\n\nI agree about optimum balance.\n\nTodoMVC examples are typically written in idiomatic style as learning examples. None of the examples I looked at obfuscated variable names. I hear your point, though. There's no reason not to measure all of: lines of code, words, characters, characters without spaces, etc. It's easy to measure and might give us some insight.\n\nInteresting what you say about APL given what is said above about it and J",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r41",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I'm not sure I understand. Frontend libraries are optimized for working with the built-in UI primitives. What is the importance of not using them?\n\nI agree about optimum balance.\n\nTodoMVC examples are typically written in idiomatic style as learning examples. None of the examples I looked at obfuscated variable names. I hear your point, though. There's no reason not to measure all of: lines of code, words, characters, characters without spaces, etc. It's easy to measure and might give us some insight.\n\nInteresting what you say about APL given what is said above about it and J"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563742106.060300",
        "client_msg_id": "1330a520-21af-4447-b8da-94e8709f817c",
        "text": "<@UJN1TAYEQ> It's not clear to me how to define simplicity. I've seen the Hickey talk. It seems to me that incidental complexity in code *correlates* with verbosity, at least.\n\nIf I was judging the examples I've looked at purely on my definition of \"simple\" then I would say the Svelte example is most simple. Yet, the FRP programs do seem to buy nice properties for their verboseness.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9c6A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " It's not clear to me how to define simplicity. I've seen the Hickey talk. It seems to me that incidental complexity in code "
                            },
                            {
                                "type": "text",
                                "text": "correlates",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with verbosity, at least.\n\nIf I was judging the examples I've looked at purely on my definition of \"simple\" then I would say the Svelte example is most simple. Yet, the FRP programs do seem to buy nice properties for their verboseness."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563742498.060500",
        "client_msg_id": "44ec6eee-b8e1-4a1f-b985-7d9edde0bc16",
        "text": "<@UL3CJ7YKC> I see where you're coming from. For the Svelte stuff, you didn't mention the reactive part. That's important.\n\nIdk if you're saying this, but I don't agree with a statement like, \"every UI library\/paradigm is good for something\". It's too idealistic\/egalitarian. Even if there are technically tradeoffs sometimes an approach is just worse. (Note: this isn't to say that there is only one way)\n\nYou say these libraries are optimizing for different change directions. I'm curious about precisely what those are",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563646806.006100",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "diZE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " I see where you're coming from. For the Svelte stuff, you didn't mention the reactive part. That's important.\n\nIdk if you're saying this, but I don't agree with a statement like, \"every UI library\/paradigm is good for something\". It's too idealistic\/egalitarian. Even if there are technically tradeoffs sometimes an approach is just worse. (Note: this isn't to say that there is only one way)\n\nYou say these libraries are optimizing for different change directions. I'm curious about precisely what those are"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1563747459.061100",
        "client_msg_id": "22eee65b-6d7c-42e1-a436-fa66938f1a4b",
        "text": "Great demo by <@UE1JQM9HQ>: <https:\/\/www.youtube.com\/watch?v=Pot9GnHFOVU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Tudor Gîrba - Moldable development",
                "title_link": "https:\/\/www.youtube.com\/watch?v=Pot9GnHFOVU",
                "author_name": "Curry On!",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC-WICcSW1k3HsScuXxDrp0w",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Pot9GnHFOVU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Tudor Gîrba - Moldable development",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Pot9GnHFOVU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=Pot9GnHFOVU",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=Pot9GnHFOVU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yReZ5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great demo by "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": ": "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=Pot9GnHFOVU"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "UHWC9PXBL",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1563749183.061400",
        "client_msg_id": "cb814b43-8706-42ac-bec8-f615dc075f1c",
        "text": "<https:\/\/blog.ploeh.dk\/2019\/07\/01\/yes-silver-bullet\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563749183.061400",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1563848881.082600",
        "reply_users": [
            "UHDQ62M4P",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UHDQ62M4P",
                "ts": "1563757369.061700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1563808804.065500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1563848881.082600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Yes silver bullet",
                "title_link": "https:\/\/blog.ploeh.dk\/2019\/07\/01\/yes-silver-bullet\/",
                "text": "Since Fred Brooks published his essay, I believe that we, contrary to his prediction, have witnessed several silver bullets.",
                "fallback": "Yes silver bullet",
                "from_url": "https:\/\/blog.ploeh.dk\/2019\/07\/01\/yes-silver-bullet\/",
                "thumb_url": "https:\/\/blog.ploeh.dk\/content\/binary\/essential-accidental-complexity-shells-brooks-scenario.png",
                "thumb_width": 182,
                "thumb_height": 161,
                "service_icon": "https:\/\/blog.ploeh.dk\/assets\/themes\/ploeh\/images\/favicons\/apple-touch-icon-precomposed.png",
                "service_name": "blog.ploeh.dk",
                "id": 1,
                "original_url": "https:\/\/blog.ploeh.dk\/2019\/07\/01\/yes-silver-bullet\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9pf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/blog.ploeh.dk\/2019\/07\/01\/yes-silver-bullet\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5TCAFTD3",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1563757369.061700",
        "client_msg_id": "681414be-4faa-400b-8e43-d95a73de5a8a",
        "text": "There has been progress.. but most of that progress is nothing when offset against the vastly more complex things we're building nowadays",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563749183.061400",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "voQ\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There has been progress.. but most of that progress is nothing when offset against the vastly more complex things we're building nowadays"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smirk",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]