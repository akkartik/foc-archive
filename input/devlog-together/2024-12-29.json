[
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735480545.955879",
        "client_msg_id": "7eb0c218-108b-4889-8af1-e4139cb5f8df",
        "text": "so previously I created a small tool that creates commits on every file change\nand though it was very fun in the beginning it turned out to be a trouble to remember what I actually did\nso now I downgraded it to just \"create a new feature branch if I make some changed on main branch and stage everything\"\n<https:\/\/github.com\/uprun\/git-auto-commit>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "reply_count": 19,
        "reply_users_count": 3,
        "latest_reply": "1735769624.937379",
        "reply_users": [
            "UGWUJUZHT",
            "UCUSW7WVD",
            "U08294YLWJH"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1735506313.684669"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1735506769.239329"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735507147.995699"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735507754.139699"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1735507836.725359"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1735508024.347689"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735508633.761969"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735508786.131939"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1735508931.718369"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1735509706.193379"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735509897.764209"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735510018.150149"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1735511961.744599"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735512958.741459"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735644490.633529"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1735655598.153409"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735665197.557159"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1735746714.037789"
            },
            {
                "user": "U08294YLWJH",
                "ts": "1735769624.937379"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xA\/oB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so previously I created a small tool that creates commits on every file change\nand though it was very fun in the beginning it turned out to be a trouble to remember what I actually did\nso now I downgraded it to just \"create a new feature branch if I make some changed on main branch and stage everything\"\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/uprun\/git-auto-commit"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735506313.684669",
        "client_msg_id": "66d4be8f-fe3a-475f-be53-095f3685210f",
        "text": "Comments? I often do exploratory programming and end up thinking \"this worked just a 1\/2 hour ago, maybe I should revert to that?\" (Or \"...just yesterday...\"). I am learning to hate off-the-shelf git. I have always thought - but haven't done anything about - that I want an auto-git that saves every change and lets me rewind. Is this the kind of thing that you found to be too much trouble?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t96A4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Comments? I often do exploratory programming and end up thinking \"this worked just a 1\/2 hour ago, maybe I should revert to that?\" (Or \"...just yesterday...\"). I am learning to hate off-the-shelf git. I have always thought - but haven't done anything about - that I want an auto-git that saves every change and lets me rewind. Is this the kind of thing that you found to be too much trouble?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735506769.239329",
        "client_msg_id": "d42374aa-966e-4013-86af-5754377e9b84",
        "text": "<@UGWUJUZHT> I pointed out <https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1732543398418729|previously> my idea of creating a commit at the point of a comment to self. I still like this approach a lot even though I stopped using it at some point as I grew more fluent with git.\n\nI suppose it depends on what the goal is. In that previous thread the goal seemed to be to see a very fine-grained history. <@U08294YLWJH> I don't follow what you mean here by \"it turned out to be a lot of trouble to remember what I actually did\". Doesn't the commit history show you exactly what you did? Is it just too noisy?\n\nIt seems to me the current approach of staging things drops the fine-grained history entirely. So maybe I was misconstruing your goal above. I'm curious to hear more.\n\nOn a tangent, I was <https:\/\/emacsair.me\/2017\/09\/01\/magit-walk-through\/|reading about magit> yesterday. I wonder how much of a difference using it would make to the experience of git.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "attachments": [
            {
                "from_url": "https:\/\/emacsair.me\/2017\/09\/01\/magit-walk-through\/",
                "service_icon": "https:\/\/emacsair.me\/assets\/emacsair.ico",
                "id": 1,
                "original_url": "https:\/\/emacsair.me\/2017\/09\/01\/magit-walk-through\/",
                "fallback": "Emacsair! A walk through the Magit interface",
                "text": "Blog of Jonas Bernoulli",
                "title": "Emacsair! A walk through the Magit interface",
                "title_link": "https:\/\/emacsair.me\/2017\/09\/01\/magit-walk-through\/",
                "service_name": "emacsair.me"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2iJIs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I pointed out "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1732543398418729",
                                "text": "previously"
                            },
                            {
                                "type": "text",
                                "text": " my idea of creating a commit at the point of a comment to self. I still like this approach a lot even though I stopped using it at some point as I grew more fluent with git.\n\nI suppose it depends on what the goal is. In that previous thread the goal seemed to be to see a very fine-grained history. "
                            },
                            {
                                "type": "user",
                                "user_id": "U08294YLWJH"
                            },
                            {
                                "type": "text",
                                "text": " I don't follow what you mean here by \"it turned out to be a lot of trouble to remember what I actually did\". Doesn't the commit history show you exactly what you did? Is it just too noisy?\n\nIt seems to me the current approach of staging things drops the fine-grained history entirely. So maybe I was misconstruing your goal above. I'm curious to hear more.\n\nOn a tangent, I was "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/emacsair.me\/2017\/09\/01\/magit-walk-through\/",
                                "text": "reading about magit"
                            },
                            {
                                "type": "text",
                                "text": " yesterday. I wonder how much of a difference using it would make to the experience of git."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735507147.995699",
        "client_msg_id": "85c6ef61-20cc-4147-840d-5fc9e2c96e33",
        "text": "<@UCUSW7WVD> previous goal indeed was to have a fine-grained history, but it was noisy",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1aWXE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " previous goal indeed was to have a fine-grained history, but it was noisy"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735507754.139699",
        "client_msg_id": "6405db23-12b0-450b-a5f8-2d4e8efa5b87",
        "text": "<@UGWUJUZHT> in my workflow I always can roll-back to stable version - this is my \"main\" branch.\nNow when I start to explore I create a new branch first,\nbut making commit on every change ruined already available diff tools\nso this was one of the problems with previous approach.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aD6cf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " in my workflow I always can roll-back to stable version - this is my \"main\" branch.\nNow when I start to explore I create a new branch first,\nbut making commit on every change ruined already available diff tools\nso this was one of the problems with previous approach."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735507836.725359",
        "client_msg_id": "3ec92fed-4ec7-4b8e-8c4b-512af5b3f797",
        "text": "Has the goal shifted now? What is it now?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dEq9E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has the goal shifted now? What is it now?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735508024.347689",
        "client_msg_id": "27851010-6377-4564-bde6-d8534fd0d3ef",
        "text": "The way that I read this, it sounds like you have to stop and make a comment to self, pulling yourself out of \"The Zone\" (aka \"Flow state\"). Did I understand this correctly? If so, I want to aim for tools that don't interrupt my train of thought. An aspect of \"exploratory\" programming is that it is not methodical, you can't plan ahead nor push buttons after\/before-the-fact, you need to keep motoring forward without needing to notice your tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vw5Me",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way that I read this, it sounds like you have to stop and make a comment to self, pulling yourself out of \"The Zone\" (aka \"Flow state\"). Did I understand this correctly? If so, I want to aim for tools that don't interrupt my train of thought. An aspect of \"exploratory\" programming is that it is not methodical, you can't plan ahead nor push buttons after\/before-the-fact, you need to keep motoring forward without needing to notice your tools."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735508633.761969",
        "client_msg_id": "5d002650-4e03-4ac7-9838-80f8f2a21f0b",
        "text": "<@UGWUJUZHT> yes it is correct - now I will need to get out of the flow \"The Zone\" and write the comment myself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r68XG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " yes it is correct - now I will need to get out of the flow \"The Zone\" and write the comment myself."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735508786.131939",
        "client_msg_id": "5440a3f7-96f9-431c-8a31-a43ccae86371",
        "text": "<@UCUSW7WVD> the global goal is to explore what works for me in programming and I am thinking of a short-lived project as a means for exploration. I thought that granular history was what I wanted but it was a mistake for me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wfJ09",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " the global goal is to explore what works for me in programming and I am thinking of a short-lived project as a means for exploration. I thought that granular history was what I wanted but it was a mistake for me."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735508931.718369",
        "client_msg_id": "807c7b11-caed-4961-806e-d2137c2ce170",
        "text": "I'm definitely interested to hear more as you figure out what you want for yourself.\n\nHave you looked at `jj`? It has an interesting-looking flow where every edit is automatically part of an automatically updating commit -- until you decide to draw a line and create a new one. I haven't worked much with it myself, but in principle it seems like a promising best of both worlds: save from the start, but you aren't forced to prematurely attach a name to what you're doing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RsQe5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm definitely interested to hear more as you figure out what you want for yourself.\n\nHave you looked at "
                            },
                            {
                                "type": "text",
                                "text": "jj",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? It has an interesting-looking flow where every edit is automatically part of an automatically updating commit -- until you decide to draw a line and create a new one. I haven't worked much with it myself, but in principle it seems like a promising best of both worlds: save from the start, but you aren't forced to prematurely attach a name to what you're doing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735509706.193379",
        "client_msg_id": "ddf26a0f-eaaa-495d-8c69-b339359a7c0c",
        "text": "<@U08294YLWJH> I conclude that \"staying in The Zone\" is vital during design and exploration. Most programming languages and IDEs don't emphasize this aspect and tend towards a \"waterfall\" model of development, i.e. you need to predict where you're going instead of simply discovering it. This sounds loosey-goosey, but is critical to actual design work. It might be a big factor in why some people love early languages like Lisp, Smalltalk, Forth, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UUj9k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U08294YLWJH"
                            },
                            {
                                "type": "text",
                                "text": " I conclude that \"staying in The Zone\" is vital during design and exploration. Most programming languages and IDEs don't emphasize this aspect and tend towards a \"waterfall\" model of development, i.e. you need to predict where you're going instead of simply discovering it. This sounds loosey-goosey, but is critical to actual design work. It might be a big factor in why some people love early languages like Lisp, Smalltalk, Forth, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U08294YLWJH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735509897.764209",
        "client_msg_id": "3a345a95-98f9-4a2d-80d2-a66699f5bcb2",
        "text": "<@UCUSW7WVD> thanks for the suggestion,\nI try to use Unix philosophy of \"one _condenced and understandable_ tool for one job\".\nNext I want to create a pattern matching natural language agent similar to ELIZA  ( <https:\/\/github.com\/norvig\/paip-lisp\/blob\/main\/docs\/chapter5.md> )",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8hST",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " thanks for the suggestion,\nI try to use Unix philosophy of \"one "
                            },
                            {
                                "type": "text",
                                "text": "condenced and understandable",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tool for one job\".\nNext I want to create a pattern matching natural language agent similar to ELIZA  ( "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/norvig\/paip-lisp\/blob\/main\/docs\/chapter5.md"
                            },
                            {
                                "type": "text",
                                "text": " )"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735510018.150149",
        "client_msg_id": "a250819f-2b9c-4632-899a-9321744f9bb2",
        "text": "<@UGWUJUZHT> totally agree that staying in the mental flow is important.\nAnd that environment should support fast iterations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "955yL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " totally agree that staying in the mental flow is important.\nAnd that environment should support fast iterations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1735511961.744599",
        "client_msg_id": "3aa403fc-c023-4ee8-b8f4-27075dc08bf8",
        "text": "<@U08294YLWJH> are you aware of Prolog, miniKanren, Nova, Ceptre, etc., for pattern-matching? That stuff was shunned in 1950 because backtracking was considered too taxing on the hardware. Today, backtracking is cheap and cuts through problems like Eliza like a hot knife through butter. [I conjecture that LLMs are just massively parallel pattern-matching devices].",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K1rWT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U08294YLWJH"
                            },
                            {
                                "type": "text",
                                "text": " are you aware of Prolog, miniKanren, Nova, Ceptre, etc., for pattern-matching? That stuff was shunned in 1950 because backtracking was considered too taxing on the hardware. Today, backtracking is cheap and cuts through problems like Eliza like a hot knife through butter. [I conjecture that LLMs are just massively parallel pattern-matching devices]."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U08294YLWJH"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1735512958.741459",
        "client_msg_id": "e1626017-6ebc-4213-a721-64736a94b803",
        "text": "<@UGWUJUZHT> yes I am aware of Prolog, the other names are new for me",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735480545.955879",
        "parent_user_id": "U08294YLWJH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WELEk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " yes I am aware of Prolog, the other names are new for me"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735514277.187609",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1735514532.000000"
        },
        "client_msg_id": "ccd52783-b60f-42a3-9464-7f10987d7bf3",
        "text": "After a conversation with <@U013ZLJARC7> and others about <https:\/\/merveilles.town\/@akkartik\/113635605044781800|Emacs> <https:\/\/merveilles.town\/@akkartik\/113656713644512122|Nature>, and playing with <https:\/\/harc.github.io\/seymour-live2017|Seymour> by <@U06JEKAJLTV>, I'm getting interested in building..\n\nAn environment for visualizing programs\n\n(Not to be confused with visual programs, or visualization more generally.)\n\n• Start with a tiling window manager for managing named graphical canvas \"buffers\", using Emacs operations like split and resize.\n• Each buffer exposes a coordinate space of its choosing, listens for messages and positions objects in the space in response to messages.\n• Buffers can send messages to other buffers.\nExamples, etc. in :thread:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1735541398.776279",
        "reply_users": [
            "UCUSW7WVD",
            "UFEQUBNNT",
            "UJBAJNFLK"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1735515864.710359"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1735516693.146569"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1735517148.339399"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1735524952.906929"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1735541398.776279"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IthZR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After a conversation with "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " and others about "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/merveilles.town\/@akkartik\/113635605044781800",
                                "text": "Emacs"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/merveilles.town\/@akkartik\/113656713644512122",
                                "text": "Nature"
                            },
                            {
                                "type": "text",
                                "text": ", and playing with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/harc.github.io\/seymour-live2017",
                                "text": "Seymour"
                            },
                            {
                                "type": "text",
                                "text": " by "
                            },
                            {
                                "type": "user",
                                "user_id": "U06JEKAJLTV"
                            },
                            {
                                "type": "text",
                                "text": ", I'm getting interested in building..\n\nAn environment for visualizing programs\n\n(Not to be confused with visual programs, or visualization more generally.)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Start with a tiling window manager for managing named graphical canvas \"buffers\", using Emacs operations like split and resize."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Each buffer exposes a coordinate space of its choosing, listens for messages and positions objects in the space in response to messages."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Buffers can send messages to other buffers."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nExamples, etc. in "
                            },
                            {
                                "type": "emoji",
                                "name": "thread",
                                "unicode": "1f9f5"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U08294YLWJH",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UFEQUBNNT",
                    "UJBAJNFLK",
                    "U06SS0DHZD1"
                ],
                "count": 3
            },
            {
                "name": "dart",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735515864.710359",
        "client_msg_id": "85e08fd9-c687-49d3-9675-56963bd0069f",
        "text": "Examples of coordinate spaces:\n\n• Graphical game engines use the obvious 2D\/3D cartesian systems. You position stuff using `(x, y)` or `(x, y, z)`. You could also imagine polar or other coordinate systems that are studied in geometry.\n• The HTML DOM is a space where positions can be specified using CSS selectors or XSLT.\n• You can imagine a text editor operating in a coordinate space as well. Emacs seems to use a 1D coordinate, just character count from start of buffer. My stuff so far uses 2D: (line index, UTF-8 codepoint index within line)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NB+yX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Examples of coordinate spaces:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Graphical game engines use the obvious 2D\/3D cartesian systems. You position stuff using "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(x, y)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " or "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(x, y, z)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". You could also imagine polar or other coordinate systems that are studied in geometry."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The HTML DOM is a space where positions can be specified using CSS selectors or XSLT."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You can imagine a text editor operating in a coordinate space as well. Emacs seems to use a 1D coordinate, just character count from start of buffer. My stuff so far uses 2D: (line index, UTF-8 codepoint index within line)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735516693.146569",
        "client_msg_id": "8782a4a3-0ff8-423e-9702-9baf30df1c86",
        "text": "Example messages:\n• In a text editor, the cursor tracks a position, and keyboard and mouse send messages to move the cursor or insert objects (characters or longer text) at the cursor.\n• You can imagine `print` statements as a message from the \"code\" coordinate space to a different, 0-D (append-only so there's no notion of coordinate) space.\n• Terminal buffers in Emacs take the mostly 0D space of a terminal and augment it with a cursor. When you scroll up to an earlier command and hit a hotkey, the buffer sends a message to itself with the text around the cursor. The message is received at the bottom of the buffer.\n• Emacs Slime and other IDEs support keyboard shortcuts to send text from the current buffer to a REPL in some other buffer.\n• <https:\/\/100r.co\/site\/ronin.html|Ronin> and <https:\/\/futureofcoding.org\/episodes\/049.html|sketch-n-sketch> support bidirectional messages between two spaces with very different coordinate systems.\n• Live programming systems often show the results of a statement to its right. Examples: <https:\/\/alv.s-ol.nu\/stable\/index.html|alv> by <@UNGNT3BKR>, Bret Victor (of course), Seymour as above. These too can be seen as a reflexive message from a space to itself. In addition, the message contains an implicit coordinate: the current line.\n• GToolkit, Lisp Machines and other Smalltalk systems do a lot of stuff like this. I think all of this can be cast in terms of buffers, coordinate spaces and messages, though you can imagine them as a single, very complex coordinate space like the HTML DOM, or many simple spaces with different possible coordinate systems. For example, in any of them you can create a new \"log\" space that you can append graphical objects to. Maybe even self-contained interactive graphical widgets.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MGnro",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Example messages:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In a text editor, the cursor tracks a position, and keyboard and mouse send messages to move the cursor or insert objects (characters or longer text) at the cursor."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You can imagine "
                                    },
                                    {
                                        "type": "text",
                                        "text": "print",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " statements as a message from the \"code\" coordinate space to a different, 0-D (append-only so there's no notion of coordinate) space."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Terminal buffers in Emacs take the mostly 0D space of a terminal and augment it with a cursor. When you scroll up to an earlier command and hit a hotkey, the buffer sends a message to itself with the text around the cursor. The message is received at the bottom of the buffer."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Emacs Slime and other IDEs support keyboard shortcuts to send text from the current buffer to a REPL in some other buffer."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/100r.co\/site\/ronin.html",
                                        "text": "Ronin"
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/futureofcoding.org\/episodes\/049.html",
                                        "text": "sketch-n-sketch"
                                    },
                                    {
                                        "type": "text",
                                        "text": " support bidirectional messages between two spaces with very different coordinate systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Live programming systems often show the results of a statement to its right. Examples: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/alv.s-ol.nu\/stable\/index.html",
                                        "text": "alv"
                                    },
                                    {
                                        "type": "text",
                                        "text": " by "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "UNGNT3BKR"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", Bret Victor (of course), Seymour as above. These too can be seen as a reflexive message from a space to itself. In addition, the message contains an implicit coordinate: the current line."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "GToolkit, Lisp Machines and other Smalltalk systems do a lot of stuff like this. I think all of this can be cast in terms of buffers, coordinate spaces and messages, though you can imagine them as a single, very complex coordinate space like the HTML DOM, or many simple spaces with different possible coordinate systems. For example, in any of them you can create a new \"log\" space that you can append graphical objects to. Maybe even self-contained interactive graphical widgets."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U04S5LF5C7R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735517148.339399",
        "client_msg_id": "a4d0d301-1d69-404e-973d-85e8f4187b04",
        "text": "The major question for me now is: how do you configure a buffer? You need some concise way to specify the space (perhaps just by naming from a small menu of options), handlers that listen for messages (e.g. keypress or mousepress), handlers for sending messages (e.g. widgets on the space that perform tasks when you interact with them), and generic handlers for sending messages to other buffers (e.g. `print`; here I'm imagining it to send a message from some arbitrary process, through say a socket, back into the environment, with enough information to route it to the appropriate buffer accompanied by a reasonable coordinate)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EYSRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The major question for me now is: how do you configure a buffer? You need some concise way to specify the space (perhaps just by naming from a small menu of options), handlers that listen for messages (e.g. keypress or mousepress), handlers for sending messages (e.g. widgets on the space that perform tasks when you interact with them), and generic handlers for sending messages to other buffers (e.g. "
                            },
                            {
                                "type": "text",
                                "text": "print",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; here I'm imagining it to send a message from some arbitrary process, through say a socket, back into the environment, with enough information to route it to the appropriate buffer accompanied by a reasonable coordinate)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1735524952.906929",
        "client_msg_id": "FF1E3A48-3E9E-481F-B9BB-34083E9044C2",
        "text": "Elena and I explored this space a _little_ and you might find a useful thing or two in <https:\/\/github.com\/alltom\/debugview|https:\/\/github.com\/alltom\/debugview>\n\nI think session management was the most annoying part of our approach. Like if two parts of a program want to make bar charts, suddenly there was a coordination problem, because we wanted to stick to a tadi protocol that any process with a stdout could speak and wouldn’t require a library to effectively use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDJo4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Elena and I explored this space a "
                            },
                            {
                                "type": "text",
                                "text": "little",
                                "style": {
                                    "bold": false,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and you might find a useful thing or two in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/alltom\/debugview",
                                "text": "https:\/\/github.com\/alltom\/debugview"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think session management was the most annoying part of our approach"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Like if two parts of a program want to make bar charts, suddenly there was a coordination problem, because we wanted to stick to a tadi protocol that any process with a stdout could speak and "
                            },
                            {
                                "type": "text",
                                "text": "wouldn’t"
                            },
                            {
                                "type": "text",
                                "text": " require a library to effectively use."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1735541398.776279",
        "client_msg_id": "620ab672-9d60-41b8-90d4-ed9f8b2d7ee1",
        "text": "Buffer configuration is what Emacs has modes for, and Smalltalk objects (what else?). In both cases, it's a finite but possibly large list of choices.\nYou could have Emacs-like modes and have programs specify their mode in an initial message.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735514277.187609",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tfEOJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Buffer configuration is what Emacs has modes for, and Smalltalk objects (what else?). In both cases, it's a finite but possibly large list of choices.\nYou could have Emacs-like modes and have programs specify their mode in an initial message."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]