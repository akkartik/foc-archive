[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1749479317.801589",
        "client_msg_id": "44b057b4-1c34-4131-932e-1ce00b872e67",
        "text": "I was inspired by the comments to respond and add some more thoughts to this thread, but the result was bigger than only a few lines... [Thoughts on Hindrances to Asynchronousity]( <https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thoughts-on-hindrances-to-asynchronousity?r=1egdky&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thoughts-on-hindrances-to-asynchronousity?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F192f300a-65cc-4855-b8f8-53f622d559e3_711x454.png",
                "image_width": 711,
                "image_height": 454,
                "image_bytes": 78867,
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9bf28261-3dbc-4931-99f3-57bb47beeb02%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thoughts-on-hindrances-to-asynchronousity?r=1egdky&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=true",
                "fallback": "Thoughts on Hindrances to Asynchronousity",
                "text": "2025-06-09",
                "title": "Thoughts on Hindrances to Asynchronousity",
                "title_link": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thoughts-on-hindrances-to-asynchronousity?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
                "service_name": "programmingsimplicity.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UR4Cc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was inspired by the comments to respond and add some more thoughts to this thread, but the result was bigger than only a few lines... [Thoughts on Hindrances to Asynchronousity]( "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/open.substack.com\/pub\/programmingsimplicity\/p\/thoughts-on-hindrances-to-asynchronousity?r=1egdky&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U011C25B38X",
        "type": "message",
        "ts": "1749479560.741479",
        "client_msg_id": "F2C1E38E-E050-4BC5-9B91-663592A3A4BC",
        "text": "Closest thing I’ve found so far is whiteboard.chat. I should say my use case is iterating on an engineering diagram on a video call.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "afe258f63c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-05-12\/8869553941623_afe258f63c3f6ecf0e55_72.png",
            "first_name": "",
            "real_name": "Angus Mitchell",
            "display_name": "Angus Mitchell",
            "team": "T5TCAFTA9",
            "name": "anguspmitchell",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749094789.846679",
        "parent_user_id": "U011C25B38X",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nMwQU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Closest thing I’ve found so far is whiteboard.chat. I should say my use case is iterating on an engineering diagram on a video call."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1749481938.967339",
        "client_msg_id": "110b8ced-3547-4a4b-b0f4-a44d12bb67c3",
        "text": "Both text and schematics are \"just\" an encoding.\nThis means you can come up with good\/bad textual encoding describing PCBs,\nand with good\/bad schematic describing bubble sort to be transpiled to e.g. python.\nSo maybe the problem is \"popular\/familiar schematics\/PL-syntaxes are not `very good for anything`, but `ok for everything`\"?\n(cough <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1747153874428279> cough)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NSIii",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both text and schematics are \"just\" an encoding.\nThis means you can come up with good\/bad textual encoding describing PCBs,\nand with good\/bad schematic describing bubble sort to be transpiled to e.g. python.\nSo maybe the problem is \"popular\/familiar schematics\/PL-syntaxes are not `very good for anything`, but `ok for everything`\"?\n(cough "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1747153874428279"
                            },
                            {
                                "type": "text",
                                "text": " cough)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U011C25B38X"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1749521798.715299",
        "client_msg_id": "1156465d-6336-4c51-ace2-900c5cc9c27d",
        "text": "I read this to say that it's OK to settle for a mediocre PL. I strongly believe that language affects thought, and therefore affects how you solve problems and how easily you can solve problems. I know of at least two very common DSLs that are used in programming: BNF and REGEX. In physics, Richard Feynman used Feynman Diagrams to think through a hoary problem in physics. Syntax is cheap, paradigms are important. I think that it is much easier to create syntaxes today than it was in 1960. There is no good reason to settle on one mediocre syntax designed by someone else. Every project should have multiple syntaxes (and, not just textual). The remaining problem is: how to bolt many SCNs (nano-DSLs, Solution Centric Notations) together to form a whole solution. UNIX gave us some baby steps, but, we continue to believe that it's still 1960, that language design is hard and that only one language should be used per project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zhvgO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I read this to say that it's OK to settle for a mediocre PL. I strongly believe that language affects thought, and therefore affects how you solve problems and how easily you can solve problems. I know of at least two very common DSLs that are used in programming: BNF and REGEX. In physics, Richard Feynman used Feynman Diagrams to think through a hoary problem in physics. Syntax is cheap, paradigms are important. I think that it is much easier to create syntaxes today than it was in 1960. There is no good reason to settle on one mediocre syntax designed by someone else. Every project should have multiple syntaxes (and, not just textual). The remaining problem is: how to bolt many SCNs (nano-DSLs, Solution Centric Notations) together to form a whole solution. UNIX gave us some baby steps, but, we continue to believe that it's still 1960, that language design is hard and that only one language should be used per project."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U07BD7U4S4R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749537135.482379",
        "client_msg_id": "2c259a09-b2c3-4f87-845d-af3e56cddce2",
        "text": "Recommended reading: <https:\/\/doi.org\/10.1145\/358896.358899|Notation as a tool of thought>, Ken Iverson's Turing Award speech from 1979. The title says it all.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l++60",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recommended reading: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/doi.org\/10.1145\/358896.358899",
                                "text": "Notation as a tool of thought"
                            },
                            {
                                "type": "text",
                                "text": ", Ken Iverson's Turing Award speech from 1979. The title says it all."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U07BD7U4S4R"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1749537619.748759",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1749538676.000000"
        },
        "client_msg_id": "46360d57-18b1-488d-8357-edff03d0e37d",
        "text": "LISPs provide fairly easy (in the <https:\/\/youtu.be\/SxdOUGdseq4?t=160|simple made easy> sense: familiar, already at hand, convenient) way to make and use DLS. But maybe just 1% of all developers know LISP even exists. That, and memes like \"using regex? now you have 2 problems\", <https:\/\/winestockwebdesign.com\/Essays\/Lisp_Curse.html|lisp curse>, <http:\/\/www.laputan.org\/mud\/mud.html|big ball of mud> and <https:\/\/dreamsongs.com\/WorseIsBetter.html|worse is better> suggest (ability to have) more syntaxes is not the only factor at play.\n\nI 100% agree that \"good, fitting\" DSL is a major writability, readability, maintainability factor.\nNeed to solve integration UX and ergonomics, I guess.\n\nI myself try to replace clojure's imo bad DSLs with my own (<https:\/\/github.com\/akovantsev\/destruct|destructuring>, <https:\/\/github.com\/akovantsev\/archery|-> threading>, <https:\/\/github.com\/akovantsev\/bitmatch|control-flow>, <https:\/\/github.com\/akovantsev\/blet|restructuring>, etc.), but immediately run into missing IDE support for nontrivial cases (again, nod to tree-orientation vs line-orientation <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1747153874428279|thread>) so I need to re-implement macro multiple times for different contexts: actual runtime, then for IDE to understand and give me at least symbol-resolution and go-to-local-definition), and it is so painful, that writing my own IDE just to support these out the box is now not out of question (and is in fact in progress).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KDLvH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LISPs provide fairly easy (in the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/SxdOUGdseq4?t=160",
                                "text": "simple made easy"
                            },
                            {
                                "type": "text",
                                "text": " sense: familiar, already at hand, convenient) way to make and use DLS. But maybe just 1% of all developers know LISP even exists. That, and memes like \"using regex? now you have 2 problems\", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/winestockwebdesign.com\/Essays\/Lisp_Curse.html",
                                "text": "lisp curse"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.laputan.org\/mud\/mud.html",
                                "text": "big ball of mud"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dreamsongs.com\/WorseIsBetter.html",
                                "text": "worse is better"
                            },
                            {
                                "type": "text",
                                "text": " suggest (ability to have) more syntaxes is not the only factor at play.\n\nI 100% agree that \"good, fitting\" DSL is a major writability, readability, maintainability factor.\nNeed to solve integration UX and ergonomics, I guess.\n\nI myself try to replace clojure's imo bad DSLs with my own ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akovantsev\/destruct",
                                "text": "destructuring"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akovantsev\/archery",
                                "text": "-> threading"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akovantsev\/bitmatch",
                                "text": "control-flow"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akovantsev\/blet",
                                "text": "restructuring"
                            },
                            {
                                "type": "text",
                                "text": ", etc.), but immediately run into missing IDE support for nontrivial cases (again, nod to tree-orientation vs line-orientation "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1747153874428279",
                                "text": "thread"
                            },
                            {
                                "type": "text",
                                "text": ") so I need to re-implement macro multiple times for different contexts: actual runtime, then for IDE to understand and give me at least symbol-resolution and go-to-local-definition), and it is so painful, that writing my own IDE just to support these out the box is now not out of question (and is in fact in progress)."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]