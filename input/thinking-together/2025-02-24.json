[
    {
        "user": "U0112C10V4Y",
        "type": "message",
        "ts": "1740414777.033469",
        "edited": {
            "user": "U0112C10V4Y",
            "ts": "1740414818.000000"
        },
        "client_msg_id": "d4e7b8c6-0ec3-477c-8c2f-5594b8d81916",
        "text": "Do you have recommendations for writings about Margaret  Hamilton's approach to system design? It sounds like a completely different paradigm than the one we are used to with function call stacks dominating execution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf521cc065bb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f521cc065bb724c90c57c263ec7ee857.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Naveen Michaud-Agrawal",
            "display_name": "Naveen Michaud-Agrawal",
            "team": "T5TCAFTA9",
            "name": "naveen.michaudagrawal",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1740336335.187239",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CtJKq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you have recommendations for writings about Margaret  Hamilton's approach to system design? It sounds like a completely different paradigm than the one we are used to with function call stacks dominating execution."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UCUSW7WVD",
                    "UGWUJUZHT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1740423931.053239",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1740427684.000000"
        },
        "client_msg_id": "b0fd6fbf-f8da-4d15-b170-a7a14b9da4b1",
        "text": "[EDIT: oops I didn't notice I'm necroposting on old thread]\n\n[bad example]\nTcl formally had no AST, it's all just strings.\nInformally though, <https:\/\/github.com\/tcltk\/tcl\/blob\/core-9-0-a3-rc\/changes#L2551-L2557|since 1996> there are <https:\/\/www.tcl-lang.org\/man\/tcl\/TclLib\/Object.htm|multiple internal representations>—all satisfying same stringy API but each optimized for particular uses—and those include \"list\" (a string adopts this representation after operations like indexing) and \"bytecode\" (a string adopts this representation after it gets evaluated).\n(there is a command to <https:\/\/wiki.tcl-lang.org\/page\/representation|peek under the hood>; e.g. <https:\/\/youtu.be\/M59FJbNFbUY?t=1985|here> I'm showing a string becoming bytecode after `eval`. it's part of a longer video on one-API<=>multi-representation dualities across several languages.)\n\nSo while the code for control structures like `if` or `proc` may never say so explicitly, in practice it ends up slicing strings into something quite akin to AST tree, with parts converted to bytecode on-demand. :magic_wand:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732975789.778179",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YnGiU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[EDIT: oops I didn't notice I'm necroposting on old thread]\n\n[bad example]\nTcl formally had no AST, it's all just strings.\nInformally though, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tcltk\/tcl\/blob\/core-9-0-a3-rc\/changes#L2551-L2557",
                                "text": "since 1996"
                            },
                            {
                                "type": "text",
                                "text": " there are "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.tcl-lang.org\/man\/tcl\/TclLib\/Object.htm",
                                "text": "multiple internal representations"
                            },
                            {
                                "type": "text",
                                "text": "—all satisfying same stringy API but each optimized for particular uses—and those include \"list\" (a string adopts this representation after operations like indexing) and \"bytecode\" (a string adopts this representation after it gets evaluated).\n(there is a command to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.tcl-lang.org\/page\/representation",
                                "text": "peek under the hood"
                            },
                            {
                                "type": "text",
                                "text": "; e.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/M59FJbNFbUY?t=1985",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": " I'm showing a string becoming bytecode after "
                            },
                            {
                                "type": "text",
                                "text": "eval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". it's part of a longer video on one-API<=>multi-representation dualities across several languages.)\n\nSo while the code for control structures like "
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "proc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may never say so explicitly, in practice it ends up slicing strings into something quite akin to AST tree, with parts converted to bytecode on-demand. "
                            },
                            {
                                "type": "emoji",
                                "name": "magic_wand",
                                "unicode": "1fa84"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1740424146.607079",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1740424217.000000"
        },
        "client_msg_id": "da9ca1ae-b3ca-42cf-a755-9f4887cf867f",
        "text": "[better example]\nForth is more interesting case to study, it really doesn't have an AST.\nNor exactly bytecode, but builds up a sequence of \"word\" pointers to execute (or in direct-threaded implementations, a sequence of JMP instructions); I'll let you decide whether that's closer to bytecode or tree-walking.\n\nBut am I cheating because Forth has _no syntax_ either, just flat sequence of words, right?\nWell, it has _some_ syntax here and there, it's just implemented in diffuse fashion by various words.  (Which means it has _no grammar_.)\nFor example `( ... )` is comments, implemented by `(` word eating up and discarding stdin until it meets `)` character.\n\nAnd `: NAME word1 word2... ;` is word definition, eating up single NAME from stdin, allocating its entry-to-be-built in dictionary, then toggling main loop from \"interepreter\" to \"compile\" mode where following words are appended to the dictionary entry not executed — unless they're marked \"immediate\" for special handling.\n- `;` is immediate word that wraps up the dictionary entry and toggles main loop back to \"interpreter\" mode.\n- `IF`, `THEN` etc. are immediate words that take notice of addresses and later fixup some pointers to build up conditional, loops, etc. in a manner similar to assembly language.\n\n---\n\nAssemblers could answer your question in similar spirit (mostly flat 1:1 mapping to output, with some fixups), except most assemblers are not interpreted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732975789.778179",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HUyyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[better example]\nForth is more interesting case to study, it really doesn't have an AST.\nNor exactly bytecode, but builds up a sequence of \"word\" pointers to execute (or in direct-threaded implementations, a sequence of JMP instructions); I'll let you decide whether that's closer to bytecode or tree-walking.\n\nBut am I cheating because Forth has "
                            },
                            {
                                "type": "text",
                                "text": "no syntax",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " either, just flat sequence of words, right?\nWell, it has "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax here and there, it's just implemented in diffuse fashion by various words.  (Which means it has "
                            },
                            {
                                "type": "text",
                                "text": "no grammar",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".)\nFor example "
                            },
                            {
                                "type": "text",
                                "text": "( ... )",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is comments, implemented by "
                            },
                            {
                                "type": "text",
                                "text": "(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " word eating up and discarding stdin until it meets "
                            },
                            {
                                "type": "text",
                                "text": ")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " character.\n\nAnd "
                            },
                            {
                                "type": "text",
                                "text": ": NAME word1 word2... ;",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is word definition, eating up single NAME from stdin, allocating its entry-to-be-built in dictionary, then toggling main loop from \"interepreter\" to \"compile\" mode where following words are appended to the dictionary entry not executed — unless they're marked \"immediate\" for special handling.\n- "
                            },
                            {
                                "type": "text",
                                "text": ";",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is immediate word that wraps up the dictionary entry and toggles main loop back to \"interpreter\" mode.\n- "
                            },
                            {
                                "type": "text",
                                "text": "IF",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "THEN",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " etc. are immediate words that take notice of addresses and later fixup some pointers to build up conditional, loops, etc. in a manner similar to assembly language.\n\n---\n\nAssemblers could answer your question in similar spirit (mostly flat 1:1 mapping to output, with some fixups), except most assemblers are not interpreted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1740424767.947939",
        "client_msg_id": "bd8f902f-60d4-4e60-9c87-4b2afa939ad1",
        "text": "I suspect neither are what you meant.\nIMHO they're interesting not for the behind-the-scenes implementation choice of skipping a parser-&gt;AST step, but for the syntax malleability they were able to expose to user-space: in both Tcl and FORTH it's possible to define custom control structures \/ DSLs in the language itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732975789.778179",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CoFmm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect neither are what you meant.\nIMHO they're interesting not for the behind-the-scenes implementation choice of skipping a parser->AST step, but for the syntax malleability they were able to expose to user-space: in both Tcl and FORTH it's possible to define custom control structures \/ DSLs in the language itself."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1740426093.202139",
        "client_msg_id": "c58e39f3-6893-4e6c-9e31-7975ce28b670",
        "text": "As for Pascal, conceptually it does have a grammar, and parts of the implementation can be marked a \"parser\"—but it's not a separate \"pass\" in the sense it doesn't _allocate_ the whole AST as data structure.  You could probably write something similar with YACC actions that build p-code instead of allocating AST nodes?\nThe grammar was carefully designed to enable this, e.g. requiring all variables declared before code starts.\n\nI think Wirth experimented with single-pass approaches in his later languages too?\n<https:\/\/people.inf.ethz.ch\/wirth\/Articles\/Modula-Oberon-June.pdf> sheds interesting light on historic constraints:\n&gt; ... PDP-11 with a 64K-byte store. The single-pass strategy of our Pascal compilers could not be adopted; a multipass approach was unavoidable in view of the small memory. ...\n&gt; The first Modula-2 compiler, written by K. van Le in 1977 consisted of 7 passes, each generating sequential output written onto the 2M-byte disk.\nIIUC what he means is multi-pass allows you to reduce RAM occupied by compiler _code_ by loading one pass' code at a time, leaving more RAM for data (plus data can be streamed from\/to disk).\nFunnily, similar reason also motivated Unix \"do one thing\" + pipes design :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1732975789.778179",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pgjjX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for Pascal, conceptually it does have a grammar, and parts of the implementation can be marked a \"parser\"—but it's not a separate \"pass\" in the sense it doesn't "
                            },
                            {
                                "type": "text",
                                "text": "allocate",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the whole AST as data structure.  You could probably write something similar with YACC actions that build p-code instead of allocating AST nodes?\nThe grammar was carefully designed to enable this, e.g. requiring all variables declared before code starts.\n\nI think Wirth experimented with single-pass approaches in his later languages too?\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/people.inf.ethz.ch\/wirth\/Articles\/Modula-Oberon-June.pdf"
                            },
                            {
                                "type": "text",
                                "text": " sheds interesting light on historic constraints:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... PDP-11 with a 64K-byte store. The single-pass strategy of our Pascal compilers could not be adopted; a multipass approach was unavoidable in view of the small memory. ...\nThe first Modula-2 compiler, written by K. van Le in 1977 consisted of 7 passes, each generating sequential output written onto the 2M-byte disk."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IIUC what he means is multi-pass allows you to reduce RAM occupied by compiler "
                            },
                            {
                                "type": "text",
                                "text": "code",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by loading one pass' code at a time, leaving more RAM for data (plus data can be streamed from\/to disk).\nFunnily, similar reason also motivated Unix \"do one thing\" + pipes design "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]