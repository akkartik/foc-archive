[
    {
        "user": "UL3FQ4PHB",
        "type": "message",
        "ts": "1563139603.215700",
        "edited": {
            "user": "UL3FQ4PHB",
            "ts": "1563163730.000000"
        },
        "client_msg_id": "aa6e5d77-382a-4e25-8778-e8558efec5a2",
        "text": "<@UKLV35EEM>\nThe ideas about VM\/hardware are covered here:\n<https:\/\/github.com\/difranco\/fifth\/blob\/master\/README.md>\n\nThis has the info about the adaptive evaluation technique:\n“Information-gain computation” <https:\/\/arxiv.org\/abs\/1707.01550>\n\nSome points of synergy \/ improvement I see:\n * Using distributed city generation ideas from MFM to set up dynamic global circuit-switching for RM elements\n * Following up on 2.5 D coordinate ideas for MFM and adding longer range connections andor several sparser higher dimensions for analogs of RF communications or parallel universes\n * Using adaptive agent semantics of Fifth to implement goal-directed MFM agents à la Hesam Samimi's et. al. Plan B and Call by Meaning:\n<https:\/\/www.hesam.us\/cs\/planb\/> <http:\/\/www.vpri.org\/pdf\/tr2014003_callbymeaning.pdf>\n * method sharing for actors via lightly cryptographically identified \/ authenticated method code\n * using search-powered compiler-like techniques to compile higher level code onto population-of-agents code (c.f. <http:\/\/stoke.stanford.edu\/> )\n * integrating analog computing functional units",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a4914487ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/65a4914487efb21d1cb5dd1f4130b343.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anthony Di Franco",
            "display_name": "Anthony Di Franco",
            "team": "T5TCAFTA9",
            "name": "di.franco",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y53",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKLV35EEM"
                            },
                            {
                                "type": "text",
                                "text": "\nThe ideas about VM\/hardware are covered here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/difranco\/fifth\/blob\/master\/README.md"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis has the info about the adaptive evaluation technique:\n“Information-gain computation” "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arxiv.org\/abs\/1707.01550"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSome points of synergy \/ improvement I see:\n * Using distributed city generation ideas from MFM to set up dynamic global circuit-switching for RM elements\n * Following up on 2.5 D coordinate ideas for MFM and adding longer range connections andor several sparser higher dimensions for analogs of RF communications or parallel universes\n * Using adaptive agent semantics of Fifth to implement goal-directed MFM agents à la Hesam Samimi's et. al. Plan B and Call by Meaning:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.hesam.us\/cs\/planb\/"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.vpri.org\/pdf\/tr2014003_callbymeaning.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n * method sharing for actors via lightly cryptographically identified \/ authenticated method code\n * using search-powered compiler-like techniques to compile higher level code onto population-of-agents code (c.f. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/stoke.stanford.edu\/"
                            },
                            {
                                "type": "text",
                                "text": " )\n * integrating analog computing functional units"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKLV35EEM",
        "type": "message",
        "ts": "1563154874.216300",
        "client_msg_id": "5b1ae90b-19ab-4297-a15f-6b737616f9df",
        "text": "<@UL3FQ4PHB> Thanks for the links!   I took a quick look at \"Information-gain computation\"; very cool!  I didn't really follow it deeply but I worried that the adaptive mechanism seemed quite aggressive -- and thus perhaps liable to be misled by early data on more complex examples.  Is that impossible for some reason?  It made me wish for a comparison to Prolog-with-random-search-order (something like the suggestion in <https:\/\/stackoverflow.com\/questions\/45681109\/randomizing-priority-in-prolog-predicates> ).  It seems like such a 'Randolog' would do almost as well as adaptive evaluation on the cases you show, but wouldn't get faked out by deceptive computations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb664c49890",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9db664c49890423e2263d51f331aab76.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Dave Ackley",
            "display_name": "Dave Ackley",
            "team": "T5TCAFTA9",
            "name": "ackley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "Randomizing priority in Prolog predicates",
                "title_link": "https:\/\/stackoverflow.com\/questions\/45681109\/randomizing-priority-in-prolog-predicates",
                "text": "One of the main differences between Prolog and first order logic is in the strict rule for the priority of the right parts in predicate. I would like to know if there any way to randomize this prio...",
                "fallback": "Stack Overflow: Randomizing priority in Prolog predicates",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https:\/\/stackoverflow.com\/questions\/45681109\/randomizing-priority-in-prolog-predicates",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/favicon.ico?v=4f32ecc8f43d",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/45681109\/randomizing-priority-in-prolog-predicates"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o=u0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3FQ4PHB"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the links!   I took a quick look at \"Information-gain computation\"; very cool!  I didn't really follow it deeply but I worried that the adaptive mechanism seemed quite aggressive -- and thus perhaps liable to be misled by early data on more complex examples.  Is that impossible for some reason?  It made me wish for a comparison to Prolog-with-random-search-order (something like the suggestion in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/45681109\/randomizing-priority-in-prolog-predicates"
                            },
                            {
                                "type": "text",
                                "text": " ).  It seems like such a 'Randolog' would do almost as well as adaptive evaluation on the cases you show, but wouldn't get faked out by deceptive computations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UL3FQ4PHB",
        "type": "message",
        "ts": "1563155127.216600",
        "edited": {
            "user": "UL3FQ4PHB",
            "ts": "1563155607.000000"
        },
        "client_msg_id": "f495a8f9-6cac-4a83-bc7f-c89870596ed0",
        "text": "There's a whole literature on bandit algorithms and those in the context of tree search which treats how to get the exploration-exploitation tradeoff right (as I'm sure you're aware given some of your tutorial videos) which I'm looking at. I'm not banking much on the UCB1-based search in that paper, which I picked up just for proof of concept purposes. Currently I'm looking at Murphy sampling and various ways of incorporating biases into Monte Carlo tree search and how to incorporate AlphaZero-style search biases with less expensive versions of the neural-net based approximators it used.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a4914487ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/65a4914487efb21d1cb5dd1f4130b343.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anthony Di Franco",
            "display_name": "Anthony Di Franco",
            "team": "T5TCAFTA9",
            "name": "di.franco",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gNc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a whole literature on bandit algorithms and those in the context of tree search which treats how to get the exploration-exploitation tradeoff right (as I'm sure you're aware given some of your tutorial videos) which I'm looking at. I'm not banking much on the UCB1-based search in that paper, which I picked up just for proof of concept purposes. Currently I'm looking at Murphy sampling and various ways of incorporating biases into Monte Carlo tree search and how to incorporate AlphaZero-style search biases with less expensive versions of the neural-net based approximators it used."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKLV35EEM",
        "type": "message",
        "ts": "1563155157.216800",
        "client_msg_id": "26864681-0c69-4b4a-91d6-200c54f0de46",
        "text": "And the hardware and VM thinking certainly seems in the same hemisphere as the Movable Feast.  One medium termish aspiration for the T2 Tile Project is to foster the development of a suitable byte code intermediate language as a HW\/SW interface for doing events.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb664c49890",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9db664c49890423e2263d51f331aab76.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Dave Ackley",
            "display_name": "Dave Ackley",
            "team": "T5TCAFTA9",
            "name": "ackley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And the hardware and VM thinking certainly seems in the same hemisphere as the Movable Feast.  One medium termish aspiration for the T2 Tile Project is to foster the development of a suitable byte code intermediate language as a HW\/SW interface for doing events."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKLV35EEM",
        "type": "message",
        "ts": "1563155422.217000",
        "client_msg_id": "11d9f7f2-eafc-4cf2-8b92-50e2ae6fd83c",
        "text": "Well, in the general case it's all but provable that there's no way to get explore-explore optimally right, and real programs have an awful lots of 'arms'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb664c49890",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9db664c49890423e2263d51f331aab76.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Dave Ackley",
            "display_name": "Dave Ackley",
            "team": "T5TCAFTA9",
            "name": "ackley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LBU+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, in the general case it's all but provable that there's no way to get explore-explore optimally right, and real programs have an awful lots of 'arms'."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKLV35EEM",
        "type": "message",
        "ts": "1563155477.217200",
        "client_msg_id": "0faf6868-6963-494b-b867-2c1d32a5c272",
        "text": "But if one can adjust the gain on the 'exploit pressure', then 'randolog' just becomes one limit on that setting anyway.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdb664c49890",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9db664c49890423e2263d51f331aab76.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0006-72.png",
            "first_name": "",
            "real_name": "Dave Ackley",
            "display_name": "Dave Ackley",
            "team": "T5TCAFTA9",
            "name": "ackley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ahbb3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But if one can adjust the gain on the 'exploit pressure', then 'randolog' just becomes one limit on that setting anyway."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3FQ4PHB",
        "type": "message",
        "ts": "1563155798.217700",
        "edited": {
            "user": "UL3FQ4PHB",
            "ts": "1563164037.000000"
        },
        "client_msg_id": "84db16e6-5e24-4c0b-a248-91f3b59072ce",
        "text": "I'll settle for as right as possible, and for letting the human offload most of the search to the computer. Also, Murphy sampling has a nice optimality result, and with the information-gain objective there's an information-theoretic framework for articulating what “as right as possible” means and probably how to get it via search space compression.\nActually, that failing for some reason, in the end I'll settle for pretty good (like whatever the state of the art in game tree search happens to be), as long as the work of searching for algorithms that implement specifications can be offloaded to the computer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a4914487ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/65a4914487efb21d1cb5dd1f4130b343.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anthony Di Franco",
            "display_name": "Anthony Di Franco",
            "team": "T5TCAFTA9",
            "name": "di.franco",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z8G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll settle for as right as possible, and for letting the human offload most of the search to the computer. Also, Murphy sampling has a nice optimality result, and with the information-gain objective there's an information-theoretic framework for articulating what “as right as possible” means and probably how to get it via search space compression.\nActually, that failing for some reason, in the end I'll settle for pretty good (like whatever the state of the art in game tree search happens to be), as long as the work of searching for algorithms that implement specifications can be offloaded to the computer."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3FQ4PHB",
        "type": "message",
        "ts": "1563168272.218900",
        "client_msg_id": "073a0a49-687d-4ef2-813a-d46c820d3d7a",
        "text": "<@UKLV35EEM> That randolog is somewhat reminiscent of BESA which doesn't work all that badly:\n<https:\/\/hal.archives-ouvertes.fr\/file\/index\/docid\/1025651\/filename\/BESA2.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a4914487ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/65a4914487efb21d1cb5dd1f4130b343.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anthony Di Franco",
            "display_name": "Anthony Di Franco",
            "team": "T5TCAFTA9",
            "name": "di.franco",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562186111.103400",
        "parent_user_id": "UL3FQ4PHB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lgE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKLV35EEM"
                            },
                            {
                                "type": "text",
                                "text": " That randolog is somewhat reminiscent of BESA which doesn't work all that badly:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.archives-ouvertes.fr\/file\/index\/docid\/1025651\/filename\/BESA2.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]