[
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577444051.223900",
        "client_msg_id": "f9bc63d9-d965-4260-a4b1-9176b34f7a18",
        "text": "Ok, makes sense. I guess this is where userland can be used to glue different connection models together?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I4wwY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, makes sense. I guess this is where userland can be used to glue different connection models together?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1577444913.224300",
        "client_msg_id": "188EA23E-0834-45F0-B8D5-4EB4FA0D88CF",
        "text": "Me too!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IyEZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me too!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1577463712.254300",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1577466240.000000"
        },
        "client_msg_id": "c98d8fe5-7c19-4a54-866e-2ad184b06d50",
        "text": "<@UEQ6M68H0> “The supposed dichotomy between text and graphical is an illusion...”\n\nSure, but text *is* graphical with respect to bits, and involves a lot of computation and memory spent transforming the underlying bits into something more digestible to our limited minds. Theoretically, a computer only needs a single output bit (say, a light that can be on or off) and single input bit (say, a keyboard with 0 and 1 buttons) and everything else is a practical accommodation for our cognitive and physical limitations, but it’s in those accommodations that computers become useful.\n\nWould Photoshop be as useful if users had to type code to create images - entering the coordinates of each operation as numbers instead of using direct manipulation? Technically, they’re equivalent, but one moves more memory and computational load off the user and into the computer (depending on the type of operation).\n\nI know you’re not disagreeing with the above, and are instead criticizing the visual programming approach that has forgotten this. Node &amp; line is often assumed to decrease cognitive load, even in cases where it doesn’t - which is almost all. Photoshop wouldn’t be improved if one had to input the coordinates of the paint operations with nodes &amp; lines (vs a direct manipulation paintbrush) though it might be useful for defining simple filters, in the limited cases where they more closely resemble our mental models of those filters.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lvU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " “The supposed dichotomy between text and graphical is an illusion...”\n\nSure, but text "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " graphical with respect to bits, and involves a lot of computation and memory spent transforming the underlying bits into something more digestible to our limited minds. Theoretically, a computer only needs a single output bit (say, a light that can be on or off) and single input bit (say, a keyboard with 0 and 1 buttons) and everything else is a practical accommodation for our cognitive and physical limitations, but it’s in those accommodations that computers become useful.\n\nWould Photoshop be as useful if users had to type code to create images - entering the coordinates of each operation as numbers instead of using direct manipulation? Technically, they’re equivalent, but one moves more memory and computational load off the user and into the computer (depending on the type of operation).\n\nI know you’re not disagreeing with the above, and are instead criticizing the visual programming approach that has forgotten this. Node & line is often assumed to decrease cognitive load, even in cases where it doesn’t - which is almost all. Photoshop wouldn’t be improved if one had to input the coordinates of the paint operations with nodes & lines (vs a direct manipulation paintbrush) though it might be useful for defining simple filters, in the limited cases where they more closely resemble our mental models of those filters."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577483500.258000",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1577483552.000000"
        },
        "client_msg_id": "C9C73C8A-86EC-4D6D-BAC0-E6381AAE714C",
        "text": "&gt; I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read.\n&gt; \nI’d like to read that too. It would also be a good way to figure out what composition really means to us — like _abstraction_ I feel it’s a term thrown around a lot, but I don’t think it means the same to all of us.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f85A",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI’d like to read that too. It would also be a good way to figure out what composition really means to us — like "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I feel it’s a term thrown around a lot, but I don’t think it means the same to all of us."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577484660.271700",
        "client_msg_id": "1787FBC4-DE8E-4DBC-8017-39C1AAC9817F",
        "text": "Unix pipes, Lisp, Smalltalk — what’s the connection?\n\nOne connection I see is that they all offer a composition model that is based on just one type of component (text stream, S-Expression, Object) but these components can represent a vast variety of different things. However, because the composition is defined on the abstract type, all these different things can be composed in the same way. \n\nThat’s what I mean by monoidal composition — you stay in the same category \/ it’s all the same type, but it can represent many different values. Although a monoid might already be more specific (restrictive) than needed…?\n\nUsually, we tend to categorize everything quite quickly into incompatible categories that do not relate to each other, or in less generic and more restrictive ways than a monoid structure. Then we need transformations, and interfaces, and spend a lot of time converting one thing into another.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XXAw3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unix pipes, Lisp, Smalltalk — what’s the connection?"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "One connection I see is that they all offer a composition model that is based on just one type of component (text stream, S-Expression, Object) but these components can represent a vast variety of different things. However, because the composition is defined on the abstract type, all these different things can be composed in the same way. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "That’s what I mean by monoidal composition — you stay in the same category \/ it’s all the same type, but it can represent many different values. Although a monoid might already be more specific (restrictive) than needed…?"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Usually, we tend to categorize everything quite quickly into incompatible categories that do not relate to each other, or in less generic and more restrictive ways than a monoid structure. Then we need transformations, and interfaces, and spend a lot of time converting one thing into another."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1577485572.282400",
        "client_msg_id": "D382735D-9316-409D-B10B-C2BC501A028C",
        "text": "When we write “glue code” to make different things work together, we work around the problem that composition of these things hasn’t been baked into the system. If it had been, glue code wouldn’t be necessary.\n\nThe way we cut systems into smaller manageable pieces today — often using taxonomies in the form of class or type hierarchies — is directly connected to this. This is why I’m super interested in how we categorize things, not just in programming, but in thinking.\n\nAlluding to what <@U8A5MS6R1> writes in _Systems, not Programs_, we need to look at other ways to slice these systems into manageable parts.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8MHFz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When we write “glue code” to make different things work together, we work around the problem that composition of these things hasn’t been baked into the system. If it had been, glue code wouldn’t be necessary."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The way we cut systems into smaller manageable pieces today — often using taxonomies in the form of class or type hierarchies — is directly connected to this. This is why I’m super interested in how we categorize things, not just in programming, but in thinking."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Alluding to what "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " writes in "
                            },
                            {
                                "type": "text",
                                "text": "Systems, not Programs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", we need to look at other ways to slice these systems into manageable parts."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1577492634.282600",
        "client_msg_id": "a8b2a531-aa0e-4906-8195-db4a232525db",
        "text": "IMO designing a \"composition model\" is the primary job in programming language design. Minimizing the amount of glue code you need to write when plugging components together is a major goal. Designing a type system is a big part of semantic composition. I take the same view for designing syntax: I want good syntactic composability for syntactic phrases, and I want to minimize the amount of \"glue syntax\" that you need to write.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z0Bu9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IMO designing a \"composition model\" is the primary job in programming language design. Minimizing the amount of glue code you need to write when plugging components together is a major goal. Designing a type system is a big part of semantic composition. I take the same view for designing syntax: I want good syntactic composability for syntactic phrases, and I want to minimize the amount of \"glue syntax\" that you need to write."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1577493336.282800",
        "client_msg_id": "75ed158b-864c-42fe-97ea-f591ccddda99",
        "text": "The Unix shell has good syntactic composability. But the \"everything is text\" model requires too much parsing (glue code). As many people have observed, a more differentiated type system would eliminate a lot of the parsing glue, and provide better semantic composability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AcY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Unix shell has good syntactic composability. But the \"everything is text\" model requires too much parsing (glue code). As many people have observed, a more differentiated type system would eliminate a lot of the parsing glue, and provide better semantic composability."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1577494865.283000",
        "client_msg_id": "77eab782-ec02-4f9a-ab57-33bd4529f121",
        "text": "I was taught a style of object oriented programming wherein you define a large number of classes, each with a bespoke interface. Composability was considered a code smell. According to the \"Law of Demeter\" (as interpreted by my instructor), objects should only talk to their immediate friends, using a private language only that object and its friends understand. The goal of this was supposed to be \"information hiding\" and \"loose coupling\", and writing tons of glue code and boilerplate was how you achieved these important goals. Maybe other people can offer a different perspective on OOP, but I don't like this style of programming, and I prefer functional style programming, which focuses more on composability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rlzE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was taught a style of object oriented programming wherein you define a large number of classes, each with a bespoke interface. Composability was considered a code smell. According to the \"Law of Demeter\" (as interpreted by my instructor), objects should only talk to their immediate friends, using a private language only that object and its friends understand. The goal of this was supposed to be \"information hiding\" and \"loose coupling\", and writing tons of glue code and boilerplate was how you achieved these important goals. Maybe other people can offer a different perspective on OOP, but I don't like this style of programming, and I prefer functional style programming, which focuses more on composability."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3FQ4PHB",
        "type": "message",
        "ts": "1577499076.283300",
        "client_msg_id": "e3d1c50b-128d-43e6-8ce8-42296d986caf",
        "text": "Please.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a4914487ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/65a4914487efb21d1cb5dd1f4130b343.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Anthony Di Franco",
            "display_name": "Anthony Di Franco",
            "team": "T5TCAFTA9",
            "name": "di.franco",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kMm3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1577499391.283500",
        "client_msg_id": "92172cca-bb63-4048-9605-0af2873dc3a6",
        "text": "Actually photoshop is a huge collection of graphical manipulation subroutines that have a more user friendly front-end that lets you control via sliders and text entry fields the parameters to these magical functions which do some devious operation on the underlying channels of the image. I count over 500 different custom dialog boxes in Photoshop. Although one selects things and certainly one uses the mouse to track position when drawing, the vast bulk of Photoshop skill by users is not direct manipulation based, but learning how to use all those dialog boxes with their super tricky underlying function in the right order. I would venture to guess that Photoshop has the most PhD thesis content of any software product on earth, and is one of the most clever and difficult to copy software products. I could easily surpass Twitter's client, which is fairly stupid but Photoshop is probably 1000 man years to duplicate in its full glory.  Subsets of Photoshop's functionality exist of course, but if you dive down to the bottom of the vast menu and palette tree they offer, it is a monstrously complex product at this point. I would say they are reaching the omega point of complexity where each thing they add makes the product worse in usability.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=1co",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually photoshop is a huge collection of graphical manipulation subroutines that have a more user friendly front-end that lets you control via sliders and text entry fields the parameters to these magical functions which do some devious operation on the underlying channels of the image. I count over 500 different custom dialog boxes in Photoshop. Although one selects things and certainly one uses the mouse to track position when drawing, the vast bulk of Photoshop skill by users is not direct manipulation based, but learning how to use all those dialog boxes with their super tricky underlying function in the right order. I would venture to guess that Photoshop has the most PhD thesis content of any software product on earth, and is one of the most clever and difficult to copy software products. I could easily surpass Twitter's client, which is fairly stupid but Photoshop is probably 1000 man years to duplicate in its full glory.  Subsets of Photoshop's functionality exist of course, but if you dive down to the bottom of the vast menu and palette tree they offer, it is a monstrously complex product at this point. I would say they are reaching the omega point of complexity where each thing they add makes the product worse in usability."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "URKL31C2J",
        "type": "message",
        "ts": "1577509240.283800",
        "client_msg_id": "bed0bfcd-b385-41fb-8e26-abe62e8e31dd",
        "text": "&gt; teams focusing on the graphical interface before they defined their backend algebra.\nI feel attacked haha :joy:  \/jk but to take an example from the computer graphics industry, we've come to build really solid node-based interfaces for all sorts of applications (shader creation, AI, game scripting, etc...) and this explosion of solutions is in most cases thanks to technical artists; a small subset of people in the industry that often come from an art background but end up diving into code because their problems never get solved\/understood by programmers.\n\nThis however often results in softwares\/plugins that are extremely easy and pleasing to read for the artist, but quite limited due to the lack of technical skills of most technical artists that try to solve these issues.\n\nThe CEO of the company I work for (Quixel, who just got acquired by Epic Games) started as a texture artist, got frustrated by all the manual work and the lack of efforts from engineers to solve common problems that artists have been facing for nearly a decade, and started coding in Photoshop with Actions (a macro system that helps you wrap a chain of commands into one clickable button), then Actionscript, etc... and a few years later the company grew to over 150+ people all around the world.\n\nThis has perplexed me for a long time, and often makes me wonder how different programming could be if there were more artists\/designers involved in the creation process, instead of it being \"just\" programmers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f25365a53a5d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-10\/869748838998_f25365a53a5dbe9c8027_72.png",
            "first_name": "Adnan",
            "real_name": "Adnan Chaumette",
            "display_name": "Adnan Chaumette",
            "team": "T5TCAFTA9",
            "name": "polygonflow",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DENj",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "teams focusing on the graphical interface before they defined their backend algebra."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI feel attacked haha "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": "  \/jk but to take an example from the computer graphics industry, we've come to build really solid node-based interfaces for all sorts of applications (shader creation, AI, game scripting, etc...) and this explosion of solutions is in most cases thanks to technical artists; a small subset of people in the industry that often come from an art background but end up diving into code because their problems never get solved\/understood by programmers.\n\nThis however often results in softwares\/plugins that are extremely easy and pleasing to read for the artist, but quite limited due to the lack of technical skills of most technical artists that try to solve these issues.\n\nThe CEO of the company I work for (Quixel, who just got acquired by Epic Games) started as a texture artist, got frustrated by all the manual work and the lack of efforts from engineers to solve common problems that artists have been facing for nearly a decade, and started coding in Photoshop with Actions (a macro system that helps you wrap a chain of commands into one clickable button), then Actionscript, etc... and a few years later the company grew to over 150+ people all around the world.\n\nThis has perplexed me for a long time, and often makes me wonder how different programming could be if there were more artists\/designers involved in the creation process, instead of it being \"just\" programmers."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UBSMEUXAA"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UFLN9JFRT",
        "type": "message",
        "ts": "1577510958.284700",
        "client_msg_id": "38d184cf-a3eb-4e9f-892b-5993758487f2",
        "text": "Thanks for great insights guys, I loved this thread!! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7ec98818d7f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/67ec98818d7fb6395d9a327081cd5472.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Zubair",
            "real_name": "Zubair Quraishi",
            "display_name": "Zubairq",
            "team": "T5TCAFTA9",
            "name": "zubairq",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UHZ5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for great insights guys, I loved this thread!! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1577513503.285000",
        "client_msg_id": "f1295558-7c28-48f6-b406-b29ca07e2e80",
        "text": "Hi everyone, one thing I should have emphasized up front: this paper is kinda tailored to the specific conference I'm submitting to. So please read the call for papers linked above if you haven't already. Many thanks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "opyli",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone, one thing I should have emphasized up front: this paper is kinda tailored to the specific conference I'm submitting to. So please read the call for papers linked above if you haven't already. Many thanks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    }
]