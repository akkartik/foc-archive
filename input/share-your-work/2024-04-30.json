[
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1714463455.491349",
        "client_msg_id": "d432bc45-f754-4cf3-9caf-d0674ae989b9",
        "text": "It's amazing to see the concepts of Glamorous Toolkit being carried over to a different programming language. I guess this might start a trend, and soon every language will have a moldable environment, and printing text to a VT100 terminal will be a thing of the past. The next obvious languages are Python and JS, but even a statically typed language like Rust could be run in an interpreter or JIT-compiled into a live environment for moldability purposes, while still allowing to make release builds as optimized machine code that runs without a runtime.\n\nThere's just one thing that needs to be different. It needs a prettier font. :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714068374.831879",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BKsM5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's amazing to see the concepts of Glamorous Toolkit being carried over to a different programming language. I guess this might start a trend, and soon every language will have a moldable environment, and printing text to a VT100 terminal will be a thing of the past. The next obvious languages are Python and JS, but even a statically typed language like Rust could be run in an interpreter or JIT-compiled into a live environment for moldability purposes, while still allowing to make release builds as optimized machine code that runs without a runtime.\n\nThere's just one thing that needs to be different. It needs a prettier font. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1714466486.631319",
        "client_msg_id": "57586c55-ceba-4a72-aa0d-fc8a7b082e09",
        "text": "Enjoyed listening to this over the past 9 days! Lovely discussion and I think <@UC2A2ARPT> nailed it with the critique of 'general purpose programming' at the end. Just wanted to flag that I think the dynamicland take on why smalltalk didn't take off isn't due to technical deficiencies but due to extrinsic factors, i.e. that it was \"embraced, extended and extinguished\" by the software industry which isn't actually motivated to empower people. I think they see their set-up as a non-profit independent research organisation as a key part of the response to that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713672662.908809",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/iQ0a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Enjoyed listening to this over the past 9 days! Lovely discussion and I think "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " nailed it with the critique of 'general purpose programming' at the end. Just wanted to flag that I think the dynamicland take on why smalltalk didn't take off isn't due to technical deficiencies but due to extrinsic factors, i.e. that it was \"embraced, extended and extinguished\" by the software industry which isn't actually motivated to empower people. I think they see their set-up as a non-profit independent research organisation as a key part of the response to that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05SU27S1M2",
        "type": "message",
        "ts": "1714469245.682519",
        "client_msg_id": "860a05c8-b235-45e2-bd10-2814fe98a54c",
        "text": "I searched \"elephant in the room\" to find this, which revealed a number of elephants in the room:\n• DCI architecture\n• Haskell crypto\n• Code quality\n• Incoherence of ownership\n• No one in UK government listens to evidence\n• Functional reactive programming\n• IDEs\n• Browsers being crap at resizing in tiling window managers\n• The elephant being the room\n• Bret Victor",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "60e6ebbc4a9a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-18\/5922641047217_60e6ebbc4a9a68a57656_72.png",
            "first_name": "Alex",
            "real_name": "Alex McLean",
            "display_name": "Alex McLean",
            "team": "T5TCAFTA9",
            "name": "alex952",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1713672662.908809",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6dvKh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I searched \"elephant in the room\" to find this, which revealed a number of elephants in the room:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "DCI architecture"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Haskell crypto"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code quality"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Incoherence of ownership"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "No one in UK government listens to evidence"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Functional reactive programming"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "IDEs"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Browsers being crap at resizing in tiling window managers"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The elephant being the room"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Bret Victor"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U03R0B9U1GD",
                    "U02QC0PPER3"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03R0B9U1GD",
        "type": "message",
        "ts": "1714480641.447039",
        "client_msg_id": "75adfc2b-6aa6-4505-9e50-89920ec315f6",
        "text": "I've been (trying) to build autocomplete for canvas. keen to hear thoughts\/ideas from anyone else who's worked on anything similar-ish!\n<https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP|https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "78c476adad42",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-26\/3992499177765_78c476adad42ab6cfe32_72.png",
            "first_name": "Lu",
            "real_name": "Lu Wilson",
            "display_name": "TodePond",
            "team": "T5TCAFTA9",
            "name": "l2wilson94",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714480641.447039",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1719440498.235689",
        "reply_users": [
            "UNCP67JSK",
            "UMV4B97GT",
            "U03R0B9U1GD"
        ],
        "replies": [
            {
                "user": "UNCP67JSK",
                "ts": "1714483841.239989"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1714956905.892209"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1714975564.534079"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1715057559.625289"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1715061601.556199"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1715061622.606589"
            },
            {
                "user": "U03R0B9U1GD",
                "ts": "1715062147.996279"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1715212076.046169"
            },
            {
                "user": "UMV4B97GT",
                "ts": "1719440498.235689"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/r6ls8Gw9MmY\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/r6ls8Gw9MmY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Introducing autocomplete for canvas\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP",
                "fallback": "YouTube Video: Introducing autocomplete for canvas",
                "title": "Introducing autocomplete for canvas",
                "title_link": "https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP",
                "author_name": "tldraw",
                "author_link": "https:\/\/www.youtube.com\/@tldraw",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+7ExZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been (trying) to build autocomplete for canvas. keen to hear thoughts\/ideas from anyone else who's worked on anything similar-ish!\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP",
                                "text": "https:\/\/youtu.be\/r6ls8Gw9MmY?si=JT8VjUvxgcRk9MxP"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "UNCP67JSK",
                    "U06131CATV3",
                    "U05SU27S1M2",
                    "U06BUK2M2RH",
                    "U05FWGL3EBC",
                    "U85HCL7JP",
                    "U0123H7JRDM",
                    "U06U216PG0K",
                    "UFPPABQ7P",
                    "URKQXRCAC",
                    "UMV4B97GT",
                    "U04Q53X6P7W",
                    "U06JCQL6ERJ",
                    "U051DSNTHCJ",
                    "U02JQA5FY5C"
                ],
                "count": 15
            },
            {
                "name": "bubbles",
                "users": [
                    "U05M5A8E0NT",
                    "U06BUK2M2RH"
                ],
                "count": 2
            },
            {
                "name": "sunglasses",
                "users": [
                    "U06MT7U6W84"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "U0296ACR13M"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1714483841.239989",
        "client_msg_id": "a03ef828-7045-47c4-a0b1-d332a20a9e75",
        "text": "Soo cool! I've been wanting something that continuously shows me inspiration of similar things (that possibly others are working on, for connection; or not, just as suggestions); sometimes in place like this, but mostly as a range of \"alternate futures\". Ie. with the grid example, from just two datapoints, you could extrapolate in multiple ways! I can get frustrating when the assistants goes with something different than you intended, but visual things have the benefit of being easily distinguished at a glance! Have like five \"agents\" that are more stable across time, but continuously change with your changes. Each estimates its relevance, and fade accordingly, getting replaced by new fresh agent that starts off from your latest view. All five on a row, then scrolling down to see the future, ie. letting them progress even further, but really, causing a fractal tree as the future branches exponentially for every choice, but again, with less relevant branches fading into the z-distance. Tap anyone to see bigger, either just highlight elements to bring into your canvas, or fully switch into their world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714480641.447039",
        "parent_user_id": "U03R0B9U1GD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rNVQA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Soo cool! I've been wanting something that continuously shows me inspiration of similar things (that possibly others are working on, for connection; or not, just as suggestions); sometimes in place like this, but mostly as a range of \"alternate futures\". Ie. with the grid example, from just two datapoints, you could extrapolate in multiple ways! I can get frustrating when the assistants goes with something different than you intended, but visual things have the benefit of being easily distinguished at a glance! Have like five \"agents\" that are more stable across time, but continuously change with your changes. Each estimates its relevance, and fade accordingly, getting replaced by new fresh agent that starts off from your latest view. All five on a row, then scrolling down to see the future, ie. letting them progress even further, but really, causing a fractal tree as the future branches exponentially for every choice, but again, with less relevant branches fading into the z-distance. Tap anyone to see bigger, either just highlight elements to bring into your canvas, or fully switch into their world."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1714490213.492859",
        "client_msg_id": "c9151147-97e2-4dd4-8e79-d795a4f2239e",
        "text": "The key feature that a language must provide for something like a moldable inspector is introspection. Compilers that strip away all the metadata required for exploration look like an obstacle. So yes, Python and JS are good candidates, but I hesitate about Rust (which I don't know much about).\n\nAs for the font... Making the CSS configurable (loaded from a file) is on my to-do list. That provides as much theming support as is possible in HTML, which is a lot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714068374.831879",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "34Uf5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The key feature that a language must provide for something like a moldable inspector is introspection. Compilers that strip away all the metadata required for exploration look like an obstacle. So yes, Python and JS are good candidates, but I hesitate about Rust (which I don't know much about).\n\nAs for the font... Making the CSS configurable (loaded from a file) is on my to-do list. That provides as much theming support as is possible in HTML, which is a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1714506914.320679",
        "client_msg_id": "48fe4786-7cf7-40f9-872c-ac0400f9e431",
        "text": "The Rust compiler itself it pretty moldable. It can be used as a library to extract any information out of the intermediate representations, so you don't work on the more or less stripped output, but directly on the compiler internals. It also has an experimental compiler backend for Cranelift, which is an alternative to LLVM and is intended to make debug builds faster. Cranelift is also ideal for making JIT compilers. So I have no doubt that Rust is a good language for moldable development, but it's going to take a series of experiments and blog posts by some very smart people, whereas in Python or JS, someone could make a moldable environment by stringing together things that are already commonplace without being a genius.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714068374.831879",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zseBk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Rust compiler itself it pretty moldable. It can be used as a library to extract any information out of the intermediate representations, so you don't work on the more or less stripped output, but directly on the compiler internals. It also has an experimental compiler backend for Cranelift, which is an alternative to LLVM and is intended to make debug builds faster. Cranelift is also ideal for making JIT compilers. So I have no doubt that Rust is a good language for moldable development, but it's going to take a series of experiments and blog posts by some very smart people, whereas in Python or JS, someone could make a moldable environment by stringing together things that are already commonplace without being a genius."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "For the last month I've been working on an arrow toolkit for the web, called Quiver :bow_and_arrow:. It's exploring 3 problems:\n\n• What if visual connection could be declaratively expressed in HTML? \n• What if there was a tiny toolkit that enabled all kinds of connection\/arrows to be built? \n• How do we break arrows out from spatial canvases and enable them to used on any website?\nCurrently I'm prototyping some pre-built arrows\/connection: curved arrows, orthogonal edges, Xanadu links and hyperedges. But the library is also explicitly designed to be extensible so you can use your own layout algorithms or designs. Part of the extensibility means the ability to easily animate objects along the arrow (for all of those dataflow VPLs out there :stuck_out_tongue_winking_eye:) or add arbitrary labels\/annotations to arrows.\n\nGiven that connection is probably one of the most commonly used relationships in visual programming systems, I'm curious if there are any other types of arrows or functionality you would find useful in your own projects? Its not published to NPM yet, but the repo is <https:\/\/github.com\/Little-Languages\/quiver|here>.",
        "files": [
            {
                "id": "F0718E6CQJ2",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F0710H1P9RD",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "07f2G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the last month I've been working on an arrow toolkit for the web, called Quiver "
                            },
                            {
                                "type": "emoji",
                                "name": "bow_and_arrow",
                                "unicode": "1f3f9"
                            },
                            {
                                "type": "text",
                                "text": ". It's exploring 3 problems:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What if visual connection could be declaratively expressed in HTML? "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What if there was a tiny toolkit that enabled all kinds of connection\/arrows to be built? "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "How do we break arrows out from spatial canvases and enable them to used on any website?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCurrently I'm prototyping some pre-built arrows\/connection: curved arrows, orthogonal edges, Xanadu links and hyperedges. But the library is also explicitly designed to be extensible so you can use your own layout algorithms or designs. Part of the extensibility means the ability to easily animate objects along the arrow (for all of those dataflow VPLs out there "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue_winking_eye",
                                "unicode": "1f61c"
                            },
                            {
                                "type": "text",
                                "text": ") or add arbitrary labels\/annotations to arrows.\n\nGiven that connection is probably one of the most commonly used relationships in visual programming systems, I'm curious if there are any other types of arrows or functionality you would find useful in your own projects? Its not published to NPM yet, but the repo is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/Little-Languages\/quiver",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1714522401.546399",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1714523113.000000"
        },
        "client_msg_id": "63c44caf-624d-44eb-878a-58d4bef78c7b",
        "thread_ts": "1714522401.546399",
        "reply_count": 17,
        "reply_users_count": 5,
        "latest_reply": "1714953750.526669",
        "reply_users": [
            "U0378MDUG1Y",
            "U0123H7JRDM",
            "UGWUJUZHT",
            "UFEQUBNNT",
            "U067XHT91HV"
        ],
        "replies": [
            {
                "user": "U0378MDUG1Y",
                "ts": "1714526933.460569"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1714543280.040649"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1714547456.000569"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1714548624.218809"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1714548660.378639"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1714550964.795759"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1714552977.106549"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1714554681.814499"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1714554731.699959"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1714554759.520009"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1714561982.276649"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1714562028.880659"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1714609568.961889"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1714703067.957549"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1714721645.916529"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1714797090.876879"
            },
            {
                "user": "U067XHT91HV",
                "ts": "1714953750.526669"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05597GCDDK",
                    "U06BUK2M2RH",
                    "U05M5A8E0NT",
                    "U023V63MF6V",
                    "U85HCL7JP",
                    "US370TRJA",
                    "U013ZLJARC7",
                    "UMV4B97GT",
                    "UFQ1ZEJ0G"
                ],
                "count": 9
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "U06BUK2M2RH",
                    "UFEQUBNNT"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1714526933.460569",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1714542041.000000"
        },
        "client_msg_id": "3FCE9734-655E-43B6-9C1D-56DA72B92D0D",
        "text": "One of the deeper explorations is how to use these boundaries to orchestrate a bundle of arrows to reduce crossing other arrows or shapes, arrows that route with even spacing, etc. its interesting given all the arrows and their state in in the DOM",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714522401.546399",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+bOvP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the deeper explorations is how to use these boundaries to orchestrate a bundle of arrows to reduce crossing other arrows or shapes, arrows that route with even spacing, etc. its interesting given all the arrows and their state in in the DOM"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U067XHT91HV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1714543280.040649",
        "client_msg_id": "45E22F42-2459-4E25-AF20-CED4DE3C5B1A",
        "text": "Really awesome! A nice addition would be data-ports on the boxes and cubic bezier curves between these ports instead of arcs. A hack to make line-crossings more clearly would be drawing double lines.. where one of the two lines would be slightly thicker and have the same color as the background (I use that trick myself).\n\nVery nice to see the use of web-components! I believe that we finally will see a bigger use of these once react-19 is released.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714522401.546399",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2wahN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really awesome! A nice addition would be data-ports on the boxes and cubic bezier curves between these ports instead of arcs. A hack to make line-crossings more clearly would be drawing double lines.. where one of the two lines would be slightly thicker and have the same color as the background (I use that trick myself).\n\nVery nice to see the use of web-components! I believe that we finally will see a bigger use of these once react-19 is released."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06K0MA31T9",
        "type": "message",
        "ts": "1714544838.011969",
        "client_msg_id": "5485dde1-694c-4a97-b734-abc8e84387ae",
        "text": "Another day, another module. Learning some things about web components this time. <https:\/\/github.com\/bicycle-codes\/progress-indicator>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gb73ca0b9573",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b73ca0b9573d2367f6508714f8a871d6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0004-72.png",
            "first_name": "nichoth",
            "real_name": "nichoth",
            "display_name": "nichoth",
            "team": "T5TCAFTA9",
            "name": "nichoth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FNcX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another day, another module. Learning some things about web components this time. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/bicycle-codes\/progress-indicator"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]