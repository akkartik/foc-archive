[
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1546167729.190400",
        "client_msg_id": "a497875f-ee05-4f29-9034-a3a332fd4097",
        "text": "We should also consider that an appropriate programming environment is not only about what we build, but also about how we deal with an existing system once we have it. How debuggable is it? How evolvable is it? How explainable is it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546142699.167700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FWsmP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We should also consider that an appropriate programming environment is not only about what we build, but also about how we deal with an existing system once we have it. How debuggable is it? How evolvable is it? How explainable is it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1546190531.190900",
        "client_msg_id": "38a6cce8-6906-4259-a5e7-4d1ff58ae271",
        "text": "<https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1546130568160100?thread_ts=1545983608.108800&amp;cid=C5T9GPWFL>\n\nInform 7 uses something closer to English grammar, which I guess is what you mean by human like.  The problem is, although it's easier to read for non-programmers and English speakers in general, it's hard to write because you end up in an uncanny valley where English grammar rules and simpler imperative programming language rules get confused. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545983608.108800",
        "parent_user_id": "UEQ6M68H0",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1546130568160100?thread_ts=1545983608.108800&amp;cid=C5T9GPWFL",
                "fallback": "[December 29th, 2018 4:42 PM] gabrielssons: Our eyes have most bandwidth so it is natural that visuals tools will become more popular. I still think text will be important because text is basically speech on paper and we speak a lot every day and the mouth and ears  are good communicators but ears and mouth do not analyze as well as eyes. Our biggest problem are that the code today is not  humanlike. So everyone has to learn a new language in order to speak with the computer. I think we should use more grammar of more humanlike languages to create new programming languages. Programming is difficult  through text, but so is Chinese for a English speaking person...",
                "ts": "1546130568.160100",
                "author_id": "UF3V37GCE",
                "author_subname": "staffan Gabrielsson Berglof",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "Our eyes have most bandwidth so it is natural that visuals tools will become more popular. I still think text will be important because text is basically speech on paper and we speak a lot every day and the mouth and ears  are good communicators but ears and mouth do not analyze as well as eyes. Our biggest problem are that the code today is not  humanlike. So everyone has to learn a new language in order to speak with the computer. I think we should use more grammar of more humanlike languages to create new programming languages. Programming is difficult  through text, but so is Chinese for a English speaking person...",
                "author_name": "staffan Gabrielsson Berglof",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UF3V37GCE",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/34e41bb4639070e126202725934bc86f.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F0180%2Fimg%2Favatars%2Fava_0001-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1546130568160100?thread_ts=1545983608.108800&amp;cid=C5T9GPWFL",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Xci",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1546130568160100?thread_ts=1545983608.108800&amp;cid=C5T9GPWFL",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1546130568160100?thread_ts=1545983608.108800&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "\n\nInform 7 uses something closer to English grammar, which I guess is what you mean by human like.  The problem is, although it's easier to read for non-programmers and English speakers in general, it's hard to write because you end up in an uncanny valley where English grammar rules and simpler imperative programming language rules get confused."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1546192687.191300",
        "client_msg_id": "39cdc26e-7e26-43f7-8673-3a9a72aeac6b",
        "text": "Unreal and Unity are the present of programming for me :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546142699.167700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=V0R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unreal and Unity are the present of programming for me :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1546192902.191500",
        "client_msg_id": "212732f4-27de-456a-9303-c29a87c72cb4",
        "text": "And have been (in various incarnations) for most of my career",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546142699.167700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And have been (in various incarnations) for most of my career"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1546212921.191900",
        "client_msg_id": "51a91131-c6d9-48ab-9dbe-9bf8d423bdc8",
        "text": "<@UC2A2ARPT> said\n&gt; The kind of immediate feedback you get from wet paint hitting the canvas is the same kind of feedback you get from your finger hitting a key causing a glyph to show up on the screen.\n\nYes, I did a poor job explaining what I was trying to get at. It's related to what you describe as 'visibility' - the whole composition is immediately updated and visible when the paint goes on the canvas (at least from the current perspective). Imagine painting through a peephole, only seeing a part of the painting and having to imagine the full composition. In the specific aspect of *visibility* at least, it seems one full composition should be always visible when being updated.\nOnto programming.. the code if visible and updated live, but code isn't the full composition. The full composition is some behavior spread out over time and within a slice of all possibilities. We imagine it (human simulating the machine) and it is not visible in the editing medium. I think it's the idea of reducing\/eliminating mental simulation of the computer that I find more important than 'feedback'.\n\n&gt; we should choose what sorts of that feedback we really want,\nFully agree with this. I think choice of 'viewing perspective' should be natural in the future medium of programming - one simply cannot process all possible perspectives available anyway.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vx4+A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " said"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The kind of immediate feedback you get from wet paint hitting the canvas is the same kind of feedback you get from your finger hitting a key causing a glyph to show up on the screen."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes, I did a poor job explaining what I was trying to get at. It's related to what you describe as 'visibility' - the whole composition is immediately updated and visible when the paint goes on the canvas (at least from the current perspective). Imagine painting through a peephole, only seeing a part of the painting and having to imagine the full composition. In the specific aspect of "
                            },
                            {
                                "type": "text",
                                "text": "visibility",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at least, it seems one full composition should be always visible when being updated.\nOnto programming.. the code if visible and updated live, but code isn't the full composition. The full composition is some behavior spread out over time and within a slice of all possibilities. We imagine it (human simulating the machine) and it is not visible in the editing medium. I think it's the idea of reducing\/eliminating mental simulation of the computer that I find more important than 'feedback'.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we should choose what sorts of that feedback we really want,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fully agree with this. I think choice of 'viewing perspective' should be natural in the future medium of programming - one simply cannot process all possible perspectives available anyway."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1546213388.192100",
        "client_msg_id": "969a126a-e024-47cf-8d1a-74fe9192af9f",
        "text": "<@U5STGTB3J> wrote\n&gt; It’s funny how text formats enjoy such a special treatment\n\nYes. I'd like to draw a distinction between text as a user interface and text files as a storage\/versioning format. Note that spreadsheets are text heavy user interfaces but poorly supported by so called 'text oriented' tools such as Git. Specifically in files there's the notion of a structure built on *lines* of text. It's a very hard ceiling in the current ecosystem. Even if we say 'text is great as programming language', we don't have to accept 'large blobs of text' are the best storage format (e.g. you could parse and store\/version a graph structure, or store individual cells, etc.). I have a couple of write-ups specifically around plain text files starting here: <https:\/\/shalabh.com\/programmable-systems\/plain-text.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545983608.108800",
        "parent_user_id": "UEQ6M68H0",
        "attachments": [
            {
                "title": " Stuck with Plain Text  ",
                "title_link": "https:\/\/shalabh.com\/programmable-systems\/plain-text.html",
                "text": "A specific problem with plain text.",
                "fallback": " Stuck with Plain Text  ",
                "from_url": "https:\/\/shalabh.com\/programmable-systems\/plain-text.html",
                "service_name": "shalabh.com",
                "id": 1,
                "original_url": "https:\/\/shalabh.com\/programmable-systems\/plain-text.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "umGW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " wrote"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s funny how text formats enjoy such a special treatment"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYes. I'd like to draw a distinction between text as a user interface and text files as a storage\/versioning format. Note that spreadsheets are text heavy user interfaces but poorly supported by so called 'text oriented' tools such as Git. Specifically in files there's the notion of a structure built on "
                            },
                            {
                                "type": "text",
                                "text": "lines",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of text. It's a very hard ceiling in the current ecosystem. Even if we say 'text is great as programming language', we don't have to accept 'large blobs of text' are the best storage format (e.g. you could parse and store\/version a graph structure, or store individual cells, etc.). I have a couple of write-ups specifically around plain text files starting here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/shalabh.com\/programmable-systems\/plain-text.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD43R8ZFV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1546213974.196500",
        "client_msg_id": "2AAD80DC-C3CD-4180-ACD7-3613C4E571F6",
        "text": "<@UBSMEUXAA> When you say they “are the present” for you that’s exactly what I mean — maybe you’re already experiencing today what many of us are still looking for in other areas of our field. Have you ever looked at your tools from that perspective? What should today’s regular programming IDEs take as inspiration from Unreal and Unity? And what does still not feel like an improvement?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546142699.167700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aURD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " When you say they “are the present” for you that’s exactly what I mean — maybe you’re already experiencing today what many of us are still looking for in other areas of our field. Have you ever looked at your tools from that perspective? What should today’s regular programming IDEs take as inspiration from Unreal and Unity? And what does still not feel like an improvement?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1546214695.205900",
        "client_msg_id": "DF99B9C5-7077-47CD-A5CB-BB7862459322",
        "text": "Or are you <@UBSMEUXAA> just saying that they are what you use professionally?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1546142699.167700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rUQf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or are you "
                            },
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " just saying that they are what you use professionally?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1546214997.208500",
        "client_msg_id": "4391D4A5-EF2A-4271-AEA3-156EA3292D9A",
        "text": "<@U8A5MS6R1> Thanks for bringing up the difference between storage format and user interface! That is an important distinction. Think about it, we even have about 100 individual hardware buttons for specific letters of our alphabet — that’s how special text is treated in the user interface.\n\nI’m more interested in the user interface side currently, and if I understand correctly, <@U8A5MS6R1> and <@UDJ2TKB99> at least have some strong opinions about the storage side.\n\nOf course, these are not as easy to separate as it looks. Text editors have to do the transformation from byte stream to symbols\/glyphs to allow any meaningful manipulation, but isn’t that exactly the thing all data formats need — an editor that allows us to read and manipulate the stored data?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545983608.108800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OP40h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for bringing up the difference between storage format and user interface! That is an important distinction. Think about it, we even have about 100 individual hardware buttons for specific letters of our alphabet — that’s how special text is treated in the user interface.\n\nI’m more interested in the user interface side currently, and if I understand correctly, "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UDJ2TKB99"
                            },
                            {
                                "type": "text",
                                "text": " at least have some strong opinions about the storage side.\n\nOf course, these are not as easy to separate as it looks. Text editors have to do the transformation from byte stream to symbols\/glyphs to allow any meaningful manipulation, but isn’t that exactly the thing all data formats need — an editor that allows us to read and manipulate the stored data?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1546216747.208700",
        "client_msg_id": "074dd95f-4ebc-4174-ab33-34aff847443e",
        "text": "&gt; the whole composition is immediately updated and visible when the paint goes on the canvas (at least from the current perspective)\n\nTrue, but the artist's _understanding_ of the work isn't updated immediately. You often need to spend some time away from the painting, and come back to it later \"with fresh eyes\" to properly appreciate the _meaning_ of any changes you made. Same with music — when I'm working on a song, I'm in a very particular mindset, one which is not amenable to appreciating whether or not the music is _any good_. The sort of feedback I get from throwing some additional paint on the canvas, or tweaking a melodic progression, is akin to checking whether my tests are passing — I can tell whether the things I've done are _correct_ or _erroneous_, but I can't actually _run_ the painting or _run_ the music to appreciate whether it _works the way I intended_ until after some time has passed.\n\nMy point is that.. when we programmers talk about immediacy, we love the example of artists getting immediate feedback. But I contend that it's a faulty comparison. Artists don't get immediate feedback about the most important part of their work: whether the work is effective or not. They do get immediate feedback about _some_ technical \/ mechanical aspects, though even this doesn't hold for some art forms, like pottery, where you need to bake the clay in a kiln before you know if it even survives that part of the process.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pMkz",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the whole composition is immediately updated and visible when the paint goes on the canvas (at least from the current perspective)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nTrue, but the artist's "
                            },
                            {
                                "type": "text",
                                "text": "understanding",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the work isn't updated immediately. You often need to spend some time away from the painting, and come back to it later \"with fresh eyes\" to properly appreciate the "
                            },
                            {
                                "type": "text",
                                "text": "meaning",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of any changes you made. Same with music — when I'm working on a song, I'm in a very particular mindset, one which is not amenable to appreciating whether or not the music is "
                            },
                            {
                                "type": "text",
                                "text": "any good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The sort of feedback I get from throwing some additional paint on the canvas, or tweaking a melodic progression, is akin to checking whether my tests are passing — I can tell whether the things I've done are "
                            },
                            {
                                "type": "text",
                                "text": "correct",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "erroneous",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but I can't actually "
                            },
                            {
                                "type": "text",
                                "text": "run",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the painting or "
                            },
                            {
                                "type": "text",
                                "text": "run",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the music to appreciate whether it "
                            },
                            {
                                "type": "text",
                                "text": "works the way I intended",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " until after some time has passed.\n\nMy point is that.. when we programmers talk about immediacy, we love the example of artists getting immediate feedback. But I contend that it's a faulty comparison. Artists don't get immediate feedback about the most important part of their work: whether the work is effective or not. They do get immediate feedback about "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " technical \/ mechanical aspects, though even this doesn't hold for some art forms, like pottery, where you need to bake the clay in a kiln before you know if it even survives that part of the process."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1546216881.208900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1546217742.000000"
        },
        "client_msg_id": "560f9082-22a5-4977-9ca2-4aec97795e9c",
        "text": "Without giving it all that much thought, I think the sort of immediacy we're looking for is what you get in improvisation. When you're playing improv games, jamming\/soloing, free dancing, etc.. you are going straight from action through to final result, with no stop in the middle for editing or reflection, and no tolerance for any part of the process imposing a delay. Now, one might counter \"well, programming is of course going to have the opportunity for editing, since it's not performative\" — but look at the tools used for live coding! They are designed to be used in a performative way, and they often have a great story around liveness\/immediacy, because they _have to_. I think there's a stronger link between liveness\/immediacy and improv than the one we're trying to draw between liveness and other kinds of art. So when we're craving more interactivity and rich feedback from the computer, and we're looking longingly at artists, I think we might want to focus on improv art forms in particular, since they seem to be the only art forms that have a rapid feedback cycle by necessity. If we all start emulating painting, we're probably going to end up emulating the wrong kinds of liveness. (Why? Well, imagine if we emulated pottery)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FKtjY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Without giving it all that much thought, I think the sort of immediacy we're looking for is what you get in improvisation. When you're playing improv games, jamming\/soloing, free dancing, etc.. you are going straight from action through to final result, with no stop in the middle for editing or reflection, and no tolerance for any part of the process imposing a delay. Now, one might counter \"well, programming is of course going to have the opportunity for editing, since it's not performative\" — but look at the tools used for live coding! They are designed to be used in a performative way, and they often have a great story around liveness\/immediacy, because they "
                            },
                            {
                                "type": "text",
                                "text": "have to",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I think there's a stronger link between liveness\/immediacy and improv than the one we're trying to draw between liveness and other kinds of art. So when we're craving more interactivity and rich feedback from the computer, and we're looking longingly at artists, I think we might want to focus on improv art forms in particular, since they seem to be the only art forms that have a rapid feedback cycle by necessity. If we all start emulating painting, we're probably going to end up emulating the wrong kinds of liveness. (Why? Well, imagine if we emulated pottery)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UD512T5AT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1546234683.209600",
        "client_msg_id": "84657bde-211a-4b7e-9cf1-cbf92bfb3126",
        "text": "I wouldn't say I have 'strong' opinions, but more like negative opinions of the status quo, with only vague ideas of better systems. (I'm not just anti text file but also anti file in general.) I believe storage and UI are not easy to separate _in the current systems_. Text editors do parse homogenized byte arrays into richer structures. They partially (and poorly) duplicate functionality already implemented in the language parsers. Why is this pervasive reimplementation needed? Can we have a storage substrate that can preserve the rich structures instead of homogenizing them and then having to globally distribute the parsing knowledge out of band?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545983608.108800",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xyHwS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wouldn't say I have 'strong' opinions, but more like negative opinions of the status quo, with only vague ideas of better systems. (I'm not just anti text file but also anti file in general.) I believe storage and UI are not easy to separate "
                            },
                            {
                                "type": "text",
                                "text": "in the current systems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Text editors do parse homogenized byte arrays into richer structures. They partially (and poorly) duplicate functionality already implemented in the language parsers. Why is this pervasive reimplementation needed? Can we have a storage substrate that can preserve the rich structures instead of homogenizing them and then having to globally distribute the parsing knowledge out of band?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1546236497.209800",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1546237328.000000"
        },
        "client_msg_id": "4f293057-7709-4331-9a5b-1cdf7a90ea08",
        "text": "<@UC2A2ARPT> - I realize I've been pulling the conversation to my earlier, narrow (engineering?) perspective of the creation process (in spite of your note about the 'broader space' in the first post).\n\n&gt; True, but the artist's _understanding_ of the work isn't updated immediately.\n&gt; Artists don't get immediate feedback about the most important part of their work: whether the work is effective or not.\n\nGreat points. There's been times in programming when the next morning I realize I was moving correctly but in the wrong direction. I'm wondering how one could get a sense of something being effective.\n\nImprov forms are interesting because there's the back-and-forth conversational aspect. Even live compiler feedback is more like a partner that only responds with 'yes' or 'no'. Perhaps richer responses are possible if instead of submitting whole programs, we build incrementally by sending one message at a time and the computer responding with a wide range of possibilities for us to explore next.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zR9Ta",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " - I realize I've been pulling the conversation to my earlier, narrow (engineering?) perspective of the creation process (in spite of your note about the 'broader space' in the first post).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "True, but the artist's "
                            },
                            {
                                "type": "text",
                                "text": "understanding",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the work isn't updated immediately.\nArtists don't get immediate feedback about the most important part of their work: whether the work is effective or not."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nGreat points. There's been times in programming when the next morning I realize I was moving correctly but in the wrong direction. I'm wondering how one could get a sense of something being effective.\n\nImprov forms are interesting because there's the back-and-forth conversational aspect. Even live compiler feedback is more like a partner that only responds with 'yes' or 'no'. Perhaps richer responses are possible if instead of submitting whole programs, we build incrementally by sending one message at a time and the computer responding with a wide range of possibilities for us to explore next."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1546237935.219200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1546238263.000000"
        },
        "client_msg_id": "E2231DA9-4F82-4A06-A2F7-D8593F560590",
        "text": "I’m glad you mentioned “the next morning”. That’s one aspect that’s definitely shared between programming and all the arts — reflection, outside the heat of the moment. My hunch is that the arts have a richer variety of “next morning”-style means for reflection (eg: the group crit idea mentioned in the other thread), but that might be because it’s unfair to compare _all_ the arts to programming.\n\nIn any case, that “build incrementally” process is a big thing in live coding (I’d argue, by necessity). But the “responding with a wide range of possibilities” isn’t really something that I’ve ever seen. I’ve heard people talk about ideas like this, but never framed in terms of improv. I really like the idea of a programming system designed to be like an improv partner, throwing out ideas for you to “Yes, and...”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "07T7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m glad you mentioned “the next morning”. That’s one aspect that’s definitely shared between programming and all the arts — reflection, outside the heat of the moment. My hunch is that the arts have a richer variety of “next morning”-style means for reflection (eg: the group crit idea mentioned in the other thread), but that might be because it’s unfair to compare "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the arts to programming.\n\nIn any case, that “build incrementally” process is a big thing in live coding (I’d argue, by necessity). But the “responding with a wide range of possibilities” isn’t really something that I’ve ever seen. I’ve heard people talk about ideas like this, but never framed in terms of improv. I really like the idea of a programming system designed to be like an improv partner, throwing out ideas for you to “Yes, and...”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1546238086.220300",
        "client_msg_id": "031F5C32-9A5A-44B4-B136-CF6E85C43427",
        "text": "Whoops — the “group crit” thread was on twitter: <https:\/\/twitter.com\/spiralganglion\/status\/1078365740703526912>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1545891251.087800",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/spiralganglion|@spiralganglion>: <https:\/\/twitter.com\/Glench|@Glench> One of the first activities you do in a (good) post-secondary art or design class is a group crit, where students have their work openly discussed and critiqued by their classmates. I never participated in any sort of crit in my comp sci classes. Imagine — a group crit of Knuth!",
                "ts": 1545937402,
                "author_name": "Ivan Reese",
                "author_link": "https:\/\/twitter.com\/spiralganglion\/status\/1078365740703526912",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/955182005339279361\/kvTeVu_g_normal.jpg",
                "author_subname": "@spiralganglion",
                "text": "<https:\/\/twitter.com\/Glench|@Glench> One of the first activities you do in a (good) post-secondary art or design class is a group crit, where students have their work openly discussed and critiqued by their classmates. I never participated in any sort of crit in my comp sci classes. Imagine — a group crit of Knuth!",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/spiralganglion\/status\/1078365740703526912",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/spiralganglion\/status\/1078365740703526912",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hfq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Whoops — the “group crit” thread was on twitter: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1078365740703526912"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]