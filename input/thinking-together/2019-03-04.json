[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1551688861.128800",
        "client_msg_id": "018D9C27-0E6E-437F-8588-C5BA0B98C1A0",
        "text": "<@UEQ6M68H0> Are you just using Unix’ `wc` to count words in code?\n\nI find lines of code practical and acceptable, if comments and empty lines are stripped (like `cloc` does), and coding style with one statement per line can be assumed. But I’m super interested in other (simple) ways to measure code complexity, so counting words sounds intriguing.\n\nAnd is the source for your progression of apps available online (GitHub maybe) to take a look?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7jJx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Are you just using Unix’ "
                            },
                            {
                                "type": "text",
                                "text": "wc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to count words in code?\n\nI find lines of code practical and acceptable, if comments and empty lines are stripped (like "
                            },
                            {
                                "type": "text",
                                "text": "cloc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does), and coding style with one statement per line can be assumed. But I’m super interested in other (simple) ways to measure code complexity, so counting words sounds intriguing.\n\nAnd is the source for your progression of apps available online (GitHub maybe) to take a look?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1551691280.129300",
        "client_msg_id": "4e4b0ca1-c63d-4dd6-b870-24ac89f9da96",
        "text": "where is the podcast with Jonathan Edwards?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551691280.129300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1551779761.169000",
        "reply_users": [
            "U5TCAFTD3",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1551694329.129900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1551779761.169000"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1551796147.000000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WNE7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "where is the podcast with Jonathan Edwards?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1551691462.129400",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1551691472.000000"
        },
        "client_msg_id": "ffab6faa-ba20-4fb1-a533-f99041b338fa",
        "text": "i am using the macintosh program called \"TextWrangler\", which is very similar to NotePad++. not sure if it counts word exactly the same as wc.  I haven't posted all of the apps yet, but i did post the first two (clock and wristwatch). Yes of course you have to strip comments out before counting the words.  You can't use lines because then you get a huge advantage for horizontal languages like Red which would unfairly lead you to the conclusion that Red programs are 1\/5th that of other languages, which in reality they are merely very horizontal with lots of run on\/ chaining operators which is reminiscent of APL.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SDKU4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i am using the macintosh program called \"TextWrangler\", which is very similar to NotePad++. not sure if it counts word exactly the same as wc.  I haven't posted all of the apps yet, but i did post the first two (clock and wristwatch). Yes of course you have to strip comments out before counting the words.  You can't use lines because then you get a huge advantage for horizontal languages like Red which would unfairly lead you to the conclusion that Red programs are 1\/5th that of other languages, which in reality they are merely very horizontal with lots of run on\/ chaining operators which is reminiscent of APL."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1551691530.129700",
        "client_msg_id": "fb845fbf-9f0c-48ed-b384-b14e06296482",
        "text": "i am not familiar with cloc, that isn't a command line tool in my OSX\/Unix command line, must be a tool from some other OS.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oeG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i am not familiar with cloc, that isn't a command line tool in my OSX\/Unix command line, must be a tool from some other OS."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1551694329.129900",
        "client_msg_id": "bfb6f970-666d-418a-ae15-5de1199fcdd9",
        "text": "<https:\/\/futureofcoding.org\/episodes\/037>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551691280.129300",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PUf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/037"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551709250.144800",
        "client_msg_id": "7e59c9fa-7d80-4c54-894d-27dec3b3e6af",
        "text": "`wc` works for me!  As a rough measure.  One problem is that line counts inevitably go up with refactoring.  But what I'd really like is a measure of whether an abstraction is actually carrying its weight vs creating useless indirection.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ppeVN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " works for me!  As a rough measure.  One problem is that line counts inevitably go up with refactoring.  But what I'd really like is a measure of whether an abstraction is actually carrying its weight vs creating useless indirection."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1551709704.146000",
        "client_msg_id": "77014054-EB07-437B-835E-B7CE509F4415",
        "text": "Cool, thanks for explaining your process, <@UEQ6M68H0>! `cloc` is just a simple script you can easily install through homebrew. \n\nI guess both LOC and word approaches are far from an exact science. I can see why counting words is more useful when you deal with smaller snippets of code. I don’t know Red, and I suppose that both language features and coding style are a consideration for the word-based approach too, as for instance `for (int i = 0; i &lt;= 100; i++) {` and `for(int i=0;i&lt;=100;i++){ ` are 10 vs. 2 words, if just using spaces as delimiter (what `wc` does by default). \n\nBoth are a good examples for applying a lower-level concept that considers the data to just be text for a domain where the data actually has higher-level structure. What we get is a much simpler (and more commonly available) tool, which also turns out to be rather imprecise for the domain were applying it to. Still good enough for many use cases, especially if language and style can be assumed stable across comparisons.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZjhUP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool, thanks for explaining your process, "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": "! "
                            },
                            {
                                "type": "text",
                                "text": "cloc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is just a simple script you can easily install through homebrew. \n\nI guess both LOC and word approaches are far from an exact science. I can see why counting words is more useful when you deal with smaller snippets of code. I don’t know Red, and I suppose that both language features and coding style are a consideration for the word-based approach too, as for instance "
                            },
                            {
                                "type": "text",
                                "text": "for (int i = 0; i <= 100; i++) {",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "for(int i=0;i<=100;i++){ ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are 10 vs. 2 words, if just using spaces as delimiter (what "
                            },
                            {
                                "type": "text",
                                "text": "wc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does by default). \n\nBoth are a good examples for applying a lower-level concept that considers the data to just be text for a domain where the data actually has higher-level structure. What we get is a much simpler (and more commonly available) tool, which also turns out to be rather imprecise for the domain were applying it to. Still good enough for many use cases, especially if language and style can be assumed stable across comparisons."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551710178.148100",
        "client_msg_id": "89ccb7fb-7bd5-4e19-b831-a2f671a5a8e7",
        "text": "I honestly think `wc` only works when coding style is fixed.  And it certainly has been predictive of our larger rewrites.  Those that include a 2x+ reduction tend to be kept and those that end up with a 2x+ increase tend to get abandoned for the old system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550761704.004800",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sF4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I honestly think "
                            },
                            {
                                "type": "text",
                                "text": "wc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " only works when coding style is fixed.  And it certainly has been predictive of our larger rewrites.  Those that include a 2x+ reduction tend to be kept and those that end up with a 2x+ increase tend to get abandoned for the old system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551710746.150300",
        "client_msg_id": "4aae9229-a142-42a7-847c-d113ac18679e",
        "text": "Me too.  Great job <@U6KQ2S410> at being full and nuanced in articulating your perspective.  Can't wait to try out Subtext Alpha.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "REPkl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me too.  Great job "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " at being full and nuanced in articulating your perspective.  Can't wait to try out Subtext Alpha."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "arrow_up",
                "users": [
                    "UD4Q9LT52",
                    "UDQLP2XUL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1551711496.150500",
        "client_msg_id": "accde3d0-4ff0-4069-8214-f436ce64730a",
        "text": "Looking forward to listening!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vqo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looking forward to listening!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1551713970.151300",
        "client_msg_id": "c219baf6-bb8f-4294-9f78-c32da28b0ec3",
        "text": "Is there a way to listen at 2x speed?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551713970.151300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1551738810.152700",
        "reply_users": [
            "U85HCL7JP",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "U85HCL7JP",
                "ts": "1551714120.152100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1551738810.152700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3URN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way to listen at 2x speed?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1551714120.152100",
        "client_msg_id": "552FFB19-679F-4783-AE23-67C20185B50B",
        "text": "I use the podcast app in iOS for listening at 2x",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551713970.151300",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OMk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use the podcast app in iOS for listening at 2x"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGR73CAY"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1551738810.152700",
        "client_msg_id": "94548695-a36d-4d3a-9046-064e138f8799",
        "text": "I use Overcast, which in addition to a speed slider has a Smart Speed feature that cuts out silent pauses between words and sentences. I do audio engineering myself, and can vouch for Smart Speed sounding really good.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551713970.151300",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=\/in+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use Overcast, which in addition to a speed slider has a Smart Speed feature that cuts out silent pauses between words and sentences. I do audio engineering myself, and can vouch for Smart Speed sounding really good."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1551738841.152900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1551738956.000000"
        },
        "client_msg_id": "46ab57d4-f2e8-4f85-b0c1-b73e293422f7",
        "text": "Some random notes as I read the transcript (<https:\/\/futureofcoding.org\/episodes\/037>):\n\n• His notion of 'simplicity' is focused on ease of learning.\n\n_\"I'm focusing on those kinds of problems that you would want to do with a casual programming, small scale simple problems solved simply. Application programming is the word for this. It seems to have fallen out of use, though, right? There used to be this clear separation between application and system programming... that there should be two domains of intensity of programming.\"_\n\nArguably what happened is that application programming became hard as single applications started having lots and lots of users. It's not that we need to add more terms for different kinds of programming, rather to notice that using the same app as lots of other people gradually causes you to descend into living in a _favela_.\n\n• There have been many prototypes exploring many different ideas, but one constant through them all is a deep faith in structured editing.\n\n• _\"What [abstractions] would be the easiest to visualize? Let's say you're programming with continuations and all these category theoretic abstractions that people love these days, okay? Trying to materialize those into UI is a Herculean effort.\"_\n\n• _\"We've got to figure out a way of funding the engineering needed to redo stuff. We just can't keep adding layers.\"_ <@U6KQ2S410> do you have thoughts on how your current work connects up with this? Is redoing stuff going to address the expert use cases as well? I'm interpreting it as rethinking lower levels of the stack so that say `ls` has fewer commandline flags or something. But that seems to require thinking through how current experts operate?\n\n• What to expect from his next project, Subtext Alpha: _\"It's a full programming system, a full graphical environment that you program in. The text shows up on the screen, but there's no text files. There is a textual syntax. It turns out that really, really is a handy way of defining and building a language, but the textual syntax is only designed to support simple examples and test cases. It's not designed to support building and editing and incrementally modifying code. It doesn't support everything you can do in the language.\"_\n\n• _\"I think that I'm one of the oldest young programmers.\"_ [Ran into computers in 1970 at the age of 13.]\n• DEC is the company that outcompeted Data General, the company depicted in _Soul of a New Machine_. (That book is highly recommended.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551672178.123100",
        "parent_user_id": "UD4Q9LT52",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZAm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some random notes as I read the transcript ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/episodes\/037"
                            },
                            {
                                "type": "text",
                                "text": "):\n\n• His notion of 'simplicity' is focused on ease of learning.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "\"I'm focusing on those kinds of problems that you would want to do with a casual programming, small scale simple problems solved simply. Application programming is the word for this. It seems to have fallen out of use, though, right? There used to be this clear separation between application and system programming... that there should be two domains of intensity of programming.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nArguably what happened is that application programming became hard as single applications started having lots and lots of users. It's not that we need to add more terms for different kinds of programming, rather to notice that using the same app as lots of other people gradually causes you to descend into living in a "
                            },
                            {
                                "type": "text",
                                "text": "favela",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n• There have been many prototypes exploring many different ideas, but one constant through them all is a deep faith in structured editing.\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "\"What [abstractions] would be the easiest to visualize? Let's say you're programming with continuations and all these category theoretic abstractions that people love these days, okay? Trying to materialize those into UI is a Herculean effort.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "\"We've got to figure out a way of funding the engineering needed to redo stuff. We just can't keep adding layers.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " do you have thoughts on how your current work connects up with this? Is redoing stuff going to address the expert use cases as well? I'm interpreting it as rethinking lower levels of the stack so that say "
                            },
                            {
                                "type": "text",
                                "text": "ls",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has fewer commandline flags or something. But that seems to require thinking through how current experts operate?\n\n• What to expect from his next project, Subtext Alpha: "
                            },
                            {
                                "type": "text",
                                "text": "\"It's a full programming system, a full graphical environment that you program in. The text shows up on the screen, but there's no text files. There is a textual syntax. It turns out that really, really is a handy way of defining and building a language, but the textual syntax is only designed to support simple examples and test cases. It's not designed to support building and editing and incrementally modifying code. It doesn't support everything you can do in the language.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "\"I think that I'm one of the oldest young programmers.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " [Ran into computers in 1970 at the age of 13.]\n• DEC is the company that outcompeted Data General, the company depicted in "
                            },
                            {
                                "type": "text",
                                "text": "Soul of a New Machine",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (That book is highly recommended.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1551740038.163300",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1551740128.000000"
        },
        "client_msg_id": "0f7dcfb1-d255-4195-ac7b-4280d5578e46",
        "text": "Just finished watching it (some opinionated notes at <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1551738841152900?thread_ts=1551672178.123100&amp;cid=C5T9GPWFL>), and one thing it got me thinking about again is this \"idea maze\" for different potential paths to get \"to\" the future of programming that I've been noodling on for a couple of weeks (<https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1550105989048100?thread_ts=1550090952.045000&amp;cid=C5T9GPWFL>). So some new ideas for questions to ask ourselves that may act as a \"sorting hat\" to get us collaborating with like-minded people:\n\n• _Optimizing for learnability vs power once learned._ There's lots of overlap between these categories, things that would work for either side, and that's ok. But what's your fundamental goal\/intention?\n\n• _Simple vs complex use-cases._ (Jonathan Edwards refers to this in a couple of ways in the above interview. On the one hand, focusing on how people learn programming or new tools vs how experts use tools. There he prefers simple use cases. The experience of learning is anything but simple, but the programs beginners try to write are typically simpler than what experts try to do. On the other hand, Jonathan also draws a distinction between people supporting just \"canned parameterizable components\" and \"full on programming\". So his approach seems to be to go as simple as possible but not so simple that you lose the essence of programming. There may be other ways to slice this dimension.)\n\n• _Adding new layers to the stack vs redoing existing layers._ I suspect any new prototype has to start out building at the top, but is the intention to eventually burrow down? (It seems to be Jonathan's intention, though it wasn't really clear what the plan is to get there. Perhaps the attempts at creating new institutions fit here, hoping to inspire others to run with prototypes, retrofitting them back into existing stacks? I'm skeptical that existing power users can be relied upon to make truly deconstructive moves on a tool or layer that they're fluent with. The incentives don't work.)\n\nAnyway, that's a few more bends in the idea maze. I'd love for others to add to this list, going beyond this particular interview. (My previous comment linked above had 4 questions as well, with one point repeated here.)\n\n\/cc <@U6KQ2S410> <@UD3AK9JRF>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just finished watching it (some opinionated notes at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1551738841152900?thread_ts=1551672178.123100&amp;cid=C5T9GPWFL",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1551738841152900?thread_ts=1551672178.123100&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "), and one thing it got me thinking about again is this \"idea maze\" for different potential paths to get \"to\" the future of programming that I've been noodling on for a couple of weeks ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1550105989048100?thread_ts=1550090952.045000&amp;cid=C5T9GPWFL",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1550105989048100?thread_ts=1550090952.045000&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "). So some new ideas for questions to ask ourselves that may act as a \"sorting hat\" to get us collaborating with like-minded people:\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "Optimizing for learnability vs power once learned.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " There's lots of overlap between these categories, things that would work for either side, and that's ok. But what's your fundamental goal\/intention?\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "Simple vs complex use-cases.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (Jonathan Edwards refers to this in a couple of ways in the above interview. On the one hand, focusing on how people learn programming or new tools vs how experts use tools. There he prefers simple use cases. The experience of learning is anything but simple, but the programs beginners try to write are typically simpler than what experts try to do. On the other hand, Jonathan also draws a distinction between people supporting just \"canned parameterizable components\" and \"full on programming\". So his approach seems to be to go as simple as possible but not so simple that you lose the essence of programming. There may be other ways to slice this dimension.)\n\n• "
                            },
                            {
                                "type": "text",
                                "text": "Adding new layers to the stack vs redoing existing layers.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I suspect any new prototype has to start out building at the top, but is the intention to eventually burrow down? (It seems to be Jonathan's intention, though it wasn't really clear what the plan is to get there. Perhaps the attempts at creating new institutions fit here, hoping to inspire others to run with prototypes, retrofitting them back into existing stacks? I'm skeptical that existing power users can be relied upon to make truly deconstructive moves on a tool or layer that they're fluent with. The incentives don't work.)\n\nAnyway, that's a few more bends in the idea maze. I'd love for others to add to this list, going beyond this particular interview. (My previous comment linked above had 4 questions as well, with one point repeated here.)\n\n\/cc "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1551740440.165800",
        "client_msg_id": "04056225-bb98-4a6e-8901-7c35e9a12280",
        "text": "One alternative to an idea maze for sorting ourselves may be for each of us to list principles, so that we can build up some sort of adjacency matrix to figure out who overlaps most with us. Here's a list for myself I came up with after chatting with <@UD3AK9JRF> last week, trying to be opinionated rather than bland:\n\n• Longevity over adoption.\n• Implementation matters.\n   - Transparency over abstraction.\n   - Minimize dependencies. No, _really_.\n   - Minimize number of languages used.\n   - Conciseness of language is secondary.\n• Rewarding curiosity about implementation should be a first-class design goal.\n   - Doesn’t matter what the architecture is; _can others tell_ what the architecture is?\n   - Encode knowledge first about the outside. Environment\/context over algorithms. (tests)\n   - Encode knowledge in the repo. No other place to look at. “Don’t make me talk to you.”\n   - Knowledge automatically complains when it goes out of date. (tests)\n   - Keep it easy to update. (domain-independent traces over domain-specific immediate UIs)\n   - Organize knowledge autobiographically, in a cleaned up version history. (layers)\n• Make it tractable to delete features.\n   - Encourage more forks.\n• Don’t charge for software. Messes with long-term incentives. (Charging for hosting\/operational services is ok.)\n\nComments most appreciated. I also worry that I'm too verbose in my comments, so feel free to tell me that :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "reply_count": 13,
        "reply_users_count": 6,
        "latest_reply": "1551812772.209900",
        "reply_users": [
            "UA14TGLTC",
            "UCUSW7WVD",
            "UAVCC2X70",
            "UAL7940NM",
            "UE6EFEPTQ",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1551742014.166100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1551742117.166300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1551742220.166500"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1551742413.166700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1551742716.166900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1551770447.167900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1551771258.168100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1551771572.168300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1551772603.168500"
            },
            {
                "user": "UAL7940NM",
                "ts": "1551776831.168800"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1551783067.170200"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1551783622.170500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1551812772.209900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D27",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One alternative to an idea maze for sorting ourselves may be for each of us to list principles, so that we can build up some sort of adjacency matrix to figure out who overlaps most with us. Here's a list for myself I came up with after chatting with "
                            },
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " last week, trying to be opinionated rather than bland:\n\n• Longevity over adoption.\n• Implementation matters.\n   - Transparency over abstraction.\n   - Minimize dependencies. No, "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n   - Minimize number of languages used.\n   - Conciseness of language is secondary.\n• Rewarding curiosity about implementation should be a first-class design goal.\n   - Doesn’t matter what the architecture is; "
                            },
                            {
                                "type": "text",
                                "text": "can others tell",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what the architecture is?\n   - Encode knowledge first about the outside. Environment\/context over algorithms. (tests)\n   - Encode knowledge in the repo. No other place to look at. “Don’t make me talk to you.”\n   - Knowledge automatically complains when it goes out of date. (tests)\n   - Keep it easy to update. (domain-independent traces over domain-specific immediate UIs)\n   - Organize knowledge autobiographically, in a cleaned up version history. (layers)\n• Make it tractable to delete features.\n   - Encourage more forks.\n• Don’t charge for software. Messes with long-term incentives. (Charging for hosting\/operational services is ok.)\n\nComments most appreciated. I also worry that I'm too verbose in my comments, so feel free to tell me that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70",
                    "UD43R8ZFV"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551742014.166100",
        "client_msg_id": "55918639-72aa-4559-9810-0130a93ff73f",
        "text": "Interesting to consider what principles we as a community generally feel are guiding, which might but don't actually matter, and those about which we tend to have split opinion.  For example, let me venture a few guesses:  we all feel liveness is important, that types (and type theories) aren't so much, and that there's differing opinions about ease of learning.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PfSY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting to consider what principles we as a community generally feel are guiding, which might but don't actually matter, and those about which we tend to have split opinion.  For example, let me venture a few guesses:  we all feel liveness is important, that types (and type theories) aren't so much, and that there's differing opinions about ease of learning."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1551742117.166300",
        "client_msg_id": "6a2b157a-65f1-4325-a024-56f856a18a86",
        "text": "I'm actually a counter-example on liveness and direct-feedback UI. It's something to aim for for sure in the fullness of time. But I think the things I mentioned above are higher priority.\n\nA more parsimonious stack would have a much easier time implementing _and sustaining_ a direct-feedback interface.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Jy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm actually a counter-example on liveness and direct-feedback UI. It's something to aim for for sure in the fullness of time. But I think the things I mentioned above are higher priority.\n\nA more parsimonious stack would have a much easier time implementing "
                            },
                            {
                                "type": "text",
                                "text": "and sustaining",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a direct-feedback interface."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551742220.166500",
        "client_msg_id": "73a53e7d-fdf5-4c31-8166-b6e508e318e9",
        "text": "Great!  When making any claim, this is the kind of feedback one hopes for.  To learn whether there's a more subtle core value that may manifest differently.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dB\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great!  When making any claim, this is the kind of feedback one hopes for.  To learn whether there's a more subtle core value that may manifest differently."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551742413.166700",
        "client_msg_id": "f3e1f31d-4b7f-46f6-93f6-600be0d19c5a",
        "text": "For example, easy to learn vs powerful for the master is probably a false dichotomy.  What may be a real difference is whether, in a given dimension, the programming tool should extend to meet a person's existing mental model or whether the tool should help facilitate a person in learning a new mental model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DVl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, easy to learn vs powerful for the master is probably a false dichotomy.  What may be a real difference is whether, in a given dimension, the programming tool should extend to meet a person's existing mental model or whether the tool should help facilitate a person in learning a new mental model."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1551742716.166900",
        "client_msg_id": "6c60d573-fec2-47fd-a34d-cf6098ef6475",
        "text": "For example, layout in memory is kind of an implementation detail that a good environment would help you to mostly if not entirely ignore.  Whereas relationships between entities (how many these are there per one of those in this or that context), might be the kind of thing we want the tool to help make explicit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UvKJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, layout in memory is kind of an implementation detail that a good environment would help you to mostly if not entirely ignore.  Whereas relationships between entities (how many these are there per one of those in this or that context), might be the kind of thing we want the tool to help make explicit."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1551746577.167400",
        "client_msg_id": "5ac087b0-f452-4290-815d-5254543ddde8",
        "text": "<@UEQ6M68H0> - interesting stuff - is there more information publicly available about the Beads Project?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551508329.022600",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a4t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " - interesting stuff - is there more information publicly available about the Beads Project?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1551770447.167900",
        "client_msg_id": "578c224f-2744-4584-acc4-ed77e8332022",
        "text": "This could be a large difficult task, but I think the payoff is worth it.\n\nMy prediction is that there'd be *many* different dimensions and goals that would not all fit into clear categories, with lots of overlap and probably spanning multiple unrelated \"spaces\". There are even different categories of categories: topics, goals, perspectives, mechanisms, tools, languages, features, change for programmers vs change for users\/society, etc.\n\nHowever, I think if we do it best to lay it out (expecting a very broad mess of info), we can then start to identify very clear recurring themes of goals, etc., and that could be powerful.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mCAg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This could be a large difficult task, but I think the payoff is worth it.\n\nMy prediction is that there'd be "
                            },
                            {
                                "type": "text",
                                "text": "many",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " different dimensions and goals that would not all fit into clear categories, with lots of overlap and probably spanning multiple unrelated \"spaces\". There are even different categories of categories: topics, goals, perspectives, mechanisms, tools, languages, features, change for programmers vs change for users\/society, etc.\n\nHowever, I think if we do it best to lay it out (expecting a very broad mess of info), we can then start to identify very clear recurring themes of goals, etc., and that could be powerful."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1551771258.168100",
        "client_msg_id": "2e11ce6a-0acf-441b-a2ca-3c4a4a05151b",
        "text": "Also, I suspect that although we'd probably find a diverse spread of ideas at the top, we'd probably find some very concrete underlying motives -- and that's more powerful than comparing ideas for ideas sake.\n\nFor example, I want to code visualized, but you want to see code as spread sheets -- but maybe we both really just want code to be more immediately understandable.\n\nAnd that can get deeper: *why* does code need to be more understandable? Anyway, we might be about to dig down and down to get at what we really care most about, and then compare \"branches\" off common roots. That might allow for more meaningful cross-influence (and purpose) than comparing features for features sake (I say \"features\", but whatever else it may be).\n\nAnyway, potentially big task, and it might not be perfect; but in all seriousness, maybe we should try to make a \"tree\" or commonality? (roots being underlying motives or problems, etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AhTkD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, I suspect that although we'd probably find a diverse spread of ideas at the top, we'd probably find some very concrete underlying motives -- and that's more powerful than comparing ideas for ideas sake.\n\nFor example, I want to code visualized, but you want to see code as spread sheets -- but maybe we both really just want code to be more immediately understandable.\n\nAnd that can get deeper: "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does code need to be more understandable? Anyway, we might be about to dig down and down to get at what we really care most about, and then compare \"branches\" off common roots. That might allow for more meaningful cross-influence (and purpose) than comparing features for features sake (I say \"features\", but whatever else it may be).\n\nAnyway, potentially big task, and it might not be perfect; but in all seriousness, maybe we should try to make a \"tree\" or commonality? (roots being underlying motives or problems, etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1551771572.168300",
        "client_msg_id": "76ccc1cd-91d4-4d25-b21d-5b48bd13dd2a",
        "text": "With that in mind, there's also the whole category of topics \/ projects for making that kind collaboration (or whatever other kinds we might be doing here) better. Ways of visualizing and sharing info, etc. I mean, maybe there are good enough tools; but do you ever think that even *working* on working on improving software (or whatever you call it) should be better than is otherwise normally given to us?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YciI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With that in mind, there's also the whole category of topics \/ projects for making that kind collaboration (or whatever other kinds we might be doing here) better. Ways of visualizing and sharing info, etc. I mean, maybe there are good enough tools; but do you ever think that even "
                            },
                            {
                                "type": "text",
                                "text": "working",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on working on improving software (or whatever you call it) should be better than is otherwise normally given to us?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1551772603.168500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1551772785.000000"
        },
        "client_msg_id": "8e2626be-1c18-4e86-965e-973b53b6c030",
        "text": "Ha, I can bring this right back to the C.A. topic of \"living structure\" (LS), in that a thing that generates LS (referring to the kinds of things\/changes we want to create) must itself be LS (referring to whatever collaborative process we might undertake).\n\nIn other words, it's not going to happen by finding the right tool or process all at once, but by finding some initial setup\/process for \"bootstrapping\" the rest of it into existence (i.e. \"unfolding wholeness\" through \"structure preserving transformations\" -- where perhaps \"structure\" can mean \"process\", e.g. how we go about collaborating or documenting \/ sharing \/ building off of each other's ideas &amp; goals)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1551740440.165800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uBR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha, I can bring this right back to the C.A. topic of \"living structure\" (LS), in that a thing that generates LS (referring to the kinds of things\/changes we want to create) must itself be LS (referring to whatever collaborative process we might undertake).\n\nIn other words, it's not going to happen by finding the right tool or process all at once, but by finding some initial setup\/process for \"bootstrapping\" the rest of it into existence (i.e. \"unfolding wholeness\" through \"structure preserving transformations\" -- where perhaps \"structure\" can mean \"process\", e.g. how we go about collaborating or documenting \/ sharing \/ building off of each other's ideas & goals)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]