[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736766443.721129",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1736780748.000000"
        },
        "client_msg_id": "57853505-0423-4e4f-8fa6-95688e7d75e6",
        "text": "On \"stealing\" - I did a big fat emoji to indicate I was joking! I actually agree with everyone taking everyone else's IP (apart from trade marks) - that's how humankind made progress throughout our evolution and civilisation, until recently when it _was_ all stolen, from the common good, by mega global corporations.\n\nI think we should move on from the Declarative rabbit hole, then, as you basically repeated what you said before so we're not getting further on! But! There is hope for a productive follow-on, as you talk in terms of reactivity and repeating calls when things change, like in a spreadsheet. Spreadsheets are Declarative, so that makes me happy. Also, you mention HTTP calls, and when idempotent, they have a Declarative vibe (I see REST as a Declarative architectural style).\n\nThis work all has similiarities to Substrates, don't know if you were aware of that? <https:\/\/ex-situ.lri.fr\/content\/8-teaching\/4-fundamentals-of-situated-interaction\/2-handouts\/substrates-tr2017.pdf> Also there's some commonality to TBL's SOLID and <https:\/\/infocentral.org\/>.\n\nWhere do \"applications\" fit in this? My preferred answer would be \"nowhere, there are none!\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EAdlm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On \"stealing\" - I did a big fat emoji to indicate I was joking! I actually agree with everyone taking everyone else's IP (apart from trade marks) - that's how humankind made progress throughout our evolution and civilisation, until recently when it "
                            },
                            {
                                "type": "text",
                                "text": "was",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " all stolen, from the common good, by mega global corporations.\n\nI think we should move on from the Declarative rabbit hole, then, as you basically repeated what you said before so we're not getting further on! But! There is hope for a productive follow-on, as you talk in terms of reactivity and repeating calls when things change, like in a spreadsheet. Spreadsheets are Declarative, so that makes me happy. Also, you mention HTTP calls, and when idempotent, they have a Declarative vibe (I see REST as a Declarative architectural style).\n\nThis work all has similiarities to Substrates, don't know if you were aware of that? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/ex-situ.lri.fr\/content\/8-teaching\/4-fundamentals-of-situated-interaction\/2-handouts\/substrates-tr2017.pdf"
                            },
                            {
                                "type": "text",
                                "text": " Also there's some commonality to TBL's SOLID and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/infocentral.org\/"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nWhere do \"applications\" fit in this? My preferred answer would be \"nowhere, there are none!\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736786636.846449",
        "client_msg_id": "2439edeb-b11c-44a0-8ab9-1bbe48bc9633",
        "text": "<@U016VUZGUUQ>\n&gt;  The characteristic feature of the tagless-final approach is extensibility: a DSL expression, once written, can be interpreted in a variety of ways -- to evaluate, to pretty-print, to analyze, to transform or compile. At any time one may add more interpreters, more optimization passes, and even more expression forms to the DSL while re-using the earlier written DSL programs and interpreters as they are. Perhaps counter-intuitively, the tagless-final style supports DSL transformations: from reduction, constant propagation and partial evaluation to CPS transformations and loop interchange.\nThis is powerful. And I totally consider a DSL to be data. If I understand it correctly, this approach allows you to write code at a high level of abstraction and then let it be transformed into a shape that carries a lower level implementation (generic programming), without affecting the high level specification. The paper says that this is better than abstract algebraic types, but that goes over my head. In your view\/experience, what makes this approach so powerful?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BL6ba",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The characteristic feature of the tagless-final approach is extensibility: a DSL expression, once written, can be interpreted in a variety of ways -- to evaluate, to pretty-print, to analyze, to transform or compile. At any time one may add more interpreters, more optimization passes, and even more expression forms to the DSL while re-using the earlier written DSL programs and interpreters as they are. Perhaps counter-intuitively, the tagless-final style supports DSL transformations: from reduction, constant propagation and partial evaluation to CPS transformations and loop interchange."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis is powerful. And I totally consider a DSL to be data. If I understand it correctly, this approach allows you to write code at a high level of abstraction and then let it be transformed into a shape that carries a lower level implementation (generic programming), without affecting the high level specification. The paper says that this is better than abstract algebraic types, but that goes over my head. In your view\/experience, what makes this approach so powerful?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736786705.448079",
        "client_msg_id": "fb44fb40-b381-4041-bab0-11e5378a7942",
        "text": "<@UE6EFEPTQ>\n\nI think that, like gender, applications make sense, but in a much more fluid and open way than traditionally conceived or expected. To me, an application is data plus logic for modifying that data, which are also data. The application lives in the dataspace. To what extent that data is public, or how modifiable by users is the logic that operates on the data, those are the axis along which we play.\n\nI wasn't aware of Substrates, thank you for bringing it to my attention! There's a lot there in common with what I'm thinking, particularly the notion of building affordances from data using data. I do see that from the same data, one might create different representations. This breaking of the 1:1 between data and a representation of it is key; from one part of the dataspace, multiple references and transformations are possible!\n\n<@UCUSW7WVD> earlier brought Subtext to my attention (<https:\/\/www.subtext-lang.org\/OOPSLA05.pdf>), which I wasn't aware of earlier.\n\nNo worries about \"stealing\", I figured you were joking :D. And indeed, there's been quite a grab on the part of the big corporations; but by us working in public, I think that the balance of power can be tilted. I also just found out about Unit (<https:\/\/github.com\/samuelmtimbo\/unit\/tree\/main>) (thanks Kartik!) and his purpose is exactly the same one as mine: create systems that empower more people. The technical can also be political!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dt9n2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think that, like gender, applications make sense, but in a much more fluid and open way than traditionally conceived or expected. To me, an application is data plus logic for modifying that data, which are also data. The application lives in the dataspace. To what extent that data is public, or how modifiable by users is the logic that operates on the data, those are the axis along which we play.\n\nI wasn't aware of Substrates, thank you for bringing it to my attention! There's a lot there in common with what I'm thinking, particularly the notion of building affordances from data using data. I do see that from the same data, one might create different representations. This breaking of the 1:1 between data and a representation of it is key; from one part of the dataspace, multiple references and transformations are possible!\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " earlier brought Subtext to my attention ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.subtext-lang.org\/OOPSLA05.pdf"
                            },
                            {
                                "type": "text",
                                "text": "), which I wasn't aware of earlier.\n\nNo worries about \"stealing\", I figured you were joking :D. And indeed, there's been quite a grab on the part of the big corporations; but by us working in public, I think that the balance of power can be tilted. I also just found out about Unit ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/samuelmtimbo\/unit\/tree\/main"
                            },
                            {
                                "type": "text",
                                "text": ") (thanks Kartik!) and his purpose is exactly the same one as mine: create systems that empower more people. The technical can also be political!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736789413.092369",
        "client_msg_id": "02d0f0c2-5df5-47a9-ac62-31ac633ed0f9",
        "text": "Power to the Peeeppuuuuulllll! :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s9txj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Power to the Peeeppuuuuulllll! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U0887QU9G2V"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736800225.197719",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1736800341.000000"
        },
        "client_msg_id": "4a0d4004-562f-41cc-886e-01b5a4ddd3a2",
        "text": "Further than Substrates, SOLID and Chris Gebhardt's InfoCentral that I mentioned, there's also <@U05PY5AQCA2>’s <https:\/\/frest.substack.com\/p\/what-is-frest|FREST> to compare to. And perhaps further out there's <@U03KUD5SZHD>’s Itemized OS and even Victor's Dynamicland, all of which share a sense of data primacy and reactivity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5fd9d106-47e9-4c50-a15f-707b11ec91ae_550x550.png",
                "image_width": 550,
                "image_height": 550,
                "image_bytes": 15258,
                "from_url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d74e329-6c40-4882-92d4-c2176a0ffceb%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "fallback": "What is FREST?",
                "text": "FREST is simpler computing for ordinary folks and programmers alike.",
                "title": "What is FREST?",
                "title_link": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "service_name": "frest.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0wHLf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Further than Substrates, SOLID and Chris Gebhardt's InfoCentral that I mentioned, there's also "
                            },
                            {
                                "type": "user",
                                "user_id": "U05PY5AQCA2"
                            },
                            {
                                "type": "text",
                                "text": "’s "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                                "text": "FREST"
                            },
                            {
                                "type": "text",
                                "text": " to compare to. And perhaps further out there's "
                            },
                            {
                                "type": "user",
                                "user_id": "U03KUD5SZHD"
                            },
                            {
                                "type": "text",
                                "text": "’s Itemized OS and even Victor's Dynamicland, all of which share a sense of data primacy and reactivity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736803172.674169",
        "client_msg_id": "a475a46d-78a8-45e2-a6e7-67f142e67302",
        "text": "Wow, great stuff! I'm particularly impressed with FREST. A lot of parallels, especially the values at addresses bit. Thank you for sharing it all!\n\nI love how you summed it up: data primacy and reactivity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XC2Wb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, great stuff! I'm particularly impressed with FREST. A lot of parallels, especially the values at addresses bit. Thank you for sharing it all!\n\nI love how you summed it up: data primacy and reactivity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "hugging_face",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1736803307.093169",
        "client_msg_id": "0395B549-AC00-47CD-BD83-9CB971897664",
        "text": "Thanks!\n\nI’m currently trying to find as much spare time as I can to make an app that demonstrates the principles. Think FileMaker but for all the things — not just local tables but your email, your calendar, your filesystem, online services, all in a single probably Datalog query interface, and easily extensible from your favourite programming language.\n\nIn the end, I’m looking to either bootstrap that, or better find some funding to do it properly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H0DRW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks!\n\nI’m currently trying to find as much spare time as I can to make an app that demonstrates the principles. Think FileMaker but for all the things — not just local tables but your email, your calendar, your filesystem, online services, all in a single probably Datalog query interface, and easily extensible from your favourite programming language.\n\nIn the end, I’m looking to either bootstrap that, or better find some funding to do it properly."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U0887QU9G2V"
                ],
                "count": 1
            }
        ]
    }
]