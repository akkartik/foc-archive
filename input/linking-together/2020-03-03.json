[
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1583230333.024200",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1583257616.000000"
        },
        "client_msg_id": "6ad7de75-75f1-4ab1-9fd6-6a17ea4b30e9",
        "text": "<@UEQ6M68H0> what exactly do you mean by boolean having 3 values in JS? <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Data_structures|MDN docs> explicitly state that boolean has 2 values. Maybe you are referring to null value in JS?\nAnother simple example is Haskell -&gt; Boolean certainly has 2 different values there. And if you need to transfer additional information, you can e.g. use Maybe to achieve 3 values, or Either, which makes it explicit what is happening, keeping Boolean being just a Boolean.\nSorry if I am missing something obvious, would be happy to hear the more detailed explanation!\nBtw nice job on beads language, seems impressive :)!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1583191231.023700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VEBj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " what exactly do you mean by boolean having 3 values in JS? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Data_structures",
                                "text": "MDN docs"
                            },
                            {
                                "type": "text",
                                "text": " explicitly state that boolean has 2 values. Maybe you are referring to null value in JS?\nAnother simple example is Haskell -> Boolean certainly has 2 different values there. And if you need to transfer additional information, you can e.g. use Maybe to achieve 3 values, or Either, which makes it explicit what is happening, keeping Boolean being just a Boolean.\nSorry if I am missing something obvious, would be happy to hear the more detailed explanation!\nBtw nice job on beads language, seems impressive :)!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "USCSC4JF2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1583266347.025300",
        "client_msg_id": "026fc3fe-80a4-4a44-b78b-1d1bfbe3481f",
        "text": "It is very important to not lose information. If you know you don't know the value of something, i.e. it is unknown or undefined), you should never be permitted in your code to turn that into information. For example if you have a variable needs_diapers = age &lt; 2, if age is unknown, then so is needs_diapers. JS implements 3\/4 of Excel's protected arithmetic. In Beads I implemented 4\/4ths of Excel's protected arithmetic, because it is one of the secret weapons as to why Excel is so preferred as a programming tool.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1583191231.023700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l1l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is very important to not lose information. If you know you don't know the value of something, i.e. it is unknown or undefined), you should never be permitted in your code to turn that into information. For example if you have a variable needs_diapers = age < 2, if age is unknown, then so is needs_diapers. JS implements 3\/4 of Excel's protected arithmetic. In Beads I implemented 4\/4ths of Excel's protected arithmetic, because it is one of the secret weapons as to why Excel is so preferred as a programming tool."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1583271858.025500",
        "client_msg_id": "04c11ec7-2b0e-4037-89f1-40a8802fde8e",
        "text": "Hm I think I see what you mean, it is about seamlessly propagating unknown value or error through the expression, instead of handling it explicitly. I can see how that can be useful in certain scenarios (and as you said, that works well in spreadsheets)!\nBtw. (and sorry if you already know about it) Haskell is interesting in this sense, with its Maybe type constructor. While Bool alone in Haskell has strictly 2 different values, if you use Maybe Bool, you effectively get True, False or Nothing, and if you then do operations in Maybe monad you get short-circuiting in case of Nothing, without explicitly handling it! Certainly not as handy as if it was built in, but you can get pros of both worlds.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1583191231.023700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "unt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hm I think I see what you mean, it is about seamlessly propagating unknown value or error through the expression, instead of handling it explicitly. I can see how that can be useful in certain scenarios (and as you said, that works well in spreadsheets)!\nBtw. (and sorry if you already know about it) Haskell is interesting in this sense, with its Maybe type constructor. While Bool alone in Haskell has strictly 2 different values, if you use Maybe Bool, you effectively get True, False or Nothing, and if you then do operations in Maybe monad you get short-circuiting in case of Nothing, without explicitly handling it! Certainly not as handy as if it was built in, but you can get pros of both worlds."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1583302861.025700",
        "client_msg_id": "70b94088-5da6-4eb4-9882-186dfe38a7bf",
        "text": "Haskell has an unsound type system. For example, `head` returns the first element of a list, and has type `[a] -&gt; a`. But wait, what does `head` return if the list is empty? There's no error condition encoded in the result type. Well actually, the program aborts. This problem is everywhere, since case expressions are not required to enumerate all of the possible cases. A sound type system ensures that the program \"can't go wrong\", and Haskell doesn't manage that.\n\nEdward says Beads is a robust language where all functions are total, which is more ambitious than Haskell. Apparently Beads has a sound type system. That might account for the extra complexity in the boolean type.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1583191231.023700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zWGeo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haskell has an unsound type system. For example, "
                            },
                            {
                                "type": "text",
                                "text": "head",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " returns the first element of a list, and has type "
                            },
                            {
                                "type": "text",
                                "text": "[a] -> a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But wait, what does "
                            },
                            {
                                "type": "text",
                                "text": "head",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " return if the list is empty? There's no error condition encoded in the result type. Well actually, the program aborts. This problem is everywhere, since case expressions are not required to enumerate all of the possible cases. A sound type system ensures that the program \"can't go wrong\", and Haskell doesn't manage that.\n\nEdward says Beads is a robust language where all functions are total, which is more ambitious than Haskell. Apparently Beads has a sound type system. That might account for the extra complexity in the boolean type."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]