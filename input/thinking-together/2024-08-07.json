[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1723026583.105509",
        "client_msg_id": "af298134-18ee-457e-9a7d-2e43ee439587",
        "text": "<@UGWUJUZHT> I know exactly what it feels like to have a strong intuition for something, up to the point that it’s absolutely obvious to you, but everybody around you doesn’t “get it”, and somehow you can’t find the right words to explain it to them.\n\nWhen you say \"FP is close to the hardware”, you mean your “function-based programming”, not functional programming? I think functional programming in the colloquial sense (as opposed to imperative programming) is seen not at all close to hardware.\n\nIf closeness to hardware is a factor that’s important for your FBP, how do you feel about Forth? Is the ability to define a new word and compile it on the spot and then later call that newly created subroutine from anywhere in your code FBP? Does it have all the issues that you criticize, or does this minimal implementation lack some of the issues more complex languages have?\n\nAnd I can’t quite tell if you are suggesting that we should move closer to hardware in language designs? The way you talk about C as an example makes it sound like you want to see something that’s “closer to the hardware” than C is? (Arguably, C was close to a hardware, the PDP-11, but shockingly even I am not old enough to really know about that.)\n\nIf moving closer to hardware is directionally what you’re looking for, I’d love to hear more about this in contrast to the fairly consistent motivation to abstract over hardware we have seen in programming since its inception.\n\nAnd I’d also like to hear more about “evidence” for a connection between strong typing and bloatware.\n\nI’ve recently been rediscovering Conal Elliott’s work again, and it seems to me like he’d be pretty high on your main villain list as he seems to represent the almost exact opposite of your values. If you can stand it, I’d love to hear what you think about what he says in <https:\/\/www.typetheoryforall.com\/episodes\/denotational-design|this podcast episode>. Alternatively, you could read <http:\/\/conal.net\/papers\/type-class-morphisms|this paper>, but the podcast has so much more valuable context (and should be much easier to digest if you don’t like picking apart mathematical formulas). There's also a video for a seminar that might be more digestible than the paper. Either way, all options will take several hours of your time, so I understand if you don’t have that time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i2RQw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I know exactly what it feels like to have a strong intuition for something, up to the point that it’s absolutely obvious to you, but everybody around you doesn’t “get it”, and somehow you can’t find the right words to explain it to them.\n\nWhen you say \"FP is close to the hardware”, you mean your “function-based programming”, not functional programming? I think functional programming in the colloquial sense (as opposed to imperative programming) is seen not at all close to hardware.\n\nIf closeness to hardware is a factor that’s important for your FBP, how do you feel about Forth? Is the ability to define a new word and compile it on the spot and then later call that newly created subroutine from anywhere in your code FBP? Does it have all the issues that you criticize, or does this minimal implementation lack some of the issues more complex languages have?\n\nAnd I can’t quite tell if you are suggesting that we should move closer to hardware in language designs? The way you talk about C as an example makes it sound like you want to see something that’s “closer to the hardware” than C is? (Arguably, C was close to a hardware, the PDP-11, but shockingly even I am not old enough to really know about that.)\n\nIf moving closer to hardware is directionally what you’re looking for, I’d love to hear more about this in contrast to the fairly consistent motivation to abstract over hardware we have seen in programming since its inception.\n\nAnd I’d also like to hear more about “evidence” for a connection between strong typing and bloatware.\n\nI’ve recently been rediscovering Conal Elliott’s work again, and it seems to me like he’d be pretty high on your main villain list as he seems to represent the almost exact opposite of your values. If you can stand it, I’d love to hear what you think about what he says in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.typetheoryforall.com\/episodes\/denotational-design",
                                "text": "this podcast episode"
                            },
                            {
                                "type": "text",
                                "text": ". Alternatively, you could read "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/conal.net\/papers\/type-class-morphisms",
                                "text": "this paper"
                            },
                            {
                                "type": "text",
                                "text": ", but the podcast has so much more valuable context (and should be much easier to digest if you don’t like picking apart mathematical formulas). There's also a video for a seminar that might be more digestible than the paper. Either way, all options will take several hours of your time, so I understand if you don’t have that time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723035682.483489",
        "client_msg_id": "9124b7ab-d10f-4b93-935b-e1110e1dae4b",
        "text": "... Working On It ... in the meantime, note that I used the word “correlation”. Correlation does not necessarily imply causation. Evidence: `ls`, `wc`, `MacOS Finder`, `Windows Explorer`, contrasts with Sector Lisp and BLC, etc, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wlmsr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... Working On It ... in the meantime, note that I used the word “correlation”. Correlation does not necessarily imply causation. Evidence: "
                            },
                            {
                                "type": "text",
                                "text": "ls",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "wc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "MacOS Finder",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "Windows Explorer",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", contrasts with Sector Lisp and BLC, etc, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1723066269.536459",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1723067832.000000"
        },
        "client_msg_id": "3a269a92-8e64-41fa-9b75-2647b3158b6e",
        "text": "... Hmm, I’m eyeing the phrase “... abstract over hardware we have seen in programming since its inception. ...”. I wonder if this is the issue. I believe that most of our programming languages do NOT abstract over hardware. Function-based languages (i.e. most programming languages from C to Haskell) abstract over only a tiny sliver of hardware - i.e. the CPU. Hardware actually tends to be massively asynchronous (like 1972 Pong), yet, PLs tend to be restrictively synchronous. We can easily describe the innards of a VLSI chip with one of the popular programming languages, but, not so easily an asynchronous circuit composed of many chips. [It is a Design Decision to let the synchrony leak out and subsume more and more of the circuit, but, at some point this becomes a losing proposition. Say, for example, dealing with nodes on the internet -- we can express the innards of nodes, but we are reduced to caveman-like grunting at an assembler-like level when expressing the network of nodes. Hardware circuits are like the internet, whereas CPUs are only a small part of any actual circuit. Modern Computer Science is like modern Physics - we understand how everything works, well, except the 95% of the Universe called “dark matter”.]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RZuBI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... Hmm, I’m eyeing the phrase “... abstract over hardware we have seen in programming since its inception. ...”. I wonder if this is the issue. I believe that most of our programming languages do NOT abstract over hardware. Function-based languages (i.e. most programming languages from C to Haskell) abstract over only a tiny sliver of hardware - i.e. the CPU. Hardware actually tends to be massively asynchronous (like 1972 Pong), yet, PLs tend to be restrictively synchronous. We can easily describe the innards of a VLSI chip with one of the popular programming languages, but, not so easily an asynchronous circuit composed of many chips. [It is a Design Decision to let the synchrony leak out and subsume more and more of the circuit, but, at some point this becomes a losing proposition. Say, for example, dealing with nodes on the internet -- we can express the innards of nodes, but we are reduced to caveman-like grunting at an assembler-like level when expressing the network of nodes. Hardware circuits are like the internet, whereas CPUs are only a small part of any actual circuit. Modern Computer Science is like modern Physics - we understand how everything works, well, except the 95% of the Universe called “dark matter”.]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1723073325.058759",
        "client_msg_id": "4F0A9284-AB22-4173-B6B1-A6416FF18C67",
        "text": "I just watched the video linked in <https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1722452952090749|this thread>. <@UGWUJUZHT> This seems close to what you’re talking about.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1722636399.108109",
        "parent_user_id": "UGWUJUZHT",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1722452952090749",
                "ts": "1722452952.090749",
                "author_id": "U71PMQ1V0",
                "channel_id": "C037X8XMFB3",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C037X8XMFB3",
                        "ts": "1722452952.090749",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "iA9JB",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "The future of programming is data-parallel?\n\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/www.youtube.com\/watch?v=vU3ryvZYlkk"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "files": [
                    {
                        "id": "F07FB6ZC4M7",
                        "created": 1722452946,
                        "timestamp": 1722452946,
                        "user": "U71PMQ1V0",
                        "is_hidden_by_limit": 1
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1722452952090749",
                "fallback": "[July 31st, 2024 12:09 PM] jamie: The future of programming is data-parallel?\n\n<https:\/\/www.youtube.com\/watch?v=vU3ryvZYlkk>",
                "text": "The future of programming is data-parallel?\n\n<https:\/\/www.youtube.com\/watch?v=vU3ryvZYlkk>",
                "author_name": "Jamie Brandon",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U71PMQ1V0",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_48.jpg",
                "author_subname": "Jamie Brandon",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XzmBU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just watched the video linked in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C037X8XMFB3\/p1722452952090749",
                                "text": "this thread"
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " This seems close to what "
                            },
                            {
                                "type": "text",
                                "text": "you’re"
                            },
                            {
                                "type": "text",
                                "text": " talking about"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]