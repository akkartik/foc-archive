[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1751354506.727779",
        "client_msg_id": "d39ec8a4-784e-44be-a1c6-68c782cb1530",
        "text": "<@UGWUJUZHT> In Linda, a process can deposit any number of data items in the shared tuple space. That includes multiple copies of identical data, or copies tagged with different labels to make sure that different downstream processes pick it up.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750965548.013389",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wQlFj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " In Linda, a process can deposit any number of data items in the shared tuple space. That includes multiple copies of identical data, or copies tagged with different labels to make sure that different downstream processes pick it up."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1751420853.726919",
        "client_msg_id": "d3e9caaf-a7bb-42f5-a980-678847e79bda",
        "text": "Thanks! I wonder if that puts a new spin on what I think that PBP(0D) is about? Linda provides \"assembler\" operations for connecting units together (using tuples). Likewise, Python (et al, JS, Rust, ...) provide different kinds of \"assembler\" operations for connecting software units together (using queues and closures). I don't believe that thinking about connecting software units together at such a low level is good enough. I believe that we need to separate out the task of \"making connections\" into it's own paradigm (or HLL or whatever).  Separating this aspect out of our code simplifies our task(s) by reducing the degrees of design freedom (simplicity is \"the lack of nuance\"). I think that \"connection of software units\" is an interesting paradigm, in its own right, in today's programming, i.e. internet, robotics, blockchain, NPCs, etc. In the 1960s, the giants took what they had - bags of transistors and vacuum tubes - and created new conceptual paradigms with them. IMO, just about all of today's programming languages are the same (synchronous, sequential). Can we combine them to derive new conceptual paradigms?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750965548.013389",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ie0Oi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! I wonder if that puts a new spin on what I think that PBP(0D) is about? Linda provides \"assembler\" operations for connecting units together (using tuples). Likewise, Python (et al, JS, Rust, ...) provide different kinds of \"assembler\" operations for connecting software units together (using queues and closures). I don't believe that thinking about connecting software units together at such a low level is good enough. I believe that we need to separate out the task of \"making connections\" into it's own paradigm (or HLL or whatever).  Separating this aspect out of our code simplifies our task(s) by reducing the degrees of design freedom (simplicity is \"the lack of nuance\"). I think that \"connection of software units\" is an interesting paradigm, in its own right, in today's programming, i.e. internet, robotics, blockchain, NPCs, etc. In the 1960s, the giants took what they had - bags of transistors and vacuum tubes - and created new conceptual paradigms with them. IMO, just about all of today's programming languages are the same (synchronous, sequential). Can we combine them to derive new conceptual paradigms?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1751435072.275929",
        "client_msg_id": "557187fa-492b-4656-9886-ccaa9816d558",
        "text": "<@UGWUJUZHT> I agree with that vision. We are focusing too much on low-level technology, and believe it would\/should scale to larger complexity. It doesn't.\n\nWhat I like about Linda, beyond its immediate affordances, is its rather abstract design that allows many options for implementing the individual computational processes. It doesn't have to be all in one language, nor all in a shared memory space. These are good characteristics for component interfacing infrastructure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1750965548.013389",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Roq1c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I agree with that vision. We are focusing too much on low-level technology, and believe it would\/should scale to larger complexity. It doesn't.\n\nWhat I like about Linda, beyond its immediate affordances, is its rather abstract design that allows many options for implementing the individual computational processes. It doesn't have to be all in one language, nor all in a shared memory space. These are good characteristics for component interfacing infrastructure."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            }
        ]
    }
]