[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1689147543.274599",
        "client_msg_id": "0b702e1d-25da-40a0-bb0b-b98ddd37de3a",
        "text": "how did you get to such an old message?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "awW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how did you get to such an old message?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1689148319.568939",
        "client_msg_id": "00df345a-6a65-4ba6-93d9-915f7f6fd354",
        "text": "I'll let everyone read both above long posts before adding my own take, but briefly, I'm a secret fan of Red\/Rebol as my own lang shares much with it\/them. I have type=grammar for both inline small types and whole objects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1LK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll let everyone read both above long posts before adding my own take, but briefly, I'm a secret fan of Red\/Rebol as my own lang shares much with it\/them. I have type=grammar for both inline small types and whole objects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1689151304.101499",
        "client_msg_id": "2d86eadd-b607-45de-9af7-966155c570b3",
        "text": "Rebol and descendents are something I have been looking at as well every now and then. Red seems to be the most active project in this space right now. Another one that seems stuck in an early design phase is <https:\/\/altscript.com\/>. But there is nothing I see as good enough for actually playing with at this time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iZYC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rebol and descendents are something I have been looking at as well every now and then. Red seems to be the most active project in this space right now. Another one that seems stuck in an early design phase is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/altscript.com\/"
                            },
                            {
                                "type": "text",
                                "text": ". But there is nothing I see as good enough for actually playing with at this time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689176717.295409",
        "client_msg_id": "dbf7fd53-bdc2-46c9-94bb-443758e5133a",
        "text": "Happy to see people exploring these ideas. The ability to have richer ways of thinking about textual programs is one of the reasons I'm working on my own editor.\n\nI always want to leave the that little booklet of context. I always want to detail the history of code. I want to take notes, some I want to publish for the team, others for myself. I want to make a tour of the codebase for new contributors, one that exercises bits of the actual code. I want a live demo of that exponential backoff algorithm. I want an interactive integration test complete with live architecture diagram of the running system.\n\nWe haven't even gotten close to unlocking what we can do with textual based code. Our integrated development environments don't integrate much.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "La\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Happy to see people exploring these ideas. The ability to have richer ways of thinking about textual programs is one of the reasons I'm working on my own editor.\n\nI always want to leave the that little booklet of context. I always want to detail the history of code. I want to take notes, some I want to publish for the team, others for myself. I want to make a tour of the codebase for new contributors, one that exercises bits of the actual code. I want a live demo of that exponential backoff algorithm. I want an interactive integration test complete with live architecture diagram of the running system.\n\nWe haven't even gotten close to unlocking what we can do with textual based code. Our integrated development environments don't integrate much."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "U04E5QAD6DD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1689176863.410249",
        "client_msg_id": "30eeb6e0-d05f-471b-a000-6ded005dda35",
        "text": "Having a \"try demo\" button next to a function that does some kinda visualization of how it works would be :fire:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VkiV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having a \"try demo\" button next to a function that does some kinda visualization of how it works would be "
                            },
                            {
                                "type": "emoji",
                                "name": "fire",
                                "unicode": "1f525"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689176954.243139",
        "client_msg_id": "e340d548-f365-4c2b-b26e-7a880437fcaf",
        "text": "For history of a codebase I go spelunking in version control. Write good commit messages, people! You want features to be easy to delete, and they'll only be easy to delete if (Chesterton's Fence) we are confident we understand why they exist in the first place.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f5KPG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For history of a codebase I go spelunking in version control. Write good commit messages, people! You want features to be easy to delete, and they'll only be easy to delete if (Chesterton's Fence) we are confident we understand why they exist in the first place."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1689176992.815039",
        "client_msg_id": "f67a1423-0582-464c-8505-4862deadea57",
        "text": "But IRL I wonder if I would feel justified in taking the time to add those kinds of things in the kind of work scenarios I've always been in. Too much time pressure, too hard to justify to stakeholders why I'm making such fun documentation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "014",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But IRL I wonder if I would feel justified in taking the time to add those kinds of things in the kind of work scenarios I've always been in. Too much time pressure, too hard to justify to stakeholders why I'm making such fun documentation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689177092.800509",
        "client_msg_id": "7c7fdc00-e1c2-4ef4-b8c2-af28357360d1",
        "text": "(Sorry to go all <#C01932BJGE8|present-company>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EUm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Sorry to go all "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C01932BJGE8"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689177720.373019",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1689177723.000000"
        },
        "client_msg_id": "28f8581f-1684-4811-bcfa-c07f1f6226bb",
        "text": "Yeah, I think the present company approach leaves a lot to be desired. I'm almost never interested in the actual history of a project, but in an idealized, rational reconstruction of the history. Version control doesn't actually tell use why things exist. If well written, it might contain the public reasons people are willing to state why they did something. But there is always more to it than that.\n\nAt the simplest, least contentious level, they might just write something that doesn't make sense to me personally. They may conceptualize things in a way I don't. What I need is to translate that history into terms that I can understand. Where do I record that?\n\nPerhaps parts A and B were made at different times, but for my purposes it is more useful to consider them as a whole, how can represent this?\n\nMore contentiously, there is always more to the history than what is recorded in version control. Easy examples, how does version control correlate to changes outside the code? RM used to refer to the Regional Manager, but now RM means Relationship Manager, which is what the code calls a CM (Customer Manager). Knowing the version control story doesn't help me know this story. Less easy example, we often don't tell the whole story in source control. Why did we choose framework X, because framework Y has a bad rep at this company because a team failed with it. Why don't we just make an obvious change to module A, because person B will get mad.\n\nWhy is this test written differently? Because Josh thought it was a good idea, because it was easy to write, but he never had to go back and modify them. We all told him they were awful to modify, he didn't listen. Then we made sure he got a ticket where he'd have to modify his own test. Now, he realizes how wrong he was, but is too lazy to fix it. (Definitely not a real example...)\n\nNone of this is in the version control history. But all of it matters for how we approach our code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kxKx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I think the present company approach leaves a lot to be desired. I'm almost never interested in the actual history of a project, but in an idealized, rational reconstruction of the history. Version control doesn't actually tell use why things exist. If well written, it might contain the public reasons people are willing to state why they did something. But there is always more to it than that.\n\nAt the simplest, least contentious level, they might just write something that doesn't make sense to me personally. They may conceptualize things in a way I don't. What I need is to translate that history into terms that I can understand. Where do I record that?\n\nPerhaps parts A and B were made at different times, but for my purposes it is more useful to consider them as a whole, how can represent this?\n\nMore contentiously, there is always more to the history than what is recorded in version control. Easy examples, how does version control correlate to changes outside the code? RM used to refer to the Regional Manager, but now RM means Relationship Manager, which is what the code calls a CM (Customer Manager). Knowing the version control story doesn't help me know this story. Less easy example, we often don't tell the whole story in source control. Why did we choose framework X, because framework Y has a bad rep at this company because a team failed with it. Why don't we just make an obvious change to module A, because person B will get mad.\n\nWhy is this test written differently? Because Josh thought it was a good idea, because it was easy to write, but he never had to go back and modify them. We all told him they were awful to modify, he didn't listen. Then we made sure he got a ticket where he'd have to modify his own test. Now, he realizes how wrong he was, but is too lazy to fix it. (Definitely not a real example...)\n\nNone of this is in the version control history. But all of it matters for how we approach our code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1689177781.150469",
        "client_msg_id": "aeeaf127-666b-4949-b30d-d0b38986829d",
        "text": "version control + documentary film crew?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NuCJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "version control + documentary film crew?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689177962.980699",
        "client_msg_id": "fc0eba5b-4939-470a-bc1a-a3602c86ae3b",
        "text": "<@U05G29UQHKK> Why justify it? We are hired to do what is right, not what we are told. We have the knowledge and expertise to make the right tradeoffs. We ought to care about our craft and do things that are not strictly necessary. If you want a personal justification for it that is couched in business terms, programmer happiness matters because turn-over is one of the most expensive things a company can deal with.\n\nBut I think we need to get out of this scarcity mindset. We can make time for the things we care about. We can have good codebases we like to work on. We can do all of this and still meet stakeholder expectations. It just requires a very consciously chosen, particular way of working. It requires us to assert our expertise, to take ownership of the programming aspects of the work and not simply do what we are told.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ROO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05G29UQHKK"
                            },
                            {
                                "type": "text",
                                "text": " Why justify it? We are hired to do what is right, not what we are told. We have the knowledge and expertise to make the right tradeoffs. We ought to care about our craft and do things that are not strictly necessary. If you want a personal justification for it that is couched in business terms, programmer happiness matters because turn-over is one of the most expensive things a company can deal with.\n\nBut I think we need to get out of this scarcity mindset. We can make time for the things we care about. We can have good codebases we like to work on. We can do all of this and still meet stakeholder expectations. It just requires a very consciously chosen, particular way of working. It requires us to assert our expertise, to take ownership of the programming aspects of the work and not simply do what we are told."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "sunrise",
                "users": [
                    "UMQ6LR9NZ",
                    "U02QC0PPER3"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1689178346.552789",
        "client_msg_id": "b61b8989-67ee-494e-8468-e5380a59f992",
        "text": "I definitely do try to focus on DX as much as I can, especially as I get more senior and need to set an example in the organization. I think I may have misplaced the origin of my anxiety as I was responding, not sure why.\n\nRecently I started a new role at a company which struggled a bit with frontend, my expertise. I felt a lot of pressure to balance digging in and providing great learning resources on particular issues, with the sheer volume of problem areas which needed my attention. It took hours or even days to provide high-quality learning material. Prioritization was hard, even though my manager was really supportive of my efforts.\n\nMy observation on general practice is that early on, the codebase is extremely volatile because the product is volatile. Ideally, huge swaths of that code will be deleted or refactored multiple times within the year, because to not do that implies your system isn't evolving with the knowledge you're gaining about the problem. But this is also the time when culture is formed, and when it's really important to put those practices into place...\n\nWhat I'm trying to figure out is how far to push it, how much investment to make into documenting and polishing things which may not survive the month. Maybe one problem is that when we delete code (which I very much want to do) all that work disappears from view.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gg==",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I definitely do try to focus on DX as much as I can, especially as I get more senior and need to set an example in the organization. I think I may have misplaced the origin of my anxiety as I was responding, not sure why.\n\nRecently I started a new role at a company which struggled a bit with frontend, my expertise. I felt a lot of pressure to balance digging in and providing great learning resources on particular issues, with the sheer volume of problem areas which needed my attention. It took hours or even days to provide high-quality learning material. Prioritization was hard, even though my manager was really supportive of my efforts.\n\nMy observation on general practice is that early on, the codebase is extremely volatile because the product is volatile. Ideally, huge swaths of that code will be deleted or refactored multiple times within the year, because to not do that implies your system isn't evolving with the knowledge you're gaining about the problem. But this is also the time when culture is formed, and when it's really important to put those practices into place...\n\nWhat I'm trying to figure out is how far to push it, how much investment to make into documenting and polishing things which may not survive the month. Maybe one problem is that when we delete code (which I very much want to do) all that work disappears from view."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1689178441.008739",
        "client_msg_id": "ec5e8852-b69e-46a1-a0ba-0626b4090aa0",
        "text": "Maybe it would be nice to have code tombstones\/ghosts",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GiPvn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe it would be nice to have code tombstones\/ghosts"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689178546.327129",
        "client_msg_id": "c4c464ab-8262-4793-9729-6b4185e2fcb5",
        "text": "<@U05597GCDDK> Glad you enjoyed the discussion. I definitely think you've hit on some really important aspects of expressivity.  I do think it is a complicated subject and hard to pin down exactly what we want to say it is.\n\nOn one hand expressivity is how we say something, your \"Using my own words\" on the other hand it is also about what can be said. A DSL would then be more expressive in the \"Using my own words\" sense, but less expressive in what can be said.\n\nTo me an expressive language works on both of these aspects. It allows me to express things the way I might want them to, but also allows me to express more kinds of things. Depending on my interests and contexts those kinds of things might change. So I don't think we can make a total order out of expressivity in languages.\n\nFor example, if we compare Haskell and Idris, I can express types in Idris that I can't (without contortions) in Haskell. I am able to represent the type of printf in the language itself in a very clear and concise way.\n\nBut when we compare lisp and Idris things are a bit confusing. Lisp does not have the kind of type system does. So for example, I can't express things things like \"this function is total\" in the way I can in Idris, but I also can express complex macros and have fewer limits on the kinds of things I can express because I lack that type system.\n\nC feels less expressive than Java say, but I can express things about memory layout and allocation that I can't (easily) in Java.\n\nI think this is what make expressivity so hard. Gaining to the ability to express something can restrict some other aspects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wFMYi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05597GCDDK"
                            },
                            {
                                "type": "text",
                                "text": " Glad you enjoyed the discussion. I definitely think you've hit on some really important aspects of expressivity.  I do think it is a complicated subject and hard to pin down exactly what we want to say it is.\n\nOn one hand expressivity is how we say something, your \"Using my own words\" on the other hand it is also about what can be said. A DSL would then be more expressive in the \"Using my own words\" sense, but less expressive in what can be said.\n\nTo me an expressive language works on both of these aspects. It allows me to express things the way I might want them to, but also allows me to express more kinds of things. Depending on my interests and contexts those kinds of things might change. So I don't think we can make a total order out of expressivity in languages.\n\nFor example, if we compare Haskell and Idris, I can express types in Idris that I can't (without contortions) in Haskell. I am able to represent the type of printf in the language itself in a very clear and concise way.\n\nBut when we compare lisp and Idris things are a bit confusing. Lisp does not have the kind of type system does. So for example, I can't express things things like \"this function is total\" in the way I can in Idris, but I also can express complex macros and have fewer limits on the kinds of things I can express because I lack that type system.\n\nC feels less expressive than Java say, but I can express things about memory layout and allocation that I can't (easily) in Java.\n\nI think this is what make expressivity so hard. Gaining to the ability to express something can restrict some other aspects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U016VUZGUUQ",
                    "U013WBS1B1C"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689178590.934669",
        "client_msg_id": "f2bc14d2-5d6b-4d16-9303-d57b95ef16b9",
        "text": "<@U013WBS1B1C> Super interested in Red\/Rebol. Though I haven't written much\/any. It's definitely a tradition that doesn't get much attention.Any good texts on it that we should read?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5cl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013WBS1B1C"
                            },
                            {
                                "type": "text",
                                "text": " Super interested in Red\/Rebol. Though I haven't written much\/any. It's definitely a tradition that doesn't get much attention.Any good texts on it that we should read?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1689178686.917949",
        "edited": {
            "user": "U02QC0PPER3",
            "ts": "1689178718.000000"
        },
        "client_msg_id": "e8e10d9c-169d-48e6-b237-94d6ed2789d6",
        "text": "Hmm.  Git already stores them :ghost: but editors dont visualize them.\nQ: how do you know\/mark which tombstones are interesting?\nI've seen projects that comment out code, or move code to Attic\/ dir before fully deleting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QRtG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm.  Git already stores them "
                            },
                            {
                                "type": "emoji",
                                "name": "ghost",
                                "unicode": "1f47b"
                            },
                            {
                                "type": "text",
                                "text": " but editors dont visualize them.\nQ: how do you know\/mark which tombstones are interesting?\nI've seen projects that comment out code, or move code to Attic\/ dir before fully deleting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689178924.234789",
        "client_msg_id": "0700eff7-4aee-48a3-9304-0f7216d30f2b",
        "text": "<@UK3LH8CF5> it might be worth stating (refreshing) our assumptions about what \"future of coding\" means :slightly_smiling_face:\n• On the one hand, people will always have unstated reasons for doing something. Changing that feels out of scope for \"future of coding\".\n• On the other hand, reducing the friction to write down the reasons _you are willing to state_ seems in scope. I think any improvement in this area also would be of huge benefit, far more than any typographical changes.\n• I don't _just_ use version control, I use version control along with all the other tools the project\/team\/culture uses. It's always going to be an exercise in forensics\/archeology, changing that feels out of scope. A totalizing tool that tries to capture everything seems infeasible. To put it another way, the fact that A and B happened at different times by different people (with different understandings) seems _essential_ to understanding the interaction between them. That will never change, changing that feels out of scope.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hsy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " it might be worth stating (refreshing) our assumptions about what \"future of coding\" means "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "On the one hand, people will always have unstated reasons for doing something. Changing that feels out of scope for \"future of coding\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "On the other hand, reducing the friction to write down the reasons "
                                    },
                                    {
                                        "type": "text",
                                        "text": "you are willing to state",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " seems in scope. I think any improvement in this area also would be of huge benefit, far more than any typographical changes."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I don't "
                                    },
                                    {
                                        "type": "text",
                                        "text": "just",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " use version control, I use version control along with all the other tools the project\/team\/culture uses. It's always going to be an exercise in forensics\/archeology, changing that feels out of scope. A totalizing tool that tries to capture everything seems infeasible. To put it another way, the fact that A and B happened at different times by different people (with different understandings) seems "
                                    },
                                    {
                                        "type": "text",
                                        "text": "essential",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " to understanding the interaction between them. That will never change, changing that feels out of scope."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689178944.452709",
        "client_msg_id": "0fed79d7-cdf7-464b-957e-28786ad86259",
        "text": "My mood lately is captured by this song: <https:\/\/www.youtube.com\/watch?v=0YaXx6TnaKE>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=0YaXx6TnaKE",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/0YaXx6TnaKE\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/0YaXx6TnaKE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"The Land of Might-Have-Been - Novello\/Marsh\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=0YaXx6TnaKE",
                "fallback": "YouTube Video: The Land of Might-Have-Been - Novello\/Marsh",
                "title": "The Land of Might-Have-Been - Novello\/Marsh",
                "title_link": "https:\/\/www.youtube.com\/watch?v=0YaXx6TnaKE",
                "author_name": "nocturon",
                "author_link": "https:\/\/www.youtube.com\/@nocturon",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2uU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My mood lately is captured by this song: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=0YaXx6TnaKE"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689179021.082709",
        "client_msg_id": "c0966f7d-4d58-43eb-bad8-5aac7ce0ed29",
        "text": "<@U05G29UQHKK> I like that way of thinking about it much better. These are difficult balances to strike. Pragmatically, I'd say in early phases of projects, its much more important to establish common values and understanding among the people writing the code than it is to create documentation. Agreement on one value is worth 100 \"best practices\". I worked at a consultancy where we pumped out greenfield frontends at a crazy pace. These were all initial versions\/prototypes for a customer made in a month or two. Usually ended up being about 30k lines of code. We spent most of our time coming to agreements on what we want to explore in this project. What ideas do we want expressed in this codebase? What do we want to avoid?\n\nGetting on the same page there was more valuable than documenting what the codebase was. Jumping into a codebase you hadn't touch was much easier when you understood the ideas behind it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xF8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05G29UQHKK"
                            },
                            {
                                "type": "text",
                                "text": " I like that way of thinking about it much better. These are difficult balances to strike. Pragmatically, I'd say in early phases of projects, its much more important to establish common values and understanding among the people writing the code than it is to create documentation. Agreement on one value is worth 100 \"best practices\". I worked at a consultancy where we pumped out greenfield frontends at a crazy pace. These were all initial versions\/prototypes for a customer made in a month or two. Usually ended up being about 30k lines of code. We spent most of our time coming to agreements on what we want to explore in this project. What ideas do we want expressed in this codebase? What do we want to avoid?\n\nGetting on the same page there was more valuable than documenting what the codebase was. Jumping into a codebase you hadn't touch was much easier when you understood the ideas behind it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1689179235.099909",
        "client_msg_id": "9cd414ee-0e41-4b86-895e-9a824f4d0af3",
        "text": "Jimmy's examples run a gamut IMO from \"yeah, it would be really great to have that documented\" to \"no tool can save you from crummy coworkers :,)\"\n\nI particularly like the idea of runnable demos as part of the documentation. It reminds me of Python doctests, but potentially way cooler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C\/Ij",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jimmy's examples run a gamut IMO from \"yeah, it would be really great to have that documented\" to \"no tool can save you from crummy coworkers :,)\"\n\nI particularly like the idea of runnable demos as part of the documentation. It reminds me of Python doctests, but potentially way cooler."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "U035QJ14NN9"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689179246.575699",
        "client_msg_id": "9ab7d5c2-968f-4dd7-a859-31803117b8fc",
        "text": "<@U05G29UQHKK> <@UK3LH8CF5> The goal of tools should be to make it cheaper to do the right thing so you don't need to justify it to others. The need to justify to others won't go away unless you own your code. (Not to be confused with \"exercising ownership\" over code, a related and also useful idea.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M9=x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05G29UQHKK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " The goal of tools should be to make it cheaper to do the right thing so you don't need to justify it to others. The need to justify to others won't go away unless you own your code. (Not to be confused with \"exercising ownership\" over code, a related and also useful idea.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1689179317.343189",
        "client_msg_id": "dd41a3e8-8a6d-4819-880d-3a526639979c",
        "text": "this is not a shit post:\n\nwhat if the future of coding is the friends we made on the way?\n\nmeaning, what if the future of coding, sort of how DynamicLand suggests, is waaaaay less about technical things, and more a new way of approaching code in community\/communication with a team?\n\nI think Naur was sort of circling this thought",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OBl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is not a shit post:\n\nwhat if the future of coding is the friends we made on the way?\n\nmeaning, what if the future of coding, sort of how DynamicLand suggests, is waaaaay less about technical things, and more a new way of approaching code in community\/communication with a team?\n\nI think Naur was sort of circling this thought"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689179369.599609",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1689179418.000000"
        },
        "client_msg_id": "1ae9e860-999b-4143-97e5-a5d13d0b023d",
        "text": "<@UCUSW7WVD> I think I may have assumed too much in my post. I agree that we can't change that people have unstated reasons. Nor can we capture everything. My point was that our current tools seem (to me) to not account for this fact.\n\nVersion control is an immutable history. The history I care about isn't. It is an opinionated, shifting history. Not because what actually happened changed, but because my uses of that raw stuff change. This doesn't mean capturing everything. In fact it means precisely not capturing everything. What we need are tools that let us form our own views of history. That let us create new histories but that are rooted in our codebases, not external to them. I don't see tools doing that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lca",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I think I may have assumed too much in my post. I agree that we can't change that people have unstated reasons. Nor can we capture everything. My point was that our current tools seem (to me) to not account for this fact.\n\nVersion control is an immutable history. The history I care about isn't. It is an opinionated, shifting history. Not because what actually happened changed, but because my uses of that raw stuff change. This doesn't mean capturing everything. In fact it means precisely not capturing everything. What we need are tools that let us form our own views of history. That let us create new histories but that are rooted in our codebases, not external to them. I don't see tools doing that."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1689179508.180479",
        "client_msg_id": "3cfa853c-0d97-48a8-87f4-8cf1788b6653",
        "text": "<https:\/\/storybook.js.org\/|https:\/\/storybook.js.org\/> is a quite successful docs-with-runnable demos thing.  (A bit easier when the subject matter is UI components.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jGYHC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/storybook.js.org\/",
                                "text": "https:\/\/storybook.js.org\/"
                            },
                            {
                                "type": "text",
                                "text": " is a quite successful docs-with-runnable demos thing.  (A bit easier when the subject matter is UI components.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1689179570.910059",
        "client_msg_id": "9f2e9c10-3f78-47aa-a8d8-d0d294be9c94",
        "text": "<@UK3LH8CF5> Agreed! FYI, here's the tool I created out of frustration with using immutable version control for history: <http:\/\/akkartik.name\/post\/wart-layers>. But an immutable append-only log is also a key tool for reconstructing history for ourselves.\n\n<@UMQ6LR9NZ> This might be surprising, but the _whole_ goal of Mu was communication. In particular, to record why for every single assumption in a system, working up from bedrock. (I stopped working on it because I realized the key places where this is impossible.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pjLYB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " Agreed! FYI, here's the tool I created out of frustration with using immutable version control for history: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/wart-layers"
                            },
                            {
                                "type": "text",
                                "text": ". But an immutable append-only log is also a key tool for reconstructing history for ourselves.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": " This might be surprising, but the "
                            },
                            {
                                "type": "text",
                                "text": "whole",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " goal of Mu was communication. In particular, to record why for every single assumption in a system, working up from bedrock. (I stopped working on it because I realized the key places where this is impossible.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMQ6LR9NZ",
                    "U02QC0PPER3",
                    "UK3LH8CF5"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689179878.027749",
        "client_msg_id": "46b9c0b4-ff2f-40c3-9448-51a495d1f87f",
        "text": "&gt; what if the future of coding is the friends we made on the way?\nI twitted that out for tools for thought. But that one works better because of the double entendre.\n\nI do think the culture is a huge part of the FOC mentality. It's why I'm personally not interested in just being a press release venue for startups building tools. We have to take a wholistic view of the way technology relates to all the aspects of the world and our life. We have to think about the ways in which the technology we makes impact people. When building new technology, it is less interesting to me what \"problem it solves\" and more interesting what it says. What's its viewpoint? How does it change the way people approach life and tech? That's why I'm interested in reading the papers we read. These are people thinking about this stuff, thinking about what we ought to make, and what it means. Not simply building a tool so a VC can get a bigger return on investment.  We already have lots of talk about those companies and what they are doing, let's do something different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Shm",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what if the future of coding is the friends we made on the way?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI twitted that out for tools for thought. But that one works better because of the double entendre.\n\nI do think the culture is a huge part of the FOC mentality. It's why I'm personally not interested in just being a press release venue for startups building tools. We have to take a wholistic view of the way technology relates to all the aspects of the world and our life. We have to think about the ways in which the technology we makes impact people. When building new technology, it is less interesting to me what \"problem it solves\" and more interesting what it says. What's its viewpoint? How does it change the way people approach life and tech? That's why I'm interested in reading the papers we read. These are people thinking about this stuff, thinking about what we ought to make, and what it means. Not simply building a tool so a VC can get a bigger return on investment.  We already have lots of talk about those companies and what they are doing, let's do something different."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UMQ6LR9NZ",
                    "U04E5QAD6DD",
                    "U02QC0PPER3"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1689180221.992019",
        "client_msg_id": "e5dd4ec2-bb6e-400a-b4d6-dc3f54af9efc",
        "text": "loving this! these days I mostly work in _product_ which means a weird thing in the government context where I work, but, it allows me the ability to manage teams and set priorities — I often frame this work, personally, in a FoC context — “okay, we normally do it this way, but what falls out of that way? what can we do different?” — I don’t have like wicked cogent thoughts about it, or a secret sauce, but I’ve found there is sort of a super power to be had by not being an asshole, and knowing how to bridge the technical and interpersonal. Many of the papers you all have shared through FoC I’ve found really insightful for this sort of approach, even if not directly about “management.” Meanwhile, everything I’ve ever read about management, proper, is so squarely situated within a capitalist context that its priorities are mostly divergent from what I understand to be the goal of FoC",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2718Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "loving this! these days I mostly work in "
                            },
                            {
                                "type": "text",
                                "text": "product",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which means a weird thing in the government context where I work, but, it allows me the ability to manage teams and set priorities — I often frame this work, personally, in a FoC context — “okay, we normally do it this way, but what falls out of that way? what can we do different?” — I don’t have like wicked cogent thoughts about it, or a secret sauce, but I’ve found there is sort of a super power to be had by not being an asshole, and knowing how to bridge the technical and interpersonal. Many of the papers you all have shared through FoC I’ve found really insightful for this sort of approach, even if not directly about “management.” Meanwhile, everything I’ve ever read about management, proper, is so squarely situated within a capitalist context that its priorities are mostly divergent from what I understand to be the goal of FoC"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UK3LH8CF5",
                    "U04E5QAD6DD"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1689181395.943029",
        "client_msg_id": "8de855d5-127b-4881-9747-960a4f5b431c",
        "text": "<@UCUSW7WVD> yeah me voicing \"it's hard to prioritize this kind of work\" is definitely meant to direct toward, \"can we make these things not only possible, but much easier?\" One thing I find is underestimated in docs\/examples is upkeep. I can get people to adopt Storybook but I can't get them to keep it up to date with changes. If we could make a system which captures the intent of your documentation or example and helps update it as the code changes, perhaps that would help make the work feel more worthwhile over the long term.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qMpm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " yeah me voicing \"it's hard to prioritize this kind of work\" is definitely meant to direct toward, \"can we make these things not only possible, but much easier?\" One thing I find is underestimated in docs\/examples is upkeep. I can get people to adopt Storybook but I can't get them to keep it up to date with changes. If we could make a system which captures the intent of your documentation or example and helps update it as the code changes, perhaps that would help make the work feel more worthwhile over the long term."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMQ6LR9NZ",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1689181906.161099",
        "client_msg_id": "90f13739-a24d-410b-a3cf-22c31eb2ea17",
        "text": "My best shot at defining expressivity is in terms of some abstract space of logical relations\/structures. The elements to be related include types, machine details, phase distinctions, etc, as well as elements of your application domain.\n\nA more expressive language is one that can span more of this space. To the extent that languages cover (roughly) the same space, you can rank them by (roughly average) concision. We can recover notions like C being more expressive for machine details, or a DSL being more expressive for a given domain, by restricting the logical space we're considering.\n\nIt gets tricky, though, because you're probably talking about Turing complete languages that can all simulate each other, and just ranking by concision doesn't quite capture the notion that writing a simulator doesn't \"count\" as expressing it; even if you could write a logical inference engine in five lines of C, that doesn't change the intuitive notion that Prolog is more expressive for certain problems. You want a notion of \"direct expression\" that's not covered by concision. Maybe something to do with (cyclomatic?) complexity of the code to express a given thing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MK4V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My best shot at defining expressivity is in terms of some abstract space of logical relations\/structures. The elements to be related include types, machine details, phase distinctions, etc, as well as elements of your application domain.\n\nA more expressive language is one that can span more of this space. To the extent that languages cover (roughly) the same space, you can rank them by (roughly average) concision. We can recover notions like C being more expressive for machine details, or a DSL being more expressive for a given domain, by restricting the logical space we're considering.\n\nIt gets tricky, though, because you're probably talking about Turing complete languages that can all simulate each other, and just ranking by concision doesn't quite capture the notion that writing a simulator doesn't \"count\" as expressing it; even if you could write a logical inference engine in five lines of C, that doesn't change the intuitive notion that Prolog is more expressive for certain problems. You want a notion of \"direct expression\" that's not covered by concision. Maybe something to do with (cyclomatic?) complexity of the code to express a given thing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1689185235.276549",
        "client_msg_id": "bfa11f63-d01f-4d74-9fbe-efb2462713d2",
        "text": "Maybe we can use this as a hack somehow to get old threads back?\n\nTrick: Your _own_ \"sent\" items seem to go right back in time, apart from some random ones that don't (and it's annoying if you hit them cos it jumps just to the channel inline and you have to go back and re-fill the whole scroll on the \"sent\" page; there's no visible indication that a post of yours will do that).\n\nI found out my first post here was 5 years ago!!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CAp0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe we can use this as a hack somehow to get old threads back?\n\nTrick: Your "
                            },
                            {
                                "type": "text",
                                "text": "own",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"sent\" items seem to go right back in time, apart from some random ones that don't (and it's annoying if you hit them cos it jumps just to the channel inline and you have to go back and re-fill the whole scroll on the \"sent\" page; there's no visible indication that a post of yours will do that).\n\nI found out my first post here was 5 years ago!!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1689186047.097499",
        "client_msg_id": "572796d5-4fbe-4eca-8d95-777d33708548",
        "text": "Well I've hit refresh on Slack and of course it's behaving differently today! Now the right hand sidebar is often not present and the Sent stuff always jumps away from the scrolled history. Argh!! On the plus side, I can now see a thread I couldn't see yesterday, one of the aberrant ones I mentioned above",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oe0P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well I've hit refresh on Slack and of course it's behaving differently today! Now the right hand sidebar is often not present and the Sent stuff always jumps away from the scrolled history. Argh!! On the plus side, I can now see a thread I couldn't see yesterday, one of the aberrant ones I mentioned above"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689191089.737759",
        "client_msg_id": "06e21dea-63d3-4af7-b325-02d04442e691",
        "text": "The old Rebol core guide (<http:\/\/www.rebol.com\/docs\/core23\/rebolcore.html>) is still a seminal reference for the language. <http:\/\/www.rebol.com\/docs.html> links to some other primer bits. Red's reference docs are [here](<https:\/\/github.com\/red\/docs\/tree\/master\/en>) but not in User Guide form for learning. A Red user has written <https:\/\/helpin.red\/>. You can also scan the old blog entries at <https:\/\/www.red-lang.org\/> for Red-specific features.\n\nThere are a few other langs out there with the same heritage, which we sometimes call Redbol as a \"genre\". :^)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "attachments": [
            {
                "from_url": "http:\/\/www.rebol.com\/docs.html",
                "service_icon": "http:\/\/www.rebol.com\/favicon.ico",
                "id": 1,
                "original_url": "http:\/\/www.rebol.com\/docs.html",
                "fallback": "REBOL Documentation",
                "text": "Links to all documentation, including tutorials, examples, manuals, and references.",
                "title": "REBOL Documentation",
                "title_link": "http:\/\/www.rebol.com\/docs.html",
                "service_name": "rebol.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V4SP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The old Rebol core guide ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.rebol.com\/docs\/core23\/rebolcore.html"
                            },
                            {
                                "type": "text",
                                "text": ") is still a seminal reference for the language. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.rebol.com\/docs.html"
                            },
                            {
                                "type": "text",
                                "text": " links to some other primer bits. Red's reference docs are [here]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/red\/docs\/tree\/master\/en"
                            },
                            {
                                "type": "text",
                                "text": ") but not in User Guide form for learning. A Red user has written "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/helpin.red\/"
                            },
                            {
                                "type": "text",
                                "text": ". You can also scan the old blog entries at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.red-lang.org\/"
                            },
                            {
                                "type": "text",
                                "text": " for Red-specific features.\n\nThere are a few other langs out there with the same heritage, which we sometimes call Redbol as a \"genre\". :^)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1689191258.868469",
        "client_msg_id": "6d6849ad-c7c9-4434-ab25-110218e2b33d",
        "text": "Thanks definitely helpful. I'm mostly interesting in something a bit more meta\/philosophical on the perspective. Like a paper giving the why of Rebol like languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YmAw=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks definitely helpful. I'm mostly interesting in something a bit more meta\/philosophical on the perspective. Like a paper giving the why of Rebol like languages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689191376.962689",
        "client_msg_id": "17108742-9287-4f36-bb5e-dabf057bada3",
        "text": "<@UJBAJNFLK> we don't know if Carl will continue with AltScript or not. He tends to disappear into his cave for long stretches. :^) Rebol2 (R2) was closed source, but Rebol3 (R3) was done quickly by Carl and a few others to make a FOSS version. It's still alive as well. Where Rebol is written in C at the low level, Red was bootstrapped on R2 and is designed to be self-hosted, hence the need for Red\/System.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V=Ao",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " we don't know if Carl will continue with AltScript or not. He tends to disappear into his cave for long stretches. :^) Rebol2 (R2) was closed source, but Rebol3 (R3) was done quickly by Carl and a few others to make a FOSS version. It's still alive as well. Where Rebol is written in C at the low level, Red was bootstrapped on R2 and is designed to be self-hosted, hence the need for Red\/System."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689192276.153629",
        "client_msg_id": "ee5d79fb-9956-4d08-b780-e07585eb85bd",
        "text": "If we go Rich Hickey on this: *expressive* - Effectively conveying thought or feeling.\n\nTo <@UK3LH8CF5>’s point, a language might be expressive in terms of type systems, but not at all able to express a GUI.\n\nWe also have limits, which tooling can help us overcome. For example, in a low level language, you may want\/need to express multiple integer types by size and signing ability, but no strings. In an HLL, you just need `number` but have many types of strings (plain, filename, email address, url, tag, etc.). Maybe you justify a Cartesian coordinate type, but not UTM coordinates for mapping projections. How do we keep from being overwhelmed, while being able to express things (thinking text here) as we do with natural language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=rl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we go Rich Hickey on this: "
                            },
                            {
                                "type": "text",
                                "text": "expressive",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - Effectively conveying thought or feeling.\n\nTo "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "’s point, a language might be expressive in terms of type systems, but not at all able to express a GUI.\n\nWe also have limits, which tooling can help us overcome. For example, in a low level language, you may want\/need to express multiple integer types by size and signing ability, but no strings. In an HLL, you just need "
                            },
                            {
                                "type": "text",
                                "text": "number",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but have many types of strings (plain, filename, email address, url, tag, etc.). Maybe you justify a Cartesian coordinate type, but not UTM coordinates for mapping projections. How do we keep from being overwhelmed, while being able to express things (thinking text here) as we do with natural language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689193594.843739",
        "client_msg_id": "d307b878-a1cf-4317-b35d-26c59f59fb23",
        "text": "The why: Rebol was designed for the semantic exchange of information between people and machines.\n\nThat's why there are so many datatypes with literal forms. Because we need them to talk about things easily, both on the human and the machine side.\n\nOn the philosophy of Redbol, that's quite unfortunately strewn throughout time and space. I can say that Carl spent 20 years *designing* Rebol, after deep study of denotational semantics, before building and releasing it. The first version was done in Scheme, but was too slow. He had built things using many paradigms, and rejected OO as the answer after trying it. I can't speak for him, but his designs say he values simplicity and will give up other things for that. He also values the human side which is why while Rebol is a totally wacky language internally, when compared to how other langs work, there is this lovely, simple façade that lets you wade in comfortably for a while (or forever) before you fall off the edge and into the deep.\n\nFor this chat, Red is expressive in different ways to different people. To a high level user, it's a single EXE with a built-in GUI system, compiles standalone EXEs without any external tools, and is easy to learn. To a PL enthusiast, it's Logo (Lisp without parens) that uses definitional scoping, f-exprs, and free ranging evaluation. Each word is bound to a context and there is really no such thing as \"code\". There is only data that is evaluated. See: [this](<https:\/\/github.com\/red\/red\/wiki\/%5BDOC%5D-Why-you-have-to-copy-series-values#a-designers-view>)\n\nI could say it's a contradiction in terms, but it's probably just as accurate to say \"Old School\". :^)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lCmL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The why: Rebol was designed for the semantic exchange of information between people and machines.\n\nThat's why there are so many datatypes with literal forms. Because we need them to talk about things easily, both on the human and the machine side.\n\nOn the philosophy of Redbol, that's quite unfortunately strewn throughout time and space. I can say that Carl spent 20 years "
                            },
                            {
                                "type": "text",
                                "text": "designing",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Rebol, after deep study of denotational semantics, before building and releasing it. The first version was done in Scheme, but was too slow. He had built things using many paradigms, and rejected OO as the answer after trying it. I can't speak for him, but his designs say he values simplicity and will give up other things for that. He also values the human side which is why while Rebol is a totally wacky language internally, when compared to how other langs work, there is this lovely, simple façade that lets you wade in comfortably for a while (or forever) before you fall off the edge and into the deep.\n\nFor this chat, Red is expressive in different ways to different people. To a high level user, it's a single EXE with a built-in GUI system, compiles standalone EXEs without any external tools, and is easy to learn. To a PL enthusiast, it's Logo (Lisp without parens) that uses definitional scoping, f-exprs, and free ranging evaluation. Each word is bound to a context and there is really no such thing as \"code\". There is only data that is evaluated. See: [this]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/red\/red\/wiki\/%5BDOC%5D-Why-you-have-to-copy-series-values#a-designers-view"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nI could say it's a contradiction in terms, but it's probably just as accurate to say \"Old School\". :^)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            },
            {
                "name": "beers",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1689210689.961569",
        "client_msg_id": "5312c0da-8adc-43c7-aecb-fb4a89a110ab",
        "text": "<@U013WBS1B1C> What's the best way to try Red on Apple Silicon? I tried the macOS download on the website, but I got \"“<http:\/\/red-view-12jul23-aea09888d.app|red-view-12jul23-aea09888d.app>” needs to be updated.\". Maybe I should just pull out a Raspberry Pi…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hp8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013WBS1B1C"
                            },
                            {
                                "type": "text",
                                "text": " What's the best way to try Red on Apple Silicon? I tried the macOS download on the website, but I got \"“red-view-12jul23-aea09888d.app” needs to be updated.\". Maybe I should just pull out a Raspberry Pi…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1689225498.782189",
        "edited": {
            "user": "U013WBS1B1C",
            "ts": "1689225517.000000"
        },
        "client_msg_id": "a5acd5bd-6f80-497a-a612-c4b0a9f14802",
        "text": "Red is currently 32-bit only, so no latest MacOS, and also no Apple silicon support. The downside of being your own toolchain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1689118227.745139",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O2h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Red is currently 32-bit only, so no latest MacOS, and also no Apple silicon support. The downside of being your own toolchain."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]