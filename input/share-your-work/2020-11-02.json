[
    {
        "user": "UF6RLAL7J",
        "type": "message",
        "ts": "1604309593.133900",
        "client_msg_id": "0684b6c1-ed5f-447c-a25e-41ef157eafc0",
        "text": "<@UEBG0NPDK>\n\n&gt; though when we tested it internally, people didn’t like it for writing\nI'd be curious to learn more here! I'm especially curious if this something that could be _fixed_ if we worked towards interactions that feel good in that sort of medium, or if there's some underlying thing we can't jump over?\n\n<@U013ZLJARC7>\n\n&gt; I'd like to see tiled window manager-style auto layout\nInteresting, I'd love to hear more - currently I have a \"got to source in a new split\" set up in vim which sounds similar to what you're proposing (when exploring new codebases I usually have a lot of panes opened this way, ultrawide monitor really helps then) - feels like we could improve on this a lot if I wasn't limited by what vim can do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfede74ebb05",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fede74ebb05f68b74971bfc332857f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "",
            "real_name": "Szymon Kaliski",
            "display_name": "szymon_k",
            "team": "T5TCAFTA9",
            "name": "hi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PXrn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "though when we tested it internally, people didn’t like it for writing"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'd be curious to learn more here! I'm especially curious if this something that could be "
                            },
                            {
                                "type": "text",
                                "text": "fixed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if we worked towards interactions that feel good in that sort of medium, or if there's some underlying thing we can't jump over?\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to see tiled window manager-style auto layout"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nInteresting, I'd love to hear more - currently I have a \"got to source in a new split\" set up in vim which sounds similar to what you're proposing (when exploring new codebases I usually have a lot of panes opened this way, ultrawide monitor really helps then) - feels like we could improve on this a lot if I wasn't limited by what vim can do."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1604333763.136900",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1604333786.000000"
        },
        "client_msg_id": "5aa484e6-754d-4519-baff-d414e47de6ae",
        "text": "I went on the Handmade Network podcast last week to talk about WhiteBox, the importance of rapid feedback, design guided by an understanding of both human &amp; computer capabilities, and the future of software dev tools. I brought up the Future of Coding community, Brett Victor\/Dynamicland and hopefully a few other things of interest to people here.\nLet me know what you think :grin:\n\n&lt;<https:\/\/handmade.network\/podcast\/ep\/6dc1dd60-3462-4ae6-b488-e61782ada691>&gt;\n&gt; Andrew Reece, creator of Handmade Network project WhiteBox (<https:\/\/whitebox.handmade.network>), a real-time debugging tool, joins us to discuss WhiteBox, low-level programming, improving the cycle of human-computer interaction both in the physical and software spaces, instant feedback, providing insight into the multiple dimensions that define a program and its effects, and the future of computing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604333763.136900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1604343920.138200",
        "reply_users": [
            "UEDDR6L5Q",
            "U013HU44GLS"
        ],
        "replies": [
            {
                "user": "UEDDR6L5Q",
                "ts": "1604333920.137200"
            },
            {
                "user": "U013HU44GLS",
                "ts": "1604343920.138200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S9V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I went on the Handmade Network podcast last week to talk about WhiteBox, the importance of rapid feedback, design guided by an understanding of both human & computer capabilities, and the future of software dev tools. I brought up the Future of Coding community, Brett Victor\/Dynamicland and hopefully a few other things of interest to people here.\nLet me know what you think "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            },
                            {
                                "type": "text",
                                "text": "\n\n<"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/handmade.network\/podcast\/ep\/6dc1dd60-3462-4ae6-b488-e61782ada691"
                            },
                            {
                                "type": "text",
                                "text": ">\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Andrew Reece, creator of Handmade Network project WhiteBox ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/whitebox.handmade.network"
                            },
                            {
                                "type": "text",
                                "text": "), a real-time debugging tool, joins us to discuss WhiteBox, low-level programming, improving the cycle of human-computer interaction both in the physical and software spaces, instant feedback, providing insight into the multiple dimensions that define a program and its effects, and the future of computing."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1604333920.137200",
        "client_msg_id": "43db7fef-bd13-4629-9847-f8928a7b1e69",
        "text": "I'm not used to talking about programming in general, so I'd also welcome constructive criticism :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604333763.136900",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kfT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not used to talking about programming in general, so I'd also welcome constructive criticism :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1604342470.137500",
        "client_msg_id": "3432fc75-02be-4f85-a926-0d269207a910",
        "text": "I want to mention gtoolkit (comes up here often, but relevant to this thread). It provides the \"column view\" of exploring a code\/system down a specific path.\n\n<@U019PRL1BNU> some more feedback: I'm not sure drawing to code line is ideal. Just scrolling will cause the line to move and most lines will still be pinned to the top or bottom (out of view). However snapping the connection to the 'scroll bar location' which is more stable and visually provides the location of the sub-window in the parent window.\n\nOne issue I had browsing around was scrolling in the canvas vs scrolling within a window. Since it's the same shortcut, often I scroll in the window when I want to pan the canvas. Would be nice if I had to click to make it active first.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eV\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to mention gtoolkit (comes up here often, but relevant to this thread). It provides the \"column view\" of exploring a code\/system down a specific path.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U019PRL1BNU"
                            },
                            {
                                "type": "text",
                                "text": " some more feedback: I'm not sure drawing to code line is ideal. Just scrolling will cause the line to move and most lines will still be pinned to the top or bottom (out of view). However snapping the connection to the 'scroll bar location' which is more stable and visually provides the location of the sub-window in the parent window.\n\nOne issue I had browsing around was scrolling in the canvas vs scrolling within a window. Since it's the same shortcut, often I scroll in the window when I want to pan the canvas. Would be nice if I had to click to make it active first."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1604342900.137700",
        "edited": {
            "user": "U019PRL1BNU",
            "ts": "1604353949.000000"
        },
        "client_msg_id": "81f13e8b-f5d7-4f43-848c-c0f1720fb86d",
        "text": "<@UF6RLAL7J> <https:\/\/twitter.com\/_paulshen\/status\/1277048920015699968> I always go to definition in split because I don’t want to lose context where I’m jumping from, especially if it’s within the same file. “Jump lists” is vim’s native answer for this but because it’s not visible, I don’t trust it and feels like there’s significant cognitive load. Like you suggest, there might a tweak here without going full canvas.\n\nVSCode has “peek” windows but they feel too ephemeral to me and hard to navigate with keyboard.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8mdS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF6RLAL7J"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/_paulshen\/status\/1277048920015699968"
                            },
                            {
                                "type": "text",
                                "text": " I always go to definition in split because I don’t want to lose context where I’m jumping from, especially if it’s within the same file. “Jump lists” is vim’s native answer for this but because it’s not visible, I don’t trust it and feels like there’s significant cognitive load. Like you suggest, there might a tweak here without going full canvas.\n\nVSCode has “peek” windows but they feel too ephemeral to me and hard to navigate with keyboard."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UF6RLAL7J"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1604343189.138000",
        "client_msg_id": "d73f5d96-638f-4e29-bea2-d4a3a57d5fc5",
        "text": "<@U8A5MS6R1> Oh yeah I misread your initial comment. I might give that a shot\n\nre: scrolling. I was thinking of adding a delay on editor hover before activating scroll and seeing how that felt. You can also spacebar+drag and middle-click drag to pan canvas to avoid scrolling.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fGUGo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Oh yeah I misread your initial comment. I might give that a shot\n\nre: scrolling. I was thinking of adding a delay on editor hover before activating scroll and seeing how that felt. You can also spacebar+drag and middle-click drag to pan canvas to avoid scrolling."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013HU44GLS",
        "type": "message",
        "ts": "1604343920.138200",
        "client_msg_id": "2f00a1a4-1b6c-4d35-94af-faab1bacd376",
        "text": "Totally missed the fact that they were doing a podcast! That's great! Thanks for sharing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cb9e0e557132",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-12\/1132600153425_cb9e0e5571321437af24_72.jpg",
            "first_name": "Jean-Louis",
            "real_name": "Jean-Louis Villecroze",
            "display_name": "CocoaGeek",
            "team": "T5TCAFTA9",
            "name": "jeanlouis.villecroze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604333763.136900",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xGvq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally missed the fact that they were doing a podcast! That's great! Thanks for sharing"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEDDR6L5Q"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "I’ve been working on an “expressiveness benchmark” for data analytics DSLs. The goal: for a given framework (SQL, Datalog, vanilla Python, Python with Pandas, etc), what tasks are possible to express, and how hard is each task? Thinking about this as both a learning resource (quickly see lots of examples for a task or language) and an actual benchmark (eg compare lines of code or other metrics). Curious if anyone knows of a resource like this (eg Rosetta Code, TodoMVC).",
        "files": [
            {
                "id": "F01E243NME0",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UFB8STN7K",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FVT8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve been working on an “expressiveness benchmark” for data analytics DSLs. The goal: for a given framework (SQL, Datalog, vanilla Python, Python with Pandas, etc), what tasks are possible to express, and how hard is each task? Thinking about this as both a learning resource (quickly see lots of examples for a task or language) and an actual benchmark (eg compare lines of code or other metrics). Curious if anyone knows of a resource like this (eg Rosetta Code, TodoMVC)."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1604366257.141100",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1604430016.000000"
        },
        "thread_ts": "1604366257.141100",
        "reply_count": 16,
        "reply_users_count": 7,
        "latest_reply": "1606926781.344400",
        "reply_users": [
            "US370TRJA",
            "U019PRL1BNU",
            "UHWC9PXBL",
            "U01DKR962S2",
            "UAJKEBGP8",
            "U01BSAKUDJQ",
            "UFB8STN7K"
        ],
        "replies": [
            {
                "user": "US370TRJA",
                "ts": "1604374087.144800"
            },
            {
                "user": "U019PRL1BNU",
                "ts": "1604378089.145700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1604515801.149400"
            },
            {
                "user": "U01DKR962S2",
                "ts": "1604518870.151400"
            },
            {
                "user": "UAJKEBGP8",
                "ts": "1605705779.241400"
            },
            {
                "user": "U01BSAKUDJQ",
                "ts": "1606384871.274800"
            },
            {
                "user": "U01BSAKUDJQ",
                "ts": "1606406506.275100"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1606669326.281000"
            },
            {
                "user": "UAJKEBGP8",
                "ts": "1606744220.283800"
            },
            {
                "user": "UAJKEBGP8",
                "ts": "1606744228.284000"
            },
            {
                "user": "UAJKEBGP8",
                "ts": "1606744259.284200"
            },
            {
                "user": "U01BSAKUDJQ",
                "ts": "1606827772.316000"
            },
            {
                "user": "U01BSAKUDJQ",
                "ts": "1606827979.316300"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1606874121.339100"
            },
            {
                "user": "UAJKEBGP8",
                "ts": "1606919232.343600"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1606926781.344400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UCUSW7WVD",
                    "UNE30DK8U",
                    "U01BBPSACAH"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "URV726JVD",
                    "UA14TGLTC",
                    "UC21F8Q48",
                    "U01A1C2K8MP",
                    "US370TRJA",
                    "U019PRL1BNU",
                    "UAJ9DV971",
                    "U013ZLJARC7",
                    "U016LEA3J1H",
                    "U01DKR962S2",
                    "U01E8D4TS7M",
                    "UD6EXQVM0"
                ],
                "count": 12
            },
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UAJKEBGP8",
                    "U01DQ529FJ9",
                    "UDKTZSD6H"
                ],
                "count": 4
            },
            {
                "name": "beers",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1604374087.144800",
        "client_msg_id": "71AFE7DE-A4CF-4D43-BA0C-33BEF7200C5A",
        "text": "I love this idea! The closest thing I’ve seen that’s data analysis specific is various “how do do this R thing with pandas” articles helping people transition from 1 ecosystem to another, and the work being done by the data API consortium’s data analysis of 16+ library docs to inform a new standard for dataframe operations : <https:\/\/data-apis.org\/blog\/announcing_the_consortium\/|https:\/\/data-apis.org\/blog\/announcing_the_consortium\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604366257.141100",
        "parent_user_id": "UFB8STN7K",
        "attachments": [
            {
                "title": "Announcing the Consortium for Python Data API Standards",
                "title_link": "https:\/\/data-apis.org\/blog\/announcing_the_consortium\/",
                "text": "An initiative to develop API standards for n-dimensional arrays and dataframes",
                "fallback": "Announcing the Consortium for Python Data API Standards",
                "ts": 1597651200,
                "from_url": "https:\/\/data-apis.org\/blog\/announcing_the_consortium\/",
                "service_name": "data-apis.org",
                "id": 1,
                "original_url": "https:\/\/data-apis.org\/blog\/announcing_the_consortium\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QDzFv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this idea! The closest thing I’ve seen that’s data analysis specific is various “how do do this R thing with pandas” articles helping people transition from 1 ecosystem to another, and the work being done by the data API consortium’s data analysis of 16+ library docs to inform a new standard for dataframe operations : "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/data-apis.org\/blog\/announcing_the_consortium\/",
                                "text": "https:\/\/data-apis.org\/blog\/announcing_the_consortium\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFB8STN7K"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U019PRL1BNU",
        "type": "message",
        "ts": "1604378089.145700",
        "client_msg_id": "d995f643-5bb8-4598-acb2-a2197fb58eea",
        "text": "The one that came to my mind is ReScript comparing itself to JS. <https:\/\/rescript-lang.org\/docs\/manual\/latest\/overview> It serves as a quick overview of the language as well as motivation for adopting ReScript.\n\nA little off the question but I made a table comparing falsy values in languages <https:\/\/twitter.com\/_paulshen\/status\/1304149771205013505>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "748829849f84",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-10\/1444204670448_748829849f84c5e6d568_72.jpg",
            "first_name": "",
            "real_name": "Paul Shen",
            "display_name": "Paul Shen",
            "team": "T5TCAFTA9",
            "name": "paulshen0",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604366257.141100",
        "parent_user_id": "UFB8STN7K",
        "attachments": [
            {
                "service_name": "ReScript Documentation",
                "title": "Language Features Overview | ReScript Language Manual",
                "title_link": "https:\/\/rescript-lang.org\/docs\/manual\/latest\/overview",
                "text": "A quick overview on ReScript's syntax",
                "fallback": "ReScript Documentation: Language Features Overview | ReScript Language Manual",
                "from_url": "https:\/\/rescript-lang.org\/docs\/manual\/latest\/overview",
                "id": 1,
                "original_url": "https:\/\/rescript-lang.org\/docs\/manual\/latest\/overview"
            },
            {
                "fallback": "<https:\/\/twitter.com\/_paulshen|@_paulshen>: A list of programming languages with what is considered falsy. Correlates strongly with my feelings about the language.\n\n<https:\/\/www.notion.so\/paulshen\/Falsy-values-in-Programming-Languages-80fe0c797299405ab65594d2733b02fc> <https:\/\/pbs.twimg.com\/media\/EhlEK9OXgAYlCeI.jpg>",
                "ts": 1599768510,
                "author_name": "Paul Shen",
                "author_link": "https:\/\/twitter.com\/_paulshen\/status\/1304149771205013505",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/526983327387877376\/jvuczFpZ_normal.jpeg",
                "author_subname": "@_paulshen",
                "text": "A list of programming languages with what is considered falsy. Correlates strongly with my feelings about the language.\n\n<https:\/\/www.notion.so\/paulshen\/Falsy-values-in-Programming-Languages-80fe0c797299405ab65594d2733b02fc> <https:\/\/pbs.twimg.com\/media\/EhlEK9OXgAYlCeI.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/_paulshen\/status\/1304149771205013505",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EhlEK9OXgAYlCeI.jpg",
                "image_width": 962,
                "image_height": 531,
                "image_bytes": 45777,
                "id": 2,
                "original_url": "https:\/\/twitter.com\/_paulshen\/status\/1304149771205013505",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3gjv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The one that came to my mind is ReScript comparing itself to JS. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rescript-lang.org\/docs\/manual\/latest\/overview"
                            },
                            {
                                "type": "text",
                                "text": " It serves as a quick overview of the language as well as motivation for adopting ReScript.\n\nA little off the question but I made a table comparing falsy values in languages "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/_paulshen\/status\/1304149771205013505"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFB8STN7K",
                    "U013ZLJARC7",
                    "US370TRJA"
                ],
                "count": 3
            }
        ]
    }
]