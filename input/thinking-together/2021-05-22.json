[
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1621703421.018600",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1621721515.000000"
        },
        "client_msg_id": "147a7315-1240-4c6e-ac03-d7573cf88ee7",
        "text": "Konrad, on the topic of long term preservation of semantics, I was thinking if we could store the mapping of `bytes` to other structures in the long term stabilized storage as well, maybe that could work?\n\nFor the short term, something like mime type tagging can work, but a mime type is just a string tag. If a blob is annotated with `image\/png` we're likely to find decoders easily. However it gets harder for `text\/some-custom-format`. So instead of a string tag, what if we tag a file A with a link to another permanent file B which we call the _class_ for file A. The B file would describe how to parse the content of the A. But how do we know how to parse B? Either it is well known, or it would link to another class file C, perhaps. At some point we have to agree on a small language to describe the axiomatic description `B*`  that all classes eventually link up to. The main thing would be these descriptions would have to be machine agnostic (no x86 specific stuff). However, as an optimization these class descriptions would also link to x86 _implementations_ (stored in other files) of the parsers. So if you're running on architecture X, you could find the class for the content (A -&gt; B) and then lookup implementations for X (B --(X)--&gt; F). Parsers for future architectures could be added. Also, content files can be reencoded into instances of newer classes, if needed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1621455059.002300",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0YwSJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Konrad, on the topic of long term preservation of semantics, I was thinking if we could store the mapping of "
                            },
                            {
                                "type": "text",
                                "text": "bytes",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to other structures in the long term stabilized storage as well, maybe that could work?\n\nFor the short term, something like mime type tagging can work, but a mime type is just a string tag. If a blob is annotated with "
                            },
                            {
                                "type": "text",
                                "text": "image\/png",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we're likely to find decoders easily. However it gets harder for "
                            },
                            {
                                "type": "text",
                                "text": "text\/some-custom-format",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So instead of a string tag, what if we tag a file A with a link to another permanent file B which we call the "
                            },
                            {
                                "type": "text",
                                "text": "class",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for file A. The B file would describe how to parse the content of the A. But how do we know how to parse B? Either it is well known, or it would link to another class file C, perhaps. At some point we have to agree on a small language to describe the axiomatic description "
                            },
                            {
                                "type": "text",
                                "text": "B*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  that all classes eventually link up to. The main thing would be these descriptions would have to be machine agnostic (no x86 specific stuff). However, as an optimization these class descriptions would also link to x86 "
                            },
                            {
                                "type": "text",
                                "text": "implementations",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (stored in other files) of the parsers. So if you're running on architecture X, you could find the class for the content (A -> B) and then lookup implementations for X (B --(X)--> F). Parsers for future architectures could be added. Also, content files can be reencoded into instances of newer classes, if needed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U022KV1V4UV",
        "type": "message",
        "ts": "1621740691.019000",
        "client_msg_id": "ccaeb1d3-849f-4dca-8d67-f73ea3a3897f",
        "text": "This brought an implementation of a TCP\/IP stack that the VPRI team built to mind:\n\n<http:\/\/www.moserware.com\/2008\/04\/towards-moores-law-software-part-3-of-3.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d84ce494e824",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-08-23\/2421782895633_d84ce494e824f5bda457_72.jpg",
            "first_name": "",
            "real_name": "Mark Somerville",
            "display_name": "Mark Somerville",
            "team": "T5TCAFTA9",
            "name": "mark_futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619638645.153000",
        "parent_user_id": "U01DUNFS2N4",
        "attachments": [
            {
                "title": "Towards Moore's Law Software: Part 3 of 3",
                "title_link": "http:\/\/www.moserware.com\/2008\/04\/towards-moores-law-software-part-3-of-3.html",
                "text": "(Note: This is the third and final part of a series. Part one appeared Monday and part two appeared yesterday.)",
                "fallback": "Towards Moore's Law Software: Part 3 of 3",
                "from_url": "http:\/\/www.moserware.com\/2008\/04\/towards-moores-law-software-part-3-of-3.html",
                "service_icon": "http:\/\/www.moserware.com\/favicon.ico",
                "service_name": "moserware.com",
                "id": 1,
                "original_url": "http:\/\/www.moserware.com\/2008\/04\/towards-moores-law-software-part-3-of-3.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kr+bL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This brought an implementation of a TCP\/IP stack that the VPRI team built to mind:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.moserware.com\/2008\/04\/towards-moores-law-software-part-3-of-3.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            },
            {
                "name": "pray",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            },
            {
                "name": "tada",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    }
]