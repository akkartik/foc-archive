[
    {
        "user": "UL7UQJ87R",
        "type": "message",
        "ts": "1562549816.129300",
        "client_msg_id": "9d6be10c-6f88-4823-99d0-96168b61b73d",
        "text": "Duncan, do you have a link to the Onex implementation? I’m always interested in the approaches people are taking in this space!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g212b1b5a546",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a212b1b5a546c274ae1b67f380cc922e.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "",
            "real_name": "Joel Holdbrooks",
            "display_name": "Joel Holdbrooks",
            "team": "T5TCAFTA9",
            "name": "cjholdbrooks",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562351516.121100",
        "parent_user_id": "UL7UQJ87R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5ERY7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Duncan, do you have a link to the Onex implementation? I’m always interested in the approaches people are taking in this space!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1562566454.129700",
        "client_msg_id": "36cb8989-53a8-41ca-941e-ae734f43f581",
        "text": "Not just Mathematica, but computer algebra systems in general tend to be based on term rewriting. Reduce and Macsyma\/Maxima are probably the earliest examples. My own Digital Scientific Notation [Leibniz](<https:\/\/github.com\/khinsen\/leibniz\/>) follows this tradition, and is heavily inspired by Maude.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562367325.122500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X\/Mk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not just Mathematica, but computer algebra systems in general tend to be based on term rewriting. Reduce and Macsyma\/Maxima are probably the earliest examples. My own Digital Scientific Notation [Leibniz]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/khinsen\/leibniz\/"
                            },
                            {
                                "type": "text",
                                "text": ") follows this tradition, and is heavily inspired by Maude."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1562566879.129900",
        "client_msg_id": "f294fc4b-e809-42dd-993f-c42659774e7a",
        "text": "Also interesting in this context: the order-sorted term algebras of the OBJ family (e.g. Maude) are an interesting hybrid of static and run-time type checking. Some errors lead to untypable terms that can be identified statically, without doing any rewriting. Others lead to error terms that occur during rewriting. The interesting part is that the distinction between the two is not baked in the language. It's the type hierarchy that decides. You can actually make a statically signalled error go away by adding a more general type to your hierarchy. Inversely, you can narrow down types as you develop your code in order to get more static checks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562367368.123200",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2wIL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also interesting in this context: the order-sorted term algebras of the OBJ family (e.g. Maude) are an interesting hybrid of static and run-time type checking. Some errors lead to untypable terms that can be identified statically, without doing any rewriting. Others lead to error terms that occur during rewriting. The interesting part is that the distinction between the two is not baked in the language. It's the type hierarchy that decides. You can actually make a statically signalled error go away by adding a more general type to your hierarchy. Inversely, you can narrow down types as you develop your code in order to get more static checks."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UL7UQJ87R"
                ],
                "count": 1
            }
        ]
    }
]