[
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1548183500.471400",
        "client_msg_id": "b5e6e30d-1ee4-47a7-a34b-d5744e1ff44b",
        "text": "I think another option for inexperienced programmers is to add a layer of constraints that makes it very hard or impossible to write non-performant code.  At least in some axes. of course. its always possible to do too much work or do redundant work, but even that can be a constraint (treat performance as an economy and gamify it a little bit)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YhXB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think another option for inexperienced programmers is to add a layer of constraints that makes it very hard or impossible to write non-performant code.  At least in some axes. of course. its always possible to do too much work or do redundant work, but even that can be a constraint (treat performance as an economy and gamify it a little bit)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1548193483.471800",
        "client_msg_id": "68d1163c-3658-4f82-acb2-f44e816b7bb0",
        "text": "<@UEBG0NPDK> heh that's a fun connection.\nMy understanding was that Eve was made with web tech (JS at some point in the stack?). Did you do any tests with a native compiled language (e.g. C)? I'd be curious to see the difference.\n\n<@UC6997THT> Thanks for the fleshed-out example.\nIt wouldn't surprise me if there are more comprehensible ways of representing it. Eve seems to have made strides in one possible direction in that area.\nGiven people's familiarity with Excel, table columns and rows should be a relatively simple sell.\nFor your example, you could also write it as:\n```\nclass People {\n\tstring[] phoneNumbers;\n\tstring[] names;\n\tstring[] addresses;\n}\n```\nwhich is not too dissimilar from your original layout. If you squint a bit, you can see the members as the column headers of a table called People...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iNxB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " heh that's a fun connection.\nMy understanding was that Eve was made with web tech (JS at some point in the stack?). Did you do any tests with a native compiled language (e.g. C)? I'd be curious to see the difference.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the fleshed-out example.\nIt wouldn't surprise me if there are more comprehensible ways of representing it. Eve seems to have made strides in one possible direction in that area.\nGiven people's familiarity with Excel, table columns and rows should be a relatively simple sell.\nFor your example, you could also write it as:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class People {\n    string[] phoneNumbers;\n    string[] names;\n    string[] addresses;\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "which is not too dissimilar from your original layout. If you squint a bit, you can see the members as the column headers of a table called People..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1548193808.472000",
        "client_msg_id": "d8ceecfb-2289-43b8-879f-8bf1df9c5e27",
        "text": "<@UBSMEUXAA> interesting idea, but possibly difficult to implement in the general case... do you have any constraints in mind that might be helpful here?\nI think that making performance more tangible could help - probably by allowing profiling with trivial difficulty and connecting that to the source\/data in a fairly immediate way... (I'm aware that I'm speaking in too many generalities here!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CHplu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " interesting idea, but possibly difficult to implement in the general case... do you have any constraints in mind that might be helpful here?\nI think that making performance more tangible could help - probably by allowing profiling with trivial difficulty and connecting that to the source\/data in a fairly immediate way... (I'm aware that I'm speaking in too many generalities here!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1548194559.472200",
        "client_msg_id": "43ef335b-b40f-42c2-8431-d60e2518b442",
        "text": "<@UEDDR6L5Q>.  I'm thinking having users write SPMD programs by default, take away their ability to iterate over collections and treat all code as kernels that operate on smallish heterogenous arrays of data (the language can convert everything to SoA if necessary). pixel and vertex shaders do that already (especially material editors in AAA game engines), so do visual particle system (unity vfx and niagra) and machine learning\\scientific computing frameworks kind of do it.   All of these environments are heavily constrained, and its still possible to make things that perform horribly, or perform well in isolation and poorly in production.  I think its possible to build a pretty robust simulation framework\\game engine type thing that encourages high performance, even if its constrained in certain ways",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5y93",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEDDR6L5Q"
                            },
                            {
                                "type": "text",
                                "text": ".  I'm thinking having users write SPMD programs by default, take away their ability to iterate over collections and treat all code as kernels that operate on smallish heterogenous arrays of data (the language can convert everything to SoA if necessary). pixel and vertex shaders do that already (especially material editors in AAA game engines), so do visual particle system (unity vfx and niagra) and machine learning\\scientific computing frameworks kind of do it.   All of these environments are heavily constrained, and its still possible to make things that perform horribly, or perform well in isolation and poorly in production.  I think its possible to build a pretty robust simulation framework\\game engine type thing that encourages high performance, even if its constrained in certain ways"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1548195603.472500",
        "client_msg_id": "bed1523a-242a-4959-a9ac-6f5a01649b2b",
        "text": "for reference <https:\/\/github.com\/Unity-Technologies\/ScriptableRenderPipeline\/wiki\/VFX-Blocks>, <https:\/\/docs.unrealengine.com\/en-us\/Engine\/Niagara>, <http:\/\/advances.realtimerendering.com\/s2017\/Destiny_Particle_Architecture_Siggraph_Advances_2017.pptx>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "attachments": [
            {
                "title": "  Niagara Editor ",
                "title_link": "https:\/\/docs.unrealengine.com\/en-us\/Engine\/Niagara",
                "text": "Niagara's Unreal Engine 4's visual effect editor used for creating and previewing particle effects in real time.",
                "fallback": "  Niagara Editor ",
                "from_url": "https:\/\/docs.unrealengine.com\/en-us\/Engine\/Niagara",
                "service_icon": "https:\/\/docs.unrealengine.com\/favicon.ico",
                "service_name": "docs.unrealengine.com",
                "id": 1,
                "original_url": "https:\/\/docs.unrealengine.com\/en-us\/Engine\/Niagara"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oZhZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for reference "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/Unity-Technologies\/ScriptableRenderPipeline\/wiki\/VFX-Blocks"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.unrealengine.com\/en-us\/Engine\/Niagara"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/advances.realtimerendering.com\/s2017\/Destiny_Particle_Architecture_Siggraph_Advances_2017.pptx"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1548206689.472900",
        "client_msg_id": "a47701c8-e0da-40d5-a13f-60301a0764a9",
        "text": "More reference, info about Bungie's TFX shader system\\bytecode intepreter referenced in the particle system presentation <http:\/\/advances.realtimerendering.com\/destiny\/gdc_2017\/Destiny_shader_system_GDC_2017_v.4.0.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=3QI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More reference, info about Bungie's TFX shader system\\bytecode intepreter referenced in the particle system presentation "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/advances.realtimerendering.com\/destiny\/gdc_2017\/Destiny_shader_system_GDC_2017_v.4.0.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1548228513.473300",
        "client_msg_id": "f08648a7-1b06-41eb-bf65-1a5bc2a31020",
        "text": "<@UEDDR6L5Q> we wrote versions of Eve in lots of different languages (TS, Clojure, Rust, C, Go, ...), but this pattern makes just as much difference in JS as it does anywhere else. Rust ended up being the fastest by a good margin.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548111928.463600",
        "parent_user_id": "UEDDR6L5Q",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UrW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEDDR6L5Q"
                            },
                            {
                                "type": "text",
                                "text": " we wrote versions of Eve in lots of different languages (TS, Clojure, Rust, C, Go, ...), but this pattern makes just as much difference in JS as it does anywhere else. Rust ended up being the fastest by a good margin."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1548229993.473500",
        "client_msg_id": "d40d9fdc-ce29-423e-915c-4cdd93a9050b",
        "text": "What makes programming hard for the average person is that it requires extreme levels of patience; the kind of patience that can do a 7000 piece jigsaw puzzle. The primary difficulty is caused by the 1 out of 500 or 1 out of 1000 word errors that are inevitably in the code. This tiny percentage of the total number of words represents the majority - if not 85% by some peoples' estimates - of the total effort of the project. So it is the flies in the ointment that are the hard part. If people could type in their programs, run it a few times to shake down the rough spots, and be done, it would be a fun occupation and hobby. These errors in the code are not caused by the computer but by the inhuman level of perfection that one must rise to, to match the computer. We need a more protective and assistive toolset. Error is the enemy to be conquered. My mentor at JPL, Prentiss Knowlton, wrote out his programs in longhand, and after bench checking them, put them on to punch cards and ran the program. For him, Fortran was like prose.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1547862690.360400",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LYkj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What makes programming hard for the average person is that it requires extreme levels of patience; the kind of patience that can do a 7000 piece jigsaw puzzle. The primary difficulty is caused by the 1 out of 500 or 1 out of 1000 word errors that are inevitably in the code. This tiny percentage of the total number of words represents the majority - if not 85% by some peoples' estimates - of the total effort of the project. So it is the flies in the ointment that are the hard part. If people could type in their programs, run it a few times to shake down the rough spots, and be done, it would be a fun occupation and hobby. These errors in the code are not caused by the computer but by the inhuman level of perfection that one must rise to, to match the computer. We need a more protective and assistive toolset. Error is the enemy to be conquered. My mentor at JPL, Prentiss Knowlton, wrote out his programs in longhand, and after bench checking them, put them on to punch cards and ran the program. For him, Fortran was like prose."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEK890E6A"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1548230292.473700",
        "client_msg_id": "ac9fbd4e-19a2-48ee-94fb-5a8ed7c90ea5",
        "text": "Nothing real stays the same. Everything is changing, some things slowly like a boulder on a mountain, and other things like people change rather significantly, almost perceptibly. Immutability is a fad today; unfortunately people have only half-understood the inventor of FP, John Backus' ideas. He was after interchangeable parts, and felt that immutability would assist in this. However, he died with his work unfinished, and even after 50 years the problem of interchangeable parts is unsolved. I think that Wirth got closer with Modula-2 than Backus' languages ever did.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548057205.437200",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ixkAY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nothing real stays the same. Everything is changing, some things slowly like a boulder on a mountain, and other things like people change rather significantly, almost perceptibly. Immutability is a fad today; unfortunately people have only half-understood the inventor of FP, John Backus' ideas. He was after interchangeable parts, and felt that immutability would assist in this. However, he died with his work unfinished, and even after 50 years the problem of interchangeable parts is unsolved. I think that Wirth got closer with Modula-2 than Backus' languages ever did."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]