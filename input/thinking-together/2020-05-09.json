[
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589024801.278100",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1589027545.000000"
        },
        "client_msg_id": "0df4288c-0691-48ee-9672-7df4694e5524",
        "text": "I'm starting to investigate the use of Lenses to address this problem, but I don't have any concrete solutions yet. I just discovered this week the existence of a long running \"bx\" community (bidirectional transformation) who work on these problems. EDIT: I checked, and the BX people mostly use Haskell, so their code probably won't help you, due to their library dependencies.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2fj0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm starting to investigate the use of Lenses to address this problem, but I don't have any concrete solutions yet. I just discovered this week the existence of a long running \"bx\" community (bidirectional transformation) who work on these problems. EDIT: I checked, and the BX people mostly use Haskell, so their code probably won't help you, due to their library dependencies."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UAJ9DV971"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589036571.279900",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589036796.000000"
        },
        "client_msg_id": "078504F3-24DD-4A44-BE36-5B9D75F39B31",
        "text": "I believe transducers in Clojure were designed to allow you to build data structures and operations that can be composed in this way.\n\nBut if perf is your main concern, it probably should be easy enough to roll your own in any language. Us front end devs have to do very similar things to efficiently render large table views in the browser.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E=AJ6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe transducers in Clojure were designed to allow you to build data structures and operations that can be composed in this way.\n\nBut if perf is your main concern, it probably should be easy enough to roll your own in any language. Us front end devs have to do very similar things to efficiently render large table views in the browser."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1589037901.280400",
        "client_msg_id": "46e9539e-400a-4266-a1fd-94c167ca15e6",
        "text": "In BV's \"Future of Programming\", he talks about how memory and processors are made of the same material (transistors), so eventually it should all just be a bunch of processors.\n\nI think this is the kind of application where something like that would work: where a bunch of units are constantly a function of others. So like if you could allocate arbitrary chunks of memory and \"assign\" an operation relative to some other chunk.\n\nMaybe that's more like PLA than a bunch of \"processors\", but maybe that's the goal: being able to reduce pure functional operations down to programmed logic on the hardware that's constantly updating, without all having to be cycled single-file through a CPU.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BmW5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In BV's \"Future of Programming\", he talks about how memory and processors are made of the same material (transistors), so eventually it should all just be a bunch of processors.\n\nI think this is the kind of application where something like that would work: where a bunch of units are constantly a function of others. So like if you could allocate arbitrary chunks of memory and \"assign\" an operation relative to some other chunk.\n\nMaybe that's more like PLA than a bunch of \"processors\", but maybe that's the goal: being able to reduce pure functional operations down to programmed logic on the hardware that's constantly updating, without all having to be cycled single-file through a CPU."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1589041273.280700",
        "client_msg_id": "7ede554d-3b00-4074-9aa9-712f601429de",
        "text": "<@UC2A2ARPT> If it's easy enough, could you enlighten us? I've been thinking about this problem occasionally for several years and never fully cracked it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a6fS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " If it's easy enough, could you enlighten us? I've been thinking about this problem occasionally for several years and never fully cracked it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1589044812.280900",
        "client_msg_id": "a64ef43c-5367-4597-a5ef-b4fdb9d8d3d1",
        "text": "transducers in Clojure are unidirectional. In David's context, you can transform the model to the view, but you cannot modify the view and propagate the changes back to the model.\n\nLenses are like transducers, except that they are bidirectional, which is needed for David's \"reactive updates\". That's why I was talking about \"bx\" or bidirectional transformation.\n\nLenses look easy enough (I'm going to try my first implementation of them soon enough). But the requirement is for efficient bidirectional transformation of a million items. Surely that requires more thought than the usual simple Lens implementation?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ODdM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "transducers in Clojure are unidirectional. In David's context, you can transform the model to the view, but you cannot modify the view and propagate the changes back to the model.\n\nLenses are like transducers, except that they are bidirectional, which is needed for David's \"reactive updates\". That's why I was talking about \"bx\" or bidirectional transformation.\n\nLenses look easy enough (I'm going to try my first implementation of them soon enough). But the requirement is for efficient bidirectional transformation of a million items. Surely that requires more thought than the usual simple Lens implementation?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT9TWSZB5",
        "type": "message",
        "ts": "1589049514.281600",
        "client_msg_id": "5c589c58-3099-4188-a595-6c06a8db2b33",
        "text": "I mocked something out that should effectively do what you're looking for:\n```\ntype Paper = {\n\tid: string\n\tsubject: string\n\tdate: string \/\/ ISO\n}\n\nconst collection: Record&lt;string, Paper&gt; = {}\n\n\/\/ This is the query I want to index:\n\/\/ Filter for nutrition items this year, range 20-40.\nObject.values(collection)\n\t.filter((item) =&gt; item.subject === \"Nutrition\" &amp;&amp; item.date &gt; \"2020-01-01\")\n\t.slice(20, 40)\n\n\/\/ First, lets translate this into a composite index.\nconst filterIndex: Array&lt;[string, string, string]&gt; = [] \/\/ [subject, date, id]\nfor (const item of Object.values(collection)) {\n\t\/\/ uses binary search to insert in sorted order.\n\taddToIndex(filterIndex, [item.subject, item.date])\n}\n\n\/\/ Translate your query into subscriptions.\nconst subscriptions = [\n\t[\n\t\t\"date\",\n\t\t\"2020-01-01\",\n\t\t() =&gt; {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n\t[\n\t\t\"filterIndex\",\n\t\t20,\n\t\t40,\n\t\t() =&gt; {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n\t[\n\t\t\"subject\",\n\t\t\"Nutrition\",\n\t\t() =&gt; {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n]\n\nfunction updateItem(id: string, update: Partial&lt;Paper&gt;) {\n\t\/\/ Emit on the old key-value because this will be removed from result set.\n\tfor (const key in update) {\n\t\tsubscriptions\n\t\t\t.filter(([a, b]) =&gt; a === key &amp;&amp; b === collection[id][key])\n\t\t\t.forEach(([_a, _b, callback]) =&gt; callback())\n\t}\n\n\tconst beforeIndex = removeFromIndex(filterIndex, collection[id])\n\tObject.assign(collection[id], update)\n\tconst afterIndex = addToIndex(filterIndex, collection[id])\n\n\t\/\/ Emit on the new key value because this will be added to result set.\n\tfor (const key in update) {\n\t\tsubscriptions\n\t\t\t.filter(([a, b]) =&gt; a === key &amp;&amp; b === collection[id][key])\n\t\t\t.forEach(([_a, _b, callback]) =&gt; callback())\n\t}\n\n\tif (beforeIndex !== afterIndex) {\n\t\t\/\/ Emit an update for all listeners on filterIndex between before and after.\n\t}\n}```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9cb6f99c1d46",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-05\/941640103046_9cb6f99c1d4661569649_72.jpg",
            "first_name": "",
            "real_name": "Chet Corcos",
            "display_name": "Chet Corcos",
            "team": "T5TCAFTA9",
            "name": "ccorcos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0+cKT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mocked something out that should effectively do what you're looking for:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\ntype Paper = {\n\tid: string\n\tsubject: string\n\tdate: string \/\/ ISO\n}\n\nconst collection: Record<string, Paper> = {}\n\n\/\/ This is the query I want to index:\n\/\/ Filter for nutrition items this year, range 20-40.\nObject.values(collection)\n\t.filter((item) => item.subject === \"Nutrition\" && item.date > \"2020-01-01\")\n\t.slice(20, 40)\n\n\/\/ First, lets translate this into a composite index.\nconst filterIndex: Array<[string, string, string]> = [] \/\/ [subject, date, id]\nfor (const item of Object.values(collection)) {\n\t\/\/ uses binary search to insert in sorted order.\n\taddToIndex(filterIndex, [item.subject, item.date])\n}\n\n\/\/ Translate your query into subscriptions.\nconst subscriptions = [\n\t[\n\t\t\"date\",\n\t\t\"2020-01-01\",\n\t\t() => {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n\t[\n\t\t\"filterIndex\",\n\t\t20,\n\t\t40,\n\t\t() => {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n\t[\n\t\t\"subject\",\n\t\t\"Nutrition\",\n\t\t() => {\n\t\t\t\/* Update callback *\/\n\t\t},\n\t],\n]\n\nfunction updateItem(id: string, update: Partial<Paper>) {\n\t\/\/ Emit on the old key-value because this will be removed from result set.\n\tfor (const key in update) {\n\t\tsubscriptions\n\t\t\t.filter(([a, b]) => a === key && b === collection[id][key])\n\t\t\t.forEach(([_a, _b, callback]) => callback())\n\t}\n\n\tconst beforeIndex = removeFromIndex(filterIndex, collection[id])\n\tObject.assign(collection[id], update)\n\tconst afterIndex = addToIndex(filterIndex, collection[id])\n\n\t\/\/ Emit on the new key value because this will be added to result set.\n\tfor (const key in update) {\n\t\tsubscriptions\n\t\t\t.filter(([a, b]) => a === key && b === collection[id][key])\n\t\t\t.forEach(([_a, _b, callback]) => callback())\n\t}\n\n\tif (beforeIndex !== afterIndex) {\n\t\t\/\/ Emit an update for all listeners on filterIndex between before and after.\n\t}\n}"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "confused",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UT9TWSZB5",
        "type": "message",
        "ts": "1589049571.281800",
        "client_msg_id": "a420c848-6a6b-4acf-aafd-a6b3af736ce5",
        "text": "This pattern is something I discovered when I was building a datalog prototype. Using reified indexes on your queries makes subscriptions a lot easier.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9cb6f99c1d46",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-05\/941640103046_9cb6f99c1d4661569649_72.jpg",
            "first_name": "",
            "real_name": "Chet Corcos",
            "display_name": "Chet Corcos",
            "team": "T5TCAFTA9",
            "name": "ccorcos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "euX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This pattern is something I discovered when I was building a datalog prototype. Using reified indexes on your queries makes subscriptions a lot easier."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT9TWSZB5",
        "type": "message",
        "ts": "1589049574.282000",
        "edited": {
            "user": "UT9TWSZB5",
            "ts": "1589049576.000000"
        },
        "client_msg_id": "bdeb6dae-2613-4191-a36e-fc05360046d1",
        "text": "<https:\/\/github.com\/ccorcos\/datalog-prototype\/tree\/master\/src\/shared\/database>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9cb6f99c1d46",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-05\/941640103046_9cb6f99c1d4661569649_72.jpg",
            "first_name": "",
            "real_name": "Chet Corcos",
            "display_name": "Chet Corcos",
            "team": "T5TCAFTA9",
            "name": "ccorcos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n9Wlm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ccorcos\/datalog-prototype\/tree\/master\/src\/shared\/database"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1589053332.282800",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1589053378.000000"
        },
        "client_msg_id": "f45cc5c8-84e8-4ca4-8f63-c1d6d03181bf",
        "text": "Hmm, anyone else here always forget the syntax of INSERT and UPDATE because they are so different from each other? Doesn't seem like great attention to human factors in that case.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lVl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, anyone else here always forget the syntax of INSERT and UPDATE because they are so different from each other? Doesn't seem like great attention to human factors in that case."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1589060108.283500",
        "client_msg_id": "125C0E4F-A493-4282-A122-23836A1358F8",
        "text": "Yes! I’d be curious to know why they are different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zLqpA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! I’d be curious to know why they are different."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UT9TWSZB5",
        "type": "message",
        "ts": "1589072688.290300",
        "edited": {
            "user": "UT9TWSZB5",
            "ts": "1589072700.000000"
        },
        "client_msg_id": "6b0b1ddd-5036-4486-b7f2-f67239c6a2ff",
        "text": "I guess my point is: it sounds like you want a reactive database.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9cb6f99c1d46",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-05\/941640103046_9cb6f99c1d4661569649_72.jpg",
            "first_name": "",
            "real_name": "Chet Corcos",
            "display_name": "Chet Corcos",
            "team": "T5TCAFTA9",
            "name": "ccorcos",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ClX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess my point is: it sounds like you want a reactive database."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1589072792.292000",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1589072843.000000"
        },
        "client_msg_id": "B2117EA5-A9FF-40D4-AB1B-6CBBFA898A03",
        "text": "I’m finally reaching the end of the podcast episode about the community survey results and heard the suggestion for a “book club” where the books are FoC prototypes. Um… yes please?? Is anybody already organizing such a thing?\n\nI ran a mass in-person user study of my JavaScript debugger Theseus in the form of a class to teach JavaScript, and though I mostly remember the bugs and technical gotchas of installing my largely untested software on many stranger’s machines, it also led to incredible discussion and muuuuch better documentation, and I’d do it again in a heartbeat.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1589072792.292000",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1606549488.161600",
        "reply_users": [
            "UD31LGQKB",
            "UDQBTJ211",
            "UFEQUBNNT",
            "U01EMHQHGC9"
        ],
        "replies": [
            {
                "user": "UD31LGQKB",
                "ts": "1589097838.295100"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1589110806.295500"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1589145068.299800"
            },
            {
                "user": "U01EMHQHGC9",
                "ts": "1606549488.161600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CfW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m finally reaching the end of the podcast episode about the community survey results and heard the suggestion for a “book club” where the books are FoC prototypes. Um… yes please?? Is anybody already organizing such a thing?\n\nI ran a mass in-person user study of my JavaScript debugger Theseus in the form of a class to teach JavaScript, and though I mostly remember the bugs and technical gotchas of installing my largely untested software on many stranger’s machines, it also led to incredible discussion and muuuuch better documentation, and I’d do it again in a heartbeat."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UFQQ3P867",
                    "UBSMEUXAA",
                    "U01EMHQHGC9"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1589079232.292300",
        "client_msg_id": "7840f443-6585-401e-b5f4-51a673f110c3",
        "text": "In general it is not easy to make controls bidirectional. There are host of ergonomic decisions that are asymmetrical, and I don't believe any general system could handle a wide range of widgets. I just posted a dual simultaneous temperature control sample, where you can set the temp any of two ways, and it feeds back to the model which then automatically re-renders the widges. But you still have to manually code how you want the cursor to behave, and the scaling factors for the mouse, and how you want to clip movement. User input is rather different than rendering  a control. It is good however, to try an make things as bidirectional as possible, as it would save a ton of code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In general it is not easy to make controls bidirectional. There are host of ergonomic decisions that are asymmetrical, and I don't believe any general system could handle a wide range of widgets. I just posted a dual simultaneous temperature control sample, where you can set the temp any of two ways, and it feeds back to the model which then automatically re-renders the widges. But you still have to manually code how you want the cursor to behave, and the scaling factors for the mouse, and how you want to clip movement. User input is rather different than rendering  a control. It is good however, to try an make things as bidirectional as possible, as it would save a ton of code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1589082857.292500",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1589082894.000000"
        },
        "client_msg_id": "99d96bb8-5540-4754-b6e0-734b371da427",
        "text": "<https:\/\/github.com\/TimelyDataflow\/differential-dataflow\/> is state of the art, although the UX can be iffy if you aren't up to speed with Rust.\n\n<https:\/\/opensource.janestreet.com\/incremental\/> is also good. It can handle updates to nested collections, unlike differential, but can't easily handle maintenance of nested loops.\n\nI wrote a bit about applying similar ideas to UI - <https:\/\/scattered-thoughts.net\/writing\/relational-ui\/> - and a friend of mine is building something in the same family for javascript\/react, not sure how mature it is yet - <https:\/\/datalogui.dev\/>\n\nI'm also working on a language that is designed to be efficiently incrementally maintained, although I haven't actually mapped it to the incremental layer yet - <https:\/\/scattered-thoughts.net\/writing\/imp-intro\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CFN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/TimelyDataflow\/differential-dataflow\/"
                            },
                            {
                                "type": "text",
                                "text": " is state of the art, although the UX can be iffy if you aren't up to speed with Rust.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/opensource.janestreet.com\/incremental\/"
                            },
                            {
                                "type": "text",
                                "text": " is also good. It can handle updates to nested collections, unlike differential, but can't easily handle maintenance of nested loops.\n\nI wrote a bit about applying similar ideas to UI - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/scattered-thoughts.net\/writing\/relational-ui\/"
                            },
                            {
                                "type": "text",
                                "text": " - and a friend of mine is building something in the same family for javascript\/react, not sure how mature it is yet - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/datalogui.dev\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'm also working on a language that is designed to be efficiently incrementally maintained, although I haven't actually mapped it to the incremental layer yet - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/scattered-thoughts.net\/writing\/imp-intro\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1589082986.292900",
        "client_msg_id": "88b92b0c-90ab-4c3e-b7e1-f1f0cd16393c",
        "text": "I also did a bunch of work for <http:\/\/materialize.io|materialize.io> which is a proprietary SQL database that compiles down to differential dataflow. There's some interesting stuff on the blog about eg incremental maintenance on non-abelian aggregates.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jJ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also did a bunch of work for "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/materialize.io",
                                "text": "materialize.io"
                            },
                            {
                                "type": "text",
                                "text": " which is a proprietary SQL database that compiles down to differential dataflow. There's some interesting stuff on the blog about eg incremental maintenance on non-abelian aggregates."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UKFNXF0F9"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1589084581.293100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589086885.000000"
        },
        "client_msg_id": "c7d1bce7-9204-4605-b2a7-2db3ac2c4269",
        "text": "<@UD6EXQVM0> You're not actually looking for bidirectionality, are you? That seems like an additional wrinkle introduced by Doug Moen.\n\nIn the case of unidirectionality, you'd have some function responsible for insertion into the large list. That function also runs the filter on each newly inserted item, and if an item passes the filter, add it to the filtered list too. If you're doing this in terms of some reactive library, the library should (caveat emptor) be smart enough to not re-filter the entire list on every change, and instead just apply the filter to new items.\n\nTo batch together rapid updates, you'd want a debounce or a throttle — high likelihood your reactive library of choice has those. Otherwise, you can just roll this yourself — you just need _some_ way to schedule code to run after a certain amount of time has passed, and a place to store some intermediate state.\n\nAs for recalculating the projection, mapping should be just as easy as filtering — just do it to each new item as it comes in. Again, all the Rx libraries I've seen are smart about this.\n\nFinally, for reducing, efficiency will depend on the properties of the operation: is it associative? Commutative? Approximate? Can you build a small intermediate result that's easy to incrementally modify and recompute? Etc. This talk gives a nice summary of some good strategies: <https:\/\/www.infoq.com\/presentations\/abstract-algebra-analytics\/>\n\nIt's entirely possible I'm missing details that make this problem far harder than I'm imagining. But I feel like I've done this exact thing a handful of times, both with an without reactive libraries, so hopefully this helps somewhat.\n\nOne more bonus link — all the features you've asked for are documented visually\/interactively here: <https:\/\/rxmarbles.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m0j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " You're not actually looking for bidirectionality, are you? That seems like an additional wrinkle introduced by Doug Moen.\n\nIn the case of unidirectionality, you'd have some function responsible for insertion into the large list. That function also runs the filter on each newly inserted item, and if an item passes the filter, add it to the filtered list too. If you're doing this in terms of some reactive library, the library should (caveat emptor) be smart enough to not re-filter the entire list on every change, and instead just apply the filter to new items.\n\nTo batch together rapid updates, you'd want a debounce or a throttle — high likelihood your reactive library of choice has those. Otherwise, you can just roll this yourself — you just need "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " way to schedule code to run after a certain amount of time has passed, and a place to store some intermediate state.\n\nAs for recalculating the projection, mapping should be just as easy as filtering — just do it to each new item as it comes in. Again, all the Rx libraries I've seen are smart about this.\n\nFinally, for reducing, efficiency will depend on the properties of the operation: is it associative? Commutative? Approximate? Can you build a small intermediate result that's easy to incrementally modify and recompute? Etc. This talk gives a nice summary of some good strategies: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/abstract-algebra-analytics\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's entirely possible I'm missing details that make this problem far harder than I'm imagining. But I feel like I've done this exact thing a handful of times, both with an without reactive libraries, so hopefully this helps somewhat.\n\nOne more bonus link — all the features you've asked for are documented visually\/interactively here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rxmarbles.com\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    }
]