[
    {
        "user": "U04MAEU6VHN",
        "type": "message",
        "ts": "1678128873.587829",
        "client_msg_id": "09f8369b-2140-4487-a60c-3dbedfb64914",
        "text": "Do y'all know of any editors with undo\/redo behavior that's more interesting\/granular than just scrubbing through all of the edits you've done to a file in order?\nI often find my self wanting \"undo the last change to *this function*\" :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43e7ef32ef6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-25\/4713451001249_43e7ef32ef6c84455dbd_72.jpg",
            "first_name": "Jared",
            "real_name": "Jared Forsyth",
            "display_name": "Jared Forsyth",
            "team": "T5TCAFTA9",
            "name": "jabapyth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "reply_count": 20,
        "reply_users_count": 11,
        "latest_reply": "1678600586.201779",
        "reply_users": [
            "UC2A2ARPT",
            "U04MAEU6VHN",
            "U04S390M7EZ",
            "U04MTMF6Y4W",
            "UBKNXPBAB",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "UDQBTJ211",
            "U04QV8SD54G",
            "U02JQA5FY5C"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1678129079.802049"
            },
            {
                "user": "U04MAEU6VHN",
                "ts": "1678129163.744079"
            },
            {
                "user": "U04S390M7EZ",
                "ts": "1678129825.901739"
            },
            {
                "user": "U04S390M7EZ",
                "ts": "1678130205.241669"
            },
            {
                "user": "U04MAEU6VHN",
                "ts": "1678130300.831899"
            },
            {
                "user": "U04MAEU6VHN",
                "ts": "1678130389.239849"
            },
            {
                "user": "U04S390M7EZ",
                "ts": "1678131344.824979"
            },
            {
                "user": "U04MTMF6Y4W",
                "ts": "1678132994.788819"
            },
            {
                "user": "U04S390M7EZ",
                "ts": "1678138068.641939"
            },
            {
                "user": "U04MTMF6Y4W",
                "ts": "1678140038.668399"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1678143975.157189"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1678144228.332479"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1678154102.349479"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1678170397.734329"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1678174641.686369"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1678174679.382249"
            },
            {
                "user": "U04QV8SD54G",
                "ts": "1678304859.443069"
            },
            {
                "user": "U04QV8SD54G",
                "ts": "1678304897.110769"
            },
            {
                "user": "U02JQA5FY5C",
                "ts": "1678442585.175859"
            },
            {
                "user": "U04MAEU6VHN",
                "ts": "1678600586.201779"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5pSt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do y'all know of any editors with undo\/redo behavior that's more interesting\/granular than just scrubbing through all of the edits you've done to a file in order?\nI often find my self wanting \"undo the last change to *this function*\" "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "gem",
                "users": [
                    "U04BPBG8VN0",
                    "UA14TGLTC",
                    "U0296ACR13M"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1678129079.802049",
        "client_msg_id": "d2df5e0a-8b58-49b4-a784-9b33111499e8",
        "text": "Some 3d modelling tools have separate undo\/redo stacks for different parts of the program. For instance, undo\/redo for changes to your viewport are separate from undo\/redo for changes to objects in your scene, which are separate from undo\/redo to changes in your F-curve editor or node-wire material editor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ept",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some 3d modelling tools have separate undo\/redo stacks for different parts of the program. For instance, undo\/redo for changes to your viewport are separate from undo\/redo for changes to objects in your scene, which are separate from undo\/redo to changes in your F-curve editor or node-wire material editor."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MAEU6VHN",
        "type": "message",
        "ts": "1678129163.744079",
        "client_msg_id": "7d75a72e-6adf-4ded-a118-e49cd0e5b546",
        "text": "Yeah, that makes sense, sounds like those are basically different editors, that each maintain their own stack",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43e7ef32ef6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-25\/4713451001249_43e7ef32ef6c84455dbd_72.jpg",
            "first_name": "Jared",
            "real_name": "Jared Forsyth",
            "display_name": "Jared Forsyth",
            "team": "T5TCAFTA9",
            "name": "jabapyth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zlvH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that makes sense, sounds like those are basically different editors, that each maintain their own stack"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04S390M7EZ",
        "type": "message",
        "ts": "1678129825.901739",
        "client_msg_id": "E955ECC7-484E-457B-AF97-29B96F6C7CB1",
        "text": "I really love vim’s tree based undo. It’s like git for keystrokes - edits on top of edits create branching histories. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a99b4ff95e05",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-02\/4902876087921_a99b4ff95e052a2833c5_72.png",
            "first_name": "Ben",
            "real_name": "Ben Tyler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "benjamin.tyler",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NeOS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really love vim’s tree based undo. It’s like git for keystrokes - edits on top of edits create branching histories. "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QB9V2RNG",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U04S390M7EZ",
        "type": "message",
        "ts": "1678130205.241669",
        "client_msg_id": "FBF177AC-E09C-4AC1-8604-B63D71B23DA2",
        "text": "It isn’t localized like you describe. Also impossible to use without a plugin to visualize the tree, like Gundo.vim: <https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg|https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg>. \n\n“Local change history” is a really cool idea; I think I would struggle to define the boundaries for my undo-space in a consistent way. Sometimes I’m working on one function \/ module; sometimes I’m pushing larger globs of code around. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a99b4ff95e05",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-02\/4902876087921_a99b4ff95e052a2833c5_72.png",
            "first_name": "Ben",
            "real_name": "Ben Tyler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "benjamin.tyler",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "attachments": [
            {
                "from_url": "https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "image_url": "https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "image_width": 1112,
                "image_height": 962,
                "image_bytes": 87211,
                "id": 1,
                "original_url": "https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "fallback": "1112x962px image"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=\/j7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It isn’t localized like you describe. Also impossible to use without a plugin to visualize the tree, like Gundo.vim: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                                "text": "https:\/\/advancedweb.hu\/assets\/posts\/vim-undo-tree\/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg"
                            },
                            {
                                "type": "text",
                                "text": ". \n\n“Local change history” is a really cool idea; I think I would struggle to define the boundaries for my undo-space in a consistent way. Sometimes "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " working on one function \/ module; sometimes "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " pushing larger globs of code around. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MAEU6VHN",
        "type": "message",
        "ts": "1678130300.831899",
        "client_msg_id": "55da0a8c-a0f2-425e-9c2c-81fc14d09910",
        "text": "Yeah, there would definitely be changes at different levels, it'll be a challenge to represent things in a way that doesn't break either the large or the small case.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43e7ef32ef6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-25\/4713451001249_43e7ef32ef6c84455dbd_72.jpg",
            "first_name": "Jared",
            "real_name": "Jared Forsyth",
            "display_name": "Jared Forsyth",
            "team": "T5TCAFTA9",
            "name": "jabapyth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nOAx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, there would definitely be changes at different levels, it'll be a challenge to represent things in a way that doesn't break either the large or the small case."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MAEU6VHN",
        "type": "message",
        "ts": "1678130389.239849",
        "client_msg_id": "f75a1bcd-6b5a-4abf-a44b-af68f63a0e50",
        "text": "One hacky idea is to have the main history stack\/tree be for the whole editor, but have a \"view history of this function\" and allow you to \"revert\" to a previous state, which actually adds a change to the main history stack.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43e7ef32ef6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-25\/4713451001249_43e7ef32ef6c84455dbd_72.jpg",
            "first_name": "Jared",
            "real_name": "Jared Forsyth",
            "display_name": "Jared Forsyth",
            "team": "T5TCAFTA9",
            "name": "jabapyth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "edkNn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One hacky idea is to have the main history stack\/tree be for the whole editor, but have a \"view history of this function\" and allow you to \"revert\" to a previous state, which actually adds a change to the main history stack."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04S390M7EZ",
        "type": "message",
        "ts": "1678131344.824979",
        "client_msg_id": "E232C10C-C67F-4973-930D-8843D767EFFF",
        "text": "Thinking about a version control system which understands code structure led me to visualize it as basically node\/wire visual programming, where undo histories are held both at the node level (function, module, class) and for the overall canvas (file, project?). I think that’s pretty much what you described. \n\nRephrasing a bit, maybe one way to think about it is expanding the hierarchy of undo scopes: most people today have project scope (version control) and file scope (editor undo). Higher up the hierarchy than project scope - integration scope, maybe? - depends on monorepo; I guess API versioning and pinning is kind of this as well. Lower down the hierarchy is function edit history.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a99b4ff95e05",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-02\/4902876087921_a99b4ff95e052a2833c5_72.png",
            "first_name": "Ben",
            "real_name": "Ben Tyler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "benjamin.tyler",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dmR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about a version control system which understands code structure led me to visualize it as basically node\/wire visual programming, where undo histories are held both at the node level (function, module, class) and for the overall canvas (file, project?). I think that’s pretty much what you described. \n\nRephrasing a bit, maybe one way to think about it is expanding the hierarchy of undo scopes: most people today have project scope (version control) and file scope (editor undo). Higher up the hierarchy than project scope - integration scope, maybe? - depends on monorepo; I guess API versioning and pinning is kind of this as well. Lower down the hierarchy is function edit history."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MTMF6Y4W",
        "type": "message",
        "ts": "1678132994.788819",
        "client_msg_id": "F85365F7-C95C-46C6-A725-1C93BF2D6036",
        "text": "Solidworks has a UI tree that sound like the opposite side of vim’s graph. There’s a command history where you can go to any previous point and change a parameter, if it still creates a valid model, changes trickle down. Porting that to a code editor could be something like:\nif x is editted on commit 4 and there are no errors; then merge to present; else (attempt to edit in between commits so some test is satisfied?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e4fc5f2a2c70",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-24\/5478852762419_e4fc5f2a2c70210c1841_72.png",
            "first_name": "Ibro",
            "real_name": "Ibro C.",
            "display_name": "ibro",
            "team": "T5TCAFTA9",
            "name": "foc214",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JYrUv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Solidworks has a UI tree that sound like the opposite side of vim’s graph. There’s a command history where you can go to any previous point and change a parameter, if it still creates a valid model, changes trickle down. Porting that to a code editor could be something like:\nif x is editted on commit 4 and there are no errors; then merge to present; else (attempt to edit in between commits so some test is satisfied?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04S390M7EZ",
        "type": "message",
        "ts": "1678138068.641939",
        "client_msg_id": "77EC0DAE-CE5B-4C26-8642-21CCD21FC041",
        "text": "Oh interesting. So kind of a “back to the future” time traveling editor model. Is there a challenge with deep historical changes having unintentional outcomes after the changes propagate? \n\nwhen you “undo”, does it undo the change you made to the historical command, or remove the effects of the most recent command (leaving the “altered history” in place)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a99b4ff95e05",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-02\/4902876087921_a99b4ff95e052a2833c5_72.png",
            "first_name": "Ben",
            "real_name": "Ben Tyler",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "benjamin.tyler",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x0zk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh interesting. So kind of a “back to the future” time traveling editor model. Is there a challenge with deep historical changes having unintentional outcomes after the changes propagate? \n\nwhen you “undo”, does it undo the change you made to the historical command, or remove the effects of the most recent command (leaving the “altered history” in place)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04MTMF6Y4W",
        "type": "message",
        "ts": "1678140038.668399",
        "client_msg_id": "9A22673F-EF98-43D3-9ED6-D5B51A6F9FDD",
        "text": "Yes, going further back tends generally means more commands depending on each other with potential to break. I think the best description would be “modifying” a previous command (which could include a delete\/hide). After that it attempts to rebuild to current state, or as far as it can get before something breaks. There is also a normal CTRL+Z which you rarely use as a “good” Solidworks user. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e4fc5f2a2c70",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-24\/5478852762419_e4fc5f2a2c70210c1841_72.png",
            "first_name": "Ibro",
            "real_name": "Ibro C.",
            "display_name": "ibro",
            "team": "T5TCAFTA9",
            "name": "foc214",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+l1z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, going f"
                            },
                            {
                                "type": "text",
                                "text": "u"
                            },
                            {
                                "type": "text",
                                "text": "rther back "
                            },
                            {
                                "type": "text",
                                "text": "tends generally"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "means more"
                            },
                            {
                                "type": "text",
                                "text": " commands depending on each other with potential to break. "
                            },
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " think the best description would be “modifying” a previous command (which could include a delete\/hide). After that it attempts to rebuild to current state, or as far as it can get before something breaks. There is also a normal CTRL+Z which "
                            },
                            {
                                "type": "text",
                                "text": "you "
                            },
                            {
                                "type": "text",
                                "text": "rarely use as a “good” Solidworks user. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1678143975.157189",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1678144024.000000"
        },
        "client_msg_id": "09f954c2-39a7-4462-967d-65e0eedc8e5c",
        "text": "Amusingly, <https:\/\/observablehq.com\/|Observable> lacks global undo, but because CodeMirror implements nice undo functionality, it still has per-cell-editor undo. It’s granular undo by default \/ accident.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "attachments": [
            {
                "from_url": "https:\/\/observablehq.com\/",
                "service_icon": "https:\/\/static.observablehq.com\/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "thumb_url": "https:\/\/static.observablehq.com\/assets\/og-image.png",
                "thumb_width": 400,
                "thumb_height": 414,
                "id": 1,
                "original_url": "https:\/\/observablehq.com\/",
                "fallback": "Observable: Collaborative data platform and canvas | Observable",
                "text": "Powered by Community, collaborate with your entire team from technical to non-technical users and get to data insights, faster. Bring your data to life.",
                "title": "Collaborative data platform and canvas | Observable",
                "title_link": "https:\/\/observablehq.com\/",
                "service_name": "Observable"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdXF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Amusingly, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/",
                                "text": "Observable"
                            },
                            {
                                "type": "text",
                                "text": " lacks global undo, but because CodeMirror implements nice undo functionality, it still has per-cell-editor undo. It’s granular undo by default \/ accident."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "US370TRJA"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1678144228.332479",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1678144290.000000"
        },
        "client_msg_id": "4acd2a9e-8375-4bf2-a7ec-a19a77dc7eb0",
        "text": "A possible UI for text would be to select an arbitrary region (maybe a function, maybe bigger\/smaller) and undo changes that intersect with that region.  Or use said selection as a filter for other fancy operations on undo history. (Which presumably gets really interesting when you try to have undo history for the selection itself, a la Blender and what I wish I had in Kakoune (vim-like selection heavy editor)).\n\nIn practice, I tend to delete by commenting until I'm ready to commit to Git, so I can undo either by reverting or uncommenting. Which is to say, I'm interested in this feature. :melting_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4hc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A possible UI for text would be to select an arbitrary region (maybe a function, maybe bigger\/smaller) and undo changes that intersect with that region.  Or use said selection as a filter for other fancy operations on undo history. (Which presumably gets really interesting when you try to have undo history for the selection itself, a la Blender and what I wish I had in Kakoune (vim-like selection heavy editor)).\n\nIn practice, I tend to delete by commenting until I'm ready to commit to Git, so I can undo either by reverting or uncommenting. Which is to say, I'm interested in this feature. "
                            },
                            {
                                "type": "emoji",
                                "name": "melting_face",
                                "unicode": "1fae0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1678154102.349479",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1678156998.000000"
        },
        "client_msg_id": "8a4734b4-eb79-446e-842f-a6d9e5d7ace2",
        "text": "My reaction was the same as <@UBKNXPBAB>. Organizing code by definition is an easy and intuitive way to get per function undo. Having multiple kinds of undo seems like it might be confusing some of the time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFvK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My reaction was the same as "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": ". Organizing code by definition is an easy and intuitive way to get per function undo. Having multiple kinds of undo seems like it might be confusing some of the time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1678170397.734329",
        "client_msg_id": "311896ec-10e9-47ea-b1f8-ea2075ec8310",
        "text": "I use the emacs version of that tree-based undo system. It's very cool, but not granular in the way you want. IIRC the Smalltalk environment I used in the late 80s had scoped undo in the individual editors, which is more along these lines.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=8n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use the emacs version of that tree-based undo system. It's very cool, but not granular in the way you want. IIRC the Smalltalk environment I used in the late 80s had scoped undo in the individual editors, which is more along these lines."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QV8SD54G",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1678174641.686369",
        "client_msg_id": "1b4a019b-99d6-46d4-9dff-65abafed6c59",
        "text": "I think you might be able to get this from git if you pushed every single change as a commit and used interactive rebase",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BjvhX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you might be able to get this from git if you pushed every single change as a commit and used interactive rebase"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1678174679.382249",
        "client_msg_id": "ae46c3da-c94d-4c4d-bf7f-4184f73f5262",
        "text": "(I mean do that behind the scenes as a way of implementing it)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I mean do that behind the scenes as a way of implementing it)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]