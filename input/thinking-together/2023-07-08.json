[
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1688800074.107899",
        "client_msg_id": "6FAD85EC-11FD-48B0-A1C4-9B14CDB542B2",
        "text": "Yes “property” is something which can be discussed about a lot ;)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MYq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes “property” is something which can be discussed about a lot ;)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05FSHWJER3",
        "type": "message",
        "ts": "1688803315.269069",
        "edited": {
            "user": "U05FSHWJER3",
            "ts": "1688804710.000000"
        },
        "client_msg_id": "642fa8c5-6e1c-43f0-8dbf-b211ffffbada",
        "text": "I really should mess with the browser dev tools more; I am usually focused on back-end interactions, tormenting the services by proxying through Burp Suite and fiddling with the requests.\n\nOn the CL side, that restart example looks at reading files with an invalid entry, and three basic options: skip the entry, skip the file, or provide some default value. A handler is added for each, and the caller can choose which one to use... or none of them, and call another handler function of its own choice.\n\nChoosing no handler, an interactive debugger gives the programmer the option to browse through the calling stack, look at local variables, and edit the definition of one of the functions in the chain. Sounds basic, except that it can be recompiled on the fly, and then the newly-edited function can be called again by restarting that stack frame, and continuing as if nothing had ever been wrong. I find this sort of thing very useful when it might be difficult to get to the specific state that triggered a condition. Maybe the browser debugger can do something similar?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7058c846b4ac",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-06\/5539586656738_7058c846b4aca2e9582d_72.png",
            "first_name": "Tim",
            "real_name": "Tim Lavoie",
            "display_name": "Tim Lavoie",
            "team": "T5TCAFTA9",
            "name": "tim813",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688677268.127059",
        "parent_user_id": "U05FSHWJER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PFRj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really should mess with the browser dev tools more; I am usually focused on back-end interactions, tormenting the services by proxying through Burp Suite and fiddling with the requests.\n\nOn the CL side, that restart example looks at reading files with an invalid entry, and three basic options: skip the entry, skip the file, or provide some default value. A handler is added for each, and the caller can choose which one to use... or none of them, and call another handler function of its own choice.\n\nChoosing no handler, an interactive debugger gives the programmer the option to browse through the calling stack, look at local variables, and edit the definition of one of the functions in the chain. Sounds basic, except that it can be recompiled on the fly, and then the newly-edited function can be called again by restarting that stack frame, and continuing as if nothing had ever been wrong. I find this sort of thing very useful when it might be difficult to get to the specific state that triggered a condition. Maybe the browser debugger can do something similar?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1688804644.363409",
        "client_msg_id": "318c53ec-6cad-48dd-92ee-ac2e47295cff",
        "text": "Property works as long as \"the people\" own it collectively, not Big Global Corps, or even Big Unaccountable Governments, come to that. But having said that, I'm a property investor so I'm also one of the bad guys... I think it's about scale, rather than property itself. Of course, IP is a tool\/scam that benefits the Big Global Corps.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aRa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Property works as long as \"the people\" own it collectively, not Big Global Corps, or even Big Unaccountable Governments, come to that. But having said that, I'm a property investor so I'm also one of the bad guys... I think it's about scale, rather than property itself. Of course, IP is a tool\/scam that benefits the Big Global Corps."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1688804713.183419",
        "client_msg_id": "73dada8e-3322-490e-b002-f8018527750c",
        "text": "This should probably be a discussion for the pub not FoC, but I just can't help myself! :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MYO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This should probably be a discussion for the pub not FoC, but I just can't help myself! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1688804966.958299",
        "client_msg_id": "56D31787-46D0-47E7-88DD-AB7D51A1A479",
        "text": "I think participating in something as dynamicland will show people after some time that many property constructs we use today are not fitting to that way of workers and living together. So there is a natural transformation going on…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2fF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think participating in something as dynamicland"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "will show people after some time that many property constructs we use today are not fitting to that way of workers and living together. So there is a natural transformation going on"
                            },
                            {
                                "type": "text",
                                "text": "…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1688805964.545069",
        "client_msg_id": "79fdd6e0-9394-4ae9-ad1f-742230d9b798",
        "text": "Little, Local and Live not Big, Global and Canned, is my preference. Dynamicland does fit that model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688338057.293999",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+yHe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Little, Local and Live not Big, Global and Canned, is my preference. Dynamicland does fit that model."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U04UE0GNFU6",
        "type": "message",
        "ts": "1688807492.244039",
        "client_msg_id": "cdef297b-3618-4b70-8893-7221176114cd",
        "text": "If you don't mind me asking, what reaction do you get from visitors? Do they think of it as a piece of art or is it apparent that it is a TV?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5a7026a130d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5a7026a130d6337560a4f6fbf2117cc4.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Martin",
            "real_name": "Martin Shaw",
            "display_name": "Martin Shaw",
            "team": "T5TCAFTA9",
            "name": "hello614",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688791144.142939",
        "parent_user_id": "U04UE0GNFU6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vWj2c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you don't mind me asking, what reaction do you get from visitors? Do they think of it as a piece of art or is it apparent that it is a TV?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U055WH5D8DQ",
        "type": "message",
        "ts": "1688810201.740869",
        "client_msg_id": "6EB9A232-5B5E-4DE2-BD59-ACD84776F6B0",
        "text": "We also have a frame, situated on a wall full of actual art\/photos in similar frames, so we do use the art display mode on it. The driver was mostly to have it blend in and for the wall to look cohesive when not being used for tv, as opposed to just being a parking lot for a big device. When the light is just right, it really does look like just another art piece, but mostly you can tell it’s a screen, and other cues like it’s position relative to the sofa, being the largest frame on the wall, etc give it a way. No visitors have ever mistaken it for actual art ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga41961057b8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a41961057b8ac818242833c8d3fb2b36.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "Joe",
            "real_name": "Joe Nash",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joe004",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688791144.142939",
        "parent_user_id": "U04UE0GNFU6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zchw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We also have a frame, situated on a wall full of actual art\/photos in similar frames, so we do use the art display mode on it. The driver was mostly to have it blend in and for the wall to look cohesive when not being used for tv, as opposed to just being a parking lot for a big device. When the light is just right, it really does look like just another art piece, but mostly you can "
                            },
                            {
                                "type": "text",
                                "text": "tell it’s"
                            },
                            {
                                "type": "text",
                                "text": " a screen, and other cues like "
                            },
                            {
                                "type": "text",
                                "text": "it’s"
                            },
                            {
                                "type": "text",
                                "text": " position relative to the sofa, being the largest frame on the wall, etc give it a way. No visitors have ever mistaken it for actual art "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04UE0GNFU6"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1688850465.250039",
        "client_msg_id": "3bfd8d26-f671-4a32-b0df-1da5f39489b3",
        "text": "Thinking more, thes might avoid relavite\/absolute  `B$4` notation due to relocation, but it'll still be needed for replicated formulas when mixing cscalars\/vectors\/matrixes :-(\nE.g. if you have a column of prices * scalar tax rate stored in single cell, the reference to that cell must be absolute.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688741734.320999",
        "parent_user_id": "U02QC0PPER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aV8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking more, thes might avoid relavite\/absolute  "
                            },
                            {
                                "type": "text",
                                "text": "B$4",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " notation due to relocation, but it'll still be needed for replicated formulas when mixing cscalars\/vectors\/matrixes :-(\nE.g. if you have a column of prices * scalar tax rate stored in single cell, the reference to that cell must be absolute."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688856883.682109",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1688856933.000000"
        },
        "client_msg_id": "b55c1a1a-a4a2-428b-bd59-3e2fc293d9f0",
        "text": "I'm suddenly bothered by the fact that code comments are always the same _size_.\n\nSure, I've seen some people play with rich text in their code editor, applying bold or font size the same way you apply color. Atom's CSS was great. But that's outside the code. Your font size tweaks aren't going in the repo. (That'd be a tabs vs spaces fight for the ages!)\n\nBut… what if I want to leave a little pocketbook tucked into the back flap of a function? Unobtrusive. It's there as a reference when you need it. Within, you can fully explain why things are the way they are. You can talk about the history of this code. It's the sort of stuff that you'd put into a wiki, or spread across a series of commit messages — but it's right there in the codebase, _but_ it's tiny and off to the side. There when you need it, easy to ignore when you don't.\n\nMakes me wonder about other ways that being able to choose the size of representation in a program — independently from typical size units of code (ie: lines) — could be useful. Eg: at the main entry point of a well-factored complex program, where you're dispatching off to various other subsystems, things deserve to be quite large.\n\nMakes me wonder about other things that ought to live inside the codebase. To start: every feature of Github? (Consider that it serves their interests that, say, the discussion around an issue or PR lives on their cloud, not in the repo.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "reply_count": 56,
        "reply_users_count": 14,
        "latest_reply": "1689926082.623019",
        "reply_users": [
            "UMQ6LR9NZ",
            "UC2A2ARPT",
            "UBKNXPBAB",
            "U04E5QAD6DD",
            "U05G29UQHKK",
            "U016VUZGUUQ",
            "U013WBS1B1C",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "U02QC0PPER3",
            "U035QJ14NN9",
            "U02U0AS3J49",
            "UK3LH8CF5",
            "U01ULEWACPP"
        ],
        "replies": [
            {
                "user": "UMQ6LR9NZ",
                "ts": "1688857124.456129"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688857423.512699"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688857472.770969"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1688857691.293839"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688857777.186479"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1688857835.101419"
            },
            {
                "user": "UBKNXPBAB",
                "ts": "1688864735.472469"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1688867401.077409"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1688867617.044079"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688868248.496239"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688868550.114769"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688868728.930719"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688868883.702239"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1688869293.207519"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1688871213.046089"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688872357.738659"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688873173.659279"
            },
            {
                "user": "U013WBS1B1C",
                "ts": "1688877099.483519"
            },
            {
                "user": "U013WBS1B1C",
                "ts": "1688877694.284619"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688883887.996669"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1688884692.510399"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1688893365.930029"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1688895059.549569"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1688895459.417009"
            },
            {
                "user": "U035QJ14NN9",
                "ts": "1688907491.073889"
            },
            {
                "user": "U035QJ14NN9",
                "ts": "1688907701.863759"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1688933899.723689"
            },
            {
                "user": "U04E5QAD6DD",
                "ts": "1688934036.392139"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1688950709.100939"
            },
            {
                "user": "U013WBS1B1C",
                "ts": "1688951849.950989"
            },
            {
                "user": "U013WBS1B1C",
                "ts": "1688952281.548209"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1689015436.972329"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689176717.295409"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1689176863.410249"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689176954.243139"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1689176992.815039"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689177092.800509"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689177720.373019"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1689177781.150469"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689177962.980699"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1689178346.552789"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1689178441.008739"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1689178686.917949"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689178924.234789"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689178944.452709"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689179021.082709"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1689179235.099909"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689179246.575699"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1689179317.343189"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689179369.599609"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1689179508.180479"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1689179570.910059"
            },
            {
                "user": "UK3LH8CF5",
                "ts": "1689179878.027749"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1689180221.992019"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1689181395.943029"
            },
            {
                "user": "U01ULEWACPP",
                "ts": "1689926082.623019"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1XJV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm suddenly bothered by the fact that code comments are always the same "
                            },
                            {
                                "type": "text",
                                "text": "size",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nSure, I've seen some people play with rich text in their code editor, applying bold or font size the same way you apply color. Atom's CSS was great. But that's outside the code. Your font size tweaks aren't going in the repo. (That'd be a tabs vs spaces fight for the ages!)\n\nBut… what if I want to leave a little pocketbook tucked into the back flap of a function? Unobtrusive. It's there as a reference when you need it. Within, you can fully explain why things are the way they are. You can talk about the history of this code. It's the sort of stuff that you'd put into a wiki, or spread across a series of commit messages — but it's right there in the codebase, "
                            },
                            {
                                "type": "text",
                                "text": "but",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it's tiny and off to the side. There when you need it, easy to ignore when you don't.\n\nMakes me wonder about other ways that being able to choose the size of representation in a program — independently from typical size units of code (ie: lines) — could be useful. Eg: at the main entry point of a well-factored complex program, where you're dispatching off to various other subsystems, things deserve to be quite large.\n\nMakes me wonder about other things that ought to live inside the codebase. To start: every feature of Github? (Consider that it serves their interests that, say, the discussion around an issue or PR lives on their cloud, not in the repo.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMQ6LR9NZ",
                    "U04E5QAD6DD",
                    "UA14TGLTC",
                    "U01ULEWACPP"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1688857124.456129",
        "client_msg_id": "aa253515-202a-4ec7-bd89-d77161ddfac4",
        "text": ":heart_hands: Yes yes yes! A lot to this. I have a <https:\/\/git.sr.ht\/~eli_oat\/moon-maker|silly shell script I use to sort of support this>.\n\nIt allows me to attach arbitrary files to any other files and open them in concert. I use this for comments, scratch spaces, experiments and generally muddying the waters.\n\nI started trying to make my own editor to support this workflow, but found that everything I wanted already existed within the OS itself, so, instead, tried to leverage those and not re-create the wheel (also, I'm allowed to run this on my work computer where I use it the most :laughing:)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JDdix",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "heart_hands",
                                "unicode": "1faf6"
                            },
                            {
                                "type": "text",
                                "text": " Yes yes yes! A lot to this. I have a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/git.sr.ht\/~eli_oat\/moon-maker",
                                "text": "silly shell script I use to sort of support this"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nIt allows me to attach arbitrary files to any other files and open them in concert. I use this for comments, scratch spaces, experiments and generally muddying the waters.\n\nI started trying to make my own editor to support this workflow, but found that everything I wanted already existed within the OS itself, so, instead, tried to leverage those and not re-create the wheel (also, I'm allowed to run this on my work computer where I use it the most "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing",
                                "unicode": "1f606"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "new_moon_with_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Re: <@UC2A2ARPT>",
        "files": [
            {
                "id": "F05G4S8UDMG",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UC2A2ARPT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xshTz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1688857423.512699",
        "client_msg_id": "d170d761-9814-4759-8595-8413501d098b",
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "speaking_head_in_silhouette",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688857472.770969",
        "client_msg_id": "9359b310-ae86-4612-a9a7-278557f195a0",
        "text": "Re: <@UMQ6LR9NZ>  — That absolutely rules! What's the editor experience like? Like, when you're looking at some code, how do you know that it has a moon?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hd4Mm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: "
                            },
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": "  — That absolutely rules! What's the editor experience like? Like, when you're looking at some code, how do you know that it has a moon?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1688857691.293839",
        "client_msg_id": "28ACD9C7-DC2A-4DB2-BC0E-85EDF6BAB03A",
        "text": "The editor experience is…uneven. For the most part I rely on my memory to know if there are existing moons for a given file, but I also have a command to list available moons by given file name. Eg, I can check if app dot tee es has any moons, and then open em or not. It’s not super useful for folks other than me, these days. I also tend to do things with window systems that folks find alarming (aka, never a tab, a million windows) I manually arrange moons near or around files, usually in smaller, as close to square as I can get, windows. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i3DvE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The editor experience is"
                            },
                            {
                                "type": "text",
                                "text": "…"
                            },
                            {
                                "type": "text",
                                "text": "uneven"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " For the most part I rely on my memory to know if there are existing moons for a given file, but I also have a command to list available moons by given file name"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Eg, I can check if app dot tee es has any moons, and then open em or not"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "It’s"
                            },
                            {
                                "type": "text",
                                "text": " not super useful for folks other than me, these days"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I also tend to do things with window systems that folks find alarming (aka, never a tab, a million windows) I manually arrange moons near or around files, usually in smaller, as close to square as I can get, windows"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688857777.186479",
        "client_msg_id": "e1021365-2488-49d3-87b2-242cfac4eeab",
        "text": "&gt; (aka, never a tab, a million windows)\nA, a citizen of Siracusa county :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5y1EO",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(aka, never a tab, a million windows)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A, a citizen of Siracusa county :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1688857835.101419",
        "client_msg_id": "A87DE296-7693-4DE9-8D08-87DC95A5106E",
        "text": "Tax paying, flag waving, patriot of it, yes. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "swux",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tax paying, flag waving, patriot of it, yes"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688859191.421279",
        "client_msg_id": "ffc872a2-02e4-4a1a-8b4f-fe85708ddb82",
        "text": "I'm a big fan. I've tried to shift my mindset more into this space when building <http:\/\/gnocchi.club|gnocchi.club>, especially relating to only providing features to help accomplish the task at hand as a contrast against the increasingly chaotic nature of most cooking sites (because of their reliance on ads and the engagement spiral).\n\nIt's still hard for me to think outside the box of traditional web apps, but mainly I tried to focus on trying to end up in a usable state no matter what when interpreting user actions, limiting notifications and re-engagement junk, and generally trying to be utilitarian and minimalist as a product by avoiding ambitious features.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688790912.594619",
        "parent_user_id": "U04UE0GNFU6",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cSu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a big fan. I've tried to shift my mindset more into this space when building "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/gnocchi.club",
                                "text": "gnocchi.club"
                            },
                            {
                                "type": "text",
                                "text": ", especially relating to only providing features to help accomplish the task at hand as a contrast against the increasingly chaotic nature of most cooking sites (because of their reliance on ads and the engagement spiral).\n\nIt's still hard for me to think outside the box of traditional web apps, but mainly I tried to focus on trying to end up in a usable state no matter what when interpreting user actions, limiting notifications and re-engagement junk, and generally trying to be utilitarian and minimalist as a product by avoiding ambitious features."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688859598.254939",
        "client_msg_id": "02a78670-af40-4bcc-8880-32af0c2fe35f",
        "text": "Only halfway through the latest podcast ep but my imagination is piqued. Is there a version of, like, unit testing, where the software generates some randomized states based on its internal state and unknown inputs, presents the outcome as part of a report, and asks humans to correct any erroneous assumptions or missing contingencies? IDK how to even describe what I'm thinking of but I feel like it must exist, or maybe be theoretical in the emerging AI models of creating software.\n\nKind of fuzz testing, I guess. My brain is going somewhere bigger with this, though, maybe I'll check in with it again once I find time to finish the podcast.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "reply_count": 6,
        "reply_users_count": 5,
        "latest_reply": "1688992890.786719",
        "reply_users": [
            "U0112C10V4Y",
            "U05G29UQHKK",
            "U013ZLJARC7",
            "UA14TGLTC",
            "UKJGU23KP"
        ],
        "replies": [
            {
                "user": "U0112C10V4Y",
                "ts": "1688866441.969829"
            },
            {
                "user": "U0112C10V4Y",
                "ts": "1688866499.467729"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688868077.411209"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1688893414.176099"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1688910623.993159"
            },
            {
                "user": "UKJGU23KP",
                "ts": "1688992890.786719"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+HC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Only halfway through the latest podcast ep but my imagination is piqued. Is there a version of, like, unit testing, where the software generates some randomized states based on its internal state and unknown inputs, presents the outcome as part of a report, and asks humans to correct any erroneous assumptions or missing contingencies? IDK how to even describe what I'm thinking of but I feel like it must exist, or maybe be theoretical in the emerging AI models of creating software.\n\nKind of fuzz testing, I guess. My brain is going somewhere bigger with this, though, maybe I'll check in with it again once I find time to finish the podcast."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688860014.063529",
        "client_msg_id": "7fc85543-eb34-4cf7-b225-c331f3be41e3",
        "text": "Another thing. My wife worked at a legal research company for a while and she kept pausing the podcast (I subjected her to) to comment on the legal side of things. One thing she pointed out is that civil law is about codifying and interpreting laws to judge situations, but _common law_ is basically a series of precedents. You try a case, if it's novel you invent a judgment. If it's similar to a previous case you adopt\/adapt the previous judgment and it becomes a new more refined precedent for future situations.\n\nNot sure the mapping here. I'm imagining when Ivan puts in his address to buy a ticket, instead of \"invalid address\" and end of story, the software responds, \"this format of address is new to us, please await trial\" and forwards it to the Airline Judge who renders judgment that is then encoded as precedent in the software itself.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688860014.063529",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1688863858.441029",
        "reply_users": [
            "UC2A2ARPT",
            "U05G29UQHKK"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1688863226.683679"
            },
            {
                "user": "U05G29UQHKK",
                "ts": "1688863858.441029"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cis7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thing. My wife worked at a legal research company for a while and she kept pausing the podcast (I subjected her to) to comment on the legal side of things. One thing she pointed out is that civil law is about codifying and interpreting laws to judge situations, but "
                            },
                            {
                                "type": "text",
                                "text": "common law",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is basically a series of precedents. You try a case, if it's novel you invent a judgment. If it's similar to a previous case you adopt\/adapt the previous judgment and it becomes a new more refined precedent for future situations.\n\nNot sure the mapping here. I'm imagining when Ivan puts in his address to buy a ticket, instead of \"invalid address\" and end of story, the software responds, \"this format of address is new to us, please await trial\" and forwards it to the Airline Judge who renders judgment that is then encoded as precedent in the software itself."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thread-please",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "US370TRJA",
                    "U04E5QAD6DD",
                    "U02U0AS3J49"
                ],
                "count": 4
            },
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688863226.683679",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1688863259.000000"
        },
        "client_msg_id": "98c18979-da99-4aa2-83b5-48c94d675258",
        "text": "I mean, I have every unhandled exception on my SaaS app fire an email to me.\n\nSome days, I wake up with 2000 emails.\n\nBut most days, if there's any error email at all, it's a good \"huh — didn't know _that_ was a thing that could happen. Let me go fix that!\"\n\nSo I think yours is a good idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688860014.063529",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mv8Yp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean, I have every unhandled exception on my SaaS app fire an email to me.\n\nSome days, I wake up with 2000 emails.\n\nBut most days, if there's any error email at all, it's a good \"huh — didn't know "
                            },
                            {
                                "type": "text",
                                "text": "that",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was a thing that could happen. Let me go fix that!\"\n\nSo I think yours is a good idea."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688863858.441029",
        "client_msg_id": "72451577-570d-42cb-a8be-3caf8c353d72",
        "text": "Maybe my first takeaway is, I would totally alarm on 500s, but the address thing would be codified as a 400. I wonder if there is a scalable model of validation that doesn't rely on the certainty of \"not recognized = invalid\" and puts you in the loop. Or an LLM in the loop, maybe (although that just seems to pass the buck a bit).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688860014.063529",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ay",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe my first takeaway is, I would totally alarm on 500s, but the address thing would be codified as a 400. I wonder if there is a scalable model of validation that doesn't rely on the certainty of \"not recognized = invalid\" and puts you in the loop. Or an LLM in the loop, maybe (although that just seems to pass the buck a bit)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1688864735.472469",
        "client_msg_id": "1bf21212-359e-4fa4-91f3-bd59d0a4a237",
        "text": "Swift\/Xcode has some kinda <https:\/\/developer.apple.com\/library\/archive\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/ComentBlock.html#\/\/apple_ref\/doc\/uid\/TP40016497-CH103-SW1|Markdown-formatted comments thing>. That’s not specifically about _size_, but it’s related, right? Rich formatting embedded into the source-of-truth code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k4RN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Swift\/Xcode has some kinda "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/library\/archive\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/ComentBlock.html#\/\/apple_ref\/doc\/uid\/TP40016497-CH103-SW1",
                                "text": "Markdown-formatted comments thing"
                            },
                            {
                                "type": "text",
                                "text": ". That’s not specifically about "
                            },
                            {
                                "type": "text",
                                "text": "size",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but it’s related, right? Rich formatting embedded into the source-of-truth code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0112C10V4Y",
        "type": "message",
        "ts": "1688866441.969829",
        "client_msg_id": "54105c71-3597-4aa9-9e3d-0f3b909036c1",
        "text": "Have you seen quickcheck (in Haskell) or similarly inspired libraries in other languages (like hypothesis for python)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf521cc065bb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f521cc065bb724c90c57c263ec7ee857.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Naveen Michaud-Agrawal",
            "display_name": "Naveen Michaud-Agrawal",
            "team": "T5TCAFTA9",
            "name": "naveen.michaudagrawal",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6q1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you seen quickcheck (in Haskell) or similarly inspired libraries in other languages (like hypothesis for python)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0112C10V4Y",
        "type": "message",
        "ts": "1688866499.467729",
        "client_msg_id": "564c63dc-9eb7-40fc-84f7-1c5ea1368bf8",
        "text": "<https:\/\/hypothesis.readthedocs.io\/en\/latest\/|https:\/\/hypothesis.readthedocs.io\/en\/latest\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf521cc065bb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f521cc065bb724c90c57c263ec7ee857.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Naveen Michaud-Agrawal",
            "display_name": "Naveen Michaud-Agrawal",
            "team": "T5TCAFTA9",
            "name": "naveen.michaudagrawal",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ft5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/hypothesis.readthedocs.io\/en\/latest\/",
                                "text": "https:\/\/hypothesis.readthedocs.io\/en\/latest\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1688867401.077409",
        "client_msg_id": "E0A83B4B-E268-4EA3-8BBA-24572E3BFF22",
        "text": "I’ve been thinking that we should have and use more formatting (fonts, sizes, weights, layout, etc.) in code. Why shouldn’t my code look as good as a professionally typeset manuscript?\n\nHas anyone tried this?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NtJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " been thinking that we should have and use more formatting (fonts, sizes, weights, layout, etc"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": ") in code"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Why "
                            },
                            {
                                "type": "text",
                                "text": "shouldn’t"
                            },
                            {
                                "type": "text",
                                "text": " my code look as good as a professionally typeset manuscript?\n\nHas anyone tried this?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1688867617.044079",
        "client_msg_id": "791FEFFB-E5F8-454A-92F6-D651BEC78E3E",
        "text": "I use acme, a text editor from plan9 pretty much daily. By default it uses proportional fonts. Not exactly the same since everything is the same text weight, but, I find it nice for the most part. \n\nI also write a lot of apl. The dyalog interpreter uses sort of proportional fonts for the glyphs. But there there’s a pretty stark aesthetic distinction between code and everything that isn’t code. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IWNi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use acme, a text editor from plan9 pretty much daily"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " By default it uses proportional fonts"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Not exactly the same since everything is the same text weight, but, I find it nice for the most part"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " \n\nI also write a lot of apl"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " The dyalog interpreter uses sort of proportional fonts for the glyphs. But there "
                            },
                            {
                                "type": "text",
                                "text": "there’s"
                            },
                            {
                                "type": "text",
                                "text": " a pretty stark aesthetic distinction between code and everything that "
                            },
                            {
                                "type": "text",
                                "text": "isn’t"
                            },
                            {
                                "type": "text",
                                "text": " code"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688868077.411209",
        "client_msg_id": "72f16b27-f909-43ca-bb9e-febf4910107b",
        "text": "Those are new to me but I have heard of property based testing! It was on my list of things to learn about, then I forgot. Thanks for the pointer!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688859598.254939",
        "parent_user_id": "U05G29UQHKK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sgA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Those are new to me but I have heard of property based testing! It was on my list of things to learn about, then I forgot. Thanks for the pointer!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688868248.496239",
        "client_msg_id": "0927bf9c-9505-43ff-a1ed-5f8c9ee25566",
        "text": "The visual design needs of prose and code are very different I think, applying similar tools without analysing those differences feels like it would quickly become counter-productive imo",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCce=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The visual design needs of prose and code are very different I think, applying similar tools without analysing those differences feels like it would quickly become counter-productive imo"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688868550.114769",
        "edited": {
            "user": "U05G29UQHKK",
            "ts": "1688868577.000000"
        },
        "client_msg_id": "41c454e6-e42e-4761-9a0d-3e324bc7eb75",
        "text": "Building UI with some great designers taught me that visual hierarchy and typography are really deep skillsets. In some ways I feel fortunate that language design (i.e. use of symbols for structure) and syntax highlighting gives us a lot of good visual design for source files without having to consciously make decisions about things like heading sizes, flow, spacing, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W9A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Building UI with some great designers taught me that visual hierarchy and typography are really deep skillsets. In some ways I feel fortunate that language design (i.e. use of symbols for structure) and syntax highlighting gives us a lot of good visual design for source files without having to consciously make decisions about things like heading sizes, flow, spacing, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688868728.930719",
        "client_msg_id": "68a3c320-cd4c-49ea-aea5-1838c09a5a5e",
        "text": "Funny enough it was one of those designers who first complained to me as he was starting to code, \"why can't I make comments a larger font size\" though. I _do_ agree comments could benefit from more visual emphasis, particularly. But he intuited this problem because he had the skills and experience to understand it and fix it. IDK if I could be trusted to use those same tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9mRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Funny enough it was one of those designers who first complained to me as he was starting to code, \"why can't I make comments a larger font size\" though. I "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " agree comments could benefit from more visual emphasis, particularly. But he intuited this problem because he had the skills and experience to understand it and fix it. IDK if I could be trusted to use those same tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U04E5QAD6DD",
                    "UMQ6LR9NZ",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U05G29UQHKK",
        "type": "message",
        "ts": "1688868883.702239",
        "client_msg_id": "09cb44c5-1843-4dcc-8682-2b50cfe0d28c",
        "text": "Maybe linking the visual design to semantic meaning would help the idea fit better into the mental model of coding. Like classifying multiple kinds of comments... Your classic TODO, FIXME, but also ASIDE, TIP, WARNING, etc. These get emphasized or de-emphasized accordingly.\n\nI do have a VSCode plugin which color highlights some of those tags which does help me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c0e8e6098f9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-07-05\/5530770852005_1c0e8e6098f9196b4ec9_72.jpg",
            "first_name": "Grant",
            "real_name": "Grant Forrest",
            "display_name": "Grant Forrest",
            "team": "T5TCAFTA9",
            "name": "gaforres",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yRV1u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe linking the visual design to semantic meaning would help the idea fit better into the mental model of coding. Like classifying multiple kinds of comments... Your classic TODO, FIXME, but also ASIDE, TIP, WARNING, etc. These get emphasized or de-emphasized accordingly.\n\nI do have a VSCode plugin which color highlights some of those tags which does help me."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1688869293.207519",
        "client_msg_id": "6BDBF6B3-CC37-44D8-803B-D2F0B8BEA269",
        "text": "I feel — though I’ve not explored the idea much — that formatting could indicate some of the semantics of a program _in place of_ some of the symbols we currently use. For instance, indicate a function declaration by the name of the function being on its own line in larger, bolder text. I’m not sure how far this goes. It does seem to end with some sort of structured editor if you want to edit code with formatting like that. \n\nOr, maybe just having a way to take some source code and typeset it for easier reading? (*If* it would actually be easier instead of frivolous.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O2e9=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel — though "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " not explored the idea much — that formatting could indicate some of the semantics of a program "
                            },
                            {
                                "type": "text",
                                "text": "in place of",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " some of the symbols we currently use"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " For instance, indicate a function declaration by the name of the function being on its own line in larger, bolder text"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " not sure how far this goes"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It does seem to end with some sort of structured editor if you want to edit code with formatting like that"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " \n\nOr, maybe just having a way to take some source code and typeset it for easier reading? ("
                            },
                            {
                                "type": "text",
                                "text": "If",
                                "style": {
                                    "bold": true,
                                    "italic": false,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " it would actually be easier instead of frivolous"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1688871213.046089",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1688871252.000000"
        },
        "client_msg_id": "841c5370-a0b3-47e6-bb50-be67547871e4",
        "text": "There are a couple entwined questions here. One is varying prominence of comments and (presumably other language features). The other is traditional text formatting for code. I like the idea of supporting different types of documentation at the language level, and potentially different display, _if it's standardized_, or if I can uniformly configure it in my editor.\n\nFor general formatting, the conventional wisdom is already to enforce most formatting questions via linter. I think adding more degrees of freedom will make things worse for all but the most artisanal coders.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/c2v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a couple entwined questions here. One is varying prominence of comments and (presumably other language features). The other is traditional text formatting for code. I like the idea of supporting different types of documentation at the language level, and potentially different display, "
                            },
                            {
                                "type": "text",
                                "text": "if it's standardized",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or if I can uniformly configure it in my editor.\n\nFor general formatting, the conventional wisdom is already to enforce most formatting questions via linter. I think adding more degrees of freedom will make things worse for all but the most artisanal coders."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688872357.738659",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1688872590.000000"
        },
        "client_msg_id": "afd2bfd7-3c45-42f3-935a-975f1da2d042",
        "text": "Appreciate all the comments!\n\nIf you, humble reader, find yourself thinking \"not sure if that'd fit well with the tools I use, or my team culture, or the broader ecosystem of my PL\", then by all means deeply consider the reasons that it won't work. If that leads you to a realization about how to make programming better with a few minor tweaks on the status quo, awesome!\n\nBut also—if you'll allow yourself—indulge in a bit of wild speculation about how things could be _radically_ different.\n\nFor instance: I arrived at this \"hey, why no sense of scale?\" thought by _actually_ imagining tucking a booklet into the back pocket of a function. I picture the booklet as being about the size of my hand, maybe 50 pages with a nice flat binding, and the function is something made out of cloth and metal and it's about the size of a large dog. It feels a bit like remembering a dream — the details don't need to be clear, they just need to motivate me to ask \"why?\" about something I've taken for granted for * checks watch * about 20 years now.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UgvV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Appreciate all the comments!\n\nIf you, humble reader, find yourself thinking \"not sure if that'd fit well with the tools I use, or my team culture, or the broader ecosystem of my PL\", then by all means deeply consider the reasons that it won't work. If that leads you to a realization about how to make programming better with a few minor tweaks on the status quo, awesome!\n\nBut also—if you'll allow yourself—indulge in a bit of wild speculation about how things could be "
                            },
                            {
                                "type": "text",
                                "text": "radically",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " different.\n\nFor instance: I arrived at this \"hey, why no sense of scale?\" thought by "
                            },
                            {
                                "type": "text",
                                "text": "actually",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " imagining tucking a booklet into the back pocket of a function. I picture the booklet as being about the size of my hand, maybe 50 pages with a nice flat binding, and the function is something made out of cloth and metal and it's about the size of a large dog. It feels a bit like remembering a dream — the details don't need to be clear, they just need to motivate me to ask \"why?\" about something I've taken for granted for * checks watch * about 20 years now."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U02QC0PPER3",
                    "UMQ6LR9NZ",
                    "U04E5QAD6DD"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1688873173.659279",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1688874932.000000"
        },
        "client_msg_id": "c078e271-4270-4013-969b-3cddf49bfdcc",
        "text": "&gt; Maybe linking the visual design to semantic meaning would help the idea fit better into the mental model of coding.\nI quite like this thought from <@U05G29UQHKK>. This is one of the big critiques of node-wire visual programming — it's \"visual\" in only the shallowest sense, because the visual design is half-devoid of semantics. The spatial arrangement of nodes has meaning to the human programmer, but not to the computer. It would be nice to play with a visual programming system that allowed for both.\n\n&gt; For instance, indicate a function declaration by the name of the function being on its own line in larger, bolder text.\nThis comment from <@U04E5QAD6DD> makes me think of literate programming. I'd love to try writing in a literate language that _expected_ rich text. I'm sure such a thing exists, I've just never used one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FlbC",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe linking the visual design to semantic meaning would help the idea fit better into the mental model of coding."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI quite like this thought from "
                            },
                            {
                                "type": "user",
                                "user_id": "U05G29UQHKK"
                            },
                            {
                                "type": "text",
                                "text": ". This is one of the big critiques of node-wire visual programming — it's \"visual\" in only the shallowest sense, because the visual design is half-devoid of semantics. The spatial arrangement of nodes has meaning to the human programmer, but not to the computer. It would be nice to play with a visual programming system that allowed for both.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For instance, indicate a function declaration by the name of the function being on its own line in larger, bolder text."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis comment from "
                            },
                            {
                                "type": "user",
                                "user_id": "U04E5QAD6DD"
                            },
                            {
                                "type": "text",
                                "text": " makes me think of literate programming. I'd love to try writing in a literate language that "
                            },
                            {
                                "type": "text",
                                "text": "expected",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rich text. I'm sure such a thing exists, I've just never used one."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1688877099.483519",
        "client_msg_id": "5b57acf5-083f-470d-9598-fdf3b4d694f3",
        "text": "On the topic of `TBD: FIX: ...` I started using a couple functions named `e.g. n.b.` for this purpose. Tooling can find them, but their argument can be anything. `e.g.`, of course, is almost always an inline example, but may refer to a file, url, or hashtag.\n\nWhile it may make sense to change how things look, I imagine many of us remember the early days of desktop publishing, 3D borders in GUIs, circus-inspired web pages, etc. The goal is to communicate meaning and intent clearly, in context, but also let people find more information as needed or desired. So, rather than text size, what if this content became links, maybe with a preview popup? Things can be smaller, but still a paragraph long, which makes them either hard to read or take up so much space that you lose more active content. What I try to do is minimize the size of the comment content, though sometimes I still do entire paras and have 5:1 comments to code by line.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9ywk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the topic of "
                            },
                            {
                                "type": "text",
                                "text": "TBD: FIX: ...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I started using a couple functions named "
                            },
                            {
                                "type": "text",
                                "text": "e.g. n.b.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for this purpose. Tooling can find them, but their argument can be anything. "
                            },
                            {
                                "type": "text",
                                "text": "e.g.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", of course, is almost always an inline example, but may refer to a file, url, or hashtag.\n\nWhile it may make sense to change how things look, I imagine many of us remember the early days of desktop publishing, 3D borders in GUIs, circus-inspired web pages, etc. The goal is to communicate meaning and intent clearly, in context, but also let people find more information as needed or desired. So, rather than text size, what if this content became links, maybe with a preview popup? Things can be smaller, but still a paragraph long, which makes them either hard to read or take up so much space that you lose more active content. What I try to do is minimize the size of the comment content, though sometimes I still do entire paras and have 5:1 comments to code by line."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013WBS1B1C",
        "type": "message",
        "ts": "1688877694.284619",
        "client_msg_id": "c1716225-b4ba-4b2d-8929-e12cc3ed5e73",
        "text": "&gt;  Why shouldn’t my code look as good as a professionally typeset manuscript?\nA good experiment would be to take a non-tiny piece of software and do this. It's largely aligned with Literate Programming, so yes it's been done. Why didn't LP win? Many reasons and mine would only be anecdotal. I love the idea in theory but, having tech edited and co-authored books, I'm much happier writing code. I'm also a lot better at it. There are two different skills at play.\n\nAnother pretty easy experiment is to take a codebase and simply write a ToC and index for it, like a book would have.\n\nConsider, also, that formatting is intended to aid the reader. This is what we should all do. Who us our reader? It's not a novel, or a play, or a textbook, or a newspaper. But if we take those as examples, how much variety is there in typography? Not much. Mostly it's about structure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99d013fa8bfb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-05\/2248942033796_99d013fa8bfb537f563a_72.jpg",
            "first_name": "",
            "real_name": "Gregg Irwin",
            "display_name": "Gregg Irwin",
            "team": "T5TCAFTA9",
            "name": "gregg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nZW",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Why shouldn’t my code look as good as a professionally typeset manuscript?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A good experiment would be to take a non-tiny piece of software and do this. It's largely aligned with Literate Programming, so yes it's been done. Why didn't LP win? Many reasons and mine would only be anecdotal. I love the idea in theory but, having tech edited and co-authored books, I'm much happier writing code. I'm also a lot better at it. There are two different skills at play.\n\nAnother pretty easy experiment is to take a codebase and simply write a ToC and index for it, like a book would have.\n\nConsider, also, that formatting is intended to aid the reader. This is what we should all do. Who us our reader? It's not a novel, or a play, or a textbook, or a newspaper. But if we take those as examples, how much variety is there in typography? Not much. Mostly it's about structure."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688883887.996669",
        "client_msg_id": "85ba0008-3e92-485b-92ba-90ef4ec48710",
        "text": "I think LP would have been better served by getting rid of the whole typographical angle: <http:\/\/akkartik.name\/post\/literate-programming>\n\nThis isn't to say typography doesn't matter. I love OP. I just consider any connection to LP to be a red herring that will lead you astray. LP's notion of typography was _much weaker_ than Ivan's vision.\n\nThis matters because I think this is a misguided question:\n\n&gt; Why shouldn’t my code look as good as a professionally typeset manuscript?\nWhy _should_ code look like manuscript? The use case and needs are very different. Code is fundamentally non-linear.\n\nI mean, to the extent that we have zero typography in code, sure, anything would be an improvement. But I think it would quickly hit diminishing returns. It would be a strategic dead end. The typographic needs of code need to be rethought from scratch.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hcl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think LP would have been better served by getting rid of the whole typographical angle: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/post\/literate-programming"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis isn't to say typography doesn't matter. I love OP. I just consider any connection to LP to be a red herring that will lead you astray. LP's notion of typography was "
                            },
                            {
                                "type": "text",
                                "text": "much weaker",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " than Ivan's vision.\n\nThis matters because I think this is a misguided question:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why shouldn’t my code look as good as a professionally typeset manuscript?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhy "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code look like manuscript? The use case and needs are very different. Code is fundamentally non-linear.\n\nI mean, to the extent that we have zero typography in code, sure, anything would be an improvement. But I think it would quickly hit diminishing returns. It would be a strategic dead end. The typographic needs of code need to be rethought from scratch."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMQ6LR9NZ",
                    "U04E5QAD6DD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688884692.510399",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1688884865.000000"
        },
        "client_msg_id": "616b6645-b1f7-4012-a748-73a88c29fcc0",
        "text": "&gt; Makes me wonder about other ways that being able to choose the size of representation in a program — independently from typical size units of code (ie: lines) — could be useful.\nOne place I would have loved this is when I was trying to grok Lisp interpreters. The classic Lisp interpreter looks something like this:\n\n```def eval(form, env):\n  case\n    ... -&gt; eval(..., env)\n    ... -&gt; eval(..., env)\n    ...\n  end\nend```\nBasically you have a large number of branches, and each of them has some complicated expression that passes `env` around. For more real-world codebases (like <https:\/\/github.com\/arclanguage\/anarki> or <http:\/\/www.paulgraham.com\/bel.html>) each case might be complex enough to require a helper. In which case you now have a maze of _mutually_ recursive calls. And often the case that actually _uses_ `env` is just one line deep inside one of the helpers. All the other mentions of `env` exist just to plumb it through to that one line. It would be great to typeset all the mentions of `env` in small font size, but magnify the font size of `env` in that one line.\n\nAnd this is just one argument. If you look at Bel's source code, there's a half dozen such arguments being plumbed through in a similar pattern that would benefit from this sort of visual salience management.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688856883.682109",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1GO",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes me wonder about other ways that being able to choose the size of representation in a program — independently from typical size units of code (ie: lines) — could be useful."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOne place I would have loved this is when I was trying to grok Lisp interpreters. The classic Lisp interpreter looks something like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def eval(form, env):\n  case\n    ... -> eval(..., env)\n    ... -> eval(..., env)\n    ...\n  end\nend"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBasically you have a large number of branches, and each of them has some complicated expression that passes "
                            },
                            {
                                "type": "text",
                                "text": "env",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " around. For more real-world codebases (like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/arclanguage\/anarki"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.paulgraham.com\/bel.html"
                            },
                            {
                                "type": "text",
                                "text": ") each case might be complex enough to require a helper. In which case you now have a maze of "
                            },
                            {
                                "type": "text",
                                "text": "mutually",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " recursive calls. And often the case that actually "
                            },
                            {
                                "type": "text",
                                "text": "uses",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "env",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is just one line deep inside one of the helpers. All the other mentions of "
                            },
                            {
                                "type": "text",
                                "text": "env",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exist just to plumb it through to that one line. It would be great to typeset all the mentions of "
                            },
                            {
                                "type": "text",
                                "text": "env",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in small font size, but magnify the font size of "
                            },
                            {
                                "type": "text",
                                "text": "env",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in that one line.\n\nAnd this is just one argument. If you look at Bel's source code, there's a half dozen such arguments being plumbed through in a similar pattern that would benefit from this sort of visual salience management."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "spider_web",
                "users": [
                    "U02QC0PPER3"
                ],
                "count": 1
            }
        ]
    }
]