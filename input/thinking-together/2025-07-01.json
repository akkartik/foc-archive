[
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1751356439.512999",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1751356756.000000"
        },
        "client_msg_id": "81ae2c83-792f-4381-a0d5-d71515985466",
        "text": "I see several things going for lisp in synergy:\n• homoiconicity (convenience, probably enabled macro system, and made it easier to provide print\/read\/eval out the box), \n• macro system (convenience, less error prone than C's string-templating, easier\/faster\/cheaper to implement DSLs)\n• out-the-box print\/read\/eval (convenience, interactive development, I bet many had idea for repl for JS, but implementing print\/read was a deal breaker),\n• code compactness (in contrast to eg TypeScript\/Java\/etc explicit types: basically less text on screen, faster to keyboard-type it in, faster to try things out\/iterate, and cheaper custom DSLs\/control-flow speed this up even further)\n• homoiconicity also sets a baseline expectation on how custom DSLs (should) look like, so most popular ones are not over-the-top funky-looking\nbut it seems like the underlying theme is *convenience* (with a touch of uniformity maybe)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aObQN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see several things going for lisp in synergy:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "homoiconicity (convenience, probably enabled macro system, and made it easier to provide print\/read\/eval out the box), "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "macro system (convenience, less error prone than C's string-templating, easier\/faster\/cheaper to implement DSLs)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "out-the-box print\/read\/eval (convenience, interactive development, I bet many had idea for repl for JS, but implementing print\/read was a deal breaker),"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "code compactness (in contrast to eg TypeScript\/Java\/etc explicit types: basically less text on screen, faster to keyboard-type it in, faster to try things out\/iterate, and cheaper custom DSLs\/control-flow speed this up even further)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "homoiconicity also sets a baseline expectation on how custom DSLs (should) look like, so most popular ones are not over-the-top funky-looking"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nbut it seems like the underlying theme is "
                            },
                            {
                                "type": "text",
                                "text": "convenience ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(with a touch of uniformity maybe)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1751420197.436339",
        "client_msg_id": "c328b98e-c5a7-4a4f-bdbd-6a60b6801390",
        "text": "The way I see it, the concept of macros came about due to features of pre-Common-Lisp and pre-Scheme lisps. Features such as FEXPRs and EVAL. Both of these ideas have essentially been erased from history. FEXPRs are like functions, except that calls to FEXPRs do not cause evaluation of args. FEXPRs are expected to evaluate their args when appropriate (using EVAL). These ideas have been formalized more tightly over time, but, the existence of loosey-goosey concepts like FEXPRs enabled the \/invention\/ of macros. Homoiconicity was part of the equation. Furthermore, the attempt to force all concepts into a single language, in a self-consistent manner, contributed to the erasure of FEXPRs. EVAL become \"compilers\" and was allowed to exist outside of formalized, consolidated programming languages. FEXPRs just went away. I feel that OhmJS\/PEG bring back FEXPR-like features and I currently call the concept \"transpilation\". I expect it to run in a separate pass in kinda like a multi-headed UNIX pipeline. Issues of hygiene simply dissolve when separate passes are allowed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oyxY2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way I see it, the concept of macros came about due to features of pre-Common-Lisp and pre-Scheme lisps. Features such as FEXPRs and EVAL. Both of these ideas have essentially been erased from history. FEXPRs are like functions, except that calls to FEXPRs do not cause evaluation of args. FEXPRs are expected to evaluate their args when appropriate (using EVAL). These ideas have been formalized more tightly over time, but, the existence of loosey-goosey concepts like FEXPRs enabled the \/invention\/ of macros. Homoiconicity was part of the equation. Furthermore, the attempt to force all concepts into a single language, in a self-consistent manner, contributed to the erasure of FEXPRs. EVAL become \"compilers\" and was allowed to exist outside of formalized, consolidated programming languages. FEXPRs just went away. I feel that OhmJS\/PEG bring back FEXPR-like features and I currently call the concept \"transpilation\". I expect it to run in a separate pass in kinda like a multi-headed UNIX pipeline. Issues of hygiene simply dissolve when separate passes are allowed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1751435320.403559",
        "client_msg_id": "842874e3-d864-47b1-9bad-6a241b35113a",
        "text": "Both FEXPR and macros are techniques to do <https:\/\/hal.science\/hal-02877319\/document|staged computation>. As are compilers, or more generally build systems. I'd love to see people focusing on the bigger picture of staged computation, rather than on the detailed differences of its various realizations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749390179.045749",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NXFvg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both FEXPR and macros are techniques to do "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.science\/hal-02877319\/document",
                                "text": "staged computation"
                            },
                            {
                                "type": "text",
                                "text": ". As are compilers, or more generally build systems. I'd love to see people focusing on the bigger picture of staged computation, rather than on the detailed differences of its various realizations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "U07BD7U4S4R"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1751438149.078389",
        "edited": {
            "user": "U08294YLWJH",
            "ts": "1751438358.000000"
        },
        "client_msg_id": "80bfa6e1-dddb-45f6-b1d5-304a8ea49d09",
        "text": "~_can someone remind me there is a project that was shared here, a canvas for JS workflows... ?_~\nfound it - <https:\/\/natto.dev\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1751438149.078389",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1751665037.379419",
        "reply_users": [
            "U08294YLWJH",
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "U08294YLWJH",
                "ts": "1751438326.018829"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1751656544.186419"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1751665037.379419"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XrosO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "can someone remind me there is a project that was shared here, a canvas for JS workflows... ?",
                                "style": {
                                    "italic": true,
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nfound it - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/natto.dev\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08294YLWJH",
        "type": "message",
        "ts": "1751438326.018829",
        "client_msg_id": "df913994-912d-435a-a808-92141f56c404",
        "text": "found it, <https:\/\/natto.dev\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "54bdcc3cea79",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-11-25\/8077168843205_54bdcc3cea79c3cee9ab_72.jpg",
            "first_name": "Oleksandr",
            "real_name": "Oleksandr Kryvonos",
            "display_name": "Oleksandr Kryvonos",
            "team": "T5TCAFTA9",
            "name": "oleksandr.kryvonos.od",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1751438149.078389",
        "parent_user_id": "U08294YLWJH",
        "attachments": [
            {
                "image_url": "https:\/\/natto.dev\/twitter.png",
                "image_width": 1012,
                "image_height": 506,
                "image_bytes": 25500,
                "from_url": "https:\/\/natto.dev\/",
                "service_icon": "https:\/\/natto.dev\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/natto.dev\/",
                "fallback": "natto.dev - write JavaScript on a 2D canvas",
                "title": "natto.dev - write JavaScript on a 2D canvas",
                "title_link": "https:\/\/natto.dev\/",
                "service_name": "natto.dev"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HHfUe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "found it, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/natto.dev\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    }
]