[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1596875035.280500",
        "client_msg_id": "109da77b-89a3-4156-ac9b-69d515026e95",
        "text": "<@UFXFB1RK8> I certainly agree - there is worse happening than this renaming issue.\n<@UDQBTJ211> Adapting to changes in the world around us is fine. Being shaped by tools as well - it's inevitable anyway. The issue here is (1) This is a partial bug fix, not an adaptation. Old and new gene names will coexist for many years and cause a lot of trouble. (2) Similar issues can happen any time again, if Microsoft decides to introduce more magic into Excel. It's OK to adapt to a changing world, but you want to have a say in how these changes happen when your core business is concerned.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596782620.248700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eqsm8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFXFB1RK8"
                            },
                            {
                                "type": "text",
                                "text": " I certainly agree - there is worse happening than this renaming issue.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Adapting to changes in the world around us is fine. Being shaped by tools as well - it's inevitable anyway. The issue here is (1) This is a partial bug fix, not an adaptation. Old and new gene names will coexist for many years and cause a lot of trouble. (2) Similar issues can happen any time again, if Microsoft decides to introduce more magic into Excel. It's OK to adapt to a changing world, but you want to have a say in how these changes happen when your core business is concerned."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UPVBV34EL",
        "type": "message",
        "ts": "1596878001.280900",
        "client_msg_id": "bfcb2a13-7892-42be-a325-eb1cf8330863",
        "text": "Based on my 2019 book, Packt has come up with a new version with some additional topics (and a new co-author).\n\nCheck it out. It's a massive tome now with 550+ pages full of Python tricks to do data wrangling.\n\n<https:\/\/www.packtpub.com\/data\/the-data-wrangling-workshop-second-edition>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "259a1e56ad2e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-28\/811814014976_259a1e56ad2e11fe3d56_72.jpg",
            "first_name": "",
            "real_name": "Shubhadeep Roychowdhury",
            "display_name": "Shubhadeep Roychowdhury",
            "team": "T5TCAFTA9",
            "name": "shubhadeeproychowdhur",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "The Data Wrangling Workshop - Second Edition",
                "title_link": "https:\/\/www.packtpub.com\/data\/the-data-wrangling-workshop-second-edition",
                "text": "A beginner’s guide to simplifying Extract, Transform, Load (ETL) processes with the help of hands-on tips, tricks, and best practices, in a fun and interactive way",
                "fallback": "The Data Wrangling Workshop - Second Edition",
                "thumb_url": "https:\/\/www.packtpub.com\/media\/catalog\/product\/cache\/5d165500a520a389deb95b325792ea25\/9\/7\/9781839215001-original_101.jpeg",
                "from_url": "https:\/\/www.packtpub.com\/data\/the-data-wrangling-workshop-second-edition",
                "thumb_width": 265,
                "thumb_height": 265,
                "service_icon": "https:\/\/www.packtpub.com\/media\/favicon\/stores\/1\/favicon.ico",
                "service_name": "packtpub.com",
                "id": 1,
                "original_url": "https:\/\/www.packtpub.com\/data\/the-data-wrangling-workshop-second-edition"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JwVaV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Based on my 2019 book, Packt has come up with a new version with some additional topics (and a new co-author).\n\nCheck it out. It's a massive tome now with 550+ pages full of Python tricks to do data wrangling.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.packtpub.com\/data\/the-data-wrangling-workshop-second-edition"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "In _Le Ton Beau de Marot_ there's this section about the revelatory nature of errors which I found fascinating. Apparently somebody accidentally said \"Rosa only date shranks\", instead of \"Rosa only dated shrinks\". That is, they applied to \"make_past_tense()\" function to \"shrink\" instead of \"date\"!\n\nHofstadter mentions he has collected thousands of examples of errors like these (it's not clear if the \"filing cabinet\" he talks about is metaphorical or not).\n\nI think it might also be useful to collect programming errors in a similar way (maybe put on the wiki eventually). Patterns might start to emerge that are instructive to how people think about coding. These errors are quite precious because they become very rare once you have become fluent in the status quo.\n\nMost programming errors are of the type \"failed to understand the full consequences of my code\" or \"failed to consider all possible inputs\". These are the types of errors that pros make. I am more interested in the type of errors that beginners make, that might reveal friction between how they might naturally express themselves or understand, and how they are forced to by the language.",
        "files": [
            {
                "id": "F0197E3E1K2",
                "mode": "tombstone"
            },
            {
                "id": "F0197E3ESEL",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "foj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In "
                            },
                            {
                                "type": "text",
                                "text": "Le Ton Beau de Marot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " there's this section about the revelatory nature of errors which I found fascinating. Apparently somebody accidentally said \"Rosa only date shranks\", instead of \"Rosa only dated shrinks\". That is, they applied to \"make_past_tense()\" function to \"shrink\" instead of \"date\"!\n\nHofstadter mentions he has collected thousands of examples of errors like these (it's not clear if the \"filing cabinet\" he talks about is metaphorical or not).\n\nI think it might also be useful to collect programming errors in a similar way (maybe put on the wiki eventually). Patterns might start to emerge that are instructive to how people think about coding. These errors are quite precious because they become very rare once you have become fluent in the status quo.\n\nMost programming errors are of the type \"failed to understand the full consequences of my code\" or \"failed to consider all possible inputs\". These are the types of errors that pros make. I am more interested in the type of errors that beginners make, that might reveal friction between how they might naturally express themselves or understand, and how they are forced to by the language."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1596891216.288000",
        "thread_ts": "1596891216.288000",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1596900608.307200",
        "reply_users": [
            "UDQBTJ211",
            "UKP3B2J5D",
            "U0123H7JRDM",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UDQBTJ211",
                "ts": "1596891347.290700"
            },
            {
                "user": "UKP3B2J5D",
                "ts": "1596891497.294700"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1596891709.294900"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1596892828.299000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1596896943.300500"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1596898086.301000"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1596900608.307200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UCUSW7WVD"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1596891347.290700",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1596893047.000000"
        },
        "client_msg_id": "6bf2ccb6-6d62-43d3-9ba1-c3f2f9853026",
        "text": "I have two examples from when I was learning to code. I learned to code in a language called DarkBASIC that is a BASIC for making games.\n\nI began by editing the examples that come with it. One of these is a 3D character that can be moved around with the arrow keys.\n\nThe code used two helper functions which are specifically for a character walking on the x\/z plane, rotating around the y-axis. The functions were NEWXVALUE() and NEWZVALUE() and were used like this;\n\n```X# = NEWXVALUE(X#, A#, 1.5)\n```\nWhich is equivalent to `X# = X# + cos(A#) * 1.5`\n\n\nI wanted to expand the example to include a second character controller by WASD. To do this I copypasted all the code, then went through and edited it.\n\nThe second character I made to have the variables XX# and ZZ#. I could get it set up ok, because I understood the initialization lines like\n\n```X# = 100\nZ# = 100\n```\nI changed these to\n\n```XX# = -100\nZZ# = -100\n```\nBut when I came to edit `X# = NEWXVALUE(X#, A#, 1.5)`, I chaged it to `XX# = NEW*XX*VALUE(XX#, AA#, 1.5)`.\n\nThat is, I had confused the 'X' inside the function name \"NEWXVALUE\" as equivalent to the 'X' in the variable name X#.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jf5C3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have two examples from when I was learning to code. I learned to code in a language called DarkBASIC that is a BASIC for making games.\n\nI began by editing the examples that come with it. One of these is a 3D character that can be moved around with the arrow keys.\n\nThe code used two helper functions which are specifically for a character walking on the x\/z plane, rotating around the y-axis. The functions were NEWXVALUE() and NEWZVALUE() and were used like this;\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "X# = NEWXVALUE(X#, A#, 1.5)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich is equivalent to "
                            },
                            {
                                "type": "text",
                                "text": "X# = X# + cos(A#) * 1.5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n\nI wanted to expand the example to include a second character controller by WASD. To do this I copypasted all the code, then went through and edited it.\n\nThe second character I made to have the variables XX# and ZZ#. I could get it set up ok, because I understood the initialization lines like\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "X# = 100\nZ# = 100\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI changed these to\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "XX# = -100\nZZ# = -100\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut when I came to edit "
                            },
                            {
                                "type": "text",
                                "text": "X# = NEWXVALUE(X#, A#, 1.5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I chaged it to "
                            },
                            {
                                "type": "text",
                                "text": "XX# = NEW",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "XX",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "VALUE(XX#, AA#, 1.5)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThat is, I had confused the 'X' inside the function name \"NEWXVALUE\" as equivalent to the 'X' in the variable name X#."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKP3B2J5D",
        "type": "message",
        "ts": "1596891497.294700",
        "client_msg_id": "089007EE-FA6D-443B-AC9C-88162DA6A161",
        "text": "You will love some of the talks at the #PLHCISwimmer summer school. I will link once they put it up on YouTube. \nIn particular Bjorn Hartman’s talk. \nHe talks about how they scale tutoring and guidance. For example, say there is a grading system so you have a large number of student that submit code that should pass certain test cases and then they keep track of similar submissions and what transformations made them pass the tests and then use that to provide hints to people that are still stuck. There is a lot more but it’s basically how do you provide useful hints that will result in correct code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4980e1f3e51a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-03\/1220847671058_4980e1f3e51a273b630a_72.png",
            "first_name": "Ope",
            "real_name": "Ope",
            "display_name": "opeispo",
            "team": "T5TCAFTA9",
            "name": "ogunks900",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You will love some of the talks at the #PLHCISwimmer summer school. I will link once they put it up on YouTube. \nIn particular Bjorn Hartman’s talk. \n"
                            },
                            {
                                "type": "text",
                                "text": "He talks about how they scale tutoring and guidance. For example, say there is a grading system so you have a large number of student that submit code that should pass certain test cases and then they keep track of similar submissions and what transformations made them pass the tests and then use that to provide hints to people that are still stuck. There is a lot more but it’s basically how do you provide useful hints that will result in correct code"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "beers",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1596891709.294900",
        "client_msg_id": "69cec73c-fd2e-43e7-9ca2-ef2dd9d46131",
        "text": "The second example is that I didn't understand why a 2D nested for-loop had the closing tags 'backwards'.\n\ne.g instead of;\n```FOR X# in 1 TO 10\nFOR Y# in 1 TO 10\n\n(do some stuff)\n\nNEXT Y#\nNEXT X#```\nI was writing;\n```FOR X# in 1 TO 10\nFOR Y# in 1 TO 10\n\n(do some stuff)\n\nNEXT X#  &lt;---\nNEXT Y#```\nwhich seemed much more natural to me. I just learnt to reverse them as a silly quirk of the language, it was only much later I realised that \"there's no such thing as a 2d loop\", and the inner loop \"doesn't know\" it's inside another loop.\n\nSuch an error is impossible in Python or C, due to the syntax, but I wonder if the same underlying misunderstanding is there, or whether the syntax helps learners realise straight away my revelation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y4sL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The second example is that I didn't understand why a 2D nested for-loop had the closing tags 'backwards'.\n\ne.g instead of;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FOR X# in 1 TO 10\nFOR Y# in 1 TO 10\n\n(do some stuff)\n\nNEXT Y#\nNEXT X#"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI was writing;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FOR X# in 1 TO 10\nFOR Y# in 1 TO 10\n\n(do some stuff)\n\nNEXT X#  <---\nNEXT Y#"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "which seemed much more natural to me. I just learnt to reverse them as a silly quirk of the language, it was only much later I realised that \"there's no such thing as a 2d loop\", and the inner loop \"doesn't know\" it's inside another loop.\n\nSuch an error is impossible in Python or C, due to the syntax, but I wonder if the same underlying misunderstanding is there, or whether the syntax helps learners realise straight away my revelation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1596892828.299000",
        "client_msg_id": "0F0DEAD5-B297-4DF7-98E2-97305C8B8242",
        "text": "I could probably fill a book (or more) with programming errors like these, made by myself:blush:. Training an AI with this knowledge and assisting you while coding.. that would be awesome and FoC I think:sunglasses:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "umdN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I could probably fill a book (or more) with programming errors like these, made by myself"
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            },
                            {
                                "type": "text",
                                "text": ". Training an AI with this knowledge and assisting you while coding.. that would be awesome and FoC I think"
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses",
                                "unicode": "1f60e"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJFN50C00",
        "type": "message",
        "ts": "1596893010.299500",
        "client_msg_id": "2D0C2517-9737-4A80-8CB2-122330A6F7C0",
        "text": ":bulb: <https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/|https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e35958b94f07",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-06\/616300651267_e35958b94f07da17cf17_72.png",
            "first_name": "Andreas",
            "real_name": "Andreas S.",
            "display_name": "curious_reader",
            "team": "T5TCAFTA9",
            "name": "andreas.scheinert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596893010.299500",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1596907250.307700",
        "reply_users": [
            "UNBPP291C"
        ],
        "replies": [
            {
                "user": "UNBPP291C",
                "ts": "1596907250.307700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Mondo 2000",
                "title": "The Psychedelic Inspiration For Hypercard - Mondo 2000",
                "title_link": "https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/",
                "text": "by Bill Atkinson, as told to Leo Laporte In 1985 I swallowed a tiny fleck of gelatin containing a medium dose of LSD, and I spent most of the night sitting on a concrete park bench outside my home in Los Gatos, California.   I gazed up at a hundred billion galaxies each with a […]",
                "fallback": "Mondo 2000: The Psychedelic Inspiration For Hypercard - Mondo 2000",
                "image_url": "https:\/\/www.mondo2000.com\/wp-content\/uploads\/2018\/06\/images-1.jpeg",
                "ts": 1529293994,
                "from_url": "https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/",
                "image_width": 447,
                "image_height": 250,
                "image_bytes": 21627,
                "id": 1,
                "original_url": "https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eJ2Go",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "bulb",
                                "unicode": "1f4a1"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/",
                                "text": "https:\/\/www.mondo2000.com\/2018\/06\/18\/the-inspiration-for-hypercard\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1596896409.299900",
        "client_msg_id": "5a40744e-9b66-4f2c-800b-e7ac6b37693d",
        "text": "&gt; I'm curious to hear if anyone disagrees that we'll always have trade-offs, there's no getting away from them.\n&gt; \nWe will always have tradeoffs but the winners and losers are not always the same person. I might be in a situation where \"nicer implementation properties\" genuinely don't benefit me. \n\nFor example, I am basically insulated from the difficulties Intel engineers have in understanding their chip designs. If they have to take on enormous extra complexity to give me a minor performance improvement, then from the perspective of God it probably isn't worth it, but from the perspective of me, it is, because the cost in this trade to me is smaller than even a small benefit. In this sense a faster chip is always better, there's no tradeoff.\n\nIn nand2tetris, the language you design, Jack, requires each line to either start with `set` or `do`. So instead of saying `obj.func()` you have to say `do obj.func()`, instead of `a = 123` you say `set a = 123`. The design tradeoff they made here is to make the implementation of the parser\/compiler easier at the expense of an annoyance when using the language. In the context of the nand2tetris course this makes sense because the user of the language and the implementer of the compiler are both you, but if Jack was a real language this would be absurd.\n\nFinally, just because there will always be tradeoffs doesn't mean there aren't sometimes outright improvements. Leibniz's calculus notation is strictly better than Newton's, IMO.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596777634.240000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fuj",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious to hear if anyone disagrees that we'll always have trade-offs, there's no getting away from them.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWe will always have tradeoffs but the winners and losers are not always the same person. I might be in a situation where \"nicer implementation properties\" genuinely don't benefit me. \n\nFor example, I am basically insulated from the difficulties Intel engineers have in understanding their chip designs. If they have to take on enormous extra complexity to give me a minor performance improvement, then from the perspective of God it probably isn't worth it, but from the perspective of me, it is, because the cost in this trade to me is smaller than even a small benefit. In this sense a faster chip is always better, there's no tradeoff.\n\nIn nand2tetris, the language you design, Jack, requires each line to either start with "
                            },
                            {
                                "type": "text",
                                "text": "set",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So instead of saying "
                            },
                            {
                                "type": "text",
                                "text": "obj.func()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you have to say "
                            },
                            {
                                "type": "text",
                                "text": "do obj.func()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", instead of "
                            },
                            {
                                "type": "text",
                                "text": "a = 123",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you say "
                            },
                            {
                                "type": "text",
                                "text": "set a = 123",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The design tradeoff they made here is to make the implementation of the parser\/compiler easier at the expense of an annoyance when using the language. In the context of the nand2tetris course this makes sense because the user of the language and the implementer of the compiler are both you, but if Jack was a real language this would be absurd.\n\nFinally, just because there will always be tradeoffs doesn't mean there aren't sometimes outright improvements. Leibniz's calculus notation is strictly better than Newton's, IMO."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1596896943.300500",
        "client_msg_id": "057c722f-3bff-4eed-baba-38f60acef5ad",
        "text": "<@U0123H7JRDM> do so before you forget them!\n\nI encountered a fascinating one yesterday. A coworker tried to define a class method in Python with both `self` and `cls` args.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SiG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": " do so before you forget them!\n\nI encountered a fascinating one yesterday. A coworker tried to define a class method in Python with both "
                            },
                            {
                                "type": "text",
                                "text": "self",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "cls",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " args."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1596897809.300800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1596942369.000000"
        },
        "client_msg_id": "fa0772e2-0d94-42fe-80a4-a80fc29a41ad",
        "text": "For sure, the distinction between society at large and individual circumstances is important. I used the word 'tithing' above. Who should do the hard thing? She who can.\n\nThere are many examples of strictly better things. To restate my question: does anyone expect a domain to ever decompose into a lattice of strictly better solutions?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596777634.240000",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M+s8G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For sure, the distinction between society at large and individual circumstances is important. I used the word 'tithing' above. Who should do the hard thing? She who can.\n\nThere are many examples of strictly better things. To restate my question: does anyone expect a domain to ever decompose into a lattice of strictly better solutions?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1596898086.301000",
        "client_msg_id": "affc7606-9790-4c54-8098-719aea7213b4",
        "text": "Python has quite a few around the boundary of what is convention and what is \"really\" part of the language. The use of _ is understood as just a character like any other that is *by convention* used to signify a \"private\" method or function, but in fact this naming affects the behaviour of `import *` which seemed like a real break of \"the rules\" to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C\/l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python has quite a few around the boundary of what is convention and what is \"really\" part of the language. The use of _ is understood as just a character like any other that is "
                            },
                            {
                                "type": "text",
                                "text": "by convention ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "used to signify a \"private\" method or function, but in fact this naming affects the behaviour of "
                            },
                            {
                                "type": "text",
                                "text": "import * ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "which seemed like a real break of \"the rules\" to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1596900608.307200",
        "client_msg_id": "9B740AB3-A844-4D15-AFD5-5A5AFB480010",
        "text": "<@UCUSW7WVD> maybe I will start doing that, registering the error and its correction in a format that in the near future hopefully can be used to train an AI. Are there already projects doing this (using an AI to give suggestions to coding errors) ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596891216.288000",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/8v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " maybe I will start doing that, registering the error and its correction in a format that in the near future hopefully can be used to train an AI. Are there already projects doing this (using an AI to give suggestions to coding errors) ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1596907250.307700",
        "client_msg_id": "f04c9d25-5bf5-4596-be62-ddf93ccef1a6",
        "text": "Love this story!\n\nI’ve never had those kind of “revelations” on LSD about technology, but I’ve never “thought” about technology much on it, it hits me more in a spiritual\/astral tripping way. Writing code with it is either a super-flow state or ADD-ish chaos, where I write out a bunch of dirty concepts all over the place to lay out the idea.\n\nBut I’ve had similiar inspirations and breakthroughs on MDMA, which one might say is a “LSD for babies” in the way that it also boosts serotonin and processing bandwith of your brain. I find it isn’t as much as a “I know something I didn’t before” but more like seeing your mind compress the large network of complicated, related things into a simpler framework. Like when you build a ton of code and then just refactor it all into a smaller method. Quite interesting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596893010.299500",
        "parent_user_id": "UJFN50C00",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h27",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Love this story!\n\nI’ve never had those kind of “revelations” on LSD about technology, but I’ve never “thought” about technology much on it, it hits me more in a spiritual\/astral tripping way. Writing code with it is either a super-flow state or ADD-ish chaos, where I write out a bunch of dirty concepts all over the place to lay out the idea.\n\nBut I’ve had similiar inspirations and breakthroughs on MDMA, which one might say is a “LSD for babies” in the way that it also boosts serotonin and processing bandwith of your brain. I find it isn’t as much as a “I know something I didn’t before” but more like seeing your mind compress the large network of complicated, related things into a simpler framework. Like when you build a ton of code and then just refactor it all into a smaller method. Quite interesting."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1596907467.307900",
        "client_msg_id": "0cb4287a-42f9-4d68-b5c1-56b4871e1a52",
        "text": "<@UDQBTJ211> great example with plumbing and chvrches, didn’t know that about them!\n\nI feel it’s like an 80\/20 rule - this type of parsing satisfies 80% of the people so they made it default - I feel like when pasting\/importing, there should be a intermediate mapping\/what is this data step. I don’t like it when tools assume without confirming - always confirm before assuming. Like autocomplete doesn’t immediately fill your code out but requires you to press tab. It might be annoying if you do it constantly, but a “remember for this sheet” checkbox would solve that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596782620.248700",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VBIp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " great example with plumbing and chvrches, didn’t know that about them!\n\nI feel it’s like an 80\/20 rule - this type of parsing satisfies 80% of the people so they made it default - I feel like when pasting\/importing, there should be a intermediate mapping\/what is this data step. I don’t like it when tools assume without confirming - always confirm before assuming. Like autocomplete doesn’t immediately fill your code out but requires you to press tab. It might be annoying if you do it constantly, but a “remember for this sheet” checkbox would solve that."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1596907862.313700",
        "edited": {
            "user": "UNBPP291C",
            "ts": "1596907895.000000"
        },
        "client_msg_id": "4431f2f2-54c6-4f95-8125-6269af9800cf",
        "text": "Got a question that’s been bugging me.\n\nLet’s say you create a new framework\/language and accompanying tooling that saves time and money for dozens of developers all over the world.\nHow do you balance openness and monetisation?\nDo you open source the framework\/language but charge for the tools?\nDo you keep it closed source?\nDo you do self-hosted\/SaaS and community\/enterprise split like Gitlab for example?\nIf you open it, how do you earn money to let you work on it full-time? If it isn’t hugely popular immediately, you will have a hard time balancing earning money to live and working on it.\nBut if it’s closed, adoption will probably be low so customers\/developers will be wary to use it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596907862.313700",
        "reply_count": 10,
        "reply_users_count": 3,
        "latest_reply": "1597144946.395500",
        "reply_users": [
            "U0123H7JRDM",
            "UN9SCH5RD",
            "UML4ZEKDK"
        ],
        "replies": [
            {
                "user": "U0123H7JRDM",
                "ts": "1596909124.324900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1596963836.327400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1596963962.327600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1596964005.327800"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1596964300.328000"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1596964358.328400"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1596966203.339100"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1597055806.351400"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1597056983.351600"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1597144946.395500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ypJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Got a question that’s been bugging me.\n\nLet’s say you create a new framework\/language and accompanying tooling that saves time and money for dozens of developers all over the world.\nHow do you balance openness and monetisation?\nDo you open source the framework\/language but charge for the tools?\nDo you keep it closed source?\nDo you do self-hosted\/SaaS and community\/enterprise split like Gitlab for example?\nIf you open it, how do you earn money to let you work on it full-time? If it isn’t hugely popular immediately, you will have a hard time balancing earning money to live and working on it.\nBut if it’s closed, adoption will probably be low so customers\/developers will be wary to use it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "mag",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1596909124.324900",
        "client_msg_id": "6748D3A4-6BC1-41D5-9AC7-2C7E119D65AD",
        "text": "These are questions I have myself as well. In my situation I currently get a subsidy for my project which comes in the form of \"discount on taxes\" which helps me to be able to spend more time on it but not full-time. In the (near) future I hope to find a customer who wants to use part of my project in such a way that I earn money by implementing there project with the help of my product. In this case you will need to make good agreements on which parts of the code are yours and can be reused\/shared and which part of the code is theirs and will not be shared . But I am not sure this approach will work. A bigger problem for me is finding the right market focus, I can multiple ways. So I probably need to get that sorted out first",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596907862.313700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n=I0h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are questions I have myself as well. In my situation I currently get a subsidy for my project which comes in the form of \"discount on taxes\" which helps me to be able to spend more time on it but not full-time. In the (near) future I hope to find a customer who wants to use part of my project in such a way that I earn money by implementing there project with the help of my product. In this case you will need to make good agreements on which parts of the code are yours and can be reused\/shared and which part of the code is theirs and will not be shared . But I am not sure this approach will work. A bigger problem for me is finding the right market focus, I can multiple ways. So I probably need to get that sorted out first"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1596955957.326100",
        "text": "concur with <@U013ZLJARC7> <@UAVCC2X70> comments",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596399249.077700",
        "parent_user_id": "U01003H81UM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8v6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "concur with "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " comments"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1596956072.326300",
        "text": "for posterity\/others, my overall take away after a week of implementing them and various other lang controls is\n1st class delimited continuations are extremely powerful but are a pandora's box (~= a functional goto). Even though other things I mentioned are weaker forms of them (e.g. transducers), you do want the weaker forms as it scopes what someone can do",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596399249.077700",
        "parent_user_id": "U01003H81UM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBvf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for posterity\/others, my overall take away after a week of implementing them and various other lang controls is\n1st class delimited continuations are extremely powerful but are a pandora's box (~= a functional goto). Even though other things I mentioned are weaker forms of them (e.g. transducers), you do want the weaker forms as it scopes what someone can do"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1596956187.326500",
        "text": "imho, algebraic effects are the best form of them that are usable but even there, I think they need more scoping restrictions, especially in non-functionally pure languages",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596399249.077700",
        "parent_user_id": "U01003H81UM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DWPee",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "imho, algebraic effects are the best form of them that are usable but even there, I think they need more scoping restrictions, especially in non-functionally pure languages"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1596956266.326700",
        "text": "(e.g. <https:\/\/cs.uwaterloo.ca\/~yizhou\/papers\/abseff-popl2019.pdf>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596399249.077700",
        "parent_user_id": "U01003H81UM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EdN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(e.g. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cs.uwaterloo.ca\/~yizhou\/papers\/abseff-popl2019.pdf"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]