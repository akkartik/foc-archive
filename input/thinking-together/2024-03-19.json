[
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710834246.901459",
        "client_msg_id": "35bcfa7a-018b-4c2d-8601-5a3d6022ab71",
        "text": "<@US370TRJA> You make an interesting point about having an automatic default but letting the author override it for selected code. This is an idea I have already largely rejected. I don't trust myself to manually format my own code. I have way too much cognitive bias for that, so my formatting choices tell only how I was feeling the day the code was formatted, and what code I was reading earlier that day.\n\nThis problem occurs to me with argument lists of function definitions in Rust. Traditionally, argument lists are formatted horizontally, but sometimes they get long, or one argument may have a long name or long type, and then I format them vertically. Then I go edit another function which doesn't have a long argument list, and I format that vertically too, because of the <https:\/\/en.wikipedia.org\/wiki\/Halo_effect|halo effect>. Rust has a tool called _rustfmt_ that does exactly this middleground, automatic formatting with manual overriding in places, and I've not found it helpful.\n\nManual formatting also assumes that everyone views the code the same way as the person who formatted it. That's why we have silly commandments that the tab size must be set to a certain number of columns, or a page must be viewed in IE 5.5 with a screen resolution of 1024×768 pixels, or perhaps worst of all, assuming that everyone will view the code with a monospace font. (I don't, and even the <https:\/\/www.youtube.com\/watch?v=uknEhXyZgsg|Smalltalk browser from the 1970s> didn't.)\n\nThanks for the book recommendations! I will need to take more time to look at them. I love a good book about typography.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=uknEhXyZgsg",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/uknEhXyZgsg\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/uknEhXyZgsg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Alto System Project: Dan Ingalls demonstrates Smalltalk\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=uknEhXyZgsg",
                "fallback": "YouTube Video: Alto System Project: Dan Ingalls demonstrates Smalltalk",
                "title": "Alto System Project: Dan Ingalls demonstrates Smalltalk",
                "title_link": "https:\/\/www.youtube.com\/watch?v=uknEhXyZgsg",
                "author_name": "Computer History Museum",
                "author_link": "https:\/\/www.youtube.com\/@ComputerHistory",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WVk\/D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "US370TRJA"
                            },
                            {
                                "type": "text",
                                "text": " You make an interesting point about having an automatic default but letting the author override it for selected code. This is an idea I have already largely rejected. I don't trust myself to manually format my own code. I have way too much cognitive bias for that, so my formatting choices tell only how I was feeling the day the code was formatted, and what code I was reading earlier that day.\n\nThis problem occurs to me with argument lists of function definitions in Rust. Traditionally, argument lists are formatted horizontally, but sometimes they get long, or one argument may have a long name or long type, and then I format them vertically. Then I go edit another function which doesn't have a long argument list, and I format that vertically too, because of the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Halo_effect",
                                "text": "halo effect"
                            },
                            {
                                "type": "text",
                                "text": ". Rust has a tool called "
                            },
                            {
                                "type": "text",
                                "text": "rustfmt",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that does exactly this middleground, automatic formatting with manual overriding in places, and I've not found it helpful.\n\nManual formatting also assumes that everyone views the code the same way as the person who formatted it. That's why we have silly commandments that the tab size must be set to a certain number of columns, or a page must be viewed in IE 5.5 with a screen resolution of 1024×768 pixels, or perhaps worst of all, assuming that everyone will view the code with a monospace font. (I don't, and even the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=uknEhXyZgsg",
                                "text": "Smalltalk browser from the 1970s"
                            },
                            {
                                "type": "text",
                                "text": " didn't.)\n\nThanks for the book recommendations! I will need to take more time to look at them. I love a good book about typography."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "US370TRJA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710885147.978319",
        "edited": {
            "user": "U06M6J30PE3",
            "ts": "1710885736.000000"
        },
        "client_msg_id": "a118f617-5de0-4789-b62a-946fc5ff5611",
        "text": "Prettier (JS formatter) has a link to a paper on this. They do a kind of recursive line breaking <https:\/\/archive.jlongster.com\/A-Prettier-Formatter|https:\/\/archive.jlongster.com\/A-Prettier-Formatter>\n\n<https:\/\/www.google.com\/url?sa=t&source=web&rct=j&opi=89978449&url=https:\/\/homepages.inf.ed.ac.uk\/wadler\/papers\/prettier\/prettier.pdf&ved=2ahUKEwi4tPDzqYGFAxXqOEQIHXhtCxMQFnoECBYQAQ&usg=AOvVaw3vySA2A21-D_yQk1Dqqx-O|https:\/\/www.google.com\/url?sa=t&source=web&rct=j&opi=89978449&url=https:\/\/homepages.inf.ed.ac.uk\/wadler\/papers\/prettier\/prettier.pdf&ved=2ahUKEwi4tPDzqYGFAxXqOEQIHXhtCxMQFnoECBYQAQ&usg=AOvVaw3vySA2A21-D_yQk1Dqqx-O>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "attachments": [
            {
                "from_url": "https:\/\/archive.jlongster.com\/A-Prettier-Formatter",
                "service_icon": "https:\/\/archive.jlongster.com\/apple-touch-icon.png?v=9BPpBz2Gvb",
                "id": 1,
                "original_url": "https:\/\/archive.jlongster.com\/A-Prettier-Formatter",
                "fallback": "A Prettier JavaScript Formatter",
                "text": "Today I am announcing prettier, a JavaScript formatter inspired by refmt with advanced support for language features from ES2017, JSX, and Flow.",
                "title": "A Prettier JavaScript Formatter",
                "title_link": "https:\/\/archive.jlongster.com\/A-Prettier-Formatter",
                "service_name": "archive.jlongster.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bM8uR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Prettier (JS formatter) has a link to a paper on this. They do a kind of recursive line breaking "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/archive.jlongster.com\/A-Prettier-Formatter",
                                "text": "https:\/\/archive.jlongster.com\/A-Prettier-Formatter"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.google.com\/url?sa=t&source=web&rct=j&opi=89978449&url=https:\/\/homepages.inf.ed.ac.uk\/wadler\/papers\/prettier\/prettier.pdf&ved=2ahUKEwi4tPDzqYGFAxXqOEQIHXhtCxMQFnoECBYQAQ&usg=AOvVaw3vySA2A21-D_yQk1Dqqx-O",
                                "text": "https:\/\/www.google.com\/url?sa=t&source=web&rct=j&opi=89978449&url=https:\/\/homepages.inf.ed.ac.uk\/wadler\/papers\/prettier\/prettier.pdf&ved=2ahUKEwi4tPDzqYGFAxXqOEQIHXhtCxMQFnoECBYQAQ&usg=AOvVaw3vySA2A21-D_yQk1Dqqx-O"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710885230.443909",
        "client_msg_id": "c6f71bbc-5a97-419c-a09e-587206f2ba6d",
        "text": "You can do neat things like split horizontal layouts into vertical at the root first and the leaves stay horizontal",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/RvUz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can do neat things like split horizontal layouts into vertical at the root first and the leaves stay horizontal"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710885361.135999",
        "client_msg_id": "229baf3f-5f29-4a71-825c-5b4963e4bd8c",
        "text": "I suppose you could write a special editor for doc comments that would spit out markdown or something.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710504901.802799",
        "parent_user_id": "U05EREC3DCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JkBnl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose you could write a special editor for doc comments that would spit out markdown or something."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710886216.362899",
        "client_msg_id": "24a8904f-5760-49ea-afb6-bf9b657032fe",
        "text": "Honestly I think CS academia is a joke. Most research happens inside industry (including the open source world btw) and companies often self publish either code, their own papers, patents, or all three.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709453065.001899",
        "parent_user_id": "U03R0B9U1GD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LI9Q4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly I think CS academia is a joke. Most research happens inside industry (including the open source world btw) and companies often self publish either code, their own papers, patents, or all three."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710886245.232819",
        "client_msg_id": "f998478b-6f73-4123-b4d6-22909490da08",
        "text": "Certainly that's how it is in computer graphics.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709453065.001899",
        "parent_user_id": "U03R0B9U1GD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4eGit",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Certainly that's how it is in computer graphics."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UML4ZEKDK",
        "type": "message",
        "ts": "1710892905.768799",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1710938087.000000"
        },
        "client_msg_id": "ADE8CBE3-56CE-4146-A126-4C250185FF58",
        "text": "No idea about graphics personally. For CS generally, I’d there say there’s patches of good work on both sides (industry and academia), and also lots of boring stuff on both sides too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "edc1c9acb12d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-05-22\/5286358617767_edc1c9acb12dfa7d1a20_72.jpg",
            "first_name": "J.",
            "real_name": "J. Ryan Stinnett",
            "display_name": "J. Ryan Stinnett",
            "team": "T5TCAFTA9",
            "name": "jryans",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709453065.001899",
        "parent_user_id": "U03R0B9U1GD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1n+qJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No idea about graphics personally. For CS generally, I’d there say there’s patches of good work on both sides (industry and academia), and also lots of boring stuff on both sides too."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC",
                    "UCS1K3QTH"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710893185.944049",
        "client_msg_id": "f2762fab-5517-488f-9664-14a33e45c496",
        "text": "I guess location matters too; I do see a lot of good papers out of Glasgow for some reason.  But CS academia inside the US seems to have pretty much died.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709453065.001899",
        "parent_user_id": "U03R0B9U1GD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tvt4t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess location matters too; I do see a lot of good papers out of Glasgow for some reason.  But CS academia inside the US seems to have pretty much died."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "<@U06M6J30PE3> The paper assumes that more horizontal is always better, which is what I was questioning. It crams as much as it can into one line, ignoring readability, then breaks when necessary, and then adds more bits and pieces from the parent level horizontally if possible.\n\nHere's an example I made where I depart from traditional plain text code and format a list as a table with a balance of horizontal and vertical spread.",
        "files": [
            {
                "id": "F06R25CUQD6",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U04SAJZ155H",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8ROC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U06M6J30PE3"
                            },
                            {
                                "type": "text",
                                "text": " The paper assumes that more horizontal is always better, which is what I was questioning. It crams as much as it can into one line, ignoring readability, then breaks when necessary, and then adds more bits and pieces from the parent level horizontally if possible.\n\nHere's an example I made where I depart from traditional plain text code and format a list as a table with a balance of horizontal and vertical spread."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1710905357.768639",
        "client_msg_id": "368b850d-0f2c-465e-b899-19b066cfd33e",
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H"
    },
    {
        "text": "Here's an example of an object literal with vertical and horizontal spacing:",
        "files": [
            {
                "id": "F06R26F6HLG",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U06M6J30PE3",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hWJZ6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's an example of an object literal with vertical and horizontal spacing:"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1710906225.925409",
        "client_msg_id": "cb3bc3cf-4e01-4dc5-aa0c-18fc6de45c22",
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H"
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710906331.746489",
        "client_msg_id": "7fac6ab9-88dd-4ff6-80d4-04114cde12b3",
        "text": "Btw, the underlying system (at least as implemented in Prettier) is flexible enough to achieve basically whatever balance of horizontal and vertical you want, the core insight is just that breaking recursively at a structural level can produce more readable formatting.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E9uOL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Btw, the underlying system (at least as implemented in Prettier) is flexible enough to achieve basically whatever balance of horizontal and vertical you want, the core insight is just that breaking recursively at a structural level can produce more readable formatting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710906640.374599",
        "client_msg_id": "bd732728-26b9-43a5-9f84-b2a1d4a076b9",
        "text": "If you want to go beyond plain text editors, you could try converting code to\/from a HTML representation (or LaTex if such a thing as a real-time renderer for LaTex exists).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mmeNx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want to go beyond plain text editors, you could try converting code to\/from a HTML representation (or LaTex if such a thing as a real-time renderer for LaTex exists)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710906657.992789",
        "client_msg_id": "b1bb8b84-234e-46e3-8957-6de9c628043c",
        "text": "<@U06M6J30PE3> I suppose Prettier has some extended variant of the method from the paper. That example of an object literal is interesting. It's the kind of example I was thinking of when asking the question. In ordinary plain text code, I would avoid that, as I don't like the runs of space characters, but in a non-plain text layout I can do such things with advantage.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55gOk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U06M6J30PE3"
                            },
                            {
                                "type": "text",
                                "text": " I suppose Prettier has some extended variant of the method from the paper. That example of an object literal is interesting. It's the kind of example I was thinking of when asking the question. In ordinary plain text code, I would avoid that, as I don't like the runs of space characters, but in a non-plain text layout I can do such things with advantage."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710906703.997519",
        "client_msg_id": "62aa2eb4-3e2e-4c58-9073-03e228fb4ecb",
        "text": "I actually forked Prettier and added support for aligning columns that way; Prettier by itself doesn't insert quite so much whitespace (I find it easier to read).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hhdhR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I actually forked Prettier and added support for aligning columns that way; Prettier by itself doesn't insert quite so much whitespace (I find it easier to read)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710907013.485389",
        "client_msg_id": "34f2a797-1e4e-488f-ab95-c4165074861d",
        "text": "<@U06M6J30PE3> There's Typst, which is like Tex but almost real-time. My primary output is a native app where I render directly to a region of pixels, so I have a lot of freedom. Secondarily, I also want HTML output, because I want it to be easy to share code with people who don't have the native app. The example I posted is HTML, where the big parentheses are a creative use of CSS.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQv\/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U06M6J30PE3"
                            },
                            {
                                "type": "text",
                                "text": " There's Typst, which is like Tex but almost real-time. My primary output is a native app where I render directly to a region of pixels, so I have a lot of freedom. Secondarily, I also want HTML output, because I want it to be easy to share code with people who don't have the native app. The example I posted is HTML, where the big parentheses are a creative use of CSS."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06M6J30PE3",
        "type": "message",
        "ts": "1710907201.613609",
        "client_msg_id": "7a600eb2-09ce-487f-bebb-16462bc85465",
        "text": "You can get pretty far with the DOM editable document command api, though it's an enormous pain.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gacbd57e11a3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/acbd57e11a3096341812aef991cd5cfa.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Joe",
            "real_name": "Joe Eagar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joeedh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "okoYS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can get pretty far with the DOM editable document command api, though it's an enormous pain."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1710907367.897759",
        "client_msg_id": "2b18396e-615b-4e0e-b68e-10f69f7c8212",
        "text": "I'll keep the HTML read-only and have the native app for editing, or let people use an ordinary plain text editor if they don't have the app. I've done editable DOM many times enough before to know that it's a never-ending pain. Editable DOM apps are always buggy, and it's never going to be fixed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710792969.247549",
        "parent_user_id": "U04SAJZ155H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wmqeU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll keep the HTML read-only and have the native app for editing, or let people use an ordinary plain text editor if they don't have the app. I've done editable DOM many times enough before to know that it's a never-ending pain. Editable DOM apps are always buggy, and it's never going to be fixed."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]