[
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1597159796.470500",
        "client_msg_id": "8c37bdd2-b540-4121-a830-2c4a9ba184df",
        "text": "*The open application: making websites user-editable with no special effort.* This is a feasibility prototype built for Svelte. The core of it is quite simple. At build time, it transforms component definitions to fetch their dependent components from a dependency store rather than importing them from the filesystem. Component source files are emitted as part of the build, and the Svelte compiler is added to the page. Now you can pull up the source of any component, make changes, and rebuild it from within the browser.\n\nThis week, I'm working on building experimental development tooling from within this architecture, so hopefully I'll be able to share more interesting functionality by the weekend.\n\n<https:\/\/youtu.be\/P-ZHjVa2OYk>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597159796.470500",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1597237306.477300",
        "reply_users": [
            "U018LAH5QCT",
            "UJ6LDMMN0"
        ],
        "replies": [
            {
                "user": "U018LAH5QCT",
                "ts": "1597160466.472800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1597164526.474400"
            },
            {
                "user": "U018LAH5QCT",
                "ts": "1597167242.474800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1597214568.476700"
            },
            {
                "user": "U018LAH5QCT",
                "ts": "1597237306.477300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Svelte Open Application: Feasibility Prototype",
                "title_link": "https:\/\/youtu.be\/P-ZHjVa2OYk",
                "author_name": "Cameron King",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCBQ6SLArBnRUWRQR080NOqA",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/P-ZHjVa2OYk\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Svelte Open Application: Feasibility Prototype",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/P-ZHjVa2OYk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/P-ZHjVa2OYk",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/P-ZHjVa2OYk"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ahZu2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The open application: making websites user-editable with no special effort. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "This is a feasibility prototype built for Svelte. The core of it is quite simple. At build time, it transforms component definitions to fetch their dependent components from a dependency store rather than importing them from the filesystem. Component source files are emitted as part of the build, and the Svelte compiler is added to the page. Now you can pull up the source of any component, make changes, and rebuild it from within the browser.\n\nThis week, I'm working on building experimental development tooling from within this architecture, so hopefully I'll be able to share more interesting functionality by the weekend.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/P-ZHjVa2OYk"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0",
                    "UCUSW7WVD",
                    "U018FMXF76F",
                    "UEQG5HC1W"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1597160173.472500",
        "client_msg_id": "a1eefb64-4b1d-4cf7-962b-84b55b30ef8e",
        "text": "In terms of experimental development tooling, I put out a VSCode extension a little while ago that focuses on mapping conceptual interactions with Vuejs + TailwindCSS into a few semantic keystrokes through AST manipulation. I don't have a video, but the README has a few GIFs showing it in action. The CSS interaction cycle seems to me to be somewhat novel, though underdeveloped.\n<https:\/\/github.com\/cameronrking\/olympus>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1597340383.479800",
        "reply_users": [
            "UJ6LDMMN0",
            "U018LAH5QCT",
            "UPMFG2571"
        ],
        "replies": [
            {
                "user": "UJ6LDMMN0",
                "ts": "1597162602.473100"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1597162944.473300"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1597163296.473800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1597163466.474000"
            },
            {
                "user": "U018LAH5QCT",
                "ts": "1597166274.474600"
            },
            {
                "user": "UPMFG2571",
                "ts": "1597309910.479300"
            },
            {
                "user": "U018LAH5QCT",
                "ts": "1597322574.479600"
            },
            {
                "user": "UPMFG2571",
                "ts": "1597340383.479800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "CameronRKing\/olympus",
                "title_link": "https:\/\/github.com\/cameronrking\/olympus",
                "text": "Prototype VSCode extension for rapid Vue\/Tailwind interaction. - CameronRKing\/olympus",
                "fallback": "GitHub: CameronRKing\/olympus",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/12804458?s=400&v=4",
                "from_url": "https:\/\/github.com\/cameronrking\/olympus",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/cameronrking\/olympus"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CpCs4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In terms of experimental development tooling, I put out a VSCode extension a little while ago that focuses on mapping conceptual interactions with Vuejs + TailwindCSS into a few semantic keystrokes through AST manipulation. I don't have a video, but the README has a few GIFs showing it in action. The CSS interaction cycle seems to me to be somewhat novel, though underdeveloped.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cameronrking\/olympus"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0",
                    "UNCP67JSK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1597160466.472800",
        "client_msg_id": "02079cb5-eb64-460e-a4fd-62052478d488",
        "text": "Source code for the plugins is here:\n<https:\/\/github.com\/cameronrking\/rollup-plugin-svelte-component-ioc> transforms the source, converting imports to dependency store injections\n<https:\/\/github.com\/cameronrking\/rollup-plugin-layout-intercept> replaces the application root with a toggleable Golden Layout container (not a huge fan, but it was the easiest to prototype with)\n<https:\/\/github.com\/cameronrking\/rollup-plugin-ioc-editing-tools> is where I'm developing the application tooling",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597159796.470500",
        "parent_user_id": "U018LAH5QCT",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "CameronRKing\/rollup-plugin-svelte-component-ioc",
                "title_link": "https:\/\/github.com\/cameronrking\/rollup-plugin-svelte-component-ioc",
                "text": "Replaces direct references to svelte components with dynamic references fetched from a dependency store. - CameronRKing\/rollup-plugin-svelte-component-ioc",
                "fallback": "GitHub: CameronRKing\/rollup-plugin-svelte-component-ioc",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/12804458?s=400&v=4",
                "from_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-svelte-component-ioc",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-svelte-component-ioc"
            },
            {
                "service_name": "GitHub",
                "title": "CameronRKing\/rollup-plugin-layout-intercept",
                "title_link": "https:\/\/github.com\/cameronrking\/rollup-plugin-layout-intercept",
                "text": "Replaces the App.svelte import in main.js with a Golden Layout wrapper component. - CameronRKing\/rollup-plugin-layout-intercept",
                "fallback": "GitHub: CameronRKing\/rollup-plugin-layout-intercept",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/12804458?s=400&v=4",
                "from_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-layout-intercept",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 2,
                "original_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-layout-intercept"
            },
            {
                "service_name": "GitHub",
                "title": "CameronRKing\/rollup-plugin-ioc-editing-tools",
                "title_link": "https:\/\/github.com\/cameronrking\/rollup-plugin-ioc-editing-tools",
                "text": "Adds some simple editing components for use with rollup-plugin-svelte-component-ioc and rollup-plugin-layout-intercept. - CameronRKing\/rollup-plugin-ioc-editing-tools",
                "fallback": "GitHub: CameronRKing\/rollup-plugin-ioc-editing-tools",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/12804458?s=400&v=4",
                "from_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-ioc-editing-tools",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 3,
                "original_url": "https:\/\/github.com\/cameronrking\/rollup-plugin-ioc-editing-tools"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7M=w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Source code for the plugins is here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cameronrking\/rollup-plugin-svelte-component-ioc"
                            },
                            {
                                "type": "text",
                                "text": " transforms the source, converting imports to dependency store injections\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cameronrking\/rollup-plugin-layout-intercept"
                            },
                            {
                                "type": "text",
                                "text": " replaces the application root with a toggleable Golden Layout container (not a huge fan, but it was the easiest to prototype with)\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cameronrking\/rollup-plugin-ioc-editing-tools"
                            },
                            {
                                "type": "text",
                                "text": " is where I'm developing the application tooling"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597162602.473100",
        "client_msg_id": "eca50ffd-24d0-4f8c-bb8d-7c5107ff14d1",
        "text": "I have just tried it, and I like it! I like the \"vim\" like way of executing the command: Alt-o to launch the extension, then 'a' to add, then 'p' for props, then the prop name, and voilà you have un new prop at the right place even if you are far away this place. Combined with the autodiscovery, I find that all this gives a good developer experience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bAL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have just tried it, and I like it! I like the \"vim\" like way of executing the command: Alt-o to launch the extension, then 'a' to add, then 'p' for props, then the prop name, and voilà you have un new prop at the right place even if you are far away this place. Combined with the autodiscovery, I find that all this gives a good developer experience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597162944.473300",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1597162995.000000"
        },
        "client_msg_id": "253e57da-8b8e-49ec-82a1-adc472e86492",
        "text": "For the Tailwind part, I find that there is no real plus compared to the existing Tailwind CSS that can already help you finding the right class name with auto complete. I guess for this it is a matter of preference as the experience is slightly different:\n• well chosen char sequences for you with autodiscovery\n• start typing, auto-completion is showing, select with up\/down for Tailwing extension.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ly=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the Tailwind part, I find that there is no real plus compared to the existing Tailwind CSS that can already help you finding the right class name with auto complete. I guess for this it is a matter of preference as the experience is slightly different:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "well chosen char sequences for you with autodiscovery"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "start typing, auto-completion is showing, select with up\/down for Tailwing extension."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597163296.473800",
        "client_msg_id": "0d04d96b-8cbc-43e2-9188-3a646259522a",
        "text": "I know you won't maintain this extension, but I wanted to let you know that it seems that the extension works well only for 4 spaces tab stops. I use 2 spaces tab stops and after an insertion (say a new props) it uses 4 spaces for the insert and in some other places.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m4Sg0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know you won't maintain this extension, but I wanted to let you know that it seems that the extension works well only for 4 spaces tab stops. I use 2 spaces tab stops and after an insertion (say a new props) it uses 4 spaces for the insert and in some other places."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597163466.474000",
        "client_msg_id": "33663781-de8d-40ca-a527-7128f19a0495",
        "text": "And a remark, this extension is very useful to add data, computed, watchers, etc. with the traditional way of coding this in Vue. But with the new Vue Composition API, maybe it will be more complicated for this extension to add\/modify stuff (which can be anywhere in the setup function as JavaScript code) ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p+Sa1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And a remark, this extension is very useful to add data, computed, watchers, etc. with the traditional way of coding this in Vue. But with the new Vue Composition API, maybe it will be more complicated for this extension to add\/modify stuff (which can be anywhere in the setup function as JavaScript code) ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597164526.474400",
        "client_msg_id": "b0c319e9-6053-4d9c-b801-6caa05c8173e",
        "text": "Looks great too!\n\nMore than a year ago, I have try something like that, but with Vue.js and using the hot reload stuff but to compile in the browser the modifications. I haven't work again on this, but I thought to reuse it somehow. And even wonder if Svelte would also be a good fit for this kind of scenario. You have just answered that! :smile:\n\nI don't really know Svelte (never code) but I really like the concept, and I have to try it. Even if for now I guess I will stick to Vue.js for most of my work.\n\nAnyway, keep going, I am very impatient to see the next iteration!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597159796.470500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=PIDg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks great too!\n\nMore than a year ago, I have try something like that, but with Vue.js and using the hot reload stuff but to compile in the browser the modifications. I haven't work again on this, but I thought to reuse it somehow. And even wonder if Svelte would also be a good fit for this kind of scenario. You have just answered that! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don't really know Svelte (never code) but I really like the concept, and I have to try it. Even if for now I guess I will stick to Vue.js for most of my work.\n\nAnyway, keep going, I am very impatient to see the next iteration!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1597166274.474600",
        "client_msg_id": "17b3b8bf-0119-468d-8cd0-805c808f6ce1",
        "text": "1. Yes, that vim-like feel is what I was going for.\n2. I agree, I think the discovery portion of the CSS isn't much of a change. What really stands out to me, though, is the elimination of the reload and the family navigation mechanic. What I was striving for as I built it was being able to press a single key to iterate through my options without any feedback delay and without having to manually copy changes from the browser back to the source. The shortcut mechanism was intended more for experienced developers who know what they want and want to reduce the number of keystrokes required to say it.\n3. Yes, the 4-space formatting is intentional. Since it's a prototype, I hard-coded my formatting preferences rather than making them modifiable. But in my defense, it wouldn't be an issue if the AST were a first-class member of the development process. Ideally, I should be able to hand the AST directly to an independent formatter. As it stands, it was easier to rely on the existing integration of formatters\/linters into the workflow than to try to integrate those tools directly into the extension or expose the recast printing options. The HTML printer also does some weird stuff with multiple attributes if you haven't noticed that yet.\n4. The composition API would make life more interesting, but it's intended for more challenging use cases. I haven't had to design anything quite that complicated, so I have no mental models for the process. I wouldn't know what tooling to build, but I suspect it would be closer to a projectional editor than this \"smart snippets\" thing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597160173.472500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ax4a9",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Yes, that vim-like feel is what I was going for."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I agree, I think the discovery portion of the CSS isn't much of a change. What really stands out to me, though, is the elimination of the reload and the family navigation mechanic. What I was striving for as I built it was being able to press a single key to iterate through my options without any feedback delay and without having to manually copy changes from the browser back to the source. The shortcut mechanism was intended more for experienced developers who know what they want and want to reduce the number of keystrokes required to say it."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Yes, the 4-space formatting is intentional. Since it's a prototype, I hard-coded my formatting preferences rather than making them modifiable. But in my defense, it wouldn't be an issue if the AST were a first-class member of the development process. Ideally, I should be able to hand the AST directly to an independent formatter. As it stands, it was easier to rely on the existing integration of formatters\/linters into the workflow than to try to integrate those tools directly into the extension or expose the recast printing options. The HTML printer also does some weird stuff with multiple attributes if you haven't noticed that yet."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The composition API would make life more interesting, but it's intended for more challenging use cases. I haven't had to design anything quite that complicated, so I have no mental models for the process. I wouldn't know what tooling to build, but I suspect it would be closer to a projectional editor than this \"smart snippets\" thing."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U018LAH5QCT",
        "type": "message",
        "ts": "1597167242.474800",
        "client_msg_id": "d6c44027-d1ed-4352-bcd9-73c9de3fe1f7",
        "text": "My first experiments (about 18 months ago) were done with Vue and webpack hot reloading, but before long I ran into weird app blink issues. I'd make a change to one file, and an unexpectedly large portion of the screen would refresh, throwing out state that shouldn't have been thrown out. Plus, hot-reloading relies on architecture outside the browser. This prototype pushes the build and update cycle into the browser as plain JS, so it can be deployed as a static site.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1c4fd3826773",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-08-10\/1292503386626_1c4fd3826773eabcf3a8_72.png",
            "first_name": "",
            "real_name": "Cameron King",
            "display_name": "Cameron King",
            "team": "T5TCAFTA9",
            "name": "cameronking42",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597159796.470500",
        "parent_user_id": "U018LAH5QCT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QBAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first experiments (about 18 months ago) were done with Vue and webpack hot reloading, but before long I ran into weird app blink issues. I'd make a change to one file, and an unexpectedly large portion of the screen would refresh, throwing out state that shouldn't have been thrown out. Plus, hot-reloading relies on architecture outside the browser. This prototype pushes the build and update cycle into the browser as plain JS, so it can be deployed as a static site."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1597214131.476500",
        "client_msg_id": "FECB0956-14A8-4BB2-8CD7-03A24E55A791",
        "text": "not sure if intentional but I get an auth error with the OP YouTube link - was the video taken down?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1596545313.448700",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S6R99",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "not sure if intentional but I get an auth error with the OP YouTube link - was the video taken down?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U014WA16VNJ",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1597214568.476700",
        "client_msg_id": "85b2eeca-a961-4277-ae92-22de4a28a071",
        "text": "Well, I mean, I used the hot reload feature only in the browser. I.e. the client side part of it. When user makes a modification in an editor hosted in the browser, it fires recompilation\/rerender if the Vue template is modified without touching the data, and reload the full component if data is modified. Here is my very light proof of concept: <https:\/\/stackblitz.com\/edit\/vue-hot-reload-test-2>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597159796.470500",
        "parent_user_id": "U018LAH5QCT",
        "attachments": [
            {
                "title": "vue-hot-reload-test-2 - StackBlitz",
                "title_link": "https:\/\/stackblitz.com\/edit\/vue-hot-reload-test-2",
                "text": "Test hot reload of Vue js components. Episode 2.",
                "fallback": "vue-hot-reload-test-2 - StackBlitz",
                "image_url": "https:\/\/c.staticblitz.com\/assets\/icon-03bbb9acbba813917725387f46e5df03a95d232be240e910ce5f946a973b3f86.png",
                "from_url": "https:\/\/stackblitz.com\/edit\/vue-hot-reload-test-2",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 5725,
                "service_icon": "https:\/\/c.staticblitz.com\/assets\/icon-03bbb9acbba813917725387f46e5df03a95d232be240e910ce5f946a973b3f86.png",
                "service_name": "stackblitz.com",
                "id": 1,
                "original_url": "https:\/\/stackblitz.com\/edit\/vue-hot-reload-test-2"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "anY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I mean, I used the hot reload feature only in the browser. I.e. the client side part of it. When user makes a modification in an editor hosted in the browser, it fires recompilation\/rerender if the Vue template is modified without touching the data, and reload the full component if data is modified. Here is my very light proof of concept: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackblitz.com\/edit\/vue-hot-reload-test-2"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]