[
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1550480711.020000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1550482802.000000"
        },
        "client_msg_id": "e873cb58-a35e-44ca-a733-bf9fb6f8c9b6",
        "text": "<@UE1JQM9HQ> - I agree that true modularity is not at odds with coherent systems (although too much of it can be -- I forget who says it, but \"code should be as simple as possible, but no simpler\").\n\nSo, granted, the real problem there was actually a lack of critical thinking &amp; proper analysis (e.g. asking the right questions).\n\nBut it does seem that many people don't understand the difference (hence the quotes), and my experience has caused me to see excessive focus on \"modularity\" as a red flag \/ as something commonly (mis)used as a \"silver bullet\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ko+D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " - I agree that true modularity is not at odds with coherent systems (although too much of it can be -- I forget who says it, but \"code should be as simple as possible, but no simpler\").\n\nSo, granted, the real problem there was actually a lack of critical thinking & proper analysis (e.g. asking the right questions).\n\nBut it does seem that many people don't understand the difference (hence the quotes), and my experience has caused me to see excessive focus on \"modularity\" as a red flag \/ as something commonly (mis)used as a \"silver bullet\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1550487572.022000",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1550487713.000000"
        },
        "client_msg_id": "338dd134-0fa0-4deb-b881-0a49b286a0da",
        "text": "<@UAVCC2X70> Super interesting, thanks!\nThere is something very relaxing about reading about _other_ dev's terrible experiences :stuck_out_tongue:\n\nWith increasing age I think I am a bit of a simplicity pessimist because there is a similar story to be told about most types of approach. We often feel like there is some type of inner simplicity waiting to get out that we are missing but real work so often turns out to be a messy impendance filled PITA. I fear that when we do get a simple elegant implementation, it's actually luck that the problem allowed it and didn't throw up assumption-breakers rather than virtues of our approach. Try a successful approach on a different problem and it can spin out of control.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mUDCJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Super interesting, thanks!\nThere is something very relaxing about reading about "
                            },
                            {
                                "type": "text",
                                "text": "other",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " dev's terrible experiences "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue",
                                "unicode": "1f61b"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWith increasing age I think I am a bit of a simplicity pessimist because there is a similar story to be told about most types of approach. We often feel like there is some type of inner simplicity waiting to get out that we are missing but real work so often turns out to be a messy impendance filled PITA. I fear that when we do get a simple elegant implementation, it's actually luck that the problem allowed it and didn't throw up assumption-breakers rather than virtues of our approach. Try a successful approach on a different problem and it can spin out of control."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1550496138.022800",
        "client_msg_id": "361a941c-6297-4b70-8f44-ef40e20b1554",
        "text": "Well said <@UFD2JRE58>.  Perhaps accidental complexity abounds in software projects because an abundance of the desired behavior is in fact accidental.  Brings to mind a recent project where one tiny corner of a country required an exceptional case that touched every part of the system.  Some 50 if-statements later we had it in hand.  No idea how I could have handled that particular cross-cutting concern better.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T6EJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well said "
                            },
                            {
                                "type": "user",
                                "user_id": "UFD2JRE58"
                            },
                            {
                                "type": "text",
                                "text": ".  Perhaps accidental complexity abounds in software projects because an abundance of the desired behavior is in fact accidental.  Brings to mind a recent project where one tiny corner of a country required an exceptional case that touched every part of the system.  Some 50 if-statements later we had it in hand.  No idea how I could have handled that particular cross-cutting concern better."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1550510474.023000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1550592187.000000"
        },
        "client_msg_id": "80cfd8e7-6f5b-40ed-b1e5-eb4f14afa07f",
        "text": "I strongly disagree with the view that software is just inescapably messy and unfixable. Most accidental complexity is an *objective* matter that can be dealt with through basic composition &amp; decomposition -- skills that any professional software developer should have, and which are foundational to coherent code design. This goes hand-in-hand with understanding &amp; designing software (first and foremost) in terms of the *human* model (i.e. the terms that matter).\n\nIf these things are lacking to begin with, then adding more technology &amp; frameworks &amp; patterns (etc.) is not going to change that -- in fact it will often make this problem even worse!\n\nSadly, *most* software is much more complex than it needs to be, largely due to the wide-spread lack \/ misunderstanding of these *foundational* things. That is the status quo of professional software, which is just dismal.\n\nIt's a real shame because it's not hard -- any competent developer can grasp these things. But because of that gap, we (as an industry) chase or own tails and hop from fad to fad, and eventually \"accept\" that it's hopeless (\"it never works out\") and attribute simplicity to luck. \n\n...\n\nPerhaps the bigger problem, then, is what to do about this culture \/ gap? If one cannot get the team on board or to stop barking up the wrong tree (or if we cannot change the industry at large), then we are stuck with having to deal with these problems regardless.\n\nFor example, it seems impossible to challenge the view that the software industry knows what's best, so if you do what everyone else is doing (e.g. use the latest greatest frameworks and follow the standards), then you're doing it \"right\". When in reality, the industry is a pop culture based on fads and popularity. One is professional because they do all the things that other professional software vendors do. But others are professional because they do too.\n\nJim Coplien describes the level of professionalism \/ maturity of the industry in the following, and my experience has matched his description:\n <https:\/\/www.infoq.com\/interviews\/coplien-dci-architecture>\n(You can listen to it, or read the transcript)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V1U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I strongly disagree with the view that software is just inescapably messy and unfixable. Most accidental complexity is an "
                            },
                            {
                                "type": "text",
                                "text": "objective",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " matter that can be dealt with through basic composition & decomposition -- skills that any professional software developer should have, and which are foundational to coherent code design. This goes hand-in-hand with understanding & designing software (first and foremost) in terms of the "
                            },
                            {
                                "type": "text",
                                "text": "human",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " model (i.e. the terms that matter).\n\nIf these things are lacking to begin with, then adding more technology & frameworks & patterns (etc.) is not going to change that -- in fact it will often make this problem even worse!\n\nSadly, "
                            },
                            {
                                "type": "text",
                                "text": "most",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " software is much more complex than it needs to be, largely due to the wide-spread lack \/ misunderstanding of these "
                            },
                            {
                                "type": "text",
                                "text": "foundational",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " things. That is the status quo of professional software, which is just dismal.\n\nIt's a real shame because it's not hard -- any competent developer can grasp these things. But because of that gap, we (as an industry) chase or own tails and hop from fad to fad, and eventually \"accept\" that it's hopeless (\"it never works out\") and attribute simplicity to luck. \n\n...\n\nPerhaps the bigger problem, then, is what to do about this culture \/ gap? If one cannot get the team on board or to stop barking up the wrong tree (or if we cannot change the industry at large), then we are stuck with having to deal with these problems regardless.\n\nFor example, it seems impossible to challenge the view that the software industry knows what's best, so if you do what everyone else is doing (e.g. use the latest greatest frameworks and follow the standards), then you're doing it \"right\". When in reality, the industry is a pop culture based on fads and popularity. One is professional because they do all the things that other professional software vendors do. But others are professional because they do too.\n\nJim Coplien describes the level of professionalism \/ maturity of the industry in the following, and my experience has matched his description:\n "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/interviews\/coplien-dci-architecture"
                            },
                            {
                                "type": "text",
                                "text": "\n(You can listen to it, or read the transcript)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1550542174.025100",
        "client_msg_id": "63cc65d6-3e82-43be-b286-5736fbb45c07",
        "text": "<@UAVCC2X70> indeed!  Why are we missing really any objective complexity measure – beyond Lines of Code?  In as much as we optimize what we can measure, why don't we measure this!?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1GfD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " indeed!  Why are we missing really any objective complexity measure – beyond Lines of Code?  In as much as we optimize what we can measure, why don't we measure this!?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1550556353.025800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1550558645.000000"
        },
        "client_msg_id": "1c5abcef-fc63-415a-9d38-d4cde7e195ab",
        "text": "Thanks! The problem statement is at <http:\/\/akkartik.name\/about>. In brief:\n\n• I’m trying to increase the level of review open source software receives from outsider developers who aren’t invested in its history. Doing this will make our world more anti-fragile. But the ways I’ve come up with don’t work on existing software. They require writing software to be more easily reviewable. (And also rewrite-friendly. I think those two goals are deeply isomorphic.)\n\n• I think the way programmers divide up work into (prematurely frozen) interfaces causes all software to tend to bitrot over time, even if the initial design is clean.\n\nThe only plan I’ve been able to come up with to falsify these hypotheses is to create a small clean-room stack without dependencies on existing software, and to hopefully get a small group of people collaborating and sharing code atop it.\n\nThere’s gaps in this explanation. Feel free to ask me more questions after reading the link above.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1544261823.037100",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "De74",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! The problem statement is at "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/about"
                            },
                            {
                                "type": "text",
                                "text": ". In brief:\n\n• I’m trying to increase the level of review open source software receives from outsider developers who aren’t invested in its history. Doing this will make our world more anti-fragile. But the ways I’ve come up with don’t work on existing software. They require writing software to be more easily reviewable. (And also rewrite-friendly. I think those two goals are deeply isomorphic.)\n\n• I think the way programmers divide up work into (prematurely frozen) interfaces causes all software to tend to bitrot over time, even if the initial design is clean.\n\nThe only plan I’ve been able to come up with to falsify these hypotheses is to create a small clean-room stack without dependencies on existing software, and to hopefully get a small group of people collaborating and sharing code atop it.\n\nThere’s gaps in this explanation. Feel free to ask me more questions after reading the link above."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1550560822.026700",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1550561506.000000"
        },
        "client_msg_id": "3ec9e2dc-c1e1-4a45-a50b-c65c52a5a52e",
        "text": "<@UFD2JRE58> - I agree about no one-size-fits-all solutions. Each problem has its own context and it's own space, and needs it's own solution -- heck, even defines its own \"shape\" and therefore its own architecture (C.A.'s \"Notes on the synthesis of form\" is an excellent book on that topic).\n\nThat's also why I think there is a lot of potential in the Glamorous Toolkit that <@UE1JQM9HQ> is working on",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6bpE6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFD2JRE58"
                            },
                            {
                                "type": "text",
                                "text": " - I agree about no one-size-fits-all solutions. Each problem has its own context and it's own space, and needs it's own solution -- heck, even defines its own \"shape\" and therefore its own architecture (C.A.'s \"Notes on the synthesis of form\" is an excellent book on that topic).\n\nThat's also why I think there is a lot of potential in the Glamorous Toolkit that "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " is working on"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1550561251.027000",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1550592370.000000"
        },
        "client_msg_id": "045d59da-db22-4f7f-bbe1-888eca6ecd8e",
        "text": "<@UA14TGLTC> - Maybe, but I don't know how helpful an actual metric would be here.\n\nWhat I'm talking about is usually obvious: either the code speaks for itself, or it doesn't. There are patterns that you can learn to look for, but the effect is essentially that the code either makes sense in human terms &amp; matches the human model(s) (1:1 if possible), or it does not. It's not about statistics, but whether the code is sane to understand and work with.\n\nNow it might sound like I'm taking about two different things: objective simplicity, and matching the human model. But I've discovered that these things coalesce to the same ideal of code.\n\nLet me explain:\n\nWhat would it look like if you could reduce a program (code) down to its simplest form possible? By definition, it would be nothing more or less than the pure semantics -- stated in the most simple &amp; direct way possible -- of what the program is and what it does. And what is that, other than the human model? That is, if you could explain the program to another person, as simply as possible (but with enough detail when detail matters), how concisely can that be explained? ... And if *that* is enough information for someone to go code it up, then that's also the minimum info needed in the program. The code would read just like the human description.\n\nFor example: There is bounded paying area, a ball, and two paddles. The ball moves across the field with a certain velocity. When it hits a wall or a paddle, it changes direction. etc. The ball is of this size and that color, etc. I can picture code that reads like this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zni",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " - Maybe, but I don't know how helpful an actual metric would be here.\n\nWhat I'm talking about is usually obvious: either the code speaks for itself, or it doesn't. There are patterns that you can learn to look for, but the effect is essentially that the code either makes sense in human terms & matches the human model(s) (1:1 if possible), or it does not. It's not about statistics, but whether the code is sane to understand and work with.\n\nNow it might sound like I'm taking about two different things: objective simplicity, and matching the human model. But I've discovered that these things coalesce to the same ideal of code.\n\nLet me explain:\n\nWhat would it look like if you could reduce a program (code) down to its simplest form possible? By definition, it would be nothing more or less than the pure semantics -- stated in the most simple & direct way possible -- of what the program is and what it does. And what is that, other than the human model? That is, if you could explain the program to another person, as simply as possible (but with enough detail when detail matters), how concisely can that be explained? ... And if "
                            },
                            {
                                "type": "text",
                                "text": "that",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is enough information for someone to go code it up, then that's also the minimum info needed in the program. The code would read just like the human description.\n\nFor example: There is bounded paying area, a ball, and two paddles. The ball moves across the field with a certain velocity. When it hits a wall or a paddle, it changes direction. etc. The ball is of this size and that color, etc. I can picture code that reads like this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1550562863.027400",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1550603674.000000"
        },
        "client_msg_id": "d14c16c2-5aa8-4f6d-b548-32c4fa26b860",
        "text": "Agree with <@UAVCC2X70> here about most software being much more complex than it needs to be. I also share the feeling that the problem is in some foundational things. Consider some everyday software development concerns that have nothing to do with the nature of the end user 'human' problem it is trying to solve: impedance mismatch between DBs, programming languages and UI models; managing versions of disparate libraries and dependencies across different source control and build systems; tedium around parsing, serializing, persisting and verifying similar messages all over the place; consistency in the face of concurrency and synchrony (from multi-threading to large distributed processes). Add the constraint that most introspection of the system is via mentally simulating and piecing together scattered low level information gathered via primitive mechanisms (text logs), instead of an ability to ask the system high level questions.\n\n <@UA14TGLTC>’s example about the cross cutting concern is telling. Is it possible to have a decomposition where no cross cutting concern might arise? Perhaps not. When we adopt a single model that decomposition must be along one dimension only. But for any large system we might want multiple simultaneous perspectives - each relevant in a different context.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1550137467.010900",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JaT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " here about most software being much more complex than it needs to be. I also share the feeling that the problem is in some foundational things. Consider some everyday software development concerns that have nothing to do with the nature of the end user 'human' problem it is trying to solve: impedance mismatch between DBs, programming languages and UI models; managing versions of disparate libraries and dependencies across different source control and build systems; tedium around parsing, serializing, persisting and verifying similar messages all over the place; consistency in the face of concurrency and synchrony (from multi-threading to large distributed processes). Add the constraint that most introspection of the system is via mentally simulating and piecing together scattered low level information gathered via primitive mechanisms (text logs), instead of an ability to ask the system high level questions.\n\n "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": "’s example about the cross cutting concern is telling. Is it possible to have a decomposition where no cross cutting concern might arise? Perhaps not. When we adopt a single model that decomposition must be along one dimension only. But for any large system we might want multiple simultaneous perspectives - each relevant in a different context."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]