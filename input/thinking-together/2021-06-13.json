[
    {
        "user": "U01BAS8GU86",
        "type": "message",
        "ts": "1623598980.107400",
        "client_msg_id": "3d3b2501-7c24-430e-923a-58409d00c3f9",
        "text": "Hey all,\nI'm not sure where else to post this. What is the procedure for visiting Dynamicland?\n\nI shot an email to <mailto:hi@dynamicland.org|hi@dynamicland.org>, but I figured someone here may be able to redirect me if there's a better course of action.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "24e71f2ba4a9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-23\/1445768371157_24e71f2ba4a9059b8c54_72.jpg",
            "first_name": "",
            "real_name": "Everett Pompeii",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "epompeii",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623598980.107400",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1623689100.120700",
        "reply_users": [
            "USH01JEDQ",
            "UA14TGLTC",
            "UFB8STN7K"
        ],
        "replies": [
            {
                "user": "USH01JEDQ",
                "ts": "1623605914.113600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1623645272.119700"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1623689100.120700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MjGp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all,\nI'm not sure where else to post this. What is the procedure for visiting Dynamicland?\n\nI shot an email to "
                            },
                            {
                                "type": "link",
                                "url": "mailto:hi@dynamicland.org",
                                "text": "hi@dynamicland.org"
                            },
                            {
                                "type": "text",
                                "text": ", but I figured someone here may be able to redirect me if there's a better course of action."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1623605914.113600",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1623691104.000000"
        },
        "client_msg_id": "0B9E1338-8E95-4943-AB1C-C2E58224688D",
        "text": "Everett, I hate to be the one to do this, but Dynamicland is just the latest iteration of the Englebert Demo – it's a cruel prank, a complete fiction, meant to torment creative types with utopian fancies of impossible human-machine experiences. It is to be visited in your daylight reveries. It will exist in the real world when those city types and them country folks finally make nice.\n\nOr as Trudy Campbell once put it, \"Oh, Peter, don't go to the well—there's no water there.\"\n\nDynamicland is currently closed for \"deep cleaning\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623598980.107400",
        "parent_user_id": "U01BAS8GU86",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UMYKS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Everett, I hate to be the one to do this, but Dynamicland is just the latest iteration of the Englebert Demo – it's a cruel prank, a complete fiction, meant to torment creative types with utopian fancies of impossible human-machine experiences. It is to be visited in your daylight reveries. It will exist in the real world when those city types and them country folks finally make nice.\n\nOr as Trudy Campbell once put it, \"Oh, Peter, don't go to the well—there's no water there.\"\n\nDynamicland is currently closed for \"deep cleaning\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U01JNTE35QS"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1623634589.119200",
        "edited": {
            "user": "U01JNTE35QS",
            "ts": "1623634621.000000"
        },
        "client_msg_id": "463a5248-8b0d-45f4-8be2-f329b36147c1",
        "text": "I was going through Marshall Lochbaum's BQN (<https:\/\/mlochbaum.github.io\/BQN\/>) and was \"gazing into the abyss\" thats the self hosted compiler. At this point it occurred to me that programming languages go through inordinate amounts of syntactic differentiation to distinguish between different tokens in a programming language. This leads to escaping mechanisms within strings, and also notions of operator precedence in the case of APL like languages. Most of this is a result of tools -- early versions of editors were not structural.\n\nHas anyone thought of\/looked at examples of what programming would be like if one added a secondary layer of say range based annotations on top of strings (basically a *rich text* like notation) that would make it much easier to parse\/disambiguate tokens and semantics?  The only thing that springs to mind is Chuch Moore's colorForth.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623634589.119200",
        "reply_count": 14,
        "reply_users_count": 6,
        "latest_reply": "1626441511.241700",
        "reply_users": [
            "UPHDH2F0C",
            "UA14TGLTC",
            "UJBAJNFLK",
            "U01JNTE35QS",
            "UMVFWPZ36",
            "U023V63MF6V"
        ],
        "replies": [
            {
                "user": "UPHDH2F0C",
                "ts": "1623635988.119400"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1623646028.119900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1623662772.120100"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1623686509.120500"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1623719761.121400"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1623719783.121600"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1623719835.121800"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1623719913.122000"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1623720771.122200"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1623720820.122400"
            },
            {
                "user": "U01JNTE35QS",
                "ts": "1623720867.122700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1623734021.123100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1623734145.123400"
            },
            {
                "user": "U023V63MF6V",
                "ts": "1626441511.241700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "48oE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was going through Marshall Lochbaum's BQN ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mlochbaum.github.io\/BQN\/"
                            },
                            {
                                "type": "text",
                                "text": ") and was \"gazing into the abyss\" thats the self hosted compiler. At this point it occurred to me that programming languages go through inordinate amounts of syntactic differentiation to distinguish between different tokens in a programming language. This leads to escaping mechanisms within strings, and also notions of operator precedence in the case of APL like languages. Most of this is a result of tools -- early versions of editors were not structural.\n\nHas anyone thought of\/looked at examples of what programming would be like if one added a secondary layer of say range based annotations on top of strings (basically a "
                            },
                            {
                                "type": "text",
                                "text": "rich text",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like notation) that would make it much easier to parse\/disambiguate tokens and semantics?  The only thing that springs to mind is Chuch Moore's colorForth."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            },
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "I guess tag UI fields are a solution to a similar problem?",
        "files": [
            {
                "id": "F025LM4MA64",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UPHDH2F0C",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=B70",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess tag UI fields are a solution to a similar problem?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1623635988.119400",
        "thread_ts": "1623634589.119200",
        "parent_user_id": "U01JNTE35QS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01JNTE35QS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1623645272.119700",
        "client_msg_id": "f13b9ef5-024e-4922-a363-72489dad0a2d",
        "text": "Maybe someone here knows better, but Dynamicland doesn't seem particularly Covid compatible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623598980.107400",
        "parent_user_id": "U01BAS8GU86",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TxB0E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe someone here knows better, but Dynamicland doesn't seem particularly Covid compatible."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1623646028.119900",
        "client_msg_id": "db47ecb8-9232-4eea-9716-e7470d286d40",
        "text": "The trick with rich text is editor integration.  Got to love levels of escaping!  I swear I once had the string `\"\\\\\\\\\\\\\"`.  On the balance the best solution is to have different kinds of escapes for the same sort of thing so as to avoid interference.  You don't need to be Perl\/Ruby crazy about it either.  Lua's long string syntax is great `[[No problem with \"quotes\" here.]]` because `[[because [[this]] kind nests without trouble]]` and in case of real nonsense you can use extra special equal sign brackets: `[===[With some opens ([[) some closes (]]) and whatever else ]==] except the following does end it: ]===]`.  Use as many equal signs as makes you comfortable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1623634589.119200",
        "parent_user_id": "U01JNTE35QS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vFMxC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The trick with rich text is editor integration.  Got to love levels of escaping!  I swear I once had the string "
                            },
                            {
                                "type": "text",
                                "text": "\"\\\\\\\\\\\\\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  On the balance the best solution is to have different kinds of escapes for the same sort of thing so as to avoid interference.  You don't need to be Perl\/Ruby crazy about it either.  Lua's long string syntax is great "
                            },
                            {
                                "type": "text",
                                "text": "[[No problem with \"quotes\" here.]]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " because "
                            },
                            {
                                "type": "text",
                                "text": "[[because [[this]] kind nests without trouble]]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and in case of real nonsense you can use extra special equal sign brackets: "
                            },
                            {
                                "type": "text",
                                "text": "[===[With some opens ([[) some closes (]]) and whatever else ]==] except the following does end it: ]===]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Use as many equal signs as makes you comfortable."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]