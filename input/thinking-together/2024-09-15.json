[
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1726408913.644119",
        "client_msg_id": "9c50724e-92a4-4ab7-8a81-e080d5c82361",
        "text": "Are there languages that emphasize the single-datum &lt;=&gt; collection-of-data duality?  E.g. making loop-with-`if` &lt;=&gt; `filter`-on-the-whole look very similar?\n\nBut that's just a programming curiousity; I'm more interested if there are any mind bicycles that help one think about local vs. global rules?\nPhysics is rich with examples where seeing both perspectives is insightful:\n• local _F = ma_ &lt;=&gt; conservation of _potential energy_ independent of specific path (for certain forces)\n• Gauss's laws relating single-point \"differential\" &lt;=&gt; volume\/surface \"integral\" <https:\/\/en.wikipedia.org\/wiki\/Maxwell%27s_equations#Formulation_with_Gaussian_quantities|formulations of Maxwell equations>\n• <https:\/\/en.wikipedia.org\/wiki\/Noether%27s_theorem|Noether's theorem> is certainly up there, relating shapes of laws with conserved stuff, but I'll admit over my head...\nExample task: For a while now I've dreamed of making a model of weather that's simple enough for paper+pen+tokens, or generally something \"board game-ish\".  Lies-to-children are fine, but would like it to demonstrate at least basic mechanics: (A) wind caused by hotter air rising and leaving a vacuum; (B) evaporation over sea =&gt; rain over land (C) \"<https:\/\/en.wikipedia.org\/wiki\/Rain_shadow|rain shadow>\" beyond a mountain (my country has this).\nIt's not easy to discretize continuous-quantity equations into something like a cellular automaton...  I'm leaning towards representing conserved quantities like water with tokens you can move, rather than per-cell state.\nAnd I don't want some huge \"simulation\"—I'd love to find rules that can demonstrate these processes in few enough steps to follow by hand.\nHmm say I have air that wants to go up + right, and it holds just 1 water token—which way do I move it?  Well I suppose I want a bit larger numbers so quantization won't matter that much...  And I probably want alternating horizontal vs. vertical game phases (also dealing with 1D slice at a time can reduce previous-vs-next-state confusions).\nAny advice for tools to help think about rules\/mechanics and what can emerge from them, _beyond_ \"try and see what what happens\"?\n(But I guess I really should play with large \"sand\" style models, then try to scale down! try-and-see _is_ more powerful than merely keeping in my head.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726408913.644119",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1726536516.567049",
        "reply_users": [
            "UJBAJNFLK",
            "U05UK5T7LPP"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1726469382.559819"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1726469783.319739"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1726470100.821249"
            },
            {
                "user": "U05UK5T7LPP",
                "ts": "1726536330.819629"
            },
            {
                "user": "U05UK5T7LPP",
                "ts": "1726536516.567049"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQ0eX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there languages that emphasize the single-datum <=> collection-of-data duality?  E.g. making loop-with-"
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " <=> "
                            },
                            {
                                "type": "text",
                                "text": "filter",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "-on-the-whole look very similar?\n\nBut that's just a programming curiousity; I'm more interested if there are any mind bicycles that help one think about local vs. global rules?\nPhysics is rich with examples where seeing both perspectives is insightful:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "local "
                                    },
                                    {
                                        "type": "text",
                                        "text": "F = ma",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " <=> conservation of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "potential energy",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " independent of specific path (for certain forces)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Gauss's laws relating single-point \"differential\" <=> volume\/surface \"integral\" "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikipedia.org\/wiki\/Maxwell%27s_equations#Formulation_with_Gaussian_quantities",
                                        "text": "formulations of Maxwell equations"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikipedia.org\/wiki\/Noether%27s_theorem",
                                        "text": "Noether's theorem"
                                    },
                                    {
                                        "type": "text",
                                        "text": " is certainly up there, relating shapes of laws with conserved stuff, but I'll admit over my head..."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nExample task: For a while now I've dreamed of making a model of weather that's simple enough for paper+pen+tokens, or generally something \"board game-ish\".  Lies-to-children are fine, but would like it to demonstrate at least basic mechanics: (A) wind caused by hotter air rising and leaving a vacuum; (B) evaporation over sea => rain over land (C) \""
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Rain_shadow",
                                "text": "rain shadow"
                            },
                            {
                                "type": "text",
                                "text": "\" beyond a mountain (my country has this).\nIt's not easy to discretize continuous-quantity equations into something like a cellular automaton...  I'm leaning towards representing conserved quantities like water with tokens you can move, rather than per-cell state.\nAnd I don't want some huge \"simulation\"—I'd love to find rules that can demonstrate these processes in few enough steps to follow by hand.\nHmm say I have air that wants to go up + right, and it holds just 1 water token—which way do I move it?  Well I suppose I want a bit larger numbers so quantization won't matter that much...  And I probably want alternating horizontal vs. vertical game phases (also dealing with 1D slice at a time can reduce previous-vs-next-state confusions).\nAny advice for tools to help think about rules\/mechanics and what can emerge from them, "
                            },
                            {
                                "type": "text",
                                "text": "beyond",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"try and see what what happens\"?\n(But I guess I really should play with large \"sand\" style models, then try to scale down! try-and-see "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more powerful than merely keeping in my head.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1726413496.164179",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1726425221.000000"
        },
        "client_msg_id": "e8e77eda-5fc4-43aa-b552-d1e5af19ca84",
        "text": "FWIW: I think that there are at least 2 interaction models: (1) end-user (non-programmer), and, (2) developer. When I write code, I use emacs, because I can do just about everything with 10 fingers and without lifting my hand off of the keyboard to fiddle with the mouse or Apple pencil. Mousing and swiping and speaking are operations that are too large-grained for me when I'm \"in the zone\" writing code. I used to play piano and observe that a QWERTY keyboard is more efficient than a piano keyboard (less arm motion involved). I used to play guitar, but, wonder if the Chapman Stick is a better way to cause audible vibrations (<https:\/\/www.youtube.com\/watch?v=78hlYpydv5g>). The Yamaha WX7 Wind Controller used 8 fingers and the mouth and lungs. Artists want nuance. Software developers are like code artists, I guess. At one time, we explored building a diagram editor that was like emacs - mostly keyboard, mouse optional.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726130128.675989",
        "parent_user_id": "U018S42NMMM",
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=78hlYpydv5g",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/78hlYpydv5g\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/78hlYpydv5g?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Tony Levin on The Chapman Stick | Reverb Interview\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=78hlYpydv5g",
                "fallback": "YouTube Video: Tony Levin on The Chapman Stick | Reverb Interview",
                "title": "Tony Levin on The Chapman Stick | Reverb Interview",
                "title_link": "https:\/\/www.youtube.com\/watch?v=78hlYpydv5g",
                "author_name": "Reverb",
                "author_link": "https:\/\/www.youtube.com\/@Reverb",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qbnMZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW: I think that there are at least 2 interaction models: (1) end-user (non-programmer), and, (2) developer. When I write code, I use emacs, because I can do just about everything with 10 fingers and without lifting my hand off of the keyboard to fiddle with the mouse or Apple pencil. Mousing and swiping and speaking are operations that are too large-grained for me when I'm \"in the zone\" writing code. I used to play piano and observe that a QWERTY keyboard is more efficient than a piano keyboard (less arm motion involved). I used to play guitar, but, wonder if the Chapman Stick is a better way to cause audible vibrations ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=78hlYpydv5g"
                            },
                            {
                                "type": "text",
                                "text": "). The Yamaha WX7 Wind Controller used 8 fingers and the mouth and lungs. Artists want nuance. Software developers are like code artists, I guess. At one time, we explored building a diagram editor that was like emacs - mostly keyboard, mouse optional."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1726447897.253929",
        "client_msg_id": "F3C5CFEC-7C27-4B9B-AAB4-DA1D5446C128",
        "text": "Have you thought about how proximity as meaningful computation comes into play here?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726374402.150029",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GJ3E+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you thought about how proximity as meaningful computation comes into play here?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1726456674.912749",
        "client_msg_id": "b23cfad7-f735-4f70-9cc7-6b3891db4ef8",
        "text": "Yep.\n\nOne of my favourite references for proximity is the <https:\/\/www.youtube.com\/watch?v=T0fLZ8XceLo|Zells> project by <@UA8HY8R7B>, which visualized message broadcasts as these rings that expand outward from an object. Receivers that are near the source will receive the message first. Also, there's eToys (IIRC… or maybe it was Morphic?) where you'd compose two graphical objects by sticking one onto the other — that's a more binary interpretation of \"proximity\", in that things that touch are composed, things that don't touch aren't. There are also some grid-based systems where cells can only talk to their neighbours.\n\nOne approach I've tried in Hest visualizes functions as nodes, function composition as wires connecting the nodes, and function application as little points of data travelling along the wires. The speed that data travels is constant, so execution order depends on things like the lengths of wires between nodes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726374402.150029",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O8sMx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep.\n\nOne of my favourite references for proximity is the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=T0fLZ8XceLo",
                                "text": "Zells"
                            },
                            {
                                "type": "text",
                                "text": " project by "
                            },
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            },
                            {
                                "type": "text",
                                "text": ", which visualized message broadcasts as these rings that expand outward from an object. Receivers that are near the source will receive the message first. Also, there's eToys (IIRC… or maybe it was Morphic?) where you'd compose two graphical objects by sticking one onto the other — that's a more binary interpretation of \"proximity\", in that things that touch are composed, things that don't touch aren't. There are also some grid-based systems where cells can only talk to their neighbours.\n\nOne approach I've tried in Hest visualizes functions as nodes, function composition as wires connecting the nodes, and function application as little points of data travelling along the wires. The speed that data travels is constant, so execution order depends on things like the lengths of wires between nodes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1726469382.559819",
        "client_msg_id": "5c660e92-2a03-47b5-ab6d-67bfc8aa32e5",
        "text": "Technicalities first:\n• <https:\/\/maude.cs.illinois.edu\/w\/index.php\/The_Maude_System|Maude> comes to mind as a language in which items are treated as equivalent to a list of one item. Howver, this happens by convention rather than as a language features. Lists are not built-in constructs. Still worth a look for examples of how this equivalence plays out in practice.\n• The integral version of _F = m a_ is <https:\/\/en.wikipedia.org\/wiki\/Lagrangian_mechanics|Lagrangian mechanics>, which roughly says \"a mechanical system follows the path that minimizes the action integral\". The equivalence with Newton's version is very much in the spirit of Gauss' laws.\n• Noether's theorem is one level of abstraction above, it's about relations between invariants.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726408913.644119",
        "parent_user_id": "U02QC0PPER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ve1G3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Technicalities first:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/maude.cs.illinois.edu\/w\/index.php\/The_Maude_System",
                                        "text": "Maude"
                                    },
                                    {
                                        "type": "text",
                                        "text": " comes to mind as a language in which items are treated as equivalent to a list of one item. Howver, this happens by convention rather than as a language features. Lists are not built-in constructs. Still worth a look for examples of how this equivalence plays out in practice."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The integral version of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "F = m a",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/en.wikipedia.org\/wiki\/Lagrangian_mechanics",
                                        "text": "Lagrangian mechanics"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", which roughly says \"a mechanical system follows the path that minimizes the action integral\". The equivalence with Newton's version is very much in the spirit of Gauss' laws."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Noether's theorem is one level of abstraction above, it's about relations between invariants."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1726469783.319739",
        "client_msg_id": "e6d660af-f7e3-4dfb-a30b-90c441a58489",
        "text": "<@U02QC0PPER3> The closest I know to your weather game is <https:\/\/en.wikipedia.org\/wiki\/Lattice_gas_automaton|Lattice gas automata> and the <https:\/\/en.wikipedia.org\/wiki\/Lattice_Boltzmann_methods|Lattice-Boltzmann methods> building on them. They are similar to cellular automata, but have rules derived from mechanics and thermodyanmics. I am pretty sure that they could be used for making toy models for the weather. Their main weakness is related to Noether's theorem: they have too many symmetries and thus too many conserved quantities. That's mostly an issue for simple systems. Make the geometry complex enough, as in weather, and those problems shouldn't matter any more (because your geometry removes all the symmetries).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1726408913.644119",
        "parent_user_id": "U02QC0PPER3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "51Mp4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02QC0PPER3"
                            },
                            {
                                "type": "text",
                                "text": " The closest I know to your weather game is "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Lattice_gas_automaton",
                                "text": "Lattice gas automata"
                            },
                            {
                                "type": "text",
                                "text": " and the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Lattice_Boltzmann_methods",
                                "text": "Lattice-Boltzmann methods"
                            },
                            {
                                "type": "text",
                                "text": " building on them. They are similar to cellular automata, but have rules derived from mechanics and thermodyanmics. I am pretty sure that they could be used for making toy models for the weather. Their main weakness is related to Noether's theorem: they have too many symmetries and thus too many conserved quantities. That's mostly an issue for simple systems. Make the geometry complex enough, as in weather, and those problems shouldn't matter any more (because your geometry removes all the symmetries)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U02QC0PPER3",
                    "U05UK5T7LPP"
                ],
                "count": 2
            },
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]