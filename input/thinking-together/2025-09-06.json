[
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1757156851.606799",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1757240015.000000"
        },
        "client_msg_id": "8def9f84-c479-4b3b-b08f-284dd6bea5a3",
        "text": "Syntax is \"rules\". I argue that your \"humane\" samples have way more syntax than lisp ones.\nYou throw a lot of english words in there as a separate syntax element each.\nThis maybe would make my mom\n1) *think* she kinda gets what this is about just because of familiar words\n2) when she *reads* this.\nBut\n1) I doubt she would actually *understand* what's that all about w\/o further explanation\n2) And certainly she would not be able to *write* anything in this syntax after seeing these 2 samples (I know because I can't).\n\nLisp's ~syntax~ shape is way closer to the actual \"abstract shape\" of the problem essence: base cases + recur case + branching (picking only 1 of them at time).\nLisp shape has fewer (but not 0) thing to question, e.g. are different parens mean different things? (yes they do, that's why vanilla lisp sucks to read and scared off so many people)\n\nSpecifically *these* lisp samples suck because nobody knows what the **** `eq` *`t`* *`car`* *`cdr`* *`values`* are. But those are names, not structure, not syntax. (ok, maybe `values` is somehow syntax, I don't know why it is there, what it does, and why would I care to have there anything other than `yes` or `no` )\n\nHere is the clojure example (notice I redefined only 3 words, and honestly, I think `true` `false` `defn` would be ok w\/o substituting them)\n```;; defn renaming needs to be done differently, via new defmacro, but it can be done globally once, and here it just illustrates the point: \"keep the structure, use better names\":\n(let [NO  false\n      YES true\n      new-function defn]\n\n  (new-function is-x-in-list? [x list]\n    (if (empty? list)\n      NO\n      (if (= x (first list))\n        YES\n        (is-x-in-list? x (rest list))))))```\nIt has the same *structure* as vanilla lisp samples, but much more \"humane\" (more widely recognizable names (to make 'em even more \"humane\" – maybe replace with chinese mandarin))\nIt explicitly has different types of words grouping: () and []\nMy mom would still have questions, but way fewer than in case of \"humane\" and vanilla lisp samples.\n\nOn the other hand, questions to the \"humane\" samples *I* have (to slightly better understand semantics, and maybe to try to write my own fns in this syntax):\n• why there are commas there, but not here?\n• what  `#` `^` `ɸ` `'`  `|` `->` `<-` are?\n• where does function name ends and arg name starts?\n• why some args are in () and some are inline?\n• I presume [] is a grouping around \"regex or\", and () - around return type? (try to explain it to my mom)\n• why `«»` in the second sample but not in first?\n• is `break down` a part of fn name or some keywords? why have them? what other options are? are those required?\n• if `^` is `return` indicator, why say `finish` ? if `finish` is `return` - why say `^` ?\n• `^` is in every {}, is it required? are those separate concepts, or is it just grouping syntax `{^ ...}`?\n• would `«` and `»` be the same as `\"` `\"` or do I need to find them on my keyboard?\n• is `ɸ` – some constant? if yes, why not `#ɸ` (because `#found` seems like a constant, and `#` seems like a way to mark constants). if not a constant, but some *type* (like `value` presumably is, can there be different `ɸ` ? (assuming that's an empty set. but we receive list (something sequential) and return set? huh.)\n• is `))` in `(x, «list'»))`  - a typo? or some syntactic thing?\n• there are commas `,` between words in `{ ^ #found, list }` , but not right after `^` , is comma - separating args, and args are not in parens (see `decompose`  and `^` ), but `rest (list)` seems like a function call, with parens... huh. \n• So if `^` is a fn call, how do I start another fn call after `^`  (how do I stop the args)? Or is `^`  – a syntactical keyword? Should it be be the last \"line\" in {} block? Why last `decompose` \"line\" in both samples is without `^` ? does {} \"returns\" `^` inside of it?\n• there are commas `,` between words in `{ ^ #found, list }` , but not between 2 `finish` lines. why?\n(and few more :) )",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1756996489.307289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kr\/UR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Syntax is \"rules\". I argue that your \"humane\" samples have way more syntax than lisp ones.\nYou throw a lot of english words in there as a separate syntax element each.\nThis maybe would make my mom\n1) "
                            },
                            {
                                "type": "text",
                                "text": "think",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " she kinda gets what this is about just because of familiar words\n2) when she "
                            },
                            {
                                "type": "text",
                                "text": "reads",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this.\nBut\n1) I doubt she would actually "
                            },
                            {
                                "type": "text",
                                "text": "understand",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what's that all about w\/o further explanation\n2) And certainly she would not be able to "
                            },
                            {
                                "type": "text",
                                "text": "write",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " anything in this syntax after seeing these 2 samples (I know because I can't).\n\nLisp's "
                            },
                            {
                                "type": "text",
                                "text": "syntax",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " shape is way closer to the actual \"abstract shape\" of the problem essence: base cases + recur case + branching (picking only 1 of them at time).\nLisp shape has fewer (but not 0) thing to question, e.g. are different parens mean different things? (yes they do, that's why vanilla lisp sucks to read and scared off so many people)\n\nSpecifically "
                            },
                            {
                                "type": "text",
                                "text": "these",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " lisp samples suck because nobody knows what the **** "
                            },
                            {
                                "type": "text",
                                "text": "eq",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "t",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "car",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "cdr",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "values",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "are. But those are names, not structure, not syntax. (ok, maybe "
                            },
                            {
                                "type": "text",
                                "text": "values",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is somehow syntax, I don't know why it is there, what it does, and why would I care to have there anything other than "
                            },
                            {
                                "type": "text",
                                "text": "yes",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "no",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " )\n\nHere is the clojure example (notice I redefined only 3 words, and honestly, I think "
                            },
                            {
                                "type": "text",
                                "text": "true",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "false",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "defn",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would be ok w\/o substituting them)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": ";; defn renaming needs to be done differently, via new defmacro, but it can be done globally once, and here it just illustrates the point: \"keep the structure, use better names\":\n(let [NO  false\n      YES true\n      new-function defn]\n\n  (new-function is-x-in-list? [x list]\n    (if (empty? list)\n      NO\n      (if (= x (first list))\n        YES\n        (is-x-in-list? x (rest list))))))"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It has the same "
                            },
                            {
                                "type": "text",
                                "text": "structure",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as vanilla lisp samples, but much more \"humane\" (more widely recognizable names (to make 'em even more \"humane\" – maybe replace with chinese mandarin))\nIt explicitly has different types of words grouping: () and []\nMy mom would still have questions, but way fewer than in case of \"humane\" and vanilla lisp samples.\n\nOn the other hand, questions to the \"humane\" samples "
                            },
                            {
                                "type": "text",
                                "text": "I ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "have (to slightly better understand semantics, and maybe to try to write my own fns in this syntax):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "why there are commas there, but not here?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "what  "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "ɸ",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "'",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  "
                                    },
                                    {
                                        "type": "text",
                                        "text": "|",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "->",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "<-",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " are?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "where does function name ends and arg name starts?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "why some args are in () and some are inline?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I presume [] is a grouping around \"regex or\", and () - around return type? (try to explain it to my mom)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "why "
                                    },
                                    {
                                        "type": "text",
                                        "text": "«»",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " in the second sample but not in first?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "break down",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " a part of fn name or some keywords? why have them? what other options are? are those required?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "if "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "return",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " indicator, why say "
                                    },
                                    {
                                        "type": "text",
                                        "text": "finish",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ? if "
                                    },
                                    {
                                        "type": "text",
                                        "text": "finish",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "return",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - why say "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is in every {}, is it required? are those separate concepts, or is it just grouping syntax "
                                    },
                                    {
                                        "type": "text",
                                        "text": "{^ ...}",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "would "
                                    },
                                    {
                                        "type": "text",
                                        "text": "«",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "»",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " be the same as "
                                    },
                                    {
                                        "type": "text",
                                        "text": "\"",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "\"",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " or do I need to find them on my keyboard?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "ɸ",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " – some constant? if yes, why not "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#ɸ",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (because "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#found",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " seems like a constant, and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " seems like a way to mark constants). if not a constant, but some "
                                    },
                                    {
                                        "type": "text",
                                        "text": "type",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "value",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " presumably is, can there be different "
                                    },
                                    {
                                        "type": "text",
                                        "text": "ɸ",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ? (assuming that's an empty set. but we receive list (something sequential) and return set? huh.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "))",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(x, «list'»))",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  - a typo? or some syntactic thing?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "there are commas "
                                    },
                                    {
                                        "type": "text",
                                        "text": ",",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " between words in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "{ ^ #found, list }",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , but not right after "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , is comma - separating args, and args are not in parens (see "
                                    },
                                    {
                                        "type": "text",
                                        "text": "decompose",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ), but "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rest (list)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " seems like a function call, with parens... huh. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "So if "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is a fn call, how do I start another fn call after "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  (how do I stop the args)? Or is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  – a syntactical keyword? Should it be be the last \"line\" in {} block? Why last "
                                    },
                                    {
                                        "type": "text",
                                        "text": "decompose",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " \"line\" in both samples is without "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ? does {} \"returns\" "
                                    },
                                    {
                                        "type": "text",
                                        "text": "^",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " inside of it?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "there are commas "
                                    },
                                    {
                                        "type": "text",
                                        "text": ",",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " between words in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "{ ^ #found, list }",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , but not between 2 "
                                    },
                                    {
                                        "type": "text",
                                        "text": "finish",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " lines. why?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(and few more :) )"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]