[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1630913236.101500",
        "client_msg_id": "a40bc030-aadf-40b2-ab66-d9e20a8fe145",
        "text": "Indeed. But without an exception system, normal programming means having the exceptions appear all over the code, either as explicit tests at all levels of abstractions (as in good old C), or as messy types (e.g. monads in Haskell).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4C0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed. But without an exception system, normal programming means having the exceptions appear all over the code, either as explicit tests at all levels of abstractions (as in good old C), or as messy types (e.g. monads in Haskell)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1630913484.101700",
        "client_msg_id": "12a9bd19-fba0-4470-aa6c-51bfb91f2634",
        "text": "Scientific computing has much of the same issues as games: large but simply structured datasets, and dealing with hardware limitations in memory and performance. But explicit support in programming languages is rare. One reason why there was a lot of enthusiasm for C++ for scientific computing in the 1990s was the hope for managing the AOS vs. SOA tradeoff better than in Fortran. Not sure it was a success.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+YEw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scientific computing has much of the same issues as games: large but simply structured datasets, and dealing with hardware limitations in memory and performance. But explicit support in programming languages is rare. One reason why there was a lot of enthusiasm for C++ for scientific computing in the 1990s was the hope for managing the AOS vs. SOA tradeoff better than in Fortran. Not sure it was a success."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U027P92A0N5",
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630919270.102200",
        "client_msg_id": "ff22946d-fd76-4b15-94a3-b025bcd59132",
        "text": "Have you heard about <https:\/\/chapel-lang.org\/> ? It natively supports not only sparse but **distributed** N-dimentional arrays. Still take a look at the _problems_ and the means to make it _efficient_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fYw6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you heard about "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/chapel-lang.org\/"
                            },
                            {
                                "type": "text",
                                "text": " ? It natively supports not only sparse but *"
                            },
                            {
                                "type": "text",
                                "text": "distributed",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "* N-dimentional arrays. Still take a look at the "
                            },
                            {
                                "type": "text",
                                "text": "problems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the means to make it "
                            },
                            {
                                "type": "text",
                                "text": "efficient",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630919399.102400",
        "client_msg_id": "411e77d0-eaae-4de6-b25c-8a0c8bfddd0d",
        "text": "Besides, \"tensor operations\" are only good for _numerical_ computations. I don't know how much numerical computation you develop, but I develop none. Haven't come across a single one in any of Web-dev projects I was involved. :woman-shrugging:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zvqN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Besides, \"tensor operations\" are only good for "
                            },
                            {
                                "type": "text",
                                "text": "numerical",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computations. I don't know how much numerical computation you develop, but I develop none. Haven't come across a single one in any of Web-dev projects I was involved. "
                            },
                            {
                                "type": "emoji",
                                "name": "woman-shrugging",
                                "unicode": "1f937-200d-2640-fe0f"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630919603.106300",
        "client_msg_id": "7D90BE42-92FE-4F2D-A0B5-F97F29233A26",
        "text": "Thanks I’ll check out what Charity does. But you’re not correct with the claim that tensor operations are only for numerical computation. I gave a very important example in my original post: contraction of Bool-valued tensors is precisely an equi-join between two database tables. I guarantee you’ve come across databases in your web dev projects :innocent:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iqn6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks I’ll check out what Charity does. But you’re not correct with the claim that tensor operations are only for numerical computation. I gave a very important example in my original post: contraction of Bool-valued tensors is precisely an equi-join between two database tables. I guarantee you’ve come across databases in your web dev projects "
                            },
                            {
                                "type": "emoji",
                                "name": "innocent",
                                "unicode": "1f607"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630919660.107900",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1630919740.000000"
        },
        "client_msg_id": "0C2C77DD-F062-4097-9197-F85F991F9951",
        "text": "This isn’t merely a curiosity. Given hardware like Tenstorrent’s, we might now have the opportunity to radically rethink high-performance databases, including in-memory DBs (i.e. the memory model of arbitrary programs). ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TFx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This isn’t merely a curiosity. Given hardware like Tenstorrent’s, we might now have the opportunity to radically rethink high-performance databases, including in-memory DBs (i.e. the memory model of arbitrary programs). "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630921090.108300",
        "client_msg_id": "ab945e20-ceab-4ab8-9bb0-023a6a625138",
        "text": "Probably, \"the languages promoting data-oriented design\" are exactly \"array programming languages\", which are kinda popular again later with the spread of GPGPU, but mostly around scientific computing, DSP and alike. :slightly_smiling_face:\n\nBesides, just SoA isn't _efficient enough_ on modern hardware considering all levels of caching, NUMA and vectorization. Thus in practice for maximum performance people use combined layouts like SoAoS. But for that you have to know the sizes and layouts of your base structures, where and how they are used, and adapt algorithms for that. So no \"one size fits all\" solution here, it's all careful conscious and methodical manual optimisation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o4C1Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably, \"the languages promoting data-oriented design\" are exactly \"array programming languages\", which are kinda popular again later with the spread of GPGPU, but mostly around scientific computing, DSP and alike. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBesides, just SoA isn't "
                            },
                            {
                                "type": "text",
                                "text": "efficient enough",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on modern hardware considering all levels of caching, NUMA and vectorization. Thus in practice for maximum performance people use combined layouts like SoAoS. But for that you have to know the sizes and layouts of your base structures, where and how they are used, and adapt algorithms for that. So no \"one size fits all\" solution here, it's all careful conscious and methodical manual optimisation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1630922884.108500",
        "client_msg_id": "c0f62fcc-b450-4a93-979e-1beefa658740",
        "text": "<https:\/\/www.youtube.com\/watch?v=qs5Zm2fFxjU>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Blondie - Accidents never happen",
                "title_link": "https:\/\/www.youtube.com\/watch?v=qs5Zm2fFxjU",
                "author_name": "megaFilibuster",
                "author_link": "https:\/\/www.youtube.com\/user\/megaFilibuster",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/qs5Zm2fFxjU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Blondie - Accidents never happen",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/qs5Zm2fFxjU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=qs5Zm2fFxjU",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=qs5Zm2fFxjU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PVD=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=qs5Zm2fFxjU"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630923308.108900",
        "client_msg_id": "0ba69e4b-ca0b-4a2d-b4e7-1fad815c488f",
        "text": "Yeah and my DBs were full of Strings, DateTimes and Foreign Keys -- good luck putting all of that into \"tensors\" and performing _parallel_ operations on them! :grin:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s2E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah and my DBs were full of Strings, DateTimes and Foreign Keys -- good luck putting all of that into \"tensors\" and performing "
                            },
                            {
                                "type": "text",
                                "text": "parallel",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operations on them! "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630923435.109100",
        "client_msg_id": "588e89d3-b818-407f-8004-96a323607960",
        "text": "In reality your parallelism stops as soon as you encounter a fold with _non-associative_ operations. And pretty much all operations performing _side effects_ are non-associative. That's basically leaves you with numeric (plus boolean) computations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mMt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In reality your parallelism stops as soon as you encounter a fold with "
                            },
                            {
                                "type": "text",
                                "text": "non-associative",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operations. And pretty much all operations performing "
                            },
                            {
                                "type": "text",
                                "text": "side effects",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are non-associative. That's basically leaves you with numeric (plus boolean) computations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630923655.112000",
        "client_msg_id": "3F0E9C09-69C6-494B-B3B5-70B2C8092876",
        "text": "Mate, foreign keys aren’t a problem, they’re the very thing you equi-join on. Have a play around with the idea in the 2D case (Boolean matrices); you should be able to figure out how it works. Stuff like strings aren’t a problem either, they’re just a bunch of bytes along one dimension of the tensor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w44nf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mate, foreign keys aren’t a problem, they’re the very thing you equi-join on. Have a play around with the idea in the 2D case (Boolean matrices); you should be able to figure out how it works. Stuff like strings aren’t a problem either, they’re just a bunch of bytes along one dimension of the tensor."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630926920.112200",
        "client_msg_id": "74eed8ed-629c-4900-bdd9-8636777cc7a4",
        "text": "I know how it works. I know how it _performs_. I know how GPUs and \"tensor processors\" are implemented and what they are capable of. Do you? :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k7GjQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know how it works. I know how it "
                            },
                            {
                                "type": "text",
                                "text": "performs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I know how GPUs and \"tensor processors\" are implemented and what they are capable of. Do you? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630930637.115400",
        "client_msg_id": "E97C43E3-9C29-49F4-B7DB-39FB48424A1E",
        "text": "I came to share some exciting ideas with the community; I’m not interested in having a pissing contest. Clearly you’ve come to this thread with an ulterior motive. I think we can leave it there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q=BZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I came to share some exciting ideas with the community; I’m not interested in having a pissing contest. Clearly you’ve come to this thread with an ulterior motive. I think we can leave it there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630931054.115600",
        "client_msg_id": "b5c718d8-fc40-43b3-aae7-4b41b287373e",
        "text": "<@UCGAK10LS> you clearly know my motives and intentions much better than I do so I'll take your word for it! :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jq3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " you clearly know my motives and intentions much better than I do so I'll take your word for it! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1630936000.115800",
        "client_msg_id": "74d004e9-09cb-4e75-bc97-acf1e6c7879b",
        "text": "I know Andrew Kelly just applied some data oriented techniques to zig for compiler performance improvements. <https:\/\/vimeo.com\/507318005|https:\/\/vimeo.com\/507318005>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https:\/\/vimeo.com\/",
                "title": "Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing",
                "title_link": "https:\/\/vimeo.com\/507318005",
                "author_name": "Andrew Kelley",
                "author_link": "https:\/\/vimeo.com\/andrewrk",
                "thumb_url": "https:\/\/i.vimeocdn.com\/video\/1050006686_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "fallback": "Vimeo Video: Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing",
                "video_html": "<iframe src=\"https:\/\/player.vimeo.com\/video\/507318005?autoplay=1&amp;app_id=122963&amp;h=214f5d868e\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/vimeo.com\/507318005",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/vimeo.png",
                "id": 1,
                "original_url": "https:\/\/vimeo.com\/507318005"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yUA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know Andrew Kelly just applied some data oriented techniques to zig for compiler performance improvements. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vimeo.com\/507318005",
                                "text": "https:\/\/vimeo.com\/507318005"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1630939797.116100",
        "client_msg_id": "010af425-ffe4-41ce-b2b5-5dec5ce4c77c",
        "text": "I’d recommend looking at <https:\/\/www.youtube.com\/watch?v=Oj_xgO2uKJM&amp;t=1s>. And also Aarons Hsu’s thesis.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Aaron Hsu- Program Obesity: A Code Health Epidemic- λC 2019 Unconference",
                "title_link": "https:\/\/www.youtube.com\/watch?v=Oj_xgO2uKJM&amp;t=1s",
                "author_name": "LambdaConf",
                "author_link": "https:\/\/www.youtube.com\/c\/LambdaConf",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Oj_xgO2uKJM\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Aaron Hsu- Program Obesity: A Code Health Epidemic- λC 2019 Unconference",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/Oj_xgO2uKJM?feature=oembed&start=1&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=Oj_xgO2uKJM&amp;t=1s",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=Oj_xgO2uKJM&amp;t=1s"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yHL47",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d recommend looking at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=Oj_xgO2uKJM&t=1s"
                            },
                            {
                                "type": "text",
                                "text": ". And also Aarons Hsu’s thesis."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "tada",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01JNTE35QS",
        "type": "message",
        "ts": "1630940171.116400",
        "client_msg_id": "8f4d1e75-a956-42bd-89de-ff399665910d",
        "text": "Very interesting - I’ve been looking at XLA and JAX as a means of abstraction over such hardware. I also think a number of problems can be decomposed into “tensor friendly” representations - lots of interesting work going on in this area.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "97155db555c2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-13\/1631845309525_97155db555c2091ecd20_72.jpg",
            "first_name": "",
            "real_name": "Vijay Chakravarthy",
            "display_name": "Vijay Chakravarthy",
            "team": "T5TCAFTA9",
            "name": "vchakrav",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AC47q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting - I’ve been looking at XLA and JAX as a means of abstraction over such hardware. I also think a number of problems can be decomposed into “tensor friendly” representations - lots of interesting work going on in this area."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UPVBV34EL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1630943903.116700",
        "client_msg_id": "839b1e02-fade-4296-9d44-245e8cdf372c",
        "text": "<@U027P92A0N5> \"\"tensor operations\" are only good for _numerical_ computations.\" No, that's merely what they have been used for most commonly. Recommended reading for this thread: \"The memory models that underlie programming languages\" (<http:\/\/canonical.org\/~kragen\/memory-models\/>). The third model discussed in that overview is \"parallel arrays\", and it's very similar to what <@UCGAK10LS> has proposed when starting this thread. It can be combined with ideas from \"nested records\" (the first model), which is what NumPy's \"structured arrays\" are. And there is also overlap with \"relations\", the last model in the overview.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "title": "The memory models that underlie programming languages",
                "title_link": "http:\/\/canonical.org\/~kragen\/memory-models\/",
                "text": "There are about six major conceptualizations of memory, which I’m calling “memory models”, that dominate today’s programming.",
                "fallback": "The memory models that underlie programming languages",
                "thumb_url": "http:\/\/canonical.org\/~kragen\/memory-models\/nested-ballpoint-circles.jpg",
                "from_url": "http:\/\/canonical.org\/~kragen\/memory-models\/",
                "thumb_width": 875,
                "thumb_height": 370,
                "service_icon": "http:\/\/canonical.org\/~kragen\/kragen-icon-small.ico",
                "service_name": "canonical.org",
                "id": 1,
                "original_url": "http:\/\/canonical.org\/~kragen\/memory-models\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NXh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U027P92A0N5"
                            },
                            {
                                "type": "text",
                                "text": " \"\"tensor operations\" are only good for "
                            },
                            {
                                "type": "text",
                                "text": "numerical",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computations.\" No, that's merely what they have been used for most commonly. Recommended reading for this thread: \"The memory models that underlie programming languages\" ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/canonical.org\/~kragen\/memory-models\/"
                            },
                            {
                                "type": "text",
                                "text": "). The third model discussed in that overview is \"parallel arrays\", and it's very similar to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " has proposed when starting this thread. It can be combined with ideas from \"nested records\" (the first model), which is what NumPy's \"structured arrays\" are. And there is also overlap with \"relations\", the last model in the overview."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS",
                    "UPVBV34EL",
                    "UCUSW7WVD"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U027P92A0N5",
        "type": "message",
        "ts": "1630944775.117000",
        "client_msg_id": "2571bfc5-4ef5-41dc-8b2c-146d15b828cd",
        "text": "<@UJBAJNFLK> yeah thanks for \"The memory models that underlie programming languages\", that's a good one as far as I remember. :slightly_smiling_face:\n\nI agree that as a _model_ \"tensors\" (or multi-dimensional arrays, parallel or not, though J language was calling them \"tensors\" some decades before ML frameworks did :grin:) can accommodate pretty much everything, including certain notion of \"objects\", \"relations\" and \"tables\" as evidenced by APL, K\/Q, J again or even R, NumPy and Pandas. But <@UCGAK10LS> was talking about (sparse) \"tensors\" as a _low-level_ model of actual hardware memory of \"tensor processors\", and in reality this processors can _efficiently_ handle only numerical (and packed boolean, yes) computations. As soon as we throw pointers (or indexes into _other_ tensors) in the mix and start chasing them the \"model\" breaks and efficiency plummets. Thus I claim \"tensor operations are only *good* for numerical computations\". :grin:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d6900487d910",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-07-07\/2254853369060_d6900487d9109f495c79_72.jpg",
            "first_name": "Alexander",
            "real_name": "Alexander Chichigin",
            "display_name": "Alex Chichigin",
            "team": "T5TCAFTA9",
            "name": "sad.ronin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PAE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " yeah thanks for \"The memory models that underlie programming languages\", that's a good one as far as I remember. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI agree that as a "
                            },
                            {
                                "type": "text",
                                "text": "model",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"tensors\" (or multi-dimensional arrays, parallel or not, though J language was calling them \"tensors\" some decades before ML frameworks did "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            },
                            {
                                "type": "text",
                                "text": ") can accommodate pretty much everything, including certain notion of \"objects\", \"relations\" and \"tables\" as evidenced by APL, K\/Q, J again or even R, NumPy and Pandas. But "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " was talking about (sparse) \"tensors\" as a "
                            },
                            {
                                "type": "text",
                                "text": "low-level",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " model of actual hardware memory of \"tensor processors\", and in reality this processors can "
                            },
                            {
                                "type": "text",
                                "text": "efficiently",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " handle only numerical (and packed boolean, yes) computations. As soon as we throw pointers (or indexes into "
                            },
                            {
                                "type": "text",
                                "text": "other",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tensors) in the mix and start chasing them the \"model\" breaks and efficiency plummets. Thus I claim \"tensor operations are only "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for numerical computations\". "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630968182.118100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1630968670.000000"
        },
        "client_msg_id": "ab29f77e-86b5-491c-858c-0b924a699b0d",
        "text": "On these new distributed memory tensor processors, you don't usually \"point\" at things (there is no global memory \/ address space), you usually _join_ things (in the form of tensor contraction). These chips are specifically built to do insanely fast contractions. You won't be running Java code on these chips (the epitome of pointer-chasing), but that's fine, that's not the promise.\n\nOperations on databases are mostly equi-joins and aggregations, *both* of which are basic operations in the Numpy\/Pytorch API (which Tenstorrent is essentially using as the initial \"instruction set\" for their hardware). Fancier kinds of joins (i.e. on predicates) are less-obviously translated to tensor operations. It would be fun to explore how to re-implement them efficiently in terms of lower-level ops (cross-join + filter is always an option, but probably not the smartest one). A good ISA would have the right primitives available.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lbl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On these new distributed memory tensor processors, you don't usually \"point\" at things (there is no global memory \/ address space), you usually "
                            },
                            {
                                "type": "text",
                                "text": "join",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " things (in the form of tensor contraction). These chips are specifically built to do insanely fast contractions. You won't be running Java code on these chips (the epitome of pointer-chasing), but that's fine, that's not the promise.\n\nOperations on databases are mostly equi-joins and aggregations, "
                            },
                            {
                                "type": "text",
                                "text": "both",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of which are basic operations in the Numpy\/Pytorch API (which Tenstorrent is essentially using as the initial \"instruction set\" for their hardware). Fancier kinds of joins (i.e. on predicates) are less-obviously translated to tensor operations. It would be fun to explore how to re-implement them efficiently in terms of lower-level ops (cross-join + filter is always an option, but probably not the smartest one). A good ISA would have the right primitives available."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1630968344.118300",
        "client_msg_id": "c9cfbdaf-a038-4c03-8ab3-d8c257af94f8",
        "text": "Thanks <@UJBAJNFLK>. That article looks really interesting! I'll have a dive in.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630745854.074100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "htdu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ". That article looks really interesting! I'll have a dive in."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1630991108.119500",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1630991435.000000"
        },
        "client_msg_id": "57cd37bf-9fb0-4abc-9c8f-d645fbd7ac79",
        "text": "Jonathan Blow's work-in-progress programming language Jai has <https:\/\/github.com\/BSVino\/JaiPrimer\/blob\/master\/JaiPrimer.md#data-oriented-structures|language-level support> for AOS and SOA:\n\n&gt; However, as programs get larger, it becomes much more difficult to reorganize the data. Testing whether a single, simple change has any effect on performance can take the developer a long time, because once the data structures must change, all of the code that acts on that data structure breaks. So Jai provides mechanisms for automatically transitioning between SoA and AoS without breaking the supporting code.\nWhich makes me wonder if this sort of generality of data access is similar to the approach Clojure takes to its data structures — and if so, whether they're directly aligned or lie along slightly different axes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cvlw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jonathan Blow's work-in-progress programming language Jai has "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/BSVino\/JaiPrimer\/blob\/master\/JaiPrimer.md#data-oriented-structures",
                                "text": "language-level support"
                            },
                            {
                                "type": "text",
                                "text": " for AOS and SOA:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, as programs get larger, it becomes much more difficult to reorganize the data. Testing whether a single, simple change has any effect on performance can take the developer a long time, because once the data structures must change, all of the code that acts on that data structure breaks. So Jai provides mechanisms for automatically transitioning between SoA and AoS without breaking the supporting code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich makes me wonder if this sort of generality of data access is similar to the approach Clojure takes to its data structures — and if so, whether they're directly aligned or lie along slightly different axes."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    }
]