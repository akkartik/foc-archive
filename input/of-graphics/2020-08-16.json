[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1597574263.298300",
        "client_msg_id": "3dc53fe3-75f0-4fe5-955f-1eeb9d127a43",
        "text": "I've never seen this project, but it's C++ and has a lot of similar names\/concepts in the code to my own effort; some of his source files and classes even have the same names as mine, though it is obviously very refined and clean. It is like my thing, but with 10 years more work!  Very impressive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597534784.293900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bPnnl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've never seen this project, but it's C++ and has a lot of similar names\/concepts in the code to my own effort; some of his source files and classes even have the same names as mine, though it is obviously very refined and clean. It is like my thing, but with 10 years more work!  Very impressive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597578044.298600",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1597605239.000000"
        },
        "client_msg_id": "81138834-2f17-4449-8845-6356519d4b6a",
        "text": "Pathfinder and Piet only support traditional 2D vector graphics. Dali is a generalized 2D\/3D graphics API that supports signed distance field operations, which gives it enormous flexibility and expressiveness. In the same way that 2D vector graphics supports curved shapes that are scalable and resolution independent, Dali also supports 3D shapes that are curved, scalable and resolution independent. Dali also supports a full range of SDF operations that can be applied to any 2D or 3D shape, including many that are not supported by traditional graphics systems based on boundary representation. I already implemented this once already in my Curv project, but there's no text support, and there are performance limitations, so Dali will use a new high performance architecture. I am looking at Pathfinder and Piet to see how much I can reuse.\n\nAs part of Dali, I need a text renderer that supports signed distance queries on font data, because that allows the full range of SDF operations to be applied to text. So you can apply non-affine transformations, morph, extrude text into 3D, engrave text into the surface of a 3D object, etc. I am investigating the idea that a single SDF based text renderer can be used to render text in both the 2D and 3D cases. There was already a project that worked this way: \"<http:\/\/citeseerx.ist.psu.edu\/viewdoc\/summary?doi=10.1.1.154.9948|Real Time Texture-Mapped Vector Glyphs>\". The paper was published in 2006, before compute shaders, before Vulkan, before Piet and Pathfinder. The GPU tech landscape has changed a lot, so I'd like to see if this architecture can be resurrected and made more efficient using current technology and ideas. Piet implements distance queries on font data to implement strokes. I'm looking at Piet to see how it can inform the Dali architecture.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lqZR0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pathfinder and Piet only support traditional 2D vector graphics. Dali is a generalized 2D\/3D graphics API that supports signed distance field operations, which gives it enormous flexibility and expressiveness. In the same way that 2D vector graphics supports curved shapes that are scalable and resolution independent, Dali also supports 3D shapes that are curved, scalable and resolution independent. Dali also supports a full range of SDF operations that can be applied to any 2D or 3D shape, including many that are not supported by traditional graphics systems based on boundary representation. I already implemented this once already in my Curv project, but there's no text support, and there are performance limitations, so Dali will use a new high performance architecture. I am looking at Pathfinder and Piet to see how much I can reuse.\n\nAs part of Dali, I need a text renderer that supports signed distance queries on font data, because that allows the full range of SDF operations to be applied to text. So you can apply non-affine transformations, morph, extrude text into 3D, engrave text into the surface of a 3D object, etc. I am investigating the idea that a single SDF based text renderer can be used to render text in both the 2D and 3D cases. There was already a project that worked this way: \""
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/citeseerx.ist.psu.edu\/viewdoc\/summary?doi=10.1.1.154.9948",
                                "text": "Real Time Texture-Mapped Vector Glyphs"
                            },
                            {
                                "type": "text",
                                "text": "\". The paper was published in 2006, before compute shaders, before Vulkan, before Piet and Pathfinder. The GPU tech landscape has changed a lot, so I'd like to see if this architecture can be resurrected and made more efficient using current technology and ideas. Piet implements distance queries on font data to implement strokes. I'm looking at Piet to see how it can inform the Dali architecture."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1597578158.299500",
        "client_msg_id": "31EF387A-538C-4DFE-ADF0-D85085D24524",
        "text": "I see. Sounds very exciting, and very ambitious too!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=gS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Sounds very exciting, and very ambitious too!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1597605547.299800",
        "client_msg_id": "e0583f4a-a99b-471c-a457-d0821da3f23b",
        "text": "Exciting stuff, Doug!\n\nTo what extent should I think of the API as stateful (a la retained mode) vs stateless (a la immediate mode)?\n\nAre you planning to use this as a new backend for Curv?\n\n(OT: I don't understand how WebGPU buys portability beyond the browser. What makes WebGPU work on native? Is there going to be (eg) some sort of WebGPU-&gt;Metal option for native iOS?)\n\nThere's a long road from here to something we'll be able to use in our own projects. How can we help?\n\nFWIW â€” The tradeoffs listed under Text Rendering (Demo 1) are fantastic. I wouldn't change a thing, for my personal needs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+nfAG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exciting stuff, Doug!\n\nTo what extent should I think of the API as stateful (a la retained mode) vs stateless (a la immediate mode)?\n\nAre you planning to use this as a new backend for Curv?\n\n(OT: I don't understand how WebGPU buys portability beyond the browser. What makes WebGPU work on native? Is there going to be (eg) some sort of WebGPU->Metal option for native iOS?)\n\nThere's a long road from here to something we'll be able to use in our own projects. How can we help?\n\nFWIW â€” The tradeoffs listed under Text Rendering (Demo 1) are fantastic. I wouldn't change a thing, for my personal needs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597611708.300000",
        "client_msg_id": "a7ba8cda-a5a4-4824-b67c-262e8541781d",
        "text": "Google is creating an open source library called Dawn which implements WebGPU as a layer on top of Vulkan, DX12 and Metal. This implements WebGPU on all the platforms that Chrome runs on, and is used by Chrome. The WASI project is adopting WebGPU as a standard portable API for web assembly, so it will work even when you are running WASM programs outside of a web browser. You can think of WebGPU as the new OpenGL, because it runs everywhere, but it's easier to use, higher performance, and there's only one dialect, instead of OpenGL vs OpenGL ES vs WebGL.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DHU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Google is creating an open source library called Dawn which implements WebGPU as a layer on top of Vulkan, DX12 and Metal. This implements WebGPU on all the platforms that Chrome runs on, and is used by Chrome. The WASI project is adopting WebGPU as a standard portable API for web assembly, so it will work even when you are running WASM programs outside of a web browser. You can think of WebGPU as the new OpenGL, because it runs everywhere, but it's easier to use, higher performance, and there's only one dialect, instead of OpenGL vs OpenGL ES vs WebGL."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "ULK0Z4MPV",
                    "UNCP67JSK"
                ],
                "count": 3
            },
            {
                "name": "tada",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597627820.300300",
        "client_msg_id": "435d7da6-ef1f-40f8-a96c-5cc9485ae87d",
        "text": "Dali is a \"retained mode\" API. You build a \"graphics tree\", where the nodes are graphics primitives and operators, then you load this tree into the GPU, which interprets and renders it. Animation and dynamic content are achieved by modifying uniform variables, and by modifying resources and nodes in the gtree. These tree modifications are synchronized with the GPU's copy of the tree.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1k9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dali is a \"retained mode\" API. You build a \"graphics tree\", where the nodes are graphics primitives and operators, then you load this tree into the GPU, which interprets and renders it. Animation and dynamic content are achieved by modifying uniform variables, and by modifying resources and nodes in the gtree. These tree modifications are synchronized with the GPU's copy of the tree."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0",
                    "ULK0Z4MPV"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1597627925.300500",
        "client_msg_id": "1e1d2c40-0e95-48ad-9511-5f738019e9fe",
        "text": "Dali is intended to be a new backend for Curv. But instead of burying the work inside Curv, I'm trying to create a general purpose library that is useful independent of Curv.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1597514406.288800",
        "parent_user_id": "UJN1TAYEQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z\/g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dali is intended to be a new backend for Curv. But instead of burying the work inside Curv, I'm trying to create a general purpose library that is useful independent of Curv."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    }
]