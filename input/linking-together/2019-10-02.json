[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570003136.129400",
        "client_msg_id": "eb2f1fe5-644c-4c96-a0ab-876eca6df714",
        "text": "Okay folks, i just spent the weekend coding a version of little kid's Lumberjack game that was programmed in React\/Typescript (playable game at <https:\/\/lumber-jack.netlify.com\/>).  I did a high-fidelity clone of the React version in my Beads language, and published the results.  The Beads version is here on GitHub (<https:\/\/github.com\/magicmouse\/beads-examples\/tree\/master\/Example%20-%20Lumberjack>).  Although the source code is comparable, the redu√ßtion in the number of source files from 13 to 1 is favorable, and the reduction of external API's referenced directly or indirectly from 1300 to 13 is 100:1 reduction in terms of dependencies. A big part of the problem with programming especially in the JS world is the horrible tangled web of interdependencies, which makes interchangeable parts impossible in the JS\/framework space IMHO.\n\nIf you have your own favorite language, why not try making the game yourself, the original React version has all the art and sound effect assets you would need already created. And if there are any lurkers on this group that would like to try Beads out please message me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "reply_count": 58,
        "reply_users_count": 11,
        "latest_reply": "1571653412.023100",
        "reply_users": [
            "UMU2RLPR8",
            "U79HM6726",
            "UC2A2ARPT",
            "UHDQ62M4P",
            "UHWC9PXBL",
            "UEQ6M68H0",
            "U85HCL7JP",
            "U6KQ2S410",
            "UA14TGLTC",
            "UAVCC2X70",
            "UC6997THT"
        ],
        "replies": [
            {
                "user": "UMU2RLPR8",
                "ts": "1570004933.129600"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1570004982.129800"
            },
            {
                "user": "U79HM6726",
                "ts": "1570023010.130400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570033939.131200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570035745.132800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570038968.133400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570040005.133900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570055344.134700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570055817.134900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570056741.135300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570065117.136800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570065135.137300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570070550.137500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570075836.139000"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1570088614.139300"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1570125145.141700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570130099.142100"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1570136533.142500"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1570137838.142900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570138696.143100"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1570139216.143300"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1570139387.143500"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570141023.143900"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570141028.144100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570141249.144300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570144375.144700"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570153393.145000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570170534.150800"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1570199918.151800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206221.152000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206333.152200"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1570206640.152400"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206841.152600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206885.152800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206935.153000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570206980.153200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570207064.153400"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1570207159.153600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570209281.153800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570209331.154000"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570209354.154200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1570209382.154400"
            },
            {
                "user": "U79HM6726",
                "ts": "1570373182.155900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1570375116.177400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570377201.178900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570397422.179700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1570423649.180200"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570434749.180700"
            },
            {
                "user": "U85HCL7JP",
                "ts": "1570463401.181000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570469963.181500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1570474346.181700"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570572327.182100"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1570640176.001400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1570642494.001600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1570674787.005700"
            },
            {
                "user": "UC6997THT",
                "ts": "1571377866.020000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1571385942.022300"
            },
            {
                "user": "UMU2RLPR8",
                "ts": "1571653412.023100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Lumber Jack",
                "title_link": "https:\/\/lumber-jack.netlify.com\/",
                "text": "Web site created using create-react-app",
                "fallback": "Lumber Jack",
                "from_url": "https:\/\/lumber-jack.netlify.com\/",
                "service_icon": "https:\/\/lumber-jack.netlify.com\/logo192.png",
                "service_name": "lumber-jack.netlify.com",
                "id": 1,
                "original_url": "https:\/\/lumber-jack.netlify.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EdW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Okay folks, i just spent the weekend coding a version of little kid's Lumberjack game that was programmed in React\/Typescript (playable game at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lumber-jack.netlify.com\/"
                            },
                            {
                                "type": "text",
                                "text": ").  I did a high-fidelity clone of the React version in my Beads language, and published the results.  The Beads version is here on GitHub ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/magicmouse\/beads-examples\/tree\/master\/Example%20-%20Lumberjack"
                            },
                            {
                                "type": "text",
                                "text": ").  Although the source code is comparable, the redu√ßtion in the number of source files from 13 to 1 is favorable, and the reduction of external API's referenced directly or indirectly from 1300 to 13 is 100:1 reduction in terms of dependencies. A big part of the problem with programming especially in the JS world is the horrible tangled web of interdependencies, which makes interchangeable parts impossible in the JS\/framework space IMHO.\n\nIf you have your own favorite language, why not try making the game yourself, the original React version has all the art and sound effect assets you would need already created. And if there are any lurkers on this group that would like to try Beads out please message me."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U79HM6726",
                    "UFEQUBNNT",
                    "UBSMEUXAA"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMU2RLPR8",
        "type": "message",
        "ts": "1570004933.129600",
        "edited": {
            "user": "UMU2RLPR8",
            "ts": "1570023296.000000"
        },
        "client_msg_id": "ddfa9f82-f124-4173-9b16-4cb16670acaa",
        "text": "this is pretty interesting!\n&gt; to use these modules, it requires a mishmash of magical tags in the source code like , , , &lt;&gt;,\nwas there supposed to be more examples there?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84533398a201",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-10\/756734099191_84533398a201c4f2babe_72.png",
            "first_name": "Ryan",
            "real_name": "Ryan",
            "display_name": "comma",
            "team": "T5TCAFTA9",
            "name": "ryan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F=\/SC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is pretty interesting!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to use these modules, it requires a mishmash of magical tags in the source code like , , , <>,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "was there supposed to be more examples there?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMU2RLPR8",
        "type": "message",
        "ts": "1570004982.129800",
        "edited": {
            "user": "UMU2RLPR8",
            "ts": "1570004994.000000"
        },
        "client_msg_id": "6064010e-1d61-46bf-8da7-e174e23b735c",
        "text": "the 1300 deps thing is a total non-issue to me but i‚Äôm a 15 year javascript dev and‚Äôve been using node packages since before npm was even a thing. i can understand why others might get freaked out by that though! :rolling_on_the_floor_laughing:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84533398a201",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-10\/756734099191_84533398a201c4f2babe_72.png",
            "first_name": "Ryan",
            "real_name": "Ryan",
            "display_name": "comma",
            "team": "T5TCAFTA9",
            "name": "ryan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PzfL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the 1300 deps thing is a total non-issue to me but i‚Äôm a 15 year javascript dev and‚Äôve been using node packages since before npm was even a thing. i can understand why others might get freaked out by that though! "
                            },
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing",
                                "unicode": "1f923"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1570023010.130400",
        "client_msg_id": "25b74c2c-2785-4f08-a431-f0f148d132e8",
        "text": "I don‚Äôt think that the comparison of number of files is a good objective measure. Many folks won‚Äôt necessarily prefer one monolithic file over something split into sensible modules.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9gq+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don‚Äôt think that the comparison of number of files is a good objective measure. Many folks won‚Äôt necessarily prefer one monolithic file over something split into sensible modules."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1570031247.130900",
        "client_msg_id": "6b73ec9e-6458-468d-bed7-09cb2619cf30",
        "text": "Thanks, this is awesome!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569966303.122400",
        "parent_user_id": "UDJ8A6RNH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wgv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, this is awesome!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1570033939.131200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1570034006.000000"
        },
        "client_msg_id": "08b79276-3c60-4342-9b68-bcad95db8800",
        "text": "It's nice to do comparison demos.. but I think the whole React \/ npm ecosystem is a bloated, under-designed, incoherent mess, so this is a bit like shooting fish in a barrel. You don't need the machinery of React and its extensions to make something this simple ‚Äî just use the dang DOM, people!\n\nOn the other hand.. I loved getting to finally see some Beads code! Thanks for posting that, Edward. It reads a lot like a minimal whitespace language like CoffeeScript, which I'm very fond of. Do you have a link to any document that outlines the syntax, statements\/operators, and other core language features?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8aP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's nice to do comparison demos.. but I think the whole React \/ npm ecosystem is a bloated, under-designed, incoherent mess, so this is a bit like shooting fish in a barrel. You don't need the machinery of React and its extensions to make something this simple ‚Äî just use the dang DOM, people!\n\nOn the other hand.. I loved getting to finally see some Beads code! Thanks for posting that, Edward. It reads a lot like a minimal whitespace language like CoffeeScript, which I'm very fond of. Do you have a link to any document that outlines the syntax, statements\/operators, and other core language features?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1570035650.132600",
        "client_msg_id": "d5b93398-575a-4632-974b-d5c1206454cb",
        "text": "Random shower thought about hierarchical directories. Not as extreme as many ideas here, but still seems radical to a Unix weenie like myself.\n\n<https:\/\/mastodon.social\/@akkartik\/102893835264728821>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570035650.132600",
        "reply_count": 5,
        "reply_users_count": 5,
        "latest_reply": "1571378802.022000",
        "reply_users": [
            "U6FKVSVCK",
            "UJN1TAYEQ",
            "UEQ6M68H0",
            "UCUSW7WVD",
            "UC6997THT"
        ],
        "replies": [
            {
                "user": "U6FKVSVCK",
                "ts": "1570037406.133100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1570041734.134200"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1570056055.135100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1570059200.135700"
            },
            {
                "user": "UC6997THT",
                "ts": "1571378802.022000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Mastodon",
                "title": "Kartik Agaram (@akkartik@mastodon.social)",
                "title_link": "https:\/\/mastodon.social\/@akkartik\/102893835264728821",
                "text": "I'm thinking about <https:\/\/zge.us.to\/dirconf.html> What if `cat`ing a directory rendered its contents as a structured file? First reaction: get rid of directories altogether. But it seems useful to firewall off different kinds of content from each other. Still, the file system could support treating files as dirs. It seems useful to have consistent lexical conventions spanning paths and code: '#' for comments; '.' for lookup; '\/' for metadata. E.g. to look up gitconfig: cat ~.conf.git.core.pager",
                "fallback": "Mastodon: Kartik Agaram (@akkartik@mastodon.social)",
                "thumb_url": "https:\/\/files.mastodon.social\/accounts\/avatars\/000\/255\/426\/original\/92e4e4f2f51a1701.png",
                "from_url": "https:\/\/mastodon.social\/@akkartik\/102893835264728821",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/mastodon.social\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/mastodon.social\/@akkartik\/102893835264728821"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qi9Px",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Random shower thought about hierarchical directories. Not as extreme as many ideas here, but still seems radical to a Unix weenie like myself.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mastodon.social\/@akkartik\/102893835264728821"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1570035745.132800",
        "client_msg_id": "d9a3ee31-8c06-4851-8860-1e3ee5720905",
        "text": "I suspect most programmers would prefer the react version simply because it looks less foreign.. all other advantages will sadly be secondary",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5P0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect most programmers would prefer the react version simply because it looks less foreign.. all other advantages will sadly be secondary"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1570037406.133100",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1570037573.000000"
        },
        "client_msg_id": "e50c4c4b-7250-42d6-87b8-51b7fa8d0371",
        "text": "Dirconf is an interesting idea; my first thought is that it's a peculiar way to implement a database. Also apparently not mentioned in the original article is that each record, however small (e.g. a single number), will take up ~4kb because of the file system block size, meaning that large configs could be thousands of times heavier than necessary.\n\nWhat format would this structured file be, and why not use that for your config directly? (And would this be an instance of the xkcd #927 problem?) Is there a reason to name the program that does this `cat` and not something else?\n\nIn my view, this is all poking at the problem of (a) serializing in-memory data structures, and (b) that serialized data is untyped. The end result is that everyone invents their own system for recreating structure and type. The fundamental problem being solved is that organized data needs to be shared, either between processes, between process invocations, or between entirely different machines. The same problems come up when processes communicate with pipes‚Äî one spits out text, and the other inverts the spitting-out process. In general, how do you cause a pattern of organized data like the one you currently have to appear in the memory of a computer program at different place and time?\n\nIn the system I am working on, which is (for the time being) less ambitious than an OS, there is no concept of a \"program\" as distinct from a function. You could make a self-contained \"piece of software\" which is then directly composable with other \"software\", and the medium of information exchange is in-memory data structures.\n\nIt would be nice if we could do something like this in an OS; send a data structure to another program\/invocation directly. Why are programs less composable than APIs? Why is it _exactly_ that the boundary between programs is not identical to the boundary between functions? Why _exactly_ do we serialize data across that boundary? Is that an unavoidable requirement? Could the OS make it transparent?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570035650.132600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "53pl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dirconf is an interesting idea; my first thought is that it's a peculiar way to implement a database. Also apparently not mentioned in the original article is that each record, however small (e.g. a single number), will take up ~4kb because of the file system block size, meaning that large configs could be thousands of times heavier than necessary.\n\nWhat format would this structured file be, and why not use that for your config directly? (And would this be an instance of the xkcd #927 problem?) Is there a reason to name the program that does this "
                            },
                            {
                                "type": "text",
                                "text": "cat",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and not something else?\n\nIn my view, this is all poking at the problem of (a) serializing in-memory data structures, and (b) that serialized data is untyped. The end result is that everyone invents their own system for recreating structure and type. The fundamental problem being solved is that organized data needs to be shared, either between processes, between process invocations, or between entirely different machines. The same problems come up when processes communicate with pipes‚Äî one spits out text, and the other inverts the spitting-out process. In general, how do you cause a pattern of organized data like the one you currently have to appear in the memory of a computer program at different place and time?\n\nIn the system I am working on, which is (for the time being) less ambitious than an OS, there is no concept of a \"program\" as distinct from a function. You could make a self-contained \"piece of software\" which is then directly composable with other \"software\", and the medium of information exchange is in-memory data structures.\n\nIt would be nice if we could do something like this in an OS; send a data structure to another program\/invocation directly. Why are programs less composable than APIs? Why is it "
                            },
                            {
                                "type": "text",
                                "text": "exactly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that the boundary between programs is not identical to the boundary between functions? Why "
                            },
                            {
                                "type": "text",
                                "text": "exactly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do we serialize data across that boundary? Is that an unavoidable requirement? Could the OS make it transparent?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1570038968.133400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1570039183.000000"
        },
        "client_msg_id": "5480c363-a1e6-4425-9005-5315cec6c4db",
        "text": "\"Less foreign\" is ambiguous ‚Äî They'll prefer the React version specifically because it has cultural momentum behind it. Recall, when React first blew up and people were seeing JSX for the first time, they lost their damn minds. It took a good while, a lot of Medium post advocacy, and more than a few Pete Hunt talks for people to get used to it.\n\nThe culture has proven itself capable of adopting new ideas about syntax. It just takes a force capable of moving cultural norms. Popular music is a great comparison to study, since there's a lot of big-money machinery designed to bend the norms to its whims (akin to Facebook\/Instagram in the React case), but it can also be moved by outsider individuals in the right place at the right time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZehF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Less foreign\" is ambiguous ‚Äî They'll prefer the React version specifically because it has cultural momentum behind it. Recall, when React first blew up and people were seeing JSX for the first time, they lost their damn minds. It took a good while, a lot of Medium post advocacy, and more than a few Pete Hunt talks for people to get used to it.\n\nThe culture has proven itself capable of adopting new ideas about syntax. It just takes a force capable of moving cultural norms. Popular music is a great comparison to study, since there's a lot of big-money machinery designed to bend the norms to its whims (akin to Facebook\/Instagram in the React case), but it can also be moved by outsider individuals in the right place at the right time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1570040005.133900",
        "client_msg_id": "1213507c-82db-43f9-bc93-7f411db1183c",
        "text": "Yes, new syntax can be adopted.. if other attributes are compelling enough. But you're starting one step behind. For every 1 story about new things being adopted you can probably find 100 being rejected.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ApX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, new syntax can be adopted.. if other attributes are compelling enough. But you're starting one step behind. For every 1 story about new things being adopted you can probably find 100 being rejected."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1570041734.134200",
        "client_msg_id": "8aaf9b7c-3510-4452-ad80-b5d228c0d665",
        "text": "I've fully implemented the 'dirconf' idea in Curv. It's used to represent Curv source files in general, and the Curv configuration file specifically. I don't require each each integer to occupy a separate file (occupying 4K on disk) as Tim said. Instead, there are several different Curv file formats. One format is a regular text file, \"*.curv\", containing a Curv expression. (You can think of Curv as JSON extended with function values, if that helps.) Another Curv source code file format is a directory, which is an alternative syntax for a Curv record expression. Each directory entry is interpreted as a record member. PNG image files are also Curv source files, typically occurring as members of a directory-style Curv source file, which is how I get raw binary image data into Curv source code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570035650.132600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m+2Pn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've fully implemented the 'dirconf' idea in Curv. It's used to represent Curv source files in general, and the Curv configuration file specifically. I don't require each each integer to occupy a separate file (occupying 4K on disk) as Tim said. Instead, there are several different Curv file formats. One format is a regular text file, \"*.curv\", containing a Curv expression. (You can think of Curv as JSON extended with function values, if that helps.) Another Curv source code file format is a directory, which is an alternative syntax for a Curv record expression. Each directory entry is interpreted as a record member. PNG image files are also Curv source files, typically occurring as members of a directory-style Curv source file, which is how I get raw binary image data into Curv source code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UDJ8A6RNH",
        "thread_ts": "1569966303.122400",
        "root": {
            "user": "UDJ8A6RNH",
            "type": "message",
            "ts": "1569966303.122400",
            "client_msg_id": "213b2be4-f4e3-4a72-9c48-c4d651381043",
            "text": "<https:\/\/www.youtube.com\/watch?v=MiiWzJE0fEA>",
            "team": "T5TCAFTA9",
            "thread_ts": "1569966303.122400",
            "reply_count": 2,
            "reply_users_count": 2,
            "latest_reply": "1570047702.134400",
            "reply_users": [
                "UFEQUBNNT",
                "UDJ8A6RNH"
            ],
            "replies": [
                {
                    "user": "UFEQUBNNT",
                    "ts": "1570031247.130900"
                },
                {
                    "user": "UDJ8A6RNH",
                    "ts": "1570047702.134400"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "YouTube",
                    "service_url": "https:\/\/www.youtube.com\/",
                    "title": "\"Probabilistic scripts for automating common-sense tasks\" by Alexander Lew",
                    "title_link": "https:\/\/www.youtube.com\/watch?v=MiiWzJE0fEA",
                    "author_name": "Strange Loop",
                    "author_link": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw",
                    "thumb_url": "https:\/\/i.ytimg.com\/vi\/MiiWzJE0fEA\/hqdefault.jpg",
                    "thumb_width": 480,
                    "thumb_height": 360,
                    "fallback": "YouTube Video: \"Probabilistic scripts for automating common-sense tasks\" by Alexander Lew",
                    "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/MiiWzJE0fEA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                    "video_html_width": 400,
                    "video_html_height": 225,
                    "from_url": "https:\/\/www.youtube.com\/watch?v=MiiWzJE0fEA",
                    "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                    "id": 1,
                    "original_url": "https:\/\/www.youtube.com\/watch?v=MiiWzJE0fEA"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "NAF",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "link",
                                    "url": "https:\/\/www.youtube.com\/watch?v=MiiWzJE0fEA"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1570047702.134400",
        "client_msg_id": "b15a387d-3a49-48b5-a113-7c6c6135e44c",
        "text": "No problem. The title is not as revealing as it could be haha. \"What if you could use the probabilistic model of reality encoded in the majority of a real-world dataset to automatically fix the minority made up of dirty records? and more...\"",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RirD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No problem. The title is not as revealing as it could be haha. \"What if you could use the probabilistic model of reality encoded in the majority of a real-world dataset to automatically fix the minority made up of dirty records? and more...\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1570055344.134700",
        "client_msg_id": "7285C2D8-4F74-4E34-ADF9-F7BED51AC6BE",
        "text": "i would definitely like to try Beads out‚Äîi‚Äôm camping until monday, though",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uy4Bc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i would definitely like to try Beads out‚Äîi‚Äôm camping until monday, though"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570055817.134900",
        "client_msg_id": "b3a292e0-46ec-4f6c-8010-43ffcfe5c7d7",
        "text": "In this particular example, of a program of only 750-1000 words, it is a hindrance to comprehension to split a task this small into 13 pieces. If you imagine a project times larger, 130 files would be very unwieldy. Of course there is a point at which one splits things into submodules, but having lots of teeny files is very much an obstacle to comprehension.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/VP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this particular example, of a program of only 750-1000 words, it is a hindrance to comprehension to split a task this small into 13 pieces. If you imagine a project times larger, 130 files would be very unwieldy. Of course there is a point at which one splits things into submodules, but having lots of teeny files is very much an obstacle to comprehension."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570056055.135100",
        "client_msg_id": "9bbf6899-fb99-4566-b8b6-96b59bf9050e",
        "text": "Very good points there, you are headed in the correct direction, as the UNIX concept that every device and system object is treated as a file, has been embedded as an assumption in people's thinking, and indeed an untyped stream of bytes is a pain in the rear. The whole recent history of JSON as the new data structure of choice for messaging is about preserving some structure across machine boundaries. Too bad JSON is a crude, very poorly defined data structuring system.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570035650.132600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YL\/RJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very good points there, you are headed in the correct direction, as the UNIX concept that every device and system object is treated as a file, has been embedded as an assumption in people's thinking, and indeed an untyped stream of bytes is a pain in the rear. The whole recent history of JSON as the new data structure of choice for messaging is about preserving some structure across machine boundaries. Too bad JSON is a crude, very poorly defined data structuring system."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570056741.135300",
        "client_msg_id": "7963498f-6749-4291-a965-852ecbdf5c30",
        "text": "Wouter has a good point that almost all new things are rejected. I have long observed that inertia is the most powerful force in the universe. Although it is common and ordinary practice to build JS projects with hundreds of NPM modules included, it also means that the final product will be unstable, and that nobody will fully understand it from top to bottom. I am a purist and expect people to understand the programs they write in their entirety, with no fuzzy gaps in understanding, and so few dependencies that the program can last for 50 years without modification. If you depend on 100 NPM modules which are being mutated by other people, sooner or later a breaking change will occur, and then debugging that mess will be a nightmare. The young punks programming today assume that what they build is disposable, so in a rush to build people are, not realizing that software lasts in companies for decades. Robustness seems to be an unsought quality today. I find myself constantly annoyed by the huge numbers of bugs in production software. Just testing this tiny web app, I encountered an intermittent failure of Safari to load the JS file. You report the bug to Apple, and nothing happens. These large code bases are out of control. Even with tens of thousands of engineers they fall way behind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/3dk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouter has a good point that almost all new things are rejected. I have long observed that inertia is the most powerful force in the universe. Although it is common and ordinary practice to build JS projects with hundreds of NPM modules included, it also means that the final product will be unstable, and that nobody will fully understand it from top to bottom. I am a purist and expect people to understand the programs they write in their entirety, with no fuzzy gaps in understanding, and so few dependencies that the program can last for 50 years without modification. If you depend on 100 NPM modules which are being mutated by other people, sooner or later a breaking change will occur, and then debugging that mess will be a nightmare. The young punks programming today assume that what they build is disposable, so in a rush to build people are, not realizing that software lasts in companies for decades. Robustness seems to be an unsought quality today. I find myself constantly annoyed by the huge numbers of bugs in production software. Just testing this tiny web app, I encountered an intermittent failure of Safari to load the JS file. You report the bug to Apple, and nothing happens. These large code bases are out of control. Even with tens of thousands of engineers they fall way behind."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P",
                    "UHWC9PXBL",
                    "U85HCL7JP",
                    "UC2A2ARPT"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1570059200.135700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1570078760.000000"
        },
        "client_msg_id": "e90b6af6-20cc-44ef-bb4a-ba889636b16a",
        "text": "<@U6FKVSVCK> At least for my original post, it was a thought experiment. Unix holds that everything should be a file. Plan 9 points out that not everything is a file in Unix, and takes it a bit further. OP takes that further still. What format should be native? It doesn't matter! Having a strong default that has native support seems worth trying.\n\nThere's an opposite and equally valuable set of thought experiments for exploring what happens when not everything is a file, and different things have distinct APIs.\n\n&gt; If there a reason to name this `cat`?\n\nBecause it uses just the syscalls `read()` and `write()`.\n\nEven if every int took up 4KB there's some use case where that's acceptable. However, in Linux, directories already inline files for the first 4KB to some number of inodes, IIRC. Also, one of the two ideas I alluded to was to use a single file for storage but allow reading inside it as if it were a directory. That doesn't have the storage inefficiency. But of course that was a lot to squeeze into 500 characters so nobody is expected to actually understand what I meant :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570035650.132600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=GO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " At least for my original post, it was a thought experiment. Unix holds that everything should be a file. Plan 9 points out that not everything is a file in Unix, and takes it a bit further. OP takes that further still. What format should be native? It doesn't matter! Having a strong default that has native support seems worth trying.\n\nThere's an opposite and equally valuable set of thought experiments for exploring what happens when not everything is a file, and different things have distinct APIs.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If there a reason to name this "
                            },
                            {
                                "type": "text",
                                "text": "cat",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nBecause it uses just the syscalls "
                            },
                            {
                                "type": "text",
                                "text": "read()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "write()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nEven if every int took up 4KB there's some use case where that's acceptable. However, in Linux, directories already inline files for the first 4KB to some number of inodes, IIRC. Also, one of the two ideas I alluded to was to use a single file for storage but allow reading inside it as if it were a directory. That doesn't have the storage inefficiency. But of course that was a lot to squeeze into 500 characters so nobody is expected to actually understand what I meant "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1570065117.136800",
        "client_msg_id": "BE609C9F-3198-426C-96CE-BE8148692FFD",
        "text": "i really like the array squared notation for 2d arrays",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7+wMs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i really like the array squared notation for 2d arrays"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1570065135.137300",
        "client_msg_id": "1F4CC39E-4597-4687-9A60-F91590CE238D",
        "text": "what does al mean in the context of the source?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sv0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what does al mean in the context of the source?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1570070550.137500",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1570070557.000000"
        },
        "client_msg_id": "12689e1a-611b-49a9-81bb-911b7f928a2e",
        "text": "The term \"al\" is short for aliquots, which is a term from chemistry formulae where it refers to its proportional share of available space.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qRfK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The term \"al\" is short for aliquots, which is a term from chemistry formulae where it refers to its proportional share of available space."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1570075836.139000",
        "client_msg_id": "F4EA64DE-082D-452E-886B-D6860889736B",
        "text": "don‚Äôt understand how it works yet but really love the idea of proportional representation being first class",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1570003136.129400",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LZlEs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "don‚Äôt understand how it works yet but really love the idea of proportional representation being first class"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]