[
    {
        "user": "UDRF3ALP4",
        "type": "message",
        "ts": "1698922406.115289",
        "client_msg_id": "554134ba-02d9-4745-aa6b-b9a37f00af90",
        "text": "<https:\/\/github.com\/gristlabs\/grist-core>\njust ran into this on HN. My hierarchy box is somewhat ticked through those relational dashboards",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cc11a4b410bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-16\/527084657030_cc11a4b410bd932425de_72.jpg",
            "first_name": "Gregor",
            "real_name": "Gregor",
            "display_name": "Gregor",
            "team": "T5TCAFTA9",
            "name": "gregorwbr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698505028.473819",
        "parent_user_id": "UDRF3ALP4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Q\/PC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/gristlabs\/grist-core"
                            },
                            {
                                "type": "text",
                                "text": "\njust ran into this on HN. My hierarchy box is somewhat ticked through those relational dashboards"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05CF6KLESV",
        "type": "message",
        "ts": "1698946058.130759",
        "client_msg_id": "e92e7f45-2695-43d3-b6f2-92054c6157a7",
        "text": "Hey folks! I'm doing some research into code formatters\/pretty printers, with a view to potentially building my own. Does any one have any examples of code formatters that they've found especially fast, or that they know of which have a special focus on performance?\n\nI'm interested in learning about some of the potential techniques at play - what sort of caching and parallelization is being done, are they doing incremental parsing like tree-sitter etc..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25ed978f2a92",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-12\/5403931675222_25ed978f2a92f81ad513_72.jpg",
            "first_name": "John",
            "real_name": "John Flockton",
            "display_name": "John Flockton",
            "team": "T5TCAFTA9",
            "name": "j.r.flockton",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "reply_count": 8,
        "reply_users_count": 6,
        "latest_reply": "1699286469.575499",
        "reply_users": [
            "UMQ6LR9NZ",
            "UGWUJUZHT",
            "U013ZLJARC7",
            "U05PESXCC2E",
            "U05UBCXHWM6",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UMQ6LR9NZ",
                "ts": "1698948550.423439"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1698949981.137379"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1698950019.085619"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1698950047.821629"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1698951140.164849"
            },
            {
                "user": "U05UBCXHWM6",
                "ts": "1698976049.102179"
            },
            {
                "user": "U05UBCXHWM6",
                "ts": "1698976118.992219"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1699286469.575499"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "obb4I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey folks! I'm doing some research into code formatters\/pretty printers, with a view to potentially building my own. Does any one have any examples of code formatters that they've found especially fast, or that they know of which have a special focus on performance?\n\nI'm interested in learning about some of the potential techniques at play - what sort of caching and parallelization is being done, are they doing incremental parsing like tree-sitter etc.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMQ6LR9NZ",
        "type": "message",
        "ts": "1698948550.423439",
        "client_msg_id": "4929935c-119e-4d87-a6db-c13c69c11e72",
        "text": "I’ve found <https:\/\/git.sr.ht\/~technomancy\/fnlfmt|fnlfmt>, for the fennel language really readable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf70d12f2630",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f70d12f2630b6c2a0854e3bef118e73c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Eli",
            "real_name": "Eli Mellen",
            "display_name": "Eli",
            "team": "T5TCAFTA9",
            "name": "eli.mellen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZVGmS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve found "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/git.sr.ht\/~technomancy\/fnlfmt",
                                "text": "fnlfmt"
                            },
                            {
                                "type": "text",
                                "text": ", for the fennel language really readable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1698949981.137379",
        "client_msg_id": "eb1671c4-09a8-4eb6-862d-9133b1ada296",
        "text": "FYI, maybe - I’m not interested in speed, and this might not apply. I note that Ohm-JS has a interactive parsing mode (I haven’t tried it).  I wonder if that means that one could attach semantics code (that’s the way that Ohm-JS is used) that does some formatting?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cgtP4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FYI, maybe - I’m not interested in speed, and this might not apply. I note that Ohm-JS has a interactive parsing mode (I haven’t tried it).  I wonder if that means that one could attach semantics code (that’s the way that Ohm-JS is used) that does some formatting?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1698950019.085619",
        "client_msg_id": "aa801d12-4c55-4a47-98c6-6c027c6e1f9d",
        "text": "[reply from John] Again, thanks! I’ll definitely take a look. Most of the formatter parsers I’ve looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI’m wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XZ5\/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[reply from John] Again, thanks! I’ll definitely take a look. Most of the formatter parsers I’ve looked at (e.g. Prettier, Gofmt), will create the AST of the full file, create an IR, and then do the formatting.\n\nI’m wondering if each of these steps can be streamed incrementally, and if you can do each operation in parallel.\n\nMy initial thought is, possibly, but not without some difficulties. For example, Prettier formats line breaks with some awareness of parent and subsequent sibling nodes in its IR)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1698950047.821629",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1698950112.000000"
        },
        "client_msg_id": "4afc926a-0171-446f-b23b-4070a445adb4",
        "text": "> This library implements a pretty expressive printer, following the algorithm presented in Porncharoenwase et al. (2023). The pretty printer is expressive, provably optimal, and practically efficient.\n<https:\/\/docs.racket-lang.org\/pretty-expressive\/index.html>\n\nFull paper here:\n<https:\/\/sorawee.github.io\/pretty-expressive-oopsla23-artifact\/full-paper.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7nDx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This library implements a pretty expressive printer, following the algorithm presented in "
                            },
                            {
                                "type": "text",
                                "text": "Porncharoenwase et al.",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "text",
                                "text": "2023",
                                "style": {
                                    "unlink": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). The pretty printer is expressive, provably optimal, and practically efficient."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/docs.racket-lang.org\/pretty-expressive\/index.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFull paper here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/sorawee.github.io\/pretty-expressive-oopsla23-artifact\/full-paper.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05CF6KLESV"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1698951140.164849",
        "client_msg_id": "f715af18-0f6b-4066-bb35-95416b66f8b4",
        "text": "I know that CodeMirror uses Lezer, which is capable of doing incremental parsing. <https:\/\/codemirror.net\/examples\/lang-package\/>\nIf you're not familiar with CodeMirror, it's a text-editor component that is highly customizable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EW6Tt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know that CodeMirror uses Lezer, which is capable of doing incremental parsing. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codemirror.net\/examples\/lang-package\/"
                            },
                            {
                                "type": "text",
                                "text": "\nIf you're not familiar with CodeMirror, it's a text-editor component that is highly customizable."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03B14DUZSA",
        "type": "message",
        "ts": "1698951237.344189",
        "client_msg_id": "6dffbf78-3241-44ce-9250-c795f0c7c329",
        "text": "Present object-oriented languages can be put into two categories: those without type systems and those with bad ones. This makes programming in the correct, interface focused style awkward: either interfaces are implicit, like in the original Smalltalk, or they are difficult to adhere to in a static system that limits subclassing. Solutions like f-bounded polymorphism and <https:\/\/www.researchgate.net\/profile\/Kim-Bruce-2\/publication\/221496196_Subtyping_Is_Not_a_Good_Match_for_Object-Oriented_Languages\/links\/09e415122545c6d7a4000000\/Subtyping-Is-Not-a-Good-Match-for-Object-Oriented-Languages.pdf|matching> never made it into industry languages due to the Java effect. Single inheritance makes it more difficult to take advantage of polymorphism, while most cases of multiple inheritance are poorly thought out and lack niceties like method combination. CLOS comes close [sic] but its multimethods probably add more complexity than they are worth.\n\nWhat I'm arguing here is that the problem with contemporary OO is that the languages and contexts it is used within do not engender good ways of \"object thinking\" (I recommend the book). Programmers often find it easier to revert to more primitive methods, or seek out new ones on the opposite end of the spectrum, than to fight against their tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7358a16bdea5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-02\/4314864832259_7358a16bdea535168748_72.png",
            "first_name": "Riley",
            "real_name": "Riley Stewart",
            "display_name": "Riley Stewart",
            "team": "T5TCAFTA9",
            "name": "me1307",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4D0BZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Present object-oriented languages can be put into two categories: those without type systems and those with bad ones. This makes programming in the correct, interface focused style awkward: either interfaces are implicit, like in the original Smalltalk, or they are difficult to adhere to in a static system that limits subclassing. Solutions like f-bounded polymorphism and "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.researchgate.net\/profile\/Kim-Bruce-2\/publication\/221496196_Subtyping_Is_Not_a_Good_Match_for_Object-Oriented_Languages\/links\/09e415122545c6d7a4000000\/Subtyping-Is-Not-a-Good-Match-for-Object-Oriented-Languages.pdf",
                                "text": "matching"
                            },
                            {
                                "type": "text",
                                "text": " never made it into industry languages due to the Java effect. Single inheritance makes it more difficult to take advantage of polymorphism, while most cases of multiple inheritance are poorly thought out and lack niceties like method combination. CLOS comes close [sic] but its multimethods probably add more complexity than they are worth.\n\nWhat I'm arguing here is that the problem with contemporary OO is that the languages and contexts it is used within do not engender good ways of \"object thinking\" (I recommend the book). Programmers often find it easier to revert to more primitive methods, or seek out new ones on the opposite end of the spectrum, than to fight against their tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05GSC0B4A0",
        "type": "message",
        "ts": "1698951830.152199",
        "client_msg_id": "129567d7-046f-4793-ba02-2910d55ea3be",
        "text": "You know...this thread has also kind of reminded me of this passage from <https:\/\/www.dreamsongs.com\/Files\/PatternsOfSoftware.pdf|Patterns of Software> by Richard Gabriel, which also gives another perspective\/answer to the original question\n\nPage 20, Abstraction Descant:\n_This implies that abstractions are best designed by experts. Worse, average programmers are not well-equipped to design abstractions that have universal usage, even though the programming languages used by average programmers and the programming language texts and courses average programmers read and attend to learn their trade emphasize the importance of doing exactly that. Although the designers of the programming language and the authors of texts and course instructors can probably design abstractions well, the intended audience of the language -- average programmers -- cannot and are therefore left out. That is, languages that encourage abstraction lead to less habitable software, because its expected inhabitants -- average programmers working on code years after the original designers have disappeared -- are not easily able to grasp, modify, and grow the abstraction-laden code they must work on._\n\n_Not everyone is a poet, but most anybody can write usable documentation for small programs—we don’t expect poets to do this work. Yet we seem to expect that the equivalent of poets will use high-level programming languages, because only program-poets are able to use them. In light of this observation, is it any wonder that abstraction-poor languages like C are by far the most popular and that abstraction-rich ones like Lisp and Smalltalk are niche languages?_",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g6366d8630c4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6366d8630c4e2394142efb0a9358fcc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "Scott",
            "real_name": "Scott",
            "display_name": "Scott",
            "team": "T5TCAFTA9",
            "name": "scott099",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698246162.762769",
        "parent_user_id": "U03LJBR6THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iypco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You know...this thread has also kind of reminded me of this passage from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.dreamsongs.com\/Files\/PatternsOfSoftware.pdf",
                                "text": "Patterns of Software"
                            },
                            {
                                "type": "text",
                                "text": " by Richard Gabriel, which also gives another perspective\/answer to the original question\n\nPage 20, Abstraction Descant:\n"
                            },
                            {
                                "type": "text",
                                "text": "This implies that abstractions are best designed by experts. Worse, average programmers are not well-equipped to design abstractions that have universal usage, even though the programming languages used by average programmers and the programming language texts and courses average programmers read and attend to learn their trade emphasize the importance of doing exactly that. Although the designers of the programming language and the authors of texts and course instructors can probably design abstractions well, the intended audience of the language -- average programmers -- cannot and are therefore left out. That is, languages that encourage abstraction lead to less habitable software, because its expected inhabitants -- average programmers working on code years after the original designers have disappeared -- are not easily able to grasp, modify, and grow the abstraction-laden code they must work on.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Not everyone is a poet, but most anybody can write usable documentation for small programs—we don’t expect poets to do this work. Yet we seem to expect that the equivalent of poets will use high-level programming languages, because only program-poets are able to use them. In light of this observation, is it any wonder that abstraction-poor languages like C are by far the most popular and that abstraction-rich ones like Lisp and Smalltalk are niche languages?",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03LJBR6THT",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1698953870.722339",
        "client_msg_id": "40b08455-77f1-4d16-952c-7fd386a5b3f0",
        "text": "Over the years, I've thought about different ways of creating an interactive tutorial about writing a simple programming language. For example, you can create a \"wizard\" style with next and back buttons, or you can create one single page with the code floating on the right side of the content (possibly sticky). One detail is that each example would grow in size (for the complete code), but would only focus on one sub-section. I thought about collapsing sections already covered, but being able to expand them, or just have a single button to expand all the hidden code. Has anyone had experience or have seen articles that use a \"build from small to large\", showing code along the way?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698953870.722339",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1699071750.186319",
        "reply_users": [
            "U05PESXCC2E",
            "UCUSW7WVD",
            "UMQ6LR9NZ",
            "ULM3U6275"
        ],
        "replies": [
            {
                "user": "U05PESXCC2E",
                "ts": "1698954014.969379"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1698955850.215729"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1698956227.101219"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1699019170.224539"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1699019255.775629"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1699029215.582359"
            },
            {
                "user": "UMQ6LR9NZ",
                "ts": "1699029503.243309"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1699029807.933159"
            },
            {
                "user": "ULM3U6275",
                "ts": "1699046564.258219"
            },
            {
                "user": "U05PESXCC2E",
                "ts": "1699071750.186319"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u56Ek",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Over the years, I've thought about different ways of creating an interactive tutorial about writing a simple programming language. For example, you can create a \"wizard\" style with next and back buttons, or you can create one single page with the code floating on the right side of the content (possibly sticky). One detail is that each example would grow in size (for the complete code), but would only focus on one sub-section. I thought about collapsing sections already covered, but being able to expand them, or just have a single button to expand all the hidden code. Has anyone had experience or have seen articles that use a \"build from small to large\", showing code along the way?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1698954014.969379",
        "client_msg_id": "e8a91322-f5d2-48e8-a41d-9f5d75f2d6bc",
        "text": "I realize it's a bit abstract. An example of \"paged\" tours wold be <https:\/\/go.dev\/tour\/welcome\/1>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVo0r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I realize it's a bit abstract. An example of \"paged\" tours wold be "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/go.dev\/tour\/welcome\/1"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1698955850.215729",
        "client_msg_id": "18e39718-3d19-43dc-b160-39c57e20f63b",
        "text": "I've always loved this walkthrough: <https:\/\/viewsourcecode.org\/snaptoken\/kilo|https:\/\/viewsourcecode.org\/snaptoken\/kilo>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KgRLJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've always loved this walkthrough: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/viewsourcecode.org\/snaptoken\/kilo",
                                "text": "https:\/\/viewsourcecode.org\/snaptoken\/kilo"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U05PESXCC2E"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1698956227.101219",
        "client_msg_id": "4d7b019b-a483-46e8-9635-75270fc00021",
        "text": "This looks like inline code (vs off to the side), and colored \"diffs\" to show the changes and also collapsed functions. I like it. Very visual.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698953870.722339",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RLUzx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks like inline code (vs off to the side), and colored \"diffs\" to show the changes and also collapsed functions. I like it. Very visual."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UBCXHWM6",
        "type": "message",
        "ts": "1698976049.102179",
        "client_msg_id": "3e56c856-1f4b-45b1-a2fa-f6b43cbbba5b",
        "text": "<https:\/\/tree-sitter.github.io\/tree-sitter\/|tree-sitter> is really fast, I don't know if anyone has built a formater for it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1beaa0968ce5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-23\/5937523466869_1beaa0968ce502c4375e_72.jpg",
            "first_name": "Arcade",
            "real_name": "Arcade Wise",
            "display_name": "Arcade Wise",
            "team": "T5TCAFTA9",
            "name": "arcade.b.wise",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b26rP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/tree-sitter.github.io\/tree-sitter\/",
                                "text": "tree-sitter"
                            },
                            {
                                "type": "text",
                                "text": " is really fast, I don't know if anyone has built a formater for it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UBCXHWM6",
        "type": "message",
        "ts": "1698976118.992219",
        "client_msg_id": "8c1630db-485c-475f-959e-1fe304956296",
        "text": "Looks like yes! <https:\/\/www.tweag.io\/blog\/2023-03-09-announcing-topiary\/|topiary> is a thing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1beaa0968ce5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-23\/5937523466869_1beaa0968ce502c4375e_72.jpg",
            "first_name": "Arcade",
            "real_name": "Arcade Wise",
            "display_name": "Arcade Wise",
            "team": "T5TCAFTA9",
            "name": "arcade.b.wise",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1698946058.130759",
        "parent_user_id": "U05CF6KLESV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WFMqc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like yes! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.tweag.io\/blog\/2023-03-09-announcing-topiary\/",
                                "text": "topiary"
                            },
                            {
                                "type": "text",
                                "text": " is a thing"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]