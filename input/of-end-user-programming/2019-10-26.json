[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1572125532.127500",
        "client_msg_id": "8F776DAD-BFB9-47C5-A91E-5A3F1C21C8F6",
        "text": "<@UCUSW7WVD> Hmm… not sure if we are on the same page then. For me, focusing on user experience means you need both classic and romantic — can’t have one without the other, but you need to get the priority right — that’s why I quoted that exact sentence in my tweet.\n\nI’m also thinking hard about your typing analogy in this context.\n\nThe motorcycle analogy in the book\/article assumes a divide between programmer and user. And the different mindsets make the distinction between classic and romantic possible. Part of that is that some “romantics” *don’t want to* know how to fix their motorcycle and are happy having somebody fix it for them. That notion is easy to overlook in the quest for making programming more accessible to more people. (Which we absolutely should, but…)\n\nShould we focus on expanding the mechanics of programming to include users, effectively teaching everybody how to type, perhaps by making it a little easier (that’s how I understand your typing analogy)?\n\nI’d much rather want to build better things that appeal to both types of people, classic and romantic; those who type because they like writing, the craft, wordsmithing perfect prose or poetry, but also those who just want to write a damn email to move their project forward — those who want to get stuff done that has nothing to do with typing, typing just happens to be the most convenient way for them to make progress.\n\nProgramming has proven to be great for one group and terrible for the other. I’m not convinced that programming will someday be like typing; that we can make it so easy that it becomes the most convenient way for everyone to take advantage of computation.\n\nThat’s why I have personally turned away from trying to invent a “better programming language” or a different (perhaps visual?) way to specify computation. Instead I like to think harder about what it is that people want to do with those computational powers we have access to and they don’t. And how we can generalize those things to enable more people to take advantage of computation. Just like everybody today can take advantage of typing. But the mechanics of typing are not the important part.\n\nI’m struggling to convey what I mean, and I realize that it might be hard to see the difference there. But I fundamentally believe it’s that difference which is what Alan Kay means when he talks about the computer revolution that still hasn’t happened. Or Bret Victor when he feels misunderstood when people ask him about his _Inventing on Principle_ programming system demos that were just supposed to be a specific example for making a much larger point. Or what Michael Nielsen and Andy Matuschak explore when pushing the limits of what a website can do to help you learn something. These are all excellent, dare I say even legendary programmers, but that’s not the point. They use that skill to get somewhere else.\n\nAfter all it doesn’t matter that today everybody can _type_, _what_ they type matters. And tomorrow it shouldn’t matter if everybody can _program_, what they put computation to use should matter. \nHow they put that computation to use is an open question which I believe has more answers than just “programming” — to get there, however, we need programming, and much better and easier ways to do it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572002424.061800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6IGBS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Hmm… not sure if we are on the same page then. For me, focusing on user experience means you need both classic and romantic — can’t have one without the other, but you need to get the priority right — that’s why I quoted that exact sentence in my tweet.\n\nI’m also thinking hard about your typing analogy in this context.\n\nThe motorcycle analogy in the book\/article assumes a divide between programmer and user. And the different mindsets make the distinction between classic and romantic possible. Part of that is that some “romantics” "
                            },
                            {
                                "type": "text",
                                "text": "don’t want to",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " know how to fix their motorcycle and are happy having somebody fix it for them. That notion is easy to overlook in the quest for making programming more accessible to more people. (Which we absolutely should, but…)\n\nShould we focus on expanding the mechanics of programming to include users, effectively teaching everybody how to type, perhaps by making it a little easier (that’s how I understand your typing analogy)?\n\nI’d much rather want to build better things that appeal to both types of people, classic and romantic; those who type because they like writing, the craft, wordsmithing perfect prose or poetry, but also those who just want to write a damn email to move their project forward — those who want to get stuff done that has nothing to do with typing, typing just happens to be the most convenient way for them to make progress.\n\nProgramming has proven to be great for one group and terrible for the other. I’m not convinced that programming will someday be like typing; that we can make it so easy that it becomes the most convenient way for everyone to take advantage of computation.\n\nThat’s why I have personally turned away from trying to invent a “better programming language” or a different (perhaps visual?) way to specify computation. Instead I like to think harder about what it is that people want to do with those computational powers we have access to and they don’t. And how we can generalize those things to enable more people to take advantage of computation. Just like everybody today can take advantage of typing. But the mechanics of typing are not the important part.\n\nI’m struggling to convey what I mean, and I realize that it might be hard to see the difference there. But I fundamentally believe it’s that difference which is what Alan Kay means when he talks about the computer revolution that still hasn’t happened. Or Bret Victor when he feels misunderstood when people ask him about his "
                            },
                            {
                                "type": "text",
                                "text": "Inventing on Principle",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming system demos that were just supposed to be a specific example for making a much larger point. Or what Michael Nielsen and Andy Matuschak explore when pushing the limits of what a website can do to help you learn something. These are all excellent, dare I say even legendary programmers, but that’s not the point. They use that skill to get somewhere else.\n\nAfter all it doesn’t matter that today everybody can "
                            },
                            {
                                "type": "text",
                                "text": "type",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " they type matters. And tomorrow it shouldn’t matter if everybody can "
                            },
                            {
                                "type": "text",
                                "text": "program",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", what they put computation to use should matter. \nHow they put that computation to use is an open question which I believe has more answers than just “programming” — to get there, however, we need programming, and much better and easier ways to do it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1572126559.127700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1572447451.000000"
        },
        "client_msg_id": "3fe706d6-21ce-4268-a33d-75ec73bc36c0",
        "text": "Yes, there's a divide here. And yes, you're on the side with Alan Kay and Bret Victor on it :smile:\n\nNo point thinking hard about analogies. Mine was intended just as an existence proof that not all fields get specialized away. Some disappear by diffusing into the pool of generalist activities. Beyond that, analogies will never persuade anyone and they shouldn't.\n\nSo setting analogies aside, here's the argument I see:\n\n* We all want people to be able to write more sophisticated programs.\n* All programs tend to grow more complex with usage. Not even great programmers can avoid this trajectory, it seems.\n* Managing increasing complexity requires design sense, a certain taste, and that requires accumulating some scar tissue. There are rules of thumb to be aware of, and also an essential humility about how easily the simplest of problems can explode. Probably other things. But most importantly, you can't learn them until you've experienced some failure.\n\nTo me the conclusion seems ironclad: we have to figure out how to get people on the trajectory of learning about design and architecture.\n\nWhich piece of this puzzle has wiggle-room for a different conclusion? I think Victor and Kay are focusing on just the next step but not attending to where it leads.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572002424.061800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IME9k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, there's a divide here. And yes, you're on the side with Alan Kay and Bret Victor on it "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNo point thinking hard about analogies. Mine was intended just as an existence proof that not all fields get specialized away. Some disappear by diffusing into the pool of generalist activities. Beyond that, analogies will never persuade anyone and they shouldn't.\n\nSo setting analogies aside, here's the argument I see:\n\n* We all want people to be able to write more sophisticated programs.\n* All programs tend to grow more complex with usage. Not even great programmers can avoid this trajectory, it seems.\n* Managing increasing complexity requires design sense, a certain taste, and that requires accumulating some scar tissue. There are rules of thumb to be aware of, and also an essential humility about how easily the simplest of problems can explode. Probably other things. But most importantly, you can't learn them until you've experienced some failure.\n\nTo me the conclusion seems ironclad: we have to figure out how to get people on the trajectory of learning about design and architecture.\n\nWhich piece of this puzzle has wiggle-room for a different conclusion? I think Victor and Kay are focusing on just the next step but not attending to where it leads."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1572127160.131100",
        "client_msg_id": "25F2704C-7AB3-4E2D-8F43-40E94DBC9DB0",
        "text": "<@UCUSW7WVD> Design sense, yes! It’s late here and I should be sleeping, but these are words I should have used. Thank you.\n\n&gt;Which piece of this puzzle has wiggle-room for a different conclusion? I think Victor and Kay are focusing on just the next step but not attending to where it leads.\n\nCan you elaborate on that? I’m not sure I’m following. Again, it’s late here (so also please take your time, I’m going to sleep now. ;-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1572002424.061800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qE\/6B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Design sense, yes! It’s late here and I should be sleeping, but these are words I should have used. Thank you.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which piece of this puzzle has wiggle-room for a different conclusion? I think Victor and Kay are focusing on just the next step but not attending to where it leads."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nCan you elaborate on that? I’m not sure I’m following. Again, it’s late here (so also please take your time, I’m going to sleep now. ;-)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]