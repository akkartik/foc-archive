[
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1573916048.452200",
        "client_msg_id": "6f82e5ac-de7d-4f6f-b161-4937652134a9",
        "text": "<@U5STGTB3J>\nYeah, I deal with a large number of edge - I’m trying to stay flexible with the data model and give the possibility to extend  my “editor” with custom models.\n\nI was thinking of a graph database but wanted a temporary in-memory solution so I made this, now I’m wondering if there’s similar solutions I can look up because I find it quite good to use.\n\nMy usecase, for example:\n\nYou define a model for your database, by let’s say, using graphql:\n\n```\ntype User{\n id: ID!,\nemail: String,\n   name: String,\n   post: Post\n}\ntype Post {\n  id: ID!\n  content: String\n}\n```\nIt’s saved in:  Types set (I call them dimensions, gives more context, hope you don’t mind) as User, Post and the same elements in graphql dimension have relationships to their properties which, when in type dimension are connected to String, ID, etc…\n\nNow, let’s say I wanna create a postgresql database - I just create the postgresql dimension from Graphql dimension and have the scheme generated by using transformations from graphql-postgres dimension.\nThen in, let’s say, kotlin backend dimension, I can generate my backend Kotlin entities, queries and etc by just creating a Kotlin backend dimension and automatically having it filled out by having transformation rules applied (graphql-kotlin backend transformation) - and when I update a definition in the graphql dimension, the changes can be propagated across all sets and say “hey, this update broke this” and automatically have changes applied.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "\nYeah, I deal with a large number of edge - I’m trying to stay flexible with the data model and give the possibility to extend  my “editor” with custom models.\n\nI was thinking of a graph database but wanted a temporary in-memory solution so I made this, now I’m wondering if there’s similar solutions I can look up because I find it quite good to use.\n\nMy usecase, for example:\n\nYou define a model for your database, by let’s say, using graphql:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "type User{\n id: ID!,\nemail: String,\n   name: String,\n   post: Post\n}\ntype Post {\n  id: ID!\n  content: String\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s saved in:  Types set (I call them dimensions, gives more context, hope you don’t mind) as User, Post and the same elements in graphql dimension have relationships to their properties which, when in type dimension are connected to String, ID, etc…\n\nNow, let’s say I wanna create a postgresql database - I just create the postgresql dimension from Graphql dimension and have the scheme generated by using transformations from graphql-postgres dimension.\nThen in, let’s say, kotlin backend dimension, I can generate my backend Kotlin entities, queries and etc by just creating a Kotlin backend dimension and automatically having it filled out by having transformation rules applied (graphql-kotlin backend transformation) - and when I update a definition in the graphql dimension, the changes can be propagated across all sets and say “hey, this update broke this” and automatically have changes applied."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1573919807.454200",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1573919927.000000"
        },
        "client_msg_id": "6146192a-ed28-4c3e-ae80-86cf25bb23f8",
        "text": "I am still thinking about the “Visual DSL” based testing. What I think atm is that Dependent Typed languages will enable that very easily, but in anything “below” DT it won’t be easy to implement.\n\n“On the fly”, logical checking of related things is needed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qzs3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am still thinking about the “Visual DSL” based testing. What I think atm is that Dependent Typed languages will enable that very easily, but in anything “below” DT it won’t be easy to implement.\n\n“On the fly”, logical checking of related things is needed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1573921609.454600",
        "client_msg_id": "c70bf292-624d-4c10-9289-2d3ebfa05019",
        "text": "Thanks for the responses, what I have found is Dependent Types are needed for my use case",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573746680.364400",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y\/k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the responses, what I have found is Dependent Types are needed for my use case"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1573925494.455000",
        "client_msg_id": "d77d2fca-1b4c-45a1-9309-57591192ff7a",
        "text": "<https:\/\/twitter.com\/TimSweeneyEpic\/status\/1195743672899383296?s=09>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "reply_count": 12,
        "reply_users_count": 7,
        "latest_reply": "1574076235.000300",
        "reply_users": [
            "UHWC9PXBL",
            "UE6EFEPTQ",
            "UCGAK10LS",
            "U8A5MS6R1",
            "U6KQ2S410",
            "ULM3U6275",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "UHWC9PXBL",
                "ts": "1573947685.471000"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1573947787.472600"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1573947885.472800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1573949550.475100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1573955049.487200"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1573969861.487900"
            },
            {
                "user": "U6KQ2S410",
                "ts": "1574010343.489000"
            },
            {
                "user": "ULM3U6275",
                "ts": "1574039322.496000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1574040972.496400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1574065184.499600"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1574067112.499900"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1574076235.000300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/TimSweeneyEpic|@TimSweeneyEpic>: There are really only two types of computations: calculating stuff about an unchanging thing, and calculating a new version of a thing that is changing over time. Recognizing this simplified debate about functional versus imperative programming.",
                "ts": 1573922482,
                "author_name": "Tim Sweeney",
                "author_link": "https:\/\/twitter.com\/TimSweeneyEpic\/status\/1195743672899383296",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/795819168629198849\/SBY3ARvZ_normal.jpg",
                "author_subname": "@TimSweeneyEpic",
                "text": "There are really only two types of computations: calculating stuff about an unchanging thing, and calculating a new version of a thing that is changing over time. Recognizing this simplified debate about functional versus imperative programming.",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/TimSweeneyEpic\/status\/1195743672899383296?s=09",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/TimSweeneyEpic\/status\/1195743672899383296?s=09",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ezWK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/TimSweeneyEpic\/status\/1195743672899383296?s=09"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UJVEPCVT6",
                    "UKP3B2J5D"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947308.464300",
        "client_msg_id": "633A9E3B-4F0C-4F46-BD88-887033970D05",
        "text": "this sounds similar to datomic, fulcro\/pathos, and materialized views in apache samza. links incoming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcVEJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this sounds similar to datomic, fulcro\/pathos, and materialized views in apache samza. links incoming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947330.464600",
        "client_msg_id": "DAEBED3B-EA54-4C02-AD15-CCBFD6C4D524",
        "text": "<https:\/\/youtu.be\/fU9hR3kiOK0>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "\"Turning the database inside out with Apache Samza\" by Martin Kleppmann",
                "title_link": "https:\/\/youtu.be\/fU9hR3kiOK0",
                "author_name": "Strange Loop",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC_QIfHvN9auy2CoOdSfMWDw",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/fU9hR3kiOK0\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: \"Turning the database inside out with Apache Samza\" by Martin Kleppmann",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/fU9hR3kiOK0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/fU9hR3kiOK0",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/fU9hR3kiOK0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cTXM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/fU9hR3kiOK0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947354.465100",
        "client_msg_id": "009E8527-4B97-4073-B1D4-25D6BD39610F",
        "text": "<https:\/\/youtu.be\/yyVKf2U8YVg> &lt;— closest",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Scaling Full-Stack Applications - Wilker Lucio da Silva",
                "title_link": "https:\/\/youtu.be\/yyVKf2U8YVg",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/user\/ClojureTV",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/yyVKf2U8YVg\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Scaling Full-Stack Applications - Wilker Lucio da Silva",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/yyVKf2U8YVg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/yyVKf2U8YVg",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/yyVKf2U8YVg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "79iMJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/yyVKf2U8YVg"
                            },
                            {
                                "type": "text",
                                "text": " <— closest"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947383.465500",
        "client_msg_id": "5216E68E-C0DE-4051-BB3B-43614E34C37D",
        "text": "<https:\/\/youtu.be\/Pz_NvY1kw6I>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "The Design of Datomic - Rich Hickey",
                "title_link": "https:\/\/youtu.be\/Pz_NvY1kw6I",
                "author_name": "Zhang Jian",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCqbkjqnDE5zWY3f453mlBIA",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/Pz_NvY1kw6I\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The Design of Datomic - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/Pz_NvY1kw6I?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/youtu.be\/Pz_NvY1kw6I",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/Pz_NvY1kw6I"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e3xI2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/Pz_NvY1kw6I"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947420.466800",
        "client_msg_id": "6D4B07EF-55B4-4406-B2E4-216E5E07774B",
        "text": "i am really interested in this work on both the db level and the frontend level so i’m excited to hear more about your implementation!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eAco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i am really interested in this work on both the db level and the frontend level so i’m excited to hear more about your implementation!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573947685.471000",
        "client_msg_id": "8F4F18B2-ED53-42D1-A3CC-AB28C6830392",
        "text": "interesting language mentioned in the replies: <https:\/\/github.com\/mrakgr\/The-Spiral-Language\/blob\/master\/readme.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NDtup",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interesting language mentioned in the replies: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mrakgr\/The-Spiral-Language\/blob\/master\/readme.md"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1573947787.472600",
        "client_msg_id": "45e72ac0-0f52-4ff7-92fe-72b7ae51ab39",
        "text": "I can't see how the second is imperative programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ST7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can't see how the second is imperative programming"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1573947885.472800",
        "client_msg_id": "d3026537-dcc9-4f1a-bfac-464714090a28",
        "text": "having state != imperative",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DQDGg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "having state != imperative"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1573949550.475100",
        "client_msg_id": "09B21AD5-5415-48F7-9740-12CBBA7CCC28",
        "text": "Tim isn’t associating those two types of computation with the two paradigms, he’s saying that this framing of computations is a better context for a discussion about functional vs imperative styles.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y8U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tim isn’t associating those two types of computation with the two paradigms, he’s saying that this framing of computations is a better context for a discussion about functional vs imperative styles."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1573949858.477900",
        "client_msg_id": "35D84471-11F2-4F4E-902A-A840BAB96F6D",
        "text": "<https:\/\/github.com\/mrakgr\/The-Spiral-Language\/blob\/master\/readme.md> this is going to take a while for me to get through but it seems extremely unique and also cool",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573949858.477900",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1574203626.076600",
        "reply_users": [
            "UJN1TAYEQ",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1574013454.489500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1574020345.489700"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1574020936.489900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1574043424.496600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1574203610.075900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1574203626.076600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4K4su",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/mrakgr\/The-Spiral-Language\/blob\/master\/readme.md"
                            },
                            {
                                "type": "text",
                                "text": " this is going to take a while for me to get through but it seems extremely unique and also cool"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1573955049.487200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1573955128.000000"
        },
        "client_msg_id": "3FFF37D2-0E38-4DB0-9907-EFFC81C579E4",
        "text": "The distinction between calculating an entirely new thing and a new version of an old thing is one that I think every language needs to account for, and I’m not yet aware of a language that makes the distinction and offers an ergonomic solution to each of the two cases. You need something better than naïve imperative instructions to describe changing data, but it’s not as simple as FP with monads. The problem with FP updates is always (as Tim says) the tree structure that immutable data is normally organised into, and the hacks needed to describe cross-links. <@U6KQ2S410> what’s your take on this? I think I need to revisit your and Sean McDirmid’s work on Managed Time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cZWZ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The distinction between calculating an entirely new thing and a new version of an old thing is one that I think every language needs to account for, and I’m not yet aware of a language that makes the distinction and offers an ergonomic solution to each of the two cases. You need something better than naïve imperative instructions to describe changing data, but it’s not as simple as FP with monads. The problem with FP updates is always (as Tim says) the tree structure that immutable data is normally organised into, and the hacks needed to describe cross-links. "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " what’s your take on this? I think I need to revisit your and Sean McDirmid’s work on Managed Time."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1573969861.487900",
        "client_msg_id": "cd81c6d0-b4ee-4f4f-bb93-0299dd5ba58c",
        "text": "Agree with much of what <@UCGAK10LS> said above. The new value of an old thing is something I just call 'identity'. It's everywhere in OO but has to be hand created in FP. However there is no consistency model in OO and objects are just mutated destructively (in place) and willy nilly. I feel managed time has a lot to offer, e.g. by introducing some notion of consistency: create a new version from an old version but preserve identity. (This is all armchair hand waving.. but I do find all the managed time ideas very appealing.) Jonathan Edward and Sean McDirmid's paper links back to some of them (<https:\/\/www.microsoft.com\/en-us\/research\/publication\/programming-with-managed-time\/>). One of the oldest attempts perhaps is David Reeds thesis (NAMOS). Related I'll also link Alan Kay's blurb on Quora that goes into similar ideas: <https:\/\/www.quora.com\/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it\/answer\/Alan-Kay-11>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "Microsoft Research",
                "title": "Programming with Managed Time - Microsoft Research",
                "title_link": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/programming-with-managed-time\/",
                "text": "Most languages expose the computer’s ability to globally read and write memory at any time. Programmers must then choreograph control flow so all reads and writes occur in correct relative orders, which can be difficult particularly when dealing with initialization, reactivity, and concurrency. Just as many languages now manage memory to unburden us from properly …",
                "fallback": "Microsoft Research: Programming with Managed Time - Microsoft Research",
                "thumb_url": "https:\/\/www.microsoft.com\/en-us\/research\/uploads\/prod\/2018\/11\/Automated_Hero_Image_MSR_Social_11_2018_1200x627.png",
                "from_url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/programming-with-managed-time\/",
                "thumb_width": 1200,
                "thumb_height": 627,
                "service_icon": "https:\/\/www.microsoft.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/programming-with-managed-time\/"
            },
            {
                "title": "Alan Kay's answer to Why is functional programming seen as the opposite of OOP rather than an addition to it? - Quora",
                "title_link": "https:\/\/www.quora.com\/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it\/answer\/Alan-Kay-11",
                "text": "I hope for all our sakes that I can make this short … In the latter part of the 50s John McCarthy got more and more interested in what he started to call “Artificial Intelligence”. He was also doing some consulting and this brought him in contact...",
                "fallback": "Alan Kay's answer to Why is functional programming seen as the opposite of OOP rather than an addition to it? - Quora",
                "from_url": "https:\/\/www.quora.com\/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it\/answer\/Alan-Kay-11",
                "service_icon": "https:\/\/www.quora.com\/favicon.ico",
                "service_name": "quora.com",
                "id": 2,
                "original_url": "https:\/\/www.quora.com\/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it\/answer\/Alan-Kay-11"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xa=go",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agree with much of what "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " said above. The new value of an old thing is something I just call 'identity'. It's everywhere in OO but has to be hand created in FP. However there is no consistency model in OO and objects are just mutated destructively (in place) and willy nilly. I feel managed time has a lot to offer, e.g. by introducing some notion of consistency: create a new version from an old version but preserve identity. (This is all armchair hand waving.. but I do find all the managed time ideas very appealing.) Jonathan Edward and Sean McDirmid's paper links back to some of them ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.microsoft.com\/en-us\/research\/publication\/programming-with-managed-time\/"
                            },
                            {
                                "type": "text",
                                "text": "). One of the oldest attempts perhaps is David Reeds thesis (NAMOS). Related I'll also link Alan Kay's blurb on Quora that goes into similar ideas: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.quora.com\/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it\/answer\/Alan-Kay-11"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    }
]