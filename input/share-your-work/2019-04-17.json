[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1555484535.015900",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1555484632.000000"
        },
        "client_msg_id": "bc106e33-95a5-4545-87e3-e497342a7914",
        "text": "Dear Lucian, you made some good suggestions, but you didn't ask for hardly anything big. Kinda like a kid asking for a candy bar for xmas instead of wishing for a nice new red bicycle with all the extras... why not ask for a toolchain where you can write with almost no branching?, and where most of the code goes straight down (the easiest kind of code to handle), and an environment where the total number of API's that you use on a regular basis numbers in the dozens, instead of thousands? You forgot the greatest wish of all, which is to have support for that phase where you product has shipped to your millions of active users, and you have a way of recreating each and every user bug report so that the product converges towards zero bugs, instead of hovering at hundreds of thousands of \"not reproducible\" bugs like there are in the Apple, Adobe, and Microsoft bug databases!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555418947.006700",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IZ5+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dear Lucian, you made some good suggestions, but you didn't ask for hardly anything big. Kinda like a kid asking for a candy bar for xmas instead of wishing for a nice new red bicycle with all the extras... why not ask for a toolchain where you can write with almost no branching?, and where most of the code goes straight down (the easiest kind of code to handle), and an environment where the total number of API's that you use on a regular basis numbers in the dozens, instead of thousands? You forgot the greatest wish of all, which is to have support for that phase where you product has shipped to your millions of active users, and you have a way of recreating each and every user bug report so that the product converges towards zero bugs, instead of hovering at hundreds of thousands of \"not reproducible\" bugs like there are in the Apple, Adobe, and Microsoft bug databases!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1555490519.016300",
        "client_msg_id": "9ca3cd99-7392-43e4-8ca1-bc70a265ae5e",
        "text": "The Law of Demeter has been around for a _very_ long time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555272961.002600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G\/5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Law of Demeter has been around for a "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " long time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1555490670.016500",
        "client_msg_id": "175302d8-2953-4b11-9129-a27440da32b9",
        "text": "If I'm understanding you correctly you're saying that `person.getAddress().getCountry()` is \"easy\" whereas `person.getAddressCountry()` is \"simple\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555272961.002600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "su1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I'm understanding you correctly you're saying that "
                            },
                            {
                                "type": "text",
                                "text": "person.getAddress().getCountry()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is \"easy\" whereas "
                            },
                            {
                                "type": "text",
                                "text": "person.getAddressCountry()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is \"simple\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1555490848.016700",
        "client_msg_id": "650e107a-d72f-41aa-b17e-1c0ce6b3a45c",
        "text": "<@UF5PAGQQ4>, oops, I didn’t mean the use that word, as you probably realised :smile:\n\nOk, after reading your answers, I realise that this slack is not the intended audience. I agree with your suggestions, but I want to implement the tooling I talked about for two existing languages: Haskell and PureScript. That makes some of these ideas impossible.\n\nIn the long run, I also want the things you mentioned, but until then I want to improve the development experience for a language that already exists and has an ecosystem. Having said that, I want to address some of the things you mentioned.\n\n<@UAL7940NM>, regarding invalid states, I was thinking of allowing a scratch pad where you can simply paste text. Other than that, the operations that I see on the AST are: adding a node, deleting it, moving it around and transforming it into a different node. The last one seems trickiest. I have in mind an interface similar to Vim input mode. Combine this with the fact that each Haskell declaration has a keyword, so you can write the keyword and press TAB (snippets style) and the form to add that specific declaration emerges. I haven’t given this a lot of thought, so the details are hazy.\n\nI agree with what you said about compilation. As I said, I want to build this tooling for Haskell and PureScript. I already knew about Lambdu and Unison from your list.\n\n<@UH84GQ3CZ>, I’ll have to think more about what you said regarding the semantics. this part is not clear to me either.\n\nthank you all for your feedback!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555418947.006700",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MYZt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF5PAGQQ4"
                            },
                            {
                                "type": "text",
                                "text": ", oops, I didn’t mean the use that word, as you probably realised "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOk, after reading your answers, I realise that this slack is not the intended audience. I agree with your suggestions, but I want to implement the tooling I talked about for two existing languages: Haskell and PureScript. That makes some of these ideas impossible.\n\nIn the long run, I also want the things you mentioned, but until then I want to improve the development experience for a language that already exists and has an ecosystem. Having said that, I want to address some of the things you mentioned.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": ", regarding invalid states, I was thinking of allowing a scratch pad where you can simply paste text. Other than that, the operations that I see on the AST are: adding a node, deleting it, moving it around and transforming it into a different node. The last one seems trickiest. I have in mind an interface similar to Vim input mode. Combine this with the fact that each Haskell declaration has a keyword, so you can write the keyword and press TAB (snippets style) and the form to add that specific declaration emerges. I haven’t given this a lot of thought, so the details are hazy.\n\nI agree with what you said about compilation. As I said, I want to build this tooling for Haskell and PureScript. I already knew about Lambdu and Unison from your list.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UH84GQ3CZ"
                            },
                            {
                                "type": "text",
                                "text": ", I’ll have to think more about what you said regarding the semantics. this part is not clear to me either.\n\nthank you all for your feedback!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1555498669.016900",
        "client_msg_id": "82cc9f2e-4585-487b-b383-cec07839ea39",
        "text": "<@UDQKHNP51> I'm sure this slack is the right audience for what you're planning to do. There's the \"think big\" approach of starting from scratch and more incremental approaches like improving the tooling for an existing language. To me, all of them are equally interesting and fit into this slack. \"my thoughts on the ideal development toolset\" in your original post made me think that you're trying to \"think big\" and under that assumption, your suggestions seemed \"conservative\" (which is the gist of Edward's feedback as well). Knowing that your goal is to be compatible with existing programming languages changes the perspective.\nPlease keep posting about your work here :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555418947.006700",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VQ+5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQKHNP51"
                            },
                            {
                                "type": "text",
                                "text": " I'm sure this slack is the right audience for what you're planning to do. There's the \"think big\" approach of starting from scratch and more incremental approaches like improving the tooling for an existing language. To me, all of them are equally interesting and fit into this slack. \"my thoughts on the ideal development toolset\" in your original post made me think that you're trying to \"think big\" and under that assumption, your suggestions seemed \"conservative\" (which is the gist of Edward's feedback as well). Knowing that your goal is to be compatible with existing programming languages changes the perspective.\nPlease keep posting about your work here "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQKHNP51",
        "type": "message",
        "ts": "1555501676.017100",
        "client_msg_id": "e48ded29-e753-4284-b220-a33620d35d0b",
        "text": "thank you, <@UAL7940NM> :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3074e1515db",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b3074e1515db1a3d79acf5d954eac0d1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Lucian Ursu",
            "display_name": "elbear",
            "team": "T5TCAFTA9",
            "name": "lucian.ursu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555418947.006700",
        "parent_user_id": "UDQKHNP51",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w6dE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thank you, "
                            },
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1555534516.018500",
        "client_msg_id": "7A5AC0C4-490B-4D0E-B06C-87CC7A7A7143",
        "text": "Thanks the feedback David. Currently working on a much more thorough version but it’s a lot of research — might take some time. Any good resources you can point me too? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554856834.014200",
        "parent_user_id": "U85MWBKEY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bGi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks the feedback David. Currently working on a much more thorough version but it’s a lot of research — might take some time. Any good resources you can point me too?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1555538049.022500",
        "client_msg_id": "736A88D1-B164-4EF3-9916-A2C698DA346A",
        "text": "heh, I meant older than that phase of the Rails community. :)\n\nThe original challenge was to find two code examples that were on opposite ends of both the complexity and ease spectrums. So the first is easy\/complex and the second is hard\/simple. My argument about ease was just that most IDEs could auto-complete the dot syntax, whereas a bare function wasn’t typically as discoverable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555272961.002600",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DFYt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "heh, I meant older than that phase of the Rails community. :)\n\nThe original challenge was to find two code examples that were on opposite ends of both the complexity and ease spectrums. So the first is easy\/complex and the second is hard\/simple. My argument about ease was just that most IDEs could auto-complete the dot syntax, whereas a bare function wasn’t typically as discoverable."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]