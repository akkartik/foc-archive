[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1684051393.968619",
        "client_msg_id": "9fe45ee0-3c43-4972-9fa6-c7c90f2047ad",
        "text": "The idea that visual cues set the context for perception and thinking has been around for a long time in various settings, but it seems that it doesn't have a name. Outside of tech, there's \"broken windows\", but also \"dress for the job the want, not the one you have\". Mental visualization as a technique for achieving goals plays a big role in Neuro-Linguistic Programming. And some ideas of Feng Shui go in the same direction, though I am careful here because all I know about Feng Shui comes from a single conversation with an expert practitioner.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RC6v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The idea that visual cues set the context for perception and thinking has been around for a long time in various settings, but it seems that it doesn't have a name. Outside of tech, there's \"broken windows\", but also \"dress for the job the want, not the one you have\". Mental visualization as a technique for achieving goals plays a big role in Neuro-Linguistic Programming. And some ideas of Feng Shui go in the same direction, though I am careful here because all I know about Feng Shui comes from a single conversation with an expert practitioner."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04KZ8A9WCT",
                    "UGWUJUZHT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1684063438.955869",
        "client_msg_id": "0cf9c661-6ac0-4105-973a-3a11cafde84d",
        "text": "Yes, riffing on Konrad’s note, I would add phrases such as “language affects thought”, “a picture is worth a thousand words”, etc.\n\nI conjecture that purveyors of statically-typed, textual languages “see” structure “in their heads”, but feel forced to pound the structure down for use with pointy sticks and clay tablets.\n\nIn Physics, I learned that to understand a seemingly-complicated problem required breaking the problem down (“divide and conquer”) then creating a unique notation for that problem aspect (a different notation for each aspect) and to apply “simplifying assumptions” to the new notation to make the aspect-under-scrutiny seem less complicated.  While, of course, remaining cognizant of the simplifying assumptions and remaining cognizant of not using the notation beyond its sweet spot.\n\nI think that software development is like that, too.  You drill down on a particular aspect of a problem, ignoring the rest.  When you come up for air, you see other aspects that need to be solved.  All popular programming languages are the same and force you to think inside the same kind of box.  Simpler solutions to a problem might not be apparent, nor seem very simple from inside the single box.\n\nMaybe what is being experienced is the freedom to think - to solve a problem instead of force-fitting the problem for expression within the confines of a single given notation or a single style of thought.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JVR5Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, riffing on Konrad’s note, I would add phrases such as “language affects thought”, “a picture is worth a thousand words”, etc.\n\nI conjecture that purveyors of statically-typed, textual languages “see” structure “in their heads”, but feel forced to pound the structure down for use with pointy sticks and clay tablets.\n\nIn Physics, I learned that to understand a seemingly-complicated problem required breaking the problem down (“divide and conquer”) then creating a unique notation for that problem aspect (a different notation for each aspect) and to apply “simplifying assumptions” to the new notation to make the aspect-under-scrutiny seem less complicated.  While, of course, remaining cognizant of the simplifying assumptions and remaining cognizant of not using the notation beyond its sweet spot.\n\nI think that software development is like that, too.  You drill down on a particular aspect of a problem, ignoring the rest.  When you come up for air, you see other aspects that need to be solved.  All popular programming languages are the same and force you to think inside the same kind of box.  Simpler solutions to a problem might not be apparent, nor seem very simple from inside the single box.\n\nMaybe what is being experienced is the freedom to think - to solve a problem instead of force-fitting the problem for expression within the confines of a single given notation or a single style of thought."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1684067362.627209",
        "client_msg_id": "e27a06ee-a823-4ea3-af7f-20dd1ff9467b",
        "text": "I suspect that programming languages and systems still suffer from early computing technology. In particular batch mode, with long feedback cycles. Think before you code. Run code in your head before punching it into expensive cards. Those days are gone!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b2yH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect that programming languages and systems still suffer from early computing technology. In particular batch mode, with long feedback cycles. Think before you code. Run code in your head before punching it into expensive cards. Those days are gone!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02JQA5FY5C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1684101804.838769",
        "client_msg_id": "9e492294-4754-41e0-841d-235d67eb5d27",
        "text": "“...programming languages and systems still suffer from early computing technology...”\n\nI would add that programming languages and systems suffer from early computing mindset.\n\nCPUs and Memory used to be VERY expensive.  It was unimaginable to use a computer to run just one app.  Computing time was meted out in $s and accounted for.  The same CPU was shared across business departments and across university courses.  Budgets for computing time were allocated.  As a student, I was told how many $’s of CPU time I could use for doing my assignments.\n\nBacktracking, e.g. Early’s algorithm for parsing, was denounced as impractical.\n\nComputing within these restrictions required mutation and memory conservation, i.e. Garbage Collectors and reuse of variables.\n\nAll programming languages were based on the idea that only a single thread was available.  A global, shared state (the callstack) made sense.\n\nSome people thought that having 640K of memory was extravagance.\n\nToday, though, the ground rules have changed.  We can have bowls full of CPUs and memory is ridiculously cheap.  Everyone carries around more computing power in their pockets than was needed to land humans on the moon.\n\nBut, we continue to think in terms of ground rules that accomodate the 1950s mindset, instead of today’s mindset.  Supposedly-new programming languages are but variations on themes from the 1950s.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1683907869.328429",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EZQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "“...programming languages and systems still suffer from early computing technology...”\n\nI would add that programming languages and systems suffer from early computing mindset.\n\nCPUs and Memory used to be VERY expensive.  It was unimaginable to use a computer to run just one app.  Computing time was meted out in $s and accounted for.  The same CPU was shared across business departments and across university courses.  Budgets for computing time were allocated.  As a student, I was told how many $’s of CPU time I could use for doing my assignments.\n\nBacktracking, e.g. Early’s algorithm for parsing, was denounced as impractical.\n\nComputing within these restrictions required mutation and memory conservation, i.e. Garbage Collectors and reuse of variables.\n\nAll programming languages were based on the idea that only a single thread was available.  A global, shared state (the callstack) made sense.\n\nSome people thought that having 640K of memory was extravagance.\n\nToday, though, the ground rules have changed.  We can have bowls full of CPUs and memory is ridiculously cheap.  Everyone carries around more computing power in their pockets than was needed to land humans on the moon.\n\nBut, we continue to think in terms of ground rules that accomodate the 1950s mindset, instead of today’s mindset.  Supposedly-new programming languages are but variations on themes from the 1950s."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]