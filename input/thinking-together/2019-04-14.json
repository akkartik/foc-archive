[
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1555229117.014100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1555229151.000000"
        },
        "client_msg_id": "a863c705-df45-47ba-8a59-238b2027b80d",
        "text": "Some of us feel strongly that the environment *should* be part of the finished product, and have this at the core of some of our projects.\n\nBut we certainly recognize the difference between real world practically with software systems as they currently exists, vs experimenting with redefining the very concept of software &amp; programming &amp; \"computer\".\n\n(My way of dealing with that is to make the \"new world\" thing, but then also use it to enhance the development\/generation of \"stripped down artifact\" programs that the real world currently operates on)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ovi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of us feel strongly that the environment "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be part of the finished product, and have this at the core of some of our projects.\n\nBut we certainly recognize the difference between real world practically with software systems as they currently exists, vs experimenting with redefining the very concept of software & programming & \"computer\".\n\n(My way of dealing with that is to make the \"new world\" thing, but then also use it to enhance the development\/generation of \"stripped down artifact\" programs that the real world currently operates on)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1555230745.029800",
        "client_msg_id": "805D9421-F266-45BF-8456-B6A5559F96DD",
        "text": "Help! Beginner question: What’s a “language”? And what’s an “environment”?\n\nIs language just the syntax? Does it include semantics just for what’s part of the language? Or does it include libraries as well? Just a standard library? Or a set of default libraries that are shipped with an SDK? Or even all libraries, wherever they come from? What about a (language) runtime? And we haven’t even started talking about tooling yet, which I assume is clearly part of the environment…?\n\nSomewhere there I crossed from language into environment, and I’m not quite clear where I did. Maybe that’s why the popular opinion “You can’t do one without the other” seems fairly reasonable?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B4mHs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Help! Beginner question: What’s a “language”? And what’s an “environment”?\n\nIs language just the syntax? Does it include semantics just for what’s part of the language? Or does it include libraries as well? Just a standard library? Or a set of default libraries that are shipped with an SDK? Or even all libraries, wherever they come from? What about a (language) runtime? And we haven’t even started talking about tooling yet, which I assume is clearly part of the environment…?\n\nSomewhere there I crossed from language into environment, and I’m not quite clear where I did. Maybe that’s why the popular opinion “You can’t do one without the other” seems fairly reasonable?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1555237814.030300",
        "client_msg_id": "4c1072f3-6a33-414e-ae49-cb07af205110",
        "text": "Great discussion, thanks everyone :popcorn:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jvq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great discussion, thanks everyone "
                            },
                            {
                                "type": "emoji",
                                "name": "popcorn",
                                "unicode": "1f37f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEGFXUK3M",
        "type": "message",
        "ts": "1555237999.030500",
        "client_msg_id": "0ed92a60-7c8d-49f6-b224-1d6677793d5f",
        "text": "<@U5STGTB3J> the closer you look, the more of a false dichotomy it seems to be. And yet I often find \"blunt distinctions\" are great jumping off points for discussion, allowing us to articulate the nuances in relation to these somewhat arbitrary features.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bbd74d10a2d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-24\/1108683470016_bbd74d10a2d2a0dbb156_72.jpg",
            "first_name": "Jack",
            "real_name": "Jack",
            "display_name": "jarm",
            "team": "T5TCAFTA9",
            "name": "jack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1jQm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " the closer you look, the more of a false dichotomy it seems to be. And yet I often find \"blunt distinctions\" are great jumping off points for discussion, allowing us to articulate the nuances in relation to these somewhat arbitrary features."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1555241995.030800",
        "client_msg_id": "70202964-252b-4772-acfd-32b1bdea790b",
        "text": "Some choices in language design are more suitable for some features that the environment can provide. So really both things go together.\n\nLamdu’s choice of a pure language (a language with a distinction between calculations and effectful processes) allows to re-evaluate your code as you edit it with no danger of executing unwanted effects (which you can execute with an explicit user choice).\n\nThe trade-offs around some features like static typing can also change dramatically with the design of the editing environment (does it allow you to freely make type errors or are those contained in “Fragments”\/“Non-empty-holes”?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DzSd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some choices in language design are more suitable for some features that the environment can provide. So really both things go together.\n\nLamdu’s choice of a pure language (a language with a distinction between calculations and effectful processes) allows to re-evaluate your code as you edit it with no danger of executing unwanted effects (which you can execute with an explicit user choice).\n\nThe trade-offs around some features like static typing can also change dramatically with the design of the editing environment (does it allow you to freely make type errors or are those contained in “Fragments”\/“Non-empty-holes”?)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1555276394.032200",
        "client_msg_id": "25127a96-316e-4a58-8adb-d87bffee51cb",
        "text": "I enjoy this thread quite a bit!\n\nI do agree that an environment is not trivial and it can get expensive.\n\nHowever, I strongly believe that the form of the programming language can be the form in which we end up writing but does not have to be (and in fact, it should not be) the only form through which we read. Reading and writing are two distinct use cases that do overlap but are not the same. So, while having bidirectional manipulation between a graphical and the textual representation is interesting, in my view, it is secondary to the ability of creating contextual reading or writing views that are unidirectional.\n\n<@UEQ6M68H0> Glamorous Toolkit does appear to be created for Pharo, but even if it is not yet too visible, it is in fact a platform for IDEs. The way we approach the differences is that instead of imposing a unified presentation (such as a tree project structure), we offer multiple components out of which a specific experience can be put together. Some of the components  will turn out to be more generic (such as an editor), but the specifics will matter more and we optimize for the specifics.\n\nI like <@U5STGTB3J>’s the `What is a language?` question a lot. Indeed, most efforts in this space look at language as the thing that has a syntax expressed as a BNF grammar and the associated semantics. However, when we look at programming as being made of multiple layers of abstractions, an API or a library becomes as much of a language (indeed, that is the basis for the idea of an internal DSL). So, an environment should cater for those as well, and when looked at the problem from this angle, it turns out that we have much more of those languages than the BNF kind.\n\nFor example, a system built in Angular and one in React, even though they are both written in JavaScript, will have fundamentally different needs from the surrounding environment. This is an obvious case, but a system is made of dozens of such libraries and even more system specific libraries, APIs and frameworks. All these can be seen as languages.\n\nThose kinds of languages are not easily representable in a uniform way. So, if it is to be effective, an environment should not be architected around a unified view idea.\n\n<@U8A5MS6R1> raises an interesting point regarding the isolation that an environment creates. However, there is no intrinsic need for the environment to be the same. Much like how a projectional editor is just a layer on top of the runtime language, an environment as a whole is a similar layer, too. And, nothing stops us from utilizing another layer to look at the same content. So, you can well use a plain text editor to edit a notebook, but it might not be the thing you’d like using for an extensive period of time.\n\nAnd this brings me to the wonderful link provided by <@UAVCC2X70>. I was not familiar with Houyhnhnms, but I do subscribe to that point of view. Indeed, any environment is the way in which we decompose our actions with which might end up affecting the software to express our thoughts. To that extent, we can look at an environment as a language made of visual and interaction operators that extend and co-exist with what we classically understand as programming language.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "etYD\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I enjoy this thread quite a bit!\n\nI do agree that an environment is not trivial and it can get expensive.\n\nHowever, I strongly believe that the form of the programming language can be the form in which we end up writing but does not have to be (and in fact, it should not be) the only form through which we read. Reading and writing are two distinct use cases that do overlap but are not the same. So, while having bidirectional manipulation between a graphical and the textual representation is interesting, in my view, it is secondary to the ability of creating contextual reading or writing views that are unidirectional.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Glamorous Toolkit does appear to be created for Pharo, but even if it is not yet too visible, it is in fact a platform for IDEs. The way we approach the differences is that instead of imposing a unified presentation (such as a tree project structure), we offer multiple components out of which a specific experience can be put together. Some of the components  will turn out to be more generic (such as an editor), but the specifics will matter more and we optimize for the specifics.\n\nI like "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "’s the "
                            },
                            {
                                "type": "text",
                                "text": "What is a language?",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " question a lot. Indeed, most efforts in this space look at language as the thing that has a syntax expressed as a BNF grammar and the associated semantics. However, when we look at programming as being made of multiple layers of abstractions, an API or a library becomes as much of a language (indeed, that is the basis for the idea of an internal DSL). So, an environment should cater for those as well, and when looked at the problem from this angle, it turns out that we have much more of those languages than the BNF kind.\n\nFor example, a system built in Angular and one in React, even though they are both written in JavaScript, will have fundamentally different needs from the surrounding environment. This is an obvious case, but a system is made of dozens of such libraries and even more system specific libraries, APIs and frameworks. All these can be seen as languages.\n\nThose kinds of languages are not easily representable in a uniform way. So, if it is to be effective, an environment should not be architected around a unified view idea.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " raises an interesting point regarding the isolation that an environment creates. However, there is no intrinsic need for the environment to be the same. Much like how a projectional editor is just a layer on top of the runtime language, an environment as a whole is a similar layer, too. And, nothing stops us from utilizing another layer to look at the same content. So, you can well use a plain text editor to edit a notebook, but it might not be the thing you’d like using for an extensive period of time.\n\nAnd this brings me to the wonderful link provided by "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": ". I was not familiar with Houyhnhnms, but I do subscribe to that point of view. Indeed, any environment is the way in which we decompose our actions with which might end up affecting the software to express our thoughts. To that extent, we can look at an environment as a language made of visual and interaction operators that extend and co-exist with what we classically understand as programming language."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1555277735.032500",
        "client_msg_id": "50f3dca8-e31a-4f5d-b841-50187eecd684",
        "text": "I've got a clear border in Onex between language and what you seem to be referring to by \"environment\" here.\n\nLanguage is the pure functional tree\/graph\/object reducing stuff, which is entirely domain-independent - there are some built-in hard-coded reductions for basic data types like numbers, strings, lists, etc as you'd expect.\n\nEnvironment is where domain types are introduced, which maps onto i\/o. Here I have the more complex structure types like users, addresses, calendar events, documents, 3D objects, etc, etc..\n\nSo I guess I define the line by that: domain-independent = language; domain-specific (i\/o) = environment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1555165858.009700",
        "parent_user_id": "UEGFXUK3M",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7hfU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've got a clear border in Onex between language and what you seem to be referring to by \"environment\" here.\n\nLanguage is the pure functional tree\/graph\/object reducing stuff, which is entirely domain-independent - there are some built-in hard-coded reductions for basic data types like numbers, strings, lists, etc as you'd expect.\n\nEnvironment is where domain types are introduced, which maps onto i\/o. Here I have the more complex structure types like users, addresses, calendar events, documents, 3D objects, etc, etc..\n\nSo I guess I define the line by that: domain-independent = language; domain-specific (i\/o) = environment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1555281354.032700",
        "client_msg_id": "3d70325d-b896-4504-be7a-6d141e829875",
        "text": "I do not want to have to try to sell developer tools - I never wanted to be a businessman, most people aren't willing to pay anyhow, and I want low-income third-worlders to have just as much access to my software as first-worlders.\n\nTherefore I do not see the problem as piracy, I see the problem as being that we're using an economic system designed for a world of scarcity (capitalism) in a world of abundance (software). That system is usually just plain wrong for the software context (except in cases where abundance doesn't really exist, like control systems for expensive hardware.)\n\nWe have a solution in place for science - everyone knows that there's no commercial application for much of scientific research, but we fund it anyway because it may pay off in the future, and because understanding our world has value in and of itself. I think this should be extended beyond basic research into other areas of intellectual production, especially areas that are underfunded because the products are difficult to sell directly. This applies especially to foundational or \"infrastructure\" software, such as developer tools and other open-source libraries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554710192.101500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NT+yr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do not want to have to try to sell developer tools - I never wanted to be a businessman, most people aren't willing to pay anyhow, and I want low-income third-worlders to have just as much access to my software as first-worlders.\n\nTherefore I do not see the problem as piracy, I see the problem as being that we're using an economic system designed for a world of scarcity (capitalism) in a world of abundance (software). That system is usually just plain wrong for the software context (except in cases where abundance doesn't really exist, like control systems for expensive hardware.)\n\nWe have a solution in place for science - everyone knows that there's no commercial application for much of scientific research, but we fund it anyway because it may pay off in the future, and because understanding our world has value in and of itself. I think this should be extended beyond basic research into other areas of intellectual production, especially areas that are underfunded because the products are difficult to sell directly. This applies especially to foundational or \"infrastructure\" software, such as developer tools and other open-source libraries."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1555281877.032900",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1555282166.000000"
        },
        "client_msg_id": "972e6ff8-3055-41c7-bd3e-d02f09a1cc70",
        "text": "The status quo makes it so that the costs of production are almost completely misaligned to costs paid by users. Software is expensive to create but users pay nothing for that - instead they pay for \"copies\" of the software, which cost nothing (or \"access\" to the software, which costs little). Neither popularity nor cash flows are a meritocracy - the software with the most revenue per developer-hour isn't usually the best software. Some great software is open-source and gets little or no income. This is a bad system, and you won't catch me blaming users for piracy - don't blame users when the system is the problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554710192.101500",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q=5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The status quo makes it so that the costs of production are almost completely misaligned to costs paid by users. Software is expensive to create but users pay nothing for that - instead they pay for \"copies\" of the software, which cost nothing (or \"access\" to the software, which costs little). Neither popularity nor cash flows are a meritocracy - the software with the most revenue per developer-hour isn't usually the best software. Some great software is open-source and gets little or no income. This is a bad system, and you won't catch me blaming users for piracy - don't blame users when the system is the problem."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]