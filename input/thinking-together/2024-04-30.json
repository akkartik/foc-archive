[
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1714480419.940219",
        "client_msg_id": "68d8d2b7-827f-4d3c-bceb-0d617d0e4937",
        "text": "Traditional C compilers output code in _assembly language_, which is piped to an _assembler_, which is a program that outputs _machine code_. Modern compilers internally generate code in an _intermediate representation_, and then output machine code without going through assembly language. If you want to read the output in assembly language, you have to run a disassembler.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714383312.740829",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cryy7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional C compilers output code in "
                            },
                            {
                                "type": "text",
                                "text": "assembly language",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is piped to an "
                            },
                            {
                                "type": "text",
                                "text": "assembler",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is a program that outputs "
                            },
                            {
                                "type": "text",
                                "text": "machine code",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Modern compilers internally generate code in an "
                            },
                            {
                                "type": "text",
                                "text": "intermediate representation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and then output machine code without going through assembly language. If you want to read the output in assembly language, you have to run a disassembler."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U04SAJZ155H",
        "type": "message",
        "ts": "1714481367.217799",
        "edited": {
            "user": "U04SAJZ155H",
            "ts": "1714481782.000000"
        },
        "client_msg_id": "70aa9dc6-1532-4ecd-8970-fb4e5516f02b",
        "text": "The assumption that the ideal application to ship to end users is all machine code and that anything else is bloat is an interesting one. If you look into it, it quickly becomes obvious that the machine code tends to be more bloated than the source code. That's on x86, an instruction set architecture that was designed to make the machine code as short as possible, at the expense of making the interpreter implemented in hardware more complex and less efficient. Modern alternatives to x86 care less about the compactness of the machine code.\n\nIt may actually be less bloated not to ship machine code, but instead ship an intermediate representation that can be JIT-compiled to machine code. Formats such as minified JS, Web Assembly and Dalvik bytecode are examples of more compact formats for shipping that in the end are passed to a JIT compiler that outputs less compact machine code.\n\nNot only are instructions in intermediate representation shorter than in machine code, but intermediate representation can also take advantage of polymorphism, allowing polymorphic code to be shipped only once, whereas the final machine code may come in multiple monomorphic copies.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bd0e56d083a4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-17\/6799011689143_bd0e56d083a4f5152bda_72.jpg",
            "first_name": "Fredrik",
            "real_name": "Fredrik",
            "display_name": "Fredrik",
            "team": "T5TCAFTA9",
            "name": "rusthacker",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714383312.740829",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kg8e3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The assumption that the ideal application to ship to end users is all machine code and that anything else is bloat is an interesting one. If you look into it, it quickly becomes obvious that the machine code tends to be more bloated than the source code. That's on x86, an instruction set architecture that was designed to make the machine code as short as possible, at the expense of making the interpreter implemented in hardware more complex and less efficient. Modern alternatives to x86 care less about the compactness of the machine code.\n\nIt may actually be less bloated not to ship machine code, but instead ship an intermediate representation that can be JIT-compiled to machine code. Formats such as minified JS, Web Assembly and Dalvik bytecode are examples of more compact formats for shipping that in the end are passed to a JIT compiler that outputs less compact machine code.\n\nNot only are instructions in intermediate representation shorter than in machine code, but intermediate representation can also take advantage of polymorphism, allowing polymorphic code to be shipped only once, whereas the final machine code may come in multiple monomorphic copies."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1714482723.654429",
        "client_msg_id": "81421bc7-bea0-44fa-8bd1-c298b8a53732",
        "text": "I just want a fully moldable adaptable infinite canvas\/space\/medium with no limits or forces structure that can take any shape and form. Should be simple? If you shoot far enough! Like, nothing hardcoded, but ever changing. For that, we need to fully integrate the rendering, logic, data, and interaction story. Like. Completely. But yes, just the basics is time consuming. Just got sdf-based webgl text rendering working. Quad-tree\/tile-based fully infinitely zoomable next (as in, not a \"infinite canvas\" that glitches out at 3 magnitudes of floating point zoom, but where everything is seemingly there at once, fully smooth and realtime)... but this suddenly requires a custom integrated database and networking state sync solution, as offline first and p2p seems like a minimal bar that isn't really there... if you want to continuously handle at least 5kbps traffic from thousands of users while still being economically feasible...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oOIFP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just want a fully moldable adaptable infinite canvas\/space\/medium with no limits or forces structure that can take any shape and form. Should be simple? If you shoot far enough! Like, nothing hardcoded, but ever changing. For that, we need to fully integrate the rendering, logic, data, and interaction story. Like. Completely. But yes, just the basics is time consuming. Just got sdf-based webgl text rendering working. Quad-tree\/tile-based fully infinitely zoomable next (as in, not a \"infinite canvas\" that glitches out at 3 magnitudes of floating point zoom, but where everything is seemingly there at once, fully smooth and realtime)... but this suddenly requires a custom integrated database and networking state sync solution, as offline first and p2p seems like a minimal bar that isn't really there... if you want to continuously handle at least 5kbps traffic from thousands of users while still being economically feasible..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U023V63MF6V",
                    "U06BUK2M2RH"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1714490368.887299",
        "client_msg_id": "6346b4af-a4bd-417c-8f0d-0a70dfb044ee",
        "text": "Trying to name a concept: The cognitive surface of software <https:\/\/science-in-the-digital-era.khinsen.net\/#The%20cognitive%20surface%20of%20software>\nHas something similar already been discussed, or at least introduced?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714490368.887299",
        "reply_count": 22,
        "reply_users_count": 4,
        "latest_reply": "1719230287.235059",
        "reply_users": [
            "U5STGTB3J",
            "U06BUK2M2RH",
            "UJBAJNFLK",
            "U02QC0PPER3"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1714492887.111839"
            },
            {
                "user": "U06BUK2M2RH",
                "ts": "1714497804.663239"
            },
            {
                "user": "U06BUK2M2RH",
                "ts": "1714498007.031019"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714549747.103569"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714579801.713009"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714589783.753059"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714592465.902259"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714593949.269889"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714595484.467759"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714628574.599479"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714734439.055759"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714741316.444959"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714800484.051499"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714800609.039699"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1714915398.550679"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1714935514.747409"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719160802.309139"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719161539.922809"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719161965.564239"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719163823.645739"
            },
            {
                "user": "U02QC0PPER3",
                "ts": "1719164698.040959"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1719230287.235059"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sMifA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Trying to name a concept: The cognitive surface of software "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/science-in-the-digital-era.khinsen.net\/#The%20cognitive%20surface%20of%20software"
                            },
                            {
                                "type": "text",
                                "text": "\nHas something similar already been discussed, or at least introduced?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UE1JQM9HQ",
                    "U014WA16VNJ",
                    "U023V63MF6V",
                    "U017SHBAFE3",
                    "U8A5MS6R1"
                ],
                "count": 5
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1714492887.111839",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1714492934.000000"
        },
        "client_msg_id": "c55bdfb3-1cd5-43ca-a830-263ca1c39084",
        "text": "I quite like your distinction between cognitive surface\/bulk. It reminds me of _affordance_ after Gibson:\n> _An affordance cuts across the dichotomy of subjective-objective and helps us to understand its inadequacy. It is equally a fact of the environment and a fact of behavior. It is both physical and psychical, yet neither. An affordance points both ways, to the environment and to the observer._\nBut I wouldn’t necessarily say affordance is a better word for what you’re after; it just seems to be a useful concept to be familiar with to better understand what you describe.\n\nYou also point towards the relational character of it, which I find the most important and interesting aspect, and which is a big step outside of what we like to deal with as programmers. Because it introduces context-dependence and requires specific adaptation — which I’m sure you are very open towards, given your involvement with moldable development.\n\nI wrote a lot lately about intelligibility (your comprehensibility) of systems in <https:\/\/stefanlesser.substack.com\/t\/on-simplicity|a series about simplicity>, which seems extremely related to what you think about. I tried to break out of that one-dimensional simple-complex spectrum, which leads to minimalism or <https:\/\/stefanlesser.substack.com\/p\/on-simplicity-6-reducing-complexity|reduction of complexity> as the only solutions to avoid it, by pulling it apart into <https:\/\/stefanlesser.substack.com\/p\/on-simplicity-3-familiarity|two separate dimensions of mechanical and experiential complexity\/simplicity>, with the former related to the structure of the thing you’re looking at and the latter related to your cognitive processing of that structure, which is for instance highly influenced by your familiarity with it. That’s actually what my essay for Onward! is about.\n\nAnyway, I don’t have a better word for you, but if you want to discuss this further, I’m available.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714490368.887299",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cxl6E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I quite like your distinction between cognitive surface\/bulk. It reminds me of "
                            },
                            {
                                "type": "text",
                                "text": "affordance",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " after Gibson:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An affordance cuts across the dichotomy of subjective-objective and helps us to understand its inadequacy. It is equally a fact of the environment and a fact of behavior. It is both physical and psychical, yet neither. An affordance points both ways, to the environment and to the observer.",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut I wouldn’t necessarily say affordance is a better word for what you’re after; it just seems to be a useful concept to be familiar with to better understand what you describe.\n\nYou also point towards the relational character of it, which I find the most important and interesting aspect, and which is a big step outside of what we like to deal with as programmers. Because it introduces context-dependence and requires specific adaptation — which I’m sure you are very open towards, given your involvement with moldable development.\n\nI wrote a lot lately about intelligibility (your comprehensibility) of systems in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/t\/on-simplicity",
                                "text": "a series about simplicity"
                            },
                            {
                                "type": "text",
                                "text": ", which seems extremely related to what you think about. I tried to break out of that one-dimensional simple-complex spectrum, which leads to minimalism or "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-6-reducing-complexity",
                                "text": "reduction of complexity"
                            },
                            {
                                "type": "text",
                                "text": " as the only solutions to avoid it, by pulling it apart into "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stefanlesser.substack.com\/p\/on-simplicity-3-familiarity",
                                "text": "two separate dimensions of mechanical and experiential complexity\/simplicity"
                            },
                            {
                                "type": "text",
                                "text": ", with the former related to the structure of the thing you’re looking at and the latter related to your cognitive processing of that structure, which is for instance highly influenced by your familiarity with it. That’s actually what my essay for Onward! is about.\n\nAnyway, I don’t have a better word for you, but if you want to discuss this further, I’m available."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714496562.731179",
        "client_msg_id": "aa128ddd-fb94-4104-b041-a9afdf8e0cdf",
        "text": "<@UNCP67JSK> interesting. So i guess 'let there be light' has more steps involved, especially if your 3D+ reality is shared. I like the thinking. Curious what you imagine will be the first things to live in the canvas space?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9eac202d45a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-28\/6396121022742_9eac202d45a2827e9fa6_72.jpg",
            "first_name": "Dennis",
            "real_name": "Dennis Hansen",
            "display_name": "Dennis Hansen",
            "team": "T5TCAFTA9",
            "name": "dhansen909",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714250050.851589",
        "parent_user_id": "U06BUK2M2RH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QZIoG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNCP67JSK"
                            },
                            {
                                "type": "text",
                                "text": " interesting. So i guess 'let there be light' has more steps involved, especially if your 3D+ reality is shared. I like the thinking. Curious what you imagine will be the first things to live in the canvas space?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "In \"The design of Everyday Things\" by Don Norman, he refers to a similar concept called \"Discoverability\", which refers to whether it possible to determine what actions are possible and the current state of the device.\" This is is in order to build a \"System Image\", or a conceptual model of the system you are using, i.e. the the parts and their state, how they relate, how it might change, etc.",
        "files": [
            {
                "id": "F071FHMTB8U",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U06BUK2M2RH",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u8R1C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In \"The design of Everyday Things\" by Don Norman, he refers to a similar concept called \"Discoverability\", which refers to whether it possible to determine what actions are possible and the current state of the device.\" This is is in order to build a \"System Image\", or a conceptual model of the system you are using, i.e. the the parts and their state, how they relate, how it might change, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1714497804.663239",
        "client_msg_id": "de8c3f87-d3a8-4ac9-b321-53450c86bc2b",
        "thread_ts": "1714490368.887299",
        "parent_user_id": "UJBAJNFLK"
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1714498007.031019",
        "edited": {
            "user": "U06BUK2M2RH",
            "ts": "1714498034.000000"
        },
        "client_msg_id": "235d1ce8-6b00-47ba-9719-9a787ac246ce",
        "text": "I like the extension though in thinking about the degree to which a system communicates it's state and how it works*, though it is dependent on the users knowledge and ability to pick up on affordances. But perhaps you can refer to what a system is attempting to communicate independent of an observers ability to read it. And you can specific where that communication occurs, especially whether it's apparent through a course of usage or whether it requires digging deeper into things like documentation for purely informative purposes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9eac202d45a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-28\/6396121022742_9eac202d45a2827e9fa6_72.jpg",
            "first_name": "Dennis",
            "real_name": "Dennis Hansen",
            "display_name": "Dennis Hansen",
            "team": "T5TCAFTA9",
            "name": "dhansen909",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1714490368.887299",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7veu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the extension though in thinking about the degree to which a system communicates it's state and how it works*, though it is dependent on the users knowledge and ability to pick up on affordances. But perhaps you can refer to what a system is attempting to communicate independent of an observers ability to read it. And you can specific where that communication occurs, especially whether it's apparent through a course of usage or whether it requires digging deeper into things like documentation for purely informative purposes."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]