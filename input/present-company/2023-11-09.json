[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699527588.859739",
        "client_msg_id": "1f68da02-3f2d-4578-9603-9b55e6eea2a9",
        "text": "Here's the predecessor paper to the FRP architecture - \"AST\"\n\n<http:\/\/worrydream.com\/refs\/Backus-CanProgrammingBeLiberated.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "StgOC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's the predecessor paper to the FRP architecture - \"AST\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/worrydream.com\/refs\/Backus-CanProgrammingBeLiberated.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1699527682.208449",
        "client_msg_id": "99d34e87-3bae-4788-9a74-1ba98291d51e",
        "text": "Interesting, thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "07fbb70c0e39",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-28\/5179303716261_07fbb70c0e3980e07e51_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Buckmaster",
            "display_name": "Daniel Buckmaster",
            "team": "T5TCAFTA9",
            "name": "mail397",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PQU1W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting, thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699527794.647309",
        "client_msg_id": "e1195b6d-263f-4f40-8f54-a3af6dcb9830",
        "text": "And to answer your OP - I think you can't do better! Which is why I'm doing it this way myself. Well, if you squint your eyes and waggle your head it looks pretty similar!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q4f6W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And to answer your OP - I think you can't do better! Which is why I'm doing it this way myself. Well, if you squint your eyes and waggle your head it looks pretty similar!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699527883.199979",
        "client_msg_id": "3150d04b-b382-4d09-992b-9f1a5d8a8781",
        "text": "The core common feature of AST and FRP (Relational that is) as far as I'm able to discern, as the two papers are quite dense, is that you have pure functions as your domain logic transforming domain data from state to state.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NEyPm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The core common feature of AST and FRP (Relational that is) as far as I'm able to discern, as the two papers are quite dense, is that you have pure functions as your domain logic transforming domain data from state to state."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699527941.565749",
        "client_msg_id": "35419962-dd70-464a-a8bb-e5290678b38f",
        "text": "Since you've separated the state from the functions, the functions don't need to be, and probably shouldn't be, Turing Complete - because they have to terminate.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9AA0u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since you've separated the state from the functions, the functions don't need to be, and probably shouldn't be, Turing Complete - because they have to terminate."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699527981.449069",
        "client_msg_id": "bc7825ad-1434-46d6-9abd-74fbaed26fc8",
        "text": "Here's the tar pit paper for reference:\n\n<https:\/\/curtclifton.net\/papers\/MoseleyMarks06a.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L3k9n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's the tar pit paper for reference:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/curtclifton.net\/papers\/MoseleyMarks06a.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699529825.862749",
        "client_msg_id": "047a4382-af9a-4c19-950b-e0ef82f49a47",
        "text": "There's apparently some controversy over whether the FRP model actually entails mutating the relational state that's stored, and if those mutations can be used in subsequent applications of the domain logic. I think it looks like they punted on that a bit.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3eUy3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's apparently some controversy over whether the FRP model actually entails mutating the relational state that's stored, and if those mutations can be used in subsequent applications of the domain logic. I think it looks like they punted on that a bit."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U05597GCDDK",
                    "U05UK5T7LPP"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05597GCDDK",
        "type": "message",
        "ts": "1699530760.994639",
        "client_msg_id": "ea144198-7832-43ea-9d6d-4a1fd0cfad3d",
        "text": "I think that's a matter of taste - you might want to implement an immutable data store that looks like event sourcing, or a mutable relational thing like a standard sql database? But the ideas of expressing domain logic as relational queries is interesting, as is the separation between input state and derived state. I think the struggles of my system really stem from not strictly distinguishing between input and derived state, so everything becomes a big mess. That's why the paper spoke so clearly to my situation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "07fbb70c0e39",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-28\/5179303716261_07fbb70c0e3980e07e51_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Buckmaster",
            "display_name": "Daniel Buckmaster",
            "team": "T5TCAFTA9",
            "name": "mail397",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rMKyI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that's a matter of taste - you might want to implement an immutable data store that looks like event sourcing, or a mutable relational thing like a standard sql database? But the ideas of expressing domain logic as relational queries is interesting, as is the separation between input state and derived state. I think the struggles of my system really stem from not strictly distinguishing between input and derived state, so everything becomes a big mess. That's why the paper spoke so clearly to my situation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1699536083.665849",
        "client_msg_id": "327747b4-cdc2-4210-80ef-a7e08763eaa3",
        "text": "Well an \"immutable\" data store is still mutable - when you add entries! So it comes back down to storing history or not, which is down to supporting elements of the system that are behind in the sequence of events and not yet caught up with subsequent changes. But after that, you don't need to store history, and if you do, then you must have a domain requirement to do so, in which case, make it explicit with a history table!\n\nThe question is, how do you get to each new state? AST and my squinty-eyed interpretation of tarpit FRP tell me that you have pure domain functions or derivative relations transforming from state to new or next state. I think Clojure's DB has something like that.\n\nAs for input vs derived state: well that's an arbitrary distinction, really. I mean, just have derived state as your general model, and then make some state special - inputs - and \"derived from something going on elsewhere\". Then outputs derive \"state elsewhere\" from system state. The tarpit called them feeders and observers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1699503699.538079",
        "parent_user_id": "U05597GCDDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G13aL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well an \"immutable\" data store is still mutable - when you add entries! So it comes back down to storing history or not, which is down to supporting elements of the system that are behind in the sequence of events and not yet caught up with subsequent changes. But after that, you don't need to store history, and if you do, then you must have a domain requirement to do so, in which case, make it explicit with a history table!\n\nThe question is, how do you get to each new state? AST and my squinty-eyed interpretation of tarpit FRP tell me that you have pure domain functions or derivative relations transforming from state to new or next state. I think Clojure's DB has something like that.\n\nAs for input vs derived state: well that's an arbitrary distinction, really. I mean, just have derived state as your general model, and then make some state special - inputs - and \"derived from something going on elsewhere\". Then outputs derive \"state elsewhere\" from system state. The tarpit called them feeders and observers."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]