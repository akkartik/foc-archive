[
    {
        "subtype": "thread_broadcast",
        "user": "U098P4V8Y6R",
        "thread_ts": "1754118705.092259",
        "root": {
            "user": "UCUSW7WVD",
            "type": "message",
            "ts": "1754118705.092259",
            "client_msg_id": "671ccd73-2157-4ed2-a8e1-8df9f5503a7f",
            "text": "This might be premature, but I think I _finally_ understand Dijkstra's approach to deriving programs from post-conditions in \"A Discipline of Programming\". I've had this book on my bookshelf for almost 20 years, never understood it but also never quite worked up the will to toss it out. (For context, I only own like a dozen books over the long term.)\n\nConcretely, I've made it to the end of Chapter 7. I feel like I understand every bit up until this point.\n\nParts of Chapter 6 and 7 feel very sloppily written! And this is Dijkstra! So either my leaps of interpretation are only leaps because I'm missing something, or my sense of understanding is an illusion :sweat_smile:\n\nHas anyone here made it this far and feel like they understood it? I'd love to talk to you.\n\nIncidentally: I wouldn't have made it in even this my probably 4th attempt, if it wasn't for LLMs. They're better than a rubber duck for talking things over with! It's amazing that they can all converse intelligently about the Dijkstra method, and all I need to do is mention `wp` or `wdec`. Or I know nothing and am incapable of judging anything about this book.",
            "team": "T5TCAFTA9",
            "thread_ts": "1754118705.092259",
            "reply_count": 14,
            "reply_users_count": 3,
            "latest_reply": "1755466818.330469",
            "reply_users": [
                "U098P4V8Y6R",
                "UCUSW7WVD",
                "U05UK5T7LPP"
            ],
            "replies": [
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754259771.285849"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754268721.461379"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754269037.411419"
                },
                {
                    "user": "U05UK5T7LPP",
                    "ts": "1754326775.411869"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754327682.610629"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754752241.623379"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754752415.308649"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754753476.322389"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1754777681.018069"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1754780801.287359"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755436797.026409"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755436888.504089"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1755443502.811449"
                },
                {
                    "user": "U098P4V8Y6R",
                    "ts": "1755466818.330469"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "vX\/r1",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "This might be premature, but I think I "
                                },
                                {
                                    "type": "text",
                                    "text": "finally",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " understand Dijkstra's approach to deriving programs from post-conditions in \"A Discipline of Programming\". I've had this book on my bookshelf for almost 20 years, never understood it but also never quite worked up the will to toss it out. (For context, I only own like a dozen books over the long term.)\n\nConcretely, I've made it to the end of Chapter 7. I feel like I understand every bit up until this point.\n\nParts of Chapter 6 and 7 feel very sloppily written! And this is Dijkstra! So either my leaps of interpretation are only leaps because I'm missing something, or my sense of understanding is an illusion "
                                },
                                {
                                    "type": "emoji",
                                    "name": "sweat_smile",
                                    "unicode": "1f605"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nHas anyone here made it this far and feel like they understood it? I'd love to talk to you.\n\nIncidentally: I wouldn't have made it in even this my probably 4th attempt, if it wasn't for LLMs. They're better than a rubber duck for talking things over with! It's amazing that they can all converse intelligently about the Dijkstra method, and all I need to do is mention "
                                },
                                {
                                    "type": "text",
                                    "text": "wp",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " or "
                                },
                                {
                                    "type": "text",
                                    "text": "wdec",
                                    "style": {
                                        "code": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ". Or I know nothing and am incapable of judging anything about this book."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1754259771.285849",
        "client_msg_id": "0613f735-7d32-4a88-a570-947ad7148332",
        "text": "Hi, Kartik, I'd be very interested in having a conversation about Dijkstra's book. I still have my copy that I ordered as soon as I could after it was published. Working through that book (one works it instead of reading it :slightly_smiling_face:) profoundly changed my perspective on programming.\nI find it highly ironic that some people who have been critical of formal methods (or even of Dijkstra's style and content) are also proponents of TDD. I have long thought that both ADoP and TDD emphasize using reasoning about correctness as part of the design process (although I continue to believe that Dijkstra's method is potentially more robust, for a variety of reasons).\nI'm curious as to what about chapters 6 (designing for termination) and 7 (Euclid's algorithm revisited) left you uncomfortable.\nI hope we can connect.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gGigV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, Kartik, I'd be very interested in having a conversation about Dijkstra's book. I still have my copy that I ordered as soon as I could after it was published. Working through that book (one works it instead of reading it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ") profoundly changed my perspective on programming.\nI find it highly ironic that some people who have been critical of formal methods (or even of Dijkstra's style and content) are also proponents of TDD. I have long thought that both ADoP and TDD emphasize using reasoning about correctness as part of the design process (although I continue to believe that Dijkstra's method is potentially more robust, for a variety of reasons).\nI'm curious as to what about chapters 6 (designing for termination) and 7 (Euclid's algorithm revisited) left you uncomfortable.\nI hope we can connect."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1754268721.461379",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1754270252.000000"
        },
        "client_msg_id": "c69c2f7e-09e1-4671-8ab1-af031635f093",
        "text": "Wonderful, thank you! Here's one thing I figured out this time after failing in the past, tell me if I got something wrong:\n\nIn Chapter 7, when evaluating `wdec(\"x := x + y\")` under the metric `t = abs(x-y)`, Dijkstra calculates:\n\n```tmin(x, y) <= t(x, y) - 1```\n(I find it helpful to explicitly add the `(x, y)` to remind myself that `t` is a function.)\n\nThis he then simplifies to:\n```x <= abs(x-y) -1```\nIf I understand correctly, the left hand side of the inequality is just the value of `t` after `x := x + y` has run.\n\n```tmin(x, y) = abs(x+y - y) = abs(x)\n=> x, since x > 0 by the preconditions of the chapter\/problem```\nThis I never understood until now, and I think I've always been thrown off by the \"min\" in the name \"tmin\". It seems to me clearer to call it `t(x', y')` where `x'` and `y'` are the values of `x` and `y` after `x := x + y` has run.\n\n```t(x', y') <= t(x, y) - 1\nabs(x+y - y) <= abs(x-y) - 1\netc.```\nI suppose my two questions are:\n• Am I on the right track? And,\n• Does this approach seem clearer to you?\nI don't really understand the name `tmin`. Dijkstra introduces it in Chapter 6 as, \"the lowest upper bound for the final value of `t`\". There's a \"min\" and a \"max\" there, and also a \"final\". If I had to choose a new name, I'd call it `t_after` or something like that. Perhaps the lack of subscripts affected the choice of name, since \"after\" starts with a vowel..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1754118705.092259",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B\/oJt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wonderful, thank you! Here's one thing I figured out this time after failing in the past, tell me if I got something wrong:\n\nIn Chapter 7, when evaluating "
                            },
                            {
                                "type": "text",
                                "text": "wdec(\"x := x + y\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " under the metric "
                            },
                            {
                                "type": "text",
                                "text": "t = abs(x-y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", Dijkstra calculates:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tmin(x, y) <= t(x, y) - 1"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(I find it helpful to explicitly add the "
                            },
                            {
                                "type": "text",
                                "text": "(x, y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to remind myself that "
                            },
                            {
                                "type": "text",
                                "text": "t",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a function.)\n\nThis he then simplifies to:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "x <= abs(x-y) -1"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf I understand correctly, the left hand side of the inequality is just the value of "
                            },
                            {
                                "type": "text",
                                "text": "t",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " after "
                            },
                            {
                                "type": "text",
                                "text": "x := x + y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has run.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tmin(x, y) = abs(x+y - y) = abs(x)\n=> x, since x > 0 by the preconditions of the chapter\/problem"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis I never understood until now, and I think I've always been thrown off by the \"min\" in the name \"tmin\". It seems to me clearer to call it "
                            },
                            {
                                "type": "text",
                                "text": "t(x', y')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where "
                            },
                            {
                                "type": "text",
                                "text": "x'",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "y'",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are the values of "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " after "
                            },
                            {
                                "type": "text",
                                "text": "x := x + y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has run.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "t(x', y') <= t(x, y) - 1\nabs(x+y - y) <= abs(x-y) - 1\netc."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI suppose my two questions are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Am I on the right track? And,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Does this approach seem clearer to you?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't really understand the name "
                            },
                            {
                                "type": "text",
                                "text": "tmin",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Dijkstra introduces it in Chapter 6 as, \"the lowest upper bound for the final value of "
                            },
                            {
                                "type": "text",
                                "text": "t",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\". There's a \"min\" and a \"max\" there, and also a \"final\". If I had to choose a new name, I'd call it "
                            },
                            {
                                "type": "text",
                                "text": "t_after",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or something like that. Perhaps the lack of subscripts affected the choice of name, since \"after\" starts with a vowel.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1754269037.411419",
        "client_msg_id": "15448495-0503-4ead-8bae-e9d885315deb",
        "text": "I did work through the rest of the chapter and manage to reproduce all his working (with one additional wrinkle that I might complain about next, after we discuss this one), so that gives me some confidence I'm on the right track..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1754118705.092259",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eEDUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did work through the rest of the chapter and manage to reproduce all his working (with one additional wrinkle that I might complain about next, after we discuss this one), so that gives me some confidence I'm on the right track.."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]