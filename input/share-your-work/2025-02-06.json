[
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1738903427.878439",
        "client_msg_id": "FACBEA7F-314C-4C4B-A6BE-0B8039B91E4E",
        "text": "I think I get what you’re saying, Paul. In f(g(x)), g knows that f must be paused and that it will resume iff it relinquishes control. That makes sense.\n\nBut am I right that that only becomes relevant when you permit a system description that incorporates more than just the function call or pipeline? If you write g in a f|g pipeline with the assumption that f has rescinded control for the duration as if it were a function call, then you won’t observe anything to contradict that notion unless there are also _other_ data- or control-flow mechanisms in play, like g sends information backward to f, or both f and g access some external system like a wall clock. Like Federico said, they’re conceptually the same… until you complicate them, and I think your point is that pipelines are amenable to “interesting combinations” that function calls are not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1738331917.986289",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jydOK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I get what you’re saying, Paul. In f(g(x)), g knows that f must be paused and that it will resume iff it relinquishes control. That makes sense.\n\nBut am I right that that only becomes relevant when you permit a system description that incorporates more than just the function call or pipeline? If you write g in a f|g pipeline with the assumption that f has rescinded control for the duration"
                            },
                            {
                                "type": "text",
                                "text": " as if it were a function call"
                            },
                            {
                                "type": "text",
                                "text": ", then you won’t observe anything to contradict that notion unless there are also "
                            },
                            {
                                "type": "text",
                                "text": "other",
                                "style": {
                                    "bold": false,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " data- or control-flow mechanisms in play, like g sends information backward to f, or both f and g access some external system like a wall clock."
                            },
                            {
                                "type": "text",
                                "text": " Like Federico said, they’re conceptually the same… until you complicate them, and I think your point is that pipelines are amenable to “interesting combinations” that function calls are not."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]