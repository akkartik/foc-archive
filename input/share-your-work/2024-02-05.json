[
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1707120170.070689",
        "client_msg_id": "599bfcca-275c-4c82-b81b-dfd9c424be38",
        "text": "Looks like a very nice implementation of flow-based programming. I suppose the key selling point over other FBP-systems is that it integrates nicely with JS\/TS codebase? That's certainly a good feature to have, but overall I'm quite skeptical of the value of node-based programming (editing especially) for developers. I think the strength of visual programming over textual lies in very specific patterns like state machines and decision trees or tables. Otherwise text is just more productive to work with. Now, there can be value in visualizing the call graphs, control and data flow as well as runtime state of a system, but I'd want those to be generated from codebase that is mostly textual (bar state machines, decision trees and tables or some domain specific visual patterns).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "59de929720a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-09-08\/4075674207584_59de929720a2fe0a13d8_72.jpg",
            "first_name": "",
            "real_name": "Jarno Montonen",
            "display_name": "Jarno Montonen",
            "team": "T5TCAFTA9",
            "name": "jarno.montonen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iTqUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like a very nice implementation of flow-based programming. I suppose the key selling point over other FBP-systems is that it integrates nicely with JS\/TS codebase? That's certainly a good feature to have, but overall I'm quite skeptical of the value of node-based programming (editing especially) for developers. I think the strength of visual programming over textual lies in very specific patterns like state machines and decision trees or tables. Otherwise text is just more productive to work with. Now, there can be value in visualizing the call graphs, control and data flow as well as runtime state of a system, but I'd want those to be generated from codebase that is mostly textual (bar state machines, decision trees and tables or some domain specific visual patterns)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U02NU8FTL5N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01QUBNJSEQ",
        "type": "message",
        "ts": "1707120635.920059",
        "client_msg_id": "6616aaca-a6ac-42f5-8c0d-9ea1208aca18",
        "text": "Looks like great work, thanks for sharing! There should be more attempts like this at framing problems tackled in disparate scientific communities with unified conceptual frameworks.\n\nHave you heard of the theory of *instrumental interaction* by Michel Beaudouin-Lafon? It aims at generalizing the concept of direct manipulation interface, through that of \"interaction instrument\" that mediates between  users and domain objects. I think this is quite relevant here, although the concept of interaction instrument may have a narrower concern than that of software instrument.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc2773fc791e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-10-07\/7839204665394_bc2773fc791e2b5def2b_72.png",
            "first_name": "Pablo",
            "real_name": "Pablo Donato",
            "display_name": "Pablo Donato",
            "team": "T5TCAFTA9",
            "name": "pablo.donato",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706731985.271049",
        "parent_user_id": "U05UK5T7LPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R1rG2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like great work, thanks for sharing! There should be more attempts like this at framing problems tackled in disparate scientific communities with unified conceptual frameworks.\n\nHave you heard of the theory of "
                            },
                            {
                                "type": "text",
                                "text": "instrumental interaction",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by Michel Beaudouin-Lafon? It aims at generalizing the concept of direct manipulation interface, through that of \"interaction instrument\" that mediates between  users and domain objects. I think this is quite relevant here, although the concept of interaction instrument may have a narrower concern than that of software instrument."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02NU8FTL5N",
        "type": "message",
        "ts": "1707121663.095869",
        "client_msg_id": "3883bb0b-0f03-48dd-8fe7-2cffeba4cb3f",
        "text": "Thanks! yes, integrating nicely with existing code, and with the ecosystem in general, is indeed a core designing principle of Flyde. Most solutions are complete stand-alone services. Flyde tries to operate at the \"library level\" for maximum flexblity.\n\nRegarding the value - it's indeed a hard question that only time will answer. I do think that the immediate value for expert hands-on developers will be much lower than a junior developer, or a non-developer technical member (PM\/ Sales Eng. \/ QA). However, if we fast forward 5-10 years from now, my bet is that will offload most of the granular, text-based coding to LLMs and need a higher level of abstraction, and then Flyde might provide value even for highly-skilled developers.\n\nI also hope that a hosted \"visual serverless\" tool based off Flyde will be usable for highly skilled developers who are looking for a quick API and the existing low-code space isn't suitable because it's too limited\/closed-sourced\/not easily portable.\n\nAnd thanks for sharing your honest thoughts!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99e8e5773319",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-21\/2737933101591_99e8e5773319ebc4666a_72.jpg",
            "first_name": "Gabriel",
            "real_name": "Gabriel Grinberg",
            "display_name": "Gabriel Grinberg",
            "team": "T5TCAFTA9",
            "name": "gabi.grinberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lYQT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! yes, integrating nicely with existing code, and with the ecosystem in general, is indeed a core designing principle of Flyde. Most solutions are complete stand-alone services. Flyde tries to operate at the \"library level\" for maximum flexblity.\n\nRegarding the value - it's indeed a hard question that only time will answer. I do think that the immediate value for expert hands-on developers will be much lower than a junior developer, or a non-developer technical member (PM\/ Sales Eng. \/ QA). However, if we fast forward 5-10 years from now, my bet is that will offload most of the granular, text-based coding to LLMs and need a higher level of abstraction, and then Flyde might provide value even for highly-skilled developers.\n\nI also hope that a hosted \"visual serverless\" tool based off Flyde will be usable for highly skilled developers who are looking for a quick API and the existing low-code space isn't suitable because it's too limited\/closed-sourced\/not easily portable.\n\nAnd thanks for sharing your honest thoughts!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0296ACR13M"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1707154931.974779",
        "client_msg_id": "1acdc40d-d2dd-467d-879a-067236243824",
        "text": "That’s an interesting theory, about how visual languages could offer a “higher level of abstraction” over LLM-written code. But it’s still not clear to me what the visual language offers over code in that situation. You can write textual code to compose LLM-written code together too, right? So why the visual language? What makes the visual language usefully “higher level” than code, anyway?\n\nTo make this “higher-level” talk a bit crisper: We say things like “Java\/Haskell is higher-level than C”, and we mean that Java\/Haskell takes care of details (like memory management) that a programmer needs to attend to in C. But IIUC, something like Flyde isn’t “higher-level”, in this sense, than code – it’s just a reshaping of code’s structure into a new format. I suppose “syntactic correctness” is a detail programmers need to attend to with code but not Flyde. That could be helpful for novices, in the same way Scratch &amp; friends are.  But it’s a bit of a training-wheels situation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dTy5P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s an interesting theory, about how visual languages could offer a “higher level of abstraction” over LLM-written code. But it’s still not clear to me what the visual language offers over code in that situation. You can write textual code to compose LLM-written code together too, right? So why the visual language? What makes the visual language usefully “higher level” than code, anyway?\n\nTo make this “higher-level” talk a bit crisper: We say things like “Java\/Haskell is higher-level than C”, and we mean that Java\/Haskell takes care of details (like memory management) that a programmer needs to attend to in C. But IIUC, something like Flyde isn’t “higher-level”, in this sense, than code – it’s just a reshaping of code’s structure into a new format. I suppose “syntactic correctness” is a detail programmers need to attend to with code but not Flyde. That could be helpful for novices, in the same way Scratch & friends are.  But it’s a bit of a training-wheels situation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02NU8FTL5N",
        "type": "message",
        "ts": "1707157255.459339",
        "client_msg_id": "49d66a76-b778-4f60-acbc-4d06385be848",
        "text": "I believe that visual flow-based programming language abstracts away concurrency and asynchronicity. 2 concepts that I've seen many novice developers struggle with. It's true that all seasoned programmers today can handle these concepts easily, but so did the previous generation with memory management. Today, you can be a highly-productive developer working on a JS codebase without writing a single line of manual memory management code, thanks to garbage collection.\n\nRegarding the values for the LLMs era, and again, pure speculation here:\n1.   I believe the constraints that a node in Flyde (and probably also any FBP implementation) provides makes it an ideal candidate for LLMs to \"pour\" high quality code into, without worrying about frameworks, libraries or code style.  Moreover, if we're already delegating most lower-level logic to LLMs.\n2. As we gradually stop writing low-level logic by hand and delegate it to LLMs, I think we become more _architects_ and less _coders_. And then, a 2d visual representation of programs allows for easier reasoning by humans, specially if you trust the node's implementations completely. But as <@U0296ACR13M> mentioned, this might also be achieved with a tool that allows visualizing your code better",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "99e8e5773319",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-21\/2737933101591_99e8e5773319ebc4666a_72.jpg",
            "first_name": "Gabriel",
            "real_name": "Gabriel Grinberg",
            "display_name": "Gabriel Grinberg",
            "team": "T5TCAFTA9",
            "name": "gabi.grinberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fc\/OS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe that visual flow-based programming language abstracts away concurrency and asynchronicity. 2 concepts that I've seen many novice developers struggle with. It's true that all seasoned programmers today can handle these concepts easily, but so did the previous generation with memory management. Today, you can be a highly-productive developer working on a JS codebase without writing a single line of manual memory management code, thanks to garbage collection.\n\nRegarding the values for the LLMs era, and again, pure speculation here:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "  I believe the constraints that a node in Flyde (and probably also any FBP implementation) provides makes it an ideal candidate for LLMs to \"pour\" high quality code into, without worrying about frameworks, libraries or code style.  Moreover, if we're already delegating most lower-level logic to LLMs."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As we gradually stop writing low-level logic by hand and delegate it to LLMs, I think we become more "
                                    },
                                    {
                                        "type": "text",
                                        "text": "architects",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and less "
                                    },
                                    {
                                        "type": "text",
                                        "text": "coders",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". And then, a 2d visual representation of programs allows for easier reasoning by humans, specially if you trust the node's implementations completely. But as "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "U0296ACR13M"
                                    },
                                    {
                                        "type": "text",
                                        "text": " mentioned, this might also be achieved with a tool that allows visualizing your code better"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1707158286.386809",
        "client_msg_id": "9B31D969-73A2-4115-B81E-E7F1E0110A45",
        "text": "I believe that visual programming languages can be more powerful then text languages if you add interactivity, live data visualization and powerful productivity tools. With textual coding you have to make a mental image of the code you write and how it runs and influences the data structures (at least in my head it works like that :blush:). But for sure it's a challenge to make visual programming just as productive as the current state of textual programming and not create \"spaghetti-flows\". ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iMmSl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe that visual programming languages can be more powerful then text languages if you add interactivity, live data visualization and powerful productivity tools. With textual coding you have to make a mental image of the code you write and how it runs and influences the data structures (at least in my head it works like that "
                            },
                            {
                                "type": "emoji",
                                "name": "blush",
                                "unicode": "1f60a"
                            },
                            {
                                "type": "text",
                                "text": "). But for sure it's a challenge to make visual programming just as productive as the current state of textual programming and not create \"spaghetti-flows\". "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1707160874.591489",
        "client_msg_id": "df480f39-0db6-4a63-8907-6766c891710d",
        "text": "Struggling with nominal types sneaking in everywhere - <https:\/\/www.scattered-thoughts.net\/writing\/notation-and-representation\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707160874.591489",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1707260076.118209",
        "reply_users": [
            "U067RCH8NB0",
            "U71PMQ1V0"
        ],
        "replies": [
            {
                "user": "U067RCH8NB0",
                "ts": "1707161094.116669"
            },
            {
                "user": "U067RCH8NB0",
                "ts": "1707161144.183839"
            },
            {
                "user": "U067RCH8NB0",
                "ts": "1707233405.171879"
            },
            {
                "user": "U71PMQ1V0",
                "ts": "1707244997.321619"
            },
            {
                "user": "U067RCH8NB0",
                "ts": "1707260076.118209"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m+31l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Struggling with nominal types sneaking in everywhere - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.scattered-thoughts.net\/writing\/notation-and-representation\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UK3LH8CF5",
                    "UFEQUBNNT"
                ],
                "count": 2
            },
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U067RCH8NB0",
        "type": "message",
        "ts": "1707161094.116669",
        "client_msg_id": "4e8e4f3a-d53c-4340-ad8c-2f072f85448e",
        "text": "Not an especially insightful comment, just: as a reader of your blog for the last 12–18 months who is also slowly backfilling programming language stuff I didn’t get by way of a physics degree (for some reason :joy:), I find these write-ups eminently informative, and there aren’t a lot of other folks sharing this kind of “in the weeds” material.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0f75aaf019c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0f75aaf019cc59e83fd3321b64a36508.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Chris",
            "real_name": "Chris Krycho",
            "display_name": "Chris Krycho",
            "team": "T5TCAFTA9",
            "name": "hello870",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707160874.591489",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cYah8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not an especially insightful comment, just: as a reader of your blog for the last 12–18 months who is also slowly backfilling programming language stuff I didn’t get by way of a physics degree (for some reason "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": "), I find these write-ups eminently informative, and there aren’t a lot of other folks sharing this kind of “in the weeds” material."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U71PMQ1V0",
                    "UCUSW7WVD",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U067RCH8NB0",
        "type": "message",
        "ts": "1707161144.183839",
        "client_msg_id": "87c5f8c7-2190-4198-8626-ac9cc53cbda7",
        "text": "(<https:\/\/pling.jondgoodwin.com> is the only other one I can think of in that space, and he’s been totally silent since mid-2022 :weary:)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0f75aaf019c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/0f75aaf019cc59e83fd3321b64a36508.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "Chris",
            "real_name": "Chris Krycho",
            "display_name": "Chris Krycho",
            "team": "T5TCAFTA9",
            "name": "hello870",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707160874.591489",
        "parent_user_id": "U71PMQ1V0",
        "attachments": [
            {
                "from_url": "https:\/\/pling.jondgoodwin.com\/",
                "service_icon": "https:\/\/pling.jondgoodwin.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/pling.jondgoodwin.com",
                "fallback": "Programming Linguistics",
                "text": "Meditations on Programming Language Design",
                "title": "Programming Linguistics",
                "title_link": "https:\/\/pling.jondgoodwin.com\/",
                "service_name": "pling.jondgoodwin.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k3zy+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pling.jondgoodwin.com"
                            },
                            {
                                "type": "text",
                                "text": " is the only other one I can think of in that space, and he’s been totally silent since mid-2022 "
                            },
                            {
                                "type": "emoji",
                                "name": "weary",
                                "unicode": "1f629"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1707174321.737079",
        "client_msg_id": "ecd84f13-ca94-4589-b62c-3ccc52aacef6",
        "text": "At 1:50 Gabriel shows a simple Hello World example, with a delay on the \"b\" input. What does that look like in textual form?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rgCfC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At 1:50 Gabriel shows a simple Hello World example, with a delay on the \"b\" input. What does that look like in textual form?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1707178444.975529",
        "client_msg_id": "ebac6c0b-2f09-42f2-af36-ef893e648eff",
        "text": "<@UGWUJUZHT> Is that question a response to my claim that Flyde is just “a reshaping of code’s structure into a new format”? If so: perhaps it would look like\n\n```result = Concat(\"Hello,\", Delay(4200, \" World!\"))```\nSomething like that, anyway. Is there something about this example that you think makes it difficult to translate to text?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N8u6w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " Is that question a response to my claim that Flyde is just “a reshaping of code’s structure into a new format”? If so: perhaps it would look like\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "result = Concat(\"Hello,\", Delay(4200, \" World!\"))"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSomething like that, anyway. Is there something about this example that you think makes it difficult to translate to text?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1707186104.715489",
        "client_msg_id": "d30a1b30-ce1f-4e78-90fa-3e2860cefe59",
        "text": "It is new to me, but I see I have retreaded some of HCI's ground, Thank you! I'd come across the Document Lens, which is one of their case studies, but not within the appropriate generalization to non-textual domain objects. The scope seems very similar; for example, navigation and filtering widgets are two familiar categories. The major difference seems to me that the authors wrote in a world prior to D3.js and its applications to (say) plotting grammars. That in turn brings us to the end-user programming problem - whether users, even expert users, want to learn a new language, - which is what motivates me to use CSCW's lenses of the paper tool and the boundary object.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706731985.271049",
        "parent_user_id": "U05UK5T7LPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jDPt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is new to me, but I see I have retreaded some of HCI's ground, Thank you! I'd come across the Document Lens, which is one of their case studies, but not within the appropriate generalization to non-textual domain objects. The scope seems very similar; for example, navigation and filtering widgets are two familiar categories. The major difference seems to me that the authors wrote in a world prior to D3.js and its applications to (say) plotting grammars. That in turn brings us to the end-user programming problem - whether users, even expert users, want to learn a new language, - which is what motivates me to use CSCW's lenses of the paper tool and the boundary object."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1707186889.096449",
        "edited": {
            "user": "U05UK5T7LPP",
            "ts": "1707187977.000000"
        },
        "client_msg_id": "03bbec5c-5abc-4ea0-9ede-dbed79bdcddc",
        "text": "I see that Beaudouin-Lafon has recently presented instrumental interaction, human-computer partnerships, and communities & common objects as a complementary set of theories. This is fantastically useful to me! In fact I spent my entire ch3. spinning up a *generative theory* from scratch, in order to \"bridge the gap between HCI research and artifact design,\" as they've put it.\n<https:\/\/hal.science\/hal-03434142\/file\/GenTheory%20authorversion.pdf>\n\nAnyway, there is probably some insight that AI \/ game studies - by way of generative design in procedural narrative - can bring to bear on this theory which bears our name. Ha ha, ha.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706731985.271049",
        "parent_user_id": "U05UK5T7LPP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2wnJ9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see that Beaudouin-Lafon has recently presented instrumental interaction, human-computer partnerships, and communities & common objects as a complementary set of theories. This is fantastically useful to me! In fact I spent my entire ch3. spinning up a "
                            },
                            {
                                "type": "text",
                                "text": "generative theory",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from scratch, in order to \"bridge the gap between HCI research and artifact design,\" as they've put it.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/hal.science\/hal-03434142\/file\/GenTheory%20authorversion.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnyway, there is probably some insight that AI \/ game studies - by way of generative design in procedural narrative - can bring to bear on this theory which bears our name. Ha ha, ha."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "When I look at functional notation, I see",
        "files": [
            {
                "id": "F06HR1GU397",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m2H31",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I look at functional notation, I see"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1707193920.817259",
        "client_msg_id": "64cd5e90-29a7-4b2f-9a40-98bf316de22b",
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N"
    },
    {
        "text": "When I look at Flow-based notation, I see",
        "files": [
            {
                "id": "F06H9EG6SE9",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u7rdt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I look at Flow-based notation, I see"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1707194257.260089",
        "client_msg_id": "9bd7ae97-136f-4a2c-90d7-0789e3dc80b0",
        "thread_ts": "1707082341.199819",
        "parent_user_id": "U02NU8FTL5N",
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "U02NU8FTL5N"
                ],
                "count": 1
            }
        ]
    }
]