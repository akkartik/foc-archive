[
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1701452626.872709",
        "client_msg_id": "7c66038e-fe5f-45d7-8fc7-48c3e341495e",
        "text": "I'm curious about the Gemini project, and I like the comparison to Gopher. I wonder if browsers \"Reader mode\" helps people (less distraction, no ads), but could be rendered wildly different per site.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1701265879.364089",
        "parent_user_id": "U0584S0ULF8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qiBTU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious about the Gemini project, and I like the comparison to Gopher. I wonder if browsers \"Reader mode\" helps people (less distraction, no ads), but could be rendered wildly different per site."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U0584S0ULF8"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "We just published a new demo of Plato's PBD subsystem. Much more powerful than our previous implementation.\n\nPBD is historically difficult to generalize and make practical, but it seems that once you take it out of the desktop metaphor and apply it to relational data where queries are more explicit, it does quite well.\n\nI suspect this could become the most prevalent way of automating app logic without coding.",
        "files": [
            {
                "id": "F067UQAP6P9",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U018FSM8G3Z",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "17OZG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We just published a new demo of Plato's PBD subsystem. Much more powerful than our previous implementation.\n\nPBD is historically difficult to generalize and make practical, but it seems that once you take it out of the desktop metaphor and apply it to relational data where queries are more explicit, it does quite well.\n\nI suspect this could become the most prevalent way of automating app logic without coding."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1701453034.659699",
        "edited": {
            "user": "U018FSM8G3Z",
            "ts": "1701456941.000000"
        },
        "client_msg_id": "20b9a46e-59d4-4c9f-be09-572a42ed317d",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U04E5QAD6DD",
                    "U05PESXCC2E"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFV8P4472",
        "type": "message",
        "ts": "1701470140.549499",
        "client_msg_id": "f8ab55ec-bb0a-4b8a-808c-7b9efb882dd9",
        "text": "I'm excited to see more of this. Don't have my head properly wrapped around Kopi yet (especially the `'(expression)` syntax) but I love how concise and powerful it looks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge9db5e1065d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce9db5e1065df82be338b2d831201fc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Yoz Grahame",
            "display_name": "yoz",
            "team": "T5TCAFTA9",
            "name": "yoz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700611076.551799",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Sd\/H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm excited to see more of this. Don't have my head properly wrapped around Kopi yet (especially the "
                            },
                            {
                                "type": "text",
                                "text": "'(expression)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax) but I love how concise and powerful it looks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFV8P4472",
        "type": "message",
        "ts": "1701470153.518899",
        "client_msg_id": "1819636e-6ddb-40ec-b77c-22ed168a2920",
        "text": "Is there a GitHub repo for Kopi, React Desktop, etc?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge9db5e1065d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce9db5e1065df82be338b2d831201fc6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Yoz Grahame",
            "display_name": "yoz",
            "team": "T5TCAFTA9",
            "name": "yoz",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700611076.551799",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lLbrb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a GitHub repo for Kopi, React Desktop, etc?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PESXCC2E",
        "type": "message",
        "ts": "1701472982.199279",
        "client_msg_id": "1fbec9aa-08c7-4f5f-bed1-4d691e268d0f",
        "text": "Thanks Yoz! The recent version of Kopi is in a private repo, which I need to migrate to my public Kopi repo - maybe over the holidays. The '(expression) syntax is like LISP's quotes, meaning you get the unevaluated expression tree back. `'foo` is literally a StringLiteral AST node. I hijacked it to support calling methods so you can write `'sin 30` or `'(toFixed 2) 5` to call methods.\n\nI've only really used it for this purpose (calling methods), so maybe I should just limit it to that. You can say `'foo == 'foo`, which is true, which can be used like atoms\/symbols in other languages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0d9c7dcaa476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-17\/6066889038289_0d9c7dcaa476f559eb42_72.jpg",
            "first_name": "Mike",
            "real_name": "Mike Austin",
            "display_name": "Mike Austin",
            "team": "T5TCAFTA9",
            "name": "mike.austin.1024",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700611076.551799",
        "parent_user_id": "U05PESXCC2E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bVCvX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Yoz! The recent version of Kopi is in a private repo, which I need to migrate to my public Kopi repo - maybe over the holidays. The '(expression) syntax is like LISP's quotes, meaning you get the unevaluated expression tree back. "
                            },
                            {
                                "type": "text",
                                "text": "'foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is literally a StringLiteral AST node. I hijacked it to support calling methods so you can write "
                            },
                            {
                                "type": "text",
                                "text": "'sin 30",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "'(toFixed 2) 5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to call methods.\n\nI've only really used it for this purpose (calling methods), so maybe I should just limit it to that. You can say "
                            },
                            {
                                "type": "text",
                                "text": "'foo == 'foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is true, which can be used like atoms\/symbols in other languages."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]