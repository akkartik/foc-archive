[
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757365241.093709",
        "edited": {
            "user": "U08HU0GT52A",
            "ts": "1757366323.000000"
        },
        "client_msg_id": "b6b8b64f-b195-4bbf-bc6b-df2433767e9c",
        "text": "Hi everyone :wave:\nI’ve been working on a JavaScript implementation of Sussman & Radul’s propagator model and wanted to share some progress + questions. here's the link to the repo: <https:\/\/github.com\/Semi-0\/Propagator>\nI currently have two branches:\n    a. A custom push-based version (works, but `amb` can get weird). (In the AMB branch)\n    b. A more *f*aithful scheduler-based version, closer to the original design. (but amb still acts weirdly when execution gets large) \nIt supports almost all of the original Scheme machinery, and I’ve been experimenting with a *reactive extension* so propagator networks can drive UI updates.\nLately I’ve been exploring some theory: I noticed interesting parallels between *wired diagrams in category theory* and *propagator networks*, and I’m researching how to *separate representation from execution* (syntax vs. scheduler). And how I can perhaps making the propagator more self-reliant as independent programming languages.\nSince I’m pretty new to open-source, I’d really appreciate advice on two fronts:\n1. *Research direction* → does this “wired graph  <->  propagator <-> representation\/execution” connection resonate with anyone? Are there papers or projects I should look at?\n2. *Sharing the code* → what’s the best way to make an infrastructure repo like this easier for others to understand? (Docs? examples? small demos?)\nThanks in advance for any pointers",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "reply_count": 8,
        "reply_users_count": 2,
        "latest_reply": "1757438990.650749",
        "reply_users": [
            "U08HU0GT52A",
            "U08DYF4SEAE"
        ],
        "replies": [
            {
                "user": "U08HU0GT52A",
                "ts": "1757371109.897939"
            },
            {
                "user": "U08DYF4SEAE",
                "ts": "1757430459.603569"
            },
            {
                "user": "U08DYF4SEAE",
                "ts": "1757430639.487819"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757437962.554179"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757438273.449669"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757438285.504399"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757438404.546119"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757438990.650749"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WURc1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone"
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "emoji",
                                "name": "wave",
                                "unicode": "1f44b",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nI’ve been working on a JavaScript implementation of Sussman & Radul’s propagator model and wanted to share some progress + questions. here's the link to the repo: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/Semi-0\/Propagator"
                            },
                            {
                                "type": "text",
                                "text": "\nI currently have two branches:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A custom push-based version (works, but "
                                    },
                                    {
                                        "type": "text",
                                        "text": "amb",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " can get weird). (In the AMB branch)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A more"
                                    },
                                    {
                                        "type": "text",
                                        "text": " f",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "aithful scheduler-based version, closer to the original design. (but amb still acts weirdly when execution gets large) "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 1,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It supports almost all of the original Scheme machinery, and I’ve been experimenting with a "
                            },
                            {
                                "type": "text",
                                "text": "reactive extension",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " so propagator networks can drive UI updates.\nLately I’ve been exploring some theory: I noticed interesting parallels between "
                            },
                            {
                                "type": "text",
                                "text": "wired diagrams in category theory",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "propagator networks",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and I’m researching how to "
                            },
                            {
                                "type": "text",
                                "text": "separate representation from execution",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (syntax vs. scheduler). And how I can perhaps making the propagator more self-reliant as independent programming languages.\nSince I’m pretty new to open-source, I’d really appreciate advice on two fronts:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Research direction",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " → does this “wired graph  <->  propagator <-> representation\/execution” connection resonate with anyone? Are there papers or projects I should look at?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Sharing the code",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " → what’s the best way to make an infrastructure repo like this easier for others to understand? (Docs? examples? small demos?)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks in advance for any pointers"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U05UK5T7LPP",
                    "U06BUK2M2RH"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UMHG81CBH",
        "type": "message",
        "ts": "1757367540.403259",
        "client_msg_id": "1e63c734-3006-4689-8360-7a77f129edcc",
        "text": "Very late to reply but I'm interested too. I'm based in Brussels",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "eeae1e506647",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-03\/6146149791636_eeae1e506647f237c0f9_72.jpg",
            "first_name": "Xavier",
            "real_name": "Xavier Lambein",
            "display_name": "Xavier Lambein",
            "team": "T5TCAFTA9",
            "name": "xlambein",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1753530067.733979",
        "parent_user_id": "U0970TXP62E",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vpklH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very late to reply but I'm interested too. I'm based in Brussels"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U08HU0GT52A",
        "thread_ts": "1757365241.093709",
        "root": {
            "user": "U08HU0GT52A",
            "type": "message",
            "ts": "1757365241.093709",
            "edited": {
                "user": "U08HU0GT52A",
                "ts": "1757366323.000000"
            },
            "client_msg_id": "b6b8b64f-b195-4bbf-bc6b-df2433767e9c",
            "text": "Hi everyone :wave:\nI’ve been working on a JavaScript implementation of Sussman & Radul’s propagator model and wanted to share some progress + questions. here's the link to the repo: <https:\/\/github.com\/Semi-0\/Propagator>\nI currently have two branches:\n    a. A custom push-based version (works, but `amb` can get weird). (In the AMB branch)\n    b. A more *f*aithful scheduler-based version, closer to the original design. (but amb still acts weirdly when execution gets large) \nIt supports almost all of the original Scheme machinery, and I’ve been experimenting with a *reactive extension* so propagator networks can drive UI updates.\nLately I’ve been exploring some theory: I noticed interesting parallels between *wired diagrams in category theory* and *propagator networks*, and I’m researching how to *separate representation from execution* (syntax vs. scheduler). And how I can perhaps making the propagator more self-reliant as independent programming languages.\nSince I’m pretty new to open-source, I’d really appreciate advice on two fronts:\n1. *Research direction* → does this “wired graph  <->  propagator <-> representation\/execution” connection resonate with anyone? Are there papers or projects I should look at?\n2. *Sharing the code* → what’s the best way to make an infrastructure repo like this easier for others to understand? (Docs? examples? small demos?)\nThanks in advance for any pointers",
            "team": "T5TCAFTA9",
            "thread_ts": "1757365241.093709",
            "reply_count": 8,
            "reply_users_count": 2,
            "latest_reply": "1757438990.650749",
            "reply_users": [
                "U08HU0GT52A",
                "U08DYF4SEAE"
            ],
            "replies": [
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757371109.897939"
                },
                {
                    "user": "U08DYF4SEAE",
                    "ts": "1757430459.603569"
                },
                {
                    "user": "U08DYF4SEAE",
                    "ts": "1757430639.487819"
                },
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757437962.554179"
                },
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757438273.449669"
                },
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757438285.504399"
                },
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757438404.546119"
                },
                {
                    "user": "U08HU0GT52A",
                    "ts": "1757438990.650749"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "WURc1",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hi everyone"
                                },
                                {
                                    "type": "text",
                                    "text": " ",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "emoji",
                                    "name": "wave",
                                    "unicode": "1f44b",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\nI’ve been working on a JavaScript implementation of Sussman & Radul’s propagator model and wanted to share some progress + questions. here's the link to the repo: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/Semi-0\/Propagator"
                                },
                                {
                                    "type": "text",
                                    "text": "\nI currently have two branches:\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "A custom push-based version (works, but "
                                        },
                                        {
                                            "type": "text",
                                            "text": "amb",
                                            "style": {
                                                "code": true
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "text": " can get weird). (In the AMB branch)"
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "A more"
                                        },
                                        {
                                            "type": "text",
                                            "text": " f",
                                            "style": {
                                                "bold": true
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "text": "aithful scheduler-based version, closer to the original design. (but amb still acts weirdly when execution gets large) "
                                        }
                                    ]
                                }
                            ],
                            "style": "ordered",
                            "indent": 1,
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "It supports almost all of the original Scheme machinery, and I’ve been experimenting with a "
                                },
                                {
                                    "type": "text",
                                    "text": "reactive extension",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " so propagator networks can drive UI updates.\nLately I’ve been exploring some theory: I noticed interesting parallels between "
                                },
                                {
                                    "type": "text",
                                    "text": "wired diagrams in category theory",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " and "
                                },
                                {
                                    "type": "text",
                                    "text": "propagator networks",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": ", and I’m researching how to "
                                },
                                {
                                    "type": "text",
                                    "text": "separate representation from execution",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " (syntax vs. scheduler). And how I can perhaps making the propagator more self-reliant as independent programming languages.\nSince I’m pretty new to open-source, I’d really appreciate advice on two fronts:\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "Research direction",
                                            "style": {
                                                "bold": true
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "text": " → does this “wired graph  <->  propagator <-> representation\/execution” connection resonate with anyone? Are there papers or projects I should look at?"
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "Sharing the code",
                                            "style": {
                                                "bold": true
                                            }
                                        },
                                        {
                                            "type": "text",
                                            "text": " → what’s the best way to make an infrastructure repo like this easier for others to understand? (Docs? examples? small demos?)"
                                        }
                                    ]
                                }
                            ],
                            "style": "ordered",
                            "indent": 0,
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Thanks in advance for any pointers"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1757371109.897939",
        "client_msg_id": "527DB3D3-BC84-4174-941A-D9855773F8B9",
        "text": "For anyone not already familiar with propagators, here’s a quick refresher:\n\nA propagator network is a collection of small, independent agents connected by cells that hold partial information. Each agent watches its inputs and, whenever it can deduce something new, it updates other cells. Unlike ordinary functions, information can flow in many directions at once — for example, if you know two sides of a right triangle, the Pythagorean propagator can solve for the third no matter which two you provide. This makes propagators a general model for constraints, dataflow, multi-directional reactivity and incremental reasoning.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XeVhl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For anyone not already familiar with propagators, here’s a quick refresher:\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A propagator network is a collection of small, independent agents connected by cells that hold partial information. Each agent watches its inputs and, whenever it can deduce something new, it updates other cells. Unlike ordinary functions, information can flow in many directions at once — for example, if you know two sides of a right triangle, the Pythagorean propagator can solve for the third no matter which two you provide. This makes propagators a general model for constraints, dataflow, multi-directional reactivity"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and incremental reasoning."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1757384167.891349",
        "client_msg_id": "e13600f6-8574-435e-8c34-9baae6710392",
        "text": "<https:\/\/youtu.be\/ekTNV1O9MJA>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757384167.891349",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1757529770.300809",
        "reply_users": [
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "UGWUJUZHT",
                "ts": "1757529741.121889"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1757529770.300809"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/ekTNV1O9MJA",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/ekTNV1O9MJA\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/ekTNV1O9MJA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"PBP Part Basics\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https:\/\/youtu.be\/ekTNV1O9MJA",
                "fallback": "YouTube Video: PBP Part Basics",
                "title": "PBP Part Basics",
                "title_link": "https:\/\/youtu.be\/ekTNV1O9MJA",
                "author_name": "Programming Simplicity",
                "author_link": "https:\/\/www.youtube.com\/@programmingsimplicity2980",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YioWF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/ekTNV1O9MJA"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "large_blue_circle",
                "users": [
                    "U08HU0GT52A"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1757396891.794039",
        "client_msg_id": "E534C18C-142A-4DE8-B88E-EE0C0839FF69",
        "text": "How is this different from logic programming, with the similar property that information can “flow in many directions at once”?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9A4v\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How is this different from logic programming, with the similar property that information can “flow in many directions at once”?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thread-please",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]