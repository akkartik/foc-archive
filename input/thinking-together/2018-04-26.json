[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1524758573.000809",
        "text": "I wasn't judging when I used the word \"hack\"! In fact, if I was judging, I'd point out the positive aspect of applying creativity to find a new use case for something that was built with a different use case in mind. For me that is the original definition of what \"hack\" means, before movie culture turned it into this \"bad actor is breaking the rules and causing trouble\" definition.\n\nSo I guess the difference between \"hack\" and \"technique\" for me is pretty small. Maybe a technique is a hack that is broadly accepted as a valid way of doing things, while a hack can be every creative repurposing of something, which sometimes isn't necessary useful, but instead has other qualities, like being surprising, impressive, or just fun.\n\nThe point being: you are using a tool that allows creative repurposing. Many simple apps these days are so sophisticated that they can only be used for one specific use case, and repurposing them for anything else is just too hard to do or doesn't yield any benefits for the user.\n\nIt seems to me that a lot of creative domains have settled on well-known tools that are specific enough to be easily understood and yet generic enough to allow creative repurposing.\n\nEvery image editing software has certain tools that are expected. By composing them (for instance in using them on the same artwork in a certain order) users can create infinite amounts of different results with them. Same with video editing or 3D modeling or music production.\n\nI'm not an expert in any of these domains. With my basic understanding of music production I see the same patterns there: There are certain well-understood tools (e.g. sound sources based on additive or subtractive synthesis or sample playback) with well-defined parameters (e.g. ADSR curves) and well-established UI\/UX patterns (e.g. placing MIDI notes on a grid or scrubbing through a waveform representation of a sample) composable in sequence or in parallel to generate more complex sounds, aka music.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lbx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wasn't judging when I used the word \"hack\"! In fact, if I was judging, I'd point out the positive aspect of applying creativity to find a new use case for something that was built with a different use case in mind. For me that is the original definition of what \"hack\" means, before movie culture turned it into this \"bad actor is breaking the rules and causing trouble\" definition.\n\nSo I guess the difference between \"hack\" and \"technique\" for me is pretty small. Maybe a technique is a hack that is broadly accepted as a valid way of doing things, while a hack can be every creative repurposing of something, which sometimes isn't necessary useful, but instead has other qualities, like being surprising, impressive, or just fun.\n\nThe point being: you are using a tool that allows creative repurposing. Many simple apps these days are so sophisticated that they can only be used for one specific use case, and repurposing them for anything else is just too hard to do or doesn't yield any benefits for the user.\n\nIt seems to me that a lot of creative domains have settled on well-known tools that are specific enough to be easily understood and yet generic enough to allow creative repurposing.\n\nEvery image editing software has certain tools that are expected. By composing them (for instance in using them on the same artwork in a certain order) users can create infinite amounts of different results with them. Same with video editing or 3D modeling or music production.\n\nI'm not an expert in any of these domains. With my basic understanding of music production I see the same patterns there: There are certain well-understood tools (e.g. sound sources based on additive or subtractive synthesis or sample playback) with well-defined parameters (e.g. ADSR curves) and well-established UI\/UX patterns (e.g. placing MIDI notes on a grid or scrubbing through a waveform representation of a sample) composable in sequence or in parallel to generate more complex sounds, aka music."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1524759704.000655",
        "client_msg_id": "DE70FF7F-5251-489C-9985-2E5672D32F1E",
        "text": "So for me this boils down to: \n\nIf the tools we create are too abstract, e.g. just providing a generic programming language, they are maximally generic, can apply to every use case, but lack any connection points to the domain knowledge a specific user has, therefore the learning curve is too steep and regular users won’t adopt this tool.\n\nIf the tool is too specific, e.g. implementing a flight booking process with all bells and whistles, it is maximally specialized, only applies to this exact use case and is hard to repurpose, but is easily understood, and can be used by non-programmers, but they can’t use it for anything else.\n\nIf we want to enable non-programmers to create software we need to find a sweet spot in between, allowing them to find a connection point to understand what the tool can be used for in their domain, enabling them to creatively repurpose it for what they want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vd6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So for me this boils down to: \n\nIf the tools we create are too abstract, e.g. just providing a generic programming language, they are maximally generic, can apply to every use case, but lack any connection points to the domain knowledge a specific user has, therefore the learning curve is too steep and regular users won’t adopt this tool.\n\nIf the tool is too specific, e.g. implementing a flight booking process with all bells and whistles, it is maximally specialized, only applies to this exact use case and is hard to repurpose, but is easily understood, and can be used by non-programmers, but they can’t use it for anything else.\n\nIf we want to enable non-programmers to create software we need to find a sweet spot in between, allowing them to find a connection point to understand what the tool can be used for in their domain, enabling them to creatively repurpose it for what they want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1524809510.000076",
        "text": "Yes, I think creative repurposing is what makes a hack a hack.  As the repurposing becomes less creative and more standard, the hack becomes a technique.\n\nIn finding the tool reuse sweetspot, consider how the web (and for programming, Stack Overflow) has altered the calculus.  Looking over my browser history, I'll venture that Git would have not been nearly as sucessful without it.\n\nConnection, not raw computation, gives a computer its value.  Embodiment, not raw cognition, gives intellegence its agency.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "krv5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I think creative repurposing is what makes a hack a hack.  As the repurposing becomes less creative and more standard, the hack becomes a technique.\n\nIn finding the tool reuse sweetspot, consider how the web (and for programming, Stack Overflow) has altered the calculus.  Looking over my browser history, I'll venture that Git would have not been nearly as sucessful without it.\n\nConnection, not raw computation, gives a computer its value.  Embodiment, not raw cognition, gives intellegence its agency."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]