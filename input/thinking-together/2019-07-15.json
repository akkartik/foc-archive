[
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1563177110.280500",
        "client_msg_id": "77f68459-b352-44ed-a52c-5fe2fc44cbb0",
        "text": "Autocompletion in editors and IDEs. Where does it work and where does it fail?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563177110.280500",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1563211430.304500",
        "reply_users": [
            "UC6997THT",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UC6997THT",
                "ts": "1563177549.280600"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1563211430.304500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2UGFs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Autocompletion in editors and IDEs. Where does it work and where does it fail?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1563177549.280600",
        "edited": {
            "user": "UC6997THT",
            "ts": "1563178752.000000"
        },
        "client_msg_id": "4c14434d-88fa-4e03-af2c-895c65ffbbbb",
        "text": "I find autocompletion for API stuff pretty great. I love that I can browse the API and an object's properties or methods and their arguments and types.\n\nI'm not convinced autocompletion of things like quotes, HTML tags, parenthesis, brackets, is a win yet. It's possible there is some sweet design I'm unaware of but in all the editors I use often I find this particular feature something I fight with to the point that if it's not an net loss it's at least not net positive. I suppose by that argument it actually is a net loss since having to deal with it is worse than not.\n\nIf it's not clear what I mean I type a quote `\"` and the editor\/IDE immediately inserts two quotes `\"\"` and puts the cursor in-between. I find often the editors I use get it wrong and it's several keystrokes to get the editor to insert what I want, not what it wants.\n\nAnyone else have similar experiences or see designs that \"just work\"? AFAICT this is a problem with structured editors in general as they can't tell what I want to type. They can only tell what keys I press. So if I typed `{` but meant to type `[` they could have already inserted 3 to 5 lines to code which now have to manually delete. They might work if press undo but the natural thing to do when I press the wrong key is to press backspace but if IDE inserted a bunch of stuff it has no way to know if I want to backspace over one of the many character it just inserted or if just want to backspace over the one character I thought it was going to insert.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563177110.280500",
        "parent_user_id": "UC6997THT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find autocompletion for API stuff pretty great. I love that I can browse the API and an object's properties or methods and their arguments and types.\n\nI'm not convinced autocompletion of things like quotes, HTML tags, parenthesis, brackets, is a win yet. It's possible there is some sweet design I'm unaware of but in all the editors I use often I find this particular feature something I fight with to the point that if it's not an net loss it's at least not net positive. I suppose by that argument it actually is a net loss since having to deal with it is worse than not.\n\nIf it's not clear what I mean I type a quote "
                            },
                            {
                                "type": "text",
                                "text": "\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the editor\/IDE immediately inserts two quotes "
                            },
                            {
                                "type": "text",
                                "text": "\"\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and puts the cursor in-between. I find often the editors I use get it wrong and it's several keystrokes to get the editor to insert what I want, not what it wants.\n\nAnyone else have similar experiences or see designs that \"just work\"? AFAICT this is a problem with structured editors in general as they can't tell what I want to type. They can only tell what keys I press. So if I typed "
                            },
                            {
                                "type": "text",
                                "text": "{",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but meant to type "
                            },
                            {
                                "type": "text",
                                "text": "[",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " they could have already inserted 3 to 5 lines to code which now have to manually delete. They might work if press undo but the natural thing to do when I press the wrong key is to press backspace but if IDE inserted a bunch of stuff it has no way to know if I want to backspace over one of the many character it just inserted or if just want to backspace over the one character I thought it was going to insert."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKT951SPR",
        "type": "message",
        "ts": "1563179785.281000",
        "client_msg_id": "23fc2204-2a10-4120-b883-ce29bce71023",
        "text": "Thanks <@UBN9AFS0N>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfcb418e17ca",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ffcb418e17cac2873d611c2b8d8d891c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Benjohn Barnes",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "benjohn",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562895704.212400",
        "parent_user_id": "UJK8MKYAZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b\/WuT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1563192586.281400",
        "client_msg_id": "e325e3ef-ce1f-44c4-98e4-93ab53067669",
        "text": "sure, but it seems like now there are two legal ways to display the same information. I agree most of the time, this conversation will make things more clear.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B3W9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sure, but it seems like now there are two legal ways to display the same information. I agree most of the time, this conversation will make things more clear."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1563192694.281600",
        "client_msg_id": "df09918f-87e0-486b-8d3b-49f4110a651d",
        "text": "I hold out hope that FRP is basically the answer if we add some visualizations that make it more understandable. But that's a big if",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562990343.225500",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IC6B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hold out hope that FRP is basically the answer if we add some visualizations that make it more understandable. But that's a big if"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1563192781.281800",
        "client_msg_id": "138890ba-38a4-4fe6-8212-5111fba043e3",
        "text": "<@UJNJQD2AC> with projectional syntax sugar code is always displayed a certain way. You can’t write it so that it’s in the other way (it will automatically get sugared if it fits the pattern).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FFf58",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " with projectional syntax sugar code is always displayed a certain way. You can’t write it so that it’s in the other way (it will automatically get sugared if it fits the pattern)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1563193281.282000",
        "client_msg_id": "4016644a-b71f-462a-ab58-25c50302785b",
        "text": "<@U79HM6726> how does it display outside the structural editor? E.g GitHub?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RuRkF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U79HM6726"
                            },
                            {
                                "type": "text",
                                "text": " how does it display outside the structural editor? E.g GitHub?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1563193308.282200",
        "client_msg_id": "14aa6120-3808-4c90-b1a6-e5f5286017fc",
        "text": "<@UJNJQD2AC> yeah we’ll “just” have to reimplement GitHub too..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vF7\/l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJNJQD2AC"
                            },
                            {
                                "type": "text",
                                "text": " yeah we’ll “just” have to reimplement GitHub too.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1563193690.282400",
        "client_msg_id": "4d2b8805-6f42-4c52-b5c1-b396690ba140",
        "text": "To be clear, I think the \"suger\" is great.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563013870.229000",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U=G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To be clear, I think the \"suger\" is great."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1563194992.283200",
        "client_msg_id": "d3960b8e-daa3-4eb2-9ea6-2c21553a712a",
        "text": "So, given the code:\n\n```\nclass Thing {\n\nprivate Baz baz;\nprivate String s;\n\nFoo doStuff(Bar bar) {\n   \/\/ what goes here\n}\n```\n\nI’d want to synthesize:\n\n```\n    Foo doStuff(Bar bar) {\n          Frob frob = new Frob(s);\n          return new Foo(bar, baz, frob);\n    } \n```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tY0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, given the code:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class Thing {\n\nprivate Baz baz;\nprivate String s;\n\nFoo doStuff(Bar bar) {\n   \/\/ what goes here\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI’d want to synthesize:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    Foo doStuff(Bar bar) {\n          Frob frob = new Frob(s);\n          return new Foo(bar, baz, frob);\n    } \n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1563195073.283400",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1563196401.000000"
        },
        "client_msg_id": "ff0f57e6-58c9-470c-8090-9412a9cf3097",
        "text": "The helpful part, or what I think goes beyond what normal autocomplete offers, is detecting that I need a `Frob`, and can get one, given what I have. In general, if it’s a common type like `String`, you’ll probably have to introduce a template, or placeholder argument, as you won’t be able to know which `String` is appropriate. But for more specific types, you have a reasonable chance of guessing correctly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wLku",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The helpful part, or what I think goes beyond what normal autocomplete offers, is detecting that I need a "
                            },
                            {
                                "type": "text",
                                "text": "Frob",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and can get one, given what I have. In general, if it’s a common type like "
                            },
                            {
                                "type": "text",
                                "text": "String",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you’ll probably have to introduce a template, or placeholder argument, as you won’t be able to know which "
                            },
                            {
                                "type": "text",
                                "text": "String",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is appropriate. But for more specific types, you have a reasonable chance of guessing correctly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1563195151.283700",
        "client_msg_id": "30fcfe65-5c91-4d23-92d7-eba307638f77",
        "text": "Kartik, I don’t think this is necessarily tied to OO, though my context is a day job in Java. Hoogle shows that you often want to look up a function by type, and this is a different guise of that idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EXn0B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kartik, I don’t think this is necessarily tied to OO, though my context is a day job in Java. Hoogle shows that you often want to look up a function by type, and this is a different guise of that idea."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1563196179.292000",
        "client_msg_id": "E4484758-3D24-4CAC-BA20-817CDC77EDDB",
        "text": "This reminds me a lot of _typed holes_ in functional languages like Haskell, where you still write code, but place an underscore `_` where you want the compiler to tell you which type it expects. Details and example here: <https:\/\/wiki.haskell.org\/GHC\/Typed_holes> \n\nAs far as I know all you get from Haskell at this point is the expected type and a list of types “in scope” at that point. Idris, I believe, is a language that takes this further and tries to suggest what code you’re likely to write, and also supports this with a feature called “interactive editing”. I haven’t used Idris, so I don’t know how good it is at inferring the correct type if it is not trivial and needs some indirection, as in your example.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n6Hf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This reminds me a lot of "
                            },
                            {
                                "type": "text",
                                "text": "typed holes",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in functional languages like Haskell, where you still write code, but place an underscore "
                            },
                            {
                                "type": "text",
                                "text": "_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where you want the compiler to tell you which type it expects. Details and example here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.haskell.org\/GHC\/Typed_holes"
                            },
                            {
                                "type": "text",
                                "text": " \n\nAs far as I know all you get from Haskell at this point is the expected type and a list of types “in scope” at that point. Idris, I believe, is a language that takes this further and tries to suggest what code you’re likely to write, and also supports this with a feature called “interactive editing”. I haven’t used Idris, so I don’t know how good it is at inferring the correct type if it is not trivial and needs some indirection, as in your example."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJNJQD2AC",
        "type": "message",
        "ts": "1563198029.292500",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1563198249.000000"
        },
        "client_msg_id": "ce05bf1d-9120-4389-ba39-72cfa6b9e752",
        "text": "Agreed Type holes offer something here, stefan would know better then me. But it always bottoms out at the developer understanding the primitives there directing towards a customer facing problem. The types in this example aren't personally telling me anything about the problem.\n\nIf the types can be dropped in without any consideration, then i would argue we have a created a bad set of abstractions. Or  maybe i should say, being able to know the range of types doesn't tell you how they should  be constructed. If it does, then we just have pushed the problem downstream into \"how should they be constructed\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd7dd06bd18b",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8d7dd06bd18b8fce6a4c04dfede7f616.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Drewverlee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "drew.verlee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FYqKk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed Type holes offer something here, stefan would know better then me. But it always bottoms out at the developer understanding the primitives there directing towards a customer facing problem. The types in this example aren't personally telling me anything about the problem.\n\nIf the types can be dropped in without any consideration, then i would argue we have a created a bad set of abstractions. Or  maybe i should say, being able to know the range of types doesn't tell you how they should  be constructed. If it does, then we just have pushed the problem downstream into \"how should they be constructed\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1563206313.300500",
        "client_msg_id": "95c67527-517b-48a6-92e8-089eace21c81",
        "text": "That's what I like about the sloppy programming approach compared to the typed holes approach. You can create more than just expressions because you don't need a type hole, and you get the programmer's free-text query as an additional input to guide the search. \"return new Foo(bar, baz, new Frob(s))\" is the kind of result that even their initial algorithm could produce given a query like \"return foo\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Isqm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's what I like about the sloppy programming approach compared to the typed holes approach. You can create more than just expressions because you don't need a type hole, and you get the programmer's free-text query as an additional input to guide the search. \"return new Foo(bar, baz, new Frob(s))\" is the kind of result that even their initial algorithm could produce given a query like \"return foo\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1563206708.302300",
        "client_msg_id": "D7BF8066-6574-4907-90A5-8ECFFFCCA70A",
        "text": "This also ties into discussions about type systems we had in other threads. To make up a slightly more specific example: if, say, you’re working on a graphics library and you implement a function to draw a rectangle, you'll likely want to pass in parameters that describe the bounds of the rectangle. \n\nOn the lowest level, these could be four float values for x, y, width, and height. \nBut on a higher level, you could also pass in two vectors: position and size; and these could be of the same type (vector) or of different types (point, dimensions). \nAnd on an even higher level you could just pass in a single parameter frame.\n\nAPI design and the chosen types and data structures will play a huge part in how well auto completion and similar tools can make useful suggestions for you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0NTX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This also ties into discussions about type systems we had in other threads. To make up a slightly more specific example: if, say, you’re working on a graphics library and you implement a function to draw a rectangle, you'll likely want to pass in parameters that describe the bounds of the rectangle. \n\nOn the lowest level, these could be four float values for x, y, width, and height. \nBut on a higher level, you could also pass in two vectors: position and size; and these could be of the same type (vector) or of different types (point, dimensions). \nAnd on an even higher level you could just pass in a single parameter frame.\n\nAPI design and the chosen types and data structures will play a huge part in how well auto completion and similar tools can make useful suggestions for you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1563207633.302700",
        "client_msg_id": "8d8b6326-2782-45bb-99bb-c2c5482e51b4",
        "text": "<@UKJGU23KP> OO magnifies the issue, but I think the underlying problem is more fundamental: if you widen a road it adds to the incentive to buy more cars. When creating tools for the long term it's worth thinking about such secondary incentives. Tools are easily turned into externalities.\n\nI think the right place for tools is to make programming more accessible to newcomers. But they should be explicitly designed to be outgrown. Otherwise making a tool to support say functions with 10 arguments is just an invitation for people to create functions with 20 arguments.\n\nIn particular, tools that solve pain points in today's mainstream stacks won't always be part of the 'future of programming' (i.e. escape the evolutionary dead end the mainstream finds itself in). Sometimes changing two things at once may give better results. But you may not be able to use such a solution at work.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cfn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " OO magnifies the issue, but I think the underlying problem is more fundamental: if you widen a road it adds to the incentive to buy more cars. When creating tools for the long term it's worth thinking about such secondary incentives. Tools are easily turned into externalities.\n\nI think the right place for tools is to make programming more accessible to newcomers. But they should be explicitly designed to be outgrown. Otherwise making a tool to support say functions with 10 arguments is just an invitation for people to create functions with 20 arguments.\n\nIn particular, tools that solve pain points in today's mainstream stacks won't always be part of the 'future of programming' (i.e. escape the evolutionary dead end the mainstream finds itself in). Sometimes changing two things at once may give better results. But you may not be able to use such a solution at work."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1563211430.304500",
        "client_msg_id": "DE105215-2E06-48E4-84AA-5C8E38A79E8D",
        "text": "two extremely successful plugins are parinfer <https:\/\/youtu.be\/K0Tsa3smr1w> for lisp (it actually backs it up with an algebra) and Emmet for the html stuff you describe: <https:\/\/emmet.io\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563177110.280500",
        "parent_user_id": "UC6997THT",
        "attachments": [
            {
                "title": "Emmet — the essential toolkit for web-developers",
                "title_link": "https:\/\/emmet.io\/",
                "fallback": "Emmet — the essential toolkit for web-developers",
                "image_url": "http:\/\/emmet.io\/i\/logo-large.png",
                "from_url": "https:\/\/emmet.io\/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 10343,
                "service_icon": "https:\/\/emmet.io\/-\/3755353140\/favicon.ico",
                "service_name": "emmet.io",
                "id": 1,
                "original_url": "https:\/\/emmet.io\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g39p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "two extremely successful plugins are parinfer "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/K0Tsa3smr1w"
                            },
                            {
                                "type": "text",
                                "text": " for lisp (it actually backs it up with an algebra) and Emmet for the html stuff you describe: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/emmet.io\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1563217138.305800",
        "client_msg_id": "B1C7E238-6632-4CD6-BB68-A62FE24E7326",
        "text": "can't believe I forgot this but you may also be interested in minikanren ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b9wBM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "can't believe I forgot this but you may also be interested in minikanren"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1563218034.306200",
        "client_msg_id": "a18df3b2-7a38-4d88-bb20-b82b7b64e423",
        "text": "Related to the above thread (<https:\/\/tabnine.com\/blog\/deep>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "title": "Autocompletion with deep learning",
                "title_link": "https:\/\/tabnine.com\/blog\/deep",
                "text": "TabNine is the all-language autocompleter. It uses machine learning to provide responsive, reliable, and relevant suggestions.",
                "fallback": "Autocompletion with deep learning",
                "from_url": "https:\/\/tabnine.com\/blog\/deep",
                "service_icon": "https:\/\/tabnine.com\/static\/favicon.png",
                "service_name": "tabnine.com",
                "id": 1,
                "original_url": "https:\/\/tabnine.com\/blog\/deep"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fvue",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Related to the above thread ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tabnine.com\/blog\/deep"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UKJGU23KP",
        "type": "message",
        "ts": "1563218071.306400",
        "client_msg_id": "d857675e-5faa-4f31-82be-cf996dc6638e",
        "text": "I’m literally playing around with the idea in prolog and clojure’s `core.logic`..curious why you specifically mention miniKanren?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gfceba60ff0c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6fceba60ff0c90dc32cbff29054b02c2.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Justin Blank",
            "display_name": "Justin Blank",
            "team": "T5TCAFTA9",
            "name": "justin.blank",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YQY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m literally playing around with the idea in prolog and clojure’s "
                            },
                            {
                                "type": "text",
                                "text": "core.logic",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "..curious why you specifically mention miniKanren?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3EE9WR1",
        "type": "message",
        "ts": "1563219442.306600",
        "edited": {
            "user": "UL3EE9WR1",
            "ts": "1563219454.000000"
        },
        "client_msg_id": "8dbbacf9-e9bd-4ea3-8961-797e5a60fb9a",
        "text": "just throwing another current project in the ring - <https:\/\/re-find.it\/> is a project that uses Clojure's specs (predicate-based contracts, not types)  and a set of input\/output values to find possible function matches",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gb6b8c893530",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4b6b8c8935300db9089a9277d7e76a88.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Alex Miller",
            "display_name": "Alex Miller",
            "team": "T5TCAFTA9",
            "name": "alex678",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1563121360.271000",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KML2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just throwing another current project in the ring - "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/re-find.it\/"
                            },
                            {
                                "type": "text",
                                "text": " is a project that uses Clojure's specs (predicate-based contracts, not types)  and a set of input\/output values to find possible function matches"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKJGU23KP",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJTHWNH2T",
        "type": "message",
        "ts": "1563249275.307400",
        "client_msg_id": "4fb7a14d-de33-47c7-ad33-e8747b14dc10",
        "text": "Fair enough. Excited to see the possibilities",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g540add01944",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b540add019442ca4a6f3acf8a99024b1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "",
            "real_name": "Deklan Webster",
            "display_name": "Deklan Webster",
            "team": "T5TCAFTA9",
            "name": "deklanw",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562990343.225500",
        "parent_user_id": "UJTHWNH2T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0XGSJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair enough. Excited to see the possibilities"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]