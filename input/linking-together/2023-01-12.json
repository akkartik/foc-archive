[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1673515136.291669",
        "client_msg_id": "4e22348d-d803-40bf-9c37-69365ff1ae52",
        "text": "<https:\/\/www.unison.cloud\/|Unison Cloud> is looking for beta users, <https:\/\/unison-lang.org\/at-work|fill out this short questionaire> if interested\n\n&gt; Unison Cloud offers a managed pool of cloud-based Unison nodes that can execute distributed computations. There's no separate packaging or deployment step. To use it, just call a function, passing it the distributed computation you want to run. For instance, the below example forks two parallel computations on randomly chosen locations in the default pool. Calling <https:\/\/share.unison-lang.org\/@unison\/p\/code\/latest\/namespaces\/public\/cloud\/latest|cloud.run> will serialize this computation, sync any missing dependencies on the fly, and run it in the cloud.\n&gt;  \n&gt; main = do\n&gt;  r = cloud.run do\n&gt;   t1 = Remote.forkAt !pool.default '(1 + 1)\n&gt;   t2 = Remote.forkAt !pool.default '(2 + 2)\n&gt;   Remote.await t1 + Remote.await t2\n&gt;  printLine (\"Result was: \" ++ Nat.toText r)\n&gt;  \n&gt; The <https:\/\/share.unison-lang.org\/@unison\/p\/code\/latest\/namespaces\/public\/cloud\/latest|current unison.cloud API> is tailored for batch computations (as in Hadoop or Spark or miscellaneous ETL jobs), but we plan to add support for launching async background jobs, recurring or scheduled jobs, resilient long-running workflows (as in <https:\/\/temporal.io|Temporal>), and *autoscaled resilient microservices*.\n&gt;  \n&gt; We'd like to work with folks who have ideas for use cases in any of these areas and who are willing to work with us on some pilot project using Unison and Unison Cloud.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SAMXY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.unison.cloud\/",
                                "text": "Unison Cloud"
                            },
                            {
                                "type": "text",
                                "text": " is looking for beta users, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/unison-lang.org\/at-work",
                                "text": "fill out this short questionaire"
                            },
                            {
                                "type": "text",
                                "text": " if interested\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unison Cloud offers a managed pool of cloud-based Unison nodes that can execute distributed computations. There's no separate packaging or deployment step. To use it, just call a function, passing it the distributed computation you want to run. For instance, the below example forks two parallel computations on randomly chosen locations in the default pool. Calling "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/share.unison-lang.org\/@unison\/p\/code\/latest\/namespaces\/public\/cloud\/latest",
                                "text": "cloud.run",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": " will serialize this computation, sync any missing dependencies on the fly, and run it in the cloud.\n \nmain = do\n r = cloud.run do\n  t1 = Remote.forkAt !pool.default '(1 + 1)\n  t2 = Remote.forkAt !pool.default '(2 + 2)\n  Remote.await t1 + Remote.await t2\n printLine (\"Result was: \" ++ Nat.toText r)\n \nThe "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/share.unison-lang.org\/@unison\/p\/code\/latest\/namespaces\/public\/cloud\/latest",
                                "text": "current unison.cloud API",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": " is tailored for batch computations (as in Hadoop or Spark or miscellaneous ETL jobs), but we plan to add support for launching async background jobs, recurring or scheduled jobs, resilient long-running workflows (as in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/temporal.io",
                                "text": "Temporal"
                            },
                            {
                                "type": "text",
                                "text": "), and "
                            },
                            {
                                "type": "text",
                                "text": "autoscaled resilient microservices",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n \nWe'd like to work with folks who have ideas for use cases in any of these areas and who are willing to work with us on some pilot project using Unison and Unison Cloud."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0242H3GHHT",
        "type": "message",
        "ts": "1673536210.029319",
        "client_msg_id": "EC7040F7-4AE3-4C85-A127-FF3AA397521B",
        "text": "I hear that, if your friends all happen to be philosphers, finding a date and picking a seating arrangement is only the start of your troubles :yum: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gd6d3825871f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/d6d3825871fcd174c36fe3eada6d5fce.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0005-72.png",
            "first_name": "",
            "real_name": "Nils Berg",
            "display_name": "Nils Berg",
            "team": "T5TCAFTA9",
            "name": "berg.nils",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1672954090.155139",
        "parent_user_id": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b35fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hear that, if your friends all happen to be philosphers, finding a date and picking a seating arrangement is only the start of your troubles "
                            },
                            {
                                "type": "emoji",
                                "name": "yum",
                                "unicode": "1f60b"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UK3LH8CF5",
                    "UA14TGLTC",
                    "U023V63MF6V"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1673541112.784699",
        "client_msg_id": "A2029EA6-FED1-4E79-AA99-F095A82A078F",
        "text": "&gt; An online IDE for visual programming in Prolog\n<https:\/\/github.com\/toblotron\/praxis-ide|https:\/\/github.com\/toblotron\/praxis-ide>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1673541112.784699",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1673552856.473889",
        "reply_users": [
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U02U0AS3J49",
                "ts": "1673552856.473889"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ipLg",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An online IDE for visual programming in Prolog"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/toblotron\/praxis-ide",
                                "text": "https:\/\/github.com\/toblotron\/praxis-ide"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U02U0AS3J49"
                ],
                "count": 1
            },
            {
                "name": "fire",
                "users": [
                    "U02JQA5FY5C"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1673552856.473889",
        "client_msg_id": "da91ecf6-92ba-4cf7-a649-0cf1394ba4b1",
        "text": "I'm currently working on adding lists to my blockly-based IDE for s(CASP). But it restricts people to unary and binary predicates, so it's not applicable to a real Prolog language, yet. I keep thinking it might be worth building a block language for generic prologs, if I could come up with a decent way of letting the user generate n-ary predicates. Seeing any uptake on Praxis?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1673541112.784699",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3CL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm currently working on adding lists to my blockly-based IDE for s(CASP). But it restricts people to unary and binary predicates, so it's not applicable to a real Prolog language, yet. I keep thinking it might be worth building a block language for generic prologs, if I could come up with a decent way of letting the user generate n-ary predicates. Seeing any uptake on Praxis?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1673581502.484009",
        "client_msg_id": "fc24f6a6-17c0-43a3-9393-cf41d2de4967",
        "text": "Nice use cases and solutions for adding just a tiny amount of visual notation to mostly text programs.\n\n<https:\/\/www.youtube.com\/watch?v=8htgAxJuK5c>\n<https:\/\/blog.visr.pl\/posts\/intro>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1673581502.484009",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1673595697.142679",
        "reply_users": [
            "U0296ACR13M"
        ],
        "replies": [
            {
                "user": "U0296ACR13M",
                "ts": "1673595697.142679"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=8htgAxJuK5c",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/8htgAxJuK5c\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/8htgAxJuK5c?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Adding Interactive Visual Syntax to Textual Code\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=8htgAxJuK5c",
                "fallback": "YouTube Video: Adding Interactive Visual Syntax to Textual Code",
                "title": "Adding Interactive Visual Syntax to Textual Code",
                "title_link": "https:\/\/www.youtube.com\/watch?v=8htgAxJuK5c",
                "author_name": "Leif Andersen",
                "author_link": "https:\/\/www.youtube.com\/@AndersenLeif",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yQC4t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice use cases and solutions for adding just a tiny amount of visual notation to mostly text programs.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=8htgAxJuK5c"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/blog.visr.pl\/posts\/intro"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U0296ACR13M",
                    "U01LCRM5RT7"
                ],
                "count": 2
            },
            {
                "name": "eyes",
                "users": [
                    "UJBAJNFLK",
                    "UA14TGLTC",
                    "U01LCRM5RT7"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1673595697.142679",
        "edited": {
            "user": "U0296ACR13M",
            "ts": "1673595762.000000"
        },
        "client_msg_id": "cdf1e69f-e181-49ca-b765-cb7deac62a12",
        "text": "Very interesting stuff. Have been thinking about something like this my self as well. The author has another interesting video. The interesting stuff starts at this timestamp: <https:\/\/youtu.be\/l0GfMs82PvU?t=1421>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "59de929720a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-09-08\/4075674207584_59de929720a2fe0a13d8_72.jpg",
            "first_name": "",
            "real_name": "Jarno Montonen",
            "display_name": "Jarno Montonen",
            "team": "T5TCAFTA9",
            "name": "jarno.montonen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1673581502.484009",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/l0GfMs82PvU?t=1421",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/l0GfMs82PvU\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/l0GfMs82PvU?start=1421&feature=oembed&start=1421&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Adding Visual and Interactive Syntax to Textual Programs (Defense Talk)\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/l0GfMs82PvU?t=1421",
                "fallback": "YouTube Video: Adding Visual and Interactive Syntax to Textual Programs (Defense Talk)",
                "title": "Adding Visual and Interactive Syntax to Textual Programs (Defense Talk)",
                "title_link": "https:\/\/youtu.be\/l0GfMs82PvU?t=1421",
                "author_name": "Leif Andersen",
                "author_link": "https:\/\/www.youtube.com\/@AndersenLeif",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1ZI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting stuff. Have been thinking about something like this my self as well. The author has another interesting video. The interesting stuff starts at this timestamp: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/l0GfMs82PvU?t=1421"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]