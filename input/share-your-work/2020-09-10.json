[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1599733199.206900",
        "client_msg_id": "cbc244dc-ece4-46d2-a786-f0ee886d9d30",
        "text": "<@U016VUZGUUQ> I was thinking about cut &amp; paste with overlapping ranges (which I interpreted as something we talked about above), considering the selection to be one of the ranges. My comment was meant conceptually, not talking about implementation. There are many different ways to implement it, and it doesn't have to end up in an actual tree data structure, but conceptually it seems to me that there is a line that's crossed when you need to deal with overlapping ranges where you cross over into a different complexity class.\n\nIf I'd be better at math, I'd probably be able to explain that better with algebraic structures and the operations defined on them. I think it has to do with the total order requirement on the character sequence, which makes ranges work, but then as soon as you start handling ranges as their own entities with their own operations defined on them, you are introducing another… hmm… _layer_ that has different requirements. And that's what I mean by hierarchy — layers are _above_ the sequence conceptually and allow certain operations, doesn't matter how you implement them.\n\nAh, well, that probably doesn't help, sorry. I wish I could explain it better. Right now it just _feels_ to me that there are some use cases, like cut &amp; paste of arbitrary ranges which don't correspond exactly to layer range boundaries, that can't be represented unambiguously with a pure linear sequence + a set of ranges into that sequence. It could probably be worked around though with some heuristics that'll translate the edge cases into weird\/unintuitive behavior from the user's perspective, and perhaps that's totally acceptable.\n\nBut I'd love to be proven wrong and maybe there's a better way! This would solve one of my current problems too…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgAK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " I was thinking about cut & paste with overlapping ranges (which I interpreted as something we talked about above), considering the selection to be one of the ranges. My comment was meant conceptually, not talking about implementation. There are many different ways to implement it, and it doesn't have to end up in an actual tree data structure, but conceptually it seems to me that there is a line that's crossed when you need to deal with overlapping ranges where you cross over into a different complexity class.\n\nIf I'd be better at math, I'd probably be able to explain that better with algebraic structures and the operations defined on them. I think it has to do with the total order requirement on the character sequence, which makes ranges work, but then as soon as you start handling ranges as their own entities with their own operations defined on them, you are introducing another… hmm… "
                            },
                            {
                                "type": "text",
                                "text": "layer",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that has different requirements. And that's what I mean by hierarchy — layers are "
                            },
                            {
                                "type": "text",
                                "text": "above",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the sequence conceptually and allow certain operations, doesn't matter how you implement them.\n\nAh, well, that probably doesn't help, sorry. I wish I could explain it better. Right now it just "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to me that there are some use cases, like cut & paste of arbitrary ranges which don't correspond exactly to layer range boundaries, that can't be represented unambiguously with a pure linear sequence + a set of ranges into that sequence. It could probably be worked around though with some heuristics that'll translate the edge cases into weird\/unintuitive behavior from the user's perspective, and perhaps that's totally acceptable.\n\nBut I'd love to be proven wrong and maybe there's a better way! This would solve one of my current problems too…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1599753490.207100",
        "client_msg_id": "3a640aa4-f323-49bc-9a20-f8701a5da58d",
        "text": "The simplest way I'm thinking about this conceptually is that each character has attached metadata - the layer name. It travels with the character where ever it goes. So editing as usual just moves the characters around. Contiguous is more of an incidental feature - many consecutive characters have the same layer. As an optimization, you can only store entire spans as Andrew suggested above. The only new features, which are outside of editing the text, are 'attach layer to character (or span.. as optimization)' and 'show\/hide layer'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2zV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The simplest way I'm thinking about this conceptually is that each character has attached metadata - the layer name. It travels with the character where ever it goes. So editing as usual just moves the characters around. Contiguous is more of an incidental feature - many consecutive characters have the same layer. As an optimization, you can only store entire spans as Andrew suggested above. The only new features, which are outside of editing the text, are 'attach layer to character (or span.. as optimization)' and 'show\/hide layer'."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Hey all,\n\nI want to present you my new project, <https:\/\/adacraft.org\/|adacraft>! Which is a slightly modified Scratch with new extensions.\n\nThis project can be seen as a first step for me to gather user feedback and experiment things on \"easier programming\".\n\nUsing Scratch gives a ready to use programming environment for \"non-experts\" and adding new extensions and modifying Scratch a bit allows to quickly experiment new use cases, new tools, new way to program. Of course at some point Scratch will be limiting, but I am sure there is enough room for fun experiments!\n\nSo far, I have added some AI extensions and a <https:\/\/www.croquet.io\/|Croquet> extension. An AI extension that uses <https:\/\/teachablemachine.withgoogle.com\/|Teachable Machine> models for image classification and an other for face recognition (based on ml5.js, more to come from this library). The Croquet one is very experimental but it is usable for very basic inter-project communication, and the main contribution (nearly all) comes from Yoshiki Ohshima, of the Croquet team.\n\nI have some ideas for new extensions (like, why not, generating HTML\/DOM, and, why not, à la Vue.js) and would love to hear from you if you think of something to experiments with some Scratch \"constraints\".\n\nAnd of course any feedback and thoughts are very welcome! :pray: :relaxed:",
        "files": [
            {
                "id": "F01AG53G3T5",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "UJ6LDMMN0",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SJdVz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all,\n\nI want to present you my new project, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/adacraft.org\/",
                                "text": "adacraft"
                            },
                            {
                                "type": "text",
                                "text": "! Which is a slightly modified Scratch with new extensions.\n\nThis project can be seen as a first step for me to gather user feedback and experiment things on \"easier programming\".\n\nUsing Scratch gives a ready to use programming environment for \"non-experts\" and adding new extensions and modifying Scratch a bit allows to quickly experiment new use cases, new tools, new way to program. Of course at some point Scratch will be limiting, but I am sure there is enough room for fun experiments!\n\nSo far, I have added some AI extensions and a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.croquet.io\/",
                                "text": "Croquet"
                            },
                            {
                                "type": "text",
                                "text": " extension. An AI extension that uses "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/teachablemachine.withgoogle.com\/",
                                "text": "Teachable Machine"
                            },
                            {
                                "type": "text",
                                "text": " models for image classification and an other for face recognition (based on ml5.js, more to come from this library). The Croquet one is very experimental but it is usable for very basic inter-project communication, and the main contribution (nearly all) comes from Yoshiki Ohshima, of the Croquet team.\n\nI have some ideas for new extensions (like, why not, generating HTML\/DOM, and, why not, à la Vue.js) and would love to hear from you if you think of something to experiments with some Scratch \"constraints\".\n\nAnd of course any feedback and thoughts are very welcome! "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "relaxed",
                                "unicode": "263a-fe0f"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1599766866.224700",
        "thread_ts": "1599766866.224700",
        "reply_count": 14,
        "reply_users_count": 6,
        "latest_reply": "1601388236.034800",
        "reply_users": [
            "UFB8STN7K",
            "UJ6LDMMN0",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "UJM9NG84Q",
            "U01BSAKUDJQ"
        ],
        "replies": [
            {
                "user": "UFB8STN7K",
                "ts": "1599768724.225700"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1599769458.226400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599772424.226800"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1599805367.227400"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1599808759.227600"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1599811365.227900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599811799.228100"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1599812943.228300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1599813274.228700"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1599813298.228900"
            },
            {
                "user": "UJM9NG84Q",
                "ts": "1600557855.004900"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1600622995.005900"
            },
            {
                "user": "U01BSAKUDJQ",
                "ts": "1601386068.034000"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1601388236.034800"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UC2A2ARPT",
                    "UAJKEBGP8",
                    "U013ZLJARC7",
                    "UBSMEUXAA",
                    "UHWC9PXBL",
                    "UFB8STN7K",
                    "USH01JEDQ",
                    "UKP3B2J5D",
                    "U013HU44GLS"
                ],
                "count": 9
            },
            {
                "name": "heart",
                "users": [
                    "UBSMEUXAA",
                    "UHWC9PXBL",
                    "U01A1C2K8MP"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1599768724.225700",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1599768751.000000"
        },
        "client_msg_id": "7a5a9fda-296e-4569-98d5-99c155ad60e5",
        "text": "Cool project! What were your reasons for forking Scratch as opposed to e.g. using ScratchX or Blockly?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599766866.224700",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pgaM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool project! What were your reasons for forking Scratch as opposed to e.g. using ScratchX or Blockly?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1599769458.226400",
        "client_msg_id": "c9f9cb25-6d29-4fa0-824b-17701e5a8166",
        "text": "I have created ScratchX extensions in the past, and in fact it is that experience that made me think that writing Scratch extension is an \"easy\" way to explore new end-user programming use cases. But ScratchX is based on the \"old\" flash implementation while Scratch 3 is a pure HTML\/JavaScript\/CSS which I know better.\n\nAnd why not Blockly? Well I thought of using Blockly, particularly because you can design any block programming system with it, which opens more possible experiments than with Scratch. But for now I wanted to have a complete environment set up quickly, Scratch is usable now for project useful to users. With Blockly, you have to implement lots of things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599766866.224700",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Mj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have created ScratchX extensions in the past, and in fact it is that experience that made me think that writing Scratch extension is an \"easy\" way to explore new end-user programming use cases. But ScratchX is based on the \"old\" flash implementation while Scratch 3 is a pure HTML\/JavaScript\/CSS which I know better.\n\nAnd why not Blockly? Well I thought of using Blockly, particularly because you can design any block programming system with it, which opens more possible experiments than with Scratch. But for now I wanted to have a complete environment set up quickly, Scratch is usable now for project useful to users. With Blockly, you have to implement lots of things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UFB8STN7K",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1599772424.226800",
        "client_msg_id": "4691a536-4bb9-48c0-868e-6bcfa7c5caa6",
        "text": "This example is extremely thought-provoking: <https:\/\/create.adacraft.org\/?view=63e29a12>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599766866.224700",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vzL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This example is extremely thought-provoking: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/create.adacraft.org\/?view=63e29a12"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1599805367.227400",
        "client_msg_id": "a373f13f-1fd4-47b9-b8df-d28073f2545e",
        "text": "In what way?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599766866.224700",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1s\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In what way?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]