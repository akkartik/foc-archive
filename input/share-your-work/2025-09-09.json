[
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757423395.191569",
        "client_msg_id": "dfb56ea4-f249-4cb5-bfb2-78f0c73f40e0",
        "text": "Propagators are a more generic substrate than logic programming, similar to arrow and monad. Logic programming can be seen as one specialization: if your cells carry logical constraints and your propagators perform unification, you get a logic programming system. But unlike Prolog, the same network could simultaneously host reactive updates, arithmetic constraints, or other inference styles. In fact, Sussman &amp; Radul’s original work shows that when propagators are specialized for logic programming, you also get constraint programming “for free,” since both are just ways of refining partial information.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757423395.191569",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1757608153.200669",
        "reply_users": [
            "UA14TGLTC",
            "U08HU0GT52A"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1757451469.131149"
            },
            {
                "user": "U08HU0GT52A",
                "ts": "1757498319.287819"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1757608153.200669"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SuSCS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Propagators are a more generic substrate than logic programming, similar to arrow and monad. Logic programming can be seen as one specialization: if your cells carry logical constraints and your propagators perform unification, you get a logic programming system. But unlike Prolog, the same network could simultaneously host reactive updates, arithmetic constraints, or other inference styles. In fact, Sussman & Radul’s original work shows that when propagators are specialized for logic programming, you also get constraint programming “for free,” since both are just ways of refining partial information."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757423732.133619",
        "client_msg_id": "a161cb84-cc7b-4f55-afdf-00fb45f3fb79",
        "text": "In my current implementation, I initially separated the reactive scheduler from the “normal” propagator scheduler — which was a mistake, since one of the strengths of the paradigm is unification. I’m planning to merge them so that reactive updates, logic propagation, and constraint solving can all coexist in the same scheduling loop.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x8mWD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my current implementation, I initially separated the reactive scheduler from the “normal” propagator scheduler — which was a mistake, since one of the strengths of the paradigm is unification. I’m planning to merge them so that reactive updates, logic propagation, and constraint solving can all coexist in the same scheduling loop."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP",
                    "UA14TGLTC",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U08DYF4SEAE",
        "type": "message",
        "ts": "1757430459.603569",
        "client_msg_id": "063CC861-B972-4B21-82E3-711B7F3ACF23",
        "text": "I’ve never actually worked with propagators - they’ve always been a little academic for my needs, but I am interested in them. I’ve written reactive\/incremental compute systems from scratch, and there’s a little resemblance, but I’ve mostly just heard about them from seeing some talks online and reading a bit about it. I’m curious the scale of system you’ve built with propagators.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "af3f4f3c0604",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-18\/8487018839873_af3f4f3c0604a679e817_72.jpg",
            "first_name": "When",
            "real_name": "When Leggett",
            "display_name": "When Leggett",
            "team": "T5TCAFTA9",
            "name": "russ",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lgsSK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve never actually worked with"
                            },
                            {
                                "type": "text",
                                "text": " propagators - "
                            },
                            {
                                "type": "text",
                                "text": "they’ve"
                            },
                            {
                                "type": "text",
                                "text": " always been a little academic for my needs, but I am interested in them. "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " written reactive\/incremental compute systems from scratch, and "
                            },
                            {
                                "type": "text",
                                "text": "there’s"
                            },
                            {
                                "type": "text",
                                "text": " a little resemblance, but "
                            },
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " mostly just heard about them from seeing some talks online and reading a bit about it. "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " curious the scale of system "
                            },
                            {
                                "type": "text",
                                "text": "you’ve"
                            },
                            {
                                "type": "text",
                                "text": " built with propagators."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08DYF4SEAE",
        "type": "message",
        "ts": "1757430639.487819",
        "client_msg_id": "5975847C-DD7C-4084-BB9A-4210D631A1AE",
        "text": "In terms of your questions - have you looked at Statemate for inspiration? It’s more specifically for reactive systems, but it has a strong separation of spec and implementation and uses diagrams.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "af3f4f3c0604",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-18\/8487018839873_af3f4f3c0604a679e817_72.jpg",
            "first_name": "When",
            "real_name": "When Leggett",
            "display_name": "When Leggett",
            "team": "T5TCAFTA9",
            "name": "russ",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ajQp1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In terms of your questions - have you looked at Statemate for inspiration? "
                            },
                            {
                                "type": "text",
                                "text": "It’s"
                            },
                            {
                                "type": "text",
                                "text": " more specifically for reactive systems, but it has a strong separation of spec and implementation and uses diagrams."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757437962.554179",
        "edited": {
            "user": "U08HU0GT52A",
            "ts": "1757447082.000000"
        },
        "client_msg_id": "2bf55180-1b19-4315-bc8f-36fb5f705be7",
        "text": "i am primarily an artist and designer working with multi-media, so i work with propagators more frequently on creative exploration. The current prototype face scalability issues because all the intermedia value are retain in the memory, this gains expressiveness but also creates memory pressure. i think this could be solved by distinguishing between discrete and continuous cell. What draws me to propagator is how they enable language level expressiveness while the topology of graph is traceable  and modifiable at run time, and all the value is inspectable. Also compound propagator reinforce composable structures naturally. Most reactive systems i encountered in production level seems to deviate from the core ideas in the FRP from first principle and original Haskell implementation of FRP around behaviour  composition, like (draw (circle mouse-position)) where every behaviour is a pure function, so they maintain predictability and testability. And in Propagator because every cell is continuous value, therefore you could have similar behaviour composition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/ihU8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i am primarily an artist and designer working with multi-media, so i work with propagators more frequently on creative exploration. The current prototype face scalability issues because all the intermedia value are retain in the memory, this gains expressiveness but also creates memory pressure. i think this could be solved by distinguishing between discrete and continuous cell. What draws me to propagator is how they enable language level expressiveness while the topology of graph is traceable  and modifiable at run time, and all the value is inspectable. Also compound propagator reinforce composable structures naturally. Most reactive systems i encountered in production level seems to deviate from the core ideas in the FRP from first principle and original Haskell implementation of FRP around behaviour  composition, like (draw (circle mouse-position)) where every behaviour is a pure function, so they maintain predictability and testability."
                            },
                            {
                                "type": "text",
                                "text": " And in Propagator because every cell is continuous value, therefore you could have similar behaviour composition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757438273.449669",
        "edited": {
            "user": "U08HU0GT52A",
            "ts": "1757438503.000000"
        },
        "client_msg_id": "15e8000d-9ac9-4bf7-a6e9-8f95f95b2607",
        "text": "The most promising aspect for me is how propagator might be utilized in live coding. Right now most tools for artist are imperative like Processing, or open-framework. A few advanced tool like Tidal Cycle made by Alex McLean utilizes reactive programming. But propagators might have same  expressiveness with functional reactive programming while being much more generic and utilizing multi-directional linking. This could potentially enable cooperative visual audio or even more experimental cross-media uses. In live coding, this might enable something like:  `(to-synthesizer (take-arm-rotation (gesture-recognition webcam)) audio-out)`\n`(bi-link circle-position (some-transform-function synthesizer))`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rnco7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most promising aspect for me is how propagator might be utilized in live coding. Right now most tools for artist are imperative like Processing, or open-framework. A few advanced tool like Tidal Cycle made by Alex McLean utilizes reactive programming. But propagators might have same  expressiveness with functional reactive programming while being much more generic and utilizing multi-directional linking. This could potentially enable cooperative visual audio or even more experimental cross-media uses. In live coding, this might enable something like:  "
                            },
                            {
                                "type": "text",
                                "text": "(to-synthesizer (take-arm-rotation (gesture-recognition webcam)) audio-out)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "(bi-link circle-position (some-transform-function synthesizer))",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757438285.504399",
        "edited": {
            "user": "U08HU0GT52A",
            "ts": "1757438376.000000"
        },
        "client_msg_id": "c65b6e87-ee0c-4867-abad-613ee4c2bd69",
        "text": "Since you've built reactive\/incremental systems, what drew you away from propagators being too academic?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ogDJx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since you've built reactive\/incremental systems, what drew you away from propagators being too academic?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757438404.546119",
        "edited": {
            "user": "U08HU0GT52A",
            "ts": "1757438413.000000"
        },
        "client_msg_id": "fcf1c2c3-f81c-4185-8017-5414ee4ea260",
        "text": "also thank you for your inspiration i am reading the documents right now",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YKBaG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also thank you for your inspiration i am reading the documents right now"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U08HU0GT52A",
        "type": "message",
        "ts": "1757438990.650749",
        "client_msg_id": "f5ed6806-b3a0-4b17-a321-dd344c85770e",
        "text": "What's particularly interesting is that while in reactive programming, connecting multiple reactive functions to one subject is not recommended (due to side effects, resource issues, and race conditions), in propagators this is actually encouraged for robust structure.\nCells are built to accumulate all related information, then delay the decision of what to do with that information. So you could have multiple sensor tracks feeding data from different channels with different world views into the same cell, and the dependency tracking system and contradiction handler can determine what to do with these messages - whether to combine them, defer them, or resolve conflicts, or attempt selecting them based on what might fit in a bigger picture",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "221467034b81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-09-08\/9467835379175_221467034b8129ae2050_72.jpg",
            "first_name": "Pandi",
            "real_name": "Pandi Lin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gtlpd21",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757365241.093709",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LcBcx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's particularly interesting is that while in reactive programming, connecting multiple reactive functions to one subject is not recommended (due to side effects, resource issues, and race conditions), in propagators this is actually encouraged for robust structure.\nCells are built to accumulate all related information, then delay the decision of what to do with that information. So you could have multiple sensor tracks feeding data from different channels with different world views into the same cell, and the dependency tracking system and contradiction handler can determine what to do with these messages - whether to combine them, defer them, or resolve conflicts, or attempt selecting them based on what might fit in a bigger picture"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1757444973.833979",
        "client_msg_id": "073C014C-3EC2-41C3-B678-97646C108985",
        "text": "I can’t find a working link here or in the YouTube video. For those interested in further info about Propagators, see: <https:\/\/wiki.futureofcoding.org\/Propagators\/|https:\/\/wiki.futureofcoding.org\/Propagators\/>\n\nTIL that we have a wiki…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757444973.833979",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1758090827.471919",
        "reply_users": [
            "U07BD7U4S4R"
        ],
        "replies": [
            {
                "user": "U07BD7U4S4R",
                "ts": "1758090827.471919"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3tA7j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " can’t find a working link here or in the YouTube video. For those interested in further info about Propagators, see: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.futureofcoding.org\/Propagators\/",
                                "text": "https:\/\/wiki.futureofcoding.org\/Propagators\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTIL that we have a wiki…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1757449497.308139",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1757453239.000000"
        },
        "client_msg_id": "1bc50d8b-6eb2-4e66-ab41-7d6382d9d046",
        "text": "<@U014WA16VNJ> and I submitted a positional paper for LIVE 2025 called \"Live Programming in Hostile Territory\". Now that it's been accepted, I'm excited to hear peoples thoughts and feedback! It touches on a topic wider than just live programming and, at least to me, is very relevant to the FOC community. Here is the abstract:\n\n> Live programming research gravitates towards the creation of isolated environments whose success is measured by domination: achieving adoption by displacing rather than integrating with existing tools and practices. To counter this tendency, we advocate that live programming research broaden its purview from the creation of new environments to the augmenting of existing ones and, through a selection of prototypes, explore three _adversarial strategies_ for introducing programmatic capabilities into existing environments which are unfriendly or antagonistic to modification. We discuss how these strategies might promote more pluralistic futures and avoid aggregation into siloed platforms.\n<https:\/\/folkjs.org\/live-2025\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1757484528.831849",
        "reply_users": [
            "U016VUZGUUQ",
            "U02E4DAQGSZ",
            "UA14TGLTC",
            "U0378MDUG1Y"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1757450890.345409"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1757451144.546599"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1757451842.796589"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1757453522.708649"
            },
            {
                "user": "U0378MDUG1Y",
                "ts": "1757454349.607479"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1757455393.165779"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1757484528.831849"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7DMun",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U014WA16VNJ"
                            },
                            {
                                "type": "text",
                                "text": " and I submitted a positional paper for LIVE 2025 called \"Live Programming in Hostile Territory\". Now that it's been accepted, I'm excited to hear peoples thoughts and feedback! It touches on a topic wider than just live programming and, at least to me, is very relevant to the FOC community. Here is the abstract:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Live programming research gravitates towards the creation of isolated environments whose success is measured by domination: achieving adoption by displacing rather than integrating with existing tools and practices. To counter this tendency, we advocate that live programming research broaden its purview from the creation of new environments to the augmenting of existing ones and, through a selection of prototypes, explore three "
                            },
                            {
                                "type": "text",
                                "text": "adversarial strategies",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for introducing programmatic capabilities into existing environments which are unfriendly or antagonistic to modification. We discuss how these strategies might promote more pluralistic futures and avoid aggregation into siloed platforms."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/folkjs.org\/live-2025\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "U02E4DAQGSZ",
                    "UA14TGLTC",
                    "U05UK5T7LPP",
                    "UJBAJNFLK",
                    "U08HU0GT52A",
                    "U0123H7JRDM",
                    "U06SS0DHZD1"
                ],
                "count": 7
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1757450890.345409",
        "client_msg_id": "19e76590-d2ed-4fe0-a212-cc1964d24481",
        "text": "All I can say is I'm in favor of adversarial interop! :D",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0iWqg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All I can say is I'm in favor of adversarial interop! :D"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UA14TGLTC",
                    "U0378MDUG1Y",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1757451144.546599",
        "client_msg_id": "29fb9bab-13a8-45c7-b0a4-f4cd39b999d9",
        "text": "awesome piece, it made me think that targeting a static HTML file as a programming environment is not far enough, I should be aiming to target a div, wherever it may be (e.g. on someone else's website).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Cbpi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome piece, it made me think that targeting a static HTML file as a programming environment is not far enough, I should be aiming to target a div, wherever it may be (e.g. on someone else's website)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1757451469.131149",
        "client_msg_id": "047be555-8cf7-4b85-a1cf-020c650387ae",
        "text": "Extremely insightful.  Anyone familiar with monads will know they get messy when you start feeling the need for lifts and, heaven forbid, transformers.  That's when something like the propagator model begins to feel like a good option.  Start with a base program (the network) and then instead of messing it up with holes for lifts and transformers, insert a propagating value and let it figure out how and where to lift things.  Propagators are especially good for whole program transformations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757423395.191569",
        "parent_user_id": "U08HU0GT52A",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Wh8I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Extremely insightful.  Anyone familiar with monads will know they get messy when you start feeling the need for lifts and, heaven forbid, transformers.  That's when something like the propagator model begins to feel like a good option.  Start with a base program (the network) and then instead of messing it up with holes for lifts and transformers, insert a propagating value and let it figure out how and where to lift things.  Propagators are especially good for whole program transformations."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1757451842.796589",
        "client_msg_id": "4009eab8-56f2-43c3-bd52-691b406d0c27",
        "text": "I'm partial to the \"competitive compatibility\" phrasing, and AIs are proving especially good with the gross glue and shady shims that help get systems to talk to each other.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iNxdO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm partial to the \"competitive compatibility\" phrasing, and AIs are proving especially good with the gross glue and shady shims that help get systems to talk to each other."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1757453522.708649",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1757522938.000000"
        },
        "client_msg_id": "d3ac6ba9-2241-4a4c-9e50-c1caedffe66e",
        "text": "<@U02E4DAQGSZ> ha love it! I think you'd like this POC we have of HTML pipes to author computational notebooks with one new custom HTML element\n\n<https:\/\/folkjs.org\/demos\/pipes.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FA3AH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " ha love it! I think you'd like this POC we have of HTML pipes to author computational notebooks with one new custom HTML element\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/folkjs.org\/demos\/pipes.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1757454349.607479",
        "client_msg_id": "2e6278fc-88f4-467c-90ca-47f2c058a563",
        "text": "<@UA14TGLTC> We debated using the term _adversarial malleability_ (that Orion previously coined) in the paper as it more explicitly points to end user's adversarially modifying their software. _Interop_ and _compatibility_ have a connotation that implies more technical literacy.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fTpNL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " We debated using the term "
                            },
                            {
                                "type": "text",
                                "text": "adversarial malleability ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(that Orion previously coined) in the paper as it more explicitly points to end user's adversarially modifying their software. "
                            },
                            {
                                "type": "text",
                                "text": "Interop",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "compatibility",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have a connotation that implies more technical literacy."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UA14TGLTC",
                    "U014WA16VNJ",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1757455393.165779",
        "client_msg_id": "ea87ee8c-c100-4e53-9818-fab231bbaed5",
        "text": "Yes, for your instance, the choice of terminology is good.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lEMo+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, for your instance, the choice of terminology is good."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1757484528.831849",
        "client_msg_id": "a8720776-b021-491b-88ba-5037e03cd82c",
        "text": "Oh `folk-pipe` is great!\n<https:\/\/github.com\/folk-js\/folkjs\/blob\/main\/packages\/labs\/src\/folk-pipe.ts>\nObservable has Generator.input which listens to events and streams the values too (<https:\/\/github.com\/observablehq\/stdlib\/blob\/main\/src\/generators\/input.js|here>). Thats the HTML -&gt; reactive value direction. It does not have the other direction AFAIK, been looking for something!\n\nI only recently realized <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Generator|JS Generators> have the resource tidy up built in `Generator.prototype.return` . Worth knowing about if you not noticed, as they compose with js language features like yield * and for .. of.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1757449497.308139",
        "parent_user_id": "U0378MDUG1Y",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Uk9W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh "
                            },
                            {
                                "type": "text",
                                "text": "folk-pipe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is great!\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/folk-js\/folkjs\/blob\/main\/packages\/labs\/src\/folk-pipe.ts"
                            },
                            {
                                "type": "text",
                                "text": "\nObservable has Generator.input which listens to events and streams the values too ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/observablehq\/stdlib\/blob\/main\/src\/generators\/input.js",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": "). Thats the HTML -> reactive value direction. It does not have the other direction AFAIK, been looking for something!\n\nI only recently realized "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Generator",
                                "text": "JS Generators"
                            },
                            {
                                "type": "text",
                                "text": " have the resource tidy up built in "
                            },
                            {
                                "type": "text",
                                "text": "Generator.prototype.return",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . Worth knowing about if you not noticed, as they compose with js language features like yield * and for .. of."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U0378MDUG1Y",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    }
]