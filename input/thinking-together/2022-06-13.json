[
    {
        "user": "U02M6PM725T",
        "type": "message",
        "ts": "1655110249.993679",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1655127250.000000"
        },
        "client_msg_id": "fa62d6ff-1750-4d24-86c1-5f035974a943",
        "text": "[This is like 5min into the future, so not sure it qualifies as a topic in FutureOfCoding slack? Admins fell free to delete or move]\n\nA language construct terminology question: *What is a good name for the  “transposition” of a Case expression?* (see below)\n\n*Motivation*: The idea is to integrate some more expressive language patterns into e.g. JavaScript using Continuation-Passing Style (CPS), in a friendly way by putting the CPS functionality in predictable places in readable  constructs. The Case expression is similar to Haskell pattern matching in intended usage. The corresponding JavaScript syntax needs a few extra parens and commas.\n\n*Clarification*: By Case expression I intend:\n```Case\n    &lt;pat p1&gt; &lt;fn succ1&gt;\n    &lt;pat p2&gt; &lt;fn succ2&gt;\n    ...\n    &lt;fn failAll&gt; -- optional```\nSuccess at p#n means choose succ#n.\nFailure at p#n means continue with clause n+1.\n\n\n\n\nBy ‘transposition of Case’ I intend:\n```CaseTransp\n    &lt;pat p1&gt; &lt;fn fail1&gt;\n    &lt;pat p2&gt; &lt;fn fail2&gt;\n    ...\n    &lt;fn succAll&gt; -- not optional```\nFailure at p#n means choose fail#n.\nSuccess at p#n means continue with p#(n+1).\n\nNote: &lt;pat&gt; are CPS constructs in the form of functions that can succeed or fail. &lt;fail&gt; and &lt;succ&gt; are ordinary functions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "46b1d789abee",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-14\/2726013476404_46b1d789abee49842525_72.jpg",
            "first_name": "Henning",
            "real_name": "Henning Sato von Rosen",
            "display_name": "hvrosen",
            "team": "T5TCAFTA9",
            "name": "henning.von.rosen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1655319943.485919",
        "reply_users": [
            "UC2A2ARPT",
            "U02M6PM725T",
            "UA14TGLTC",
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "U02U0AS3J49",
            "U02E4DAQGSZ"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1655125776.394849"
            },
            {
                "user": "U02M6PM725T",
                "ts": "1655127421.308969"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1655130830.013909"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1655132389.263069"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1655144698.559329"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1655145067.926699"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1655181384.405829"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1655319943.485919"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[This is like 5min into the future, so not sure it qualifies as a topic in FutureOfCoding slack? Admins fell free to delete or move]\n\nA language construct terminology question: "
                            },
                            {
                                "type": "text",
                                "text": "What is a good name for the  “transposition” of a Case expression? ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(see below)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Motivation",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": The idea is to integrate some more expressive language patterns into e.g. JavaScript using Continuation-Passing Style (CPS), in a friendly way by putting the CPS functionality in predictable places in readable  constructs. The Case expression is similar to Haskell pattern matching in intended usage. The corresponding JavaScript syntax needs a few extra parens and commas.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Clarification",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": By Case expression I intend:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Case\n    <pat p1> <fn succ1>\n    <pat p2> <fn succ2>\n    ...\n    <fn failAll> -- optional"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Success at p#n means choose succ#n.\nFailure at p#n means continue with clause n+1.\n\n\n\n\nBy ‘transposition of Case’ I intend:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CaseTransp\n    <pat p1> <fn fail1>\n    <pat p2> <fn fail2>\n    ...\n    <fn succAll> -- not optional"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Failure at p#n means choose fail#n.\nSuccess at p#n means continue with p#(n+1).\n\nNote: <pat> are CPS constructs in the form of functions that can succeed or fail. <fail> and <succ> are ordinary functions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1655125776.394849",
        "client_msg_id": "C7004157-AEF3-48BB-BA43-951E4CCFAD16",
        "text": "I don't know what the acronym \"CPS\" stands for.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DR=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " don't "
                            },
                            {
                                "type": "text",
                                "text": "know"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "what"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "acronym"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "\"CPS\""
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "stands"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "for."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02M6PM725T",
        "type": "message",
        "ts": "1655127421.308969",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1655127552.000000"
        },
        "client_msg_id": "6e117626-142b-4579-a970-05892e134c28",
        "text": "<@UC2A2ARPT> “Continuation-Passing Style” is the intention; didn’t mean to be unclear, the first non-abbrevitated wording fell out during editing; now reintroduced! Thanks!\n\nAs an aside, there are two things that make CPS worthwhile and fun IMO:\n1. One can implement any control structure in any language that has first-class functions.\n2. CPS style is known to be mind-bening\/not very readable, but can be turned the opposite using appropriate abstractions",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "46b1d789abee",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-14\/2726013476404_46b1d789abee49842525_72.jpg",
            "first_name": "Henning",
            "real_name": "Henning Sato von Rosen",
            "display_name": "hvrosen",
            "team": "T5TCAFTA9",
            "name": "henning.von.rosen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mL\/d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " “Continuation-Passing Style” is the intention; didn’t mean to be unclear, the first non-abbrevitated wording fell out during editing; now reintroduced! Thanks!\n\nAs an aside, there are two things that make CPS worthwhile and fun IMO:\n1. One can implement any control structure in any language that has first-class functions.\n2. CPS style is known to be mind-bening\/not very readable, but can be turned the opposite using appropriate abstractions"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1655130830.013909",
        "client_msg_id": "21649ec1-6b1b-4f3d-8193-78710a8640da",
        "text": "By \"can be turned the opposite using appropriate abstractions,\" what do mean?\n\nFor more everyday programmers, if you say Callback-Passing Style, they'll at least understand how (1) is obvious.\n\nAbout (2) as one who was mind-bent as a young person by, I honestly can't remember whats hard abou,t say, callcc now.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6GsX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"can be turned the opposite using appropriate abstractions,\" what do mean?\n\nFor more everyday programmers, if you say Callback-Passing Style, they'll at least understand how (1) is obvious.\n\nAbout (2) as one who was mind-bent as a young person by, I honestly can't remember whats hard abou,t say, callcc now."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1655132389.263069",
        "client_msg_id": "8506aa45-229b-458b-aac5-aa4600cc18e6",
        "text": "<@UA14TGLTC> I'm jealous. My mind gets bent all over again, every time I go back to it after a few years. Perhaps I didn't get exposed to it while my mind was supple.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ypVL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I'm jealous. My mind gets bent all over again, every time I go back to it after a few years. Perhaps I didn't get exposed to it while my mind was supple."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1655143617.737309",
        "client_msg_id": "c5648e9e-461f-4595-a297-5246333285f2",
        "text": "So what I hear you saying is that it might work, but may not be computationally advantageous. Which I will test, but for my particular sort of problem, the search trees tend to be deep and wide, and the method makes both very expensive. The alternative would have less width and near-zero depth. I'm all but certain it would be faster. I'm just not certain it is semantically identical for all queries... But I suppose I will find out eventually. Thanks, both.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1654711669.779349",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R7c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So what I hear you saying is that it might work, but may not be computationally advantageous. Which I will test, but for my particular sort of problem, the search trees tend to be deep and wide, and the method makes both very expensive. The alternative would have less width and near-zero depth. I'm all but certain it would be faster. I'm just not certain it is semantically identical for all queries... But I suppose I will find out eventually. Thanks, both."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1655144698.559329",
        "client_msg_id": "e9517495-363d-4ca2-b9c0-0fbd7fec39dc",
        "text": "I'm not sure a case expression or any derivatives thereof should so intimately involve a notion of \"failure\" or \"success\". From a mechanical standpoint, those are just human-friendly tags on regular ol' control flow paths. If you strip that away, the only difference I can see is that you've made the default case mandatory. If anything, I feel like you have syntactic sugar for a case expression where all cases but the default get wrapped in some domain-specific failure indicator.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yB2u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure a case expression or any derivatives thereof should so intimately involve a notion of \"failure\" or \"success\". From a mechanical standpoint, those are just human-friendly tags on regular ol' control flow paths. If you strip that away, the only difference I can see is that you've made the default case mandatory. If anything, I feel like you have syntactic sugar for a case expression where all cases but the default get wrapped in some domain-specific failure indicator."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1655145067.926699",
        "client_msg_id": "f25137d7-c765-46cc-a6ec-651f122401b2",
        "text": "I can see adding a keyword to let people avoid negating their patterns, if that is more convenient. I don't see a reason to enforce catchall. The coder might just prefer to state exhauative options negatively. I might just call it \"not case.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vziD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can see adding a keyword to let people avoid negating their patterns, if that is more convenient. I don't see a reason to enforce catchall. The coder might just prefer to state exhauative options negatively. I might just call it \"not case.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1655181384.405829",
        "client_msg_id": "a58e00b0-874a-46aa-8425-d29295aad7f2",
        "text": "Case expressions and failure?  I think of destructuring  pattern matching.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Omi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Case expressions and failure?  I think of destructuring  pattern matching."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]