[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1702240736.583509",
        "client_msg_id": "d91ce2cd-9854-4a00-8c2b-12da209c78e5",
        "text": "<@U02U0AS3J49> I would be interested in seeing examples of how you use Blockly...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702029566.919409",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3\/Ogx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " I would be interested in seeing examples of how you use Blockly..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1702250845.078209",
        "client_msg_id": "3e57851b-719d-47b9-bacc-13004ef15b30",
        "text": "If you go to <http:\/\/dev.blawx.com|dev.blawx.com> there is a demo video linked from the front page!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702029566.919409",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "caqc2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you go to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/dev.blawx.com",
                                "text": "dev.blawx.com"
                            },
                            {
                                "type": "text",
                                "text": " there is a demo video linked from the front page!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0378MDUG1Y",
        "type": "message",
        "ts": "1702280116.531569",
        "client_msg_id": "c2d34ca6-0f6a-4959-994c-6d06cfab0aab",
        "text": "I agree with <@U05SU27S1M2> that most VPLs don't use a \"spatial syntax\". So what are these VPLs visualizing then?\n\nThey are visually representing the _topological relationships_ between different parts of a program. Those relationships include containment, connection, adjacency, overlap, order, etc.  Most node and wire VPLs make use of connection and possibly containment (e.g. a node can itself contain a set of nodes and wires). Scratch makes frequent use of adjacency, order, and containment. There is nothing inherently visual or spatial about these relationships, they are multi-modal and lossless to transform. A textual syntax that describes these relationships has tradeoffs when compared to a visual syntax, but I wouldn't say that either is inherently better. For example, _connection_ in textual languages _has_ to be a symbolic reference. There is no way to directly point to a function or variable besides referencing it's name. Symbolic references are genuinely helpful when it's easy to name the intent of a piece of memory or a set of instructions. The name becomes a bookmark that is easy to remember and others to learn. But naming can be overbearing at times, and describing connection\/reference in a visually direct manner removes that need in until I have to repeatedly layout and organize these connections as a program grows. To Alex's point, spatial position in most VPLs doesn't have much importance to the computer executing the program, only of those authoring the program.\n\nI'm excited to see more spatial canvases like excalidraw and tldraw start capturing these topological relationships in there underlying data structures as well as image recognition being able to do the same. It means that the ability to transfer a notation through different modalities or even bridging the physical to digital world is becoming easier.\n\nIt also brings up the questions of what a VPL looks like that requires spatiality? A language that depends on location and proximity and other geometric relationships that cant easily be represented in other modalities if at all.\n\nMuch of my framing is based around David Harel's paper \"On Visual Formalisms\" for anyone interested! <https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/42411.42414>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1092a4f97098",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-03-23\/3286745266387_1092a4f970985ebc8d2b_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Shank",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chris.shank.23",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1702029566.919409",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yj2Ot",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "U05SU27S1M2"
                            },
                            {
                                "type": "text",
                                "text": " that most VPLs don't use a \"spatial syntax\". So what are these VPLs visualizing then?\n\nThey are visually representing the "
                            },
                            {
                                "type": "text",
                                "text": "topological relationships",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " between different parts of a program. Those relationships include containment, connection, adjacency, overlap, order, etc.  Most node and wire VPLs make use of connection and possibly containment (e.g. a node can itself contain a set of nodes and wires). Scratch makes frequent use of adjacency, order, and containment. There is nothing inherently visual or spatial about these relationships, they are multi-modal and lossless to transform. A textual syntax that describes these relationships has tradeoffs when compared to a visual syntax, but I wouldn't say that either is inherently better. For example, "
                            },
                            {
                                "type": "text",
                                "text": "connection",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in textual languages "
                            },
                            {
                                "type": "text",
                                "text": "has",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be a symbolic reference. There is no way to directly point to a function or variable besides referencing it's name. Symbolic references are genuinely helpful when it's easy to name the intent of a piece of memory or a set of instructions. The name becomes a bookmark that is easy to remember and others to learn. But naming can be overbearing at times, and describing connection\/reference in a visually direct manner removes that need in until I have to repeatedly layout and organize these connections as a program grows. To Alex's point, spatial position in most VPLs doesn't have much importance to the computer executing the program, only of those authoring the program.\n\nI'm excited to see more spatial canvases like excalidraw and tldraw start capturing these topological relationships in there underlying data structures as well as image recognition being able to do the same. It means that the ability to transfer a notation through different modalities or even bridging the physical to digital world is becoming easier.\n\nIt also brings up the questions of what a VPL looks like that requires spatiality? A language that depends on location and proximity and other geometric relationships that cant easily be represented in other modalities if at all.\n\nMuch of my framing is based around David Harel's paper \"On Visual Formalisms\" for anyone interested! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/42411.42414"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]