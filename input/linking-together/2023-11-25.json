[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1700908466.757429",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1700908523.000000"
        },
        "client_msg_id": "7c287ef7-841a-41bc-9125-aa43a123528b",
        "text": "<@UAZT04VT4> it would be really great to have your input and feedback here. Also, I see <@U6KQ2S410> referred to Chorus in this context on Twitter I think.\n\nSeems like so many of us are interested in the no-apps ideas. Maybe Slack simply has too much friction to help build community around something like this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700603487.530009",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Glz1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " it would be really great to have your input and feedback here. Also, I see "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " referred to Chorus in this context on Twitter I think.\n\nSeems like so many of us are interested in the no-apps ideas. Maybe Slack simply has too much friction to help build community around something like this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1700931703.634839",
        "client_msg_id": "509baf8e-f453-406a-aeee-60a644be54a1",
        "text": "Throwing a somewhat related paper into the discussion: \"World Age in Julia\" <http:\/\/janvitek.org\/pubs\/oopsla20-j.pdf>\n\nMore about metaprogramming than live modification, but the issues are similar. Abstract:\n&gt; Dynamic programming languages face semantic and performance challenges in the presence of features, such\n&gt; as eval, that can inject new code into a running program. The Julia programming language introduces the\n&gt; novel concept of world age to insulate optimized code from one of the most disruptive side-effects of eval:\n&gt; changes to the definition of an existing function. This paper provides the first formal semantics of world age\n&gt; in a core calculus named Juliette, and shows how world age enables compiler optimizations, such as inlining,\n&gt; in the presence of eval. While Julia also provides programmers with the means to bypass world age, we found\n&gt; that this mechanism is not used extensively: a static analysis of over 4,000 registered Julia packages shows\n&gt; that only 4–9% of packages bypass world age. This suggests that Julia’s semantics aligns with programmer\n&gt; expectations.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700747986.966939",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KzB5d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Throwing a somewhat related paper into the discussion: \"World Age in Julia\" "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/janvitek.org\/pubs\/oopsla20-j.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMore about metaprogramming than live modification, but the issues are similar. Abstract:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dynamic programming languages face semantic and performance challenges in the presence of features, such\nas eval, that can inject new code into a running program. The Julia programming language introduces the\nnovel concept of world age to insulate optimized code from one of the most disruptive side-effects of eval:\nchanges to the definition of an existing function. This paper provides the first formal semantics of world age\nin a core calculus named Juliette, and shows how world age enables compiler optimizations, such as inlining,\nin the presence of eval. While Julia also provides programmers with the means to bypass world age, we found\nthat this mechanism is not used extensively: a static analysis of over 4,000 registered Julia packages shows\nthat only 4–9% of packages bypass world age. This suggests that Julia’s semantics aligns with programmer\nexpectations."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1700958691.028079",
        "client_msg_id": "d0e43b43-9bb8-437b-aa84-102b69e7093e",
        "text": "Julia's behaviour around closures is among the nicest I've seen:\n\n```julia&gt; foo(x, y) = x + y\nfoo (generic function with 1 method)\n\njulia&gt; bar = x -&gt; foo(x, 1)\n#3 (generic function with 1 method)\n\njulia&gt; bar(1)\n2\n\njulia&gt; @code_llvm bar(1)\n;  @ REPL[1]:1 within `#3`\ndefine i64 @\"julia_#3_122\"(i64 signext %0) #0 {\ntop:\n; ┌ @ REPL[7]:1 within `foo`\n; │┌ @ int.jl:87 within `+`\n    %1 = add i64 %0, 1\n; └└\n  ret i64 %1\n}\n\njulia&gt; Base.delete_method(@which foo(1,1))\n\njulia&gt; bar(1)\nERROR: MethodError: no method matching foo(::Int64, ::Int64)\nStacktrace:\n [1] (::var\"#3#4\")(x::Int64)\n   @ Main .\/REPL[1]:1\n [2] top-level scope\n   @ REPL[6]:1\n\njulia&gt; @code_llvm bar(1)\n;  @ REPL[1]:1 within `#3`\n; Function Attrs: noreturn\ndefine void @\"julia_#3_133\"(i64 signext %0) #0 {\ntop:\n  %1 = alloca [2 x {}*], align 8\n  %gcframe2 = alloca [3 x {}*], align 16\n  %gcframe2.sub = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 0\n  %.sub = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 0\n  %2 = bitcast [3 x {}*]* %gcframe2 to i8*\n  call void @llvm.memset.p0i8.i32(i8* noundef nonnull align 16 dereferenceable(24) %2, i8 0, i32 24, i1 false)\n  %thread_ptr = call i8* asm \"movq %fs:0, $0\", \"=r\"() #6\n  %ppgcstack_i8 = getelementptr i8, i8* %thread_ptr, i64 -8\n  %ppgcstack = bitcast i8* %ppgcstack_i8 to {}****\n  %pgcstack = load {}***, {}**** %ppgcstack, align 8\n  %3 = bitcast [3 x {}*]* %gcframe2 to i64*\n  store i64 4, i64* %3, align 16\n  %4 = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 1\n  %5 = bitcast {}** %4 to {}***\n  %6 = load {}**, {}*** %pgcstack, align 8\n  store {}** %6, {}*** %5, align 8\n  %7 = bitcast {}*** %pgcstack to {}***\n  store {}** %gcframe2.sub, {}*** %7, align 8\n  %8 = call nonnull {}* @ijl_box_int64(i64 signext %0)\n  %9 = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 2\n  store {}* %8, {}** %9, align 16\n  store {}* %8, {}** %.sub, align 8\n  %10 = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 1\n  store {}* inttoptr (i64 140053833609312 to {}*), {}** %10, align 8\n  %11 = call nonnull {}* @ijl_apply_generic({}* inttoptr (i64 140053835183152 to {}*), {}** nonnull %.sub, i32 2)\n  call void @llvm.trap()\n  unreachable\n}```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700747986.966939",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LEG9E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Julia's behaviour around closures is among the nicest I've seen:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "julia> foo(x, y) = x + y\nfoo (generic function with 1 method)\n\njulia> bar = x -> foo(x, 1)\n#3 (generic function with 1 method)\n\njulia> bar(1)\n2\n\njulia> @code_llvm bar(1)\n;  @ REPL[1]:1 within `#3`\ndefine i64 @\"julia_#3_122\"(i64 signext %0) #0 {\ntop:\n; ┌ @ REPL[7]:1 within `foo`\n; │┌ @ int.jl:87 within `+`\n    %1 = add i64 %0, 1\n; └└\n  ret i64 %1\n}\n\njulia> Base.delete_method(@which foo(1,1))\n\njulia> bar(1)\nERROR: MethodError: no method matching foo(::Int64, ::Int64)\nStacktrace:\n [1] (::var\"#3#4\")(x::Int64)\n   @ Main .\/REPL[1]:1\n [2] top-level scope\n   @ REPL[6]:1\n\njulia> @code_llvm bar(1)\n;  @ REPL[1]:1 within `#3`\n; Function Attrs: noreturn\ndefine void @\"julia_#3_133\"(i64 signext %0) #0 {\ntop:\n  %1 = alloca [2 x {}*], align 8\n  %gcframe2 = alloca [3 x {}*], align 16\n  %gcframe2.sub = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 0\n  %.sub = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 0\n  %2 = bitcast [3 x {}*]* %gcframe2 to i8*\n  call void @llvm.memset.p0i8.i32(i8* noundef nonnull align 16 dereferenceable(24) %2, i8 0, i32 24, i1 false)\n  %thread_ptr = call i8* asm \"movq %fs:0, $0\", \"=r\"() #6\n  %ppgcstack_i8 = getelementptr i8, i8* %thread_ptr, i64 -8\n  %ppgcstack = bitcast i8* %ppgcstack_i8 to {}****\n  %pgcstack = load {}***, {}**** %ppgcstack, align 8\n  %3 = bitcast [3 x {}*]* %gcframe2 to i64*\n  store i64 4, i64* %3, align 16\n  %4 = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 1\n  %5 = bitcast {}** %4 to {}***\n  %6 = load {}**, {}*** %pgcstack, align 8\n  store {}** %6, {}*** %5, align 8\n  %7 = bitcast {}*** %pgcstack to {}***\n  store {}** %gcframe2.sub, {}*** %7, align 8\n  %8 = call nonnull {}* @ijl_box_int64(i64 signext %0)\n  %9 = getelementptr inbounds [3 x {}*], [3 x {}*]* %gcframe2, i64 0, i64 2\n  store {}* %8, {}** %9, align 16\n  store {}* %8, {}** %.sub, align 8\n  %10 = getelementptr inbounds [2 x {}*], [2 x {}*]* %1, i64 0, i64 1\n  store {}* inttoptr (i64 140053833609312 to {}*), {}** %10, align 8\n  %11 = call nonnull {}* @ijl_apply_generic({}* inttoptr (i64 140053835183152 to {}*), {}** nonnull %.sub, i32 2)\n  call void @llvm.trap()\n  unreachable\n}"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1700958904.417009",
        "client_msg_id": "1b7c8874-d219-4ced-a34f-fb138ce714fc",
        "text": "But it doesn't allow redefining types - you have to delete and recreate a module, which means that functions in the old module don't get redefined. And then you're back to having old closures hanging around.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700747986.966939",
        "parent_user_id": "UKJGU23KP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZHxAK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it doesn't allow redefining types - you have to delete and recreate a module, which means that functions in the old module don't get redefined. And then you're back to having old closures hanging around."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]