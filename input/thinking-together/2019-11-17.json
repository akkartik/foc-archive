[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1573996068.488700",
        "client_msg_id": "14f1949f-23f6-4099-92ee-89211334ed57",
        "text": "<@UNBPP291C> Very interesting! So you basically use transform functions to build schemas on the fly and that's your main reason for that architecture? Are you just regenerating them when the model changes and wipe all the data in the downstream systems, or have you thought about migrations to keep the data in those systems and adapt the schemas (a decade ago when I was doing Ruby that was a hot thing in Ruby on Rails with Active Record; I assume that's still around but probably not that special anymore…).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "exji",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNBPP291C"
                            },
                            {
                                "type": "text",
                                "text": " Very interesting! So you basically use transform functions to build schemas on the fly and that's your main reason for that architecture? Are you just regenerating them when the model changes and wipe all the data in the downstream systems, or have you thought about migrations to keep the data in those systems and adapt the schemas (a decade ago when I was doing Ruby that was a hot thing in Ruby on Rails with Active Record; I assume that's still around but probably not that special anymore…)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6KQ2S410",
        "type": "message",
        "ts": "1574010343.489000",
        "client_msg_id": "23bafc11-3ede-4506-aa29-93fbd1a90396",
        "text": "<@UCGAK10LS> The key question is how you combine changes to state made in different places and different times. Most of the FP\/immutable approaches assume that every change is defined at exactly one point in the program, and that multiple such changes are globally single-threaded via some external magic. Ignores the hard problem of combining changes across space and time. Imperative programming lets you do whatever you want by manually ordering everything, which is impractically complicated. Neither approach is an acceptable solution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e8f4c2151d2b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-09\/225308926294_e8f4c2151d2b70ebfae3_72.jpg",
            "first_name": "Jonathan",
            "real_name": "Jonathan Edwards",
            "display_name": "jonathoda",
            "team": "T5TCAFTA9",
            "name": "jonathoda",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r415",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " The key question is how you combine changes to state made in different places and different times. Most of the FP\/immutable approaches assume that every change is defined at exactly one point in the program, and that multiple such changes are globally single-threaded via some external magic. Ignores the hard problem of combining changes across space and time. Imperative programming lets you do whatever you want by manually ordering everything, which is impractically complicated. Neither approach is an acceptable solution."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574013454.489500",
        "client_msg_id": "756b0a9f-5c2e-430b-b57b-492161701c5e",
        "text": "Thanks for posting. Curv is also a staged functional language for GPU programming, so probably I can learn something from this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sCDor",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for posting. Curv is also a staged functional language for GPU programming, so probably I can learn something from this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574020345.489700",
        "client_msg_id": "624d4ed9-e4e0-40f4-b7e4-8c198fbbc086",
        "text": "I say that Curv is dynamically typed, even code staged to the GPU is statically typed. Spiral is the same (inlineable functions are dynamically typed), but Spiral claims to be statically typed. In truth, for both languages, stage 1 is dynamically typed, stage 2 is statically typed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pK\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I say that Curv is dynamically typed, even code staged to the GPU is statically typed. Spiral is the same (inlineable functions are dynamically typed), but Spiral claims to be statically typed. In truth, for both languages, stage 1 is dynamically typed, stage 2 is statically typed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574020936.489900",
        "client_msg_id": "b5c6b723-a026-4ccf-bc1e-a8e2d0911913",
        "text": "Something similar is happening in Zig (<http:\/\/ziglang.org|ziglang.org>). \"In Zig, types are first-class citizens. They can be assigned to variables, passed as parameters to functions, and returned from functions. However, they can only be used in expressions which are known at compile-time\". Just like Spiral.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5jzSE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something similar is happening in Zig ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/ziglang.org",
                                "text": "ziglang.org"
                            },
                            {
                                "type": "text",
                                "text": "). \"In Zig, types are first-class citizens. They can be assigned to variables, passed as parameters to functions, and returned from functions. However, they can only be used in expressions which are known at compile-time\". Just like Spiral."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UNBPP291C",
        "type": "message",
        "ts": "1574023066.490100",
        "edited": {
            "user": "UNBPP291C",
            "ts": "1574029448.000000"
        },
        "client_msg_id": "99a457c8-5791-4356-8508-fdfdf6497138",
        "text": "Yes, that’s basically the reason I went for this, seemed quick to write and useful in the time.\n\nI just propagate the change actions for now and update every related node, but I assume this isn’t scalable, so I assume I’ll just add in some kind of logical clock and then check for updates later. I’m concerned with migrations + custom changes, but not yet that far in the project.\n\nAlso thanks Garth! I’ll look over the material and hopefully have a better language to discuss it in!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gcf29e340a09",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/cf29e340a09ac08ae262632ef9101046.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Ian Rumac",
            "display_name": "Ian Rumac",
            "team": "T5TCAFTA9",
            "name": "ian.rumac",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "au6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, that’s basically the reason I went for this, seemed quick to write and useful in the time.\n\nI just propagate the change actions for now and update every related node, but I assume this isn’t scalable, so I assume I’ll just add in some kind of logical clock and then check for updates later. I’m concerned with migrations + custom changes, but not yet that far in the project.\n\nAlso thanks Garth! I’ll look over the material and hopefully have a better language to discuss it in!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1574039322.496000",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1574104728.000000"
        },
        "client_msg_id": "6E61FD72-6BBA-4B45-844C-DF3856A1BF86",
        "text": "Another way to say this is to just follow the way we naturally think about things where some things don’t change and other things do. Numbers don’t change (the number 2 doesn’t become the 3) but most things that contain numbers do change (a two year old person may become a three year old person). Likewise, strings don’t change, but things that contain them, like paragraphs, do. As we naturally think about them, most compositional things *do* change, but we may not want all code to have write access to them. FP eliminates write access instead of appropriately limiting it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MM1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another way to say this is to just follow the way we naturally think about things where some things don’t change and other things do. Numbers don’t change (the number 2 doesn’t become the 3) but most things that contain numbers do change (a two year old person may become a three year old person). Likewise, strings don’t change, but things that contain them, like paragraphs, do. As we naturally think about them, most compositional things "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " change, but we may not want all code to have write access to them. FP eliminates write access instead of appropriately limiting it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1574040972.496400",
        "client_msg_id": "65f0b42b-9922-43aa-8c26-d4a769a996b0",
        "text": "Yeah 'identity' as a concept has zero built-in support in most (immutable data) FP langs. Versions\/snapshots\/inter-object consistency has zero built-in support in most OO langs. 'Time\/space distributed objects' has zero built-in support in almost all of the langs. Whatever is lacking is then implemented by hand or by libraries - often by both. A person exists in one place but most virtual entities are spread out over the entire system (client side, server side, database...) and most of the information homeostasis is manually managed between all of the different models of the same entity floating around. Are there systems\/languages that have strong support for the the idea of 'distributed object'?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B1+F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah 'identity' as a concept has zero built-in support in most (immutable data) FP langs. Versions\/snapshots\/inter-object consistency has zero built-in support in most OO langs. 'Time\/space distributed objects' has zero built-in support in almost all of the langs. Whatever is lacking is then implemented by hand or by libraries - often by both. A person exists in one place but most virtual entities are spread out over the entire system (client side, server side, database...) and most of the information homeostasis is manually managed between all of the different models of the same entity floating around. Are there systems\/languages that have strong support for the the idea of 'distributed object'?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1574043424.496600",
        "client_msg_id": "825896fd-b37c-425e-aa5f-831b3fd9b99c",
        "text": "The Spiral documentation is very idiosyncratic and hard to read. Here's a related project, with clearer documentation and a wider scope of applicability.\n\nAnyDSL is a framework for building DSLs using partial evaluation.\n<http:\/\/compilers.cs.uni-saarland.de\/papers\/anydsl.pdf>\n<https:\/\/anydsl.github.io\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zZpQI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Spiral documentation is very idiosyncratic and hard to read. Here's a related project, with clearer documentation and a wider scope of applicability.\n\nAnyDSL is a framework for building DSLs using partial evaluation.\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/compilers.cs.uni-saarland.de\/papers\/anydsl.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/anydsl.github.io\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1574045798.499000",
        "client_msg_id": "1d34d7e1-1da0-4cb7-974c-f36d66950764",
        "text": "One of my former labmates translated SQL92 into a GUI and recorded a 15-minute demo: <https:\/\/twitter.com\/eirikbakke\/status\/1193201350693265412> \"The goal of all of this eventually is to have a system that I can replace a lot of these old-fashioned manually-made Microsoft Access applications and all the different views, forms, reports, tables, and so on that you see in those.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574045798.499000",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1574147736.019200",
        "reply_users": [
            "UEQ6M68H0",
            "UK22Z72L8"
        ],
        "replies": [
            {
                "user": "UEQ6M68H0",
                "ts": "1574064268.499400"
            },
            {
                "user": "UK22Z72L8",
                "ts": "1574085864.000600"
            },
            {
                "user": "UK22Z72L8",
                "ts": "1574085934.000800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1574147736.019200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/eirikbakke|@eirikbakke>: Ultorg: A User Interface for Relational Databases\n(latest demo!) <https:\/\/vimeo.com\/372006027>",
                "ts": 1573316345,
                "author_name": "Eirik Bakke",
                "author_link": "https:\/\/twitter.com\/eirikbakke\/status\/1193201350693265412",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/1064658842603024384\/I-V5hJcf_normal.jpg",
                "author_subname": "@eirikbakke",
                "text": "Ultorg: A User Interface for Relational Databases\n(latest demo!) <https:\/\/vimeo.com\/372006027>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/eirikbakke\/status\/1193201350693265412",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/eirikbakke\/status\/1193201350693265412",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AM=u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of my former labmates translated SQL92 into a GUI and recorded a 15-minute demo: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/eirikbakke\/status\/1193201350693265412"
                            },
                            {
                                "type": "text",
                                "text": " \"The goal of all of this eventually is to have a system that I can replace a lot of these old-fashioned manually-made Microsoft Access applications and all the different views, forms, reports, tables, and so on that you see in those.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6",
                    "UK22Z72L8",
                    "U7C7B75R6",
                    "UAVCC2X70",
                    "UHZNB3HRP"
                ],
                "count": 5
            },
            {
                "name": "open_mouth",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    }
]