[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721724106.887819",
        "client_msg_id": "a52c9c64-d467-4e9d-a837-81158d59f8ae",
        "text": "I am aware of, but, haven’t deeply explored… Chuck Moore’s GA144 (<https:\/\/www.greenarraychips.com>), LLMs, internet, Dave Ackley’s T2 Tile project, the human body, blockchain, transputers (<https:\/\/en.wikipedia.org\/wiki\/Transputer>), quantum computing, neural nets (and Bart Kosko?). LLMs are based on simple synchronous technology, but, to my understanding the real secret sauce is the zillions of weights derived from access to the New Library of Alexandria and a massively parallel version of the game of Plinko. <@UJBAJNFLK>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9azuD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am aware of, but, haven’t deeply explored… Chuck Moore’s GA144 ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.greenarraychips.com"
                            },
                            {
                                "type": "text",
                                "text": "), LLMs, internet, Dave Ackley’s T2 Tile project, the human body, blockchain, transputers ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Transputer"
                            },
                            {
                                "type": "text",
                                "text": "), quantum computing, neural nets (and Bart Kosko?). LLMs are based on simple synchronous technology, but, to my understanding the real secret sauce is the zillions of weights derived from access to the New Library of Alexandria and a massively parallel version of the game of Plinko. "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1721744932.334319",
        "client_msg_id": "28ffab23-7ec7-432a-bf60-16f3d1421054",
        "text": "Interesting case study!\n(I <https:\/\/adventofcomputing.libsyn.com\/episode-48-electric-ping-pong|heard about Pong circuits> but haven't seen them)\n\nI wonder what you'd say about Scratch\/Snap!'s  programming model — it's a bit closer to circuits by running many small loops in parallel, each belonging to a single sprite.\nE.g. here is someone's <https:\/\/snap.berkeley.edu\/snap\/snap.html#present:Username=r4356th&amp;ProjectName=Pong%20Game%20Hard%20Version&amp;editMode&amp;noRun|1-player pong>.\n\nThe UI doesn't offer \"everything on one page\" view, you have to click specific sprites (Ball, Paddle, ...) in bottom right, but for the most part that helps understanding.\n(There is 🗋-&gt;Export summary... but it loses the spatial organization)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0B5fJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting case study!\n(I "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/adventofcomputing.libsyn.com\/episode-48-electric-ping-pong",
                                "text": "heard about Pong circuits"
                            },
                            {
                                "type": "text",
                                "text": " but haven't seen them)\n\nI wonder what you'd say about Scratch\/Snap!'s  programming model — it's a bit closer to circuits by running many small loops in parallel, each belonging to a single sprite.\nE.g. here is someone's "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/snap.berkeley.edu\/snap\/snap.html#present:Username=r4356th&ProjectName=Pong%20Game%20Hard%20Version&editMode&noRun",
                                "text": "1-player pong"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe UI doesn't offer \"everything on one page\" view, you have to click specific sprites (Ball, Paddle, ...) in bottom right, but for the most part that helps understanding.\n(There is 🗋->Export summary... but it loses the spatial organization)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1721746300.056629",
        "client_msg_id": "977bf3aa-f548-4dc2-b7ac-a958d07781c0",
        "text": "But I feel Pong has unusually good fit for a circuit.\nIt'd be harder to do say a word processor on circuit,  and very tempting to base around a CPU, no?\n\nEven simple tweaks to the game, like having a variable number of balls in flight, become harder to do in pure HW, or at least harder to keep nice isomorphism between circuit parts and problem parts.\nI suppose I'd put the ball positions in addressable RAM, and make the ball logic iterate over them in a loop (with a counter).  Sequencing such things quite quickly starts tempting to add a micro-controller...\n\n[However, much of our instincts that SW is easier than HW is rooted in the ease of changing SW. That's the root of the \"soft-\" vs. \"hard-\" words after all!  But if you take schematics as inspiration for visual programming, that's irrelevant.]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Lrqu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I feel Pong has unusually good fit for a circuit.\nIt'd be harder to do say a word processor on circuit,  and very tempting to base around a CPU, no?\n\nEven simple tweaks to the game, like having a variable number of balls in flight, become harder to do in pure HW, or at least harder to keep nice isomorphism between circuit parts and problem parts.\nI suppose I'd put the ball positions in addressable RAM, and make the ball logic iterate over them in a loop (with a counter).  Sequencing such things quite quickly starts tempting to add a micro-controller...\n\n[However, much of our instincts that SW is easier than HW is rooted in the ease of changing SW. That's the root of the \"soft-\" vs. \"hard-\" words after all!  But if you take schematics as inspiration for visual programming, that's irrelevant.]"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02QC0PPER3",
        "type": "message",
        "ts": "1721747074.243809",
        "client_msg_id": "bf9515e9-1a48-4c55-ab7a-a956eb7d3504",
        "text": "Also, I find it hard to share your enthusiasm for async parallelism.  Again, it might fit _some problems,_ but I've seen too many concurrency bugs to see it as a \"pro\"...\nHowever it's curious that Functional Reactive Programming claims to avoid many concurrency glitches, yet connects together pieces of code quite similarly to circuits :thinking_face:\nMaybe it's less about sync\/async and more about styles of composition?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "90c9108c61f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-12\/2854686602576_90c9108c61f5d809eb8a_72.jpg",
            "first_name": "Beni",
            "real_name": "Beni Cherniavsky-Paskin",
            "display_name": "Beni Cherniavsky-Paskin",
            "team": "T5TCAFTA9",
            "name": "beni.cherniavsky",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "95YRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, I find it hard to share your enthusiasm for async parallelism.  Again, it might fit "
                            },
                            {
                                "type": "text",
                                "text": "some problems,",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but I've seen too many concurrency bugs to see it as a \"pro\"...\nHowever it's curious that Functional Reactive Programming claims to avoid many concurrency glitches, yet connects together pieces of code quite similarly to circuits "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\nMaybe it's less about sync\/async and more about styles of composition?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1721754090.522599",
        "client_msg_id": "622370e9-9185-4199-ac47-6163944f4b3d",
        "text": "<@UGWUJUZHT> I prefer to stay in the realm of digital computation, so I accept neither the human body nor quantum computing. But the other examples are worth exploring!\nI agree that LLMs deserve much better adapted hardware than today's GPUs, but I suspect that everyone is so busy training their LLM to beat their competitors' LLM that nobody has any time to think about the fundamentals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xk1Hn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " I prefer to stay in the realm of digital computation, so I accept neither the human body nor quantum computing. But the other examples are worth exploring!\nI agree that LLMs deserve much better adapted hardware than today's GPUs, but I suspect that everyone is so busy training their LLM to beat their competitors' LLM that nobody has any time to think about the fundamentals."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1721775834.974459",
        "edited": {
            "user": "U05UK5T7LPP",
            "ts": "1721776264.000000"
        },
        "client_msg_id": "91389aa2-d8ab-4aa7-9fd7-a2b7d4459818",
        "text": "<@UGWUJUZHT> All good points. Let's say I want to parse a 'tarot spread' (i.e. rects with three distinct orientations) for alignment, ordering, and superposition. The loop I'm seeing here is DOM events (drag & drop) -> SVG output in an Observable notebook -> CST ('scene graph') of (cx, cy, w, h) tuples -> favorite Prolog or ASP to produce fixed-length 'reading orders' -> rank by parsimony heuristic -> splat top three to prose. In this case the diagram is already 1-1 with our scene graph, so step (b) of parsing is bypassed. Upon performing steps (d,e), we additionally have a pile of highly redundant adjacency predicates.\n\nTurning those redundant statements into a clear statement of facts is a problem that you or I can solve on the spot, obviously, by exploiting the diagram using spatial cognition. But writing down an equivalent 'pathfinding algorithm' is very interesting and properly challenging. It's a problem I've been meaning to get back to, given the right brain sparkles. Hmm.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ykIXX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " All good points. Let's say I want to parse a 'tarot spread' (i.e. rects with three distinct orientations) for alignment, ordering, and superposition. The loop I'm seeing here is DOM events (drag & drop) -> SVG output in an Observable notebook -> CST ('scene graph') of (cx, cy, w, h) tuples -> favorite Prolog or ASP to produce fixed-length 'reading orders' -> rank by parsimony heuristic -> splat top three to prose. In this case the diagram is already 1-1 with our scene graph, so step (b) of parsing is bypassed. Upon performing steps (d,e), we additionally have a pile of highly redundant adjacency predicates.\n\nTurning those redundant statements into a clear statement of facts is a problem that you or I can solve on the spot, obviously, by exploiting the diagram using spatial cognition. But writing down an equivalent 'pathfinding algorithm' is very interesting and properly challenging. It's a problem I've been meaning to get back to, given the right brain sparkles. Hmm."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1721776091.093059",
        "edited": {
            "user": "U05UK5T7LPP",
            "ts": "1721776406.000000"
        },
        "client_msg_id": "b757865e-bf14-436b-8167-e03bfa2a3327",
        "text": "Step (c) is the essential bit. Others are more proficient than I. But WASM ports have been massively helpful for me to learn with. I see SWI-Prolog has one of these now!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H2iBo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Step (c) is the essential bit. Others are more proficient than I. But WASM ports have been massively helpful for me to learn with. I see SWI-Prolog has one of these now!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721787261.101129",
        "client_msg_id": "e8b0c496-c031-4071-a4d3-ecec0014e905",
        "text": "I don’t comprehend what you’re saying, maybe sleeping on it will help.\n\nYet, the first thing that jumps to mind is that, instead of figuring out every little bit of the parsing algorithm, maybe a little-LLM can help? Kind of like a 1:N decoder chip in hardware for exploiting the diagram using spatial cognition? As I understand it, you need something that sees a pattern in all of that. Once you know the pattern, does it become easier to write a Prolog-y post-algorithm of what to do with the info? If this seems like an interesting direction, then a test would be to write the pre- and post- code and leave the middle, where the little-LLM should go, stubbed out, using manual editing to insert appropriate values. Then, see what ideas \/ understanding that generates.\n\n<@U05UK5T7LPP>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cALYa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t comprehend what you’re saying, maybe sleeping on it will help.\n\nYet, the first thing that jumps to mind is that, instead of figuring out every little bit of the parsing algorithm, maybe a little-LLM can help? Kind of like a 1:N decoder chip in hardware for exploiting the diagram using spatial cognition? As I understand it, you need something that sees a pattern in all of that. Once you know the pattern, does it become easier to write a Prolog-y post-algorithm of what to do with the info? If this seems like an interesting direction, then a test would be to write the pre- and post- code and leave the middle, where the little-LLM should go, stubbed out, using manual editing to insert appropriate values. Then, see what ideas \/ understanding that generates.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U05UK5T7LPP"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721788582.263319",
        "client_msg_id": "921e4b2e-9ca6-4a93-bcdb-5f498944436f",
        "text": "<@U02QC0PPER3> Interesting thoughts. “… but I've seen too many concurrency bugs …” I’ve come to the conclusion that a lot of concurrency bugs are due to self-flagellation cause by the use of the wrong notation \/ paradigm.\n\nFTR, I emphasize async because I perceive it to be underemphasized, but, I think that a hybrid of async+sync is the goal. To me, async enhances composition.\n\n…more mulling-over required…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VuPfI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02QC0PPER3"
                            },
                            {
                                "type": "text",
                                "text": " Interesting thoughts. “… but I've seen too many concurrency bugs …” I’ve come to the conclusion that a lot of concurrency bugs are due to self-flagellation cause by the use of the wrong notation \/ paradigm.\n\nFTR, I emphasize async because I perceive it to be underemphasized, but, I think that a hybrid of async+sync is the goal. To me, async enhances composition.\n\n…more mulling-over required…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721788766.411469",
        "client_msg_id": "9dc2da95-58a0-4d7b-969b-5217bc4ce110",
        "text": "<@UJBAJNFLK> I would guess that many of the items on my list don’t fit your expectations for usable massive parallelism. I am peripherally interested in these items because they all smack of parallelism in some way, and, I’m interested in ideas. The objective of T2 is different from my interests, but, it appears to use massive parallelism anyway. I forgot to mention Ceptre. I mention the human body, since I meet monthly with someone who is into robotics and my overwhelming thought is “but, but, this is just a combination of 500 little stepper motors”. I, also, forgot to mention a commercial effort for heath monitoring and drug testing race horses (ugh, I can’t remember the name at this moment, it’s buried in my email archive somewhere). The guy strapped 36-ish little rPis\/Arduinos running micro-Python onto each horse and networked the electronics together. He was hoping to use blockchain to store unalterable health records. He was monitoring horse health and creating notifications if any irregular health symptoms were detected in the middle of the night.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721246911.989019",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kc2FJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I would guess that many of the items on my list don’t fit your expectations for usable massive parallelism. I am peripherally interested in these items because they all smack of parallelism in some way, and, I’m interested in ideas. The objective of T2 is different from my interests, but, it appears to use massive parallelism anyway. I forgot to mention Ceptre. I mention the human body, since I meet monthly with someone who is into robotics and my overwhelming thought is “but, but, this is just a combination of 500 little stepper motors”. I, also, forgot to mention a commercial effort for heath monitoring and drug testing race horses (ugh, I can’t remember the name at this moment, it’s buried in my email archive somewhere). The guy strapped 36-ish little rPis\/Arduinos running micro-Python onto each horse and networked the electronics together. He was hoping to use blockchain to store unalterable health records. He was monitoring horse health and creating notifications if any irregular health symptoms were detected in the middle of the night."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1721788995.224889",
        "client_msg_id": "51974582-74c1-48ee-b2cc-bac67cfbd492",
        "text": "The fault is mine, I'm picking up in the middle of an old project with too much intermediate state. My old frontend code still works and gives me the scene graph, a list of card positions. That's new to me, but a demultiplexer is the right description for going from List[Positions] of size 4 to a List[Relations] of size 20+. But you're right that mocking up the List[Relations] is the way to go - then I can start with high-quality sentences (reading orders), and somehow reverse-engineer the Prolog algorithm.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xtkzz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The fault is mine, I'm picking up in the middle of an old project with too much intermediate state. My old frontend code still works and gives me the scene graph, a list of card positions. That's new to me, but a demultiplexer is the right description for going from List[Positions] of size 4 to a List[Relations] of size 20+. But you're right that mocking up the List[Relations] is the way to go - then I can start with high-quality sentences (reading orders), and somehow reverse-engineer the Prolog algorithm."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05UK5T7LPP",
        "type": "message",
        "ts": "1721789037.294929",
        "edited": {
            "user": "U05UK5T7LPP",
            "ts": "1721789048.000000"
        },
        "client_msg_id": "a3c930ed-e890-47a2-9e72-1a35f0474e53",
        "text": "whoops <@UGWUJUZHT>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "87f45e326f3a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-09-30\/5997119242352_87f45e326f3a692ca55c_72.png",
            "first_name": "Jasmine",
            "real_name": "Jasmine Otto",
            "display_name": "Jasmine Otto",
            "team": "T5TCAFTA9",
            "name": "ottojasmine",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KWJuw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "whoops "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1721791330.140929",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1721791423.000000"
        },
        "client_msg_id": "155f3910-905e-4417-89a8-928c58058f00",
        "text": "<@U05UK5T7LPP> my favourite tools for exploring a design space: (1) procrastination (2) just doing *something*, and, (3) I like using Common Lisp, because it makes it imaginable to change my mind and to throw away all of the code and to begin afresh [I don't feel that same freedom when I engage in premature type-ing with C and Python and etc., and, even, OOP ; the thinking:code ratio is much higher in simple dynamic languages]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1721406900.550659",
        "parent_user_id": "U079M43CQ31",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YP95R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05UK5T7LPP"
                            },
                            {
                                "type": "text",
                                "text": " my favourite tools for exploring a design space: (1) procrastination (2) just doing "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and, (3) I like using Common Lisp, because it makes it imaginable to change my mind and to throw away all of the code and to begin afresh [I don't feel that same freedom when I engage in premature type-ing with C and Python and etc., and, even, OOP ; the thinking:code ratio is much higher in simple dynamic languages]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    }
]