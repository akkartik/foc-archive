[
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1641375963.111800",
        "client_msg_id": "444766ac-dfea-49a6-95ba-e0eb73ca0ab8",
        "text": "Do you have a longer writeup somewhere?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x7Tz9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you have a longer writeup somewhere?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02C3SH9L2J",
        "type": "message",
        "ts": "1641394131.112000",
        "client_msg_id": "9801dea4-90e8-4855-bb3d-2d25d205b799",
        "text": "<@U02NN5F35L1> yep! Currently it’s pretty simple but each web app is served on its own subdomain with strict <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP|CSP rules> to prevent sending data to external servers. To actually persist data an app can connect to any number of “agents” (which are hosted isolated backends) but it must declare which ones it connects to in its manifest so the user can see. Each agent will have access to a separate, isolated part of the users database and are decoupled from the frontend app. So, for example, that means the “calendar agent” can be used by multiple apps so that you can have a canonical place for all your events. And in your frontend app, you don’t have to do _any_ authentication, authorization, or API-key management. You just declare in your config\/manifest which agents your app interacts with and then you can use those API’s directly. Does that makes sense?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c32c2c4d6375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-21\/5459215329909_c32c2c4d6375f7ce1819_72.png",
            "first_name": "Matthew",
            "real_name": "Matthew Linkous",
            "display_name": "Matthew Linkous",
            "team": "T5TCAFTA9",
            "name": "matt386",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "attachments": [
            {
                "from_url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP",
                "image_url": "https:\/\/developer.mozilla.org\/mdn-social-share.0ca9dbda.png",
                "image_width": 444,
                "image_height": 250,
                "image_bytes": 12123,
                "service_icon": "https:\/\/developer.mozilla.org\/apple-touch-icon.0ea0fa02.png",
                "id": 1,
                "original_url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP",
                "fallback": "Content Security Policy (CSP) - HTTP | MDN",
                "text": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft, to site defacement, to malware distribution.",
                "title": "Content Security Policy (CSP) - HTTP | MDN",
                "title_link": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP",
                "service_name": "developer.mozilla.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c+0R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02NN5F35L1"
                            },
                            {
                                "type": "text",
                                "text": " yep! Currently it’s pretty simple but each web app is served on its own subdomain with strict "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP",
                                "text": "CSP rules"
                            },
                            {
                                "type": "text",
                                "text": " to prevent sending data to external servers. To actually persist data an app can connect to any number of “agents” (which are hosted isolated backends) but it must declare which ones it connects to in its manifest so the user can see. Each agent will have access to a separate, isolated part of the users database and are decoupled from the frontend app. So, for example, that means the “calendar agent” can be used by multiple apps so that you can have a canonical place for all your events. And in your frontend app, you don’t have to do "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " authentication, authorization, or API-key management. You just declare in your config\/manifest which agents your app interacts with and then you can use those API’s directly. Does that makes sense?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02C3SH9L2J",
        "type": "message",
        "ts": "1641394361.112300",
        "client_msg_id": "0bc7e1e5-c570-4145-9ac1-1b096de790eb",
        "text": "<@U013ZLJARC7> ^ my response above might shed some light but we are working on a written overview as well as some preliminary documentation. We’ve also begun pulling out and open-sourcing our Agent runtime (effectively serverless, isolated JS functions) if you’re interested in following that: <https:\/\/github.com\/aspen-cloud\/runtime>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c32c2c4d6375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-21\/5459215329909_c32c2c4d6375f7ce1819_72.png",
            "first_name": "Matthew",
            "real_name": "Matthew Linkous",
            "display_name": "Matthew Linkous",
            "team": "T5TCAFTA9",
            "name": "matt386",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "attachments": [
            {
                "from_url": "https:\/\/github.com\/aspen-cloud\/runtime",
                "image_url": "https:\/\/opengraph.githubassets.com\/fe18b18886dfe3b04be5fa38108c4bfa8cf6a389c34e62857ebef4513aae64e9\/aspen-cloud\/runtime",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 42552,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/aspen-cloud\/runtime",
                "fallback": "GitHub: GitHub - aspen-cloud\/runtime",
                "text": "Contribute to aspen-cloud\/runtime development by creating an account on GitHub.",
                "title": "GitHub - aspen-cloud\/runtime",
                "title_link": "https:\/\/github.com\/aspen-cloud\/runtime",
                "service_name": "GitHub"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Yc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " ^ my response above might shed some light but we are working on a written overview as well as some preliminary documentation. We’ve also begun pulling out and open-sourcing our Agent runtime (effectively serverless, isolated JS functions) if you’re interested in following that: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/aspen-cloud\/runtime"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02NN5F35L1",
        "type": "message",
        "ts": "1641398634.112600",
        "client_msg_id": "301b969b-6a8b-4ded-9c13-ee992ebf0c79",
        "text": "<@U02C3SH9L2J> It does make sense—thanks! I like the idea of owning my data and letting third parties access it in a controllable way.\n\nTwo thoughts come to mind.\n\nOne, it seems similar to how Apple and Google let apps access location, photos, health etc. data. Would you want people to clone this data somehow, or start from scratch?\n\nTwo, why don’t we have something like that already? The idea seems good for the user in principle, so I wonder what may be the reasons it hasn’t really materialized in the past, and what may be different now.\n\nI think what you’re working on could be really awesome!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e1a019c028c1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-22\/2770197337937_e1a019c028c176591195_72.jpg",
            "first_name": "Andy",
            "real_name": "Andy Jakubowski",
            "display_name": "Andy Jakubowski",
            "team": "T5TCAFTA9",
            "name": "hello545",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L0P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02C3SH9L2J"
                            },
                            {
                                "type": "text",
                                "text": " It does make sense—thanks! I like the idea of owning my data and letting third parties access it in a controllable way.\n\nTwo thoughts come to mind.\n\nOne, it seems similar to how Apple and Google let apps access location, photos, health etc. data. Would you want people to clone this data somehow, or start from scratch?\n\nTwo, why don’t we have something like that already? The idea seems good for the user in principle, so I wonder what may be the reasons it hasn’t really materialized in the past, and what may be different now.\n\nI think what you’re working on could be really awesome!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02C3SH9L2J",
        "type": "message",
        "ts": "1641404314.112800",
        "client_msg_id": "0315a6f5-42f5-4011-aa6e-463ad56c88d2",
        "text": "<@U02NN5F35L1> Great observation! We model a lot of ideas around permissions on the patterns used in mobile app ecosystems, and even take it step further by limiting networking.\n1. Re: cloning existing data vs starting anew, we decided to build from scratch so a user will have a clean, single source of truth while still having the ability to write some code (and potentially publish it for others to install with a click!) that can import data from other sources with an API.  We would happily assist someone in making an agent that pulled, for example, Google calendar data into your Aspen calendar.  \n2.  It’s a great question. I think previous attempts at creating personal servers with one-click installable apps have started with existing open-source projects and used ordinary linux VM’s; this however, is fairly costly to the user (paying when not using), still fairly technical to manage, and the existing apps tend to be either low quality or aimed towards developers. Our platform is effectively “serverless” so it is much less expensive to run, has a uniform application model so you can much more easily work with the underlying data and API’s, and should be much easier for non-technical users to use. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c32c2c4d6375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-21\/5459215329909_c32c2c4d6375f7ce1819_72.png",
            "first_name": "Matthew",
            "real_name": "Matthew Linkous",
            "display_name": "Matthew Linkous",
            "team": "T5TCAFTA9",
            "name": "matt386",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tPGK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02NN5F35L1"
                            },
                            {
                                "type": "text",
                                "text": " Great observation! We model a lot of ideas around permissions on the patterns used in mobile app ecosystems, and even take it step further by limiting networking.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Re: cloning existing data vs starting anew, we decided to build from scratch so a user will have a clean, single source of truth while still having the ability to write some code (and potentially publish it for others to install with a click!) that can import data from other sources with an API.  We would happily assist someone in making an agent that pulled, for example, Google calendar data into your Aspen calendar.  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": " It’s a great question. I think previous attempts at creating personal servers with one-click installable apps have started with existing open-source projects and used ordinary linux VM’s; this however, is fairly costly to the user (paying when not using), still fairly technical to manage, and the existing apps tend to be either low quality or aimed towards developers. Our platform is effectively “serverless” so it is much less expensive to run, has a uniform application model so you can much more easily work with the underlying data and API’s, and should be much easier for non-technical users to use. "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U02C3SH9L2J",
        "type": "message",
        "ts": "1641404440.113000",
        "client_msg_id": "4c02a90f-d248-49f0-9dd7-892ca8423958",
        "text": "The other problem is existing apps tend to roll their own authentication and data storage so making them work with an existing platform is very difficult. What ends up happening is, you log into the “platform” and then have to again log into each app which likely has it’s own Postgres process running, etc. Overall, the existing solutions are very clunky and inefficient.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c32c2c4d6375",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-21\/5459215329909_c32c2c4d6375f7ce1819_72.png",
            "first_name": "Matthew",
            "real_name": "Matthew Linkous",
            "display_name": "Matthew Linkous",
            "team": "T5TCAFTA9",
            "name": "matt386",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TCcPl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other problem is existing apps tend to roll their own authentication and data storage so making them work with an existing platform is very difficult. What ends up happening is, you log into the “platform” and then have to again log into each app which likely has it’s own Postgres process running, etc. Overall, the existing solutions are very clunky and inefficient."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1641422754.115400",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1641454102.000000"
        },
        "client_msg_id": "01327afb-1036-42f5-8665-f559b9517cad",
        "text": "I wrote a *generative listicle* using a *browser based programmable notebook* which went a little viral. I thought it be good to see what's coming out of that FoC environment. <https:\/\/observablehq.com\/@tomlarkworthy\/notebooks2021>\nedit: the code to scrape Observable's own internal API to get the content is right at the bottom of that very long notebook! I use an inline CORS proxy and cache the scraping results in FileAttachments. So it's both a piece of content, and a program to self construct itself. The CORS proxy is implemented using (my) webcode.run",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OYnS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote a "
                            },
                            {
                                "type": "text",
                                "text": "generative listicle",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " using a "
                            },
                            {
                                "type": "text",
                                "text": "browser based programmable notebook",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which went a little viral. I thought it be good to see what's coming out of that FoC environment. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/notebooks2021"
                            },
                            {
                                "type": "text",
                                "text": "\nedit: the code to scrape Observable's own internal API to get the content is right at the bottom of that very long notebook! I use an inline CORS proxy and cache the scraping results in FileAttachments. So it's both a piece of content, and a program to self construct itself. The CORS proxy is implemented using (my) webcode.run"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UPX3PH28N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02NN5F35L1",
        "type": "message",
        "ts": "1641454005.000300",
        "client_msg_id": "32851dfb-6e60-4215-8556-c8630b993a31",
        "text": "Great follow-up, thanks <@U02C3SH9L2J>.\n\nThis makes sense to me. It may be indeed the case that nobody’s come up with a working, easy to use solution to this.\n\nYour mention of your platform being serverless stood out to me, because I assume data can be both written and read in my personal cloud. I saw your GitHub repo mentioned an append-only log, I wonder if that has something to do with it? You write by appending, and reading is a matter of reading a “static file”?\n\nI’m interested in your approach because I was thinking of making a similar thing for UI on the web. Many UI elements reuse the same logic, and only differ in styling. So you could define the logic once with statecharts, for example, and then let people style those elements with styles from their “personal style cloud”.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e1a019c028c1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-22\/2770197337937_e1a019c028c176591195_72.jpg",
            "first_name": "Andy",
            "real_name": "Andy Jakubowski",
            "display_name": "Andy Jakubowski",
            "team": "T5TCAFTA9",
            "name": "hello545",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1641330394.111100",
        "parent_user_id": "U02C3SH9L2J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pMoT3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great follow-up, thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U02C3SH9L2J"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThis makes sense to me. It may be indeed the case that nobody’s come up with a working, easy to use solution to this.\n\nYour mention of your platform being serverless stood out to me, because I assume data can be both written and read in my personal cloud. I saw your GitHub repo mentioned an append-only log, I wonder if that has something to do with it? You write by appending, and reading is a matter of reading a “static file”?\n\nI’m interested in your approach because I was thinking of making a similar thing for UI on the web. Many UI elements reuse the same logic, and only differ in styling. So you could define the logic once with statecharts, for example, and then let people style those elements with styles from their “personal style cloud”."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]