[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1549699848.954500",
        "client_msg_id": "147bc825-09ca-44ee-acaf-3c4b20b94148",
        "text": "you are forgetting about lots of things that are eliminated during compilation, like comments for the reader, and what about conditional compilation? Many advanced languages have a preprocessor step with conditional compilation and if you say in C, #if flag .... #else.... #end then the skipped code will not be reconstructed. I have often theorized that the reason C won over every other competitor language of its day, is that it was one of the only ones with a pre-processor. Remember that C was a reaction to PL\/1 which was a superior language, but much \"heavier\". PL\/1 was a much better language IMHO. Anyway preprocessors are very important in commercial work, where you often create demo versions, expiring versions, crippled versions, and not having a pre-processor is very painful for commercial developers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1549567685.924300",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T010C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you are forgetting about lots of things that are eliminated during compilation, like comments for the reader, and what about conditional compilation? Many advanced languages have a preprocessor step with conditional compilation and if you say in C, #if flag .... #else.... #end then the skipped code will not be reconstructed. I have often theorized that the reason C won over every other competitor language of its day, is that it was one of the only ones with a pre-processor. Remember that C was a reaction to PL\/1 which was a superior language, but much \"heavier\". PL\/1 was a much better language IMHO. Anyway preprocessors are very important in commercial work, where you often create demo versions, expiring versions, crippled versions, and not having a pre-processor is very painful for commercial developers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549731979.954900",
        "client_msg_id": "0e94bf5b-8384-46e8-b31d-cb9c8e85b55c",
        "text": "It's been hard to keep up with the flood of connections that came out from SomethingNew, but I've just rediscovered this space (thanks to Ellen Chisa of Dark (go check it out)), and it seems to be the most prominent &amp; active community so far, so I'm hoping to be more involved here. I might just keep SomwthingNew as a catalog. Of the catalogs I've come across, I've found Ivan Reese's visual programming codex quite interesting and useful for discovering new things (it may be how I found Dark)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aj5O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's been hard to keep up with the flood of connections that came out from SomethingNew, but I've just rediscovered this space (thanks to Ellen Chisa of Dark (go check it out)), and it seems to be the most prominent & active community so far, so I'm hoping to be more involved here. I might just keep SomwthingNew as a catalog. Of the catalogs I've come across, I've found Ivan Reese's visual programming codex quite interesting and useful for discovering new things (it may be how I found Dark)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549735881.955100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549738870.000000"
        },
        "client_msg_id": "5865dcaa-7f90-4869-9d55-db4b5666595d",
        "text": "I've struggled for years to describe what I'm after in a clear &amp; concise way, perhaps because there's so much I want to do with it. But I can start with what makes my effort different from most others: It's about bootstrapping.\n\nThere are endless ideas and tools that might improve software &amp; programming in ground breaking ways. But each has its own strengths and limited context, and it takes phenomenal effort to \"shoot for the stars\", over and over as we explore one different avenue after another (the progression of Eve is a good example).\n\nPart of the problem is that in trying to (improve things), we are stuck with the same limitations that we are trying to break free from (e.g. those imposed by current languages &amp; tools).\n\nAnother part is that even for the successful few, that success is trapped in a limited context (e.g. the tool or the target language).\n\nTake Apparatus or Sketch-n-sketch for example: both make it MUCH easier to create dynamic visualizations than by hand or by code ... so why am I (or anyone anywhere) still resorting to anything else still?\n\nIt's because: (1) How do I get that into MY program, or other project, or to interop with (or compile to) whatever rendering API I need to target? And (2) Those tools don't do everything in the world (nothing does!), so what do I do when I need to do something new (e.g. blurring)? I can't change the tool!\n\nThis is where my approach to bootstrapping comes in, which I'll describe in my next reply",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=4lk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've struggled for years to describe what I'm after in a clear & concise way, perhaps because there's so much I want to do with it. But I can start with what makes my effort different from most others: It's about bootstrapping.\n\nThere are endless ideas and tools that might improve software & programming in ground breaking ways. But each has its own strengths and limited context, and it takes phenomenal effort to \"shoot for the stars\", over and over as we explore one different avenue after another (the progression of Eve is a good example).\n\nPart of the problem is that in trying to (improve things), we are stuck with the same limitations that we are trying to break free from (e.g. those imposed by current languages & tools).\n\nAnother part is that even for the successful few, that success is trapped in a limited context (e.g. the tool or the target language).\n\nTake Apparatus or Sketch-n-sketch for example: both make it MUCH easier to create dynamic visualizations than by hand or by code ... so why am I (or anyone anywhere) still resorting to anything else still?\n\nIt's because: (1) How do I get that into MY program, or other project, or to interop with (or compile to) whatever rendering API I need to target? And (2) Those tools don't do everything in the world (nothing does!), so what do I do when I need to do something new (e.g. blurring)? I can't change the tool!\n\nThis is where my approach to bootstrapping comes in, which I'll describe in my next reply"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UAVCC2X70",
        "thread_ts": "1527044282.000289",
        "root": {
            "user": "UAVCC2X70",
            "type": "message",
            "ts": "1527044282.000289",
            "client_msg_id": "fa1f8e7f-2941-47ff-a336-3b5a32ad419f",
            "text": "My personal project can be found here:\n<https:\/\/github.com\/d-cook\/Objects>\n\nBut is perhaps better described here (at the specific entry linked to in this URL):\n<https:\/\/www.cemetech.net\/forum\/viewtopic.php?p=270092#270092>",
            "team": "T5TCAFTA9",
            "thread_ts": "1527044282.000289",
            "reply_count": 21,
            "reply_users_count": 4,
            "latest_reply": "1549997777.015900",
            "reply_users": [
                "U8A5MS6R1",
                "UAVCC2X70",
                "UE1JQM9HQ",
                "UCUSW7WVD"
            ],
            "replies": [
                {
                    "user": "U8A5MS6R1",
                    "ts": "1527122550.000204"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1527122824.000061"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549731979.954900"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549735881.955100"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549741340.955500"
                },
                {
                    "user": "UE1JQM9HQ",
                    "ts": "1549743709.961100"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549744092.961600"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549745214.961800"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549745871.962500"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549749586.963500"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549758009.963800"
                },
                {
                    "user": "UE1JQM9HQ",
                    "ts": "1549771803.964800"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549780084.966200"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549786956.967200"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549825422.969100"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549949784.011400"
                },
                {
                    "user": "UAVCC2X70",
                    "ts": "1549951376.012700"
                },
                {
                    "user": "UE1JQM9HQ",
                    "ts": "1549961771.014100"
                },
                {
                    "user": "U8A5MS6R1",
                    "ts": "1549997330.015300"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1549997457.015600"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1549997777.015900"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "service_name": "GitHub",
                    "title": "d-cook\/Objects",
                    "title_link": "https:\/\/github.com\/d-cook\/Objects",
                    "text": "Objects - JavaScript POC for a fully user-modifiable software system",
                    "fallback": "GitHub: d-cook\/Objects",
                    "from_url": "https:\/\/github.com\/d-cook\/Objects",
                    "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/22676260?s=400&v=4",
                    "thumb_width": 250,
                    "thumb_height": 250,
                    "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/github.png",
                    "id": 1,
                    "original_url": "https:\/\/github.com\/d-cook\/Objects"
                },
                {
                    "title": "Self-Defined Object System - Cemetech | Forum | Your Projects [Topic]",
                    "title_link": "https:\/\/www.cemetech.net\/forum\/viewtopic.php?p=270092#270092",
                    "text": "Discuss TI-83 Plus, TI-84 Plus, and Casio Prizm calculator programming, web, and computer programming, hardware development, and projects on the Cemetech Forum. C\/C++, PHP, BASIC, assembly, and much more.",
                    "fallback": "Self-Defined Object System - Cemetech | Forum | Your Projects [Topic]",
                    "from_url": "https:\/\/www.cemetech.net\/forum\/viewtopic.php?p=270092#270092",
                    "service_icon": "https:\/\/www.cemetech.net\/favicon.ico",
                    "service_name": "cemetech.net",
                    "id": 2,
                    "original_url": "https:\/\/www.cemetech.net\/forum\/viewtopic.php?p=270092#270092"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "eX3Y",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "My personal project can be found here:\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/github.com\/d-cook\/Objects"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nBut is perhaps better described here (at the specific entry linked to in this URL):\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/www.cemetech.net\/forum\/viewtopic.php?p=270092#270092"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1549741340.955500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549951510.000000"
        },
        "client_msg_id": "110a7fde-357f-4a21-9c2f-3e67298eb264",
        "text": "(continuing from previous)\n\nIt might seem that the \"escape\" would be to create some tool (or language, etc.) to improve software\/programming, and then remake the tool using the tool itself. However, this standard definition of \"bootstrapping\" does nothing to break free from the limited context of the tool. As a user, I still cannot plop the gains of your tool into some other context, nor can I alter the tool for my needs ... unless I want to work at the source code level, but then we're back in the same world we started in.\n\nPerhaps a magic tool-making tool? Nope, because that tool will have IT'S limited scope, and now you've just moved the problem up a level. The problem here is relying on one tool to edit another tool, ad infinitum.\n\nThus, the solution I'm after is a tool that (1) can model or simulate essentially anything (e.g. Turing complete from a code *and* a visualization &amp; user-interaction standpoint),  (2) is the the engine is it's own modification, and (3) can interop with, or translate to, or port *itself*, to any other context (e.g. execution environment or language or data format). Once 1 and 2 are fulfilled, then 3 can be done using the tool itself.\n\nNow the whole point is *really* to allow the user to model whatever they what, *however* they want, in whatever context they want. But that's only possible if the end user has that same power over the tool *itself*.\n\nOne thing I hope this provides is an environment in which many ideas can be cross-applied to *immediately* benefit from each other, and thus rapidly increase the rate at which new ideas &amp; tools can be developed &amp; explored.\n\nMoreso, I hope to provide such capabilities to people *using* software, so anyone can create &amp; control the (software) world that they live in ... which is essentially what every facet of society is built on. That's the \"Computer revolution [that] hasn't happened yet\", as Alan Kay puts it -- imagine what literacy has done for humanity, and picture the same thing for computing (see also BV's \"The humane representation of thought\"). And it's also Christopher Alexander's address to restore \"Living Structure\" to the world (which he made at OOPSLA '96 -- find it on YouTube).\n\nI'll describe the mechanism in my next reply",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+GHV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(continuing from previous)\n\nIt might seem that the \"escape\" would be to create some tool (or language, etc.) to improve software\/programming, and then remake the tool using the tool itself. However, this standard definition of \"bootstrapping\" does nothing to break free from the limited context of the tool. As a user, I still cannot plop the gains of your tool into some other context, nor can I alter the tool for my needs ... unless I want to work at the source code level, but then we're back in the same world we started in.\n\nPerhaps a magic tool-making tool? Nope, because that tool will have IT'S limited scope, and now you've just moved the problem up a level. The problem here is relying on one tool to edit another tool, ad infinitum.\n\nThus, the solution I'm after is a tool that (1) can model or simulate essentially anything (e.g. Turing complete from a code "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a visualization & user-interaction standpoint),  (2) is the the engine is it's own modification, and (3) can interop with, or translate to, or port "
                            },
                            {
                                "type": "text",
                                "text": "itself",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", to any other context (e.g. execution environment or language or data format). Once 1 and 2 are fulfilled, then 3 can be done using the tool itself.\n\nNow the whole point is "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to allow the user to model whatever they what, "
                            },
                            {
                                "type": "text",
                                "text": "however",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " they want, in whatever context they want. But that's only possible if the end user has that same power over the tool "
                            },
                            {
                                "type": "text",
                                "text": "itself",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nOne thing I hope this provides is an environment in which many ideas can be cross-applied to "
                            },
                            {
                                "type": "text",
                                "text": "immediately",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " benefit from each other, and thus rapidly increase the rate at which new ideas & tools can be developed & explored.\n\nMoreso, I hope to provide such capabilities to people "
                            },
                            {
                                "type": "text",
                                "text": "using",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " software, so anyone can create & control the (software) world that they live in ... which is essentially what every facet of society is built on. That's the \"Computer revolution [that] hasn't happened yet\", as Alan Kay puts it -- imagine what literacy has done for humanity, and picture the same thing for computing (see also BV's \"The humane representation of thought\"). And it's also Christopher Alexander's address to restore \"Living Structure\" to the world (which he made at OOPSLA '96 -- find it on YouTube).\n\nI'll describe the mechanism in my next reply"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "U5TCAFTD3",
                    "UD43R8ZFV"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1549743709.961100",
        "client_msg_id": "0D9AE3CA-F41A-47E3-B800-C852E16603EB",
        "text": "You seem to be describing a Smalltalk system :). You can already play with one at <https:\/\/pharo.org>. On top of that we built <https:\/\/gtoolkit.com> to enable the end user to put arbitrary interfaces on any object in the system. This creates a complete new experience through which you can both manipulate and understand the different parts through custom views.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "attachments": [
            {
                "title": "Glamorous Toolkit",
                "title_link": "https:\/\/gtoolkit.com\/",
                "text": "The Glamorous Toolkit is the moldable development environment. For Pharo",
                "fallback": "Glamorous Toolkit",
                "from_url": "https:\/\/gtoolkit.com\/",
                "service_icon": "https:\/\/gtoolkit.com\/favicon.ico",
                "service_name": "gtoolkit.com",
                "id": 1,
                "original_url": "https:\/\/gtoolkit.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IJOeP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You seem to be describing a Smalltalk system :). You can already play with one at "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pharo.org"
                            },
                            {
                                "type": "text",
                                "text": ". On top of that we built "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gtoolkit.com"
                            },
                            {
                                "type": "text",
                                "text": " to enable the end user to put arbitrary interfaces on any object in the system. This creates a complete new experience through which you can both manipulate and understand the different parts through custom views."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "UF5PAGQQ4"
                ],
                "count": 1
            },
            {
                "name": "clap",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549744092.961600",
        "client_msg_id": "8998e747-dd70-49e5-b019-be7638316944",
        "text": "(Note: I just made my final edit to previous)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2sEw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Note: I just made my final edit to previous)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549745214.961800",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549749441.000000"
        },
        "client_msg_id": "ffc17838-572a-4629-a293-ef84077db35f",
        "text": "I get that a lot, and it's hard to explain, but ST only brought us half way there. Kay himself said that the point of ST was not to have ST itself, but to allow you to replace it with something better and throw it away. Kay realized early on that it had become too much of a language and strayed from the original Object Oriented goal (OO today does not mean the same thing -- it was about enabling *user* composition of software components, NOT as a programming mechanism involving classes). However, he was unable to change the momentum of the other devs, and by the time it was commercialized the battle was already lost (read \"A brief history of smalltalk\").\n\nSo although, yes, the underlying system is directly accessible and modifiable by the user (which is vital and a HUGE step forward), that model is still just textual code. From a manipulation standpoint, that is not fundamentally different from any other Turing Complete language (or at least any dynamic one, like JavaScript). That is *not* the kind of direct manipulation or literacy needed to spark the computer revolution.\n\nI'm not trying to rain on the ST parade -- it was one of the best things to ever happen in the history of software. But Kay himself is adamant that we are still decades behind what should have been possible, even then. He's one of my biggest inspirations, and I'm excited about exploring how to \"get there\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j=iC4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I get that a lot, and it's hard to explain, but ST only brought us half way there. Kay himself said that the point of ST was not to have ST itself, but to allow you to replace it with something better and throw it away. Kay realized early on that it had become too much of a language and strayed from the original Object Oriented goal (OO today does not mean the same thing -- it was about enabling "
                            },
                            {
                                "type": "text",
                                "text": "user",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " composition of software components, NOT as a programming mechanism involving classes). However, he was unable to change the momentum of the other devs, and by the time it was commercialized the battle was already lost (read \"A brief history of smalltalk\").\n\nSo although, yes, the underlying system is directly accessible and modifiable by the user (which is vital and a HUGE step forward), that model is still just textual code. From a manipulation standpoint, that is not fundamentally different from any other Turing Complete language (or at least any dynamic one, like JavaScript). That is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the kind of direct manipulation or literacy needed to spark the computer revolution.\n\nI'm not trying to rain on the ST parade -- it was one of the best things to ever happen in the history of software. But Kay himself is adamant that we are still decades behind what should have been possible, even then. He's one of my biggest inspirations, and I'm excited about exploring how to \"get there\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549745871.962500",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549746797.000000"
        },
        "client_msg_id": "38adc29b-92ad-4144-83af-6c1e82b59d4b",
        "text": "... Now that I look closer at that link, I see that you have a tool that may be in the same vein as what I'm after. That's awesome, I'll give it a look! (and thanks for sharing)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WzK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... Now that I look closer at that link, I see that you have a tool that may be in the same vein as what I'm after. That's awesome, I'll give it a look! (and thanks for sharing)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549749586.963500",
        "client_msg_id": "40642d0d-aab6-4725-a6b8-88d32f9ffaa6",
        "text": "(Sorry for all the edits; I simplified my response quite a bit)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zlZQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Sorry for all the edits; I simplified my response quite a bit)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549758009.963800",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549777045.000000"
        },
        "client_msg_id": "0a7bd5ab-c350-4460-b08c-dbdffca684db",
        "text": "(continuing about \"the mechanism\", as I said I would before)\n\nSo now we're past the \"what\" and \"why\", here's the \"how\" (in answer to Shalab's question about semantics):\n\nSuch a tool needs a way to represent arbitrary data &amp; code, including its own. Textual \"source code\" will not do, because it must be parsed *into* structure before it can be dealt with in any meaningful way. Instead we need a direct representation that structure (e.g. an AST) *to begin with*. Essentially, a JSON \/ Lisp -like structure (lists, dictionaries, and simple values like strings and numbers).\n\nThus, all that is needed is the *minimum possible* of the following:\n* A user interface for viewing &amp; manipulating that kind of structure.\n* An interpreter and\/or compiler, so that structure is actually runnable as \"code\".\n* All of the above is coded \/ stored in that \"structure\", and thus also exposed for direct user modification. (A small amount of low-level code is needed to make it work at all; but it is either embedded within and\/or compiled from the high level structure).\n\nIn my next reply (sorry, it will have an end) I'll explain the semantics of the built-in interpreter \/ structural code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HFQH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(continuing about \"the mechanism\", as I said I would before)\n\nSo now we're past the \"what\" and \"why\", here's the \"how\" (in answer to Shalab's question about semantics):\n\nSuch a tool needs a way to represent arbitrary data & code, including its own. Textual \"source code\" will not do, because it must be parsed "
                            },
                            {
                                "type": "text",
                                "text": "into",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " structure before it can be dealt with in any meaningful way. Instead we need a direct representation that structure (e.g. an AST) "
                            },
                            {
                                "type": "text",
                                "text": "to begin with",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Essentially, a JSON \/ Lisp -like structure (lists, dictionaries, and simple values like strings and numbers).\n\nThus, all that is needed is the "
                            },
                            {
                                "type": "text",
                                "text": "minimum possible",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the following:\n* A user interface for viewing & manipulating that kind of structure.\n* An interpreter and\/or compiler, so that structure is actually runnable as \"code\".\n* All of the above is coded \/ stored in that \"structure\", and thus also exposed for direct user modification. (A small amount of low-level code is needed to make it work at all; but it is either embedded within and\/or compiled from the high level structure).\n\nIn my next reply (sorry, it will have an end) I'll explain the semantics of the built-in interpreter \/ structural code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1549771803.964800",
        "client_msg_id": "36976803-e0a6-409e-89ff-3cf6fdff5ef4",
        "text": "The model of an Smalltalk system is not textual code. It's objects, and the compiled code is captured as objects as well. You are correct in that a key aspect of Smalltalk is to be bootstrapped and deeply reflective. Pharo is a Smalltalk, but its model is different from the original Smalltalk. For example, the AST is the key element. It can be annotated directly. The textual representation is an input format, but it is not an essential one from the machinery point of view.\n\nGlamorous Toolkit is a development environment that extends the base language with a visual and interaction language to allow you to construct custom visual representations while you are using the interface.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TIP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The model of an Smalltalk system is not textual code. It's objects, and the compiled code is captured as objects as well. You are correct in that a key aspect of Smalltalk is to be bootstrapped and deeply reflective. Pharo is a Smalltalk, but its model is different from the original Smalltalk. For example, the AST is the key element. It can be annotated directly. The textual representation is an input format, but it is not an essential one from the machinery point of view.\n\nGlamorous Toolkit is a development environment that extends the base language with a visual and interaction language to allow you to construct custom visual representations while you are using the interface."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1549780084.966200",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1549782992.000000"
        },
        "client_msg_id": "b13b161d-32ce-460f-9665-771c2b2c27b0",
        "text": "(continuing from previous)\n\nThe semantics of the built-in interpreter \/ structural code are straight-forward:\n\nSince everything in the tool (and anything that *could* be in the tool) consists of the same structural elements, the only possible actions that the code can take, is all the operations that can be performed on those structural elements. At the most fundamental level that's the basic CRUD operations (set, get, has? \/ exists?, delete), and basic arithmetic and logical operations.\n\nTada!\n\n... Ok, so maybe it's not entirely straightforward, since there are limitless ways I could have chosen to represent such operations. But I will say that after exploring different approaches and trying hard to derive the simplest model, I essentially arrived (unintentionally, but seemingly inescapably) at the standard LISP representation.\n\nPut simply:\n* Anything other than a list (\"array\") evaluates to itself.\n* A list is evaluated by evaluating each item in it, with the first item being the operation to perform, and the remaining items being the arguments for that operation.\n* The interpreter knows NOTHING about which operations can be performed, and instead looks them up by name from some \"context\".\n* The interpreter can be invoked with different \"contexts\", which allows for context-specific code \/ DSLs\n\nFurthermore, the same set of operations can be invoked either by code or by user interaction.\n\nI've since started a new project, \"Interact\", which is essentially the same thing, but is starting with the UI and working downwards, whereas my \"objects\" project is working from the ground up.\n\nIn my next reply, I'll say a bit about intentions for this tool",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1527044282.000289",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W+9F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(continuing from previous)\n\nThe semantics of the built-in interpreter \/ structural code are straight-forward:\n\nSince everything in the tool (and anything that "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be in the tool) consists of the same structural elements, the only possible actions that the code can take, is all the operations that can be performed on those structural elements. At the most fundamental level that's the basic CRUD operations (set, get, has? \/ exists?, delete), and basic arithmetic and logical operations.\n\nTada!\n\n... Ok, so maybe it's not entirely straightforward, since there are limitless ways I could have chosen to represent such operations. But I will say that after exploring different approaches and trying hard to derive the simplest model, I essentially arrived (unintentionally, but seemingly inescapably) at the standard LISP representation.\n\nPut simply:\n* Anything other than a list (\"array\") evaluates to itself.\n* A list is evaluated by evaluating each item in it, with the first item being the operation to perform, and the remaining items being the arguments for that operation.\n* The interpreter knows NOTHING about which operations can be performed, and instead looks them up by name from some \"context\".\n* The interpreter can be invoked with different \"contexts\", which allows for context-specific code \/ DSLs\n\nFurthermore, the same set of operations can be invoked either by code or by user interaction.\n\nI've since started a new project, \"Interact\", which is essentially the same thing, but is starting with the UI and working downwards, whereas my \"objects\" project is working from the ground up.\n\nIn my next reply, I'll say a bit about intentions for this tool"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]