[
    {
        "text": "I'm running the emulated version now on Gitpod. (<https:\/\/gitpod.io\/#https:\/\/github.com\/akkartik\/mu>). Will report back when I have runtime numbers",
        "files": [
            {
                "id": "F021MS7LZ9A",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UMVFWPZ36",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Lj++",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm running the emulated version now on Gitpod. ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitpod.io\/#https:\/\/github.com\/akkartik\/mu"
                            },
                            {
                                "type": "text",
                                "text": "). Will report back when I have runtime numbers"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1620674650.115700",
        "thread_ts": "1620584015.099800",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "text": "actually wasn't too slow. now i need to learn qemu-system-i386",
        "files": [
            {
                "id": "F0218UHDGFQ",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UMVFWPZ36",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ani",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "actually wasn't too slow. now i need to learn qemu-system-i386"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1620674883.115900",
        "thread_ts": "1620584015.099800",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1620675022.116100",
        "client_msg_id": "2c0c8f46-f989-4554-b937-4a250d0e571e",
        "text": "ok using my brain instead of just copy\/paste, I'm guessing it worked and I just need to have an image viewer that supports \".img\" files",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620584015.099800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iYHIj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok using my brain instead of just copy\/paste, I'm guessing it worked and I just need to have an image viewer that supports \".img\" files"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1620678135.116300",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1620678157.000000"
        },
        "client_msg_id": "3cacae68-401c-43d8-8a98-1ff8e13f1a9c",
        "text": "I don't understand gitpod, but when I run Qemu locally I get a graphic window. There's a way to run without it, but it doesn't seem very supported and Mu will likely also be unusable on it since you'll be flying blind. So, unfortunately, I don't think a headless server will work.\n\nIf you like I can send you a .img file to run locally on Qemu. It's sandboxed, to my knowledge.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620584015.099800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/9WY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't understand gitpod, but when I run Qemu locally I get a graphic window. There's a way to run without it, but it doesn't seem very supported and Mu will likely also be unusable on it since you'll be flying blind. So, unfortunately, I don't think a headless server will work.\n\nIf you like I can send you a .img file to run locally on Qemu. It's sandboxed, to my knowledge."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1620680545.116700",
        "client_msg_id": "1293aad4-d2f1-46fe-a678-9a86030bd7a4",
        "text": "<@UCUSW7WVD> Your confusion about what edges _are_ makes sense. I haven't done much to explain the technical relationship between graphical objects in Hest. So in entirely too much detail for a Slack message, here is the context needed to talk about what edges are (in the current prototypes), from the top, with a little bit of \"designer commentary\" along the way. This is long, so feel free to \"nope\" hard, haha!\n\n_Objects_ are collections of _properties_ with a unique identity. Bog standard.\n• Some say that the object \"is\" its properties, or \"has\" its properties — I go both ways.\n• This association of objects and properties in Hest isn't _graphical_ yet. There's just a little property editor in the sidebar, like you'd see in Unity (say). Inelegant, but pragmatic.\nAn object with a _position_ property (eg: x, y, z) is by convention called a _point_.\n• Nothing more to it than that.\n• _Any_ object with a position is a point.\nObjects can have other properties too, like information for the renderer \/ art tools.\n• An imported JPG that you place on the canvas is a point (has a position), and can be rendered as an image at that position.\n• Points will, by default, be rendered as little circles.\n• The Move tool reads\/writes the position property.\n• This is all pluggable, and there will be a few episodes about how this works. It's an interesting comparison with the Glamorous Toolkit.\nAnother property that an object can possess is _data._ When a point object has some data, I call it a _data point._\n• Data points are like spreadsheet cells, yes, in that they are containers for arbitrary data.\n• But there's nothing reactive going on here.\n• The data property is just an inert bucket for state.\n• Any object can have data — subject of an upcoming episode.\n• This part of the design has lots of weaknesses — like what to do about complex data structures. Again, pragmatic for now, elegant can come later.\nAnother property that an object can possess is _behaviour_.\n• What a behaviour _is,_ and how you'd make one, is out of scope. Just think of it as some function reference.\nAnother property that an object can possess is an ordered list of references to points.\n• I call these objects _edges,_ by convention.\n• Why \"edge\" and not \"wire\" or \"path\" or \"curve\" or something else? * shrug *\n• The first point in the list is referred to as the _start point_, and the last is the _end point_.\nEdges will probably also have some special instructions for the renderer \/ tools.\n• The geometry of the edge will be created by interpolating the points, so the edge needs to specify the interpolation strategy to use (bezier? linear? spline?)\nNow, execution!\n\nPoints can have a property specifying which edge they're being _conveyed_ by.\n\nWhen a point is being conveyed by an edge:\n• The point's position will automatically be set by the execution engine.\n• As execution time advances, the point will be gradually moved along the edge from the start point to the end point.\nWhen the conveyed point reaches the end:\n• The end point's behaviour (function) will be invoked, if any.\n• The conveyed point will be provided as an argument to that function.\n• The function will do _whatever it does_ with that point (probably something with the _data_ inside that point, if any).\n• The result of the function will be a new point (probably with some new data).\n• The _end point_ of the conveyor edge will probably be the _start point_ of one or more other edges.\n• A copy of the new point will then be conveyed by each of those outbound edges.\nSo in this situation, I say that the edge is a \"conveyor\", the point is \"conveyed\", and the action is \"conveyance\". It's like a train on a track, or a ball in a <https:\/\/en.wikipedia.org\/wiki\/Rolling_ball_sculpture|rolling ball sculpture>. The conveyor is a concrete thing unto itself, with its own life and purpose. It's not just, like, a shadow or trail left behind by a point.\n\nI hope that helps you make more sense of what I mean by \"edge\".\n\nAnd as is common, a lot of this stuff is still changing in considerable ways. But the bones are all here, I think :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3uYY=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Your confusion about what edges "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " makes sense. I haven't done much to explain the technical relationship between graphical objects in Hest. So in entirely too much detail for a Slack message, here is the context needed to talk about what edges are (in the current prototypes), from the top, with a little bit of \"designer commentary\" along the way. This is long, so feel free to \"nope\" hard, haha!\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Objects",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are collections of "
                            },
                            {
                                "type": "text",
                                "text": "properties",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with a unique identity. Bog standard.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Some say that the object \"is\" its properties, or \"has\" its properties — I go both ways."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This association of objects and properties in Hest isn't "
                                    },
                                    {
                                        "type": "text",
                                        "text": "graphical",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " yet. There's just a little property editor in the sidebar, like you'd see in Unity (say). Inelegant, but pragmatic."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAn object with a "
                            },
                            {
                                "type": "text",
                                "text": "position",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " property (eg: x, y, z) is by convention called a "
                            },
                            {
                                "type": "text",
                                "text": "point",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Nothing more to it than that."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Any",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " object with a position is a point."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nObjects"
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "can have other properties too, like information for the renderer \/ art tools.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An imported JPG that you place on the canvas is a point (has a position), and can be rendered as an image at that position."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Points will, by default, be rendered as little circles."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The Move tool reads\/writes the position property."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This is all pluggable, and there will be a few episodes about how this works. It's an interesting comparison with the Glamorous Toolkit."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnother property that an object can possess is "
                            },
                            {
                                "type": "text",
                                "text": "data. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "When a point object has some data, I call it a "
                            },
                            {
                                "type": "text",
                                "text": "data point.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Data points"
                                    },
                                    {
                                        "type": "text",
                                        "text": " ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "are like spreadsheet cells, yes, in that they are containers for arbitrary data."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "But there's nothing reactive going on here."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The data property is just an inert bucket for state."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Any object can have data — subject of an upcoming episode."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This part of the design has lots of weaknesses — like what to do about complex data structures. Again, pragmatic for now, elegant can come later."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnother property that an object can possess is "
                            },
                            {
                                "type": "text",
                                "text": "behaviour",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What a behaviour "
                                    },
                                    {
                                        "type": "text",
                                        "text": "is, ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "and how you'd make one, is out of scope. Just think of it as some function reference."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAnother property that an object can possess is an ordered list of references to points.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I call these objects "
                                    },
                                    {
                                        "type": "text",
                                        "text": "edges, ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "by convention."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Why \"edge\" and not \"wire\" or \"path\" or \"curve\" or something else? * shrug *"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The first point in the list is referred to as the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "start point",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", and the last is the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "end point",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nEdges will probably also have some special instructions for the renderer \/ tools.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The geometry of the edge will be created by interpolating the points, so the edge needs to specify the interpolation strategy to use (bezier? linear? spline?)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow, execution!\n\nPoints can have a property specifying which edge they're being "
                            },
                            {
                                "type": "text",
                                "text": "conveyed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by.\n\nWhen a point is being conveyed by an edge:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The point's position will automatically be set by the execution engine."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As execution time advances, the point will be gradually moved along the edge from the start point to the end point."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhen the conveyed point reaches the end:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The end point's behaviour (function) will be invoked, if any."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The conveyed point will be provided as an argument to that function."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The function will do "
                                    },
                                    {
                                        "type": "text",
                                        "text": "whatever it does",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " with that point (probably something with the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "data",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " inside that point, if any)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The result of the function will be a new point (probably with some new data)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The "
                                    },
                                    {
                                        "type": "text",
                                        "text": "end point ",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "of the conveyor edge will probably be the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "start point",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " of one or more other edges."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A copy of the new point will then be conveyed by each of those outbound edges."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo in this situation, I say that the edge is a \"conveyor\", the point is \"conveyed\", and the action is \"conveyance\". It's like a train on a track, or a ball in a "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Rolling_ball_sculpture",
                                "text": "rolling ball sculpture"
                            },
                            {
                                "type": "text",
                                "text": ". The conveyor is a concrete thing unto itself, with its own life and purpose. It's not just, like, a shadow or trail left behind by a point.\n\nI hope that helps you make more sense of what I mean by \"edge\".\n\nAnd as is common, a lot of this stuff is still changing in considerable ways. But the bones are all here, I think :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1620681576.117000",
        "client_msg_id": "9d480c29-0920-4d85-b25b-5b5cf8f1e014",
        "text": "Very illuminating, thanks. After listening to the first half of episode 4 this morning, I've been thinking about what a \"Hestified\" Game of Life looks like.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fj3b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very illuminating, thanks. After listening to the first half of episode 4 this morning, I've been thinking about what a \"Hestified\" Game of Life looks like."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1620681770.117200",
        "client_msg_id": "f1a91569-3463-4e7b-a4a0-3b44403716ae",
        "text": "Why does an edge need to have a list of points rather than just a list of raw positions? Is there any scenario you've come up with that needs the additional complexity?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "coK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why does an edge need to have a list of points rather than just a list of raw positions? Is there any scenario you've come up with that needs the additional complexity?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1620686062.120800",
        "client_msg_id": "A42DE373-4529-4198-9FD0-DE5E620469CA",
        "text": "does execution only occur at end points or can it occur along any point in an edge (for example stepwise or continuous transformations)? if not, are the in-between points in the edge meant purely as a ux affordance or do they do something else?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pkX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "does execution only occur at end points or can it occur along any point in an edge (for example stepwise or continuous transformations)? if not, are the in-between points in the edge meant purely as a ux affordance or do they do something else?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1620695093.121200",
        "client_msg_id": "480ddc73-b8d6-4ecd-b12a-127d879b18d0",
        "text": "<@UCUSW7WVD> what is the exact difference between points and positions that you have in mind?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0BJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " what is the exact difference between points and positions that you have in mind?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1620695248.121400",
        "client_msg_id": "a4dbcdf9-4da4-433f-8044-e4985d1c01e0",
        "text": "<@UHWC9PXBL> I asked Ivan about this very thing.  At first I thought that moving along an edge would tend to continuously vary some numeric property of a point (besides its position).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZVTjP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I asked Ivan about this very thing.  At first I thought that moving along an edge would tend to continuously vary some numeric property of a point (besides its position)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1620696610.121600",
        "client_msg_id": "a7204995-7fee-407c-b6bd-f7be3e56482c",
        "text": "<@UA14TGLTC> Point = data object with attributes including a position, as I understood the description. Position = just coordinates.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TZ9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Point = data object with attributes including a position, as I understood the description. Position = just coordinates."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1620698400.121900",
        "client_msg_id": "1e7b5cbf-938f-4a60-ae46-8e849be0e59c",
        "text": "I imagine its just more regular to use points everywhere.  I guess you could get into lifecycle issues.  What happens to a point along an edge whose endpoints are moving?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3EB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I imagine its just more regular to use points everywhere.  I guess you could get into lifecycle issues.  What happens to a point along an edge whose endpoints are moving?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1620698819.122100",
        "client_msg_id": "a6ac63b6-9085-4884-8d06-052fd944ada4",
        "text": "Oh .img is not an image. It's a disk image which can pretend to be a persistent storage volume.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1620584015.099800",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7jq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh .img is not an image. It's a disk image which can pretend to be a persistent storage volume."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1620709025.122500",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1620709255.000000"
        },
        "client_msg_id": "595473e1-8245-4b47-a1e8-36b418e1cf3e",
        "text": "Really enjoying this discussion — thanks, gang!\n\n&gt; Why does an edge need to have a list of points rather than just a list of raw positions? Is there any scenario you've come up with that needs the additional complexity?\nThere's surely a way to do Hest where the edges just have lists of coords, rather than lists of points. In many ways, there's hardly a difference. For instance: when you select and move an edge, the move tool would need to know how to update lists of coords, rather than how to update lists of points. (Whether this \"knowledge\" belongs within the move tool, or within the concept of an edge, is yet another thing I haven't yet settled on, but I digress.)\n\nBut other things would be quite different. Execution depends entirely on the existence of an end point (which contains the behaviour that will be invoked). Multiple edges can terminate at the same end point, so it would be quite different to (for instance) have the behaviour be a property of the edge rather than its end point.\n\nZooming out a bit — a list of coords is a more _closed_-feeling design, whereas a list of points is a more _open_-feeling design. There are lots of things you can do with coords, sure, but there are even more things you can do with points. Points, which always must contain some coords, are operationally a strict superset of coords.\n\nEdges can share endpoints, but they can also share midpoints. That opens up some nice possibilities like <https:\/\/twitter.com\/spiralganglion\/status\/1390464018276438020|braiding> several edges together in the middle to cut down on visual noise. Sure you could do that with coords, but think about what it'd be like to write the tools for editing braided edges. If you define edges in terms of points, these extra features sort of just naturally fall out of the design.\n\nWilliam (as usual, haha) brought up a great thought-provoking question about this: What happens to a point along an edge whose endpoints are moving?\n\nHere are some tweets showing what that _looks_ like:\n\n(A) <https:\/\/twitter.com\/spiralganglion\/status\/1145188460203872256>\n(B) <https:\/\/twitter.com\/spiralganglion\/status\/1153777314443849728>\n\nBoth of these are sort of.. joke tweets, in that they don't mean anything _computationally_. (And B is a flat out troll!) They're just experiments with what it looks \/ feels like to attach the points in an edge to another edge. In (A), the points are being conveyed. In (B), the points are attached at fixed positions.\n\nEdge points attached to other edges at fixed positions — this is useful for making art (which is a big part of what Hest is for — it's a drawing program with programming features).\n\nEdge points conveyed along other edges — this is a huge fucking can of worms. I'm pretty sure it opens the door to graphical metaprogramming \/ reflection. But it also makes the evaluation _fiendishly_ complex. For instance: answering the question \"how long until this conveyed data point reaches the conveyor's end point?\" is no longer something I can do with closed-form math, if the conveyor is itself comprised of edges that are moving. So I need to tweak the execution semantics to pull it all back down to closed-form (haven't found a good way to do that yet). Or I need to accept the gross nondeterminism and potentially skyrocketing performance cost of doing arbitrarily complex collision detection (which is what I've been doing so far, naively).\n\nTruth be told, I really love this part of the Hest project — there's a big hairy gross emergent-complexity consequence of the combination of otherwise fairly pure &amp; simple conceptual pieces. Many folks retch at this sort of complexity, and will kill themselves trying to find both perfectly pure atomic concepts and perfectly pure combinations thereof. Ask Whitehead and Russell how that went! Me, I'd rather embrace the inherent lumpiness of my conceptual dust particle, and grow a nice crystal around it.\n\nBack to your original question, Kartik — why did I choose to do a list of points, not a list of coords? The real reason is quite boring: in 3D graphics, the vertex is the most foundational primitive, and edges are expressed in terms of vertices. So when doing the initial design, I just lifted that conceptual framework wholesale.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w6b6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really enjoying this discussion — thanks, gang!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why does an edge need to have a list of points rather than just a list of raw positions? Is there any scenario you've come up with that needs the additional complexity?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere's surely a way to do Hest where the edges just have lists of coords, rather than lists of points. In many ways, there's hardly a difference. For instance: when you select and move an edge, the move tool would need to know how to update lists of coords, rather than how to update lists of points. (Whether this \"knowledge\" belongs within the move tool, or within the concept of an edge, is yet another thing I haven't yet settled on, but I digress.)\n\nBut other things would be quite different. Execution depends entirely on the existence of an end point (which contains the behaviour that will be invoked). Multiple edges can terminate at the same end point, so it would be quite different to (for instance) have the behaviour be a property of the edge rather than its end point.\n\nZooming out a bit — a list of coords is a more "
                            },
                            {
                                "type": "text",
                                "text": "closed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "-feeling design, whereas a list of points is a more "
                            },
                            {
                                "type": "text",
                                "text": "open",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "-feeling design. There are lots of things you can do with coords, sure, but there are even more things you can do with points. Points, which always must contain some coords, are operationally a strict superset of coords.\n\nEdges can share endpoints, but they can also share midpoints. That opens up some nice possibilities like "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1390464018276438020",
                                "text": "braiding"
                            },
                            {
                                "type": "text",
                                "text": " several edges together in the middle to cut down on visual noise. Sure you could do that with coords, but think about what it'd be like to write the tools for editing braided edges. If you define edges in terms of points, these extra features sort of just naturally fall out of the design.\n\nWilliam (as usual, haha) brought up a great thought-provoking question about this: What happens to a point along an edge whose endpoints are moving?\n\nHere are some tweets showing what that "
                            },
                            {
                                "type": "text",
                                "text": "looks",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like:\n\n(A) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1145188460203872256"
                            },
                            {
                                "type": "text",
                                "text": "\n(B) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1153777314443849728"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBoth of these are sort of.. joke tweets, in that they don't mean anything "
                            },
                            {
                                "type": "text",
                                "text": "computationally",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". (And B is a flat out troll!) They're just experiments with what it looks \/ feels like to attach the points in an edge to another edge. In (A), the points are being conveyed. In (B), the points are attached at fixed positions.\n\nEdge points attached to other edges at fixed positions — this is useful for making art (which is a big part of what Hest is for — it's a drawing program with programming features).\n\nEdge points conveyed along other edges — this is a huge fucking can of worms. I'm pretty sure it opens the door to graphical metaprogramming \/ reflection. But it also makes the evaluation "
                            },
                            {
                                "type": "text",
                                "text": "fiendishly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " complex. For instance: answering the question \"how long until this conveyed data point reaches the conveyor's end point?\" is no longer something I can do with closed-form math, if the conveyor is itself comprised of edges that are moving. So I need to tweak the execution semantics to pull it all back down to closed-form (haven't found a good way to do that yet). Or I need to accept the gross nondeterminism and potentially skyrocketing performance cost of doing arbitrarily complex collision detection (which is what I've been doing so far, naively).\n\nTruth be told, I really love this part of the Hest project — there's a big hairy gross emergent-complexity consequence of the combination of otherwise fairly pure & simple conceptual pieces. Many folks retch at this sort of complexity, and will kill themselves trying to find both perfectly pure atomic concepts and perfectly pure combinations thereof. Ask Whitehead and Russell how that went! Me, I'd rather embrace the inherent lumpiness of my conceptual dust particle, and grow a nice crystal around it.\n\nBack to your original question, Kartik — why did I choose to do a list of points, not a list of coords? The real reason is quite boring: in 3D graphics, the vertex is the most foundational primitive, and edges are expressed in terms of vertices. So when doing the initial design, I just lifted that conceptual framework wholesale."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1620710166.123300",
        "client_msg_id": "f8667299-5546-4b1a-9e13-c9447c118d9f",
        "text": "<@UHWC9PXBL>\n&gt; does execution only occur at end points or can it occur along any point in an edge (for example stepwise or continuous transformations)? if not, are the in-between points in the edge meant purely as a ux affordance or do they do something else?\nOnly at end points. Purely as a UX affordance — edges are just connective tissue meant to space functions out. I'm not thinking at all about what functions are or how they work, or what it means to make a function act continuously rather than discretely.\n\nThat said: I'm already toying with \"What if there were other execution strategies? What if you could choose which strategy applied? What if each layer \/ unit \/ instance of abstraction could individually choose which strategy applied?\"\n\nSo it's possible that one of the strategies could do continuous transformation to a point being conveyed along an edge. Nothing precluding that. I just haven't designed that strategy.\n\nIn addition to the main strategy I'm focussed on — end points contain behaviour to apply to incoming data points — the second strategy I've thought the most about involves completely doing away with data points, and having the edges contain values.(Throwback to up above where I said \"Any object can have data — subject of an upcoming episode.\")",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619467654.051900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M=1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "does execution only occur at end points or can it occur along any point in an edge (for example stepwise or continuous transformations)? if not, are the in-between points in the edge meant purely as a ux affordance or do they do something else?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOnly at end points. Purely as a UX affordance — edges are just connective tissue meant to space functions out. I'm not thinking at all about what functions are or how they work, or what it means to make a function act continuously rather than discretely.\n\nThat said: I'm already toying with \"What if there were other execution strategies? What if you could choose which strategy applied? What if each layer \/ unit \/ instance of abstraction could individually choose which strategy applied?\"\n\nSo it's possible that one of the strategies could do continuous transformation to a point being conveyed along an edge. Nothing precluding that. I just haven't designed that strategy.\n\nIn addition to the main strategy I'm focussed on — end points contain behaviour to apply to incoming data points — the second strategy I've thought the most about involves completely doing away with data points, and having the edges contain values.(Throwback to up above where I said \"Any object can have data — subject of an upcoming episode.\")"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    }
]