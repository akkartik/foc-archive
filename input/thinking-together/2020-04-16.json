[
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1587033153.466800",
        "client_msg_id": "E1BEAD03-77B3-4CB1-BFB0-A591DB18F248",
        "text": "<@UBSMEUXAA> Thanks for sharing that talk. I hadn’t seen it. I obviously love how he approached the design of his fantasy consoles. So many thoughtful design decisions! For instance moving from a character limit to a token limit to rectify a bias towards minification and encourage shareable code. Love this stuff.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4AB3C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for sharing that talk. I hadn’t seen it. I obviously love how he approached the design of his fantasy consoles. So many thoughtful design decisions! For instance moving from a character limit to a token limit to rectify a bias towards minification and encourage shareable code. Love this stuff."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UNCP67JSK",
        "type": "message",
        "ts": "1587049093.467200",
        "client_msg_id": "4b9546d5-ad3a-4f4c-9785-fe2f370f2f97",
        "text": "(<@UG0EL18H3> I'm working on something like that! I imagine there is a gradient from detailed\/machine code implementation - to abstract\/natural language description; Imagine if you're able to start out each \"block\" at any level, and then iteratively add details as needed. Combine that with an auto-complete that works more like google search than word completion, but context sensitive, and somewhat semi-structured such that some computer-processable \"meaning\" may be derived (declarative probably preferred); Then, the \"comments\"\/most abstract\/top-most (as in top-down) \"notes\" would \"always\" be \"in sync\" with the implementation, and you'd have something \"useful\" at each level of detail)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e950179feb1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-11\/947800888119_9e950179feb1f81e1123_72.jpg",
            "first_name": "Leonard",
            "real_name": "Leonard Pauli",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "leonardpauli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "frF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "("
                            },
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " I'm working on something like that! I imagine there is a gradient from detailed\/machine code implementation - to abstract\/natural language description; Imagine if you're able to start out each \"block\" at any level, and then iteratively add details as needed. Combine that with an auto-complete that works more like google search than word completion, but context sensitive, and somewhat semi-structured such that some computer-processable \"meaning\" may be derived (declarative probably preferred); Then, the \"comments\"\/most abstract\/top-most (as in top-down) \"notes\" would \"always\" be \"in sync\" with the implementation, and you'd have something \"useful\" at each level of detail)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UG0EL18H3",
        "type": "message",
        "ts": "1587051374.467500",
        "client_msg_id": "6bc8a574-7ea8-4800-9b13-f3f94c8c934b",
        "text": "i've been using \"outliner\" apps for the last few months (OmniOutliner, specifically) to jot down thoughts and keep notes in a more structured way. what i've found is that the outline medium contributes greatly to the breadth of what i'm trying to express and allows me to both dive deeper to add detail or collapse elements to see the bigger picture. (which is tangential, but related to what <@UN57U8V53> said about starting \"sloppy\" and adding guarantees). as far as what you're building <@UNCP67JSK>, it seems like the real utility there is in the comment blocks that you get \"for free\" as a result of building them first. a point of contention though: how do you make sure that when you change the code at a lower level, that it will \"line up\" with the comment you wrote before? what happens when your mental model for how it _*should*_ behave or be built differs substantially from how you actually end up implementing it? the nice part about using types as your guide, as Don alluded to, is that they are an intrinsic part of the code: if the types don't line up with the values you're passing in, your program won't compile. how can we make the same guarantees for natural language?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "25cc47143833",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-01\/702360681283_25cc471438337c72e600_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Rabl",
            "display_name": "crabl",
            "team": "T5TCAFTA9",
            "name": "chris.rabl",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "byN+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i've been using \"outliner\" apps for the last few months (OmniOutliner, specifically) to jot down thoughts and keep notes in a more structured way. what i've found is that the outline medium contributes greatly to the breadth of what i'm trying to express and allows me to both dive deeper to add detail or collapse elements to see the bigger picture. (which is tangential, but related to what "
                            },
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": " said about starting \"sloppy\" and adding guarantees). as far as what you're building "
                            },
                            {
                                "type": "user",
                                "user_id": "UNCP67JSK"
                            },
                            {
                                "type": "text",
                                "text": ", it seems like the real utility there is in the comment blocks that you get \"for free\" as a result of building them first. a point of contention though: how do you make sure that when you change the code at a lower level, that it will \"line up\" with the comment you wrote before? what happens when your mental model for how it "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "behave or be built differs substantially from how you actually end up implementing it? the nice part about using types as your guide, as Don alluded to, is that they are an intrinsic part of the code: if the types don't line up with the values you're passing in, your program won't compile. how can we make the same guarantees for natural language?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN57U8V53",
        "type": "message",
        "ts": "1587051494.467700",
        "client_msg_id": "e6578cd2-c8e5-4ef4-8cd9-b0584619f9f9",
        "text": "Yeah, sadly they are usually \"adjunctions\" rather than \"isomorphisms\" (sorry for the vocab)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3447742b735b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-09\/753296041488_3447742b735b104a7ff2_72.png",
            "first_name": "",
            "real_name": "Don Abrams",
            "display_name": "Don Abrams",
            "team": "T5TCAFTA9",
            "name": "donabrams",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ec=C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, sadly they are usually \"adjunctions\" rather than \"isomorphisms\" (sorry for the vocab)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1587099572.469600",
        "client_msg_id": "f15e16a0-fa57-406d-8588-ad992d09dc2b",
        "text": "Don Knuth: _\"The Art of Computer Programming is a manifesto. It describes the way I love to do math and the way I wish I had been taught.\"_ :thinking_face:\n\n<https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416|https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Quanta Magazine",
                "title": "The Computer Scientist Who Can’t Stop Telling Stories",
                "title_link": "https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416",
                "text": "For pioneering computer scientist Donald Knuth, good coding is synonymous with beautiful expression.",
                "fallback": "Quanta Magazine: The Computer Scientist Who Can’t Stop Telling Stories",
                "image_url": "https:\/\/d2r55xnwy6nx47.cloudfront.net\/uploads\/2020\/04\/Donald-Knuth_1200_Social.jpg",
                "image_width": 476,
                "image_height": 250,
                "from_url": "https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416",
                "image_bytes": 164194,
                "service_icon": "https:\/\/www.quantamagazine.org\/favicon.png",
                "id": 1,
                "original_url": "https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iHaj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don Knuth: "
                            },
                            {
                                "type": "text",
                                "text": "\"The Art of Computer Programming is a manifesto. It describes the way I love to do math and the way I wish I had been taught.\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416",
                                "text": "https:\/\/www.quantamagazine.org\/computer-scientist-donald-knuth-cant-stop-telling-stories-20200416"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H",
                    "UA14TGLTC",
                    "UBSMEUXAA",
                    "U011X0NJF9S",
                    "UJBAJNFLK"
                ],
                "count": 5
            }
        ]
    }
]