[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1653724531.636129",
        "client_msg_id": "83a0428b-8fef-429d-a461-9e6afc6f2c1d",
        "text": "Thanks <@U03J1HP9C0G> for thinking about computational infrastructure. We need it, of course, but I see i rarely mentioned when considering \"the future\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1652941445.312379",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QNDYl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U03J1HP9C0G"
                            },
                            {
                                "type": "text",
                                "text": " for thinking about computational infrastructure. We need it, of course, but I see i rarely mentioned when considering \"the future\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1653724814.213529",
        "client_msg_id": "8ed56341-5577-488f-ba36-186847daa094",
        "text": "<@U016VUZGUUQ> Fossil has the distinction between \"branch\" and \"fork\". One is for intentionally branching off, the other for managing conflicts without the \"stop the world and rebase before you can go on with your work\" approach of git: <https:\/\/www.fossil-scm.org\/home\/doc\/trunk\/www\/branching.wiki>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CWWPd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Fossil has the distinction between \"branch\" and \"fork\". One is for intentionally branching off, the other for managing conflicts without the \"stop the world and rebase before you can go on with your work\" approach of git: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.fossil-scm.org\/home\/doc\/trunk\/www\/branching.wiki"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1653725859.885999",
        "client_msg_id": "5c176359-59e2-44a3-8c89-0454fcef0d15",
        "text": "The rules for what's natural change depending where you are on the scale from Google Docs-style live collaboration to git-style merging commits.\n\nIf it's a platform where users can see different states locally, then I think User A's local state should roll back to as if they had never created the Dialog, and User B should now be treated as having implicitly created the Dialog the moment they made a dependent element. User A can't really \"complain\" about their undo being ignored, because they understand that User B is allowed to have the same idea they previously had.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/=aAV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The rules for what's natural change depending where you are on the scale from Google Docs-style live collaboration to git-style merging commits.\n\nIf it's a platform where users can see different states locally, then I think User A's local state should roll back to as if they had never created the Dialog, and User B should now be treated as having implicitly created the Dialog the moment they made a dependent element. User A can't really \"complain\" about their undo being ignored, because they understand that User B is allowed to have the same idea they previously had."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03GBV8B58V",
        "type": "message",
        "ts": "1653727069.146419",
        "client_msg_id": "3db99160-3389-47f9-b956-dd1d06ada215",
        "text": "<@UDQBTJ211> We have to contend with both real-time and git-style for our case :joy:\n\nFor real time, the program must always be in a valid state, otherwise we can't compute the visual outcome that needs to be rendered onto the canvas where the designer is doing their work and interacting with the program. Multiple designers viewing the same canvas should be seeing the same thing (converging on it at least, as updates cross the network).\n\nThen, once the design work is ready to go into the shared git repo via a push, a traditional conflict can occur, e.g. if developers renamed a component that the designer added new instances of.\n\nWhile we could technically have diverging local states for the canvas for each designer (visual programmer more generally), I suspect that would amount to mind-melting complexity that these \"end-user\" programmers would rather do without. The way we can go about exploring different design choices (program structures) would be driven by creating separate branches, where each branch checkout has a single shared + converging canvas.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e8345518ba8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-05-21\/3558879757875_3e8345518ba82b825c6d_72.jpg",
            "first_name": "Jim",
            "real_name": "Jim Meyer",
            "display_name": "Jim Meyer",
            "team": "T5TCAFTA9",
            "name": "jimkyndemeyer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653663004.176149",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VK3B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " We have to contend with both real-time and git-style for our case "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFor real time, the program must always be in a valid state, otherwise we can't compute the visual outcome that needs to be rendered onto the canvas where the designer is doing their work and interacting with the program. Multiple designers viewing the same canvas should be seeing the same thing (converging on it at least, as updates cross the network).\n\nThen, once the design work is ready to go into the shared git repo via a push, a traditional conflict can occur, e.g. if developers renamed a component that the designer added new instances of.\n\nWhile we could technically have diverging local states for the canvas for each designer (visual programmer more generally), I suspect that would amount to mind-melting complexity that these \"end-user\" programmers would rather do without. The way we can go about exploring different design choices (program structures) would be driven by creating separate branches, where each branch checkout has a single shared + converging canvas."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653747895.760799",
        "client_msg_id": "b84a1edb-64d5-4592-bf04-9ee108c34a8d",
        "text": "Like <@UCUSW7WVD> says with \"Two apps interchanging information often lack such transparently aligned incentives.\"  Apple at least wants apps on their platform so that they can make their devices essential and charge rent.  Facebook, on the other hand, has very little incentive to have people use any software, site, or service but their own.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z7m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " says with \"Two apps interchanging information often lack such transparently aligned incentives.\"  Apple at least wants apps on their platform so that they can make their devices essential and charge rent.  Facebook, on the other hand, has very little incentive to have people use any software, site, or service but their own."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1653747991.173779",
        "client_msg_id": "e99c18ba-7246-4444-9150-d01bcbd52624",
        "text": "<@U0165TZ39GV> says, \"teaching digital literacy skills that used to be addressed elsewhere,\" and the letters AUTOEXEC.BAT flash through my mind.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tr3A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0165TZ39GV"
                            },
                            {
                                "type": "text",
                                "text": " says, \"teaching digital literacy skills that used to be addressed elsewhere,\" and the letters AUTOEXEC.BAT flash through my mind."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U0165TZ39GV"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03B14DUZSA",
        "type": "message",
        "ts": "1653756627.329869",
        "client_msg_id": "22811902-bd55-4637-a922-9fded637ed3e",
        "text": "Never underestimate the power of Worse is Better! Files and directories, especially in the Unix tradition, are the simplest level of object that can be meaningfully shared between programs. The issue is that a file is just a stream of bytes to whoever reads it; the knowledge of how to turn that into information stored separately, which makes interoperability buggy yet still feasible. Instead of a stream of bytes, maybe files can contain the behavior that makes them information bearing objects, so that an unforeseen consumer doesn't have to write more string munging routines, just send a message. This has to be consistent and ubiquitous from the bottom up in order to work, which requires an operating system alien to the current ones we use and more like Smalltalk.\n\nFilesystems are really just trees (DAGs if you add in symlinks (that don't create cycles please!)), so representing, traversing, and serializing them shouldn't be infeasible in a language that elevates the file to an object. This also opens up the possibility of distributed object spaces in the vein of Jini\/Plan9, where access across machines\/networks can be mediated mostly transparently, especially with some notion of capabilities, which file systems already have a primitive level of in W\/R\/X permissions. The possibilities are endless, which is probably why so many people get lost and we remain in the enduring 70s frame of Unix.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7358a16bdea5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-11-02\/4314864832259_7358a16bdea535168748_72.png",
            "first_name": "Riley",
            "real_name": "Riley Stewart",
            "display_name": "Riley Stewart",
            "team": "T5TCAFTA9",
            "name": "me1307",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hNv2z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Never underestimate the power of Worse is Better! Files and directories, especially in the Unix tradition, are the simplest level of object that can be meaningfully shared between programs. The issue is that a file is just a stream of bytes to whoever reads it; the knowledge of how to turn that into information stored separately, which makes interoperability buggy yet still feasible. Instead of a stream of bytes, maybe files can contain the behavior that makes them information bearing objects, so that an unforeseen consumer doesn't have to write more string munging routines, just send a message. This has to be consistent and ubiquitous from the bottom up in order to work, which requires an operating system alien to the current ones we use and more like Smalltalk.\n\nFilesystems are really just trees (DAGs if you add in symlinks (that don't create cycles please!)), so representing, traversing, and serializing them shouldn't be infeasible in a language that elevates the file to an object. This also opens up the possibility of distributed object spaces in the vein of Jini\/Plan9, where access across machines\/networks can be mediated mostly transparently, especially with some notion of capabilities, which file systems already have a primitive level of in W\/R\/X permissions. The possibilities are endless, which is probably why so many people get lost and we remain in the enduring 70s frame of Unix."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sob",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1653766994.884239",
        "client_msg_id": "2602d858-550d-47bf-aa79-5fe94dcf02fc",
        "text": "<@U0165TZ39GV>  Fair, they're not outright saying it's impossible, but I think the last quote on the article about \"get used to it, this is not going away\" absolutely represents despair toward actually accomplishing it. And yeah, despite all our big dreams, filesystems aren't going away either, at least not soon enough to give up on teaching people how to use them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1653648713.043979",
        "parent_user_id": "U0165TZ39GV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9kTKV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0165TZ39GV"
                            },
                            {
                                "type": "text",
                                "text": "  Fair, they're not outright saying it's impossible, but I think the last quote on the article about \"get used to it, this is not going away\" absolutely represents despair toward actually accomplishing it. And yeah, despite all our big dreams, filesystems aren't going away either, at least not soon enough to give up on teaching people how to use them."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]