[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1716276615.293559",
        "client_msg_id": "17c3f256-32a4-4252-9f43-81645806d775",
        "text": "It's certainly something people have thought a bit about.  Once you step back far enough, you're really just talking about functions that take programs as input.  So a type checker is one example, a compiler is another, or an interpreter, a partial evaluator.\n\nWhat makes some of these kinds of function feel more like typing as compared to execution?  As examples:\n• On the execution side, we're usually concerned with concrete values.\n• On the typing side, we are usually interested in what will happen in both branches of a conditional.\nThere's all kinds of fun to be had from playing in the middle: unification, nondeterminism, and so one.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1715978541.417449",
        "parent_user_id": "U03HC3XHZGW",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KHRNq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's certainly something people have thought a bit about.  Once you step back far enough, you're really just talking about functions that take programs as input.  So a type checker is one example, a compiler is another, or an interpreter, a partial evaluator.\n\nWhat makes some of these kinds of function feel more like typing as compared to execution?  As examples:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "On the execution side, we're usually concerned with concrete values."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "On the typing side, we are usually interested in what will happen in both branches of a conditional."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere's all kinds of fun to be had from playing in the middle: unification, nondeterminism, and so one."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1716276770.243879",
        "client_msg_id": "c03f1172-90ff-4e3e-b186-3d1df7537ec8",
        "text": "It's also important to remember that part of the value of a type system comes from the simplifications it lets you make, from the things it lets you ignore.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1715978541.417449",
        "parent_user_id": "U03HC3XHZGW",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JODqi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's also important to remember that part of the value of a type system comes from the simplifications it lets you make, from the things it lets you ignore."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]