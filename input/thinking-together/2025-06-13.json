[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749802532.044349",
        "client_msg_id": "f0a6c2ef-8940-4f69-9669-c3ab9a39e90d",
        "text": "Thanks <@UBKNXPBAB> and <@UCUSW7WVD> for your writeups. I discover links there that I hadn't thought of before. In particular on visual programming.\n\n<@UBKNXPBAB> classifies it as a subspecies of Live. That's probably true for most projects in this space, but I don't see it as a necessity. The one counterexample I am aware of is <@UGWUJUZHT>' diagram compiler from <http:\/\/draw.io|draw.io> to Python.\n\n<@UCUSW7WVD> sees visual coding as a special case of domain-specific notations. If that were the case, I'd probably be more interested in the topic. My impression is that most visual coding projects see moving away from text as their main mission, independently of domain considerations.\n\nSomething else I hadn't seen before is the link between Live and overcoming the vendor\/owner divide. It's hard to imagine a live system with a vendor\/owner divide, but the inverse is quite possible (and again, <@UGWUJUZHT> t2t work is an example).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749720459.967099",
        "parent_user_id": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mdQif",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " for your writeups. I discover links there that I hadn't thought of before. In particular on visual programming.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " classifies it as a subspecies of Live. That's probably true for most projects in this space, but I don't see it as a necessity. The one counterexample I am aware of is "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": "' diagram compiler from "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": " to Python.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " sees visual coding as a special case of domain-specific notations. If that were the case, I'd probably be more interested in the topic. My impression is that most visual coding projects see moving away from text as their main mission, independently of domain considerations.\n\nSomething else I hadn't seen before is the link between Live and overcoming the vendor\/owner divide. It's hard to imagine a live system with a vendor\/owner divide, but the inverse is quite possible (and again, "
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": " t2t work is an example)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749804241.506659",
        "client_msg_id": "1548bf95-27fc-48e3-b4cb-3d7d06f82c03",
        "text": "I think that <@UCUSW7WVD>’s <https:\/\/akkartik.name\/post\/2025-06-12-devlog|recent devlog post> (mentioned in <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1749776281277019?thread_ts=1749720459.967099&amp;cid=C5T9GPWFL|this thread>) deserves a thread of its own, outside of the discussion of live programming. The topic that interests me in particular is what he calls the vendor\/owner divide, which bothers me as well.\n\nMore generally, it's a dependency chain from hardware vendor via OS vendor and programming tool vendor up to the owner, end user, or whatever else we'd call the person or team that wants to use computation as a tool for their own goals. Along this chain, everyone has the power to break the work of the people further down the chain, unless there is some counteracting force such as competition between multiple vendors of fungible products.\n\nAs somebody at the end of the chain, if I want to preserve my agency, I have basically two choices (plus hybrids): I can be selective in my dependency chain, only accepting dependencies whose vendors I consider friendly and ethically sound. Or I can restrict myself to dependencies that are fungible because they implement standards for which there are other implementations as well.\n\nOut of the two, my preference is for the latter, which is clearly the more robust strategy. Vendors change over time, and even those that promise not to be evil today can drop this promise tomorrow. Vendors or their products can also disappear for lots of reasons. In fact, a vendor that is serious about being ethically sound should signal this attitude by implementing standards, reducing its own power over its clients. Except of course that there are no standards for most software interface layers, and you cannot create one unilaterally either. Nor quickly, because good standards require many design iterations involving multiple vendors and users. Evolving standards is expensive.\n\nThere's a third aspect to consider, which is code complexity. For simple enough software, a vendor provides the convenience of a ready-made and tested implementation, but if the vendor disappears or becomes evil, I can maintain the code myself, or convince someone else to do so. That's what early FLOSS advertised as its strength: you can always fork. Except that today's software stacks have grown too complex for this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "reply_count": 28,
        "reply_users_count": 6,
        "latest_reply": "1750097008.219049",
        "reply_users": [
            "U02E4DAQGSZ",
            "UJBAJNFLK",
            "UML4ZEKDK",
            "UCUSW7WVD",
            "U5STGTB3J",
            "U02U0AS3J49"
        ],
        "replies": [
            {
                "user": "U02E4DAQGSZ",
                "ts": "1749807022.269259"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749815027.515859"
            },
            {
                "user": "UML4ZEKDK",
                "ts": "1749816032.110209"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749818904.440439"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749828851.883409"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749829182.689319"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1749834304.581959"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749837338.470999"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749889179.533329"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749889399.659209"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749889890.914089"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749890036.100329"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749890348.915269"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1749901042.405939"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749908111.467579"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749908345.740519"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749908527.842429"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749908799.502719"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749909198.709409"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1749909381.227709"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1749973893.198729"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1750020760.348359"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1750038535.773739"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1750042120.221519"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1750044297.978319"
            },
            {
                "user": "U02E4DAQGSZ",
                "ts": "1750055841.982369"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1750080495.892529"
            },
            {
                "user": "U02U0AS3J49",
                "ts": "1750097008.219049"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1749776281277019?thread_ts=1749720459.967099&amp;cid=C5T9GPWFL",
                "ts": "1749776281.277019",
                "author_id": "UCUSW7WVD",
                "channel_id": "C5T9GPWFL",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5T9GPWFL",
                        "ts": "1749776281.277019",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "MwjLr",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "The Primer "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https:\/\/akkartik.name\/post\/2025-06-12-devlog",
                                                    "text": "crystallized something for me"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": ". I hope you won't mind that I linked to it. It seemed more important to give credit than to not send people to unfinished drafts."
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1749776281277019?thread_ts=1749720459.967099&amp;cid=C5T9GPWFL",
                "fallback": "[June 12th, 2025 5:58 PM] ak: The Primer <https:\/\/akkartik.name\/post\/2025-06-12-devlog|crystallized something for me>. I hope you won't mind that I linked to it. It seemed more important to give credit than to not send people to unfinished drafts.",
                "text": "The Primer <https:\/\/akkartik.name\/post\/2025-06-12-devlog|crystallized something for me>. I hope you won't mind that I linked to it. It seemed more important to give credit than to not send people to unfinished drafts.",
                "author_name": "Kartik Agaram",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UCUSW7WVD",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_48.png",
                "author_subname": "Kartik Agaram",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0JRAB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "’s "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/akkartik.name\/post\/2025-06-12-devlog",
                                "text": "recent devlog post"
                            },
                            {
                                "type": "text",
                                "text": " (mentioned in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1749776281277019?thread_ts=1749720459.967099&cid=C5T9GPWFL",
                                "text": "this thread"
                            },
                            {
                                "type": "text",
                                "text": ") deserves a thread of its own, outside of the discussion of live programming. The topic that interests me in particular is what he calls the vendor\/owner divide, which bothers me as well.\n\nMore generally, it's a dependency chain from hardware vendor via OS vendor and programming tool vendor up to the owner, end user, or whatever else we'd call the person or team that wants to use computation as a tool for their own goals. Along this chain, everyone has the power to break the work of the people further down the chain, unless there is some counteracting force such as competition between multiple vendors of fungible products.\n\nAs somebody at the end of the chain, if I want to preserve my agency, I have basically two choices (plus hybrids): I can be selective in my dependency chain, only accepting dependencies whose vendors I consider friendly and ethically sound. Or I can restrict myself to dependencies that are fungible because they implement standards for which there are other implementations as well.\n\nOut of the two, my preference is for the latter, which is clearly the more robust strategy. Vendors change over time, and even those that promise not to be evil today can drop this promise tomorrow. Vendors or their products can also disappear for lots of reasons. In fact, a vendor that is serious about being ethically sound should signal this attitude by implementing standards, reducing its own power over its clients. Except of course that there are no standards for most software interface layers, and you cannot create one unilaterally either. Nor quickly, because good standards require many design iterations involving multiple vendors and users. Evolving standards is expensive.\n\nThere's a third aspect to consider, which is code complexity. For simple enough software, a vendor provides the convenience of a ready-made and tested implementation, but if the vendor disappears or becomes evil, I can maintain the code myself, or convince someone else to do so. That's what early FLOSS advertised as its strength: you can always fork. Except that today's software stacks have grown too complex for this."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U02E4DAQGSZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1749807022.269259",
        "client_msg_id": "b9f025ed-eceb-43d3-886c-b4d2eeb95646",
        "text": "I think <https:\/\/github.com\/tomlarkworthy\/lopecode> pretty much addresses all the mentioned issues. Happy to hear where it doesn't so I can fix it.\n1. built on standards (the web), with multiple vendors\n2. plain text serialization format, offline-first (the web but without the network or DNS)\n3. The reactive micro-kernal that enables its architecture is <https:\/\/github.com\/observablehq\/runtime|FOSS> \nEverything but the reactive micro-kernal is implemented in userspace, and it hot swappable at runtime. The architecture allows module literate development. So you can look at the <https:\/\/observablehq.com\/@tomlarkworthy\/exporter|exporter> in isolation to understand how it serializes, right along side its prose explanation. You can live edit all these things at runtime without an external toolchain. You can write your own serializer if you want, you can have a program with two serializers, the runtime-is-the-source-of-truth\n\nFurthermore the things you write can run both on Observable (the commercial closed source platform with owner\/vendor divide) and Lopecode as <https:\/\/github.com\/tomlarkworthy\/lopecode|stand alone> (without owner\/vendor divide). The point is: they share the same mirco-kernal and this is the core substrate that enables the transfer.\n\nI am gonna present at Live something along the lines of micro-kernal architecture for mallable software. This field is littered with awesome ideas that work in a single app at the cost of everything else because people's innovative ideas are tied to framework they built for that specific purpose. So it looks cool but then nothing else you are familiar with can be delivered in any sane timeframe. So its impossible to transfer one cool programming paradigm to another. I hope the micro-kernel architecture can allow much more parrallelization built on a platform foundation that has all the right things baked in.\n\nThe point of Lopecode is not the web interface. Its the reactive micro-kernal design that removes the vendor\/owner divide like smalltalk did but now with the web-without-the-net as the platform runtime",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lB0JA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tomlarkworthy\/lopecode"
                            },
                            {
                                "type": "text",
                                "text": " pretty much addresses all the mentioned issues. Happy to hear where it doesn't so I can fix it.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "built on standards (the web), with multiple vendors"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "plain text serialization format, offline-first (the web but without the network or DNS)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The reactive micro-kernal that enables its architecture is "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/observablehq\/runtime",
                                        "text": "FOSS"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nEverything but the reactive micro-kernal is implemented in userspace, and it hot swappable at runtime. The architecture allows module literate development. So you can look at the "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@tomlarkworthy\/exporter",
                                "text": "exporter"
                            },
                            {
                                "type": "text",
                                "text": " in isolation to understand how it serializes, right along side its prose explanation. You can live edit all these things at runtime without an external toolchain. You can write your own serializer if you want, you can have a program with two serializers, the runtime-is-the-source-of-truth\n\nFurthermore the things you write can run both on Observable (the commercial closed source platform with owner\/vendor divide) and Lopecode as "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/tomlarkworthy\/lopecode",
                                "text": "stand alone"
                            },
                            {
                                "type": "text",
                                "text": " (without owner\/vendor divide). The point is: they share the same mirco-kernal and this is the core substrate that enables the transfer.\n\nI am gonna present at Live something along the lines of micro-kernal architecture for mallable software. This field is littered with awesome ideas that work in a single app at the cost of everything else because people's innovative ideas are tied to framework they built for that specific purpose. So it looks cool but then nothing else you are familiar with can be delivered in any sane timeframe. So its impossible to transfer one cool programming paradigm to another. I hope the micro-kernel architecture can allow much more parrallelization built on a platform foundation that has all the right things baked in.\n\nThe point of Lopecode is not the web interface. Its the reactive micro-kernal design that removes the vendor\/owner divide like smalltalk did but now with the web-without-the-net as the platform runtime"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBKNXPBAB",
        "type": "message",
        "ts": "1749807911.040989",
        "client_msg_id": "f5e0c69c-f55a-4ed5-9cc2-df19b736a2f5",
        "text": "Hmmm are you saying the primer classifies visual programming as a subset of live programming? That would seem to be contradicted by “Is visual programming _live programming_? Not automatically, no!”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7b3bc9e878d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-03-28\/6866700980471_7b3bc9e878d663396caf_72.jpg",
            "first_name": "",
            "real_name": "Joshua Horowitz",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "joshuah",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749720459.967099",
        "parent_user_id": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/6xOT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmmm are you saying the primer classifies visual programming as a subset of live programming? That would seem to be contradicted by “Is visual programming "
                            },
                            {
                                "type": "text",
                                "text": "live programming",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Not automatically, no!”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749814180.658019",
        "client_msg_id": "4dbcbceb-6e94-4880-b5a8-132112dff309",
        "text": "<@UBKNXPBAB> Not a subset, but a strong relation. What I found surprising is to see any link at all between visual and live programming. I have always seen them as orthogonal aspects. Your review points out that there is at least a correlation, if you do statistics across programming systems. So now I am wondering where that correlation comes from.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749720459.967099",
        "parent_user_id": "UBKNXPBAB",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ix+KB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " Not a subset, but a strong relation. What I found surprising is to see any link at all between visual and live programming. I have always seen them as orthogonal aspects. Your review points out that there is at least a correlation, if you do statistics across programming systems. So now I am wondering where that correlation comes from."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749815027.515859",
        "client_msg_id": "1e8375fc-a5ce-4060-a5a2-d2027380c024",
        "text": "<@U02E4DAQGSZ> Thanks for describing your project in terms of the keywords of this thread! That's very helpful.\n\nNot having actually used your project, I can only comment from a somewhat theoretical point of view. My points of criticism are then:\n1. The kernel being FOSS is irrelevant. The Python community has given a spectacular demonstration of how a FOSS community can do evil to (a part of) their users, with the violent 2-&gt;3 transition. So unless there's an alternative implementation, or the kernel is simple enough for you to maintain it, you and the users of your project are dependent on a vendor.\n2. For Web, the number of vendors depends on how far into modern Web technologies your dependencies go. If Lopecode works with Dillo or SeaMonkey, it's OK. If it requires a browser derived from Chromium or Firefox, then it's at a high risk of vendor dependency, given the increasing weakness of Firefox.\nPoint 2 is a very serious problem for many projects building on the Web, including one of my own. I wish I knew how to escape from it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "17mmq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for describing your project in terms of the keywords of this thread! That's very helpful.\n\nNot having actually used your project, I can only comment from a somewhat theoretical point of view. My points of criticism are then:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The kernel being FOSS is irrelevant. The Python community has given a spectacular demonstration of how a FOSS community can do evil to (a part of) their users, with the violent 2->3 transition. So unless there's an alternative implementation, or the kernel is simple enough for you to maintain it, you and the users of your project are dependent on a vendor."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For Web, the number of vendors depends on how far into modern Web technologies your dependencies go. If Lopecode works with Dillo or SeaMonkey, it's OK. If it requires a browser derived from Chromium or Firefox, then it's at a high risk of vendor dependency, given the increasing weakness of Firefox."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nPoint 2 is a very serious problem for many projects building on the Web, including one of my own. I wish I knew how to escape from it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UML4ZEKDK",
        "type": "message",
        "ts": "1749816032.110209",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1749820416.000000"
        },
        "client_msg_id": "d210ebaf-f829-4a2a-9bb0-bfef7821d5fb",
        "text": "<@U02E4DAQGSZ> Your Lopecode effort is quite impressive and seems to achieve many desirable features I'd personally like to see in a programming substrate (though I still need to explore it in more detail). :smile:\n\nI do want to push back slightly on your framing here though, where you mention many people's ideas are tied to their framework. I agree that does happen and it is a risk, but isn't your own kernel also a new framework things would need to be adapted to...? I am not sure this particular complaint you have about other projects holds up, since it would seem to apply to your project (and probably most others I can imagine), so I would suggest not focusing so much on that point.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "edc1c9acb12d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-05-22\/5286358617767_edc1c9acb12dfa7d1a20_72.jpg",
            "first_name": "J.",
            "real_name": "J. Ryan Stinnett",
            "display_name": "J. Ryan Stinnett",
            "team": "T5TCAFTA9",
            "name": "jryans",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9TOnr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " Your Lopecode effort is quite impressive and seems to achieve many desirable features I'd personally like to see in a programming substrate (though I still need to explore it in more detail). "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI do want to push back slightly on your framing here though, where you mention many people's ideas are tied to their framework. I agree that does happen and it is a risk, but isn't your own kernel also a new framework things would need to be adapted to...? I am not sure this particular complaint you have about other projects holds up, since it would seem to apply to your project (and probably most others I can imagine), so I would suggest not focusing so much on that point."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1749818904.440439",
        "client_msg_id": "75999d97-0684-43d6-b783-df3564d3c9b0",
        "text": "I need to give Lopecode another whirl.. :thinking_face:\n\nJust one point until I do so: I didn't intend to suggest we need to eliminate all vendors. Rather I'm looking for a certain \"enlightenment\" among both vendors and owners. Owners should want to minimize vendors, but not to 0. The sweet spot is probably 2 or 3 vendors. I consider it a feature that I ask people to install LÖVE for themselves rather than bundling it with my apps. That's my attempt as a vendor to broaden the horizons of computer owners beyond pure short term convenience.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6RAuL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I need to give Lopecode another whirl.. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": "\n\nJust one point until I do so: I didn't intend to suggest we need to eliminate all vendors. Rather I'm looking for a certain \"enlightenment\" among both vendors and owners. Owners should want to minimize vendors, but not to 0. The sweet spot is probably 2 or 3 vendors. I consider it a feature that I ask people to install LÖVE for themselves rather than bundling it with my apps. That's my attempt as a vendor to broaden the horizons of computer owners beyond pure short term convenience."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749828851.883409",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1749828867.000000"
        },
        "client_msg_id": "4b862bbd-f100-4d0e-8233-045e2602ced9",
        "text": "Also, you make it clear that LÖVE comes from another vendor, so it's out of your (moral) responsibility.\nAnd now I see why your sweet spot is 2 or 3. LÖVE plus Lua Carousel makes for two :stuck_out_tongue_winking_eye:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Br2EQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, you make it clear that LÖVE comes from another vendor, so it's out of your (moral) responsibility.\nAnd now I see why your sweet spot is 2 or 3. LÖVE plus Lua Carousel makes for two "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue_winking_eye",
                                "unicode": "1f61c"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1749829182.689319",
        "client_msg_id": "539fd343-955a-4d1d-a2f1-41c13042e980",
        "text": "Zero-vendor is unrealistic anyway, at least today. It would be interesting to estimate the vendor number for some popular environments. But then, the number is perhaps not the most relevant factor. The risk of the dependency depends on the size and status of the vendor. Google, for example, is a pretty bad one. They are so big that they can safely ignore most of their users, and they have demonstrated repeatedly that they are happy to do so.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FUmlo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zero-vendor is unrealistic anyway, at least today. It would be interesting to estimate the vendor number for some popular environments. But then, the number is perhaps not the most relevant factor. The risk of the dependency depends on the size and status of the vendor. Google, for example, is a pretty bad one. They are so big that they can safely ignore most of their users, and they have demonstrated repeatedly that they are happy to do so."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02E4DAQGSZ",
        "type": "message",
        "ts": "1749834304.581959",
        "client_msg_id": "7261aa0a-723a-4be3-8267-c8221891afdc",
        "text": "Thanks for feedback. I am grateful as its been hard getting people to say what is on their minds.\n\n&gt;  The Python community has given a spectacular demonstration of how a FOSS community can do evil to (a part of) their users, with the violent 2-&gt;3 transition\nYou might like the lopecode <https:\/\/tomlarkworthy.github.io\/lopecode\/notebooks\/@tomlarkworthy_lopecode-vision.html#view=R100%28S65%28%40tomlarkworthy%2Flopecode-vision%2C%40tomlarkworthy%2Ffileattachments%29%2CS35%28%40tomlarkworthy%2Fmodule-selection%2C%40tomlarkworthy%2Ftests%29%29|vision>. Its half chatGPT generated and very cringe because it was written in a hurry, but a massive motivation for bundling all dependancies inside a single file is to prevent breaking working software. The title is \"*Designing Immortal Software*\". If it works on your machine today, it will work in 10 years provided web standards do not break backwards compatibility. The browser is the only runtime dependancy and all assets and code are inline inside that file, so you do not need a local webserver or a network connection to open that file. You do not need 3rd party software to make code modifications, because the build tooling is inline too. There is no \"login\". If you have the file, you own the software and have the toolchain to modify it forever. If I break backwards compatibility, it is 100% decoupled from the file you own and therefore cannot affect it. I can still run the files I exported in November despite the system changing massively. I picked web as a dependancy because it was one of the most backwards compatible technologies outside of the win32 API I could think of that has multiple vendors. I hear what you are saying an 100% agree and lopecode is my answer to that very thing.\n\nLopecode supports Firefox, Safari and Chrome and tested on Zen too. Can't do seamonkey as it requires Javascript modules. But still, Lopecode is standards based but just the modern web standards that came after seamonkey.\n\nRyan\n&gt; but isn't your own kernel also a new framework things would need to be adapted to...?\nyeah I was thinking \"am I a hypocrite?\" as I was typing it. I think no because I did not develop the kernel. Observable did, I am not affiliated. I am a fan, and I want to take that venture funded MIT licensed reactive spreadsheet engine and put it in a different context that allows more malleability and userspace interaction. Code written on observable works on Lopecode, so there is already a ton of code that needs no adaptation to run on lopecode.\n\nI am not writing my personal vision of a kernel. Reactive runtimes are hard and Observable's is battle tested and made by Mike Bostock so its better than anything I could make. What I have done is written a ton of userspace projections of that runtime state that enable you to interact with it like an IDE and save it as a file, but those are userspace, and have no elevated status. They are libraries not frameworks. I think its an important distinction. The runtime is the frameworky bit, but if you want to do a reactive programming environment you will need something like that so I think its healthier I outsource that because it means you and I are equals (I can't change the runtime if I wanted!), plus its actually good and I do not burn out wasting my time writing one. Its MIT licensed so nobody has a problem with us using it.\n\nGenerally I think we need expand our horizons not just to the application, but to include the toolchain and IDE. That is the programming system and I don't want any of them breaking unexpectedly and I want all of them malleable and under our control.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "27dffd0e73bd",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2483463922595_27dffd0e73bd6f709927_72.gif",
            "first_name": "Tom",
            "real_name": "Tom Larkworthy",
            "display_name": "Tom Larkworthy",
            "team": "T5TCAFTA9",
            "name": "tom.larkworthy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s1zKQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for feedback. I am grateful as its been hard getting people to say what is on their minds.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The Python community has given a spectacular demonstration of how a FOSS community can do evil to (a part of) their users, with the violent 2->3 transition"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYou might like the lopecode "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tomlarkworthy.github.io\/lopecode\/notebooks\/@tomlarkworthy_lopecode-vision.html#view=R100%28S65%28%40tomlarkworthy%2Flopecode-vision%2C%40tomlarkworthy%2Ffileattachments%29%2CS35%28%40tomlarkworthy%2Fmodule-selection%2C%40tomlarkworthy%2Ftests%29%29",
                                "text": "vision"
                            },
                            {
                                "type": "text",
                                "text": ". Its half chatGPT generated and very cringe because it was written in a hurry, but a massive motivation for bundling all dependancies inside a single file is to prevent breaking working software. The title is \""
                            },
                            {
                                "type": "text",
                                "text": "Designing Immortal Software",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\". If it works on your machine today, it will work in 10 years provided web standards do not break backwards compatibility. The browser is the only runtime dependancy and all assets and code are inline inside that file, so you do not need a local webserver or a network connection to open that file. You do not need 3rd party software to make code modifications, because the build tooling is inline too. There is no \"login\". If you have the file, you own the software and have the toolchain to modify it forever. If I break backwards compatibility, it is 100% decoupled from the file you own and therefore cannot affect it. I can still run the files I exported in November despite the system changing massively. I picked web as a dependancy because it was one of the most backwards compatible technologies outside of the win32 API I could think of that has multiple vendors. I hear what you are saying an 100% agree and lopecode is my answer to that very thing.\n\nLopecode supports Firefox, Safari and Chrome and tested on Zen too. Can't do seamonkey as it requires Javascript modules. But still, Lopecode is standards based but just the modern web standards that came after seamonkey.\n\nRyan\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but isn't your own kernel also a new framework things would need to be adapted to...?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah I was thinking \"am I a hypocrite?\" as I was typing it. I think no because I did not develop the kernel. Observable did, I am not affiliated. I am a fan, and I want to take that venture funded MIT licensed reactive spreadsheet engine and put it in a different context that allows more malleability and userspace interaction. Code written on observable works on Lopecode, so there is already a ton of code that needs no adaptation to run on lopecode.\n\nI am not writing my personal vision of a kernel. Reactive runtimes are hard and Observable's is battle tested and made by Mike Bostock so its better than anything I could make. What I have done is written a ton of userspace projections of that runtime state that enable you to interact with it like an IDE and save it as a file, but those are userspace, and have no elevated status. They are libraries not frameworks. I think its an important distinction. The runtime is the frameworky bit, but if you want to do a reactive programming environment you will need something like that so I think its healthier I outsource that because it means you and I are equals (I can't change the runtime if I wanted!), plus its actually good and I do not burn out wasting my time writing one. Its MIT licensed so nobody has a problem with us using it.\n\nGenerally I think we need expand our horizons not just to the application, but to include the toolchain and IDE. That is the programming system and I don't want any of them breaking unexpectedly and I want all of them malleable and under our control."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heartbeat",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "U06SS0DHZD1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1749837338.470999",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1749837415.000000"
        },
        "client_msg_id": "c2772165-5115-4010-987f-c58f1d02b465",
        "text": "Just one more response, then I'd rather hear more about Lopecode.\n> Also, you make it clear that LÖVE comes from another vendor, so it's out of your (moral) responsibility.\n> And now I see why your sweet spot is 2 or 3. LÖVE plus Lua Carousel makes for two :stuck_out_tongue_winking_eye:\n> Zero-vendor is unrealistic anyway, at least today.\nYes, I was very much thinking about this when I embarked on my LÖVE adventures. Mu required a single vendor -- me -- and I had this epiphany where I went from absolutely wanting that, to realizing it was in fact a huge problem. The issue is not moral responsibility; I think there's no escaping that if we put out products we want others to use. No, the issue is that the smart computer owners I want to attract -- the ones who care about reliability and security and privacy -- they are not going to be willing to trust just li'l ol' me with their entire computer, when I have no track record. *I* wouldn't trust me. It just seems good sense. I wouldn't go to zero-vendor even if it _was_ realistic.\n\nSimilarly, the fact that Lopecode requires a browser as one additional dependency feels squarely in the bullseye from that perspective. Tom's thinking regarding Mike Bostock exactly mirrors mine regarding the Lua and LÖVE developers. I think I'm still concerned about the exposure to browser vendors. But I'm very happy that we now get to run this very rigorous experiment. We have a single-file stack atop a modern browser. How long can we keep it running, what are the overheads? :popcorn:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1749804241.506659",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i2Kqq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just one more response, then I'd rather hear more about Lopecode.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, you make it clear that LÖVE comes from another vendor, so it's out of your (moral) responsibility.\nAnd now I see why your sweet spot is 2 or 3. LÖVE plus Lua Carousel makes for two "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue_winking_eye",
                                "unicode": "1f61c"
                            },
                            {
                                "type": "text",
                                "text": "\nZero-vendor is unrealistic anyway, at least today."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes, I was very much thinking about this when I embarked on my LÖVE adventures. Mu required a single vendor -- me -- and I had this epiphany where I went from absolutely wanting that, to realizing it was in fact a huge problem. The issue is not moral responsibility; I think there's no escaping that if we put out products we want others to use. No, the issue is that the smart computer owners I want to attract -- the ones who care about reliability and security and privacy -- they are not going to be willing to trust just li'l ol' me with their entire computer, when I have no track record. "
                            },
                            {
                                "type": "text",
                                "text": "I",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " wouldn't trust me. It just seems good sense. I wouldn't go to zero-vendor even if it "
                            },
                            {
                                "type": "text",
                                "text": "was",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " realistic.\n\nSimilarly, the fact that Lopecode requires a browser as one additional dependency feels squarely in the bullseye from that perspective. Tom's thinking regarding Mike Bostock exactly mirrors mine regarding the Lua and LÖVE developers. I think I'm still concerned about the exposure to browser vendors. But I'm very happy that we now get to run this very rigorous experiment. We have a single-file stack atop a modern browser. How long can we keep it running, what are the overheads? "
                            },
                            {
                                "type": "emoji",
                                "name": "popcorn",
                                "unicode": "1f37f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "U02E4DAQGSZ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    }
]