[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556696471.426200",
        "client_msg_id": "E97F9402-F2B4-4259-8AE5-36581FC4BE4F",
        "text": "I feel the trouble with Forth's stack is that you're linearizing things that are intrinsically a bit treeish.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T=V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel the trouble with Forth's stack is that you're linearizing things that are intrinsically a bit treeish."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556696645.428400",
        "client_msg_id": "4182DEF7-266A-4119-BF0F-D347CDE03347",
        "text": "I think you've got it.  With some sense of \"simple\" overlapping with \"complex\".  I think there's still work to be done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556658740.343100",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nXlM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you've got it.  With some sense of \"simple\" overlapping with \"complex\".  I think there's still work to be done."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556697095.430100",
        "client_msg_id": "B6ED50BA-631C-427B-9058-4BA3ABB90327",
        "text": "We just need to encode general search, \"do these rules have any weird consequences?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556660087.369300",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Fv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We just need to encode general search, \"do these rules have any weird consequences?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556697460.432900",
        "client_msg_id": "18A6AAFE-75DD-4A75-B67F-B27BC8D97711",
        "text": "I feel that's one of my main value divers, \"Hey client!\" From this week, \"Do you want to double the development budget to handle this 1\/1000 chance of a case or are you okay with these simpler rules?\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556660087.369300",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mbdz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel that's one of my main value divers, \"Hey client!\" From this week, \"Do you want to double the development budget to handle this 1\/1000 chance of a case or are you okay with these simpler rules?\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1556697655.433100",
        "client_msg_id": "a207d7bf-200c-484d-8578-8cd536081eb9",
        "text": "Someone once said that \"software should be as simple as possible -- but no simpler\". I think that means there's a threshold where something can be simpler in a technical or literal sense, but at the cost of staying away from what's simplest on terms of the human mental model or manageability -- which is where I think Forth lives.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RFh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Someone once said that \"software should be as simple as possible -- but no simpler\". I think that means there's a threshold where something can be simpler in a technical or literal sense, but at the cost of staying away from what's simplest on terms of the human mental model or manageability -- which is where I think Forth lives."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1556697747.433300",
        "client_msg_id": "df206ec8-917e-4b6f-bc83-52a2ed6224dc",
        "text": "... and I think that was already touched on in this comment: <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1556656746325900>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1556656746325900",
                "fallback": "[April 30th, 2019 1:39 PM] fp: so the best programming system has to consider what is easy for humans in general, while being as simple as possible",
                "ts": "1556656746.325900",
                "author_id": "UE6EFEPTQ",
                "author_subname": "Duncan Cragg",
                "channel_id": "C5T9GPWFL",
                "is_msg_unfurl": true,
                "text": "so the best programming system has to consider what is easy for humans in general, while being as simple as possible",
                "author_name": "Duncan Cragg",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UE6EFEPTQ",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1556656746325900",
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qpFvu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... and I think that was already touched on in this comment: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1556656746325900"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1556699734.439500",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1556699801.000000"
        },
        "client_msg_id": "9FC9B729-8818-455F-B466-0429CC82182E",
        "text": "And as a final note, it’s worth mentioning that although simplicity is correlated with comprehensibility, simple abstractions are not necessarily easy to understand. A dire case of this is “monads” in Haskell, which are conceptually simple but yet are confusing at first because we cannot analogise them with everyday ideas. Many simple abstractions *are* easy to understand however, such as a “List” abstraction or a “sum” abstraction (to sum a list).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "==+55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And as a final note, it’s worth mentioning that although simplicity is correlated with comprehensibility, simple abstractions are not necessarily easy to understand. A dire case of this is “monads” in Haskell, which are conceptually simple but yet are confusing at first because we cannot analogise them with everyday ideas. Many simple abstractions "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " easy to understand however, such as a “List” abstraction or a “sum” abstraction (to sum a list)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556700193.439800",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1556700912.000000"
        },
        "text": "And on this \"simple doesn't imply understandable\" topic, here is a quote from Ritchie: \"UNIX is very simple, it just needs a genius to understand its simplicity.\" (taken from the article linked by <@U8A5MS6R1> in <#C5U3SEW6A|linking-together>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "fallback": "[April 30th, 2019 10:15 PM] shalabh.chaturvedi: Nice write-up on one of my favorite themes: <http:\/\/zge.us.to\/txt\/unix-harmful.html>",
                "ts": "1556655308.017600",
                "author_id": "U8A5MS6R1",
                "author_subname": "Shalabh Chaturvedi",
                "channel_id": "C5U3SEW6A",
                "is_msg_unfurl": true,
                "text": "Nice write-up on one of my favorite themes: <http:\/\/zge.us.to\/txt\/unix-harmful.html>",
                "author_name": "Shalabh Chaturvedi",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U8A5MS6R1",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1556655308017600",
                "is_share": true,
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3t77t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And on this \"simple doesn't imply understandable\" topic, here is a quote from Ritchie: \"UNIX is very simple, it just needs a genius to understand its simplicity.\" (taken from the article linked by "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC6997THT",
        "type": "message",
        "ts": "1556707140.440200",
        "client_msg_id": "7cfeea0d-33e1-48d2-bf87-488ec70e278f",
        "text": "Why is forth's stack bad but lisp's stack good? I get that lisp is stacks of lists and I get that lisp is arguably higher level than forth. More I mean the perception that forth = bad\/hard and lisp = good\n\nBy the way, many of Sid Meier's 8bit games were written partly in a language called Sidtran which was similar to forth.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "f3eb3ca69d86",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-13\/414472553296_f3eb3ca69d86feb77929_72.png",
            "first_name": "Gregg",
            "real_name": "Gregg Tavares",
            "display_name": "gman",
            "team": "T5TCAFTA9",
            "name": "slack1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ciJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why is forth's stack bad but lisp's stack good? I get that lisp is stacks of lists and I get that lisp is arguably higher level than forth. More I mean the perception that forth = bad\/hard and lisp = good\n\nBy the way, many of Sid Meier's 8bit games were written partly in a language called Sidtran which was similar to forth."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556709132.442100",
        "client_msg_id": "3128428D-15EF-4E32-A5B1-5E9DEB153E32",
        "text": "Have always liked that essay.  The problem we have now as I see it is that structured step-by-step plans aren't a good model for many programs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556667294.396700",
        "parent_user_id": "UH84GQ3CZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Po31j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have always liked that essay.  The problem we have now as I see it is that structured step-by-step plans aren't a good model for many programs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHPAERALD",
        "type": "message",
        "ts": "1556712282.442400",
        "edited": {
            "user": "UHPAERALD",
            "ts": "1556712372.000000"
        },
        "client_msg_id": "f4abab17-62b8-4ac7-8227-040c356007fc",
        "text": "Basically, there is a pretty low complexity ceiling beyond which manipulating the stack to access the values that you need becomes really difficult vs. just naming the values and letting the compiler sort out where on the stack \/ register \/ memory those values live. <https:\/\/yosefk.com\/blog\/my-history-with-forth-stack-machines.html> is a long read but has a pretty good description about how Forth was simply the wrong tool to solve his class of problem.\n\nI'm fond of recounting how Chuck Moore has said that local variables as a language feature are \"not only useless, but harmful\", and my understanding is that this is because Chuck sees the inability to cope with complexity as a beneficial force, which prevents you from introducing it into your system. Instead he believes you should find a way to change the problem to a simpler one. It definitely has been true, in my experience, that writing complected code that braids together a bunch of things is so difficult to do in Forth that it's not worth attempting in the first place; whereas in C complexity may be much more straightforward to express without realizing it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c40fd0fa31da",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-04\/601366015813_c40fd0fa31daf2844ed4_72.jpg",
            "first_name": "Jeremy",
            "real_name": "Jeremy Penner",
            "display_name": "Jeremy Penner",
            "team": "T5TCAFTA9",
            "name": "jeremy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QsD0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basically, there is a pretty low complexity ceiling beyond which manipulating the stack to access the values that you need becomes really difficult vs. just naming the values and letting the compiler sort out where on the stack \/ register \/ memory those values live. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/yosefk.com\/blog\/my-history-with-forth-stack-machines.html"
                            },
                            {
                                "type": "text",
                                "text": " is a long read but has a pretty good description about how Forth was simply the wrong tool to solve his class of problem.\n\nI'm fond of recounting how Chuck Moore has said that local variables as a language feature are \"not only useless, but harmful\", and my understanding is that this is because Chuck sees the inability to cope with complexity as a beneficial force, which prevents you from introducing it into your system. Instead he believes you should find a way to change the problem to a simpler one. It definitely has been true, in my experience, that writing complected code that braids together a bunch of things is so difficult to do in Forth that it's not worth attempting in the first place; whereas in C complexity may be much more straightforward to express without realizing it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHPAERALD",
        "type": "message",
        "ts": "1556712746.442800",
        "client_msg_id": "d1c36ac4-213f-4c69-89cb-e3dc4c7decb2",
        "text": "The important quote from the linked post:\n&gt; The thing is, expression trees map perfectly to stacks: `(a+b)*(c-d)` becomes `a b + c d – *`. Expression graphs, however, start to get messy: `(a+b)*a` becomes a `dup b + *`, and this `dup` cluttering things up is a moderate example. And an \"expression graph\" simply means that you use something more than once.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c40fd0fa31da",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-04\/601366015813_c40fd0fa31daf2844ed4_72.jpg",
            "first_name": "Jeremy",
            "real_name": "Jeremy Penner",
            "display_name": "Jeremy Penner",
            "team": "T5TCAFTA9",
            "name": "jeremy",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dHr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The important quote from the linked post:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thing is, expression trees map perfectly to stacks: "
                            },
                            {
                                "type": "text",
                                "text": "(a+b)*(c-d)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " becomes "
                            },
                            {
                                "type": "text",
                                "text": "a b + c d – *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Expression graphs, however, start to get messy: "
                            },
                            {
                                "type": "text",
                                "text": "(a+b)*a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " becomes a "
                            },
                            {
                                "type": "text",
                                "text": "dup b + *",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and this "
                            },
                            {
                                "type": "text",
                                "text": "dup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " cluttering things up is a moderate example. And an \"expression graph\" simply means that you use something more than once."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556719948.443200",
        "client_msg_id": "2053397b-2d15-4fe1-a0d5-45c834d3df52",
        "text": "Robot Odyssey was always as obscure as it seems now.  I'd say games like the Ultimas haven't particularly aged well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556549792.299200",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yjd4L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Robot Odyssey was always as obscure as it seems now.  I'd say games like the Ultimas haven't particularly aged well."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556720753.445400",
        "client_msg_id": "5bd62084-db65-4230-afdd-ca9fb9cd343e",
        "text": "<@UJ6LDMMN0> UNIX \"simplicity\" really continues this idea of systems that are freely composable in principle, but not so much in practice.  And I say this as one who maintains a fondness for Sam <http:\/\/sam.cat-v.org\/>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TOFpG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": " UNIX \"simplicity\" really continues this idea of systems that are freely composable in principle, but not so much in practice.  And I say this as one who maintains a fondness for Sam "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/sam.cat-v.org\/"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556722190.445500",
        "client_msg_id": "08822fb3-b8bb-43f1-945b-e1424354b79d",
        "text": "I love Forth. Yes it has issues, but everybody in this forum in particular should gain some experience with it, maybe try implementing a Forth interpreter. It would make all your future ideas so much more interesting if you can explain precisely why a Forth interpreter can be so tiny.\n\nHere’s my critique of Forth: <https:\/\/plforums.org\/practice\/minimal-features-required-for-an-extensible-language#post_65>\nHere’s my ongoing attempt at filling and building on Forth’s niche: <https:\/\/github.com\/akkartik\/mu\/blob\/master\/subx\/Readme.md>\n\nI think an unsafe language that occupies C’s niche in a stack shouldn’t have a complex compiler. Type checking and memory safety are _the_ problems at this level, and if you can’t help me with them what am I paying you hundreds of thousands of LoC for, anyway? _What are your overheads?_ (<https:\/\/www.youtube.com\/watch?v=TLEK0UZH4cs>) Go safe or go transparent.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Flight of the Conchords Ep 3 Think About it",
                "title_link": "https:\/\/www.youtube.com\/watch?v=TLEK0UZH4cs",
                "author_name": "r8dkid",
                "author_link": "https:\/\/www.youtube.com\/user\/r8dkid",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/TLEK0UZH4cs\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Flight of the Conchords Ep 3 Think About it",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/TLEK0UZH4cs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=TLEK0UZH4cs",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=TLEK0UZH4cs"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JrU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love Forth. Yes it has issues, but everybody in this forum in particular should gain some experience with it, maybe try implementing a Forth interpreter. It would make all your future ideas so much more interesting if you can explain precisely why a Forth interpreter can be so tiny.\n\nHere’s my critique of Forth: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/plforums.org\/practice\/minimal-features-required-for-an-extensible-language#post_65"
                            },
                            {
                                "type": "text",
                                "text": "\nHere’s my ongoing attempt at filling and building on Forth’s niche: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/blob\/master\/subx\/Readme.md"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI think an unsafe language that occupies C’s niche in a stack shouldn’t have a complex compiler. Type checking and memory safety are "
                            },
                            {
                                "type": "text",
                                "text": "the",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problems at this level, and if you can’t help me with them what am I paying you hundreds of thousands of LoC for, anyway? "
                            },
                            {
                                "type": "text",
                                "text": "What are your overheads?",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=TLEK0UZH4cs"
                            },
                            {
                                "type": "text",
                                "text": ") Go safe or go transparent."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1556722642.445800",
        "client_msg_id": "34be238b-7c37-4576-bf04-6e65e508e410",
        "text": "Jim Coplien makes an interesting case against emergence in \"Reflections on Reflection\" (from 21:40 - 25:40):\n\n<https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social>\n\nHowever, I think he's specifically talking about a common \"emergent\" programming style (often employed in \"OO\" programming) where the *known &amp; expected* behaviors of the system \"emerge\" out of the data model (e.g. each object or class gets a \"slice\" of the overall system behavior). *That* kind of emergence is bad, and makes code much more complex and unpredictable than necessary.\n\nSo I think it's a matter of deciding \/ understanding *where* emergence is great, and where it is not (e.g. growable systems vs. the concrete specifications within individual programs).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556660087.369300",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Reflections on Reflection",
                "title_link": "https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social",
                "text": "Jim Coplien believes that we have done OOP the wrong way for 40 years, and suggests an approach to reflection based on the DCI paradigm and influenced by the human society.",
                "fallback": "InfoQ: Reflections on Reflection",
                "thumb_url": "https:\/\/res.infoq.com\/presentations\/Reflection-OOP-Social\/en\/mediumimage\/Jimbig.jpg",
                "from_url": "https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social",
                "thumb_width": 270,
                "thumb_height": 200,
                "service_icon": "https:\/\/cdn.infoq.com\/statics_s2_20190430-0348\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PqV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jim Coplien makes an interesting case against emergence in \"Reflections on Reflection\" (from 21:40 - 25:40):\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/Reflection-OOP-Social"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHowever, I think he's specifically talking about a common \"emergent\" programming style (often employed in \"OO\" programming) where the "
                            },
                            {
                                "type": "text",
                                "text": "known & expected",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " behaviors of the system \"emerge\" out of the data model (e.g. each object or class gets a \"slice\" of the overall system behavior). "
                            },
                            {
                                "type": "text",
                                "text": "That",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " kind of emergence is bad, and makes code much more complex and unpredictable than necessary.\n\nSo I think it's a matter of deciding \/ understanding "
                            },
                            {
                                "type": "text",
                                "text": "where",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " emergence is great, and where it is not (e.g. growable systems vs. the concrete specifications within individual programs)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1556725532.446100",
        "client_msg_id": "b653ec87-9c19-4ab6-8a1c-0f24b0a23d1e",
        "text": "I guess the difference is that when I was a kid, I didn't mind spending hours messing around aimlessly, making nil progress against something nigh unintelligible. Whereas now as an adult, I run around in the Witness looking askance at every pattern of stones and leaves for hours and hours. So.. I suppose, the more things change..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556549792.299200",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mja1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess the difference is that when I was a kid, I didn't mind spending hours messing around aimlessly, making nil progress against something nigh unintelligible. Whereas now as an adult, I run around in the Witness looking askance at every pattern of stones and leaves for hours and hours. So.. I suppose, the more things change.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1556730630.446300",
        "client_msg_id": "a05f6b23-857d-4c2c-9ec3-1094952a669d",
        "text": "&gt; That gets to the real question in my mind: how do you specify systems in such a way that the behavior you get is going to be in the positive class as opposed to the negative class. You can't control the world, but you might be able to meaningfully funnel it\n\n<@UEBG0NPDK> I think the solution to this is to structure the system not around explicit limitations but around smaller-scoped quid-pro-quo contracts, and to limit UB within contracts but not between them.\n\nOne of the problems with the current generation of digital systems is that they severely limit flexibility. The supposed benefit of these systems over say paper ones is an increase in data integrity, but it doesn't necessarily have that effect. For example, suppose we have paper forms for people who are taken into police custody, and this form has a \"DOB\" field. Officers might reasonably want to write into this field things like \"1970\", \"Claims 2005 but clearly older\", \"1st March, 1969 or 1968 (too drunk can't remember)\" etc etc. If this form is digitized, then the DOB field might reasonably be made to be a Date picker. Now, not only can none of these be entered, but what's more we might be coerced into entering invalid data like \"01\/01\/1970\" instead of \"1970\"!\n\nHowever, obviously there were reasons to ask for the DOB to be a valid date. It let's us do powerful things like query all people born within a specific range. It let's us reason more easily around the rest of the system because we can make valid assumptions. However it's wrong to think that this more restrictive design is definitely \"safer\" - this is just arrogance on the part of the people at the time of design, thinking they definitely know better than future users.\n\nSystems like this should be designed more along the lines of;\n1. I want a date of the form 01\/01\/1970, and I will let you know if you don't give me that\n2. *IF* you give me that, *THEN* I can perform this other action\n3. Otherwise, I can't help you\n\nI think this is why Unix tools are so heavily in the \"good\" side of emergent behaviour. Each one is simple, has an easy to understand contract, and individually has no undefined behaviour. Together they can create fantastic things in unexpected ways. The same is true (in a way) of LEGO. Disaster strikes when a tower of assumptions is built up and then changed somewhere in the distance. Keep assumptions local and explicit and this should be avoided.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556660087.369300",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WC=w",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That gets to the real question in my mind: how do you specify systems in such a way that the behavior you get is going to be in the positive class as opposed to the negative class. You can't control the world, but you might be able to meaningfully funnel it"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I think the solution to this is to structure the system not around explicit limitations but around smaller-scoped quid-pro-quo contracts, and to limit UB within contracts but not between them.\n\nOne of the problems with the current generation of digital systems is that they severely limit flexibility. The supposed benefit of these systems over say paper ones is an increase in data integrity, but it doesn't necessarily have that effect. For example, suppose we have paper forms for people who are taken into police custody, and this form has a \"DOB\" field. Officers might reasonably want to write into this field things like \"1970\", \"Claims 2005 but clearly older\", \"1st March, 1969 or 1968 (too drunk can't remember)\" etc etc. If this form is digitized, then the DOB field might reasonably be made to be a Date picker. Now, not only can none of these be entered, but what's more we might be coerced into entering invalid data like \"01\/01\/1970\" instead of \"1970\"!\n\nHowever, obviously there were reasons to ask for the DOB to be a valid date. It let's us do powerful things like query all people born within a specific range. It let's us reason more easily around the rest of the system because we can make valid assumptions. However it's wrong to think that this more restrictive design is definitely \"safer\" - this is just arrogance on the part of the people at the time of design, thinking they definitely know better than future users.\n\nSystems like this should be designed more along the lines of;\n1. I want a date of the form 01\/01\/1970, and I will let you know if you don't give me that\n2. "
                            },
                            {
                                "type": "text",
                                "text": "IF",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you give me that, "
                            },
                            {
                                "type": "text",
                                "text": "THEN",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I can perform this other action\n3. Otherwise, I can't help you\n\nI think this is why Unix tools are so heavily in the \"good\" side of emergent behaviour. Each one is simple, has an easy to understand contract, and individually has no undefined behaviour. Together they can create fantastic things in unexpected ways. The same is true (in a way) of LEGO. Disaster strikes when a tower of assumptions is built up and then changed somewhere in the distance. Keep assumptions local and explicit and this should be avoided."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1556737330.451400",
        "client_msg_id": "33e182e7-73ba-4dcc-bbc9-aef2b9259224",
        "text": "<@UCUSW7WVD> Can you point me to a quick way of learning Forth?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5i4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Can you point me to a quick way of learning Forth?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556741884.454000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556741927.000000"
        },
        "client_msg_id": "1c7c67a0-66d8-42ef-9c8c-86eda5687b45",
        "text": "Hmm, I immersed myself in the SVFig mailing list for a year, and read many books, so my memory isn’t very helpful right now. The only memorable experience was this screencast by Sam Falvo which gave a very visceral sense of what it’s like to program well in Forth: <https:\/\/www.youtube.com\/watch?v=mvrE2ZGe-rs>\n\nOther than that, here’s a couple of tutorials that seem decent:\n• <https:\/\/www.complang.tuwien.ac.at\/forth\/gforth\/Docs-html\/Tutorial.html#Tutorial>\n• <https:\/\/skilldrick.github.io\/easyforth>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Over the Shoulder 1 - Text Preprocessing in Forth",
                "title_link": "https:\/\/www.youtube.com\/watch?v=mvrE2ZGe-rs",
                "author_name": "Andreas Wagner",
                "author_link": "https:\/\/www.youtube.com\/user\/AndreasBWagner",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/mvrE2ZGe-rs\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Over the Shoulder 1 - Text Preprocessing in Forth",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/mvrE2ZGe-rs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=mvrE2ZGe-rs",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=mvrE2ZGe-rs"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I immersed myself in the SVFig mailing list for a year, and read many books, so my memory isn’t very helpful right now. The only memorable experience was this screencast by Sam Falvo which gave a very visceral sense of what it’s like to program well in Forth: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=mvrE2ZGe-rs"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOther than that, here’s a couple of tutorials that seem decent:\n• "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.complang.tuwien.ac.at\/forth\/gforth\/Docs-html\/Tutorial.html#Tutorial"
                            },
                            {
                                "type": "text",
                                "text": "\n• "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/skilldrick.github.io\/easyforth"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1556755337.462300",
        "client_msg_id": "95e8ea6b-162f-4c67-b958-9ec54f9b8d00",
        "text": "Thanks... hrm, I see the names aren't so great... `if` should be called `then` and `then` should be called `endif`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kjY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks... hrm, I see the names aren't so great... "
                            },
                            {
                                "type": "text",
                                "text": "if",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should be called "
                            },
                            {
                                "type": "text",
                                "text": "then",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "then",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should be called "
                            },
                            {
                                "type": "text",
                                "text": "endif",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556759198.462500",
        "client_msg_id": "6a01dbc6-0a67-40c2-938a-2c05415e81f3",
        "text": "But then some operations read forwards and some back. Better to get used to everything being backwards.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mr1q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But then some operations read forwards and some back. Better to get used to everything being backwards."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556769611.475500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556769724.000000"
        },
        "client_msg_id": "ccbd637b-b5e6-49b8-aea5-bd913cde2ca6",
        "text": "Hmm, not sure why I got no notifications about this thread..\n\n<@UCGAK10LS> you’re right that there’s a scaling problem with graph visualization. Traditional approaches like Labview certainly feel like a dead end. But there’s newer ideas that are worth exploring, like Pane by <@UBKNXPBAB>, which has been discussed here before: <http:\/\/joshuahhh.com\/projects\/pane>. I also brought up Boxer.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556510323.281700",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WIOp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, not sure why I got no notifications about this thread..\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " you’re right that there’s a scaling problem with graph visualization. Traditional approaches like Labview certainly feel like a dead end. But there’s newer ideas that are worth exploring, like Pane by "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": ", which has been discussed here before: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/joshuahhh.com\/projects\/pane"
                            },
                            {
                                "type": "text",
                                "text": ". I also brought up Boxer."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFXFB1RK8",
        "type": "message",
        "ts": "1556770732.488500",
        "client_msg_id": "7211c6d4-ebd3-4ac8-8baf-be5723057d51",
        "text": "We've published another research report that might be of interest to this audience. It's an exploration of what \"local-first\" software might look like, why it's important, and some of our explorations therein. <https:\/\/www.inkandswitch.com\/local-first.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3ffd374deb8",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/53ffd374deb821ab07cdef9f7e321364.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-72.png",
            "first_name": "",
            "real_name": "Peter van Hardenberg",
            "display_name": "Peter van Hardenberg",
            "team": "T5TCAFTA9",
            "name": "pvh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556770732.488500",
        "reply_count": 38,
        "reply_users_count": 5,
        "latest_reply": "1557178642.162900",
        "reply_users": [
            "U5TCAFTD3",
            "U8A5MS6R1",
            "UE0ETTCG7",
            "UFXFB1RK8",
            "UJFN50C00"
        ],
        "replies": [
            {
                "user": "U5TCAFTD3",
                "ts": "1556800201.083900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556808665.088700"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556809715.089000"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556810021.089200"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556810301.089400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556810304.089600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556810464.089800"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556810680.090000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556810716.090200"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556810727.090400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556810851.090800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556810909.091000"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556811037.091300"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556811104.091600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556811669.099900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556811719.101000"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556812180.108600"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556812267.110100"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556812312.110300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556813311.110900"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556813744.111400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556817852.112800"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1556818854.113300"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819329.113500"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819391.113700"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819447.114100"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819492.114300"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819507.114500"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819552.114700"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819621.115100"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556819633.115300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556820542.116000"
            },
            {
                "user": "UFXFB1RK8",
                "ts": "1556821526.118400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556821822.118600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1556909601.150600"
            },
            {
                "user": "UJFN50C00",
                "ts": "1557174562.161000"
            },
            {
                "user": "UJFN50C00",
                "ts": "1557174623.161200"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1557178642.162900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1557198134.000257",
        "attachments": [
            {
                "title": "Local-first software: You own your data, in spite of the cloud",
                "title_link": "https:\/\/www.inkandswitch.com\/local-first.html",
                "text": "A new generation of collaborative software that allows users to retain ownership of their data.",
                "fallback": "Local-first software: You own your data, in spite of the cloud",
                "image_url": "https:\/\/www.inkandswitch.com\/media\/local-first\/cuneiform.jpg",
                "from_url": "https:\/\/www.inkandswitch.com\/local-first.html",
                "image_width": 326,
                "image_height": 250,
                "image_bytes": 67054,
                "service_icon": "https:\/\/www.inkandswitch.com\/assets\/logo-favicon-apple-touch.png",
                "service_name": "inkandswitch.com",
                "id": 1,
                "original_url": "https:\/\/www.inkandswitch.com\/local-first.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IjP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We've published another research report that might be of interest to this audience. It's an exploration of what \"local-first\" software might look like, why it's important, and some of our explorations therein. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.inkandswitch.com\/local-first.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHP08C1DK",
                    "UJ6LDMMN0",
                    "U5TCAFTD3",
                    "U8A5MS6R1",
                    "UE0ETTCG7",
                    "UHPAERALD",
                    "UJFN50C00",
                    "UCKRZS3DZ"
                ],
                "count": 9
            },
            {
                "name": "+1",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556772233.491300",
        "client_msg_id": "6460E263-E4AA-4AC1-9DBB-6F541944445C",
        "text": "I'll add that get excited by the concatenative model every now and then. I like how pretty much any sequence of words can be factored out as a new definition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uc8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll add that get excited by the concatenative model every now and then. I like how pretty much any sequence of words can be factored out as a new definition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1556772496.493600",
        "client_msg_id": "D0806B2E-0FA1-43D4-B86E-862994F9F1B9",
        "text": "Yeah, but the Witness gives back as much as you put in.  I'm still getting good ahas every week!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556549792.299200",
        "parent_user_id": "UFXFB1RK8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ePt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, but the Witness gives back as much as you put in.  I'm still getting good ahas every week!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556773654.493800",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556773672.000000"
        },
        "client_msg_id": "a1630795-cbe4-4b3e-a908-6c61792f21a6",
        "text": "&gt; Forth is highly factored code. I don’t know anything else to say except that Forth is definitions. If you have a lot of small definitions you are writing Forth. In order to write a lot of small definitions you have to have a stack.\n— Chuck Moore (<https:\/\/www.youtube.com\/watch?v=NK0NwqF8F0k>)\n\nHeh, <https:\/\/yosefk.com\/blog\/my-history-with-forth-stack-machines.html> also has this quote. Agreed with <@UHPAERALD> that it’s the best critique of Forth ever.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1556655545.323500",
        "parent_user_id": "UE6EFEPTQ",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "1x Forth",
                "title_link": "https:\/\/www.youtube.com\/watch?v=NK0NwqF8F0k",
                "author_name": "Samuel Falvo II",
                "author_link": "https:\/\/www.youtube.com\/user\/saf271828",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/NK0NwqF8F0k\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: 1x Forth",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/NK0NwqF8F0k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=NK0NwqF8F0k",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=NK0NwqF8F0k"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vaa",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Forth is highly factored code. I don’t know anything else to say except that Forth is definitions. If you have a lot of small definitions you are writing Forth. In order to write a lot of small definitions you have to have a stack."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "— Chuck Moore ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=NK0NwqF8F0k"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nHeh, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/yosefk.com\/blog\/my-history-with-forth-stack-machines.html"
                            },
                            {
                                "type": "text",
                                "text": " also has this quote. Agreed with "
                            },
                            {
                                "type": "user",
                                "user_id": "UHPAERALD"
                            },
                            {
                                "type": "text",
                                "text": " that it’s the best critique of Forth ever."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1556779745.064000",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1556779809.000000"
        },
        "client_msg_id": "7dffdcbd-4c26-4d63-baa9-72dac11dc4f3",
        "text": "Very interesting subject and the article seems very complete! Now, I *must* find the time to read it entirely (it is quiet long). On the same subject, I found this interesting article on Causal Tree and CRDT. I have played a little bit with Causal Tree (for a talk that illustrates Rust-WebAssembly-JavaScript bindings) and found it very very interesting. It is simple and efficient. <http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Archagon Was Here",
                "title": "Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "title_link": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "text": "An in-depth exploration of a new class of expressive, performant, and intuitive CRDTs, together with macOS and iOS sample code.",
                "fallback": "Archagon Was Here: Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "thumb_url": "http:\/\/archagon.net\/images\/blog\/causal-trees\/header.jpg",
                "from_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/",
                "thumb_width": 1800,
                "thumb_height": 772,
                "service_icon": "http:\/\/archagon.net\/images\/favicon\/favicon-96x96.png",
                "id": 1,
                "original_url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V7jJv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting subject and the article seems very complete! Now, I "
                            },
                            {
                                "type": "text",
                                "text": "must",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " find the time to read it entirely (it is quiet long). On the same subject, I found this interesting article on Causal Tree and CRDT. I have played a little bit with Causal Tree (for a talk that illustrates Rust-WebAssembly-JavaScript bindings) and found it very very interesting. It is simple and efficient. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/archagon.net\/blog\/2018\/03\/24\/data-laced-with-history\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    }
]