[
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1677873018.058609",
        "client_msg_id": "90e33ed1-04a1-4bb7-accb-1592cbc3f728",
        "text": "Multi-single-tasking:\n\nBrainstorming, half-baked...\n\nI would have ignored Ceptre in the past.  It claims to be a language for writing games.  The very idea makes me yawn. But, one of the guys at the Torlisp monthly meetup is deeply into robotics and Scheme and another guy, in the film industry, uses Racket for hobbying in game programming.  My own interest is in concurrency and simplicity and compiler-writing.  These fields are all related.  Watching the 2015 Strangeloop presentation about Ceptre piqued my interest.  Ceptre is logic programming, but with a twist - it has a built-in notion of explicit ordering.  I thought that I could knock off a better game language using my diagrams of state machines. I continued to learn about Ceptre.  Aside: Ohm-JS has built-in explicit ordering and is “not” context-free.  I have to wonder if Ceptre is to generalized formalism as PEG (Ohm-JS) is to context-free grammar formalisms.\n\nDunno yet.\n\nFYI, I watched the Ceptre talk.  I then read the paper and now am reading the thesis.  And in the background (foreground?) I am trying to convert Dungeon Crawler (.ceptre) into PROLOG.  I think that Ceptre can be simplified down to a small handful of primitives which are easy to express in PROLOG or Lisp or JS or ..., but they are not the first thing that you think of when programming PROLOG.  From there, of course, I would expect to generate code for Dungeon Crawler in Lisp and JS and Python and …\n\nIn the back of my mind is the question “Is This Steam Engine Time?” (Paul Morrison).  Are we seeing a shift away from single-threaded languages (Python, JS, Rust, Haskell, lambda calculus, etc.) to ???.  Certainly, hardware in 2022++ is drastically different from hardware in 1950 and we should be finding better ways to cope with this New Reality (“The Great Reset in Computing”)…\n\nFYI: The drastic difference in hardware is the reality that we now have cheap CPUs and cheap memory.  Both of these notions were completely unimaginable in 1950.  Instead of crushing our hardware with bloatware like Linux, we can simply throw rPIs at a problem, each running single-threaded programs.  There is no need to fake out multitasking anymore. Multicore is just a clumsy way to bridge across the two drastic realities, i.e. to force-fit 1 CPU programming languages onto many-CPU-programming.  In fact, we shouldn’t even call CPUs CPUs anymore, since there’s nothing Central about them.  Early adopters of 1950s computing built games.  Maybe early adopters of 2022++ computing will build new kinds of games with 1,000s of PUs, for example 1 processor for each player and for each NPC.\n\nCeptre:  [<https:\/\/www.youtube.com\/watch?v=bFeJZRdhKc> <https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1674614304225439>\n\nCall\/Return <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1675094970899729?thread_ts=1674396396.762359&amp;cid=C5T9GPWFL>\n\nI have not investigated this, but it, too, appears to be barking up the same tree: <https:\/\/www.youtube.com\/watch?v=5YjsSDDWFDY&amp;list=PLcGKfGEEONaDO2dvGEdodnqG5cSnZ96W1&amp;index=28>\n\nFBP (Flow Based Programming) <https:\/\/jpaulm.github.io\/fbp\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "reply_count": 10,
        "reply_users_count": 2,
        "latest_reply": "1680227197.307129",
        "reply_users": [
            "U017SHBAFE3",
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "U017SHBAFE3",
                "ts": "1677875099.728569"
            },
            {
                "user": "U017SHBAFE3",
                "ts": "1677875268.364199"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1677879779.526029"
            },
            {
                "user": "U017SHBAFE3",
                "ts": "1677884709.936069"
            },
            {
                "user": "U017SHBAFE3",
                "ts": "1677884726.866539"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1677935516.792709"
            },
            {
                "user": "U017SHBAFE3",
                "ts": "1677966377.650649"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1678748539.770409"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1680143863.637899"
            },
            {
                "user": "U017SHBAFE3",
                "ts": "1680227197.307129"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "from_url": "https:\/\/youtu.be\/bFeJZRdhKcI",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/bFeJZRdhKcI\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/bFeJZRdhKcI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"&quot;Ceptre: A Language for Modeling Generative Interactive Systems&quot; by Chris Martens\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1674614304225439",
                "fallback": "YouTube Video: \"Ceptre: A Language for Modeling Generative Interactive Systems\" by Chris Martens",
                "title": "\"Ceptre: A Language for Modeling Generative Interactive Systems\" by Chris Martens",
                "title_link": "https:\/\/youtu.be\/bFeJZRdhKcI",
                "author_name": "Strange Loop Conference",
                "author_link": "https:\/\/www.youtube.com\/@StrangeLoopConf",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A4Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Multi-single-tasking:\n\nBrainstorming, half-baked...\n\nI would have ignored Ceptre in the past.  It claims to be a language for writing games.  The very idea makes me yawn. But, one of the guys at the Torlisp monthly meetup is deeply into robotics and Scheme and another guy, in the film industry, uses Racket for hobbying in game programming.  My own interest is in concurrency and simplicity and compiler-writing.  These fields are all related.  Watching the 2015 Strangeloop presentation about Ceptre piqued my interest.  Ceptre is logic programming, but with a twist - it has a built-in notion of explicit ordering.  I thought that I could knock off a better game language using my diagrams of state machines. I continued to learn about Ceptre.  Aside: Ohm-JS has built-in explicit ordering and is “not” context-free.  I have to wonder if Ceptre is to generalized formalism as PEG (Ohm-JS) is to context-free grammar formalisms.\n\nDunno yet.\n\nFYI, I watched the Ceptre talk.  I then read the paper and now am reading the thesis.  And in the background (foreground?) I am trying to convert Dungeon Crawler (.ceptre) into PROLOG.  I think that Ceptre can be simplified down to a small handful of primitives which are easy to express in PROLOG or Lisp or JS or ..., but they are not the first thing that you think of when programming PROLOG.  From there, of course, I would expect to generate code for Dungeon Crawler in Lisp and JS and Python and …\n\nIn the back of my mind is the question “Is This Steam Engine Time?” (Paul Morrison).  Are we seeing a shift away from single-threaded languages (Python, JS, Rust, Haskell, lambda calculus, etc.) to ???.  Certainly, hardware in 2022++ is drastically different from hardware in 1950 and we should be finding better ways to cope with this New Reality (“The Great Reset in Computing”)…\n\nFYI: The drastic difference in hardware is the reality that we now have cheap CPUs and cheap memory.  Both of these notions were completely unimaginable in 1950.  Instead of crushing our hardware with bloatware like Linux, we can simply throw rPIs at a problem, each running single-threaded programs.  There is no need to fake out multitasking anymore. Multicore is just a clumsy way to bridge across the two drastic realities, i.e. to force-fit 1 CPU programming languages onto many-CPU-programming.  In fact, we shouldn’t even call CPUs CPUs anymore, since there’s nothing Central about them.  Early adopters of 1950s computing built games.  Maybe early adopters of 2022++ computing will build new kinds of games with 1,000s of PUs, for example 1 processor for each player and for each NPC.\n\nCeptre:  ["
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=bFeJZRdhKc"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5U3SEW6A\/p1674614304225439"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCall\/Return "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1675094970899729?thread_ts=1674396396.762359&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have not investigated this, but it, too, appears to be barking up the same tree: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=5YjsSDDWFDY&list=PLcGKfGEEONaDO2dvGEdodnqG5cSnZ96W1&index=28"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFBP (Flow Based Programming) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jpaulm.github.io\/fbp\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U017SHBAFE3",
                    "UCUSW7WVD",
                    "U02JQA5FY5C"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U017SHBAFE3",
        "type": "message",
        "ts": "1677875099.728569",
        "client_msg_id": "0fef456c-2d8d-4887-b428-8d1900fde434",
        "text": "Very interesting line of thought.\n\nThe first quote in the flow based link \"The real world is asynchronous: don't try to force everything into a synchronous framework derived from the architecture of early computers.\"\n\nas well as your thoughts around cpus not being central anymore and cheap cpu\/memory...\n\nI think they all really do follow on what you're highlighting as the death of single threaded programming languages",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c029e3e6e0b8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-01\/4874202208501_c029e3e6e0b8e1372a93_72.png",
            "first_name": "Rafi",
            "real_name": "Rafi Khan",
            "display_name": "Rafi Khan",
            "team": "T5TCAFTA9",
            "name": "rafi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/EhkQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting line of thought.\n\nThe first quote in the flow based link \"The real world is asynchronous: don't try to force everything into a synchronous framework derived from the architecture of early computers.\"\n\nas well as your thoughts around cpus not being central anymore and cheap cpu\/memory...\n\nI think they all really do follow on what you're highlighting as the death of single threaded programming languages"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017SHBAFE3",
        "type": "message",
        "ts": "1677875268.364199",
        "client_msg_id": "3d736184-0d87-4247-8454-3f0162d53074",
        "text": "You see some things which aim to make multithreaded programming or concurrency easier in programming languages, but I do want to agree with your thought above about a fundamental foundational shift.\n\nI think the capability for change (better hardware and more cumulative experience in designing software) is already fulfilled.\n\nI guess the industry is just a lot slower to change.\n\nI think another thing is that if there was more of a p2p design in software systems then we might spend more time thinking about systems along what you said of multiple rpis. But the centralised way in which much of the end-user software is delivered may not be as favorable for these less central designs of computing?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c029e3e6e0b8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-01\/4874202208501_c029e3e6e0b8e1372a93_72.png",
            "first_name": "Rafi",
            "real_name": "Rafi Khan",
            "display_name": "Rafi Khan",
            "team": "T5TCAFTA9",
            "name": "rafi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZWzy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You see some things which aim to make multithreaded programming or concurrency easier in programming languages, but I do want to agree with your thought above about a fundamental foundational shift.\n\nI think the capability for change (better hardware and more cumulative experience in designing software) is already fulfilled.\n\nI guess the industry is just a lot slower to change.\n\nI think another thing is that if there was more of a p2p design in software systems then we might spend more time thinking about systems along what you said of multiple rpis. But the centralised way in which much of the end-user software is delivered may not be as favorable for these less central designs of computing?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1677879779.526029",
        "client_msg_id": "17e8f4c6-0c7a-45ed-ba87-ae677791d913",
        "text": "Thanks for your comments, and causing me to think \/ clarify!\n\nTrickle-down: I think that industry doesn’t adopt the current solutions because developers haven’t really solved the issues in a palatable manner.  Developers haven’t solved the issues in a palatable manner because developers think that the issues are difficult.  Developers think that the issues are difficult because they don’t have the language for dealing with such concepts easily.  Developers are bought into the Silver Bullet of Functional Programming which helps them deal with fancy calculators but shoots them in their own feet for other kinds of problems.  Real Physicists deal with this kind of thing by inventing new notations.  Software developers have been coerced into thinking that there is but one notation (all popular programming languages are based on functions).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a3TNc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for your comments, and causing me to think \/ clarify!\n\nTrickle-down: I think that industry doesn’t adopt the current solutions because developers haven’t really solved the issues in a palatable manner.  Developers haven’t solved the issues in a palatable manner because developers think that the issues are difficult.  Developers think that the issues are difficult because they don’t have the language for dealing with such concepts easily.  Developers are bought into the Silver Bullet of Functional Programming which helps them deal with fancy calculators but shoots them in their own feet for other kinds of problems.  Real Physicists deal with this kind of thing by inventing new notations.  Software developers have been coerced into thinking that there is but one notation (all popular programming languages are based on functions)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017SHBAFE3",
        "type": "message",
        "ts": "1677884709.936069",
        "client_msg_id": "86acd5ca-bae3-4cd5-bb75-e5a7910d7907",
        "text": "Makes sense! I forgot to think about that.\n\nI wonder how does one go about building the tooling and ecosystem around these new ideas? Developer tooling is expensive to build but harder to monetise?\n\nAbout the inventing new notations, I really love that and the reference to physics. I wasn't aware that they did that... but thinking about DSLs and how we seem to invent new languages or libraries (pseudo DSLs in my book) when there is a vastly new domain in computing... it connects a lot of dots for me",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c029e3e6e0b8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-01\/4874202208501_c029e3e6e0b8e1372a93_72.png",
            "first_name": "Rafi",
            "real_name": "Rafi Khan",
            "display_name": "Rafi Khan",
            "team": "T5TCAFTA9",
            "name": "rafi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YeO9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes sense! I forgot to think about that.\n\nI wonder how does one go about building the tooling and ecosystem around these new ideas? Developer tooling is expensive to build but harder to monetise?\n\nAbout the inventing new notations, I really love that and the reference to physics. I wasn't aware that they did that... but thinking about DSLs and how we seem to invent new languages or libraries (pseudo DSLs in my book) when there is a vastly new domain in computing... it connects a lot of dots for me"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017SHBAFE3",
        "type": "message",
        "ts": "1677884726.866539",
        "client_msg_id": "a48af31e-257c-4c85-bc06-f53a91bcfc9f",
        "text": "\"Software developers have been coerced into thinking that there is but one notation\"\n\nThis part really makes me sad, and I want to do something about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "c029e3e6e0b8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-03-01\/4874202208501_c029e3e6e0b8e1372a93_72.png",
            "first_name": "Rafi",
            "real_name": "Rafi Khan",
            "display_name": "Rafi Khan",
            "team": "T5TCAFTA9",
            "name": "rafi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1677873018.058609",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "89jO0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Software developers have been coerced into thinking that there is but one notation\"\n\nThis part really makes me sad, and I want to do something about it"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    }
]