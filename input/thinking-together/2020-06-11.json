[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1591864026.151700",
        "client_msg_id": "fc788112-a347-4476-822d-c91951f30f28",
        "text": "<@UD6EXQVM0> Nothing I know of, though a tutorial for Lisp newbies would probably be the best way to gain an audience. Selling any alternative to s-expressions to people who are perfectly happy with s-expressions is a pretty dumb marketing strategy.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vxq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " Nothing I know of, though a tutorial for Lisp newbies would probably be the best way to gain an audience. Selling any alternative to s-expressions to people who are perfectly happy with s-expressions is a pretty dumb marketing strategy."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1591864254.152000",
        "client_msg_id": "f7f55e5c-1ae4-4c8b-a169-106fae9ac36a",
        "text": "<@U6KQ2S410> I agree with all that. Challenge problems are one way to formulate common goals. My point is that discussing challenge problems here on Slack will just lead to another interesting discussion that will die out after a few days. Slack is even worse than other stream media in being optimized for short attention spans.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1tW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " I agree with all that. Challenge problems are one way to formulate common goals. My point is that discussing challenge problems here on Slack will just lead to another interesting discussion that will die out after a few days. Slack is even worse than other stream media in being optimized for short attention spans."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591869278.153800",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591928922.000000"
        },
        "client_msg_id": "469f70f2-5a64-43b5-92ad-8321cea63c62",
        "text": "Has anyone ever seen an implementation of arbitrary-precision floats (N.B: not rationals) where you don't actually have to set the precision BEFORE you perform an operation? I want to do a sequence of operations and then round the final result, not round constantly and incessantly. It seems like no human on earth has ever implemented this before, which baffles me. (Edit: division is allowed to be rounded)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "reply_count": 38,
        "reply_users_count": 13,
        "latest_reply": "1592047355.248300",
        "reply_users": [
            "UA14TGLTC",
            "UCGAK10LS",
            "UAJ9DV971",
            "UBN9AFS0N",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "UJBAJNFLK",
            "UDQBTJ211",
            "U015902ESJC",
            "UETFVV24Q",
            "UEQ6M68H0",
            "UJN1TAYEQ",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1591869758.154200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591869823.154400"
            },
            {
                "user": "UAJ9DV971",
                "ts": "1591870142.154600"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591870196.155000"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1591870376.155300"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591870560.155500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591870598.155700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1591876428.155900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1591880506.156500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591885719.157000"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1591888057.158100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1591891350.165000"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1591891977.165200"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591893143.165400"
            },
            {
                "user": "U015902ESJC",
                "ts": "1591893164.165600"
            },
            {
                "user": "UETFVV24Q",
                "ts": "1591899671.166800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1591905760.168500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1591905873.168800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1591908476.171600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1591915744.176500"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591928271.176800"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591928338.177000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591928626.177200"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591929752.177700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1591941255.180000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1591941620.181000"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591941728.181300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1591948865.183700"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1591949060.185900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591953177.188100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1591953212.188700"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1591965671.200900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1591968862.201100"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1591979080.202900"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1592005065.204400"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1592005378.204700"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1592005563.204900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1592047355.248300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fWmQ2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone ever seen an implementation of arbitrary-precision floats (N.B: not rationals) where you don't actually have to set the precision BEFORE you perform an operation? I want to do a sequence of operations and then round the final result, not round constantly and incessantly. It seems like no human on earth has ever implemented this before, which baffles me. (Edit: division is allowed to be rounded)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1591869758.154200",
        "client_msg_id": "3cf00c9f-357e-4317-81cc-d9e24a9892d7",
        "text": "If you don't mean rationals, what do you mean?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EfF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you don't mean rationals, what do you mean?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591869823.154400",
        "client_msg_id": "ece5b837-22da-4793-bc46-eee45f9d2007",
        "text": "Just floats! But where the mantissa and exponent are BigInts, not fixed-size bit fields. I want to be able to add or multiply two floats and get an exact result, unless I explicitly ask for rounding.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e0G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just floats! But where the mantissa and exponent are BigInts, not fixed-size bit fields. I want to be able to add or multiply two floats and get an exact result, unless I explicitly ask for rounding."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAJ9DV971",
        "type": "message",
        "ts": "1591870142.154600",
        "edited": {
            "user": "UAJ9DV971",
            "ts": "1591870146.000000"
        },
        "client_msg_id": "a68f566a-d54c-4c0d-ab68-2ebd682bcd99",
        "text": "Probably not what you’re looking for but: <https:\/\/en.wikipedia.org\/wiki\/Unum_(number_format)>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "540fc50d2192",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-12\/502004543669_540fc50d2192cc8aba20_72.jpg",
            "first_name": "Marcel",
            "real_name": "Marcel Goethals",
            "display_name": "wolkenmachine",
            "team": "T5TCAFTA9",
            "name": "accounts",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1wJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably not what you’re looking for but: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Unum_(number_format)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591870196.155000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591870217.000000"
        },
        "client_msg_id": "846e9971-6cce-4d4d-80a9-1c47490e33cf",
        "text": "Unums don't provide exact results, despite the marketing type. Interval arithmetic (which floats or unums can be used for) provides a guarantee that the true result lies within an interval, but I'm not really interested in interval arithmetic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iQnTE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unums don't provide exact results, despite the marketing type. Interval arithmetic (which floats or unums can be used for) provides a guarantee that the true result lies within an interval, but I'm not really interested in interval arithmetic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1591870376.155300",
        "client_msg_id": "be53be0f-fa70-43ea-9ccd-84a4ca816324",
        "text": "probably you know about this and I'm not sure it solves your problem, but just in case: <https:\/\/gmplib.org\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/Bt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "probably you know about this and I'm not sure it solves your problem, but just in case: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gmplib.org\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591870560.155500",
        "client_msg_id": "57c74fcd-08fe-4126-9674-c68e08f0d8ef",
        "text": "Unfortunately, you have to specify the precision of GMP floats before each operation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rzpq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unfortunately, you have to specify the precision of GMP floats before each operation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591870598.155700",
        "client_msg_id": "4b766f87-385e-4f6e-97b7-732a8f7832c2",
        "text": "I could \"hack\" these existing libraries by setting the target precision insanely high (kilobytes), but it's a dodgy solution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3XyS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I could \"hack\" these existing libraries by setting the target precision insanely high (kilobytes), but it's a dodgy solution."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1591876428.155900",
        "client_msg_id": "b0f38861-37fa-48be-9550-d53a43a59b77",
        "text": "The kind of hack I've done is to have arithmetic operations build an expression tree, which you then reduce in some special way later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jbND",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The kind of hack I've done is to have arithmetic operations build an expression tree, which you then reduce in some special way later."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1591880506.156500",
        "client_msg_id": "5B155401-4571-4D2F-BAE0-2CA4401DB442",
        "text": "^^that’s what i would do",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z9H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "^^that’s what i would do"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591885719.157000",
        "client_msg_id": "5bd0eae7-bbf0-46c3-bb4d-6ebf639b5f11",
        "text": "How does that give me an associative SUM()?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dph",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How does that give me an associative SUM()?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591888057.158100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591888327.000000"
        },
        "client_msg_id": "4ff229cc-4be9-48e4-9c8c-9b64d714e80d",
        "text": "This is a rabbit hole I went <https:\/\/twitter.com\/spiralganglion\/status\/1141913756923912192|exploring> about a year ago. Some of the libraries had a maximum precision threshold you could set, which sounds like the thing you want to avoid. Other libraries dodged that by doing all calculations in a <http:\/\/algebrite.org|symbolic way> (<https:\/\/github.com\/davidedc\/Algebrite#references|see also>). There were a bunch of libraries I came across, but I didn't end up saving links to them because I never found one that fit my performance needs (ie: perfect precision with relatively constant execution time that handles the accumulation of millions of operations).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "le8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a rabbit hole I went "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/spiralganglion\/status\/1141913756923912192",
                                "text": "exploring"
                            },
                            {
                                "type": "text",
                                "text": " about a year ago. Some of the libraries had a maximum precision threshold you could set, which sounds like the thing you want to avoid. Other libraries dodged that by doing all calculations in a "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/algebrite.org",
                                "text": "symbolic way"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/davidedc\/Algebrite#references",
                                "text": "see also"
                            },
                            {
                                "type": "text",
                                "text": "). There were a bunch of libraries I came across, but I didn't end up saving links to them because I never found one that fit my performance needs (ie: perfect precision with relatively constant execution time that handles the accumulation of millions of operations)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK500AGQ4",
        "type": "message",
        "ts": "1591889749.164700",
        "client_msg_id": "1ea7c71f-0b8d-418c-8941-f564eca05c4f",
        "text": "I haven't been looking at FOC stuff for a while, so asking this if anyone can give some advice:\nWhat are the best implementations of interactive UI usage of OOP interfaces? for example I'd envision seeing an object as a box containing a list of methods (and other objects it contains, also as boxes), and being able to click on a method, and having it expand to give me places to drag and drop other objects in, and then turning into another box representing the object it returns.\n(Specifically I'm interested in making such an interactive UI for an advanced low-level OS interface I've created, mostly as a way to teach the interface)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g87b7201c4f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/687b7201c4f7653ccc0ec77826fc51d7.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Spencer Baugh",
            "display_name": "Spencer Baugh",
            "team": "T5TCAFTA9",
            "name": "spencerbaugh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591889749.164700",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1592280667.322100",
        "reply_users": [
            "UC2A2ARPT",
            "UAVCC2X70",
            "UK500AGQ4",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1591908329.170400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1591941950.181500"
            },
            {
                "user": "UK500AGQ4",
                "ts": "1591986407.203300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1592052924.251600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1592280667.322100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CmO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't been looking at FOC stuff for a while, so asking this if anyone can give some advice:\nWhat are the best implementations of interactive UI usage of OOP interfaces? for example I'd envision seeing an object as a box containing a list of methods (and other objects it contains, also as boxes), and being able to click on a method, and having it expand to give me places to drag and drop other objects in, and then turning into another box representing the object it returns.\n(Specifically I'm interested in making such an interactive UI for an advanced low-level OS interface I've created, mostly as a way to teach the interface)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1591891350.165000",
        "client_msg_id": "1f067276-69b2-4b7e-9498-0cb980aeb4cb",
        "text": "<@UCGAK10LS> If I understand correctly what you are looking for, it's impossible. The very principle of floating-point arithmetic is to make the precision part of the storage format for each number, in order to ensure a constant storage size, no matter which operations you do. If you are OK with indefinite storage size, as for big integers, then go for rational numbers.\n\nSomething that many people don't realize is that floats a _subset_ of rationals with fixed storage size. Perhaps it's because so many languages call them \"reals\" that so many people think floats are a _superset_ of rationals, whereas reality is the exact opposite.\n\nIf what you want is a superset of rationals, go for computable numbers (the subject of Alan Turing's famous paper that introduced the Turing machines). A number is then represented by a procedure that you call with the requested precision. But this is rarely what you really want, once you understand all the consequences, for example the impossibility to test for equality.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "67WMb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " If I understand correctly what you are looking for, it's impossible. The very principle of floating-point arithmetic is to make the precision part of the storage format for each number, in order to ensure a constant storage size, no matter which operations you do. If you are OK with indefinite storage size, as for big integers, then go for rational numbers.\n\nSomething that many people don't realize is that floats a "
                            },
                            {
                                "type": "text",
                                "text": "subset",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of rationals with fixed storage size. Perhaps it's because so many languages call them \"reals\" that so many people think floats are a "
                            },
                            {
                                "type": "text",
                                "text": "superset",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of rationals, whereas reality is the exact opposite.\n\nIf what you want is a superset of rationals, go for computable numbers (the subject of Alan Turing's famous paper that introduced the Turing machines). A number is then represented by a procedure that you call with the requested precision. But this is rarely what you really want, once you understand all the consequences, for example the impossibility to test for equality."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1591891977.165200",
        "client_msg_id": "6a779420-bda8-4fff-bbb9-dd8cd3675f74",
        "text": "I wonder if there's some solution that carries several representations, and is aware of their accuracy, so it can fall back to an expensive symbolic calculation if it knows the test is outside float accuracy.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if there's some solution that carries several representations, and is aware of their accuracy, so it can fall back to an expensive symbolic calculation if it knows the test is outside float accuracy."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591893143.165400",
        "client_msg_id": "090bc2f5-a4db-48a3-8a91-8c44093e2564",
        "text": "<@UCGAK10LS> the reason it doesn't exist is that not all numbers are representable in base 2 float, even with infinite precision. For example: 0.1 is 0.00011001100110011...2 (with the 0011 part repeating forever). So, you literally can't represent all numbers of even a finite base 10 decimal space without infinite precision. See this for a more detailed",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8H69d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " the reason it doesn't exist is that not all numbers are representable in base 2 float, even with infinite precision. For example: 0.1 is 0.00011001100110011...2 (with the 0011 part repeating forever). So, you literally can't represent all numbers of even a finite base 10 decimal space without infinite precision. See this for a more detailed"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591893164.165600",
        "client_msg_id": "28ba53f7-c318-40eb-8e01-1da8c0b038b6",
        "text": "Forgot the link: <https:\/\/softwareengineering.stackexchange.com\/questions\/237014\/are-there-numbers-that-are-not-representable-in-base-10-but-can-be-represented-i>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "attachments": [
            {
                "service_name": "Software Engineering Stack Exchange",
                "title": "Are there numbers that are not representable in base 10 but can be represented in base 2?",
                "title_link": "https:\/\/softwareengineering.stackexchange.com\/questions\/237014\/are-there-numbers-that-are-not-representable-in-base-10-but-can-be-represented-i",
                "text": "C# has the decimal type which is used for numbers that needs exact representation in base 10. For instance, 0.1 cannot be represented in base 2 (e.g. float and double) and will always be an approxi...",
                "fallback": "Software Engineering Stack Exchange: Are there numbers that are not representable in base 10 but can be represented in base 2?",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/softwareengineering\/Img\/apple-touch-icon@2.png?v=1ef7363febba",
                "from_url": "https:\/\/softwareengineering.stackexchange.com\/questions\/237014\/are-there-numbers-that-are-not-representable-in-base-10-but-can-be-represented-i",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/softwareengineering\/Img\/apple-touch-icon.png?v=5e581fc45e58",
                "id": 1,
                "original_url": "https:\/\/softwareengineering.stackexchange.com\/questions\/237014\/are-there-numbers-that-are-not-representable-in-base-10-but-can-be-represented-i"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XcUL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Forgot the link: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/softwareengineering.stackexchange.com\/questions\/237014\/are-there-numbers-that-are-not-representable-in-base-10-but-can-be-represented-i"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1591894992.166000",
        "client_msg_id": "d86255a9-f6f7-41d6-b3a1-6800f553e262",
        "text": "Let's say you have the following code:\n```def do_it(x, y)\n  if x &gt; y\n   x = x + y\n  else\n   x = x - y\n  end\nend\n\nnumber_x = read_from_stdin\nnumber_y = read_from_stdin\ndo_it(number_x, number_y)```\nThis is completely arbitrary, of course, but at which location can you reliably know you can avoid overflow? Any code that takes input could be handed values which cause an overflow at some point right? If you are duplicating logic (i.e. you have a 32-bit version, 64-bit version and perhaps more) how do you know which one to use? The only way you can know if it will overflow is essentially by doing the mathematical operation, so checking which path to take is at least as complicated as just doing it, which means you just need to do it and check for overflows and extend\/retry with the next size. I'm having a hard time seeing how static analysis helps here except in arbitrarily small cases where you can compute the entire possible result space and prove it and all intermediate values are less than x-bits. I'm not sure if static analysis of this kind can really be reduced below the complexity of the halting problem, which is an NP-hard problem.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Ra0u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let's say you have the following code:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def do_it(x, y)\n  if x > y\n   x = x + y\n  else\n   x = x - y\n  end\nend\n\nnumber_x = read_from_stdin\nnumber_y = read_from_stdin\ndo_it(number_x, number_y)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis is completely arbitrary, of course, but at which location can you reliably know you can avoid overflow? Any code that takes input could be handed values which cause an overflow at some point right? If you are duplicating logic (i.e. you have a 32-bit version, 64-bit version and perhaps more) how do you know which one to use? The only way you can know if it will overflow is essentially by doing the mathematical operation, so checking which path to take is at least as complicated as just doing it, which means you just need to do it and check for overflows and extend\/retry with the next size. I'm having a hard time seeing how static analysis helps here except in arbitrarily small cases where you can compute the entire possible result space and prove it and all intermediate values are less than x-bits. I'm not sure if static analysis of this kind can really be reduced below the complexity of the halting problem, which is an NP-hard problem."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UETFVV24Q",
        "type": "message",
        "ts": "1591899671.166800",
        "client_msg_id": "648599f3-a255-42cd-9fd9-bf4f357893b4",
        "text": "there’s systems like Common Lisp that support arbitrary-sized rational numbers, any rational can be stored as a fraction of (bigint) \/ (bigint)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3e6a851923d2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-20\/1067569014342_3e6a851923d262ea9e74_72.png",
            "first_name": "",
            "real_name": "Andy F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andy.fischer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pLD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there’s systems like Common Lisp that support arbitrary-sized rational numbers, any rational can be stored as a fraction of (bigint) \/ (bigint)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEDDR6L5Q",
        "type": "message",
        "ts": "1591901178.168200",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1592169117.000000"
        },
        "client_msg_id": "4ff6cfd5-d877-48b0-91f8-bf852850c4c6",
        "text": "I'll be streaming some WhiteBox (live code previsualizer\/debugger) dev in a few mins, which you're very welcome to join.\nI'll be doing some bug fixes and working on some UI for status feedback. <https:\/\/www.twitch.tv\/azmreece>\nFeel free to join the streamed voice chat: <https:\/\/discord.gg\/xHgepxM>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "adf09dea9be2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-04-20\/1975289475446_adf09dea9be29fa422a0_72.png",
            "first_name": "",
            "real_name": "Andrew Reece",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "azmreece",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "crWbn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll be streaming some WhiteBox (live code previsualizer\/debugger) dev in a few mins, which you're very welcome to join.\nI'll be doing some bug fixes and working on some UI for status feedback. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.twitch.tv\/azmreece"
                            },
                            {
                                "type": "text",
                                "text": "\nFeel free to join the streamed voice chat: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/discord.gg\/xHgepxM"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT",
                    "UGLSY9X3J"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1591905760.168500",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591905774.000000"
        },
        "client_msg_id": "b15564a8-22cb-4158-9e34-0079b45eef53",
        "text": "there is an excellent youtube video and code sample by Crockford on the DEC64 floating point representation, which is far superior to stupid IEEE double precision format. It was a tragedy that the committee sought to save a few transistors and used  binary exponents.  Countless programs wrestle with this, and i believe it is one of the reasons COBOL still runs in many industries because COBOL for all its verbosity and ugliness contains BCD arithmetic in its syntax and computation model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qQ0CW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there is an excellent youtube video and code sample by Crockford on the DEC64 floating point representation, which is far superior to stupid IEEE double precision format. It was a tragedy that the committee sought to save a few transistors and used  binary exponents.  Countless programs wrestle with this, and i believe it is one of the reasons COBOL still runs in many industries because COBOL for all its verbosity and ugliness contains BCD arithmetic in its syntax and computation model."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1591905873.168800",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591905893.000000"
        },
        "client_msg_id": "911c4a95-48e8-4006-98b4-b95fc6ba33b9",
        "text": "And let's not forget mathematica, which as a symbolic language, will deliver whatever precision you wish to ask for. It is one of its \"superpowers\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J=J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And let's not forget mathematica, which as a symbolic language, will deliver whatever precision you wish to ask for. It is one of its \"superpowers\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1591908052.169100",
        "edited": {
            "user": "UKDM3GLAJ",
            "ts": "1591908398.000000"
        },
        "client_msg_id": "08afcd4b-9cf6-4d87-8628-d31c4891f0c1",
        "text": "<@UFB8STN7K> I finally finished the Morgan Ames paper you posted. Really fascinating. I have had a tangential awareness of Logo as this very evidence-based and well-tested pedagogical tool, and having that examined and criticized was very eye-opening. I’ll definitely be seeking out more of ~his~ her research. It’s really got me thinking about how much I have internalized the MIT ethos (had no idea it developed there), and view certain ways of using a computer as legitimate. Thanks for posting it :pray:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591498636.036100",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " I finally finished the Morgan Ames paper you posted. Really fascinating. I have had a tangential awareness of Logo as this very evidence-based and well-tested pedagogical tool, and having that examined and criticized was very eye-opening. I’ll definitely be seeking out more of "
                            },
                            {
                                "type": "text",
                                "text": "his",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " her research. It’s really got me thinking about how much I have internalized the MIT ethos (had no idea it developed there), and view certain ways of using a computer as legitimate. Thanks for posting it "
                            },
                            {
                                "type": "emoji",
                                "name": "pray",
                                "unicode": "1f64f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFB8STN7K",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT",
                    "U013H18BWU8"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591908329.170400",
        "client_msg_id": "C96BCA30-A4B7-4F4C-8979-B35B29E9C35A",
        "text": "Pharo and Glamorous Toolkit are pretty good. I'm also fond of the approach you see in game engines like Unity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591889749.164700",
        "parent_user_id": "UK500AGQ4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gog",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pharo and Glamorous Toolkit are pretty good. I'm also fond of the approach you see in game engines like Unity."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1591908476.171600",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591908501.000000"
        },
        "client_msg_id": "207A10A2-465E-4633-87BD-99CBD5B46566",
        "text": "Yeah, DEC64 is nice. Wish we had that in JS.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PUE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, DEC64 is nice. Wish we had that in JS."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQPHR6Y3S",
        "type": "message",
        "ts": "1591913315.175800",
        "client_msg_id": "780a7daf-345f-4d34-895a-68ac8c80fad5",
        "text": "<@UFPPABQ7P> this blows my mind, basically exactly what I'm hoping my NN system can do, but applied to code",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6a0cd939e41a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-02\/1706249229922_6a0cd939e41a68326c28_72.jpg",
            "first_name": "noahtren",
            "real_name": "noahtren",
            "display_name": "noahtren",
            "team": "T5TCAFTA9",
            "name": "noahtren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JZUWw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " this blows my mind, basically exactly what I'm hoping my NN system can do, but applied to code"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQPHR6Y3S",
        "type": "message",
        "ts": "1591913399.176000",
        "client_msg_id": "d20d7af6-e588-49e0-859c-f8a4a4303852",
        "text": "awesome to see this because I didn't really have a mental model of what it would look like",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6a0cd939e41a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-02\/1706249229922_6a0cd939e41a68326c28_72.jpg",
            "first_name": "noahtren",
            "real_name": "noahtren",
            "display_name": "noahtren",
            "team": "T5TCAFTA9",
            "name": "noahtren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oPG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome to see this because I didn't really have a mental model of what it would look like"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQPHR6Y3S",
        "type": "message",
        "ts": "1591913965.176200",
        "client_msg_id": "93dcdb5d-d974-4ef7-a679-fcb1750eb4e0",
        "text": "I also like that some symbols are somewhat logographic. a NN definitely wouldn't learn this unless I started with a huge model pretrained on language and images... haha :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6a0cd939e41a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-02\/1706249229922_6a0cd939e41a68326c28_72.jpg",
            "first_name": "noahtren",
            "real_name": "noahtren",
            "display_name": "noahtren",
            "team": "T5TCAFTA9",
            "name": "noahtren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=47i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like that some symbols are somewhat logographic. a NN definitely wouldn't learn this unless I started with a huge model pretrained on language and images... haha "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1591915744.176500",
        "client_msg_id": "48b21361-8a30-46b4-ae60-e31c41698ce5",
        "text": "Konrad is right that this is generally impossible. As soon as you compute 1\/3, it's impossible to represent that exactly in either binary or decimal floating point. However, if you use decimal notation for your floating point inputs, use decimal floating point representation, and restrict your operations to add, subtract and multiply (no division, no exponentials or trigonometry), then I think it could be done. If you extend this system of exact arithmetic to support division, then you need to store a denominator, which means you are using rationals.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dPke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Konrad is right that this is generally impossible. As soon as you compute 1\/3, it's impossible to represent that exactly in either binary or decimal floating point. However, if you use decimal notation for your floating point inputs, use decimal floating point representation, and restrict your operations to add, subtract and multiply (no division, no exponentials or trigonometry), then I think it could be done. If you extend this system of exact arithmetic to support division, then you need to store a denominator, which means you are using rationals."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591928271.176800",
        "client_msg_id": "22601ffb-6a04-4a0f-a776-0885d8e56169",
        "text": "Just to address everyone at once: *I'm sure that I do NOT want a rational number type.* I don't really care about exact division, I just want exact addition and multiplication. For those talking about 0.1 (1\/10) and 1\/3, those are both division operations, and I do not want them to be exact. I probably wasn't clear enough about my stance on division.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5UU6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just to address everyone at once: "
                            },
                            {
                                "type": "text",
                                "text": "I'm sure that I do NOT want a rational number type. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "I don't really care about exact division, I just want exact addition and multiplication. For those talking about 0.1 (1\/10) and 1\/3, those are both division operations, and I do not want them to be exact. I probably wasn't clear enough about my stance on division."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591928338.177000",
        "client_msg_id": "ba65314d-7505-4324-a9b5-a4f16972b599",
        "text": "And a decimal number type doesn't help me out at all, because all it gives you is exact division by 10.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KVHN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And a decimal number type doesn't help me out at all, because all it gives you is exact division by 10."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591928626.177200",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591929032.000000"
        },
        "client_msg_id": "43728f13-8e0f-4173-b1d9-e8eaacab7ae6",
        "text": "<@UJBAJNFLK> I'm not sure what the agreement is on the definition of \"floating-point\", but constant storage size isn't one of my constraints. You can define a broader subset of rationals than IEEE floats: any integer multiplied by any power of two, they're called the dyadic rationals and I guess that's what I'm talking about. I want to see a library for dyadic rational arithmetic.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55MVr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I'm not sure what the agreement is on the definition of \"floating-point\", but constant storage size isn't one of my constraints. You can define a broader subset of rationals than IEEE floats: any integer multiplied by any power of two, they're called the dyadic rationals and I guess that's what I'm talking about. I want to see a library for dyadic rational arithmetic."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591929752.177700",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591929909.000000"
        },
        "client_msg_id": "55eba50a-489b-4ade-ab55-2adfdcf5bc88",
        "text": "The reason I don't care about exact division is that division is relatively uncommon compared to addition and multiplication, and if you start trying to address the uncommon cases you end up going down a rabbit hole where you want exact roots, exponentials, logarithms, and trigonometry. In other words, you want Mathematica. I'm not going that far. I'm happy for division and transcendental functions to be rounded. The key thing I want is *associativity* of addition and multiplication, because my programming language avoids inessential ordering of values (it has no \"default ordering\"). Division isn't associative, so it's fine for it to be inexact.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hZmx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The reason I don't care about exact division is that division is relatively uncommon compared to addition and multiplication, and if you start trying to address the uncommon cases you end up going down a rabbit hole where you want exact roots, exponentials, logarithms, and trigonometry. In other words, you want Mathematica. I'm not going that far. I'm happy for division and transcendental functions to be rounded. The key thing I want is "
                            },
                            {
                                "type": "text",
                                "text": "associativity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of addition and multiplication, because my programming language avoids inessential ordering of values (it has no \"default ordering\"). Division isn't associative, so it's fine for it to be inexact."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591934749.178900",
        "client_msg_id": "dbbd8c3f-a660-4dce-8bdc-d8b32832d38b",
        "text": "Reading from stdin is a \"gotcha\" that isn't going to occur too often in the middle of a large program (e.g. a large GUI app, not a small command line utility). Often the numbers you'll be working with will be pieces of program state, or derivatives thereof. Either way, imagine number_x and number_y are used in a lot of different expressions (they're some key value like the position of a particle). Then we might be able to deduce the following: if number_x and number_y are &lt;= 32 bits, then the calculations they are used within will not overflow a 64-bit register (in the above example they simply need to be &lt;= 63 bits). That's the static analysis. What can we do then? Create a *fast* code path (no size checks, no BigInts, no DRAM access) for the small number case, and a *slow* code path for the big number case. Branch into the correct path based on an initial test of number_x and number_y.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TkCX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reading from stdin is a \"gotcha\" that isn't going to occur too often in the middle of a large program (e.g. a large GUI app, not a small command line utility). Often the numbers you'll be working with will be pieces of program state, or derivatives thereof. Either way, imagine number_x and number_y are used in a lot of different expressions (they're some key value like the position of a particle). Then we might be able to deduce the following: if number_x and number_y are <= 32 bits, then the calculations they are used within will not overflow a 64-bit register (in the above example they simply need to be <= 63 bits). That's the static analysis. What can we do then? Create a "
                            },
                            {
                                "type": "text",
                                "text": "fast",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code path (no size checks, no BigInts, no DRAM access) for the small number case, and a "
                            },
                            {
                                "type": "text",
                                "text": "slow",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code path for the big number case. Branch into the correct path based on an initial test of number_x and number_y."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591934830.179100",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591935010.000000"
        },
        "client_msg_id": "79e817b2-3fa8-4a0e-bbb3-d43d4b469326",
        "text": "I'm not saying this static analysis is going to be super effective, but I can't see any major problems with the idea yet. I'll figure it out when I try to implement it! That will be the distant future, because I'm far more focused on UX in the coming year. A good ALU abstraction is key to a good UX.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hVt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not saying this static analysis is going to be super effective, but I can't see any major problems with the idea yet. I'll figure it out when I try to implement it! That will be the distant future, because I'm far more focused on UX in the coming year. A good ALU abstraction is key to a good UX."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1591940682.179400",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591940990.000000"
        },
        "client_msg_id": "f60eaad4-c739-4147-8f3f-9303bfaf504f",
        "text": "The minute you throw a few IF statements into the mix, static analysis becomes impossible. I don't believe that static analysis could ever work. If you have a mysterious function for which you don't know the result range, then  mystery(3) * 2 becomes unknowable in terms of required bit size.  For a vast number of applications, double precision floating point has proven adequate, which is why it is the main numeric type used in JS and AS3.   A long time ago FLOAT64 was so slow (100x slower than integer) one would go to great lengths to avoid it, but IBM and Intel cracked the code on fast floating point, and now you don't even think about it. I think Motorola's inability to build a fast floating point unit may have been a factor in Apple ditching Motorola for PowerPC.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iU9S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The minute you throw a few IF statements into the mix, static analysis becomes impossible. I don't believe that static analysis could ever work. If you have a mysterious function for which you don't know the result range, then  mystery(3) * 2 becomes unknowable in terms of required bit size.  For a vast number of applications, double precision floating point has proven adequate, which is why it is the main numeric type used in JS and AS3.   A long time ago FLOAT64 was so slow (100x slower than integer) one would go to great lengths to avoid it, but IBM and Intel cracked the code on fast floating point, and now you don't even think about it. I think Motorola's inability to build a fast floating point unit may have been a factor in Apple ditching Motorola for PowerPC."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591940889.179600",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591940950.000000"
        },
        "client_msg_id": "11add7bf-5c15-4050-a2b5-afc39a821a7a",
        "text": "I'm only envisioning the analysis working locally. The goal is to avoid checks on every single arithmetic operation. What is this \"mystery\" function you're thinking of? It's going to consist of primitive operations like add and multiply.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "27o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm only envisioning the analysis working locally. The goal is to avoid checks on every single arithmetic operation. What is this \"mystery\" function you're thinking of? It's going to consist of primitive operations like add and multiply."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1591941255.180000",
        "client_msg_id": "52e0837c-72fd-4ab5-928c-52cd30afd214",
        "text": "The topic of symbolic computation makes me miss my TI-89",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NIqeh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The topic of symbolic computation makes me miss my TI-89"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1591941261.180200",
        "client_msg_id": "8d0569a7-6356-42a2-93e9-37fb70ce1c6d",
        "text": "Even local branches will create a combinatorial nightmare for your analysis. And if it is inside a while() loop, how do you know how many times it will execute? Every one who has ever done this has done runtime checks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xCg43",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even local branches will create a combinatorial nightmare for your analysis. And if it is inside a while() loop, how do you know how many times it will execute? Every one who has ever done this has done runtime checks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591941429.180400",
        "client_msg_id": "1b69afee-a408-4efe-9afa-f44a1067fdc9",
        "text": "Well, it won't be inside a while-loop because my language doesn't have those! Nor does it have general recursion. I'm introducing repetition capabilities VERY carefully. My theoretical foundation is Datalog, which is far more amenable to static analysis.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D2L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, it won't be inside a while-loop because my language doesn't have those! Nor does it have general recursion. I'm introducing repetition capabilities VERY carefully. My theoretical foundation is Datalog, which is far more amenable to static analysis."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591941507.180600",
        "client_msg_id": "231fb24b-a22b-438f-8066-f8b4eb4d0db6",
        "text": "I'll probably be including escape hatches where \"anything goes\", but I'm yet to see how prevalent those will need to be. I think they'll be limited to low-level libraries.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SbyG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll probably be including escape hatches where \"anything goes\", but I'm yet to see how prevalent those will need to be. I think they'll be limited to low-level libraries."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591941581.180800",
        "client_msg_id": "814ae09b-a1e2-42ab-beec-b9525f73e39c",
        "text": "And coincidentally, Datalog is itself a good language for implementing a static analyzer, so I'll probably have high-quality static analysis at my fingertips.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb12",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And coincidentally, Datalog is itself a good language for implementing a static analyzer, so I'll probably have high-quality static analysis at my fingertips."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1591941620.181000",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591941666.000000"
        },
        "client_msg_id": "63f49028-dd77-405e-985b-504333d549ff",
        "text": "Mathematica lets you request a desired precision for the results. Also, the Intel 8087 subunit  which is inside every Intel compatible chip for over 20 years has operations that do everything in 80 bits precision, and is then downconverting to 64 bits after you run a long sequence of operations and store the result into a double precision result. In this way they avoid rounding errors from creeping in. It is extremely clever and although not amenable to parallel operation, is still the preferred way to do floating point in the intel world because it doesn't accumulate error like everyone else's 64 bit arithmetic operations, which accumulate error rather quickly. 80 bits is 10 bytes, and there are even BCD instructions in the 8087 unit which i have occasionally used. They are nearly forgotten nowadays as no higher level language i know of lets you access them, you have to write in Assembler. A tiny bit of assembler can ofttimes do some very clever things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hFt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mathematica lets you request a desired precision for the results. Also, the Intel 8087 subunit  which is inside every Intel compatible chip for over 20 years has operations that do everything in 80 bits precision, and is then downconverting to 64 bits after you run a long sequence of operations and store the result into a double precision result. In this way they avoid rounding errors from creeping in. It is extremely clever and although not amenable to parallel operation, is still the preferred way to do floating point in the intel world because it doesn't accumulate error like everyone else's 64 bit arithmetic operations, which accumulate error rather quickly. 80 bits is 10 bytes, and there are even BCD instructions in the 8087 unit which i have occasionally used. They are nearly forgotten nowadays as no higher level language i know of lets you access them, you have to write in Assembler. A tiny bit of assembler can ofttimes do some very clever things."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1591941728.181300",
        "client_msg_id": "003a4035-05ba-4896-b303-8bc579b4a007",
        "text": "But that still doesn't enable associative addition and multiplication :confused: I'm looking for conceptual simplicity. Users of my programming environment should have addition and multiplication that \"just work\", no strings attached, no land mines, no cognitive overhead.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QbxrN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But that still doesn't enable associative addition and multiplication "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            },
                            {
                                "type": "text",
                                "text": " I'm looking for conceptual simplicity. Users of my programming environment should have addition and multiplication that \"just work\", no strings attached, no land mines, no cognitive overhead."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1591941950.181500",
        "client_msg_id": "7ac08b12-c11e-40ee-bc0c-806722026f6f",
        "text": "That's also an accurate description of my project:\n\n<https:\/\/github.com\/d-cook\/Interact|https:\/\/github.com\/d-cook\/Interact>\n\nI also intend for this system to expose its own code through its own UI (including the code for the UI, etc.). This way the whole thing is 100% moldable at any level.\n\nThe description is out of date (but not far off). I've also used the \"Issues\" as a dump of all the different approaches I might take with it. I've not had time to work on it in ages, but still plan on finishing it someday.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1591889749.164700",
        "parent_user_id": "UK500AGQ4",
        "attachments": [
            {
                "fallback": "d-cook\/Interact",
                "text": "A tool for programming by interaction instead by coding",
                "title": "d-cook\/Interact",
                "footer": "<https:\/\/github.com\/d-cook\/Interact|d-cook\/Interact>",
                "id": 1,
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "ts": 1533619469,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "10",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "JavaScript",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/d-cook\/Interact",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l\/wNT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's also an accurate description of my project:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/d-cook\/Interact",
                                "text": "https:\/\/github.com\/d-cook\/Interact"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI also intend for this system to expose its own code through its own UI (including the code for the UI, etc.). This way the whole thing is 100% moldable at any level.\n\nThe description is out of date (but not far off). I've also used the \"Issues\" as a dump of all the different approaches I might take with it. I've not had time to work on it in ages, but still plan on finishing it someday."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]