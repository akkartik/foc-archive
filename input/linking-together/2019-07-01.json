[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1561966417.132800",
        "client_msg_id": "b96daf11-4006-4885-8710-16b7bcb3193f",
        "text": "Prof. Wirth wrote a code generator for one of his computer projects, and he write one for the National 32000, the Motorola 68000 and the Intel 386, and because the National chip was the most regular instruction set it was the simplest and smallest code, followed by the Motorola, and then the absolute worst was the Intel. And yes, just as one might predict, the Intel was by far the most popular chip, followed by the Motorola, and the National chip died out quickly. It is one of the more perverse things about computer industry that the simplest and best solution usually fails in the marketplace, because underlying our industry is the normal human desire for job protection and increasing billable hours. Hence the most irregular funky instruction set dominates, and the clean simple as can be stuff bombs out. You can see it where the really terrific MULTICS OS gets wiped out by the a monstrosity like OS\/360, or COBOL beats the pants of FORTRAN. Or how Java got picked as the enterprise language of choice when it is one of the worst languages ever devised, a build-once, debug-everywhere hunk of junk (IMHO).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561724860.126100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MxvtH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Prof. Wirth wrote a code generator for one of his computer projects, and he write one for the National 32000, the Motorola 68000 and the Intel 386, and because the National chip was the most regular instruction set it was the simplest and smallest code, followed by the Motorola, and then the absolute worst was the Intel. And yes, just as one might predict, the Intel was by far the most popular chip, followed by the Motorola, and the National chip died out quickly. It is one of the more perverse things about computer industry that the simplest and best solution usually fails in the marketplace, because underlying our industry is the normal human desire for job protection and increasing billable hours. Hence the most irregular funky instruction set dominates, and the clean simple as can be stuff bombs out. You can see it where the really terrific MULTICS OS gets wiped out by the a monstrosity like OS\/360, or COBOL beats the pants of FORTRAN. Or how Java got picked as the enterprise language of choice when it is one of the worst languages ever devised, a build-once, debug-everywhere hunk of junk (IMHO)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1561966766.133000",
        "client_msg_id": "54dd90eb-3ab5-46a6-820a-9afd8c722679",
        "text": "I never learned the National chip, but the Moto 68,000 was a great chip, far superior to the intel architecture. Very easy to learn, with a nice macro assembler. The 6502 is very old, I don't think its assembler was particularly great, but the original Apple BIOS which Wozniak wrote is the work of genius and a testimony to how good a programmer he was. Back in the 6502 days you could poke a byte into a fixed memory location and draw on the screen. That was character graphics of course, but it had some box drawing characters, and i am telling you that the productivity on that Apple 2 was stupendous for programmers. It takes about a million lines of code to draw a letter on a bitmap screen nowadays with all the stuff under the hood. The Z80 is still used today, that is a very simple 8 bit chip.  The microsoft assembler as far as assemblers go is super fantastic. it has IF \/ THEN \/ ELSE, all sorts of macros that elevate it far above what you might expect.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1561724860.126100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R+6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I never learned the National chip, but the Moto 68,000 was a great chip, far superior to the intel architecture. Very easy to learn, with a nice macro assembler. The 6502 is very old, I don't think its assembler was particularly great, but the original Apple BIOS which Wozniak wrote is the work of genius and a testimony to how good a programmer he was. Back in the 6502 days you could poke a byte into a fixed memory location and draw on the screen. That was character graphics of course, but it had some box drawing characters, and i am telling you that the productivity on that Apple 2 was stupendous for programmers. It takes about a million lines of code to draw a letter on a bitmap screen nowadays with all the stuff under the hood. The Z80 is still used today, that is a very simple 8 bit chip.  The microsoft assembler as far as assemblers go is super fantastic. it has IF \/ THEN \/ ELSE, all sorts of macros that elevate it far above what you might expect."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1562010026.133300",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1562010082.000000"
        },
        "client_msg_id": "5785d6bb-6fc2-4fae-aa90-1168ea4c398b",
        "text": "<https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854>\n\nBlurb titled \"What I want from a Type System\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "reply_count": 16,
        "reply_users_count": 5,
        "latest_reply": "1562599921.205100",
        "reply_users": [
            "UCUSW7WVD",
            "U8A5MS6R1",
            "UF71PR58X",
            "UBSMEUXAA",
            "U5STGTB3J"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1562010133.133900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1562011783.134300"
            },
            {
                "user": "UF71PR58X",
                "ts": "1562012903.134600"
            },
            {
                "user": "UF71PR58X",
                "ts": "1562012927.134800"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1562019004.135000"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1562019014.135200"
            },
            {
                "user": "UBSMEUXAA",
                "ts": "1562019041.135400"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562040441.135700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1562172230.184100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1562172714.184400"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1562173299.184600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562181908.185100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562272967.192800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562285680.193100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1562306653.193700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1562599921.205100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IRkM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/halgari\/f431b2d1094e4ec1e933969969489854"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBlurb titled \"What I want from a Type System\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1562010133.133900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1562011857.000000"
        },
        "client_msg_id": "84400598-5a7d-4a49-a0e6-0229016d961c",
        "text": "I was reading this as well, felt related to the Dark thread on <#CCL5VVBAN|share-your-work> (<https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1561573844118300>) which has veered away from the OP somewhat.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1561573844118300",
                "fallback": "[June 26th, 2019 11:30 AM] pbiggar: Hey folks, I wrote another post about Dark, would love to hear people’s thoughts! <https:\/\/medium.com\/darklang\/real-problems-with-functional-languages-efe668c5264a>",
                "ts": "1561573844.118300",
                "author_id": "U6BRN7A0Y",
                "author_subname": "Paul Biggar",
                "channel_id": "CCL5VVBAN",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Hey folks, I wrote another post about Dark, would love to hear people’s thoughts! <https:\/\/medium.com\/darklang\/real-problems-with-functional-languages-efe668c5264a>",
                "author_name": "Paul Biggar",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U6BRN7A0Y",
                "author_icon": "https:\/\/secure.gravatar.com\/avatar\/eee6ec3be3e3176ff1e1119301630812.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2F00b63%2Fimg%2Favatars%2Fava_0010-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1561573844118300",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QTU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was reading this as well, felt related to the Dark thread on "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1561573844118300"
                            },
                            {
                                "type": "text",
                                "text": ") which has veered away from the OP somewhat."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1562011783.134300",
        "client_msg_id": "ca1472a3-2344-4fa1-968f-fe7d909694c5",
        "text": "One aspect I'm interested is in if any type systems  encourage\/require extensive 'column types'. What I mean is typically you have this\n```\nclass Person:\n   name: string\n```\n\nNow as soon as you deference `person.name` you've lost all context - you just have a string.  Would be nice to have more meaning attached to the values themselves. You can kind of solve this by newtype\/aliasing but it's very clunky and may require defining both a new type *and* the field with the same name.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sc1Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One aspect I'm interested is in if any type systems  encourage\/require extensive 'column types'. What I mean is typically you have this"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class Person:\n   name: string\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNow as soon as you deference "
                            },
                            {
                                "type": "text",
                                "text": "person.name",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you've lost all context - you just have a string.  Would be nice to have more meaning attached to the values themselves. You can kind of solve this by newtype\/aliasing but it's very clunky and may require defining both a new type "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the field with the same name."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFV8P4472",
                    "U7C7B75R6",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1562012903.134600",
        "client_msg_id": "6bf19224-c884-49f6-ae20-1bdc135dee9e",
        "text": "The way that shapeless models records in Scala is to represent a field `name: SomeType` as an element of an `HList` with the type `Tagged[SomeType, \"name\"]` where the \"name\" is a _literal type_, ie. the singleton type of the String precisely equal to \"name\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hlsl7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way that shapeless models records in Scala is to represent a field "
                            },
                            {
                                "type": "text",
                                "text": "name: SomeType",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as an element of an "
                            },
                            {
                                "type": "text",
                                "text": "HList",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with the type "
                            },
                            {
                                "type": "text",
                                "text": "Tagged[SomeType, \"name\"]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where the \"name\" is a "
                            },
                            {
                                "type": "text",
                                "text": "literal type",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", ie. the singleton type of the String precisely equal to \"name\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UF71PR58X",
        "type": "message",
        "ts": "1562012927.134800",
        "client_msg_id": "4e889a7d-5b5f-4e0d-b08a-9069ef19f82f",
        "text": "Is that what you're looking for, or are you after more structure?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga7e159fad28",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a7e159fad28f672ca794fb7f2bf7f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "",
            "real_name": "Miles Sabin",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "miles",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SLJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is that what you're looking for, or are you after more structure?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1562019004.135000",
        "client_msg_id": "daa429ed-ebdf-4a6b-99a9-af1004e7fb88",
        "text": "\"2) Value types in structures would need to be nominal, not structural. I really don't care if I get a tuple of\n[Int32, String], I very rarely care what the machine level types are, what I really want is [ProductID, ProductName],\nwhat the underlying types are doesn't really matter to me.\" :sob:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0PDc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"2) Value types in structures would need to be nominal, not structural. I really don't care if I get a tuple of\n[Int32, String], I very rarely care what the machine level types are, what I really want is [ProductID, ProductName],\nwhat the underlying types are doesn't really matter to me.\" "
                            },
                            {
                                "type": "emoji",
                                "name": "sob",
                                "unicode": "1f62d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1562019014.135200",
        "client_msg_id": "77165f01-af5a-46b4-aa30-f20a02ded54e",
        "text": "I think this is fine in certain applications and certain domains",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ypb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think this is fine in certain applications and certain domains"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1562019041.135400",
        "client_msg_id": "98d26119-6c48-43e7-a789-4b8ac61f3fd3",
        "text": "but in other applications you absolutely need to care about the machine level types in order to hit performance or memory targets",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GpX5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but in other applications you absolutely need to care about the machine level types in order to hit performance or memory targets"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1562040441.135700",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1562040474.000000"
        },
        "client_msg_id": "08cfe289-6c7b-4b13-838b-e03a134ac1f3",
        "text": "&gt; Value types in structures would need to be nominal, not structural. I really don't care if I get a tuple of `[Int32, String]`, I very rarely care what the machine level types are, what I really want is `[ProductID, ProductName]`, what the underlying types are doesn't really matter to me.\n\nThe article is using nominal vs structural in a way that I can sympathize with but haven't seen before. Is `int32` a nominal type because you (often) can't cast it to a boolean? Or is it a structural type because you can use the same operations on it as `int64`? Our categories seem to break down at the event horizon of primitive types.\n\nBetween this and Rich Hickey's recent critique [1], I feel like I'm seeing the word 'types' with new eyes in 2019.\n\n[1] <https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1562010026.133300",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Maybe Not - Rich Hickey",
                "title_link": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug",
                "author_name": "ClojureTV",
                "author_link": "https:\/\/www.youtube.com\/user\/ClojureTV",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/YR5WdGrpoug\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Maybe Not - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/YR5WdGrpoug?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gb9",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Value types in structures would need to be nominal, not structural. I really don't care if I get a tuple of "
                            },
                            {
                                "type": "text",
                                "text": "[Int32, String]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I very rarely care what the machine level types are, what I really want is "
                            },
                            {
                                "type": "text",
                                "text": "[ProductID, ProductName]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", what the underlying types are doesn't really matter to me."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe article is using nominal vs structural in a way that I can sympathize with but haven't seen before. Is "
                            },
                            {
                                "type": "text",
                                "text": "int32",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a nominal type because you (often) can't cast it to a boolean? Or is it a structural type because you can use the same operations on it as "
                            },
                            {
                                "type": "text",
                                "text": "int64",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Our categories seem to break down at the event horizon of primitive types.\n\nBetween this and Rich Hickey's recent critique [1], I feel like I'm seeing the word 'types' with new eyes in 2019.\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=YR5WdGrpoug"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UHWC9PXBL",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    }
]