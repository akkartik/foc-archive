[
    {
        "user": "U0296ACR13M",
        "type": "message",
        "ts": "1724834552.079969",
        "client_msg_id": "1da7e492-7de4-425b-84f2-7d1ff0f6ad90",
        "text": "I have been thinking about creating one with <https:\/\/levlo.com>, but not sure who would use it and for what reason.. Did you have an use-case in mind?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "59de929720a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-09-08\/4075674207584_59de929720a2fe0a13d8_72.jpg",
            "first_name": "",
            "real_name": "Jarno Montonen",
            "display_name": "Jarno Montonen",
            "team": "T5TCAFTA9",
            "name": "jarno.montonen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G2dov",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been thinking about creating one with "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/levlo.com"
                            },
                            {
                                "type": "text",
                                "text": ", but not sure who would use it and for what reason.. Did you have an use-case in mind?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UP28ETUSE",
        "type": "message",
        "ts": "1724835540.036889",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1724835546.000000"
        },
        "client_msg_id": "2208866e-d786-41ee-a7a4-92f769233802",
        "text": "I've recently come across Query by Example (QBE), which seems related to what you're asking? <https:\/\/en.m.wikipedia.org\/wiki\/Query_by_Example>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7cefc64f7b1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7cefc64f7b1b53513625bf3487ecd16d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Ionuț",
            "real_name": "Ionuț G. Stan",
            "display_name": "Ionuț G. Stan",
            "team": "T5TCAFTA9",
            "name": "ionut.g.stan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8a\/Requ%C3%AAte_QBE_dans_Paradox.jpg",
                "image_width": 556,
                "image_height": 334,
                "image_bytes": 44433,
                "from_url": "https:\/\/en.m.wikipedia.org\/wiki\/Query_by_Example",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.m.wikipedia.org\/wiki\/Query_by_Example",
                "fallback": "wikipedia: Query by Example",
                "text": "Query by Example (QBE) is a database query language for relational databases. It was devised by Moshé M. Zloof at IBM Research during the mid-1970s, in parallel to the development of SQL. It is the first graphical query language, using visual tables where the user would enter commands, example elements and conditions. Many graphical front-ends for databases use the ideas from QBE today. Originally limited only for the purpose of retrieving data, QBE was later extended to allow other operations, such as inserts, deletes and updates, as well as creation of temporary tables.\nThe motivation behind QBE is that a parser can convert the user's actions into statements expressed in a database manipulation language, such as SQL.  Behind the scenes, it is this statement that is actually executed. A suitably comprehensive front-end can minimize the burden on the user to remember the finer details of SQL, and it is easier and more productive for end-users (and even programmers) to select tables and columns by selecting them rather than typing in their names.\nIn the context of information retrieval, QBE has a somewhat different meaning. The user can submit a document, or several documents, and ask for \"similar\" documents to be retrieved from a document database [see search by multiple examples]. Similarity search is based comparing document vectors (see Vector Space Model).\nQBE represents seminal work in end-user development, frequently cited in research papers as an early example of this topic.\nCurrently, QBE is supported in several relational database front ends, notably Microsoft Access, which implements \"Visual Query by Example\", as well as Microsoft SQL Server Enterprise Manager. It is also implemented in several object-oriented databases (e.g. in db4o).\nQBE is based on the logical formalism called tableau query, although QBE adds some extensions to that, much like SQL is based on the relational algebra.",
                "title": "Query by Example",
                "title_link": "https:\/\/en.m.wikipedia.org\/wiki\/Query_by_Example",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s66yl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've recently come across Query by Example (QBE), which seems related to what you're asking? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Query_by_Example"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724835855.463379",
        "client_msg_id": "d726e6bc-690d-4b64-9dcf-ed645ae7ebf7",
        "text": "I am unaware of such UIs, but, I have fooled around with slapping little DSLs together that combine Prolog and JS together in a markdown-inspired syntax using a bash script. An example of live code that I used:\n\n```# connection\n## parameters\n  Parent\n  Edge\n  Sender\n  Receiver\n## imports\n  shapes\n  names\n  connection\n## query\n  das_fact(kind,Edge,edge)\n  sourceof(Edge,Sender)\n  targetof(Edge,Receiver)\n  das_fact(direct_contains,Parent,Edge)\n## display\ndas_fact(connection, ${Parent}, ${Edge}).\ndas_fact(sender, ${Edge}, sender{component:\"${Sender.component}\",port:\"${Sender.port}\"}).\ndas_fact(receiver, ${Edge}, receiver{component:\"${Receiver.component}\",port:\"${Receiver.port}\"}).```\nWhy markdown? Because emacs then lets me collapse each section and imagine that these are layers.\n[I would be glad to explain further, if this is of interest]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bIBc7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am unaware of such UIs, but, I have fooled around with slapping little DSLs together that combine Prolog and JS together in a markdown-inspired syntax using a bash script. An example of live code that I used:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# connection\n## parameters\n  Parent\n  Edge\n  Sender\n  Receiver\n## imports\n  shapes\n  names\n  connection\n## query\n  das_fact(kind,Edge,edge)\n  sourceof(Edge,Sender)\n  targetof(Edge,Receiver)\n  das_fact(direct_contains,Parent,Edge)\n## display\ndas_fact(connection, ${Parent}, ${Edge}).\ndas_fact(sender, ${Edge}, sender{component:\"${Sender.component}\",port:\"${Sender.port}\"}).\ndas_fact(receiver, ${Edge}, receiver{component:\"${Receiver.component}\",port:\"${Receiver.port}\"})."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why markdown? Because emacs then lets me collapse each section and imagine that these are layers.\n[I would be glad to explain further, if this is of interest]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05PY5AQCA2",
        "type": "message",
        "ts": "1724861978.355539",
        "client_msg_id": "607DE5DB-8D27-403F-9498-D33287C84E7D",
        "text": "I very much have a use case in mind: <https:\/\/frest.substack.com\/p\/what-is-frest|https:\/\/frest.substack.com\/p\/what-is-frest>\n\nAlso, it just occurred to me that dataflow graph without loops is a really nice sort of construction. It would be a great way to present say a non-recursive Datalog query, or many other sorts of logic, in a manner that is friendly to non-programmers.\n\nEven without the graphical presentation, a friendly presentation of the non-recursive part of Datalog would be cool.\n\nBut then, you can make it recursive, and present that in a stepwise fashion. Stepping between the same, or other, sets of pattern matches and conditions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "3ecb3076c7b0",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-08-29\/5820723719363_3ecb3076c7b047d665ea_72.jpg",
            "first_name": "Guyren",
            "real_name": "Guyren Howe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "guyren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724823323.121549",
        "parent_user_id": "U05PY5AQCA2",
        "attachments": [
            {
                "image_url": "https:\/\/substackcdn.com\/image\/fetch\/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5fd9d106-47e9-4c50-a15f-707b11ec91ae_550x550.png",
                "image_width": 550,
                "image_height": 550,
                "image_bytes": 15258,
                "from_url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "service_icon": "https:\/\/substackcdn.com\/image\/fetch\/f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5d74e329-6c40-4882-92d4-c2176a0ffceb%2Fapple-touch-icon-57x57.png",
                "id": 1,
                "original_url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "fallback": "What is FREST?",
                "text": "FREST is simpler computing for ordinary folks and programmers alike.",
                "title": "What is FREST?",
                "title_link": "https:\/\/frest.substack.com\/p\/what-is-frest",
                "service_name": "frest.substack.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cdGIQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I very much have a use case in mind: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/frest.substack.com\/p\/what-is-frest",
                                "text": "https:\/\/frest.substack.com\/p\/what-is-frest"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso, it just occurred to me that dataflow graph without loops is a really nice sort of construction. It would be a great way to present say a non-recursive Datalog query, or many other sorts of logic, in a manner that is friendly to non-programmers.\n\nEven without the graphical presentation, a friendly presentation of the non-recursive part of Datalog would be cool.\n\nBut then, you can make it recursive, and present that in a stepwise fashion. Stepping between the same, or other, sets of pattern matches and conditions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "I’m trying to figure out why you (<@UC2A2ARPT>) think that using OhmJS to produce the wiki would create a dependency, while I (<@UGWUJUZHT>) don’t think so.  Here’s a diagram of how I understand the situation...",
        "files": [
            {
                "id": "F07JYNX5FFU",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rf7p7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m trying to figure out why you ("
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ") think that using OhmJS to produce the wiki would create a dependency, while I ("
                            },
                            {
                                "type": "user",
                                "user_id": "UGWUJUZHT"
                            },
                            {
                                "type": "text",
                                "text": ") don’t think so.  Here’s a diagram of how I understand the situation..."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1724871289.168219",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1724873749.000000"
        },
        "client_msg_id": "996c1aa0-0838-4f7e-a4f0-da363116edc7",
        "thread_ts": "1724871289.168219",
        "reply_count": 11,
        "reply_users_count": 3,
        "latest_reply": "1725861460.748769",
        "reply_users": [
            "UJBAJNFLK",
            "UGWUJUZHT",
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UJBAJNFLK",
                "ts": "1724911421.182709"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1724911676.621719"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1724912111.871079"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1724926070.022919"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1724932909.709209"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1724935164.231319"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1725121374.752729"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1725709936.778099"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1725782454.239199"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1725787765.272889"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1725861460.748769"
            }
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1724871397.593629",
        "client_msg_id": "5ab4eb24-a63c-489b-a2c7-14ae9b25fc49",
        "text": "(by \"a bunch of these\" I mean 1 for Python, 1 for JS, 1 for WASM, 1 for ???, etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zkV6\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(by \"a bunch of these\" I mean 1 for Python, 1 for JS, 1 for WASM, 1 for ???, etc.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07JX69S6AC",
        "type": "message",
        "ts": "1724905027.363729",
        "edited": {
            "user": "U07JX69S6AC",
            "ts": "1724922060.000000"
        },
        "client_msg_id": "fb2fa9e9-48af-4eae-8dc2-1ed58bf1eb18",
        "text": "A huge number of languages are compiled into binary code.\n\nWhy solutions for binary code optimization didn't become so popular as LLVM and GCC?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e604418942e4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-08-23\/7613794805078_e604418942e4bd97368a_72.jpg",
            "first_name": "Yuriy",
            "real_name": "Yuriy Zymlex",
            "display_name": "Yuriy Zymlex",
            "team": "T5TCAFTA9",
            "name": "zymlex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724905027.363729",
        "reply_count": 13,
        "reply_users_count": 3,
        "latest_reply": "1724939318.569759",
        "reply_users": [
            "U07JX69S6AC",
            "UBN9AFS0N",
            "U04Q53X6P7W"
        ],
        "replies": [
            {
                "user": "U07JX69S6AC",
                "ts": "1724905032.993049"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724917510.200469"
            },
            {
                "user": "U07JX69S6AC",
                "ts": "1724922047.748569"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724922128.436739"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724922196.341639"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724922287.845129"
            },
            {
                "user": "U07JX69S6AC",
                "ts": "1724924766.270129"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724924853.366309"
            },
            {
                "user": "U07JX69S6AC",
                "ts": "1724924991.922639"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724925058.266809"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724925092.232779"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1724925121.559779"
            },
            {
                "user": "U04Q53X6P7W",
                "ts": "1724939318.569759"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "chsXf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A huge number of languages are compiled into binary code.\n\nWhy solutions for binary code optimization didn't become so popular as LLVM and GCC?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07JX69S6AC",
        "type": "message",
        "ts": "1724905032.993049",
        "edited": {
            "user": "U07JX69S6AC",
            "ts": "1724905095.000000"
        },
        "client_msg_id": "590b692f-2668-43d4-b52a-fc6f06ea6dfc",
        "text": "The first thing that comes to mind is that each platform requires a different optimizer, but the optimization logic can be shared in some places.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e604418942e4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-08-23\/7613794805078_e604418942e4bd97368a_72.jpg",
            "first_name": "Yuriy",
            "real_name": "Yuriy Zymlex",
            "display_name": "Yuriy Zymlex",
            "team": "T5TCAFTA9",
            "name": "zymlex",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724905027.363729",
        "parent_user_id": "U07JX69S6AC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j53Bg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The first thing that comes to mind is that each platform requires a different optimizer, but the optimization logic can be shared in some places."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724911421.182709",
        "client_msg_id": "8300944c-f587-4103-89a3-95fdcb8f47a9",
        "text": "In such discussions, always make the distinction between runtime dependencies and build dependencies. Basic example: for a C program, gcc (or whatever other compiler) is a build dependency: you need it to create a binary, but then you can throw it away. But glibc (under Linux) is a runtime dependency: you must have it to run the compiled C program.\n\nIn your diagram, OhmJS is a build dependency for tonedown.py.\n\nThe main insight behind the latest generation of package managers (Nix, Guix) is that build dependencies matter just as much as runtime dependencies for auditable and reproducible provenance tracking. In your example, any change to the specs requires rebuilding tonedown.py, so OhmJS is an important dependency, even if it is not required every time someone changes a Wiki page.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5evrm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In such discussions, always make the distinction between runtime dependencies and build dependencies. Basic example: for a C program, gcc (or whatever other compiler) is a build dependency: you need it to create a binary, but then you can throw it away. But glibc (under Linux) is a runtime dependency: you must have it to run the compiled C program.\n\nIn your diagram, OhmJS is a build dependency for tonedown.py.\n\nThe main insight behind the latest generation of package managers (Nix, Guix) is that build dependencies matter just as much as runtime dependencies for auditable and reproducible provenance tracking. In your example, any change to the specs requires rebuilding tonedown.py, so OhmJS is an important dependency, even if it is not required every time someone changes a Wiki page."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724911676.621719",
        "client_msg_id": "ffa6e8b9-2411-4cf5-b27b-b6b3bd022587",
        "text": "Of course, that also holds for programming languages, which <@UC2A2ARPT> tried to play down yesterday. Compilers and interpreters can be nasty dependencies. Bugs and backwards-incompatible changes in them are a real pain. As an example, I see computational scientists slowly moving away from their pet language, Python, because they are fed up with the slow but steady stream of compatibility-breaking changes (in the interpreter and the foundational libraries) that make their complex programs return somewhat different results with each new version.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CNfU6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, that also holds for programming languages, which "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " tried to play down yesterday. Compilers and interpreters can be nasty dependencies. Bugs and backwards-incompatible changes in them are a real pain. As an example, I see computational scientists slowly moving away from their pet language, Python, because they are fed up with the slow but steady stream of compatibility-breaking changes (in the interpreter and the foundational libraries) that make their complex programs return somewhat different results with each new version."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U05UK5T7LPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1724912111.871079",
        "client_msg_id": "9ea2af7d-01c9-47f8-b549-ff11328a5cd1",
        "text": "So far for theory. In practice, some dependencies are more acceptable than others for pragmatic reasons. A C compiler is rarely critical: they tend to be stable, and there are lots of them. Stick to standard C and you can expect little trouble. Same for other standardized languages with multiple implementations (C++, Fortran, Common Lisp, ECMAScript ...).\n\nNext are languages with only one major implementation, but backed by a team\/community focused on stability. That covers Java, Clojure, and Lua, and possibly Ruby (which I don't know well).\n\nOther uncritical dependencies are small convenience utilities that you could maintain yourself, or even rewrite if necessary.\n\nThere's of course another cost to dependencies: the cognitive effort for learning how to use them correctly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724871289.168219",
        "parent_user_id": "UGWUJUZHT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "njVEq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So far for theory. In practice, some dependencies are more acceptable than others for pragmatic reasons. A C compiler is rarely critical: they tend to be stable, and there are lots of them. Stick to standard C and you can expect little trouble. Same for other standardized languages with multiple implementations (C++, Fortran, Common Lisp, ECMAScript ...).\n\nNext are languages with only one major implementation, but backed by a team\/community focused on stability. That covers Java, Clojure, and Lua, and possibly Ruby (which I don't know well).\n\nOther uncritical dependencies are small convenience utilities that you could maintain yourself, or even rewrite if necessary.\n\nThere's of course another cost to dependencies: the cognitive effort for learning how to use them correctly."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]