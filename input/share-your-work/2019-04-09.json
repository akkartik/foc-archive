[
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1554856834.014200",
        "client_msg_id": "B9DE3D1F-CC7C-4A5D-864F-B3938146F4CC",
        "text": "Hey guys! I wrote my first essay about the field in a while and would love you feedback on what primitives you think come next :) cheers \n\n<https:\/\/medium.com\/p\/the-next-primitives-of-dev-tools-820775bc1961?source=email-bbc16443a639--writer.postDistributed&amp;sk=471911bb74cb7a776f2190e630fe503d>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554856834.014200",
        "reply_count": 8,
        "reply_users_count": 2,
        "latest_reply": "1555594923.027000",
        "reply_users": [
            "UD6EXQVM0",
            "U85MWBKEY"
        ],
        "replies": [
            {
                "user": "UD6EXQVM0",
                "ts": "1555338281.003500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555338343.003700"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555338595.003900"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555338784.004100"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555339030.004300"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555339725.004800"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1555534516.018500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1555594923.027000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ywb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey guys! I wrote my first essay about the field in a while and would love you feedback on what primitives you think come next :) cheers \n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/medium.com\/p\/the-next-primitives-of-dev-tools-820775bc1961?source=email-bbc16443a639--writer.postDistributed&amp;sk=471911bb74cb7a776f2190e630fe503d",
                                "text": "https:\/\/medium.com\/p\/the-next-primitives-of-dev-tools-820775bc1961?source=email-bbc16443a639--writer.postDistributed&sk=471911bb74cb7a776f2190e630fe503d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1554868518.025300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1555630872.000000"
        },
        "client_msg_id": "e8f2759d-429b-4ef4-89c5-ab46008e1895",
        "text": "You mention some of the tools\/techniques that have been used, but it would have been more complete and accurate if you started with the first debugging tool after tracing was the crash dump, then checkpoint\/restart appeared, then breakpoint debugging, then postmortem debugging (Modula-2, via the Logitech Multiscope debugger was the first commercial tool to offer this, where you could see all the data structures and stack trace on a crashed program from a customer), then omniscient debugging which is creeping into tools, which has been popping in and out of view for the last 15 years with greater frequency.\n\nThe exact origin of each of these tools and techniques can always be debated, but there is a clearly in our history a progression towards greater information, and omniscient debugging, (which includes time traveling features, plus data structure visualizations) are definitely going to be common in the future.\n\nI disagree that Docker is some kind of progress. It is merely a patch over the atrocious lack of integrity checking in the archaic dynamic linking methodology of Unix, which is 50 years old, and long past expiration date. Because you can break things terribly with a new version of a shared library, Docker creates a half-assed virtual machine that lets two program needing different versions of shared libraries run at the same time on a machine. The fact that the version conflicts exist, and that old versions of a library are not updated (leaving security holes galore) cannot be considered an acceptable long term solution.\n\nAnd if i can put on my grump-meister helmet, i frankly think that API's are the main evil of today's programming world, and must be eliminated. The future is a  world of interchangeable parts, not tens of thousands of API's, which have to be called in some specific order, and have mysterious interactions.\n\nAnd version control systems which lets people break stuff constantly as they do in many open source projects have to evolve so that breakage is less common. The sad truth is that all the open source projects don't seem to have any external or built-in QA, so the code oscillates badly, with a good vintage of a project hard to pin down.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554868518.025300",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1555196473.000400",
        "reply_users": [
            "U85MWBKEY",
            "UC21F8Q48",
            "UEQ6M68H0"
        ],
        "replies": [
            {
                "user": "U85MWBKEY",
                "ts": "1554869279.033000"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1554900377.038400"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1554974699.041800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1555196473.000400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bXNZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mention some of the tools\/techniques that have been used, but it would have been more complete and accurate if you started with the first debugging tool after tracing was the crash dump, then checkpoint\/restart appeared, then breakpoint debugging, then postmortem debugging (Modula-2, via the Logitech Multiscope debugger was the first commercial tool to offer this, where you could see all the data structures and stack trace on a crashed program from a customer), then omniscient debugging which is creeping into tools, which has been popping in and out of view for the last 15 years with greater frequency.\n\nThe exact origin of each of these tools and techniques can always be debated, but there is a clearly in our history a progression towards greater information, and omniscient debugging, (which includes time traveling features, plus data structure visualizations) are definitely going to be common in the future.\n\nI disagree that Docker is some kind of progress. It is merely a patch over the atrocious lack of integrity checking in the archaic dynamic linking methodology of Unix, which is 50 years old, and long past expiration date. Because you can break things terribly with a new version of a shared library, Docker creates a half-assed virtual machine that lets two program needing different versions of shared libraries run at the same time on a machine. The fact that the version conflicts exist, and that old versions of a library are not updated (leaving security holes galore) cannot be considered an acceptable long term solution.\n\nAnd if i can put on my grump-meister helmet, i frankly think that API's are the main evil of today's programming world, and must be eliminated. The future is a  world of interchangeable parts, not tens of thousands of API's, which have to be called in some specific order, and have mysterious interactions.\n\nAnd version control systems which lets people break stuff constantly as they do in many open source projects have to evolve so that breakage is less common. The sad truth is that all the open source projects don't seem to have any external or built-in QA, so the code oscillates badly, with a good vintage of a project hard to pin down."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1554869279.033000",
        "client_msg_id": "8194B835-5E0B-4D2A-BE25-EBE2E24F6436",
        "text": "Nice <@UEQ6M68H0> I appreciate the feedback! I definitely could have gone into much more detail about each tool \/ the history of them. If I were braver and had more time I’d probably write something even longer form exploring the journey in the terms you described “progression towards greater information” \n\nRe: APIs — I agree there ought to be a better way to share functionality between programmers, but the economics of breaking services up across multiple companies does make a lot of sense. It’s less clear to me how you could build something as immensely valuable to developers as Stripe is if their main delivery method was shipping an executable. APIs as they stand today aren’t technically elegant, but the decentralization allows companies to employ value based pricing and fund the development of awesome software. \n\nTotally with you on version control though :+1:. \n\nThanks again for the feedback. Have any good books or papers you’d recommend? ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554868518.025300",
        "parent_user_id": "UEQ6M68H0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WaK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I appreciate the feedback! I definitely could have gone into much more detail about each tool \/ the history of them. If I were braver and had more time I’d probably write something even longer form exploring the journey in the terms you described “progression towards greater information” \n\nRe: APIs — I agree there ought to be a better way to share functionality between programmers, but the economics of breaking services up across multiple companies does make a lot of sense. It’s less clear to me how you could build something as immensely valuable to developers as Stripe is if their main delivery method was shipping an executable. APIs as they stand today aren’t technically elegant, but the decentralization allows companies to employ value based pricing and fund the development of awesome software. \n\nTotally with you on version control though "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": ". \n\nThanks again for the feedback. Have any good books or papers you’d recommend?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1554877249.038100",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1554877274.000000"
        },
        "client_msg_id": "c9c558ab-577c-4801-91a6-7ce2af19bb86",
        "text": "When you say 'trace', do you mean 'backtrace' (<https:\/\/en.wikipedia.org\/wiki\/Stack_trace>)? It doesn't seem congruent with your definition:\n\n&gt; the linking of your code’s runtime behavior to the higher level abstractions you used when writing it.\n\nThat's just debugging information? Not as important an idea, I think.\n\nThe word 'trace' means very different things in the JIT world, or in the microprocessor design world, or in the Lisp world.\n\n---\n\nLol at the vulnerability as one of the primitives of today's software. It looks like the section is mistitled and you mean \"vulnerability management\". But I prefer the title to the contents of that section :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1554877249.038100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1554901898.041100",
        "reply_users": [
            "U85MWBKEY"
        ],
        "replies": [
            {
                "user": "U85MWBKEY",
                "ts": "1554901898.041100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JR4L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you say 'trace', do you mean 'backtrace' ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Stack_trace"
                            },
                            {
                                "type": "text",
                                "text": ")? It doesn't seem congruent with your definition:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the linking of your code’s runtime behavior to the higher level abstractions you used when writing it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat's just debugging information? Not as important an idea, I think.\n\nThe word 'trace' means very different things in the JIT world, or in the microprocessor design world, or in the Lisp world.\n\n---\n\nLol at the vulnerability as one of the primitives of today's software. It looks like the section is mistitled and you mean \"vulnerability management\". But I prefer the title to the contents of that section "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]