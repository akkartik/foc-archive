[
    {
        "user": "UNS7QDKFV",
        "type": "message",
        "ts": "1649010832.432969",
        "client_msg_id": "e625ed92-14f5-4cc1-b54b-9452a47e401a",
        "text": "I'm interested in using call graphs\/control flow in a hierarchical way to understand programs better.  The problem is there seems to be two extremes - high level diagrams done manually and low level call graphs generated by tools.   A manual drawing with boxes and arrows is often used when describing a program at the highest level.  While it works, one question is how to move to the next level of detail?  Someone has to do that manually as well.  These diagrams aren't connected to the source and can get out of date.  The structure is going to change slowly at the highest level and so keeping up-to-date manually isn't that much trouble.  More detailed levels, though, can change more frequently and keeping them up-to-date is more work.   At the other extreme, tools to generate callgraphs give all the functions.  They can filter by time, number of calls or call stack depth, but those doesn't necessarily correlate to what's important conceptually.   I'm wondering if there's any work on anything between these two extremes?  Both in generating it and visualizing it. (Searching online for 'hierarchical call graph' gives research on automated and machine learning approaches to discovering a hierarchy - interesting as research, but not what I'm after here.  I would prefer something manual like adding program annotations or creating filtering terms - something that can be automated as part of a build or CI process.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbc993d98fe7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bc993d98fe7bf26c048ac0818a598d4d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Mark Dewing",
            "display_name": "Mark Dewing",
            "team": "T5TCAFTA9",
            "name": "markdewing",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1649010832.432969",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1649067297.382049",
        "reply_users": [
            "US370TRJA",
            "U02JDAYKW7J",
            "U02NK592QLR"
        ],
        "replies": [
            {
                "user": "US370TRJA",
                "ts": "1649032112.155239"
            },
            {
                "user": "U02JDAYKW7J",
                "ts": "1649032380.204519"
            },
            {
                "user": "U02NK592QLR",
                "ts": "1649067297.382049"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ooTl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm interested in using call graphs\/control flow in a hierarchical way to understand programs better.  The problem is there seems to be two extremes - high level diagrams done manually and low level call graphs generated by tools.   A manual drawing with boxes and arrows is often used when describing a program at the highest level.  While it works, one question is how to move to the next level of detail?  Someone has to do that manually as well.  These diagrams aren't connected to the source and can get out of date.  The structure is going to change slowly at the highest level and so keeping up-to-date manually isn't that much trouble.  More detailed levels, though, can change more frequently and keeping them up-to-date is more work.   At the other extreme, tools to generate callgraphs give all the functions.  They can filter by time, number of calls or call stack depth, but those doesn't necessarily correlate to what's important conceptually.   I'm wondering if there's any work on anything between these two extremes?  Both in generating it and visualizing it. (Searching online for 'hierarchical call graph' gives research on automated and machine learning approaches to discovering a hierarchy - interesting as research, but not what I'm after here.  I would prefer something manual like adding program annotations or creating filtering terms - something that can be automated as part of a build or CI process.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "UCUSW7WVD",
        "thread_ts": "1633041311.240600",
        "root": {
            "user": "UC2A2ARPT",
            "type": "message",
            "ts": "1633041311.240600",
            "edited": {
                "user": "UC2A2ARPT",
                "ts": "1633042016.000000"
            },
            "client_msg_id": "7566b51b-61de-4cea-aef2-f1dfa7496133",
            "text": "Did programming go through the \"PC revolution\" too? Because to me, programming pre-PC, during PC, and now post-PC (tablet, etc) seems to have changed _far_ less than hardware and other software, especially with respect to the qualitative nature of the changes the PC revolution brought about.\n\nChange my mind? Anyone else ever talk about this with this lens?",
            "team": "T5TCAFTA9",
            "thread_ts": "1633041311.240600",
            "reply_count": 17,
            "reply_users_count": 8,
            "latest_reply": "1649024917.917139",
            "reply_users": [
                "U02ADH37E02",
                "UC2A2ARPT",
                "U01A0KANUUU",
                "UBN9AFS0N",
                "U027P92A0N5",
                "UDLGND5GA",
                "UNS7QDKFV",
                "UCUSW7WVD"
            ],
            "replies": [
                {
                    "user": "U02ADH37E02",
                    "ts": "1633042964.240800"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1633046296.241400"
                },
                {
                    "user": "U01A0KANUUU",
                    "ts": "1633052337.242100"
                },
                {
                    "user": "U02ADH37E02",
                    "ts": "1633066911.243400"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1633082819.244800"
                },
                {
                    "user": "UBN9AFS0N",
                    "ts": "1633082827.245000"
                },
                {
                    "user": "U01A0KANUUU",
                    "ts": "1633091757.245400"
                },
                {
                    "user": "U01A0KANUUU",
                    "ts": "1633091803.245600"
                },
                {
                    "user": "U027P92A0N5",
                    "ts": "1633095676.245900"
                },
                {
                    "user": "UDLGND5GA",
                    "ts": "1633193976.254800"
                },
                {
                    "user": "U01A0KANUUU",
                    "ts": "1633355648.274600"
                },
                {
                    "user": "U01A0KANUUU",
                    "ts": "1633355738.274900"
                },
                {
                    "user": "U027P92A0N5",
                    "ts": "1633356901.275300"
                },
                {
                    "user": "UNS7QDKFV",
                    "ts": "1633379201.278100"
                },
                {
                    "user": "U027P92A0N5",
                    "ts": "1633520313.281100"
                },
                {
                    "user": "U027P92A0N5",
                    "ts": "1633520468.281300"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1649024917.917139"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "bPVPY",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Did programming go through the \"PC revolution\" too? Because to me, programming pre-PC, during PC, and now post-PC (tablet, etc) seems to have changed "
                                },
                                {
                                    "type": "text",
                                    "text": "far",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " less than hardware and other software, especially with respect to the qualitative nature of the changes the PC revolution brought about.\n\nChange my mind? Anyone else ever talk about this with this lens?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1649024917.917139",
        "client_msg_id": "1244c721-fc61-45e9-9330-bf673045889b",
        "text": "This seems relevant here: <http:\/\/www.winestockwebdesign.com\/Essays\/Eternal_Mainframe.html>",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uhGcD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This seems relevant here: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.winestockwebdesign.com\/Essays\/Eternal_Mainframe.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "US370TRJA",
        "type": "message",
        "ts": "1649032112.155239",
        "client_msg_id": "8E43FCD5-7AAB-4F12-B098-D4899331057D",
        "text": "Re work in between the extremes of fully automated vs manual - check out Gail Murphy’s paper from 1995 about “reflexion” models, which were used to bridge this exact gap, and was tested by engineers who had to refactor Microsoft Excel. The core idea was to \n\n• define “patterns” for components \n• make an autogenerated graph of relations between those components\n• Have the system expert manually set a graph for their expectations for what 2 should look like \n• Diff 2 and 3\nI talked about this paper and related work in this talk in 2019: <https:\/\/github.com\/hydrosquall\/code-maps-frontend|https:\/\/github.com\/hydrosquall\/code-maps-frontend>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g8449ebbf703",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8449ebbf703fcee4e1eadc3e78478f01.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Cameron",
            "real_name": "Cameron Yick",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cameron.yick",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1649010832.432969",
        "parent_user_id": "UNS7QDKFV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8JB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re work in between the extremes of fully automated vs manual - check out Gail Murphy’s paper from 1995 about “reflexion” models, which were used to bridge this exact gap, and was tested by engineers who had to refactor Microsoft Excel. The core idea was to \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "define “patterns” for components "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "make an autogenerated graph of relations between those components"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Have the system expert manually set a graph for their expectations for what 2 should look like "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Diff 2 and 3"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I talked about this paper and related work in this talk in 2019: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/hydrosquall\/code-maps-frontend",
                                "text": "https:\/\/github.com\/hydrosquall\/code-maps-frontend"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02JDAYKW7J",
        "type": "message",
        "ts": "1649032380.204519",
        "client_msg_id": "8a8ba613-20e4-47e0-a923-e107d693f7db",
        "text": "I would also look into the GRAIL (graphical programming language) system developed at RAND in the 1960s. A <https:\/\/wiki.c2.com\/?GrailSystem|link> to some of the technical documentation, but you can find video demos of it online. Plenty of good ideas there, few of which have been fully realized since then.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1ab8763ceb21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-14\/2826386958343_1ab8763ceb219317febf_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Krasner",
            "display_name": "Daniel Krasner",
            "team": "T5TCAFTA9",
            "name": "krasnerdaniel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1649010832.432969",
        "parent_user_id": "UNS7QDKFV",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hcDTe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would also look into the GRAIL (graphical programming language) system developed at RAND in the 1960s. A "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?GrailSystem",
                                "text": "link"
                            },
                            {
                                "type": "text",
                                "text": " to some of the technical documentation, but you can find video demos of it online. Plenty of good ideas there, few of which have been fully realized since then."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]