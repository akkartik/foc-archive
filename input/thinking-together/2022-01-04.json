[
    {
        "user": "U02M6PM725T",
        "type": "message",
        "ts": "1641306505.349600",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1641372116.000000"
        },
        "client_msg_id": "3f3e6219-c6f6-43fc-afb7-4b65eef7447c",
        "text": "( A ) A working rudimentary implementation of my UI markup language *Lay*. It’s a basic js embedding of a pretty fundamental but yet untested idea, namely that\n&gt; statecharts can be generalized into a form that is much more friendly to language design, doing away with the notion of ‘host language’ entirely \nI want to be able to explore how the design turns out in practical usage. Can it get close to zero overhead composability? Can it help people like me who feel an urge to program but cannot handle complexity well? etc. Success criteria: I can\n• do real webpage\/app construction using it.\n• observe its dx properties\n• concretize the underlying explicit state model",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "46b1d789abee",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-14\/2726013476404_46b1d789abee49842525_72.jpg",
            "first_name": "Henning",
            "real_name": "Henning Sato von Rosen",
            "display_name": "hvrosen",
            "team": "T5TCAFTA9",
            "name": "henning.von.rosen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1640985572.338200",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N=Pnx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "( A ) A working rudimentary implementation of my UI markup language "
                            },
                            {
                                "type": "text",
                                "text": "Lay",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It’s a basic js embedding of a pretty fundamental but yet untested idea, namely that\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "statecharts can be generalized into a form that is much more friendly to language design, doing away with the notion of ‘host language’ entirely "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to be able to explore how the design turns out in practical usage. Can it get close to zero overhead composability? Can it help people like me who feel an urge to program but cannot handle complexity well? etc. Success criteria: I can\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "do real webpage\/app construction using it."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "observe its dx properties"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "concretize the underlying explicit state model"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "UG0EL18H3"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U02M6PM725T",
        "type": "message",
        "ts": "1641313852.350100",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1641361211.000000"
        },
        "client_msg_id": "5ff1f4c4-37b3-48f6-b36a-cba1fbe45db6",
        "text": "Assuming (B), I would explore\/build two more of my language designs: Val and Nat.\n\n&gt; Both Val and Nat are situated in an under-explored area of language design that is to the right of traditional PLT, assuming a spectrum (C→HL) from compilers\/computers (C) to the left, and human language (HL) to the right.  \nWhile I’m not going to argue the case here, Val and Nat are based on a hunch of mine that HL’s are much more regular and mathematically beautiful than they are typically given credit for**; that under the surface there are lots of regularities\/principles\/features potentially useful in language design; the point being that those features have the empowering property of built-in support in the human language capacity (HLC). That’s a pretty intriguing property.\n\nVal is situated a bit to the right of traditional programming languages, in the middle of the C→HL scale and Nat  further to the right. Both build on the ideas of deep syntax (a system of term structures with regularities that maps to a perceiver model).\n• Val exposes deep syntax as its syntactic top-level, much as Prolog uses it’s terms and LISP its s-expressions;  \n• Nat maps deep syntax into  tokenized structures reminiscent of word classes in human languages. \nBesides being located in an immensely fun and non-boring area of exploration;\n• the Val language might enable a beginning exploration of the impacts of deep syntax on dx of programming languages. \n• Nat might offer the language designer a hands-on way to peek under the hood of human languages, maybe finding features that can be borrowed etc.\n• Doing design work on Val and Nat might give opportunity to try out and extract principles for mapping out features of the HLC. \n\n---\n** Actually, under their irregular surface, I propose that HL’s are much more regular and mathematically clean than most current programming languages, if coverage is taken into account. Furthermore, I propose that language designers needs\/perspective is well suited for appreciating\/uncovering\/exploiting such regularities.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "46b1d789abee",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-14\/2726013476404_46b1d789abee49842525_72.jpg",
            "first_name": "Henning",
            "real_name": "Henning Sato von Rosen",
            "display_name": "hvrosen",
            "team": "T5TCAFTA9",
            "name": "henning.von.rosen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1640985572.338200",
        "parent_user_id": "U02M6PM725T",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Assuming (B), I would explore\/build two more of my language designs: Val and Nat.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Both Val and Nat are situated in an under-explored area of language design that is to the right of traditional PLT, assuming a spectrum (C→HL) from compilers\/computers (C) to the left, and human language (HL) to the right.  "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While I’m not going to argue the case here, Val and Nat are based on a hunch of mine that HL’s are much more regular and mathematically beautiful than they are typically given credit for**; that under the surface there are lots of regularities\/principles\/features potentially useful in language design; the point being that those features have the empowering property of built-in support in the human language capacity (HLC). That’s a pretty intriguing property.\n\nVal is situated a bit to the right of traditional programming languages, in the middle of the C→HL scale and Nat  further to the right. Both build on the ideas of deep syntax (a system of term structures with regularities that maps to a perceiver model).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Val exposes deep syntax as its syntactic top-level, much as Prolog uses it’s terms and LISP its s-expressions;  "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Nat maps deep syntax into  tokenized structures reminiscent of word classes in human languages. "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Besides being located in an immensely fun and non-boring area of exploration;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the Val language might enable a beginning exploration of the impacts of deep syntax on dx of programming languages. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Nat might offer the language designer a hands-on way to peek under the hood of human languages, maybe finding features that can be borrowed etc."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Doing design work on Val and Nat might give opportunity to try out and extract principles for mapping out features of the HLC. "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n---\n** Actually, under their irregular surface, I propose that HL’s are much more regular and mathematically clean than most current programming languages, if coverage is taken into account. Furthermore, I propose that language designers needs\/perspective is well suited for appreciating\/uncovering\/exploiting such regularities."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    }
]