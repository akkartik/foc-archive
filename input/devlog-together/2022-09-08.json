[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1662625162.844949",
        "client_msg_id": "421f84bb-f338-49b3-a8d5-afea7b1c0e1b",
        "text": "It's funny that I have a sense for most of what you just said there.  What does \"goal-directed execution\" mean in this context?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1662592576.940939",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZ07Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's funny that I have a sense for most of what you just said there.  What does \"goal-directed execution\" mean in this context?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U02E4DAQGSZ",
        "thread_ts": "1661846358.747919",
        "root": {
            "user": "U02E4DAQGSZ",
            "type": "message",
            "ts": "1661846358.747919",
            "edited": {
                "user": "U02E4DAQGSZ",
                "ts": "1661846608.000000"
            },
            "client_msg_id": "10c4f2c9-6505-4e69-9b35-9e54cfd803c3",
            "text": "I am trying to fix something that <@UK3LH8CF5> said on here. In particular\n\n&gt;  There doesn't seem to be a way of building up higher level abstractions [on <http:\/\/Observablehq.com|Observablehq.com>] at the moment and saving and reusing them.\nWhile is not technically true, because you can plug in a Firebase and build what you like, but that is *waaay* to involved for prototyping. Also once you did that nobody can fork your notebook and still get access to the backend, or they can, but the whole thing ends up inappropriately insecure.  So the point stands that to do that well requires a fair amount of expertise. So I am fixing that.\n\nI am building a low config realtime multi-tenant state abstraction that supports end user forking and federated access. So you can build abstraction on Observable, but also so you can start to develop cross platform realtime workflows. In addition, anybody who uses that store can fork the containing notebook and still access their data, so it supports end user (re) programming. Furthermore it is a sane security model, that has per user isolation so forks can't steal access unrelated users data.\n\nI can talk about it now coz I can see the end and its totally possible! A forkable notebook realtime statestore is coming to Observable soon!\n\n<https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC>",
            "team": "T5TCAFTA9",
            "thread_ts": "1661846358.747919",
            "reply_count": 5,
            "reply_users_count": 2,
            "latest_reply": "1662730710.010499",
            "reply_users": [
                "UK3LH8CF5",
                "U02E4DAQGSZ"
            ],
            "replies": [
                {
                    "user": "UK3LH8CF5",
                    "ts": "1661904199.439269"
                },
                {
                    "user": "U02E4DAQGSZ",
                    "ts": "1662024380.308209"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1662033071.186019"
                },
                {
                    "user": "U02E4DAQGSZ",
                    "ts": "1662631802.524429"
                },
                {
                    "user": "UK3LH8CF5",
                    "ts": "1662730710.010499"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC",
                    "ts": "1659475446.182609",
                    "author_id": "UK3LH8CF5",
                    "channel_team": "T5TCAFTA9",
                    "channel_id": "C03RR0W5DGC",
                    "is_msg_unfurl": true,
                    "is_reply_unfurl": true,
                    "message_blocks": [
                        {
                            "team": "T5TCAFTA9",
                            "channel": "C03RR0W5DGC",
                            "ts": "1659475446.182609",
                            "message": {
                                "blocks": [
                                    {
                                        "type": "rich_text",
                                        "block_id": "SeB8",
                                        "elements": [
                                            {
                                                "type": "rich_text_section",
                                                "elements": [
                                                    {
                                                        "type": "user",
                                                        "user_id": "U02E4DAQGSZ"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\n"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Yeah, I think its cool. But not quite the level of change I think we need. "
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\n"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. "
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\n"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them."
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\n"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things."
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ],
                    "id": 1,
                    "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&amp;cid=C03RR0W5DGC",
                    "fallback": "[August 2nd, 2022 2:24 PM] jimmyhmiller: <@U02E4DAQGSZ>\nYeah, I think its cool. But not quite the level of change I think we need. \n\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. \n\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them.\n\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things.",
                    "text": "<@U02E4DAQGSZ>\nYeah, I think its cool. But not quite the level of change I think we need. \n\nNotebooks are neat and observable’s dataflow is nice. But I’m more interested in building systems and working on existing systems than self-contained small code exploring data. \n\nIt also is (from what I can tell) mainly a set of pre-defined tools that you use. There doesn't seem to be a way of building up higher level abstractions in the moment and saving and reusing them.\n\nThat said, there is a lot to learn from observable. They’ve done a good job of marketing and also focusing on getting people to dive in and remix things.",
                    "author_name": "Jimmy Miller",
                    "author_link": "https:\/\/futureofcoding.slack.com\/team\/UK3LH8CF5",
                    "author_icon": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_48.jpg",
                    "author_subname": "Jimmy Miller",
                    "mrkdwn_in": [
                        "text"
                    ],
                    "footer": "Thread in Slack Conversation"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "qWWy",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I am trying to fix something that "
                                },
                                {
                                    "type": "user",
                                    "user_id": "UK3LH8CF5"
                                },
                                {
                                    "type": "text",
                                    "text": " said on here. In particular\n\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_quote",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": " There doesn't seem to be a way of building up higher level abstractions [on "
                                },
                                {
                                    "type": "link",
                                    "url": "http:\/\/Observablehq.com",
                                    "text": "Observablehq.com"
                                },
                                {
                                    "type": "text",
                                    "text": "] at the moment and saving and reusing them."
                                }
                            ]
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\nWhile is not technically true, because you can plug in a Firebase and build what you like, but that is "
                                },
                                {
                                    "type": "text",
                                    "text": "waaay",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " to involved for prototyping. Also once you did that nobody can fork your notebook and still get access to the backend, or they can, but the whole thing ends up inappropriately insecure.  So the point stands that to do that well requires a fair amount of expertise. So I am fixing that.\n\nI am building a low config realtime multi-tenant state abstraction that supports end user forking and federated access. So you can build abstraction on Observable, but also so you can start to develop cross platform realtime workflows. In addition, anybody who uses that store can fork the containing notebook and still access their data, so it supports end user (re) programming. Furthermore it is a sane security model, that has per user isolation so forks can't steal access unrelated users data.\n\nI can talk about it now coz I can see the end and its totally possible! A forkable notebook realtime statestore is coming to Observable soon!\n\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/futureofcoding.slack.com\/archives\/C03RR0W5DGC\/p1659475446182609?thread_ts=1659196747.344019&cid=C03RR0W5DGC"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1662631802.524429",
        "client_msg_id": "9a29b2cd-0993-4869-adf0-21e1d0992dd6",
        "text": ":rocket: Durable realtime state storage for Observablehq notebooks <https:\/\/observablehq.com\/@endpointservices\/cellstore>\n\nI am most proud that end user forks keep data access available, so even for stateful notebooks you still retain remixability. I hope this unblocks a few use-cases.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X45",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "rocket",
                                "unicode": "1f680"
                            },
                            {
                                "type": "text",
                                "text": " Durable realtime state storage for Observablehq notebooks "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/observablehq.com\/@endpointservices\/cellstore"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI am most proud that end user forks keep data access available, so even for stateful notebooks you still retain remixability. I hope this unblocks a few use-cases."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1662668690.381599",
        "client_msg_id": "48d925e4-38c2-4d42-9b42-a2f75864e36d",
        "text": "You would need to read the papers to be sure. Look for Arias and Gupta c. 2012, of interested.  My understanding is that typical ASP only works with programs that can be reduced to a finite set of propositions. Goal-directed execution does not require grounding, so you can do it with answer set programs that have infinite structures like lists, trees, etc., you consult only relevant rules (I think), the returned set includes only relevant terms, and it can be structured as a tree-shaped justification without much additional overhead. It may also have something to do with its ability to reason in the presence of certain kinds of loops, but I'm not sure if goal-direction actually matters, there, or if all ASP suspend can do that.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1662592576.940939",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bPW=6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You would need to read the papers to be sure. Look for Arias and Gupta c. 2012, of interested.  My understanding is that typical ASP only works with programs that can be reduced to a finite set of propositions. Goal-directed execution does not require grounding, so you can do it with answer set programs that have infinite structures like lists, trees, etc., you consult only relevant rules (I think), the returned set includes only relevant terms, and it can be structured as a tree-shaped justification without much additional overhead. It may also have something to do with its ability to reason in the presence of certain kinds of loops, but I'm not sure if goal-direction actually matters, there, or if all ASP suspend can do that."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]