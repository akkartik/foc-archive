[
    {
        "user": "UDCLA1HU4",
        "type": "message",
        "ts": "1727827197.316359",
        "edited": {
            "user": "UDCLA1HU4",
            "ts": "1727827233.000000"
        },
        "client_msg_id": "6ca4f7f0-7651-4d1e-944f-43efc4e0c11f",
        "text": "This is a very random thought - but something that I've been occasionally wondering for some time now. If we have lambda calculus as a model of functional languages and Turing machines as a model of imperative languages, what would be a good model for programming systems that have \"document\" as the basic underlying structure (Subtext is an example of this) - i.e., you have some tree structure and the program evaluates by modifying this document - appending new things or rewriting evaluated bits. (Lambda calculus itself is basically a tree, but what if this also allows imperative document edits?)\n\nCould this be something like a \"Turing machine\" that works on trees rather than tapes? There would be \"current location\" which can move in various ways around the tree and modify it. If your document has references (perhaps you can have `..\/..\/foo` to refer to `foo` of a parent of a parent), the machine would have to somehow walk up the tree, remembering that it wants to copy a value back to the original location - and then walk over the tree back to put the value in place of the reference).\n\nIs this something completely silly or something that lots of people have already done but under different names?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bcf86f2e207e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-09-25\/7807695316512_bcf86f2e207ef54d3bda_72.jpg",
            "first_name": "",
            "real_name": "Tomas Petricek",
            "display_name": "tomasp",
            "team": "T5TCAFTA9",
            "name": "tomas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727827197.316359",
        "reply_count": 18,
        "reply_users_count": 8,
        "latest_reply": "1728223573.895489",
        "reply_users": [
            "UK3LH8CF5",
            "UJBAJNFLK",
            "U013ZLJARC7",
            "UE6EFEPTQ",
            "UCUSW7WVD",
            "UDCLA1HU4",
            "UFPRPSA4S",
            "UGWUJUZHT"
        ],
        "replies": [
            {
                "user": "UK3LH8CF5",
                "ts": "1727839827.395039"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727847147.660189"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1727849045.817219"
            },
            {
                "user": "UE6EFEPTQ",
                "ts": "1727857436.296279"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1727879746.740669"
            },
            {
                "user": "UDCLA1HU4",
                "ts": "1727906391.078199"
            },
            {
                "user": "UDCLA1HU4",
                "ts": "1727906657.735399"
            },
            {
                "user": "UDCLA1HU4",
                "ts": "1727907073.490539"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727936087.586529"
            },
            {
                "user": "UFPRPSA4S",
                "ts": "1727936520.898839"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1727954487.856939"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1727961243.777349"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1728035142.700859"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1728132331.851319"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1728176946.384549"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1728203918.216799"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1728210579.504329"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1728223573.895489"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uPL3E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a very random thought - but something that I've been occasionally wondering for some time now. If we have lambda calculus as a model of functional languages and Turing machines as a model of imperative languages, what would be a good model for programming systems that have \"document\" as the basic underlying structure (Subtext is an example of this) - i.e., you have some tree structure and the program evaluates by modifying this document - appending new things or rewriting evaluated bits. (Lambda calculus itself is basically a tree, but what if this also allows imperative document edits?)\n\nCould this be something like a \"Turing machine\" that works on trees rather than tapes? There would be \"current location\" which can move in various ways around the tree and modify it. If your document has references (perhaps you can have "
                            },
                            {
                                "type": "text",
                                "text": "..\/..\/foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to refer to "
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of a parent of a parent), the machine would have to somehow walk up the tree, remembering that it wants to copy a value back to the original location - and then walk over the tree back to put the value in place of the reference).\n\nIs this something completely silly or something that lots of people have already done but under different names?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "U014WA16VNJ",
                    "UFPRPSA4S",
                    "UML4ZEKDK"
                ],
                "count": 5
            },
            {
                "name": "thinking_face",
                "users": [
                    "U01DWJSAF2B"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1727839827.395039",
        "client_msg_id": "6F57AAF3-08C1-4FFF-B62D-4EF67138FD6E",
        "text": "I might be missing some nuance here. But what you are describing sounds to me pretty similar to term or graph rewriting systems. <https:\/\/en.m.wikipedia.org\/wiki\/Rewriting#Term_rewriting_systems|https:\/\/en.m.wikipedia.org\/wiki\/Rewriting#Term_rewriting_systems> They are Turing complete formalism. And there has been plenty of working using them for transforming documents, but also general evaluation. They do work exactly as you described. You have a tree structure and you modify it by rewriting things. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727827197.316359",
        "parent_user_id": "UDCLA1HU4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ahmbb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I might be missing some nuance here. But what you are describing sounds to me pretty similar to term or graph rewriting systems. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.m.wikipedia.org\/wiki\/Rewriting#Term_rewriting_systems",
                                "text": "https:\/\/en.m.wikipedia.org\/wiki\/Rewriting#Term_rewriting_systems"
                            },
                            {
                                "type": "text",
                                "text": " They are Turing complete formalism"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " And there has been plenty of working using them for transforming documents"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " but also general evaluation"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " They do work exactly as you described"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You have a tree structure and you modify it by rewriting things"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1727847147.660189",
        "client_msg_id": "e9d777e2-3bc1-469e-9c1e-cef0c89874ea",
        "text": "Supporting <@UK3LH8CF5>'s suggestion because that's exactly how my <https:\/\/leibniz.khinsen.net\/|Digital Scientific Notation> works. It's a term rewriting system embedded in a Wiki-like graph of cross-linked pages.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727827197.316359",
        "parent_user_id": "UDCLA1HU4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AIA9\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Supporting "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "'s suggestion because that's exactly how my "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/leibniz.khinsen.net\/",
                                "text": "Digital Scientific Notation"
                            },
                            {
                                "type": "text",
                                "text": " works. It's a term rewriting system embedded in a Wiki-like graph of cross-linked pages."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1727849045.817219",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1727885193.000000"
        },
        "client_msg_id": "5B6B9236-33D1-4C38-9839-3E18801BFFEF",
        "text": "Note also that Lisp was originally conceived of as an automated form of term rewriting, the keyword “lambda” having been borrowed based on an incomplete understanding of Church’s paper. The first Lisp that was actually based on the lambda calculus was scheme.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727827197.316359",
        "parent_user_id": "UDCLA1HU4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X4nHZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Note also that Lisp was originally conceived"
                            },
                            {
                                "type": "text",
                                "text": " of"
                            },
                            {
                                "type": "text",
                                "text": " as an automated form of term rewriting, the keyword “lambda” having been borrowed based on an incomplete understanding of Church’s paper. The first Lisp that was actually based on the lambda calculus was scheme."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UJFN50C00",
                    "U014WA16VNJ"
                ],
                "count": 2
            },
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]