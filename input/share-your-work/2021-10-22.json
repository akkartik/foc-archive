[
    {
        "text": "*Annotated Lambda Diagrams:*\n\nI have an idea for a semi-graphical programming interface that\nas far as I can tell is very different from anything that is currently in existence.\nI call it:  »Annotated Lambda Diagrams (ALDs)«\n\nThe core of the idea is to annotate John Trumps \"Lambda Diagrams\"\n( see here: <https:\/\/tromp.github.io\/cl\/diagrams.html> )\nin order to make them into a practically useful and enjoyable programming user interface. (Hopefully even live coding capable).\n\nDon't be tricked into grouping this together with node editors.\nWhile there are visual line and box elements, this is definitely not a node editor.\nThat is because there simply are no nodes here.\n\nWhat may look like nodes are merely redundant tags\/annotations of the lines.\nAs such there is no need to decide\n— which one of wires and nodes represents values and\n— which one represents value-transforming-functions\nSo these ALDs are also not to confuse with what could be called \"inverse node editors\" where the roles of lines and nodes are swapped from the usual association. Also note that having functions being first class values does not remove this issue of node editors … as far as I can see.\n\n*Here is a writeup of the basic idea:*\n• :fire: <http:\/\/apm.bplaced.net\/w\/index.php?title=Annotated_lambda_diagram>\n*Here is a page with further Mockups:*\n• :fire: <http:\/\/apm.bplaced.net\/w\/index.php?title=Annotated_lambda_diagram_mockups> \nDrawing these mockups by hand (in inkscape) is a lot of effort.\nBut implementing this even more so.\nI did not get very far in my first attempt. To put it mildly.\nI didn't even get to implementing the actual diagrams …\nZooming programming interface experiment:\n• Take1\/2: <https:\/\/youtu.be\/VcoBaUDSHFM>\n• Take2\/2: <https:\/\/youtu.be\/YWUBRyDAVG4>",
        "files": [
            {
                "id": "F02JN36517E",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UKVEBP5RD",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Arp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Annotated Lambda Diagrams:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have an idea for a semi-graphical programming interface that\nas far as I can tell is very different from anything that is currently in existence.\nI call it:  »Annotated Lambda Diagrams (ALDs)«\n\nThe core of the idea is to annotate John Trumps \"Lambda Diagrams\"\n( see here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tromp.github.io\/cl\/diagrams.html"
                            },
                            {
                                "type": "text",
                                "text": " )\nin order to make them into a practically useful and enjoyable programming user interface. (Hopefully even live coding capable).\n\nDon't be tricked into grouping this together with node editors.\nWhile there are visual line and box elements, this is definitely not a node editor.\nThat is because there simply are no nodes here.\n\nWhat may look like nodes are merely redundant tags\/annotations of the lines.\nAs such there is no need to decide\n— which one of wires and nodes represents values and\n— which one represents value-transforming-functions\nSo these ALDs are also not to confuse with what could be called \"inverse node editors\" where the roles of lines and nodes are swapped from the usual association. Also note that having functions being first class values does not remove this issue of node editors … as far as I can see.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Here is a writeup of the basic idea:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "emoji",
                                        "name": "fire",
                                        "unicode": "1f525"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/apm.bplaced.net\/w\/index.php?title=Annotated_lambda_diagram"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is a page with further Mockups:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "emoji",
                                        "name": "fire",
                                        "unicode": "1f525"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http:\/\/apm.bplaced.net\/w\/index.php?title=Annotated_lambda_diagram_mockups"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDrawing these mockups by hand (in inkscape) is a lot of effort.\nBut implementing this even more so.\nI did not get very far in my first attempt. To put it mildly.\nI didn't even get to implementing the actual diagrams …\nZooming programming interface experiment:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Take1\/2: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/youtu.be\/VcoBaUDSHFM"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Take2\/2: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/youtu.be\/YWUBRyDAVG4"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1634886002.010800",
        "edited": {
            "user": "UKVEBP5RD",
            "ts": "1634971660.000000"
        },
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UMV4B97GT",
                    "U01QUBNJSEQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "text": "This is the most recent one of my \"annotated lambda diagram\" mockups:\nIt shows how code transformations could be animated in a visually almost discontinuity free way of \"code circuits flowing through code circuits\"",
        "files": [
            {
                "id": "F02J5AXLG15",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F02K9MJ0BUG",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UKVEBP5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k4N0h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is the most recent one of my \"annotated lambda diagram\" mockups:\nIt shows how code transformations could be animated in a visually almost discontinuity free way of \"code circuits flowing through code circuits\""
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1634886004.010900"
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1634891496.011400",
        "client_msg_id": "ba44b285-c8d6-4c67-ab0f-038670e76693",
        "text": "<@U01GPM3BY4R> great work! do you have a working version to participate on Review Jam? <http:\/\/marianoguerra.github.io\/review-jam\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1634753423.110600",
        "parent_user_id": "U01GPM3BY4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "onXo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01GPM3BY4R"
                            },
                            {
                                "type": "text",
                                "text": " great work! do you have a working version to participate on Review Jam? "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/marianoguerra.github.io\/review-jam\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01GPM3BY4R",
        "type": "message",
        "ts": "1634896348.018000",
        "client_msg_id": "2010827c-c264-46d0-8f0f-6e08a7aac587",
        "text": "<@UA14TGLTC> Thanks, I'm often surprised by how powerful the motherboard programming is (the logic panel as you call it), that was kind of an accident. Back in the early days, each motherboard contained a little snippet of Clojure code but I noticed that a lot of them were simple if\/them clauses and when they weren't you could simplify them to be so by making the other logic physical, if you know what I mean? For instance instead of writing code to detect a recent button press in the Simon game by having a Clojure variable to keep track of the last time a button was pressed, I just created a physical thingamajig that is in a certain state for a while after each button press. So if each motherboard can just be simple if\/then statements with or\/and\/not conditions, then it can be represented by a simple graph. Even things I thought couldn't be simplified this way like a while loop turned out to be possible, the \"player\" circuit is a physical while loop for instance.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "37dd3248d4e1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-22\/2659944513472_37dd3248d4e11b1be060_72.jpg",
            "first_name": "",
            "real_name": "Felipe Reigosa",
            "display_name": "Felipe Reigosa",
            "team": "T5TCAFTA9",
            "name": "felipereigosa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1634753423.110600",
        "parent_user_id": "U01GPM3BY4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K=ekn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, I'm often surprised by how powerful the motherboard programming is (the logic panel as you call it), that was kind of an accident. Back in the early days, each motherboard contained a little snippet of Clojure code but I noticed that a lot of them were simple if\/them clauses and when they weren't you could simplify them to be so by making the other logic physical, if you know what I mean? For instance instead of writing code to detect a recent button press in the Simon game by having a Clojure variable to keep track of the last time a button was pressed, I just created a physical thingamajig that is in a certain state for a while after each button press. So if each motherboard can just be simple if\/then statements with or\/and\/not conditions, then it can be represented by a simple graph. Even things I thought couldn't be simplified this way like a while loop turned out to be possible, the \"player\" circuit is a physical while loop for instance."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01GPM3BY4R",
        "type": "message",
        "ts": "1634896743.018200",
        "edited": {
            "user": "U01GPM3BY4R",
            "ts": "1634897183.000000"
        },
        "client_msg_id": "af63d7ab-60ed-4f41-958b-1cb64a9d8f45",
        "text": "<@UBN9AFS0N> Thanks, the Review Jam sounds like a great idea! Perfect not only to get real feedback but also try some really interesting tools from the other people here. I have to focus on work for a few weeks and trying all those tools does sound time consuming but since it's still a month away I think I probably can make it. I'll prepare a new version when I can, it's more involved than you would think, that's why the version on my site is so old, but I'll get it done.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "37dd3248d4e1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-22\/2659944513472_37dd3248d4e11b1be060_72.jpg",
            "first_name": "",
            "real_name": "Felipe Reigosa",
            "display_name": "Felipe Reigosa",
            "team": "T5TCAFTA9",
            "name": "felipereigosa",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1634753423.110600",
        "parent_user_id": "U01GPM3BY4R",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n9f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, the Review Jam sounds like a great idea! Perfect not only to get real feedback but also try some really interesting tools from the other people here. I have to focus on work for a few weeks and trying all those tools does sound time consuming but since it's still a month away I think I probably can make it. I'll prepare a new version when I can, it's more involved than you would think, that's why the version on my site is so old, but I'll get it done."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02JDAYKW7J",
        "type": "message",
        "ts": "1634899890.018500",
        "client_msg_id": "ae8f9095-7310-48a1-99f0-be6f42c5bd29",
        "text": "<@UJBAJNFLK> Although I am sure I’ve come across this somewhere in the literature (diSessa, Kay, Ingalls, Solomon) I can’t quite remember where. The “peeling the onion” quote you see in Eric’s talk, and the one that has stuck with us, is from footage from this documentary: <https:\/\/messagenotunderstood.com\/>\n\nIt’s not released but we are working on it!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "1ab8763ceb21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-12-14\/2826386958343_1ab8763ceb219317febf_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Krasner",
            "display_name": "Daniel Krasner",
            "team": "T5TCAFTA9",
            "name": "krasnerdaniel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1634583097.105700",
        "parent_user_id": "U01A0KANUUU",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N0VV+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Although I am sure I’ve come across this somewhere in the literature (diSessa, Kay, Ingalls, Solomon) I can’t quite remember where. The “peeling the onion” quote you see in Eric’s talk, and the one that has stuck with us, is from footage from this documentary: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/messagenotunderstood.com\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt’s not released but we are working on it!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]