[
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1567933793.050400",
        "client_msg_id": "e79e178f-17bd-433c-90fc-b192fc365e6f",
        "text": "Any ideas? <https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1170624011090501633>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "reply_count": 24,
        "reply_users_count": 7,
        "latest_reply": "1568288875.070700",
        "reply_users": [
            "UJUQESQ1Z",
            "UAL7940NM",
            "U79HM6726",
            "UC2A2ARPT",
            "UM1HH60GN",
            "UEQ6M68H0",
            "UNBPP291C"
        ],
        "replies": [
            {
                "user": "UJUQESQ1Z",
                "ts": "1567940564.050600"
            },
            {
                "user": "UJUQESQ1Z",
                "ts": "1567940798.051000"
            },
            {
                "user": "UAL7940NM",
                "ts": "1567942248.051600"
            },
            {
                "user": "U79HM6726",
                "ts": "1567944031.051800"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1567951078.052200"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567954376.052400"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567955142.052600"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567955300.052900"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567955391.053200"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567955509.053400"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1567955610.053600"
            },
            {
                "user": "UAL7940NM",
                "ts": "1567969591.054100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1567973171.054300"
            },
            {
                "user": "UAL7940NM",
                "ts": "1568014961.055000"
            },
            {
                "user": "U79HM6726",
                "ts": "1568027160.055300"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568031275.055600"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568031335.055800"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568031807.056000"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568032196.056300"
            },
            {
                "user": "U79HM6726",
                "ts": "1568032331.056500"
            },
            {
                "user": "UM1HH60GN",
                "ts": "1568032536.056800"
            },
            {
                "user": "UNBPP291C",
                "ts": "1568277655.070300"
            },
            {
                "user": "UAL7940NM",
                "ts": "1568287872.070500"
            },
            {
                "user": "UNBPP291C",
                "ts": "1568288875.070700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/FKohlgrueber|@FKohlgrueber>: Does anyone know a programming language in which programs are stored as trees\/graphs but still edited as text (with probably multiple different syntaxes to choose from)?",
                "ts": 1567933488,
                "author_name": "Felix Kohlgrüber",
                "author_link": "https:\/\/twitter.com\/FKohlgrueber\/status\/1170624011090501633",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/980166265372401664\/FgXL4PR5_normal.jpg",
                "author_subname": "@FKohlgrueber",
                "text": "Does anyone know a programming language in which programs are stored as trees\/graphs but still edited as text (with probably multiple different syntaxes to choose from)?",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1170624011090501633",
                "id": 1,
                "original_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1170624011090501633",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yu\/+j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any ideas? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1170624011090501633"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UJCHWTMH6"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJUQESQ1Z",
        "type": "message",
        "ts": "1567940564.050600",
        "edited": {
            "user": "UJUQESQ1Z",
            "ts": "1567940796.000000"
        },
        "client_msg_id": "9b319769-c1ba-4144-b7ec-870f3c999c98",
        "text": "You might want to search for ‘structured editors’ or ‘structured editing’ or ‘projectional editing’",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g52a48f76fc9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e52a48f76fc911d40711f788d74773a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Brendan Zabarauskas",
            "display_name": "Brendan Zabarauskas",
            "team": "T5TCAFTA9",
            "name": "bjzaba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might want to search for ‘structured editors’ or ‘structured editing’ or ‘projectional editing’"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJUQESQ1Z",
        "type": "message",
        "ts": "1567940798.051000",
        "edited": {
            "user": "UJUQESQ1Z",
            "ts": "1567940882.000000"
        },
        "client_msg_id": "43c7758b-fc33-43de-8207-cb0fd3ccc89f",
        "text": "<https:\/\/github.com\/disconcision\/fructure>\n<https:\/\/github.com\/hazelgrove\/hazel\/>\n<https:\/\/www.jetbrains.com\/mps\/>\n<http:\/\/www.cse.chalmers.se\/~hallgren\/Alfa\/>\n<https:\/\/isomorf.io>\n<https:\/\/github.com\/lamdu\/lamdu>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g52a48f76fc9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e52a48f76fc911d40711f788d74773a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Brendan Zabarauskas",
            "display_name": "Brendan Zabarauskas",
            "team": "T5TCAFTA9",
            "name": "bjzaba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JuF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/disconcision\/fructure"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/hazelgrove\/hazel\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.jetbrains.com\/mps\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.cse.chalmers.se\/~hallgren\/Alfa\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/isomorf.io"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/lamdu\/lamdu"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1567942248.051600",
        "client_msg_id": "d1a020fc-0ffe-42b1-956a-ca02a786fcb4",
        "text": "I know Structured Editing, but what I'm looking for is something different. In SE, you perform edits on an AST directly. While this prevents syntax errors, it's also the reason why SEs have a reputation for being hard to use. \n\nWhat I'm looking for is a language that's edited as plain text but stored as a tree\/graph once editing is done. Think of it as having a petty printer transforming your code into text when you open it for editing and a parser that turns the (edited) text into a structure when saving your program.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zGRl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know Structured Editing, but what I'm looking for is something different. In SE, you perform edits on an AST directly. While this prevents syntax errors, it's also the reason why SEs have a reputation for being hard to use. \n\nWhat I'm looking for is a language that's edited as plain text but stored as a tree\/graph once editing is done. Think of it as having a petty printer transforming your code into text when you open it for editing and a parser that turns the (edited) text into a structure when saving your program."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U79HM6726",
        "type": "message",
        "ts": "1567944031.051800",
        "client_msg_id": "c42d9317-bcb4-4ef5-a3e9-1d8177992d96",
        "text": "In that case, maybe Unison",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4ac39488e9c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/24ac39488e9c4f2833d087a1343707dc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Yair Chuchem",
            "display_name": "yairchu",
            "team": "T5TCAFTA9",
            "name": "yairchu",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nLg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In that case, maybe Unison"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1567951078.052200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1567964655.000000"
        },
        "client_msg_id": "EB85AE79-7BE8-4DDA-BA72-3A3CC7637A5A",
        "text": "Maybe isomorf? <https:\/\/isomorf.io>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xNS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe isomorf? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/isomorf.io"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567954376.052400",
        "client_msg_id": "184ed891-7bd7-43f0-aaed-9649c0f1a601",
        "text": "What's the advantage to not storing as a text file?  If parsing's fast enough, I don't see much.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XHd\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the advantage to not storing as a text file?  If parsing's fast enough, I don't see much."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567955142.052600",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1567955205.000000"
        },
        "client_msg_id": "0252bfe0-c965-4ffc-b2ea-551d4319192d",
        "text": "I think reasonml and refmt initially wanted to let individual devs on a shared project check out code and write in whatever syntax is most appropriate to them, storing it independently still as a text file in git, but I'm not sure if they're still going down that path.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ajbq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think reasonml and refmt initially wanted to let individual devs on a shared project check out code and write in whatever syntax is most appropriate to them, storing it independently still as a text file in git, but I'm not sure if they're still going down that path."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567955300.052900",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1567955333.000000"
        },
        "client_msg_id": "6543df4f-4606-4a19-a5d8-674af1a47ac7",
        "text": "I think if you're trying to make a code storage DB that is more entangled to the code than simple text, then you trade off the ability to change the underlying semantics of the language.  If your storage is not tied in any meaningful way to the code, then you might as well use text?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nlj=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think if you're trying to make a code storage DB that is more entangled to the code than simple text, then you trade off the ability to change the underlying semantics of the language.  If your storage is not tied in any meaningful way to the code, then you might as well use text?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567955391.053200",
        "client_msg_id": "fa48bade-19f2-40e3-a272-0a2c3329290f",
        "text": "Text languages can have multiple parsers for different contexts, and it might not make sense to unify all that into one really complex system, but keep standalone tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nRLr8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Text languages can have multiple parsers for different contexts, and it might not make sense to unify all that into one really complex system, but keep standalone tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567955509.053400",
        "client_msg_id": "ad24c400-799b-4595-88ae-630874682c3f",
        "text": "I think an example I am familiar with is clojure's simple initial java compiler implementation, and the various efforts to write clojure-in-clojure to replace it that failed over time.  Pieces of those are still used for some more complex tasks, but they can't beat the simple compiler for just compiling programs.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nkzpr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think an example I am familiar with is clojure's simple initial java compiler implementation, and the various efforts to write clojure-in-clojure to replace it that failed over time.  Pieces of those are still used for some more complex tasks, but they can't beat the simple compiler for just compiling programs."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UM1HH60GN",
        "type": "message",
        "ts": "1567955610.053600",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1567955747.000000"
        },
        "client_msg_id": "22ea7b69-fef4-4fe4-9c97-a954f95afe64",
        "text": "If you tried to tack on more complexity to clojure's java compiler implementation that was never designed for those use-cases, you would fail a different way.  If you try to design a system for too many use-cases from scratch, it will never ship.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ee467d1311",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-08-07\/719033961125_50ee467d13114e4314c2_72.jpg",
            "first_name": "Gary",
            "real_name": "Gary Trakhman",
            "display_name": "Gary Trakhman",
            "team": "T5TCAFTA9",
            "name": "gary.trakhman",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QC4Vw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you tried to tack on more complexity to clojure's java compiler implementation that was never designed for those use-cases, you would fail a different way.  If you try to design a system for too many use-cases from scratch, it will never ship."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1567969591.054100",
        "client_msg_id": "b1313acf-c6f3-4d59-a29e-e9c713565e10",
        "text": "<@UM1HH60GN> The short answer is separation of concerns. Using the same representation for everything requires compromises all over the place. Some examples:\n- because the presentation repr equals the storage repr, code style and formatting are shared between people. These are personal preferences and requiring consensus leads to a lot of bike shedding discussions. \n- changing the syntax of a PL breaks existing programs because execution depends on syntax. All mature languages have syntax they'd like to change but can't because it'd break existing code.\n- building accurate tools (static analysis, diff, ...) is difficult because it requires complex analysis of the source text. Valuable information like that a function has been renamed (in a diff) or how many usages a variable has (static analysis use case) are encoded implicitly (and language-dependant). A tree\/graph could make this info explicit and easier to use.\n\nI'm not against text representations generally, but for structured data like programs, a \"natural representation\" offers many benefits. Text does make sense for user interaction (screen, keyboard), but should be interpreted only once and as soon as possible.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UOk5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UM1HH60GN"
                            },
                            {
                                "type": "text",
                                "text": " The short answer is separation of concerns. Using the same representation for everything requires compromises all over the place. Some examples:\n- because the presentation repr equals the storage repr, code style and formatting are shared between people. These are personal preferences and requiring consensus leads to a lot of bike shedding discussions. \n- changing the syntax of a PL breaks existing programs because execution depends on syntax. All mature languages have syntax they'd like to change but can't because it'd break existing code.\n- building accurate tools (static analysis, diff, ...) is difficult because it requires complex analysis of the source text. Valuable information like that a function has been renamed (in a diff) or how many usages a variable has (static analysis use case) are encoded implicitly (and language-dependant). A tree\/graph could make this info explicit and easier to use.\n\nI'm not against text representations generally, but for structured data like programs, a \"natural representation\" offers many benefits. Text does make sense for user interaction (screen, keyboard), but should be interpreted only once and as soon as possible."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1567973171.054300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1567973239.000000"
        },
        "client_msg_id": "bbb06226-6b1f-4388-9672-1aedb5a3cd37",
        "text": "The only bidirectional graphic &lt;==&gt; text language on the future of computing spreadsheet that i see is Luna. That is the Polish project that has tried with a pretty good sized team for several years now to conquer this very ambitious task. In a conventional text language, you design a syntax (user space) which is mapped to an intermediate space (the AST) which is then mapped to some target language + runtime. So one is juggling 4 things at once, and 3 mappings: (user -&gt; AST, AST -&gt; runtime+target, runtime-&gt;target OS).  Each new platform requires a new runtime, and platform conflicts force you to go back and change the runtime, which might cause the code generator to change. So there is a back and forth motion as the target creates a back-pressure, sometimes all the way to the syntax. When you add in the additional requirement that the textual code can be mapped to a nice looking graphical for with user inputs controlling it, you add 2 more mappings, the internal model (or text) -&gt; graphical translation, and the user input -&gt; internal model (or text).\n\nI think evidence points that designing the graphic side before pinning down your underlying language (Eve and Luna projects) is an expensive way to do it. During language evolution all of these layers are changing very frequently, and keeping all of these different things working smoothly together will exhaust even the most enthusiastic team.  I am a lone voice in the wilderness with this position, but i firmly believe one should pin down the programming model and the \"source of truth\" language first, and make sure it is solid before attempting to add graphics.  Some projects like Jai can go backwards from AST to the source code, as his AST has sufficient information, but most languages cannot reconstruct the source from the AST. In most languages the text form is the \"source of truth\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1567933793.050400",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z1Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only bidirectional graphic <==> text language on the future of computing spreadsheet that i see is Luna. That is the Polish project that has tried with a pretty good sized team for several years now to conquer this very ambitious task. In a conventional text language, you design a syntax (user space) which is mapped to an intermediate space (the AST) which is then mapped to some target language + runtime. So one is juggling 4 things at once, and 3 mappings: (user -> AST, AST -> runtime+target, runtime->target OS).  Each new platform requires a new runtime, and platform conflicts force you to go back and change the runtime, which might cause the code generator to change. So there is a back and forth motion as the target creates a back-pressure, sometimes all the way to the syntax. When you add in the additional requirement that the textual code can be mapped to a nice looking graphical for with user inputs controlling it, you add 2 more mappings, the internal model (or text) -> graphical translation, and the user input -> internal model (or text).\n\nI think evidence points that designing the graphic side before pinning down your underlying language (Eve and Luna projects) is an expensive way to do it. During language evolution all of these layers are changing very frequently, and keeping all of these different things working smoothly together will exhaust even the most enthusiastic team.  I am a lone voice in the wilderness with this position, but i firmly believe one should pin down the programming model and the \"source of truth\" language first, and make sure it is solid before attempting to add graphics.  Some projects like Jai can go backwards from AST to the source code, as his AST has sufficient information, but most languages cannot reconstruct the source from the AST. In most languages the text form is the \"source of truth\"."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]