[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1579594560.230800",
        "client_msg_id": "94dc7ce7-4c0b-4647-b14e-2eb1f6e7c459",
        "text": "One problem with the most popular static type systems is their absolute priority on whole-program soundness guarantees. That excludes types that would otherwise be very useful, such as \"positive number\" (integer,float, whatever, but positive) in numerical analysis.\nFor many number-crunching applications, standard type systems are nearly useless because everything is a float or an array of floats. Even size and dimensions of arrays cannot be checked statically, that would require dependent types.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579556106.218100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T3AG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One problem with the most popular static type systems is their absolute priority on whole-program soundness guarantees. That excludes types that would otherwise be very useful, such as \"positive number\" (integer,float, whatever, but positive) in numerical analysis.\nFor many number-crunching applications, standard type systems are nearly useless because everything is a float or an array of floats. Even size and dimensions of arrays cannot be checked statically, that would require dependent types."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UJN1TAYEQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1579598313.231200",
        "client_msg_id": "870def1b-b487-4d93-9ce1-936edc78ee48",
        "text": "```My belief is that the way to start out in a research career is by working primarily on small and relatively tractable problems, where you have a good chance of success. You then continue the process of self-development, gradually working up to more important problems (which also tend to be more difficult, although, as noted above, difficulty is most emphatically not the same as importance). The rare exception is important problems that are also likely to be technically easy; if you're lucky you may find such a problem early in your career, or be handed one. If so, solve it quickly!\n\nEven later on, when you've developed to the point that you can realistically expect to be able to attack important problems, it's still useful to tackle a mixture of more and less important problems. The reason is that tackling smaller problems ensures that you make a reasonable contribution to science, and that you continue to take an active part in the research community. ```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579598313.231200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1579603583.232100",
        "reply_users": [
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1579603583.232100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nuUx",
                "elements": [
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My belief is that the way to start out in a research career is by working primarily on small and relatively tractable problems, where you have a good chance of success. You then continue the process of self-development, gradually working up to more important problems (which also tend to be more difficult, although, as noted above, difficulty is most emphatically not the same as importance). The rare exception is important problems that are also likely to be technically easy; if you're lucky you may find such a problem early in your career, or be handed one. If so, solve it quickly!\n\nEven later on, when you've developed to the point that you can realistically expect to be able to attack important problems, it's still useful to tackle a mixture of more and less important problems. The reason is that tackling smaller problems ensures that you make a reasonable contribution to science, and that you continue to take an active part in the research community. "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F",
                    "USJ899UUD",
                    "URKL31C2J",
                    "UA14TGLTC",
                    "UMWF81HTP",
                    "UFLN9JFRT",
                    "UC2A2ARPT",
                    "UQPHR6Y3S",
                    "UBSMEUXAA",
                    "UPDJW8R7Y"
                ],
                "count": 10
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1579601758.231600",
        "client_msg_id": "8c0df553-eb06-4f77-8893-c8cc927731ae",
        "text": "Yes Ben, some older students (or not so old ones that want to be seen as \"real\" programmers) want to go away from scratch which looks childish to them and they think they can't create \"serious\" (i.e. complex, etc.) things with it and that they have to learn a text based language. Yes, I think having a less \"childish\" UI (meaning essentially, less flashy colors) can be a good thing for these cases. I am not sure a dark mode is necessary, but this could just be my personnal preference here (I prefer light mode in general).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iL6zp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes Ben, some older students (or not so old ones that want to be seen as \"real\" programmers) want to go away from scratch which looks childish to them and they think they can't create \"serious\" (i.e. complex, etc.) things with it and that they have to learn a text based language. Yes, I think having a less \"childish\" UI (meaning essentially, less flashy colors) can be a good thing for these cases. I am not sure a dark mode is necessary, but this could just be my personnal preference here (I prefer light mode in general)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1579603486.231800",
        "client_msg_id": "ef84c1db-9c8a-4f28-8f0b-e355de5074f7",
        "text": "I wonder what the return on investment on a ProScratch would be?  One that looks more \"real\", features data-structure blocks, definition of new blocks, and tools for managing larger projects.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+=3I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder what the return on investment on a ProScratch would be?  One that looks more \"real\", features data-structure blocks, definition of new blocks, and tools for managing larger projects."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UQPHR6Y3S"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1579603583.232100",
        "client_msg_id": "0a74c30e-150a-4fa6-bd69-2a31f7862c50",
        "text": "In short, \"mixed strategy is the best strategy.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579598313.231200",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "29B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In short, \"mixed strategy is the best strategy.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1579609067.232500",
        "client_msg_id": "f5752387-7e48-46fa-841c-eceb42a74ffb",
        "text": "I am convinced there is value for such a thing, either ProScratch or visual programming inspired by Scratch. And it is a thing I want to work on on my experiments about future of coding\/programming. In fact, as a first step, I plan (and began to work on it) to host a Scratch environment, with some slight modifications to see if there is an audience for a version of Scratch not targeted to childrens.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nr=H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am convinced there is value for such a thing, either ProScratch or visual programming inspired by Scratch. And it is a thing I want to work on on my experiments about future of coding\/programming. In fact, as a first step, I plan (and began to work on it) to host a Scratch environment, with some slight modifications to see if there is an audience for a version of Scratch not targeted to childrens."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQPHR6Y3S",
        "type": "message",
        "ts": "1579620504.232900",
        "client_msg_id": "7cdf5e89-591b-4b14-8ba6-4917334ed649",
        "text": "I remember hearing about \"Snap!\", which is heavily inspired by Scratch with support for more programming language concepts for HS or college level. Not sure if this is still an active project though, I just remember hearing about it when I used Scratch: <https:\/\/snap.berkeley.edu\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6a0cd939e41a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-02\/1706249229922_6a0cd939e41a68326c28_72.jpg",
            "first_name": "noahtren",
            "real_name": "noahtren",
            "display_name": "noahtren",
            "team": "T5TCAFTA9",
            "name": "noahtren",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wh7r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I remember hearing about \"Snap!\", which is heavily inspired by Scratch with support for more programming language concepts for HS or college level. Not sure if this is still an active project though, I just remember hearing about it when I used Scratch: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/snap.berkeley.edu\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URMEM88JG",
        "type": "message",
        "ts": "1579624299.233400",
        "client_msg_id": "5f9f1e29-e1f6-4608-9924-772be53dc077",
        "text": "Chiming in with props to Scratch. On the topic of a Scratch reskin: one of my future CodeCombat \/ Ozaria feature ideas is to make a Scratch project importer, where we could take existing Scratch projects, convert them to being hackable in Python\/JS\/CoffeeScript\/Lua\/Java\/C++, increase the framerate, swap out any default sprites for stuff done in our style, and add more available APIs from our own game development track.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gbbb3b58f2be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/bbb3b58f2befe131d216498bd8fad307.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Nick",
            "real_name": "Nick Winter",
            "display_name": "nick",
            "team": "T5TCAFTA9",
            "name": "nick542",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4ty",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Chiming in with props to Scratch. On the topic of a Scratch reskin: one of my future CodeCombat \/ Ozaria feature ideas is to make a Scratch project importer, where we could take existing Scratch projects, convert them to being hackable in Python\/JS\/CoffeeScript\/Lua\/Java\/C++, increase the framerate, swap out any default sprites for stuff done in our style, and add more available APIs from our own game development track."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579627793.234000",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1579628447.000000"
        },
        "client_msg_id": "ed137009-54d0-4411-b897-3f5afe282752",
        "text": "Hillel wrote a nicer piece here: <https:\/\/buttondown.email\/hillelwayne\/archive\/a-totally-polished-and-not-at-all-half-baked-take\/>\n&gt; Static Typing and Dynamic Typing are orthogonal\nStatic means types are attached to syntax expressions and dynamic means types are attached to runtime objects. So you can have both, technically. But a lot of static langs throw away much of the type definition during run time (they don't have to). In 'one world' languages like Smalltalk, types are attached to objects and it is considered dynamically typed. But what if you verify some type safety of a subset of the the expressions present in the system? Does that make it statically typed and stop being dynamically typed? Or does it end up being both?\n\nI also tweeted this:\nThe static\/dynamic debate requires a point in time such that all information supplied prior to the point is 'static code' and after is 'dynamic data'. This is wrong. At any point the system should be able to verify itself with all available information.\n\nThe refinement (or dependent?) typing aspect that Konrad brought up is another important concern. This also leads to verification by contracts enforced at runtime for things that are 'outside' what the types express. Side node: why are contracts and types expressed so differently? Shouldn't there be one way to express a constraint and the system can then apply it 'as soon as possible or practical'?\n\nI like the verification aspect of static types, but also like the ability to run a part of the program while the whole program may be broken (i.e. doesn't type check) - for fast feedback. That's usually associated with dynamic typing.\n\nI guess what I'm trying to say is there are many aspects here that get lost when the debate is brought up as static vs dynamic. I think more interesting models will emerge when we see the system without that lens. For this reason, I try to stay out of static vs dynamic debates. But as you can see, I fail. :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579556106.218100",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "title": "A Totally Polished and not-at-all half-baked Take on Static vs Dynamic Typing",
                "title_link": "https:\/\/buttondown.email\/hillelwayne\/archive\/a-totally-polished-and-not-at-all-half-baked-take\/",
                "text": "I'm back from Madfest! Since this is a newsletter computer things and not a newsletter about juggling things, I won't say anything about it. Except I got to...",
                "fallback": "A Totally Polished and not-at-all half-baked Take on Static vs Dynamic Typing",
                "thumb_url": "https:\/\/buttondown.email\/static\/images\/icons\/icon@400.png",
                "from_url": "https:\/\/buttondown.email\/hillelwayne\/archive\/a-totally-polished-and-not-at-all-half-baked-take\/",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/buttondown.email\/static\/images\/icons\/icon-square@144.png",
                "service_name": "buttondown.email",
                "id": 1,
                "original_url": "https:\/\/buttondown.email\/hillelwayne\/archive\/a-totally-polished-and-not-at-all-half-baked-take\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OKI=3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hillel wrote a nicer piece here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/buttondown.email\/hillelwayne\/archive\/a-totally-polished-and-not-at-all-half-baked-take\/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Static Typing and Dynamic Typing are orthogonal"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Static means types are attached to syntax expressions and dynamic means types are attached to runtime objects. So you can have both, technically. But a lot of static langs throw away much of the type definition during run time (they don't have to). In 'one world' languages like Smalltalk, types are attached to objects and it is considered dynamically typed. But what if you verify some type safety of a subset of the the expressions present in the system? Does that make it statically typed and stop being dynamically typed? Or does it end up being both?\n\nI also tweeted this:\nThe static\/dynamic debate requires a point in time such that all information supplied prior to the point is 'static code' and after is 'dynamic data'. This is wrong. At any point the system should be able to verify itself with all available information.\n\nThe refinement (or dependent?) typing aspect that Konrad brought up is another important concern. This also leads to verification by contracts enforced at runtime for things that are 'outside' what the types express. Side node: why are contracts and types expressed so differently? Shouldn't there be one way to express a constraint and the system can then apply it 'as soon as possible or practical'?\n\nI like the verification aspect of static types, but also like the ability to run a part of the program while the whole program may be broken (i.e. doesn't type check) - for fast feedback. That's usually associated with dynamic typing.\n\nI guess what I'm trying to say is there are many aspects here that get lost when the debate is brought up as static vs dynamic. I think more interesting models will emerge when we see the system without that lens. For this reason, I try to stay out of static vs dynamic debates. But as you can see, I fail. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1579632026.235100",
        "client_msg_id": "69a2664f-fb8c-44f2-9be8-54c549985d2a",
        "text": "Regarding Snap!, I once used it for a project were I found Scratch too limiting. In particular because I needed custom blocs with return values. It was for explaining how Kmeans algorithm works. It worked perfectly for that. But, I found that Snap! was visually far less engaging than Scratch, and the fact Snap! brings lots of advance programming features (even lambdas!) makes it significantly more complicated to use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZLO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding Snap!, I once used it for a project were I found Scratch too limiting. In particular because I needed custom blocs with return values. It was for explaining how Kmeans algorithm works. It worked perfectly for that. But, I found that Snap! was visually far less engaging than Scratch, and the fact Snap! brings lots of advance programming features (even lambdas!) makes it significantly more complicated to use."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1579632865.235300",
        "client_msg_id": "ef96fcb9-3213-412f-b068-cd88072fb463",
        "text": "<@UJBAJNFLK> brings up a good point about appropriateness of the type system to the domain. And <@U8A5MS6R1> provides an important insight about the relationship between static and dynamic typing.\n\nMy Curv language is intended for live programming of graphical objects. It's intended for visual artists. But it is also its own extension language, so people with developer skills can use it to define new graphics primitives. To make Curv suitable for these two different audiences, I need a \"tiered\" structure. \"High Curv\" is a high level subset that contains everything you need for high level coding: procedural generation of graphical objects. \"Low Curv\" adds additional features that developers can use to define new library APIs with an easy to use interface and an efficient implementation. I want users to be able to develop libraries of new Curv graphics primitives and distribute them across the internet, without forking the project and hacking the C++ runtime. In particular, Low Curv supports GPU programming.\n\nHigh Curv is for end user programming. It needs to be easy to learn. From empirical studies I have read, the two big barriers to learning a programming language are learning the syntax, and learning the type system. High Curv supports live programming, which requires dynamic typing. And it has a very simple type system with a short learning curve. It is unacceptable in High Curv for a user to get a static type error that can only be fixed by adding type annotations. This also requires dynamic typing.\n\nLow Curv supports GPU programming: a Curv function can be compiled into a statically typed GPU kernel. To make this possible, there is a statically typed subset of Curv available within Low Curv.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579556106.218100",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e8n6m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " brings up a good point about appropriateness of the type system to the domain. And "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " provides an important insight about the relationship between static and dynamic typing.\n\nMy Curv language is intended for live programming of graphical objects. It's intended for visual artists. But it is also its own extension language, so people with developer skills can use it to define new graphics primitives. To make Curv suitable for these two different audiences, I need a \"tiered\" structure. \"High Curv\" is a high level subset that contains everything you need for high level coding: procedural generation of graphical objects. \"Low Curv\" adds additional features that developers can use to define new library APIs with an easy to use interface and an efficient implementation. I want users to be able to develop libraries of new Curv graphics primitives and distribute them across the internet, without forking the project and hacking the C++ runtime. In particular, Low Curv supports GPU programming.\n\nHigh Curv is for end user programming. It needs to be easy to learn. From empirical studies I have read, the two big barriers to learning a programming language are learning the syntax, and learning the type system. High Curv supports live programming, which requires dynamic typing. And it has a very simple type system with a short learning curve. It is unacceptable in High Curv for a user to get a static type error that can only be fixed by adding type annotations. This also requires dynamic typing.\n\nLow Curv supports GPU programming: a Curv function can be compiled into a statically typed GPU kernel. To make this possible, there is a statically typed subset of Curv available within Low Curv."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1579640836.237100",
        "client_msg_id": "fe7d7205-5b46-461e-999d-eadd8891287d",
        "text": "A trend in CAD has been a move to parametric design. I was wondering software design would trend the same way. What do you think?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579640836.237100",
        "reply_count": 15,
        "reply_users_count": 7,
        "latest_reply": "1580321705.249000",
        "reply_users": [
            "UQ706GB9U",
            "UC2A2ARPT",
            "UJBAJNFLK",
            "URV7B2542",
            "UE0ETTCG7",
            "U8A5MS6R1",
            "UKASUGYL8"
        ],
        "replies": [
            {
                "user": "UQ706GB9U",
                "ts": "1579640893.237200"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1579641214.237400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1579641435.237600"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1579641816.237800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1579680957.243000"
            },
            {
                "user": "URV7B2542",
                "ts": "1579713306.244900"
            },
            {
                "user": "URV7B2542",
                "ts": "1579713312.245100"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1579886905.085200"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1579886922.085500"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1579886959.085800"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1579887387.086000"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1579978989.127100"
            },
            {
                "user": "UQ706GB9U",
                "ts": "1579979212.127400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1580240744.235800"
            },
            {
                "user": "UKASUGYL8",
                "ts": "1580321705.249000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dW601",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A trend in CAD has been a move to parametric design. I was wondering software design would trend the same way. What do you think?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1579640893.237200",
        "client_msg_id": "05fe0db7-a444-4ba0-b532-889b3106cd96",
        "text": "The programming language that best matches is prolog.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zb7I3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The programming language that best matches is prolog."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1579641214.237400",
        "client_msg_id": "bd43b109-5659-49c7-b9e0-75d7c078904e",
        "text": "in CAD the process for designing a part would be\n1. lay down a basic shape.\n2. add constraints and features.\n3. the software tells you where there is wiggle room or you made a contradiction.\n4. while not done goto 2.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a\/U8C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in CAD the process for designing a part would be\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "lay down a basic shape."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "add constraints and features."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the software tells you where there is wiggle room or you made a contradiction."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "while not done goto 2."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1579641435.237600",
        "client_msg_id": "de310a71-a30c-4a2f-aa0a-8929dc377579",
        "text": "Maybe if you contrasted that process against what CAD was moving away from, we might be more easily able to find some interesting analogies to programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LrZA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe if you contrasted that process against what CAD was moving away from, we might be more easily able to find some interesting analogies to programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UQ706GB9U",
        "type": "message",
        "ts": "1579641816.237800",
        "client_msg_id": "7eb64c61-7dc3-4925-b546-0007bce90d61",
        "text": "i think prolog does step 1 &amp; 2 ok but i think the key is checking under\/over constrained parts. Directing the programmers skill to picking just the right constraint to lock down what the program can do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g80bf3c31da6",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/80bf3c31da6a1f3f44e68bfe227fd35d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0025-72.png",
            "first_name": "George",
            "real_name": "George Campbell",
            "display_name": "George",
            "team": "T5TCAFTA9",
            "name": "abersnaze",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pOm71",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think prolog does step 1 & 2 ok but i think the key is checking under\/over constrained parts. Directing the programmers skill to picking just the right constraint to lock down what the program can do."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UMU2RLPR8",
        "type": "message",
        "ts": "1579642530.238000",
        "client_msg_id": "9e77773b-febb-4c69-902b-cb7fd9912dc6",
        "text": "<https:\/\/twitter.com\/edwinbrady\/status\/1219732949718970373>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "84533398a201",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-10\/756734099191_84533398a201c4f2babe_72.png",
            "first_name": "Ryan",
            "real_name": "Ryan",
            "display_name": "comma",
            "team": "T5TCAFTA9",
            "name": "ryan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579556106.218100",
        "parent_user_id": "U5STGTB3J",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/edwinbrady|@edwinbrady>: I say this partly because some of the reaction to <https:\/\/twitter.com\/lexi_lambda|@lexi_lambda>'s recent very nice blog post seems to be summarised by \"No! This is how you do programming! Everyone's problems are just like mine and everyone thinks the same way as me!\"",
                "ts": 1579641971,
                "author_name": "Edwin Brady",
                "author_link": "https:\/\/twitter.com\/edwinbrady\/status\/1219732949718970373",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/2371172233\/6qlici74wj9h6h5ou35b_normal.jpeg",
                "author_subname": "@edwinbrady",
                "text": "I say this partly because some of the reaction to <https:\/\/twitter.com\/lexi_lambda|@lexi_lambda>'s recent very nice blog post seems to be summarised by \"No! This is how you do programming! Everyone's problems are just like mine and everyone thinks the same way as me!\"",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/edwinbrady\/status\/1219732949718970373",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/edwinbrady\/status\/1219732949718970373",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7BzD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/edwinbrady\/status\/1219732949718970373"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1579645005.241100",
        "client_msg_id": "1fcda4f4-6e5d-49ef-8af9-1d76ad893605",
        "text": "Not finished yet but enjoying this: <https:\/\/www.youtube.com\/watch?v=JQCJCTgzCFo>. So far it's about what computers are, how they related to the real world and the false emphasis on software as 'mathematics' when it there is a lot of non maths. Talks about shortcomings in current programming languages too.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579645005.241100",
        "reply_count": 15,
        "reply_users_count": 7,
        "latest_reply": "1579843024.034000",
        "reply_users": [
            "U8A5MS6R1",
            "UFB8STN7K",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UJBAJNFLK",
            "UFLN9JFRT",
            "UP6G25H35"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1579645059.241300"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1579649270.241800"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1579649396.242000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1579666086.242300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1579676532.242800"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1579681297.243200"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1579681546.243700"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1579681659.243900"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1579682090.244300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579715758.245300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1579716095.245800"
            },
            {
                "user": "UFB8STN7K",
                "ts": "1579721027.246100"
            },
            {
                "user": "UFLN9JFRT",
                "ts": "1579770132.000200"
            },
            {
                "user": "UP6G25H35",
                "ts": "1579842248.028100"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1579843024.034000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "VDB17 • Branislav Selic - On the Engineering of Software-Based Systems for the 21 st Century",
                "title_link": "https:\/\/www.youtube.com\/watch?v=JQCJCTgzCFo",
                "author_name": "voxxeddays",
                "author_link": "https:\/\/www.youtube.com\/channel\/UCCuk9PF9aVcPOSsVwDzyrRQ",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/JQCJCTgzCFo\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: VDB17 • Branislav Selic - On the Engineering of Software-Based Systems for the 21 st Century",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/JQCJCTgzCFo?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=JQCJCTgzCFo",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=JQCJCTgzCFo"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FiMa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not finished yet but enjoying this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=JQCJCTgzCFo"
                            },
                            {
                                "type": "text",
                                "text": ". So far it's about what computers are, how they related to the real world and the false emphasis on software as 'mathematics' when it there is a lot of non maths. Talks about shortcomings in current programming languages too."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "U7C7B75R6",
                    "UKASUGYL8",
                    "UCSJ44X1S",
                    "UFLN9JFRT"
                ],
                "count": 5
            },
            {
                "name": "memo",
                "users": [
                    "UKASUGYL8"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "Another slide from the talk.",
        "files": [
            {
                "id": "FSY3A1GER",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yins",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another slide from the talk."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1579645059.241300",
        "client_msg_id": "9caa679d-f966-4a1a-8249-c57b0e7c6167",
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1579649270.241800",
        "client_msg_id": "69689091-1b7d-47b4-b769-4761c23b8825",
        "text": "I think he articulates well a number of interesting issues with conventional languages. My core issue with the talk is he spends all this time disparaging programming-as-math, yet that domain (PL theory) is doing more than any other field to address the problems he wants.\n\nConsider these strawmen he set up about “time being removed from programming”, or “the climate orbiter failing due to mismatched units”. Those are exactly problems being addressed in PL research. Every single “non-functional” property listed is a topic of PL research. I don’t know who draws that weird dichotomy he sets up, but it’s definitely no one designing today’s PLs.\n\nAs a few examples of some things he listed later on:\n\n• Modeling complex communications with multi-party session types (<https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/1328438.1328472>)\n• Representing real time in a type system (<https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/3236786>)\n• Type-safe dimensional analysis (<https:\/\/github.com\/iliekturtles\/uom>)\nThen he goes on to give the terrible hand-wave answer “DSLs will solve our problems”. To me, it’s just saying: “we need better tools to model our domains”, i.e. better libraries. His only justification of languages over libraries is to give a weird argument about how a semaphore class needs to be compiled differently than a queue class?? Makes no sense to me.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n=1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think he articulates well a number of interesting issues with conventional languages. My core issue with the talk is he spends all this time disparaging programming-as-math, yet that domain (PL theory) is doing more than any other field to address the problems he wants.\n\nConsider these strawmen he set up about “time being removed from programming”, or “the climate orbiter failing due to mismatched units”. Those are exactly problems being addressed in PL research. Every single “non-functional” property listed is a topic of PL research. I don’t know who draws that weird dichotomy he sets up, but it’s definitely no one designing today’s PLs.\n\nAs a few examples of some things he listed later on:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Modeling complex communications with multi-party session types ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/1328438.1328472"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Representing real time in a type system ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/dl.acm.org\/doi\/pdf\/10.1145\/3236786"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Type-safe dimensional analysis ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/github.com\/iliekturtles\/uom"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen he goes on to give the terrible hand-wave answer “DSLs will solve our problems”. To me, it’s just saying: “we need better tools to model our domains”, i.e. better libraries. His only justification of languages over libraries is to give a weird argument about how a semaphore class needs to be compiled differently than a queue class?? Makes no sense to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1579649396.242000",
        "client_msg_id": "51e2de2f-2a89-4d10-9394-7fabcaba80db",
        "text": "Coming up with a formal, general, extensible, verifiable  model of concepts like time, communication, etc. are deeply challenging problems. It’s great he identifies the concepts most relevant to his experience in cyber-physical systems. But people are working on those problems, just not in the context of conventional languages with crippled type systems.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=4MQF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Coming up with a formal, general, extensible, verifiable  model of concepts like time, communication, etc. are deeply challenging problems. It’s great he identifies the concepts most relevant to his experience in cyber-physical systems. But people are working on those problems, just not in the context of conventional languages with crippled type systems."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1579666086.242300",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1579666254.000000"
        },
        "client_msg_id": "680af047-d057-4f3b-be82-31b65fa51cba",
        "text": "A wonderful lecture from a grizzled veteran. He may not have the answers, but he is very clear on the problems. He wanted to see physical units of measurement, and a syntax for a finite state machine, both of which are in the Beads syntax. I am pondering his proposal to have both a unit of time and a time interval type. Most people think of a time interval as a non-dimensional quantity (if you assume seconds).  Will have to think about that.  If you clutter up the language with too many primitive types it can get cumbersome.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mQY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A wonderful lecture from a grizzled veteran. He may not have the answers, but he is very clear on the problems. He wanted to see physical units of measurement, and a syntax for a finite state machine, both of which are in the Beads syntax. I am pondering his proposal to have both a unit of time and a time interval type. Most people think of a time interval as a non-dimensional quantity (if you assume seconds).  Will have to think about that.  If you clutter up the language with too many primitive types it can get cumbersome."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1579676532.242800",
        "client_msg_id": "aec7324f-1ad0-4ca0-be72-150a38f2d625",
        "text": "Part of the challenge is that the programming world is a lot bigger with a lot more noise these days.  There may be a strong signal, but unless you're tuned to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aNF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Part of the challenge is that the programming world is a lot bigger with a lot more noise these days.  There may be a strong signal, but unless you're tuned to it."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]