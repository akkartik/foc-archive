[
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1612092960.088700",
        "client_msg_id": "e842863f-3891-465d-a3e5-7f193fb55e74",
        "text": "I really like Dan Bricklin's TED talk: <https:\/\/www.ted.com\/talks\/dan_bricklin_meet_the_inventor_of_the_electronic_spreadsheet#t-413373>\n\nI started playing around with Excel at a very young age. Like others have said already, it's really easy to get started. Just point somewhere and enter some text or numbers. You can then gently discover more and more functionality just by searching through the menus and lists of formulas. By the age of 14, I knew more about Excel than my IT teacher in school.\nExcel is an environment in which you can discover new things and try if they do what you want. I was able to learn about much of Excel's functionality without using external sources. I didn't need to use google often and didn't even know what stackoverflow was at that time. This is a large contrast to learning a \"proper\" programming language where you start on an empty text buffer and need to research what you may put into it.\nUsing Excel requires so much less computer science knowledge than mainstream programming languages (e.g. \"what's the difference between an int and a float?\"), and yet you can solve a lot of real-world problems with it. This focus on end-user problems and abstraction of technical details (e.g. \"what is execution?\") is a big part of Excel's success and something we still don't really see in mainstream programming languages.\nThat being said, you'll reach the ceiling of what Excel is good at sooner or later. This is where macros, VBA and friends come in and ruin the experience. A lot of future of coding ideas want to improve on this, making spreadsheets scale gracefully to more complex use cases while retaining the low barrier of entry.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1611808287.047800",
        "parent_user_id": "UFPRPSA4S",
        "attachments": [
            {
                "service_name": "TED",
                "service_url": "https:\/\/www.ted.com",
                "title": "Dan Bricklin: Meet the inventor of the electronic spreadsheet",
                "title_link": "https:\/\/www.ted.com\/talks\/dan_bricklin_meet_the_inventor_of_the_electronic_spreadsheet#t-413373",
                "author_name": "Dan Bricklin",
                "author_link": "https:\/\/www.ted.com\/speakers\/dan_bricklin",
                "thumb_url": "https:\/\/pi.tedcdn.com\/r\/talkstar-photos.s3.amazonaws.com\/uploads\/043e6e74-38fe-46c6-a2f6-eb60ebeb0b08\/DanBricklin_2016X-embed.jpg?h=150&w=267",
                "thumb_width": 267,
                "thumb_height": 150,
                "text": "Dan Bricklin changed the world forever when he codeveloped VisiCalc, the first electronic spreadsheet and grandfather of programs you probably use every day like Microsoft Excel and Google Sheets. Join the software engineer and computing legend as he explores the tangled web of first jobs, daydreams and homework problems that led to his transformational invention.",
                "fallback": "TED Video: Dan Bricklin: Meet the inventor of the electronic spreadsheet",
                "from_url": "https:\/\/www.ted.com\/talks\/dan_bricklin_meet_the_inventor_of_the_electronic_spreadsheet#t-413373",
                "service_icon": "https:\/\/pa.tedcdn.com\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.ted.com\/talks\/dan_bricklin_meet_the_inventor_of_the_electronic_spreadsheet#t-413373"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XI7Ay",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like Dan Bricklin's TED talk: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.ted.com\/talks\/dan_bricklin_meet_the_inventor_of_the_electronic_spreadsheet#t-413373"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI started playing around with Excel at a very young age. Like others have said already, it's really easy to get started. Just point somewhere and enter some text or numbers. You can then gently discover more and more functionality just by searching through the menus and lists of formulas. By the age of 14, I knew more about Excel than my IT teacher in school.\nExcel is an environment in which you can discover new things and try if they do what you want. I was able to learn about much of Excel's functionality without using external sources. I didn't need to use google often and didn't even know what stackoverflow was at that time. This is a large contrast to learning a \"proper\" programming language where you start on an empty text buffer and need to research what you may put into it.\nUsing Excel requires so much less computer science knowledge than mainstream programming languages (e.g. \"what's the difference between an int and a float?\"), and yet you can solve a lot of real-world problems with it. This focus on end-user problems and abstraction of technical details (e.g. \"what is execution?\") is a big part of Excel's success and something we still don't really see in mainstream programming languages.\nThat being said, you'll reach the ceiling of what Excel is good at sooner or later. This is where macros, VBA and friends come in and ruin the experience. A lot of future of coding ideas want to improve on this, making spreadsheets scale gracefully to more complex use cases while retaining the low barrier of entry."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    }
]