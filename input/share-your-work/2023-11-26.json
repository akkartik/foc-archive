[
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1700992041.880869",
        "client_msg_id": "d049b9f2-5abf-4594-bfe1-bfc6116c2a1e",
        "text": "I found the discussion of the history of logic fascinating, but I didn't really follow what the actual correspondences were between propositions and types, proofs and programs, and reduction and execution. Did you actually explain how these correspondences work and I missed it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UwxkB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I found the discussion of the history of logic fascinating, but I didn't really follow what the actual correspondences were between propositions and types, proofs and programs, and reduction and execution. Did you actually explain how these correspondences work and I missed it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URKQXRCAC",
        "type": "message",
        "ts": "1701000708.436069",
        "edited": {
            "user": "URKQXRCAC",
            "ts": "1701001211.000000"
        },
        "client_msg_id": "1a850304-bf52-4ec3-8eed-6211c84fc9f9",
        "text": "Interesting examples Duncan! I like them. Wondering how things might get combined, although I get the feeling you would like to stay away from such a situation. At some level you probably need to specify the Object\/Link\/Rule behaviour in a more imperative way. My ideas with respect to the new language (model) would certainly include that Pockets (slots) are always accessible. Thereby allowing data to remain free. Security, like access control, should be built in on another level. Might be less secure approach, but I'm favouring flexibility and having full 'control' (freedom?) over strict access.\nSo with the free data access and dynamically adding behaviour, a user model could be created which matches your ideas. Maybe I'll give it a spin (one day, when I actually implemented the language from all the notes and design thingies I created over the past months\/years ;-).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a55b20870fb9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-23\/6253994675665_a55b20870fb92473e7e8_72.png",
            "first_name": "Erik",
            "real_name": "Erik Stel",
            "display_name": "Erik Stel",
            "team": "T5TCAFTA9",
            "name": "foc572",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N9q8V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting examples Duncan! I like them. Wondering how things might get combined, although I get the feeling you would like to stay away from such a situation. At some level you probably need to specify the Object\/Link\/Rule behaviour in a more imperative way. My ideas with respect to the new language (model) would certainly include that Pockets (slots) are always accessible. Thereby allowing data to remain free. Security, like access control, should be built in on another level. Might be less secure approach, but I'm favouring flexibility and having full 'control' (freedom?) over strict access.\nSo with the free data access and dynamically adding behaviour, a user model could be created which matches your ideas. Maybe I'll give it a spin (one day, when I actually implemented the language from all the notes and design thingies I created over the past months\/years ;-)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1701009272.736019",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1701009307.000000"
        },
        "client_msg_id": "122ff9ab-c548-4818-adb1-1303d25552a4",
        "text": "Thanks for taking the time and trouble to take a look at the slides. I hope they made some sense.\n\nI'm struggling with understanding:\n\n> Wondering how things might get combined, although I get the feeling you would like to stay away from such a situation. \nCan you elaborate on \"combined\" and the \"situation\" I would avoid?!\n\n> At some level you probably need to specify the Object\/Link\/Rule behaviour in a more imperative way.\nOn the \"level\" that would need to be \"imperative\": yes internal default hard-coded behaviours are written in C! Is that what you meant?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EGjti",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for taking the time and trouble to take a look at the slides. I hope they made some sense.\n\nI'm struggling with understanding:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wondering how things might get combined, although I get the feeling you would like to stay away from such a situation. "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCan you elaborate on \"combined\" and the \"situation\" I would avoid?!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "At some level you probably need to specify the Object\/Link\/Rule behaviour in a more imperative way."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOn the \"level\" that would need to be \"imperative\": yes internal default hard-coded behaviours are written in C! Is that what you meant?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URKQXRCAC",
        "type": "message",
        "ts": "1701030597.538289",
        "client_msg_id": "6BE696C5-0C47-4898-BD14-02B2CA3F425E",
        "text": "Quick reply: exactly what I meant. And thus both seem necessary. I thought you wanted only declarative. But understand it now. I personally would not mind a more mixed solution. Where users can also use an imperative model. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a55b20870fb9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-23\/6253994675665_a55b20870fb92473e7e8_72.png",
            "first_name": "Erik",
            "real_name": "Erik Stel",
            "display_name": "Erik Stel",
            "team": "T5TCAFTA9",
            "name": "foc572",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dc0+e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quick reply: exactly what I meant"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " And thus both seem necessary"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I thought you wanted only declarative"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " But understand it now"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I personally would not mind a more mixed solution"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Where users can also use an imperative model"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1701032596.274089",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1701032625.000000"
        },
        "client_msg_id": "64b52651-2999-49bb-9d96-47a4fe685259",
        "text": "Oh, no, users don't write imperative code - imperative C for coders, declarative Onex for normies!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700075023.858329",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NSFGN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, no, users don't write imperative code - imperative C for coders, declarative Onex for normies!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1701045177.353749",
        "client_msg_id": "8849761d-fa0d-43e7-a319-e3728f52d4f2",
        "text": "To <@U0669J3HJJJ> and <@U0625T25APL> — Thank you!\n\n<@U03CEGR3HSL>, no, you didn't miss anything. We didn't explain it. I don't even understand it, and twice now I _almost_ finished reading the paper, and watched the talk a handful of times (which certainly doesn't try to explain it).\n\nI would at least be curious to know how _subtle_ or _obscure_ the explanation is. Like, would an undergraduate-level understanding of logic suffice?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2\/WGB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To "
                            },
                            {
                                "type": "user",
                                "user_id": "U0669J3HJJJ"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U0625T25APL"
                            },
                            {
                                "type": "text",
                                "text": " — Thank you!\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": ", no, you didn't miss anything. We didn't explain it. I don't even understand it, and twice now I "
                            },
                            {
                                "type": "text",
                                "text": "almost",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " finished reading the paper, and watched the talk a handful of times (which certainly doesn't try to explain it).\n\nI would at least be curious to know how "
                            },
                            {
                                "type": "text",
                                "text": "subtle",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "obscure",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the explanation is. Like, would an undergraduate-level understanding of logic suffice?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "Maybe I'm remembering the conversation rather than the edit, but I'm fairly sure we give Wadler's example correspondence between Gentzen's Natural Deduction and the Simply Typed Lambda calculus. Disjunction is the disjoint sum, conjunction is a cartesian product, and implications are functions. Of course the correspondence doesn't stop there, there are tons of logic's for which you can do similar things. Here the two little snippets from the paper. The one with red and blue is Lambda Calculus the only blue is Natural Deduction and you can see the direct correspondence",
        "files": [
            {
                "id": "F06756BRMRU",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F067BN7QT6X",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ff4OC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe I'm remembering the conversation rather than the edit, but I'm fairly sure we give Wadler's example correspondence between Gentzen's Natural Deduction and the Simply Typed Lambda calculus. Disjunction is the disjoint sum, conjunction is a cartesian product, and implications are functions. Of course the correspondence doesn't stop there, there are tons of logic's for which you can do similar things. Here the two little snippets from the paper. The one with red and blue is Lambda Calculus the only blue is Natural Deduction and you can see the direct correspondence"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1701050550.034979",
        "client_msg_id": "f4e2ea19-5d09-46d9-9efd-0fae0c3284db",
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1701050671.925859",
        "client_msg_id": "E3ABD927-EA9F-4653-92F5-D0159EC0745B",
        "text": "Yeah, but how does the correspondence work? Like, what's the proof that they're equivalent? I've just been taking it as granted because I have little hope of understanding the explanation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h7jzY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, but how does the correspondence work? Like, what's the proof that they're equivalent? I've just been taking it as granted because I have little hope of understanding the explanation"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1701050744.082609",
        "client_msg_id": "E0E6B475-9F51-4B8D-9DC9-B5B0B5D6DA48",
        "text": "Eg — \"disjunction is the disjoint sum\" — why? How? What other things might disjunction correspond to elsewhere, say in physics or geometry, and how do we prove that?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WyXz1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Eg — \"disjunction is the disjoint sum\" — why? How? What other things might disjunction correspond to elsewhere, say in physics or geometry, and how do we prove that?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1701051011.726879",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1701051050.000000"
        },
        "client_msg_id": "39d7f994-3cc8-4ed8-b072-737fbd675101",
        "text": "<@UC2A2ARPT> <@UK3LH8CF5>  I guess I need to watch the talk and read the paper.\n\nAt a very high level, I can grasp how propositions might correspond to types, since a proposition defines the set of values for which it is true and a type is a set of values that are allowed.\n\nI can also very roughly grasp how evaluation and simplification might be related to each other, but not well enough to explain it.\n\nI definitely don't understand how a program corresponds to a proof. Given an arbitrary program, what does that program prove? Is it something trivial like \"The answer this program calculates can be calculated\"? Or is it something more meaningful that I don't get?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "60vUC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "  I guess I need to watch the talk and read the paper.\n\nAt a very high level, I can grasp how propositions might correspond to types, since a proposition defines the set of values for which it is true and a type is a set of values that are allowed.\n\nI can also very roughly grasp how evaluation and simplification might be related to each other, but not well enough to explain it.\n\nI definitely don't understand how a program corresponds to a proof. Given an arbitrary program, what does that program prove? Is it something trivial like \"The answer this program calculates can be calculated\"? Or is it something more meaningful that I don't get?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1701051060.459579",
        "client_msg_id": "546dcd5a-5e10-45d0-ace4-21e4e61ce54a",
        "text": "<@UC2A2ARPT>\nI don't understand the question. We can make a mapping (that is structure preserving) between disjunction and disjoint sums. Think of it as a recursive function that just pattern matches on the bits. We are able to make a function from Lambda -&gt; NaturalDeduction and vice versa. I mean, you can walk through the formal proof it. But I'm guess that isn't what you are looking for.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YkL+o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "\nI don't understand the question. We can make a mapping (that is structure preserving) between disjunction and disjoint sums. Think of it as a recursive function that just pattern matches on the bits. We are able to make a function from Lambda -> NaturalDeduction and vice versa. I mean, you can walk through the formal proof it. But I'm guess that isn't what you are looking for."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "<@U03CEGR3HSL> Definitely recommend reading the paper to understand more. Here's the example of a proof being simplified, and a program being executed.",
        "files": [
            {
                "id": "F067BP22W1H",
                "mode": "hidden_by_limit"
            },
            {
                "id": "F0680RL39FA",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "UK3LH8CF5",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xu2my",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " Definitely recommend reading the paper to understand more. Here's the example of a proof being simplified, and a program being executed."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1701051226.243209",
        "client_msg_id": "e44b2a3d-7d0d-41cd-8de2-11d4ba17210f",
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1701051383.141679",
        "client_msg_id": "d722f1b3-71c4-49fc-b497-4e144053e9db",
        "text": "Also, thanks for the reference to the incredible proof machine. That was a pleasant way to kill a few hours so far, and I've still got a lot of proofs left. :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fgilx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, thanks for the reference to the incredible proof machine. That was a pleasant way to kill a few hours so far, and I've still got a lot of proofs left. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UK3LH8CF5",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1701051402.740589",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1701051454.000000"
        },
        "client_msg_id": "c18db658-3532-45c2-9417-a747ff8ce62b",
        "text": "As for the arbitrary program, you could find its correspondence by converting it to lambda calculus and then converting to a proposition. If the program is expressible in the simply typed lambda calculus, you can directly see the proposition it is a proof of.\n\nOf course the simply typed lambda calculus isn't the most expressive, so people usually add more. For example, this was a proof I wrote forever ago in Idris whose type system is based on this stuff. <https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/AbstractAlgebra.idr>\n\n(You can ignore the elab stuff which is more tradition proof system stuff. The code below is really just functional programming that gives you proofs)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mOPvg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for the arbitrary program, you could find its correspondence by converting it to lambda calculus and then converting to a proposition. If the program is expressible in the simply typed lambda calculus, you can directly see the proposition it is a proof of.\n\nOf course the simply typed lambda calculus isn't the most expressive, so people usually add more. For example, this was a proof I wrote forever ago in Idris whose type system is based on this stuff. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jimmyhmiller\/PlayGround\/blob\/master\/idrisTests\/src\/AbstractAlgebra.idr"
                            },
                            {
                                "type": "text",
                                "text": "\n\n(You can ignore the elab stuff which is more tradition proof system stuff. The code below is really just functional programming that gives you proofs)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03CEGR3HSL",
        "type": "message",
        "ts": "1701051880.262089",
        "client_msg_id": "82a1a937-89d1-4e1b-8c17-e8d2d5be0b40",
        "text": "<@UK3LH8CF5>  Thank you for the examples. I will have to try and understand them after watching the talk and reading the paper.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g7fd1bd5c536",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7fd1bd5c53681452a80086a54ebb2ad1.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Personal",
            "real_name": "Personal Dynamic Media",
            "display_name": "Personal Dynamic Media",
            "team": "T5TCAFTA9",
            "name": "personaldynamicmedia",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0V1jM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "  Thank you for the examples. I will have to try and understand them after watching the talk and reading the paper."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1701052132.030689",
        "client_msg_id": "2f573a5e-f670-4bf8-84ae-1556ecde3074",
        "text": "<@UC2A2ARPT>\n&gt; What other things might disjunction correspond to elsewhere, say in physics or geometry, and how do we prove that?\nI don't understand the physics part. Physics just uses math. As for geometry, there are a bunch of complicated stuff like homotopy type theory that deal with that kind of thing.\n\nBut as you mentioned in the episode, there are unions and intersections which are sums and products in the same way disjunction and conjunction are.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1700373745.504449",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OAxen",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What other things might disjunction correspond to elsewhere, say in physics or geometry, and how do we prove that?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't understand the physics part. Physics just uses math. As for geometry, there are a bunch of complicated stuff like homotopy type theory that deal with that kind of thing.\n\nBut as you mentioned in the episode, there are unions and intersections which are sums and products in the same way disjunction and conjunction are."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UH84GQ3CZ",
        "type": "message",
        "ts": "1701060778.192559",
        "client_msg_id": "b8819f10-1529-4b21-9df1-8d5504bc8c75",
        "text": "Hi all, I've been inactive here for a long time. Progress on my big project, a collaborative mobile-friendly development environment, has been very slow. However, along the way I've built some libraries which may be of interest to some people here.\n\nOn the languages and parsing side, I've built <https:\/\/github.com\/jhp\/recursive-grammar-literal|recursive grammar literals> which lets you write CFGs as normal javascript functions. And <https:\/\/github.com\/jhp\/church-cat|church-cat> which lets you compute over a tree structure, e.g. annotate a parse tree.\n\nOn the UI side I've built <https:\/\/github.com\/jhp\/imperative|imperative> which is a frontend javascript library much like React, but based on generators and structured concurrency. And most recently I've been working on <https:\/\/github.com\/jhp\/palimpsest|Palimpsest> which covers the backend of web development with a more functional or \"event-sourced\" style where data sources are computed as folds over input streams. My interest there is to allow stateful applications to be more easily shared, forked, and extended by their users etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "590662e8a2ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-16\/610501525696_590662e8a2ae7b2c73e9_72.jpg",
            "first_name": "",
            "real_name": "Jason Priestley",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jasonhpriestley",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1701060778.192559",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1701719020.800179",
        "reply_users": [
            "U0669J3HJJJ"
        ],
        "replies": [
            {
                "user": "U0669J3HJJJ",
                "ts": "1701719020.800179"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j7ciV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all, I've been inactive here for a long time. Progress on my big project, a collaborative mobile-friendly development environment, has been very slow. However, along the way I've built some libraries which may be of interest to some people here.\n\nOn the languages and parsing side, I've built "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jhp\/recursive-grammar-literal",
                                "text": "recursive grammar literals"
                            },
                            {
                                "type": "text",
                                "text": " which lets you write CFGs as normal javascript functions. And "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jhp\/church-cat",
                                "text": "church-cat"
                            },
                            {
                                "type": "text",
                                "text": " which lets you compute over a tree structure, e.g. annotate a parse tree.\n\nOn the UI side I've built "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jhp\/imperative",
                                "text": "imperative"
                            },
                            {
                                "type": "text",
                                "text": " which is a frontend javascript library much like React, but based on generators and structured concurrency. And most recently I've been working on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jhp\/palimpsest",
                                "text": "Palimpsest"
                            },
                            {
                                "type": "text",
                                "text": " which covers the backend of web development with a more functional or \"event-sourced\" style where data sources are computed as folds over input streams. My interest there is to allow stateful applications to be more easily shared, forked, and extended by their users etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "face_with_monocle",
                "users": [
                    "U05PESXCC2E"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "U03C0DRJB8B"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U0669J3HJJJ",
                    "U01AF83HSE4"
                ],
                "count": 2
            }
        ]
    }
]