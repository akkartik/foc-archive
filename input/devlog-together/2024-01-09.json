[
    {
        "user": "U04E5QAD6DD",
        "type": "message",
        "ts": "1704809704.486409",
        "client_msg_id": "dc7a4952-df2d-4341-adbd-c64ff36331db",
        "text": "I wonder why, exactly, this is such a (ahem) persistent problem? I can only speak for myself, but I wonder if it is because most of the solutions tend to require buying in to a \"whole stack\"? Meteor (an early web-dev framework) tried to fix this, I think, but they sure didn't reach a huge mindshare. I suspect because one _had_ to use Node and MongoDB?\n\nStill, it doesn't seem like it should be such an intractable problem. Are there other attempted solutions out there in other platforms?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e3e6bba2ae45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-06\/5085861186081_e3e6bba2ae4575d17358_72.jpg",
            "first_name": "David",
            "real_name": "David Alan Hjelle",
            "display_name": "David Alan Hjelle",
            "team": "T5TCAFTA9",
            "name": "dahjelle_futureofcodi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704480422.634899",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "heo8R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder why, exactly, this is such a (ahem) persistent problem? I can only speak for myself, but I wonder if it is because most of the solutions tend to require buying in to a \"whole stack\"? Meteor (an early web-dev framework) tried to fix this, I think, but they sure didn't reach a huge mindshare. I suspect because one "
                            },
                            {
                                "type": "text",
                                "text": "had",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to use Node and MongoDB?\n\nStill, it doesn't seem like it should be such an intractable problem. Are there other attempted solutions out there in other platforms?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1704852717.336839",
        "client_msg_id": "79fa17e6-d373-4030-8374-2fc053c2b7ec",
        "text": "<@U04E5QAD6DD> Yeah,  I think a big part of it is that there are so many pieces that need to come together. For example, transparent persistence at the model level, efficient mutation tracking for model objects and primitives, abstractions around slots to manage all the data related to storage and synchronization, an object\/graph database with on disk garbage collection, storage transactions to ensure consistency, coalesced Notifications and scheduled actions, wrappers around all events so synchronization can be managed before returning to the event loop (and which deals with quirks of the event system like Javascript having some events within others), a standard UI framework that supports the protocol, etc. These things can't just be mixed and matched. e.g. using some UI framework components that don't have the proper wrapping of events and model protocols could break synchronization.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1704480422.634899",
        "parent_user_id": "U02U0AS3J49",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4mple",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U04E5QAD6DD"
                            },
                            {
                                "type": "text",
                                "text": " Yeah,  I think a big part of it is that there are so many pieces that need to come together. For example, transparent persistence at the model level, efficient mutation tracking for model objects and primitives, abstractions around slots to manage all the data related to storage and synchronization, an object\/graph database with on disk garbage collection, storage transactions to ensure consistency, coalesced Notifications and scheduled actions, wrappers around all events so synchronization can be managed before returning to the event loop (and which deals with quirks of the event system like Javascript having some events within others), a standard UI framework that supports the protocol, etc. These things can't just be mixed and matched. e.g. using some UI framework components that don't have the proper wrapping of events and model protocols could break synchronization."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U04E5QAD6DD"
                ],
                "count": 1
            }
        ]
    }
]