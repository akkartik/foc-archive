[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1565360218.038000",
        "client_msg_id": "9A5324D9-8309-4974-B4B4-1DE116779E40",
        "text": "it’s a custom stack and it’s open source",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565283550.037000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J6d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it’s a custom stack and it’s open source"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1565360248.038300",
        "client_msg_id": "604932FA-83EC-44D7-BEB7-5D49578B62EA",
        "text": "<https:\/\/github.com\/3b1b\/manim>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565283550.037000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XgCZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/3b1b\/manim"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1565360286.038600",
        "client_msg_id": "B9401287-0F5C-4C9F-B699-7D672DA79DB0",
        "text": "(python)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565283550.037000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "diCmA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(python)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1565360331.038800",
        "client_msg_id": "C7AE0B18-D61A-446B-A31C-820F5DF2DD14",
        "text": "tutorial: <https:\/\/talkingphysics.wordpress.com\/2019\/01\/08\/getting-started-animating-with-manim-and-python-3-7\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565283550.037000",
        "parent_user_id": "UHWC9PXBL",
        "attachments": [
            {
                "service_name": "Talking Physics",
                "service_url": "http:\/\/talkingphysics.wordpress.com",
                "title": "Getting Started Animating with manim and Python 3.7",
                "title_link": "https:\/\/talkingphysics.wordpress.com\/2019\/01\/08\/getting-started-animating-with-manim-and-python-3-7\/",
                "author_name": "talkingphysics",
                "author_link": "https:\/\/talkingphysics.wordpress.com\/author\/talkingphysics\/",
                "thumb_url": "https:\/\/talkingphysics.files.wordpress.com\/2018\/12\/Screenshot-2018-12-18-11.21.33.png?fit=200%2C150",
                "thumb_width": 199,
                "thumb_height": 20,
                "text": "I previously wrote a series of blog posts detailing how to use manim, the mathematical animation package created by Grant Sanderson of 3Blue1Brown. Since I&rsquo;ve written those posts there have been many changes to manim, including switching to Python 3.7. I will go through and update my information for the version of manim as of December, 2018. Much of the information will be a repeat of earlier posts in situations where there have been no changes to the manim code. The primary changes from my previous series of posts are related to changes to manim, primarily in dealing with 3D scenes. Note that future versions may break some of these commands, but hunting down the problems is the best way to learn the inner workings of manim.\n1.0 Installing manim\nBrian Howell has put together a really nice post on how to install the necessary components of manim at  &nbsp;One of the most useful tips for making sure everything works is to use virtual environments.&nbsp; If you have trouble getting manim working I suggest asking for help on the github page for manim since that has an active group of users who can typically help out.\nThe Readme docs on github also have instructions on installing manim.\nTo make sure you installation is working you can run the example file that comes with manim.&nbsp; Type python -m manim example_scenes.py -pl.&nbsp; If this produces errors you should check out the Issues tab on the github site since frequently someone else has had the same issue.\n2.0 Creating Your First Scene\nYou can copy and paste the code below into a new text file and save it as manim_tutorial_P37.py in the top-level manim directory or you can download all of the tutorials at . The .py extension tells your operating system that this is a Python file.\nOpen up a&nbsp; command line window and go to the top-level manim directory, and type python -m manim pymanim_tutorial_P37.py Shapes -pl\nWe are calling the Python interpreter with the python command.&nbsp; If you have multiple versions of Python installed you may need to call python3&nbsp;rather than just python&nbsp;(I use Anaconda virtual environments to keep all manim-related Python code in one handy place).\nThe first argument passed to Python, manim is running manim.py in the main manim directory (we&rsquo;ll ignore the -m switch, which you should include). It looks like you can live-stream the output to Twitch but I&rsquo;m not using that feature so I&rsquo;ll focus on extract_scene.py, which is called from manim.py and which is the code that runs your script and creates a video file. The second argument, manim_tutorial_P37.py is the name of the file (i.e. the module) where your script is stored. The third argument, Shapes is the name of the class (i.e. the scene name) defined within your file that gives instructions on how to construct a scene. The last arguments, -pl tell the extract_scene script to preview the animation by playing it once it is done and to render the animation in low quality, which speeds up the time to create the animation. Typing python -m manim --help&nbsp;will pull up a list of the different arguments you can use when calling python -m manim.\n\nfrom big_ol_pile_of_manim_imports import *\n\nclass Shapes(Scene):\n    #A few simple shapes\n    def construct(self):\n        circle = Circle()\n        square = Square()\n        line=Line(np.array([3,0,0]),np.array([5,0,0]))\n        triangle=Polygon(np.array([0,0,0]),np.array([1,1,0]),np.array([1,-1,0]))\n\n        self.add(line)\n        self.play(ShowCreation(circle))\n        self.play(FadeOut(circle))\n        self.play(GrowFromCenter(square))\n        self.play(Transform(square,triangle))\n\n&nbsp;\nIf everything works you should see the following messages (or something similar) in your terminal:\n\nThe first line in the command terminal tells you where the video file is being saved. The next several lines list the name of the animation commands that you called, along with some information about how long it took for each animation and other info I don&rsquo;t understand. The last line just lets you know how many animations were called in your script.\nThe video should look like this:\n\nAll of the various manim modules are contained in big_ol_pile_of_manim_imports.py so importing this gives you all of the basic features of manim. This doesn&rsquo;t include every single module from manim but it contains the core modules. You can look at the modules included here. It is worth your time to dive into some of the modules to see how things are put together. I&rsquo;ve learned a surprising amount of Python by trying to figure out how things work. Incidentally I find using the search box at  very helpful for finding different classes and figuring out what arguments they take and how they work. Documentation is also being put together for manim here, although it is still a work in progress.\n2.1 Scenes and Animation\nThe Scene is the script that tells manim how to place and animate your objects on the screen. I read that each 3blue1brown video is created as individual scenes which are stitched together using video editing software. You must define each scene as a separate class that is a subclass of Scene. This class must have a construct() method, along with any other code required for creating objects, adding them to the screen, and animating them. The construct() method is essentially the main method in the class that gets called when run through extract_scene.py (which is called by the manim.py script). It is similar to __init__; it is the method that is automatically called when you create an instance of any subclass of Scene. Within this method you should define all of your objects, any code needed to control the objects, and code to place the objects onscreen and animate them.\nFor this first scene we&rsquo;ve created a circle, a square, a line, and a triangle. Note that the coordinates are specified using numpy arrays np.array(). You can pass a 3-tuple like (3,0,0), which works sometimes, but some of the transformation methods expect the coordinates to be a numpy array.\nOne of the more important methods from the Scene() class is the play() method. play() is what processes the various animations you ask manim to perform. My favorite animation is Transform, which does a spectacular job of morphing one math object (a mobject) into another. This scene shows a square changing into a triangle, but you can use the transform to morph any two objects together. To have objects appear on the screen without any animation you can use add() to place them. The line has been added and shows up in the very first frame, while the other objects either fade in or grow. The naming of the transformations is pretty straight forward so it&rsquo;s usually obvious what each one does.\nThings to try\n&ndash; Change the order of the add() and play() commands. How does changing the order affect when they appear on the screen.\n&ndash; Try using the Transform() method on other shapes.\n&ndash; Check out the shapes defined in geometry.py which is located in the \/manim\/manimlib\/mobject\/ folder.\n3.0 More Shapes\nYou can create almost any geometric shape using manim. You can create circles, squares, rectangles, ellipses, lines, and arrows. Let&rsquo;s take a look at how to draw some of those shapes.\nYou can download the completed code here: manim_tutorial_P37.py. After downloading the tutorial file to your top level manim directory you can type the following into the command line to run this scene: python -m manim manim_tutorial_P37.py MoreShapes -pl.\n\nclass MoreShapes(Scene):\n    def construct(self):\n        circle = Circle(color=PURPLE_A)\n        square = Square(fill_color=GOLD_B, fill_opacity=1, color=GOLD_A)\n        square.move_to(UP+LEFT)\n        circle.surround(square)\n        rectangle = Rectangle(height=2, width=3)\n        ellipse=Ellipse(width=3, height=1, color=RED)\n        ellipse.shift(2*DOWN+2*RIGHT)\n        pointer = CurvedArrow(2*RIGHT,5*RIGHT,color=MAROON_C)\n        arrow = Arrow(LEFT,…",
                "fallback": "Talking Physics Link: Getting Started Animating with manim and Python&nbsp;3.7",
                "from_url": "https:\/\/talkingphysics.wordpress.com\/2019\/01\/08\/getting-started-animating-with-manim-and-python-3-7\/",
                "service_icon": "https:\/\/secure.gravatar.com\/blavatar\/227ced6600a3b7ac30375334fb65d24b?s=114",
                "id": 1,
                "original_url": "https:\/\/talkingphysics.wordpress.com\/2019\/01\/08\/getting-started-animating-with-manim-and-python-3-7\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nb1PO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tutorial: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/talkingphysics.wordpress.com\/2019\/01\/08\/getting-started-animating-with-manim-and-python-3-7\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1565360352.039200",
        "client_msg_id": "078841c9-a6e9-4581-9930-5fa1476090ab",
        "text": "oh wow cool thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565283550.037000",
        "parent_user_id": "UHWC9PXBL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xsq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh wow cool thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1565377317.039600",
        "client_msg_id": "114acf01-0a71-480e-9800-4c2bcd65480b",
        "text": "<http:\/\/www.mathemaesthetics.com\/HilbertCurves.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4dP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/www.mathemaesthetics.com\/HilbertCurves.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1565387479.045800",
        "client_msg_id": "6d779d87-db70-44bd-a679-c57d3a131609",
        "text": "Has anyone worked on pretty printers \/ formatters for (textual) source code already? I'm currently looking through different papers and implementations and I still don't really know the limitations of different approaches. Also, do you use such tools and what are your experiences with them? Where don't they work as expected?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1565387479.045800",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1565501238.058400",
        "reply_users": [
            "U79HM6726",
            "UAL7940NM",
            "UAVCC2X70"
        ],
        "replies": [
            {
                "user": "U79HM6726",
                "ts": "1565431540.046600"
            },
            {
                "user": "UAL7940NM",
                "ts": "1565435711.046800"
            },
            {
                "user": "U79HM6726",
                "ts": "1565435825.048700"
            },
            {
                "user": "U79HM6726",
                "ts": "1565435979.052000"
            },
            {
                "user": "U79HM6726",
                "ts": "1565436141.055200"
            },
            {
                "user": "UAL7940NM",
                "ts": "1565440171.055400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1565500158.055600"
            },
            {
                "user": "U79HM6726",
                "ts": "1565501238.058400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BtC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone worked on pretty printers \/ formatters for (textual) source code already? I'm currently looking through different papers and implementations and I still don't really know the limitations of different approaches. Also, do you use such tools and what are your experiences with them? Where don't they work as expected?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1565394284.046500",
        "client_msg_id": "96cf3bec-d5af-4da1-a86b-32db9f2b2c18",
        "text": "_Lazy evaluation is clairvoyant call-by-value_\n\n<http:\/\/www.cs.nott.ac.uk\/~pszgmh\/clairvoyant.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kAs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lazy evaluation is clairvoyant call-by-value",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.cs.nott.ac.uk\/~pszgmh\/clairvoyant.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]