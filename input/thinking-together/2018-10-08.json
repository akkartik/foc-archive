[
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1538984863.000100",
        "client_msg_id": "98dae383-376d-4fb8-8ae8-2192a11ba7d9",
        "text": "Another related article (about node and wire visual languages) on HN yesterday: <https:\/\/news.ycombinator.com\/item?id=18161248>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538984863.000100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1539016398.000100",
        "reply_users": [
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1539016398.000100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1539019579.000000",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3qZ03",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another related article (about node and wire visual languages) on HN yesterday: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=18161248"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1538994616.000100",
        "edited": {
            "user": "UCKRZS3DZ",
            "ts": "1538999170.000000"
        },
        "client_msg_id": "2d7b1e31-bcfc-40f1-a834-1e177e586e92",
        "text": "I'm developing this idea about a homoiconic language that is encoded in a graph (no text required).\nThis idea looks so beautiful, and so obvious, that I expected that it's already well developed in academia.\nI googled for papers, and didn't found much.\n\nDo you know any related projects or papers?\nDo you think it's worth writing about, putting it in the form of academic paper?\nIf so, where it could be published, given that paper is good and I don't have academic background?\n\nI want to start academic career eventually. This could be a first step.\n\nPS: I know that <@UA8HY8R7B> works on something related, but different.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538994616.000100",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1539068488.000100",
        "reply_users": [
            "UA14TGLTC",
            "UC21F8Q48",
            "U8A5MS6R1",
            "UCKRZS3DZ"
        ],
        "replies": [
            {
                "user": "UA14TGLTC",
                "ts": "1539014240.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539014320.000100"
            },
            {
                "user": "UC21F8Q48",
                "ts": "1539018053.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539018373.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539068488.000100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zk52",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm developing this idea about a homoiconic language that is encoded in a graph (no text required).\nThis idea looks so beautiful, and so obvious, that I expected that it's already well developed in academia.\nI googled for papers, and didn't found much.\n\nDo you know any related projects or papers?\nDo you think it's worth writing about, putting it in the form of academic paper?\nIf so, where it could be published, given that paper is good and I don't have academic background?\n\nI want to start academic career eventually. This could be a first step.\n\nPS: I know that "
                            },
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            },
                            {
                                "type": "text",
                                "text": " works on something related, but different."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1538995679.000100",
        "client_msg_id": "839c8246-6b30-45d2-8d2e-ce973c406e72",
        "text": "not sure how your representation works, but most compilers usually compile to a graph representation for the optimization passes, you could start here to see if there's something you find useful: <https:\/\/en.wikipedia.org\/wiki\/Static_single_assignment_form>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "reply_count": 19,
        "reply_users_count": 3,
        "latest_reply": "1539115461.000100",
        "reply_users": [
            "UBN9AFS0N",
            "UCKRZS3DZ",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1538995759.000100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1538995859.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1538996036.000100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1538996111.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1538996203.000100"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1538996318.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1538996335.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1538996376.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539010452.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539010886.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539011522.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539066893.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539099186.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539099572.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539100805.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539100895.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539107964.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539107985.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539115461.000100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/7\/73\/SSA_example1.1.png",
                "image_width": 200,
                "image_height": 290,
                "image_bytes": 9775,
                "title": "Static single assignment form",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Static_single_assignment_form",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Static_single_assignment_form",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In compiler design, static single assignment form (often abbreviated as SSA form or simply SSA) is a property of an intermediate representation (IR), which requires that each variable is assigned exactly once, and every variable is defined before it is used. Existing variables in the original IR are split into versions, new variables typically indicated by the original name with a subscript in textbooks, so that every definition gets its own version. In SSA form, use-def chains are explicit and each contains a single element.\nSSA was proposed by Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck in 1988. Ron Cytron, Jeanne Ferrante and the previous three researchers at IBM developed an algorithm that can compute the SSA form efficiently.One can expect to find SSA in a compiler for Fortran or C, whereas in functional language compilers, such as those for Scheme, ML and Haskell, continuation-passing style (CPS) is generally used.  SSA is formally equivalent to a well-behaved subset of CPS excluding non-local control flow, which does not occur when CPS is used as intermediate representation. So optimizations and transformations formulated in terms of one immediately apply to the other.",
                "fallback": "wikipedia: Static single assignment form",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Static_single_assignment_form"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ak0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "not sure how your representation works, but most compilers usually compile to a graph representation for the optimization passes, you could start here to see if there's something you find useful: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Static_single_assignment_form"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1538995759.000100",
        "client_msg_id": "23c108f4-1178-43a5-afbe-7c7341da0bb8",
        "text": "bibliography here <http:\/\/www.dcs.gla.ac.uk\/~jsinger\/ssa.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gsF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "bibliography here "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.dcs.gla.ac.uk\/~jsinger\/ssa.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1538995859.000100",
        "client_msg_id": "0f057b5c-60a0-45dc-80f6-7bcda0d1169b",
        "text": "you can go to \"Cited by\" and \"related articles\" on this on <https:\/\/scholar.google.de\/scholar?q=Global%20value%20numbers%20and%20redundant%20computations>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PDmgy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you can go to \"Cited by\" and \"related articles\" on this on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/scholar.google.de\/scholar?q=Global%20value%20numbers%20and%20redundant%20computations"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1538996036.000100",
        "client_msg_id": "b1afc5f4-12bb-4222-bea0-18ac49e07294",
        "text": "thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PpAJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1538996111.000100",
        "client_msg_id": "94a27b07-0256-4579-ab84-d1ee192a4737",
        "text": "maybe this? <https:\/\/en.wikipedia.org\/wiki\/Dataflow_programming>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "title": "Dataflow programming",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Dataflow_programming",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Dataflow_programming",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In computer programming, dataflow programming is a programming paradigm that models a program as a directed graph of the data flowing between operations, thus implementing dataflow principles and architecture. Dataflow programming languages share some features of functional languages, and were generally developed in order to bring some functional concepts to a language more suitable for numeric processing. Some authors use the term datastream instead of dataflow to avoid confusion with dataflow computing or dataflow architecture, based on an indeterministic machine paradigm. Dataflow programming was pioneered by Jack Dennis and his graduate students at MIT in the 1960s.",
                "fallback": "wikipedia: Dataflow programming",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Dataflow_programming"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ejpiQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe this? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Dataflow_programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1538996203.000100",
        "client_msg_id": "5c2bcbe0-9013-456a-a983-5829b0736b5f",
        "text": "It is, but looks like nobody tried to make it homoiconic",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PiGAA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is, but looks like nobody tried to make it homoiconic"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1538996318.000100",
        "client_msg_id": "1636e8a7-a7dc-4ed2-b059-6f61ca49bd4a",
        "text": "you mean that the representation of the program is implemented in term of a datastructure in the programming language? aka code is data, data is code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vJb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you mean that the representation of the program is implemented in term of a datastructure in the programming language? aka code is data, data is code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1538996335.000100",
        "edited": {
            "user": "UCKRZS3DZ",
            "ts": "1538996826.000000"
        },
        "client_msg_id": "73fb45c8-1027-41e2-b04c-45bf751834cb",
        "text": "yep, code is graph, and data is also a graph",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gijp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yep, code is graph, and data is also a graph"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1538996376.000100",
        "client_msg_id": "5eaccedd-93f0-45e4-9695-a0bf83f7e4b4",
        "text": "it's like Lisp, but instead of list you got graph",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xbil",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's like Lisp, but instead of list you got graph"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1539010452.000100",
        "client_msg_id": "94838bbf-16cf-4df1-beee-90d8f7b358df",
        "text": "Do you imagine the representation of the graph being textual or graphical?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hPM4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you imagine the representation of the graph being textual or graphical?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1539010886.000100",
        "edited": {
            "user": "UCKRZS3DZ",
            "ts": "1539010899.000000"
        },
        "client_msg_id": "637cb563-3c1b-41e8-aa1a-9f0bfddbe7cb",
        "text": "It's gonna be stored as graph, into git or ipfs. No text files.\nBut the interface of editor that user will face -- probably mixture of both.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t0cTa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's gonna be stored as graph, into git or ipfs. No text files.\nBut the interface of editor that user will face -- probably mixture of both."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1539011522.000100",
        "client_msg_id": "c7b3e454-fb0a-4302-b1e8-0a366bea69a5",
        "text": "Which aspect do you plan to encode homoiconically? Lisp is homoiconic at the AST level, which only needs a tree, I think. While programs expand into dependence graphs inside the compiler as <@UBN9AFS0N> pointed out, these aspects are usually hidden from programmers. So where would the programmer want to refer to code as graphs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fII",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which aspect do you plan to encode homoiconically? Lisp is homoiconic at the AST level, which only needs a tree, I think. While programs expand into dependence graphs inside the compiler as "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " pointed out, these aspects are usually hidden from programmers. So where would the programmer want to refer to code as graphs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539014240.000100",
        "client_msg_id": "bd401a9f-99c8-4a29-a082-8ea08d9dd7e8",
        "text": "Some interesting mathy work is being done with graphs and diagram based languages recently <https:\/\/johncarlosbaez.wordpress.com\/2018\/05\/19\/circuits-bond-graphs-and-signal-flow-diagrams\/>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538994616.000100",
        "parent_user_id": "UCKRZS3DZ",
        "attachments": [
            {
                "service_name": "Azimuth",
                "service_url": "http:\/\/johncarlosbaez.wordpress.com",
                "title": "Circuits, Bond Graphs, and Signal-Flow Diagrams",
                "title_link": "https:\/\/johncarlosbaez.wordpress.com\/2018\/05\/19\/circuits-bond-graphs-and-signal-flow-diagrams\/",
                "author_name": "John Baez",
                "author_link": "https:\/\/johncarlosbaez.wordpress.com\/author\/johncarlosbaez\/",
                "thumb_url": "https:\/\/johncarlosbaez.files.wordpress.com\/2018\/05\/thesis_defense_coya.jpg?fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 122,
                "text": "&nbsp;\n\nMy student Brandon Coya finished his thesis, and successfully defended it last Tuesday!\n&bull; Brandon Coya, Circuits, Bond Graphs, and Signal-Flow Diagrams: A Categorical Perspective, Ph.D. thesis, U. C. Riverside, 2018.\nIt&rsquo;s about networks in engineering.  He uses category theory to study the diagrams engineers like to draw, and functors to understand how these diagrams are interpreted.\nHis thesis raises some really interesting pure mathematical questions about the category of corelations and a &lsquo;weak bimonoid&rsquo; that can be found in this category.  Weak bimonoids were invented by Pastro and Street in their study of &lsquo;quantum categories&rsquo;, a generalization of quantum groups.  So, it&rsquo;s fascinating to see a weak bimonoid that plays an important role in electrical engineering!\nHowever, in what follows I&rsquo;ll stick to less fancy stuff: I&rsquo;ll just explain the basic idea of Brandon&rsquo;s thesis, say a bit about circuits and &lsquo;bond graphs&rsquo;, and outline his main results.  What follows is heavily based on the introduction of his thesis, but I&rsquo;ve baezified it a little.\nThe basic idea\nPeople, and especially scientists and engineers, are naturally inclined to draw diagrams and pictures when they want to better understand a problem. One example is when Feynman introduced his famous diagrams in 1949; particle physicists have been using them ever since.  But some other diagrams introduced by engineers are far more important to the functioning of the modern world and its technology.  It&rsquo;s outrageous, but sociologically understandable, that mathematicians have figured out more about Feynman diagrams than these other kinds: circuit diagrams, bond graphs and signal-flow diagrams.  This is the problem Brandon aims to fix.\nI&rsquo;ve been unable to track down the early history of circuit diagrams, so if you know about that please tell me!   But in the 1940s, Harry Olson pointed out analogies in electrical, mechanical, thermodynamic, hydraulic, and chemical systems, which allowed circuit diagrams to be applied to a wide variety of fields.   On April 24, 1959, Henry Paynter woke up and invented the diagrammatic language of bond graphs to study generalized versions of voltage and current, called &lsquo;effort&rsquo; and &lsquo;flow,&rsquo; which are implicit in the analogies found by Olson.   Bond graphs are now widely used in engineering.   On the other hand, control theorists use diagrams of a different kind, called &lsquo;signal-flow diagrams&rsquo;, to study linear open dynamical systems.\nAlthough category theory predates some of these diagrams, it was not until the 1980s that Joyal and Street showed string digrams can be used to reason about morphisms in any symmetric monoidal category. This motivates Brandon&rsquo;s first goal: viewing electrical circuits, signal-flow diagrams, and bond graphs as string diagrams for morphisms in symmetric monoidal categories.\nThis lets us study networks from a compositional perspective. That is, we can study a big network by describing how it is composed of smaller pieces. Treating networks as morphisms in a symmetric monoidal category lets us build larger ones from smaller ones by composing and tensoring them: this makes the compositional perspective into precise mathematics.  To study a network in this way we must first define a notion of &lsquo;input&rsquo; and &lsquo;output&rsquo; for the network diagram. Then gluing diagrams together, so long as the outputs of one match the inputs of the other, defines the composition for a category.\nNetwork diagrams are typically assigned data, such as the potential and current associated to a wire in an electrical circuit. Since the relation between the data tells us how a network behaves, we call this relation the &lsquo;behavior&rsquo; of a network. The way in which we assign behavior to a network comes from first treating a network as a &lsquo;black box&rsquo;, which is a system with inputs and outputs whose internal mechanisms are unknown or ignored.  A simple example is the lock on a doorknob: one can insert a key and try to turn it; it either opens the door or not, and it fulfills this function without us needing to know its inner workings.  We can treat a system as a black box through the process called &lsquo;black-boxing&rsquo;, which forgets its inner workings and records only the relation it imposes between its inputs and outputs.\nSince systems with inputs and outputs can be seen as morphisms in a category we expect black-boxing to be a functor out of a category of this sort. Assigning each diagram its behavior in a functorial way is formalized by functorial semantics, first introduced in Lawvere&rsquo;s thesis in 1963. This consists of using categories with specific extra structure as &lsquo;theories&rsquo; whose &lsquo;models&rsquo; are structure-preserving functors into other such categories.  We then think of the diagrams as a syntax, while the behaviors are the semantics. Thus black-boxing is actually an example of functorial semantics. This leads us to another goal: to study the functorial semantics, i.e. black-boxing functors, for electrical circuits, signal-flow diagrams, and bond graphs.\nBrendan Fong and I began this type of work by showing how to describe circuits made of wires, resistors, capacitors, and inductors as morphisms in a category using &lsquo;decorated cospans&rsquo;. Jason Erbele and I, and separately Bonchi, Soboci&#324;ski and Zanasi, studied signal flow diagrams as morphisms in a category.  In other work Brendan Fong, Blake Pollard and I looked at Markov processes, while Blake and I studied chemical reaction networks using decorated cospans. In all of these cases, we also studied the functorial semantics of these diagram languages.\nBrandon&rsquo;s main tool is the framework of &lsquo;props&rsquo;, also called &lsquo;PROPs&rsquo;, introduced by Mac Lane in 1965. The acronym stands for &ldquo;products and permutations&rdquo;, and these operations roughly describe what a prop can do. More precisely, a prop is a strict symmetric monoidal category equipped with a distinguished object latex X$ such that every object is a tensor power  Props arise because very often we think of a network as going between some set of input nodes and some set of output nodes, where the nodes are indistinguishable from each other. Thus we typically think of a network as simply having some natural number as an input and some natural number as an output, so that the network is actually a morphism in a prop.\nCircuits and bond graphs\nNow let&rsquo;s take a quick tour of circuits and bond graphs. Much more detail can be found in Brandon&rsquo;s thesis, but this may help you know what to picture when you hear terminology from electrical engineering.\nHere is an electrical circuit made of only perfectly conductive wires:\n\nThis is just a graph, consisting of a set  of nodes, a set  of edges, and maps  sending each edge to its source and target node. We refer to the edges as perfectly conductive wires and say that wires go between nodes. Then associated to each perfectly conductive wire in an electrical circuit is a pair of real numbers called &lsquo;potential&rsquo;,  and &lsquo;current&rsquo;, \n\nTypically each node gets a potential, but in the above case the potential at either end of a wire would be the same so we may as well associate the potential to the wire. Current and potential in circuits like these obey two laws due to Kirchoff. First, at any node, the sum of currents flowing into that node is equal to the sum of currents flowing out of that node. The other law states that any connected wires must have the same potential.\nWe say that the above circuit is closed as opposed to being open because it does not have any inputs or outputs. In order to talk about open circuits and thereby bring the &lsquo;compositional perspective&rsquo; into play we need a notion for inputs and outputs of a circuit. We do this usin…",
                "fallback": "Azimuth Link: Circuits, Bond Graphs, and Signal-Flow&nbsp;Diagrams",
                "from_url": "https:\/\/johncarlosbaez.wordpress.com\/2018\/05\/19\/circuits-bond-graphs-and-signal-flow-diagrams\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/johncarlosbaez.wordpress.com\/2018\/05\/19\/circuits-bond-graphs-and-signal-flow-diagrams\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KK0zW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some interesting mathy work is being done with graphs and diagram based languages recently "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/johncarlosbaez.wordpress.com\/2018\/05\/19\/circuits-bond-graphs-and-signal-flow-diagrams\/"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539014320.000100",
        "client_msg_id": "01307a30-c464-4b19-9f65-cd7ea959ae43",
        "text": "Here's a fairly accessible blog that would give you a feel for this kind of thing <https:\/\/graphicallinearalgebra.net\/>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538994616.000100",
        "parent_user_id": "UCKRZS3DZ",
        "attachments": [
            {
                "service_name": "Graphical Linear Algebra",
                "service_url": "http:\/\/graphicallinearalgebra.net",
                "title": "Index",
                "title_link": "https:\/\/graphicallinearalgebra.net\/",
                "author_name": "pawel",
                "author_link": "https:\/\/graphicallinearalgebra.net\/author\/pawelsobocinski\/",
                "thumb_url": "https:\/\/graphicallinearalgebra.files.wordpress.com\/2015\/04\/dec4.jpg?w=300&fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 39,
                "text": "Applications are open for the ACT Applied Category Theory Research School 2018!\nAnd because arithmetic science and geometric science are connected, and support one another, the full knowledge of numbers cannot be presented without encountering some geometry, or without seeing that operating in this way on numbers is close to geometry; the method is full of many proofs and demonstrations that are made with geometric figures.\nFibonacci, preface to Liber Abaci\n(first published 1202, 1228 manuscript translated by Lawrence E. Sigler)\n\n\nIf you like this blog, please subscribe to get email updates when new articles are published. You will find a subscription link at the bottom of this page.\nGraphical linear algebra is a work in progress, and there are many open research threads. We are looking for PhD students, so please consider applying!\nThis blog is written in English. To read and contribute to translations (Dutch, French, German,&hellip;) see this page by Vincent Verheyen.\nIntroduction\nEpisode 1&nbsp;&ndash; Mak&eacute;l&eacute;l&eacute; and Linear Algebra\nEpisode 2 &ndash; Methodology, Handwaving and Diagrams\nAdding and Copying\nEpisode 3 &ndash; Adding (Part 1) and Mr Fibonacci\nEpisode 4 &ndash; Dumbing Down and Magic Lego\nEpisode 5 &ndash; Spoilers, Adding (Part 2) and Zero\nEpisode 6 &ndash; Crema di Mascarpone and Diagrammatic Reasoning\nEpisode 7 &ndash; Copying, Discarding and The Slogan\nEpisode 8 &ndash; When Adding met Copying&hellip;\nEpisode 9 &ndash; Natural numbers, diagrammatically\nMatrices and PROPs\nEpisode 10 &ndash; Paths and Matrices\nEpisode 11 &ndash; From Diagrams to Matrices\nEpisode 12 &ndash; Monoidal Categories and PROPs (Part 1)\nEpisode 13 &ndash; PROPs (Part 2) and Permutations\nEpisode 14 &ndash; Homomorphisms of PROPs\nEpisode 15 &ndash; Matrices, diagrammatically\nEpisode 16 &ndash; Trust the Homomorphism, for it is Fully Faithful\nIntegers and Relations\nEpisode 17 &ndash; Maths with Diagrams\nEpisode 18 &ndash; Introducing the Antipode\nEpisode 19 &ndash; Integer matrices\nEpisode 20 &ndash; Causality, Feedback and Relations\nEpisode 21 &ndash; Functions and Relations, diagrammatically\nEpisode 22 &ndash; The Frobenius Equation\nEpisode 23 &ndash; Frobenius Snakes and Spiders\nFractions and Spaces\nEpisode 24 &ndash; Bringing it all together\nEpisode 25 &ndash; Fractions, diagrammatically\nEpisode 26 &ndash; Keep Calm and Divide by Zero\nEpisode 27 &ndash; Linear Relations\nEpisode 28 &ndash; Subspaces, diagrammatically\nEpisode 29 &ndash; Dividing by zero to invert matrices\nEpisode 30 &ndash; The essence of graphical linear algebra\nRedundancy &ndash; A trilogy by Jason Erbele\nEpisode R1 &ndash; Redundancy and Zebra Snakes\n&nbsp;\nInterlude &ndash; string diagrams and resource-sensitive syntax\nWhy string diagrams?\nSequences and Signal Flow Graphs\nEpisode 31 &ndash; Fibonacci and sustainable rabbit farming\n&nbsp;\nOut of order (for now)\nOrthogonality and projections\nEigenstuff, diagrammatically\n&nbsp;\nContributions\nDeterminants and the Lindstr&ouml;m-Gessel-Vienot Lemma &ndash; by Solomon Maina\n&nbsp;\n&nbsp;\nOfftopic\nSometimes this blog actually looks like a blog.\n16 September 2016 &ndash; Leicester and the battle for universities\n16 April 2017 &ndash;&nbsp;&hellip;, a monoid is a category, a category is a monad, a monad is a monoid, &hellip;\n&nbsp;10 May 2017 &ndash;&nbsp;1st Workshop on String Diagrams in Computation, Logic, and Physics\n3 October 2018 &ndash; ACT 2018 &ndash;&nbsp;Applied Category Theory Research&nbsp;School",
                "fallback": "Graphical Linear Algebra Link: Index",
                "from_url": "https:\/\/graphicallinearalgebra.net\/",
                "service_icon": "https:\/\/s2.wp.com\/i\/webclip.png",
                "id": 1,
                "original_url": "https:\/\/graphicallinearalgebra.net\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Kf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a fairly accessible blog that would give you a feel for this kind of thing "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/graphicallinearalgebra.net\/"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1539016398.000100",
        "client_msg_id": "dce335c5-16dc-4a14-9656-98141464b453",
        "text": "Wires systems have two principle potential advantages:\n\n(1) Annotation.  You have extra space for the system to add extra information on and between nodes.  There's just something intuitive about putting together a bunch of pipes and then seeing stuff flow through the pipes.\n\n(2) Propagation in the sense that Sussman used it here <https:\/\/www.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute>, which amounts to reusing the same pipes for different stuff, a sort of radical polymorphism akin to a monadic (or applicative) lift in the typed functional programming tradition.\n\nThese qualities don't rely on the wires really.  They just often come along for the ride.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538984863.000100",
        "parent_user_id": "U5TCAFTD3",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "We Really Don't Know How To Compute!",
                "title_link": "https:\/\/www.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute",
                "text": "Gerald Jay Sussman compares our computational skills with the genome, concluding that we are way behind in creating complex systems such as living organisms, and proposing a few areas of improvement.",
                "fallback": "InfoQ: We Really Don't Know How To Compute!",
                "from_url": "https:\/\/www.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute",
                "thumb_url": "https:\/\/res.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute\/en\/smallimage\/Gerald.JPG",
                "thumb_width": 86,
                "thumb_height": 100,
                "service_icon": "https:\/\/cdn.infoq.com\/statics_s1_20181002-0355\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WqC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wires systems have two principle potential advantages:\n\n(1) Annotation.  You have extra space for the system to add extra information on and between nodes.  There's just something intuitive about putting together a bunch of pipes and then seeing stuff flow through the pipes.\n\n(2) Propagation in the sense that Sussman used it here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/We-Really-Dont-Know-How-To-Compute"
                            },
                            {
                                "type": "text",
                                "text": ", which amounts to reusing the same pipes for different stuff, a sort of radical polymorphism akin to a monadic (or applicative) lift in the typed functional programming tradition.\n\nThese qualities don't rely on the wires really.  They just often come along for the ride."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1539018053.000100",
        "client_msg_id": "ceb945aa-aca9-4aca-96c5-fe95d6363416",
        "text": "<@UD4Q9LT52> has been working on something like this. Might want to discuss with him.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538994616.000100",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ksi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD4Q9LT52"
                            },
                            {
                                "type": "text",
                                "text": " has been working on something like this. Might want to discuss with him."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539018373.000100",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1539018453.000000"
        },
        "client_msg_id": "d93def1a-f373-4905-8e2d-b4445d13eecb",
        "text": "I'm definitely interested in learning about the details of what you are thinking about. I'm not in academia so can't give advice on writing\/publishing papers, unfortunately. But even if you publish a blog style write-up, it can be useful in getting good feedback.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538994616.000100",
        "parent_user_id": "UCKRZS3DZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mu4=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm definitely interested in learning about the details of what you are thinking about. I'm not in academia so can't give advice on writing\/publishing papers, unfortunately. But even if you publish a blog style write-up, it can be useful in getting good feedback."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539030605.000100",
        "client_msg_id": "bf7ad673-5c79-4239-bdfd-8e93bb0450e6",
        "text": "<http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "reply_count": 28,
        "reply_users_count": 7,
        "latest_reply": "1539325219.000100",
        "reply_users": [
            "U8A5MS6R1",
            "U5TCAFTD3",
            "UCGAK10LS",
            "UC25EFSJC",
            "UCKRZS3DZ",
            "UA14TGLTC",
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1539030642.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1539030660.000100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1539045160.000100"
            },
            {
                "user": "UC25EFSJC",
                "ts": "1539045350.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539050907.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539071122.000100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1539072472.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1539073771.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539104934.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1539123123.000100"
            },
            {
                "user": "UCGAK10LS",
                "ts": "1539140761.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539155779.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539189940.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539190271.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539191241.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539191322.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539231478.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539253010.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539278339.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539279319.000100"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1539285646.000100"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1539286143.000100"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1539306986.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539320601.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539320796.000100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1539320962.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539324784.000100"
            },
            {
                "user": "UCKRZS3DZ",
                "ts": "1539325219.000100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1539328936.000000",
        "attachments": [
            {
                "title": "Programming as interaction: A new perspective for programming language research",
                "title_link": "http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/",
                "text": "In programming research, we say a lot about programs and languages, but very little about the actual process of programming. One simple trick that will make programming language research significantly more interesting is to think about programs not as expressions, but as a result of a sequence of interactions that create it. This includes usual things such as writing code and refactoring, but if we also include, say, running a part of the program, we become capable of saying many more interesting things and building new powerful programming tools.",
                "fallback": "Programming as interaction: A new perspective for programming language research",
                "thumb_url": "http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/kent-sq.png",
                "from_url": "http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "http:\/\/tomasp.net\/img\/favicon-big.png",
                "service_name": "tomasp.net",
                "id": 1,
                "original_url": "http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "utc\/v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http:\/\/tomasp.net\/blog\/2018\/programming-interaction\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6KQ2S410",
                    "UC25EFSJC",
                    "UCKRZS3DZ",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539030642.000100",
        "client_msg_id": "af2a5b19-9d08-4a88-88f0-f00c1ce51632",
        "text": "&gt; In other words, programming language research should not study programs, but should instead study programming!\n\n:smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IDwP",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In other words, programming language research should not study programs, but should instead study programming!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1539030660.000100",
        "client_msg_id": "c0faa97a-05fb-464b-9363-11b7cb70678c",
        "text": "YES I love this already and I'm only 20 words in! Tomas is the <http:\/\/bomb.com|bomb.com>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1XIy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "YES I love this already and I'm only 20 words in! Tomas is the "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/bomb.com",
                                "text": "bomb.com"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1539033892.000100",
        "client_msg_id": "fad7feda-f7ed-4668-a6af-4a490c1a0975",
        "text": "This Alan data language looks neat! <https:\/\/news.ycombinator.com\/item?id=18166538>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539033892.000100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1539043714.000100",
        "reply_users": [
            "U85HCL7JP",
            "U85MWBKEY"
        ],
        "replies": [
            {
                "user": "U85HCL7JP",
                "ts": "1539037987.000100"
            },
            {
                "user": "U85MWBKEY",
                "ts": "1539043714.000100"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1539073501.000878",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C+6VJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This Alan data language looks neat! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=18166538"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1539034175.000100",
        "client_msg_id": "90c91bff-3e3a-4741-89fd-2532f0bc0211",
        "text": "&gt; The server is in-house, written in C and C++ and (at this moment) closed source.\n:disappointed:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NxdT",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The server is in-house, written in C and C++ and (at this moment) closed source."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "disappointed",
                                "unicode": "1f61e"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1539037987.000100",
        "client_msg_id": "17f47e53-4c48-45e2-984f-48b87b4b7eb1",
        "text": "Reminds me a lot of Chorus, by <@U6KQ2S410> <http:\/\/www.chorus-home.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539033892.000100",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m+Q9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me a lot of Chorus, by "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.chorus-home.org"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85MWBKEY",
        "type": "message",
        "ts": "1539043714.000100",
        "client_msg_id": "96B3C100-14D3-4B5F-B3F9-3A8F8A98C240",
        "text": "I don’t think model driven development gets enough attention so I’m really happy to see this go live. \n\nI’m not sure what the best size surface area is for something like this, but my gut says a lot of smaller tools that can interact would make a lot more sense than something trying to do the whole stack. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88eacb7e65ed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-08\/681438296241_88eacb7e65edebc579ab_72.jpg",
            "first_name": "Aidan",
            "real_name": "Aidan Cunniffe",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "acunniffe",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539033892.000100",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C1OPD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don’t think model driven development gets enough attention so I’m really happy to see this go live. \n\nI’m not sure what the best size surface area is for something like this, but my gut says a lot of smaller tools that can interact would make a lot more sense than something trying to do the whole stack."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1539045160.000100",
        "client_msg_id": "7bdb543e-9485-4256-9f6a-2971f0e9b803",
        "text": "I find some of the ideas in this article exciting, and others seem to be poorly justified (do we really need to improve and encourage copy-paste style programming?). Things like live previews (“code always has a valid preview”) and semantic merging make the most sense to me, and happily <@UC25EFSJC> and co. are actively working on these as part of the Hazel project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gpL89",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find some of the ideas in this article exciting, and others seem to be poorly justified (do we really need to improve and encourage copy-paste style programming?). Things like live previews (“code always has a valid preview”) and semantic merging make the most sense to me, and happily "
                            },
                            {
                                "type": "user",
                                "user_id": "UC25EFSJC"
                            },
                            {
                                "type": "text",
                                "text": " and co. are actively working on these as part of the Hazel project."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC25EFSJC",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC25EFSJC",
        "type": "message",
        "ts": "1539045350.000100",
        "client_msg_id": "5cd0393a-438c-4a6c-a1f9-30c716371962",
        "text": "yeah maintaining the provenance of copy-pasted code and propagating refactorings seems like it might discourage proper abstraction",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g3d532659753",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a3d5326597534f22b23c8da60e0509a0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "",
            "real_name": "Cyrus Omar",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "cyrus.omar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JYv=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah maintaining the provenance of copy-pasted code and propagating refactorings seems like it might discourage proper abstraction"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1539050907.000100",
        "client_msg_id": "43ec66f9-9830-4b1d-ba23-aa80f6bbab41",
        "text": "What if the system can help extract the abstraction from the copies?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1539030605.000100",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vR2S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if the system can help extract the abstraction from the copies?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCKRZS3DZ",
        "type": "message",
        "ts": "1539066893.000100",
        "client_msg_id": "68b686a1-d69f-4156-beff-746acca0bb28",
        "text": "&gt; So where would the programmer want to refer to code as graphs?\n\nI'm not sure I understand.\n\n&gt; So where would the programmer want to refer to code as graphs?\n\nIn code itself. Graph is the most powerful datatype. Can be used to represent any other compound datatype.\n\nSo you would refer to code as graph data in your metaprograms, exactly same as Lisp.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "222a2870915d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-15\/861537614034_222a2870915d24ec10cc_72.jpg",
            "first_name": "Vladimir",
            "real_name": "Vladimir Gordeev",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "gordeev.vladimir.v",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1538995679.000100",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7HA8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So where would the programmer want to refer to code as graphs?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'm not sure I understand.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So where would the programmer want to refer to code as graphs?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIn code itself. Graph is the most powerful datatype. Can be used to represent any other compound datatype.\n\nSo you would refer to code as graph data in your metaprograms, exactly same as Lisp."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]