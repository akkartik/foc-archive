[
    {
        "user": "UFPRPSA4S",
        "type": "message",
        "ts": "1628924185.049200",
        "edited": {
            "user": "UFPRPSA4S",
            "ts": "1628924318.000000"
        },
        "client_msg_id": "8df41078-06c3-425b-8d7b-28696c7cc922",
        "text": "I'd like to make a general point: Arbitrary mathematical statements formulated symbolically can be formulated with concrete dynamic variables instead (by which I mean concrete values you can change and whose instances are all kept in sync). Here is an example of this with the pythagorean theorem. <https:\/\/www.youtube.com\/watch?v=QemB5t94slc> Normally it would read \"If a,b, and c are the lengths of the two legs and the hypotenuse respectively of a right triangle then a^2+b^2=c^2\". However, this is equivalent to an expression with dynamic variables, as illustrated in the video. Any instance of the general theorem can be achieved by altering the values of the dynamic variables to that particular instance. Moreover, no matter how the values of the formulation with dynamic variables is altered the resulting statement will always be an instance of the pythagorean theorem because the values at different locations are always kept in sync. Thus, insofar as the two formulations have the same instances, the two are equivalent. (also, modulo the fact that the present scrubbing mechanism can only produce integers).\n\nThis is part of a broader set of ideas I'm exploring. I'm trying to develop a theory of what I'm terming \"formal dynamic mathematics.\" By dynamic mathematics I mean mathematics employing dynamic variables, and which aren't necessarily \"mathematical objects\" (any sort of set) but could be interactive visual elements such as a line segment which you can move around and whose length you can alter or metamathematical objects such as variable names. These sorts of variables abound in geogebra, bret victors work, apparatus (Toby Schachman), and pane (Joshua Horowitz), among other 'live' systems. I think we would benefit from a more systematic understanding of the interface primitives that go into them.\n\nWe can roughly analyze these applications in terms of three primitives: transclusion, evaluation, and varriers. By transclusion I mean the live copying of the contents of one part of a page into another part of the page. Having a transclusion from one region to another and another back again ensures that those two regions will always have the same value, effectively yielding a variable without a name or a value. Evaluation is a relation between different regions of a page where the values in different regions of the page are operated on and displayed in another location.  Finally, varriers are primitives having values and modes of interaction. A scrubbable number is an example of a varrier. (apologies for the neologism; suggestions for better words or similar vocabulary is welcome)\n\nJust as normal formal mathematics is built out of its own primitives (sequences of symbols and rules of inference) formal dynamic mathematics is built out of the above primitives. Inferences rules can be formalized as evaluation schemas so constructions in these systems are proofs.\n\nAlthough this kind of math could be used to design end user programming systems, I'm mostly interested in its application to math itself, as an extension of the language of math at a fundamental level. An idea I've been exploring this year substantially has been how to develop an entirely visual language (save for the logical connectives of propositional and predicate calculus) for vector algebra, without any symbols, and in particular to be able to state and prove the pythagorean theorem from axioms. (This problem was pretty much posed by Hamish Todd about a year ago).  Dynamic variables and varriers (for visual vectors) easily let you do away with symbolic variables. This reduces the problem to devising a visualization for concrete static terms built with functions. We can easily visualize terms like (1,2)+(3,5), and proj_{(1,1)}(4,5) but visualizations for more complex terms generally seem ad hoc. I think there is a solution here, but it's a matter of understanding why there isn't an ideal solution, and I don't understand that well enough at this point to share.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5f4ac5375e5",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f5f4ac5375e539e50ceedb08f65e9dd3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0003-72.png",
            "first_name": "",
            "real_name": "Robin Allison",
            "display_name": "Robin",
            "team": "T5TCAFTA9",
            "name": "robinps2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1628924185.049200",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1630036861.000200",
        "reply_users": [
            "U01QUBNJSEQ",
            "UFPRPSA4S"
        ],
        "replies": [
            {
                "user": "U01QUBNJSEQ",
                "ts": "1629565204.059600"
            },
            {
                "user": "UFPRPSA4S",
                "ts": "1630036861.000200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Pythagorean Theorem with Scrubbable Numbers",
                "title_link": "https:\/\/www.youtube.com\/watch?v=QemB5t94slc",
                "author_name": "Robin Allison",
                "author_link": "https:\/\/www.youtube.com\/channel\/UC7QFbmUD48ibAwi4ZG46yPg",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/QemB5t94slc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Pythagorean Theorem with Scrubbable Numbers",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https:\/\/www.youtube.com\/embed\/QemB5t94slc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https:\/\/www.youtube.com\/watch?v=QemB5t94slc",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=QemB5t94slc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M1vv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to make a general point: Arbitrary mathematical statements formulated symbolically can be formulated with concrete dynamic variables instead (by which I mean concrete values you can change and whose instances are all kept in sync). Here is an example of this with the pythagorean theorem. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=QemB5t94slc"
                            },
                            {
                                "type": "text",
                                "text": " Normally it would read \"If a,b, and c are the lengths of the two legs and the hypotenuse respectively of a right triangle then a^2+b^2=c^2\". However, this is equivalent to an expression with dynamic variables, as illustrated in the video. Any instance of the general theorem can be achieved by altering the values of the dynamic variables to that particular instance. Moreover, no matter how the values of the formulation with dynamic variables is altered the resulting statement will always be an instance of the pythagorean theorem because the values at different locations are always kept in sync. Thus, insofar as the two formulations have the same instances, the two are equivalent. (also, modulo the fact that the present scrubbing mechanism can only produce integers).\n\nThis is part of a broader set of ideas I'm exploring. I'm trying to develop a theory of what I'm terming \"formal dynamic mathematics.\" By dynamic mathematics I mean mathematics employing dynamic variables, and which aren't necessarily \"mathematical objects\" (any sort of set) but could be interactive visual elements such as a line segment which you can move around and whose length you can alter or metamathematical objects such as variable names. These sorts of variables abound in geogebra, bret victors work, apparatus (Toby Schachman), and pane (Joshua Horowitz), among other 'live' systems. I think we would benefit from a more systematic understanding of the interface primitives that go into them.\n\nWe can roughly analyze these applications in terms of three primitives: transclusion, evaluation, and varriers. By transclusion I mean the live copying of the contents of one part of a page into another part of the page. Having a transclusion from one region to another and another back again ensures that those two regions will always have the same value, effectively yielding a variable without a name or a value. Evaluation is a relation between different regions of a page where the values in different regions of the page are operated on and displayed in another location.  Finally, varriers are primitives having values and modes of interaction. A scrubbable number is an example of a varrier. (apologies for the neologism; suggestions for better words or similar vocabulary is welcome)\n\nJust as normal formal mathematics is built out of its own primitives (sequences of symbols and rules of inference) formal dynamic mathematics is built out of the above primitives. Inferences rules can be formalized as evaluation schemas so constructions in these systems are proofs.\n\nAlthough this kind of math could be used to design end user programming systems, I'm mostly interested in its application to math itself, as an extension of the language of math at a fundamental level. An idea I've been exploring this year substantially has been how to develop an entirely visual language (save for the logical connectives of propositional and predicate calculus) for vector algebra, without any symbols, and in particular to be able to state and prove the pythagorean theorem from axioms. (This problem was pretty much posed by Hamish Todd about a year ago).  Dynamic variables and varriers (for visual vectors) easily let you do away with symbolic variables. This reduces the problem to devising a visualization for concrete static terms built with functions. We can easily visualize terms like (1,2)+(3,5), and proj_{(1,1)}(4,5) but visualizations for more complex terms generally seem ad hoc. I think there is a solution here, but it's a matter of understanding why there isn't an ideal solution, and I don't understand that well enough at this point to share."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U0282PL61U1",
                    "UJBAJNFLK",
                    "U01QUBNJSEQ"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    }
]