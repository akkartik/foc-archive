[
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1719351266.904759",
        "client_msg_id": "A4C02FE1-0B77-4C4A-9811-8CD15A026925",
        "text": "I’ve got (excerpts from) an art history book we could read on the topic. This is something I’m super interested in as well. I think there is actually quite a lot we should learn from art history\/criticism if we are going to accomplish it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1719189860.647069",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ec8a4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’ve"
                            },
                            {
                                "type": "text",
                                "text": " got (excerpts from) an art history book we could read on the topic"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " This is something "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " super interested in as well"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I think there is actually quite a lot we should learn from art history"
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "criticism if we are going to accomplish it"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1719354109.683509",
        "client_msg_id": "a99ac0ed-f9e7-4a82-9b22-ad0a28d2f6b3",
        "text": "<@UCUSW7WVD> Mainstream tech preventing things, that does not need to be relevant. Would be fine already if developers here could share\/exchange some things between their respective apps\/environments, given people here are developers, are not constrained\/bound to mainstream tech (by making their own things\/apps\/environments anyway), etc. But for \"some\" reason(s), seems this is too hard\/expensive already, for reasons. I don't think mainstream pressure is a significant factor here (for people who make their own things instead of passive consumption of delivered mainstream artifacts).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "omBbC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Mainstream tech preventing things, that does not need to be relevant. Would be fine already if developers here could share\/exchange some things between their respective apps\/environments, given people here are developers, are not constrained\/bound to mainstream tech (by making their own things\/apps\/environments anyway), etc. But for \"some\" reason(s), seems this is too hard\/expensive already, for reasons. I don't think mainstream pressure is a significant factor here (for people who make their own things instead of passive consumption of delivered mainstream artifacts)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1719354273.637869",
        "edited": {
            "user": "U067XHT91HV",
            "ts": "1719354930.000000"
        },
        "client_msg_id": "fee6036d-de3c-4df4-aefc-a52f47035efa",
        "text": "<@UJBAJNFLK> This might be a challenge, insight, or conclusion: that we don't have, potentially likely won't get, sufficient resources, and\/or that attempts may not satisfactory, not good enough or only good enough. In which case a lot of time\/effort can be saved for trying to research\/build such infrastructure, if it's relatively futile, given current and future circumstances. I mean, in part, that's why this future isn't already here yet, why it was abandoned\/lost in the past (if agreeing there has been better pioneering work earlier than is easily\/generally available today).\n\nAlso, I've seen this claim many times, lack of resources. But I wonder what these resources actually are. I can only think of time, true. For a difficult and long-term effort. On the other hand, where does the time go to instead? Wouldn't there be an accounting of time saved?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LYQw5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " This might be a challenge, insight, or conclusion: that we don't have, potentially likely won't get, sufficient resources, and\/or that attempts may not satisfactory, not good enough or only good enough. In which case a lot of time\/effort can be saved for trying to research\/build such infrastructure, if it's relatively futile, given current and future circumstances. I mean, in part, that's why this future isn't already here yet, why it was abandoned\/lost in the past (if agreeing there has been better pioneering work earlier than is easily\/generally available today).\n\nAlso, I've seen this claim many times, lack of resources. But I wonder what these resources actually are. I can only think of time, true. For a difficult and long-term effort. On the other hand, where does the time go to instead? Wouldn't there be an accounting of time saved?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719354890.559129",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1719356448.000000"
        },
        "client_msg_id": "71dd788e-a03b-438f-986c-40f6ffa6efe9",
        "text": "<@U067XHT91HV> I don't really follow why you think mainstream tech is not relevant, or why you think developers don't share\/exchange.\n\nIt sounds like you're saying that there's something easy we could all do that we are not doing, but I don't follow what it is. Perhaps you could demonstrate what it is by example in a project, perhaps of your own that shares\/exchanges with some other project? Perhaps you already have such an exercise you've done before that you have in mind. I'd love to see a pointer to it if so.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ai0qt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U067XHT91HV"
                            },
                            {
                                "type": "text",
                                "text": " I don't really follow why you think mainstream tech is not relevant, or why you think developers don't share\/exchange.\n\nIt sounds like you're saying that there's something easy we could all do that we are not doing, but I don't follow what it is. Perhaps you could demonstrate what it is by example in a project, perhaps of your own that shares\/exchanges with some other project? Perhaps you already have such an exercise you've done before that you have in mind. I'd love to see a pointer to it if so."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U067XHT91HV",
        "type": "message",
        "ts": "1719358197.462409",
        "edited": {
            "user": "U067XHT91HV",
            "ts": "1719358507.000000"
        },
        "client_msg_id": "beb7f230-70cf-413c-985f-5c6569ed740c",
        "text": "Uhh, I don't know, I don't have much of a clue what you people or other people are doing or have tried. For some time, I'm trying to come up with some kind of system architecture\/model that's horizontal instead of vertical integration\/apps, similar to the great architectural designs like ARPANET\/Internet with OSI Reference Model, DIKW pyramid, these kinds of things. Might never work, might be ugly, might be slow, fine, but maybe it works eventually, or some parts. I have no idea, I'm just trying to find out (why and why not and what can and can't be done about it). <https:\/\/rumble.com\/vgkp4r-reading-and-processing-data-and-text-input.html> + <https:\/\/rumble.com\/viajgt-structuring-data-and-text-inline.html> + <https:\/\/rumble.com\/vk47ug-tokenization-and-lexical-analysis.html> + <https:\/\/rumble.com\/vva5ds-parsers-interpretation-and-control-flow.html> with at least two more missing about encoding and escaping but it should probably better be a writeup\/articles\/posts and not video, there's also a few good books like Terence Parr's \"Language Implementation Patterns\" (he's the ANTLR guy with respective grammar library, in my mind this is to undo syntax\/notation). Here's some parser + transformer?\/filter? based on grammars, <https:\/\/gitlab.com\/publishing-systems\/tero-grammars> OK it's just subsets\/incomplete\/not-correct and not ENBF, fine. Another that's nested\/cascading and stream-based (idk, I just avoid AST\/DOM\/tree in memory?) <https:\/\/gitlab.com\/publishing-systems\/jteroterosta> which doesn't really work and is kind of dumb, there's even a \"debugger\" <https:\/\/rumble.com\/vr52of-interactive-tero.html> but that's broken because I made a major mistake down at the core of all of these and too what's the point of a separate GUI that's not introspective\/reflective (debugger written in itself)? Is then trivial to put it into a viewer\/\"browser\" or similar <https:\/\/rumble.com\/vpw3z3-einfacher-web-browserviewer.html> and one day into a \"structural\" (?) editor (of the Emacs\/IntelliJ and not Teco-vi\/Visual-Studio type). Separately, there's an implementation of an interpreter for a subset of TRAC (that's because I went after that before looking at Lisp, and too I push back against designing any new lang) <https:\/\/gitlab.com\/skreutzer\/bac> and obviously, point would be to make parser front-end grammar-based (including recreating it's grammar definition grammar in the host\/implementation so from there it can load other grammars for other langs\/notations\/syntaxes, minus libraries, lang contructs, idiosyncrasies) and internal interpreter all just mappings. Eventually adding a compiler backend if I ever can, who knows x86, RISC-V, Java VM bytecode, Smalltalk VM, no idea (and likely never optimized). Before combining these, I still suffer from not having memory, which does not work for sources that aren't context-free. For graphics, GUI, data viz, why not throw away all the frameworks just give me the device context\/canvas, I abstract away just some primitives of drawing a line, box, circle, do some hitbox test <https:\/\/gitlab.com\/publishing-systems\/experimental\/-\/tree\/master\/graph> + one more in \"Object Pascal\" with Lazarus Delphi version for forms as an exercise, but couldn't clear rights so far so is not added (with all of these, throw away the graph exercise and add graphics primitives against DirectX, OpenGL, SDL, Qt, anything and whatever, like Logo\/Turtle, doesn't matter) and that's then controlled by scripts\/interpeter with some algos that are portable across rendering devices of platforms. Admittedly, there's also some older earlier (\"work\")\"flow\" things, up to imitating NoFlo adapters for invocation (minus GUI\/diagrams), but ofc that's too heavy\/rigid and I think it's pretty clear that each of these parts can't work very well on their own if not on\/in some kind of system which offers common services behind target-\/platform-\/implementation-independent abstractions (can be both, local and\/or remote nodes, mixed, without noticing or caring), communicating via some shared \"message\" exchange.\n\n*BUT* this is a pile of old junk, these are also the easy parts, which also don't really work nor are useful, basically I don't really care and don't look forward to discuss. *Instead* the thing is to make many more things (for me personally, would be great if in the area of things I have been unable to do, or don't have the time to do myself) over a weekend or two (or a few months), till maybe there's something that's neat and does work, only after which some beneficial use case or application might be eventually found if we're lucky or clever. Also, to be very clear, I'm absolutely not going to tell anybody else what to do or not to do, to the contrary, better avoid the kind of things I have been trying so far! Make something better, or you already did, OK, what is it, how does it work, how can someone else independently implement\/port it to other uses\/places, ideally easily\/cheaply? Mine is besides the point, I don't want to link these, don't waste the time looking at these. Should be at most just another implementation of a set of general architectural patterns, which are combinable\/mixable. If your vendor of your environment supports a common feature, cool, if not, OK too bad, back to graceful degradation or you get\/add it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "488abf9ee399",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-02\/6284140728162_488abf9ee399f7e43d8b_72.png",
            "first_name": "Stephan",
            "real_name": "Stephan Kreutzer",
            "display_name": "skreutzer",
            "team": "T5TCAFTA9",
            "name": "stephankreutzer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bYQS7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Uhh, I don't know, I don't have much of a clue what you people or other people are doing or have tried. For some time, I'm trying to come up with some kind of system architecture\/model that's horizontal instead of vertical integration\/apps, similar to the great architectural designs like ARPANET\/Internet with OSI Reference Model, DIKW pyramid, these kinds of things. Might never work, might be ugly, might be slow, fine, but maybe it works eventually, or some parts. I have no idea, I'm just trying to find out (why and why not and what can and can't be done about it). "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/vgkp4r-reading-and-processing-data-and-text-input.html"
                            },
                            {
                                "type": "text",
                                "text": " + "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/viajgt-structuring-data-and-text-inline.html"
                            },
                            {
                                "type": "text",
                                "text": " + "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/vk47ug-tokenization-and-lexical-analysis.html"
                            },
                            {
                                "type": "text",
                                "text": " + "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/vva5ds-parsers-interpretation-and-control-flow.html"
                            },
                            {
                                "type": "text",
                                "text": " with at least two more missing about encoding and escaping but it should probably better be a writeup\/articles\/posts and not video, there's also a few good books like Terence Parr's \"Language Implementation Patterns\" (he's the ANTLR guy with respective grammar library, in my mind this is to undo syntax\/notation). Here's some parser + transformer?\/filter? based on grammars, "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/publishing-systems\/tero-grammars"
                            },
                            {
                                "type": "text",
                                "text": " OK it's just subsets\/incomplete\/not-correct and not ENBF, fine. Another that's nested\/cascading and stream-based (idk, I just avoid AST\/DOM\/tree in memory?) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/publishing-systems\/jteroterosta"
                            },
                            {
                                "type": "text",
                                "text": " which doesn't really work and is kind of dumb, there's even a \"debugger\" "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/vr52of-interactive-tero.html"
                            },
                            {
                                "type": "text",
                                "text": " but that's broken because I made a major mistake down at the core of all of these and too what's the point of a separate GUI that's not introspective\/reflective (debugger written in itself)? Is then trivial to put it into a viewer\/\"browser\" or similar "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/rumble.com\/vpw3z3-einfacher-web-browserviewer.html"
                            },
                            {
                                "type": "text",
                                "text": " and one day into a \"structural\" (?) editor (of the Emacs\/IntelliJ and not Teco-vi\/Visual-Studio type). Separately, there's an implementation of an interpreter for a subset of TRAC (that's because I went after that before looking at Lisp, and too I push back against designing any new lang) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/skreutzer\/bac"
                            },
                            {
                                "type": "text",
                                "text": " and obviously, point would be to make parser front-end grammar-based (including recreating it's grammar definition grammar in the host\/implementation so from there it can load other grammars for other langs\/notations\/syntaxes, minus libraries, lang contructs, idiosyncrasies) and internal interpreter all just mappings. Eventually adding a compiler backend if I ever can, who knows x86, RISC-V, Java VM bytecode, Smalltalk VM, no idea (and likely never optimized). Before combining these, I still suffer from not having memory, which does not work for sources that aren't context-free. For graphics, GUI, data viz, why not throw away all the frameworks just give me the device context\/canvas, I abstract away just some primitives of drawing a line, box, circle, do some hitbox test "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gitlab.com\/publishing-systems\/experimental\/-\/tree\/master\/graph"
                            },
                            {
                                "type": "text",
                                "text": " + one more in \"Object Pascal\" with Lazarus Delphi version for forms as an exercise, but couldn't clear rights so far so is not added (with all of these, throw away the graph exercise and add graphics primitives against DirectX, OpenGL, SDL, Qt, anything and whatever, like Logo\/Turtle, doesn't matter) and that's then controlled by scripts\/interpeter with some algos that are portable across rendering devices of platforms. Admittedly, there's also some older earlier (\"work\")\"flow\" things, up to imitating NoFlo adapters for invocation (minus GUI\/diagrams), but ofc that's too heavy\/rigid and I think it's pretty clear that each of these parts can't work very well on their own if not on\/in some kind of system which offers common services behind target-\/platform-\/implementation-independent abstractions (can be both, local and\/or remote nodes, mixed, without noticing or caring), communicating via some shared \"message\" exchange.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "BUT",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this is a pile of old junk, these are also the easy parts, which also don't really work nor are useful, basically I don't really care and don't look forward to discuss. "
                            },
                            {
                                "type": "text",
                                "text": "Instead",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the thing is to make many more things (for me personally, would be great if in the area of things I have been unable to do, or don't have the time to do myself) over a weekend or two (or a few months), till maybe there's something that's neat and does work, only after which some beneficial use case or application might be eventually found if we're lucky or clever. Also, to be very clear, I'm absolutely not going to tell anybody else what to do or not to do, to the contrary, better avoid the kind of things I have been trying so far! Make something better, or you already did, OK, what is it, how does it work, how can someone else independently implement\/port it to other uses\/places, ideally easily\/cheaply? Mine is besides the point, I don't want to link these, don't waste the time looking at these. Should be at most just another implementation of a set of general architectural patterns, which are combinable\/mixable. If your vendor of your environment supports a common feature, cool, if not, OK too bad, back to graceful degradation or you get\/add it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1719363930.832749",
        "client_msg_id": "46e98661-57e2-4400-9d30-b9228ca0113f",
        "text": "I guess the obvious perspective on the current state of the software world for me is: we _have_ plenty of reuse, both of pieces of software (programming languages, web browsers, etc.) and of architectural patterns (MVC, event loops, semantic versioning, package managers, high-availability databases, etc.) It seems to me that we share millions of lines of code across the OS and web browser, and then we have hundreds of projects fork off hundreds or thousands of lines of code on top of that shared infrastructure. In this view it doesn't seem fair to me to focus on the thousands of lines, rather than on the millions of lines below them.\n\nIt seems clear you don't share this perspective, so I'm curious to hear why. There's some metric in your head by which we're not sharing software and not building on each other. Can you come up with a concrete metric for it?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WwDOs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess the obvious perspective on the current state of the software world for me is: we "
                            },
                            {
                                "type": "text",
                                "text": "have",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " plenty of reuse, both of pieces of software (programming languages, web browsers, etc.) and of architectural patterns (MVC, event loops, semantic versioning, package managers, high-availability databases, etc.) It seems to me that we share millions of lines of code across the OS and web browser, and then we have hundreds of projects fork off hundreds or thousands of lines of code on top of that shared infrastructure. In this view it doesn't seem fair to me to focus on the thousands of lines, rather than on the millions of lines below them.\n\nIt seems clear you don't share this perspective, so I'm curious to hear why. There's some metric in your head by which we're not sharing software and not building on each other. Can you come up with a concrete metric for it?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1719380599.898169",
        "client_msg_id": "62f683db-e963-4fcd-be18-d2f3df69a90f",
        "text": "<@U067XHT91HV> Mainstream tech is what powers every device I can buy. It's what produces all data I consume and implements all protocols that I use and wish to continue to use. I am not interested in starting a full tech stack from scratch. I have neither the competence nor the time for this, but most importantly not the motivation. My idea for FOC is evolution, not revolution. At the same time, I want to escape from dependencies on lock-in technology. Which is why I am a big fan of <https:\/\/boringtechnology.club\/|boring technology>. I suppose I am not alone here with this view, but I don't expect it to be widely shared either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kP0cX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U067XHT91HV"
                            },
                            {
                                "type": "text",
                                "text": " Mainstream tech is what powers every device I can buy. It's what produces all data I consume and implements all protocols that I use and wish to continue to use. I am not interested in starting a full tech stack from scratch. I have neither the competence nor the time for this, but most importantly not the motivation. My idea for FOC is evolution, not revolution. At the same time, I want to escape from dependencies on lock-in technology. Which is why I am a big fan of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/boringtechnology.club\/",
                                "text": "boring technology"
                            },
                            {
                                "type": "text",
                                "text": ". I suppose I am not alone here with this view, but I don't expect it to be widely shared either."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1719383965.522129",
        "client_msg_id": "6A01A1DD-321E-4F61-9210-1F88548574A6",
        "text": "&gt; I have neither the competence nor the time for this, but most importantly not the motivation.\nI’d love to dig into this. All three of these.\n\n_Competence_: Seriously? You know how to program. You know more than one programming language. It’s all the same anyway. What makes you think you lack competence in building anything you can dream of that is made out of code? \nIt reminds me of Christopher Alexander pointing out how our current culture has achieved to convince regular people that they can’t build their own houses.\n\n_Time_: That’s easier to understand. It seems insurmountable to get anything done these days that isn’t just a trivial application of high-level APIs in few lines of code, which most likely somebody else has already done. Also, infrastructure has accumulated millions of lines of code at this point so it’s hard to imagine doing something like that from scratch by yourself. But isn’t that just because our assumption is that a lot of tech has to be done like it has, and it would be dumb to not build on top of the infrastructure we already have? Was it better when we were naive and didn’t know how things “are supposed to be”?\nThat reminds me of the story Alan Kay often tells about Ivan Sutherland who supposedly said about inventing the first interactive graphics program, the first non-procedural programming language, the first object oriented software system, all in one year with Sketchpad, “Well, I didn’t know it was hard.”\n\n_Motivation_: Well, that’s a very personal one. No one can tell you what you should want to be doing, only you can decide that.\nBut it reminds me of <@U05SM46J1BK> who has carved out his own little piece of infrastructure with Uxn that over some time has grown to become his daily driver and — most importantly — seems to deliver endless motivation and joy to keep hacking away at it.\n\nI’m realizing that I’m writing this less as a response to you, <@UJBAJNFLK>. You provided an excellent prompt to write this down for myself. Thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1717926129.937119",
        "parent_user_id": "U02JQA5FY5C",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EYguP",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have neither the competence nor the time for this, but most importantly not the motivation."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI’d love to dig into this. All three of these.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Competence",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ": Seriously? You know how to program. You know more than one programming language. It’s all the same anyway. What makes you think you lack competence in building anything you can dream of that is made out of code? \nIt reminds me of Christopher Alexander pointing out how our current culture has achieved to convince regular people that they can’t build their own houses.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Time",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ": That’s easier to understand. It seems insurmountable to get anything done these days that isn’t just a trivial application of high-level APIs in few lines of code, which most likely somebody else has already done. Also, infrastructure has accumulated millions of lines of code at this point so it’s hard to imagine doing something like that from scratch by yourself. But "
                            },
                            {
                                "type": "text",
                                "text": "isn’t"
                            },
                            {
                                "type": "text",
                                "text": " that just because our assumption is that a lot of tech has to be done like it has, and it would be dumb to not build on top of the infrastructure we already have? Was it better when we were naive and "
                            },
                            {
                                "type": "text",
                                "text": "didn’t"
                            },
                            {
                                "type": "text",
                                "text": " know how things “are supposed to be”?\nThat reminds me of the story Alan Kay often tells about Ivan Sutherland who supposedly said about inventing the first interactive graphics program, the first non-procedural programming language, the first object oriented software system, all in one year with Sketchpad, “Well, I didn’t know it was hard.”\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Motivation",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ": Well, "
                            },
                            {
                                "type": "text",
                                "text": "that’s"
                            },
                            {
                                "type": "text",
                                "text": " a very personal one"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " No one can tell you what you should want to be doing, only you can decide that.\nBut it reminds me of "
                            },
                            {
                                "type": "user",
                                "user_id": "U05SM46J1BK"
                            },
                            {
                                "type": "text",
                                "text": " who has carved out his own little piece of infrastructure with Uxn that over some time has grown to become his daily driver and — most importantly "
                            },
                            {
                                "type": "text",
                                "text": "—"
                            },
                            {
                                "type": "text",
                                "text": " seems to deliver endless motivation and joy to keep hacking away at it"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " realizing that "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " writing this less as a response to you, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": ". You provided an excellent prompt to write this down for myself"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]