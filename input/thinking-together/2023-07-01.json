[
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1688211948.038639",
        "client_msg_id": "6b4a5a94-1975-41e1-a98b-cc57f7b8631f",
        "text": "I very much like this idea, it's so intuitive that I just thought, geez why isn't it done like that already",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HKz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I very much like this idea, it's so intuitive that I just thought, geez why isn't it done like that already"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688249425.972249",
        "client_msg_id": "e29b6d2e-fa0f-4a89-826d-3c7ca5330e90",
        "text": "<@UJBAJNFLK> interestingly I was thinking one aspect of code-as-hypertext is _earlier_ than usual binding. References get bound to objects when written. This is even earlier than in plain text compiled languages (identifiers in a text file are not bound at all). However the bindings-as-written are not the final bindings. During the course of meta-program and program execution they get rebound. Eg a reference to an abstract type may get re-bound to a concrete version of that type. Evolution of these bindings can be represented in the same structure.\nSmalltalk \/ Newspeak etc are a key influence behind the above idea. In Smalltalk we write classes and their methods directly, not worrying about file boundaries. I was thinking why the method body is text and not hypertext? Maybe new versions of GT\/Pharo do this better. GT still seems layered on rather than native.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e5\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " interestingly I was thinking one aspect of code-as-hypertext is "
                            },
                            {
                                "type": "text",
                                "text": "earlier",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " than usual binding. References get bound to objects when written. This is even earlier than in plain text compiled languages (identifiers in a text file are not bound at all). However the bindings-as-written are not the final bindings. During the course of meta-program and program execution they get rebound. Eg a reference to an abstract type may get re-bound to a concrete version of that type. Evolution of these bindings can be represented in the same structure.\nSmalltalk \/ Newspeak etc are a key influence behind the above idea. In Smalltalk we write classes and their methods directly, not worrying about file boundaries. I was thinking why the method body is text and not hypertext? Maybe new versions of GT\/Pharo do this better. GT still seems layered on rather than native."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688253408.334309",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1688253643.000000"
        },
        "client_msg_id": "ad28557b-c325-4a1b-9596-4881791b0b3c",
        "text": "Where do you imagine the hyperlinks going to, other definitions? Many of my apps have that ability, Teliva and some of the Freewheeling stuff, and I'm wondering if the ability to click on hyperlinks is all we're discussing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a8O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where do you imagine the hyperlinks going to, other definitions? Many of my apps have that ability, Teliva and some of the Freewheeling stuff, and I'm wondering if the ability to click on hyperlinks is all we're discussing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688253846.867889",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1688254273.000000"
        },
        "client_msg_id": "6edcf216-2f9c-49e9-83ca-68324449225f",
        "text": "Regarding the runtime execution of a program, the bottleneck is performance which feels orthogonal..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MgvR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding the runtime execution of a program, the bottleneck is performance which feels orthogonal.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688258729.660449",
        "client_msg_id": "cccc8c5e-e4e1-4ae5-9f32-8da75f73dec2",
        "text": "&gt; Where do you imagine the hyperlinks going to, other definitions?\nYes and also derived definitions (eg objects created via meta programming) and even runtime traces can link back to the definition objects.\n\n&gt; I’m wondering if the ability to click on hyperlinks is all we’re discussing.\nGood question. Clickable links between source definitions exist in many environments. Even vscode lets me do that with most of my programs. However this is typically implemented as a layer on top of the underlying media (text files). The links may not match always actual semantics, but more importantly they do not navigate to _derived_ definitions or connect runtime objects with definitions. In fact derived definitions are not typically available in the dev environment at all (smalltalk envs are the exception).\n\nThe idea is to use hypertext as a unifying interaction model between the person and the system - for hand written definitions, derived definitions as well as runtime traces. The hypertext ux would include clickable links and any other features we want to include eg inline content.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cnQLt",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where do you imagine the hyperlinks going to, other definitions?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes and also derived definitions (eg objects created via meta programming) and even runtime traces can link back to the definition objects.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m wondering if the ability to click on hyperlinks is all we’re discussing."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good question. Clickable links between source definitions exist in many environments. Even vscode lets me do that with most of my programs. However this is typically implemented as a layer on top of the underlying media (text files). The links may not match always actual semantics, but more importantly they do not navigate to "
                            },
                            {
                                "type": "text",
                                "text": "derived",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " definitions or connect runtime objects with definitions. In fact derived definitions are not typically available in the dev environment at all (smalltalk envs are the exception).\n\nThe idea is to use hypertext as a unifying interaction model between the person and the system - for hand written definitions, derived definitions as well as runtime traces. The hypertext ux would include clickable links and any other features we want to include eg inline content."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1688260474.718849",
        "client_msg_id": "b5458dbd-f177-4561-ba90-e7c5e1cfaa23",
        "text": "I think I understand now. The runtime traces is hard to do performantly, but for everything else, yes this sounds like a nice reasonable goal. My stuff isn't it yet; you can't click on any function to go to its call, as a very basic example. The metaprogramming, I gather you want to be able to click on a macro call and see its expanded output. All this seems doable. I think I'm headed in a similar direction but wasn't aimed quite here. Now I might be. :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "198+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I understand now. The runtime traces is hard to do performantly, but for everything else, yes this sounds like a nice reasonable goal. My stuff isn't it yet; you can't click on any function to go to its call, as a very basic example. The metaprogramming, I gather you want to be able to click on a macro call and see its expanded output. All this seems doable. I think I'm headed in a similar direction but wasn't aimed quite here. Now I might be. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1688261232.042339",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1688264067.000000"
        },
        "client_msg_id": "5bb5728a-e502-47e3-bf55-27e786ab8dd1",
        "text": "FWIW: this idea fires a set of neurons in me, labelled “GOTO”.\n\n## Synopsis\nGOTO v1 - assembler GOTO\nGOTO v2 - message passing\nGOTO v3 - CPS - Continuation Passing Style\nGOTO v4 - URL\nAll versions of GOTO suffer from the problem of so-called “structured”-ness.\n### Random Notes\n• Kinopio is GOTO v4\n• Message Passing is my current sweet spot.\n• most current *programming languages* are based on the Synchronous Pattern, i.e. they handle GOTO v1 and GOTO v3 but fumble GOTO v2 and GOTO v4.\n• “come from” is just GOTO in reverse, i.e. *backlinks*\n### Lessons From Org Charts\n## Further Thoughts\n<https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-07-01-GOTO>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "attachments": [
            {
                "from_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-07-01-GOTO",
                "image_url": "https:\/\/ogimage.obsidian.md\/og-image.png?title=2023-07-01-GOTO&description=%23+GOTO+GOTO+v1+-+assembler+GOTO+GOTO+v2+-+message+passing+GOTO+v3+-+CPS+-+Continuation+Passing+Style+GOTO+v4+-+URL+All+versions+of+GOTO+suffer+from+the+problem+of+so-called+%22structured%22-ness.++I+am+s%E2%80%A6",
                "image_width": 1200,
                "image_height": 630,
                "image_bytes": 48867,
                "id": 1,
                "original_url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-07-01-GOTO",
                "fallback": "2023-07-01-GOTO - Obsidian Publish",
                "text": "# GOTO GOTO v1 - assembler GOTO GOTO v2 - message passing GOTO v3 - CPS - Continuation Passing Style GOTO v4 - URL All versions of GOTO suffer from the problem of so-called \"structured\"-ness. I am s…",
                "title": "2023-07-01-GOTO - Obsidian Publish",
                "title_link": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-07-01-GOTO",
                "service_name": "publish.obsidian.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IA7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW: this idea fires a set of neurons in me, labelled “GOTO”.\n\n## Synopsis\nGOTO v1 - assembler GOTO\nGOTO v2 - message passing\nGOTO v3 - CPS - Continuation Passing Style\nGOTO v4 - URL\nAll versions of GOTO suffer from the problem of so-called “structured”-ness.\n### Random Notes\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Kinopio is GOTO v4"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Message Passing is my current sweet spot."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "most current "
                                    },
                                    {
                                        "type": "text",
                                        "text": "programming languages",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " are based on the Synchronous Pattern, i.e. they handle GOTO v1 and GOTO v3 but fumble GOTO v2 and GOTO v4."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "“come from” is just GOTO in reverse, i.e. "
                                    },
                                    {
                                        "type": "text",
                                        "text": "backlinks",
                                        "style": {
                                            "bold": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "### Lessons From Org Charts\n## Further Thoughts\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/publish.obsidian.md\/programmingsimplicity\/2023-07-01-GOTO"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688267306.869679",
        "client_msg_id": "8c0451d8-0350-43c7-8600-56235b5046ec",
        "text": "&gt; The runtime traces is hard to do performantly\nAgree. This could be opt-in via a debugging \/ “capture trace” mode. Hypertext that links back to definitions seems better than explicit print style debugging.\n&gt; The metaprogramming, I gather you want to be able to click on a macro call and see its expanded output\nYes. I also think it would be nice to have the generated definitions available in searches. Derived definitions may also be produced from external schemas or import time execution.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZbM8",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The runtime traces is hard to do performantly"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agree. This could be opt-in via a debugging \/ “capture trace” mode. Hypertext that links back to definitions seems better than explicit print style debugging.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The metaprogramming, I gather you want to be able to click on a macro call and see its expanded output"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. I also think it would be nice to have the generated definitions available in searches. Derived definitions may also be produced from external schemas or import time execution."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1688268275.855239",
        "client_msg_id": "de070423-100a-483b-8a26-b2b0d051b05d",
        "text": "Paul - thanks for sharing. My initial thought is that what you are calling GOTOs I usually call forms of coupling. It’s the essential quality of computers - specifically the couplings in the system simulate couplings in the real world or other models that we are trying to represent.\nI’m not sure how URLs are v4 - I assume you mean some kind off identifier that represents a semantic concept (like in RDF?)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1688176784.223859",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "12FPI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paul - thanks for sharing. My initial thought is that what you are calling GOTOs I usually call forms of coupling. It’s the essential quality of computers - specifically the couplings in the system simulate couplings in the real world or other models that we are trying to represent.\nI’m not sure how URLs are v4 - I assume you mean some kind off identifier that represents a semantic concept (like in RDF?)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]