[
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1593575630.016300",
        "client_msg_id": "649c6cc4-4739-438f-ad17-f3c580d95d67",
        "text": "Nice. What's your goal for this project? Planning to build a site\/app entirely in Smalltalk? Just hacking for fun?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593447459.015000",
        "parent_user_id": "URKQXRCAC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pi4Vg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice. What's your goal for this project? Planning to build a site\/app entirely in Smalltalk? Just hacking for fun?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "URKQXRCAC",
        "type": "message",
        "ts": "1593584354.016700",
        "client_msg_id": "d4453884-90e9-4c0d-b999-f1b4309afd71",
        "text": "I'm trying to build a platform for kids to learn to program, for fun and to learn stuff. Influenced by Alan's DynaBook and Papert's ideas. Some info is here <https:\/\/github.com\/ErikOnBike\/CodeParadise\/blob\/master\/introduction.md>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a55b20870fb9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-11-23\/6253994675665_a55b20870fb92473e7e8_72.png",
            "first_name": "Erik",
            "real_name": "Erik Stel",
            "display_name": "Erik Stel",
            "team": "T5TCAFTA9",
            "name": "foc572",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1593447459.015000",
        "parent_user_id": "URKQXRCAC",
        "attachments": [
            {
                "fallback": "[ErikOnBike\/CodeParadise] introduction.md",
                "text": "```\n# Code Paradise\n\nCode Paradise is the name of my current pet project. Code Paradise is going to be a [web based](#web-based) [platform](#platform) for [kids](#kids) to learn to program using Object Oriented principles in [Smalltalk](#Smalltalk). It is a place to go when initial experience has been gathered on HTML and CSS and\/or environments like [Scratch](<https:\/\/scratch.mit.edu>) and [Blockly](<https:\/\/developers.google.com\/blockly\/>).\n\n## Status\n\nCode Paradise is still in very early stages of development. Progress is limited because the development has to be done in the evenings and weekends. And even that is limited because of having a family and a regular social live. Development is still a one man show. The plan is to attract kids to join in at an early stage, so they can help shape the environment.\n\n## &lt;a name=\"platform\"&gt;Why a platform?&lt;\/a&gt;\n\nCode Paradise is going to be a platform for kids to share their work and help each other. Mentors (experienced developers and\/or teachers) are allowed on the platform as well.\n\n## &lt;a name=\"kids\"&gt;Why kids?&lt;\/a&gt;\n\nSimply put, kids are the future programmers and I like to offer another platform next to the existing ones. One based on the principles of [Object Orientation](<http:\/\/www.purl.org\/stefan_ram\/pub\/doc_kay_oop_en>) (Alan Kay's explanation). I have a broad range of experience with different programming languages and development environments and have personally been most happy with programming using [Smalltalk](#Smalltalk) (in different environments). I want to share that type of happiness with our future programmers.\n\nStrictly speaking the platform is not going to be restricted to kids. Anyone wanting to learn programming can join. Tone of voice, examples and explanation might be more focused on kids than (young) adults though.\n\n## &lt;a name=\"Smalltalk\"&gt;Why Smalltalk?&lt;\/a&gt;\n\nAs explained above, using Smalltalk for programming does and did make me very happy (as a programmer). Two elements stand out for me: the simplicity of the underlying model (communicating objects using messages) and a live moldable environment (direct changes and changing the development environment itself). Both are [design principles of Smalltalk](<http:\/\/www.cs.virginia.edu\/~evans\/cs655\/readings\/smalltalk.html>). Different Smalltalk implementations do exist, all with their own focus. Two have my special attention [Pharo](<https:\/\/www.pharo.org>) and [Cuis](<https:\/\/github.com\/Cuis-Smalltalk\/Cuis-Smalltalk-Dev>). The former has a very active community and is very feature rich. The latter is focused on a clean and simple implementation which is nice for learning purposes. Additionally a [toolkit Glamorous](<https:\/\/gtoolkit.com>) is built on top of Pharo that really shows the possibilities of moldability.\n\n## &lt;a name=\"web-based\"&gt;Why web based?&lt;\/a&gt;\n\nThe platform is going to be web based, because this lowers the barriers for using it. Anyone with a (relative recent) web browser on his\/her computer should be able to use the platform.\n\n## &lt;a name=\"implementation\"&gt;How will the platform be implemented?&lt;\/a&gt;\n\nThe platform will consist of a server farm running many Smalltalk images. At this time it is not decided if this will be limited to a specific Smalltalk implementation or if different implementations will co-exist. The latter would mean that these differences has to be made clear to the users, which does not help in the understandability of the platform. All code will become open source and schools, other organizations or individuals should be able to setup their own server\/platform as well.\n\n(the following text needs to be cleaned up)\n\n## Background UI\n\nThe development environment itself will be running on the mentioned servers. The web browser is only responsible for the user interface of the development environment. A small Smalltalk application will run (as a kind of Javascript replacement) in the web browser to handle user interface logic (displaying information and receiving input events). All decision logic (even of what should be displayed) is performed on the server side.\n\n[SqueakJS](<https:\/\/squeak.js.org>) or [Amber](<https:\/\/amber-lang.net>) can already be used as Smalltalk development environment in the web browser. They both would require quite some work to become a team environment in which users can help each other and an environment that could use more (server side) resources like databases. Running a 'regular' Smalltalk image inside SqueakJS does work, but requires a fast CPU and a lot of memory. Amber's main focus is on client side development. It could be used for the user interface, but it would use a very distinct implementation since it is not based on a Smalltalk image being run by a VM.\n\nThe current plan is to have a web browser as the 'head' of the development environment. It should only represent the display and input device. There has to be some logic in the web browser to create the display (creating elements in the DOM) and handling events (user pressing buttons or dragging windows). This is normally done in Javascript, but kids should not learn Javascript as well. Although some solutions do exist to have Smalltalk in the browser, the Javascript often shines through. As soon as an event is not handled correctly, Javascript will generate an exception. This does not fit the Smalltalk model and some translation has to be done between the two models. [PharoJS](<https:\/\/pharojs.github.io>) might be useful option here as well as SqueakJS, but both focus on a different use case.\n\nCurrently work is being based on a [tiny Smalltalk image](<https:\/\/github.com\/carolahp\/pharo\/tree\/candle>) running on SqueakJS (a Smalltalk VM written in Javascript) in the browser. This tiny image is responsible for the client side UI logic. The server side Smalltalk image contains UI components (classes) which 'know' their HTML and CSS (something kids do learn in different places) and a bit of Smalltalk code to handle events. This UI component (HTML, CSS and code) is transferred to the web browser and installed in the tiny image. It will create the same UI component (class) inside the browser and it can\/will only do the displaying and event handling. If the server side code changes, these changes are sent to the web browser as well. This keeps the UI components in sync. If an exception occurs in the tiny image, it will be send back to the server as an event. The server can handle it or show a debugger (which of course gets displayed in the web browser just like everything else). There has to be a tiny glue layer between the tiny image and the DOM. This is done by a Javascript plugin for SqueakJS (and could be regarded as part of the VM) like UI handling for desktop Smalltalks is also handled in plugins. \n\nThe tiny image will receive classes and methods in bytecode format. Execution of code is initiated by the development environment. This way no Compiler is needed in the tiny image. A working prototype of this mechanism (running in the browser) has been development and seems to perform well. The tiny image is around 150kb at the moment, but a number of features need to be added.\n\nThe UI components are based on the [Web Components](<https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Web_Components>) standard.\n\n## Background applications\n\nFor the application development at least two Smalltalk images are used. One image will contain the development environment (the one mentioned in the previous paragraph) and the others will run the applications under development. These applications themselves will be tiny images similar to the image for the UI described above. That way it is easy to create a new (or throw away an old) application, but still keep the development environment. The application itself will also not require a Compiler since all code will be installed in bytecode format from the development image (similar again to the way the UI image is provisioned). The tiny image make…",
                "title": "introduction.md",
                "footer": "<https:\/\/github.com\/ErikOnBike\/CodeParadise|ErikOnBike\/CodeParadise>",
                "id": 1,
                "title_link": "https:\/\/github.com\/ErikOnBike\/CodeParadise\/blob\/master\/introduction.md",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/ErikOnBike\/CodeParadise\/blob\/master\/introduction.md",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U2a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying to build a platform for kids to learn to program, for fun and to learn stuff. Influenced by Alan's DynaBook and Papert's ideas. Some info is here "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/ErikOnBike\/CodeParadise\/blob\/master\/introduction.md"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]