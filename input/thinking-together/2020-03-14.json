[
    {
        "text": "Finally got some time to round up the prior art on a largely forgotten idea in computing called managed time.  I think this in some ways is what version control does to files, but think of it at a more granular level of variables and functions and the kinds of interactions that will spawn off.\n\nGot the hint initially from Alan Kay’s writings and I think there is a lot of fertile areas here to dig into here: <https:\/\/prabros.com\/readings-on-time>\n\nWould love to hear your feedback if I have missed some related material in this post.",
        "files": [
            {
                "id": "F01007P0NRW",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UDKTZSD6H",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Kz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Finally got some time to round up the prior art on a largely forgotten idea in computing called managed time.  I think this in some ways is what version control does to files, but think of it at a more granular level of variables and functions and the kinds of interactions that will spawn off.\n\nGot the hint initially from Alan Kay’s writings and I think there is a lot of fertile areas here to dig into here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/prabros.com\/readings-on-time"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWould love to hear your feedback if I have missed some related material in this post."
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1584170145.320600",
        "client_msg_id": "74d3c746-1745-4f1b-b6b5-0d96f3d53f87",
        "thread_ts": "1584170145.320600",
        "reply_count": 20,
        "reply_users_count": 5,
        "latest_reply": "1584380073.349900",
        "reply_users": [
            "UD3AK9JRF",
            "UAVCC2X70",
            "U8A5MS6R1",
            "UDKTZSD6H",
            "UJ6LDMMN0"
        ],
        "replies": [
            {
                "user": "UD3AK9JRF",
                "ts": "1584215471.321700"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584216616.322100"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584218269.322300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584218274.322500"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1584218935.322700"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1584219180.323000"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584219435.323400"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1584219703.323700"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1584220126.324000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584244007.326100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584244853.326400"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584245036.326600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584245373.326800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584245623.327100"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584246206.327800"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1584280460.329100"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1584280588.330000"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1584281284.330800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584304150.335500"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1584380073.349900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UC2A2ARPT",
                    "UD31LGQKB",
                    "UBSMEUXAA",
                    "UAHHWT22U",
                    "U8A5MS6R1",
                    "UFQQ3P867",
                    "UD3AK9JRF",
                    "UJ6LDMMN0",
                    "U01038KJXRB",
                    "UL3CJ7YKC"
                ],
                "count": 11
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584215471.321700",
        "edited": {
            "user": "UD3AK9JRF",
            "ts": "1584215494.000000"
        },
        "client_msg_id": "fba8bbf1-0447-4d48-bf33-ed7cb862500c",
        "text": "Thanks. This is nicely put together. I don’t have much to add but I wish I did—there’s so much more thinking to be done in this space!\n\nI guess I would throw linear programming in there as a way to reason about time. I switch back and forth between Rust and Swift these days, and am more and more uncomfortable writing in languages with no way of saying “no one else can change, or ever refer to, this value after this point.” It’s just so much harder to reason about the behavior of an application.\n\nOn an unrelated note, I’ve thrown my chips on the logic programming square here, following Bloom and others. I feel there’s a great deal of exploration to be done even just with the theory and application of CRDTs. Logic programming gives me huge flexibility to express new ideas in terms of a single “happened before” relation. I know that building in theorem proving a la Alloy or TLA+ would help a lot too, as would interactive tools for visualizing and debugging.\nIf anyone else is exploring anything like this please let me know. I’ve only just begun.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EFj8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks. This is nicely put together. I don’t have much to add but I wish I did—there’s so much more thinking to be done in this space!\n\nI guess I would throw linear programming in there as a way to reason about time. I switch back and forth between Rust and Swift these days, and am more and more uncomfortable writing in languages with no way of saying “no one else can change, or ever refer to, this value after this point.” It’s just so much harder to reason about the behavior of an application.\n\nOn an unrelated note, I’ve thrown my chips on the logic programming square here, following Bloom and others. I feel there’s a great deal of exploration to be done even just with the theory and application of CRDTs. Logic programming gives me huge flexibility to express new ideas in terms of a single “happened before” relation. I know that building in theorem proving a la Alloy or TLA+ would help a lot too, as would interactive tools for visualizing and debugging.\nIf anyone else is exploring anything like this please let me know. I’ve only just begun."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "U85HCL7JP",
                    "UL3CJ7YKC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1584216616.322100",
        "client_msg_id": "dc9f7388-475f-422b-b54e-062d4401994a",
        "text": "There was a project that did something like this (i.e. references to variables and functions are bound to whatever version of them existed at the time the programmer coded the reference).\n\nAm I thinking of Lambdu?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Etu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a project that did something like this (i.e. references to variables and functions are bound to whatever version of them existed at the time the programmer coded the reference).\n\nAm I thinking of Lambdu?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1584218269.322300",
        "client_msg_id": "6bb5dc10-e04e-4e8c-8f5c-6ab14815c6a9",
        "text": "A related idea of mine:\n\n* Small set of datatypes (think JSON), all code is made of those too (think Lisp). Lexical scope (execution context) is also stored this way at runtime (think Scheme).\n\n* All operations (with few exceptions) in \"code\" therefore amounts to operating on that kind of data \/ structure.\n\n* If that's the whole universe of a running program, then user interaction also boils down to (directly or indirectly) causing the same kind of operations on the same kind of structure.\n\n* Coding involves editing a live structure, rather than writing text.\n\n* \"Code\" is actually stored as a list (or DAG, actually) of operations to apply, in some context.\n\n* Coding is done by recording (rather than just doing-and-forgetting) actions manually taken by the coder on live structure. The current state of \"the code\" is actually a pure function of actions taken.\n\n* Effectively, there's no difference between \"code\" and \"programming\", and both can be reviewed as a time- (or ordered)-sequence of actions, with \"the past\" edited directly to see what the result is in different cases, etc. Effectively it's the same kind of stuff could do with a GIT history.\n\nSo the lines between code, data, programming, user interaction (with full undo\/redo history tree), and source control, are all blurred.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A related idea of mine:\n\n* Small set of datatypes (think JSON), all code is made of those too (think Lisp). Lexical scope (execution context) is also stored this way at runtime (think Scheme).\n\n* All operations (with few exceptions) in \"code\" therefore amounts to operating on that kind of data \/ structure.\n\n* If that's the whole universe of a running program, then user interaction also boils down to (directly or indirectly) causing the same kind of operations on the same kind of structure.\n\n* Coding involves editing a live structure, rather than writing text.\n\n* \"Code\" is actually stored as a list (or DAG, actually) of operations to apply, in some context.\n\n* Coding is done by recording (rather than just doing-and-forgetting) actions manually taken by the coder on live structure. The current state of \"the code\" is actually a pure function of actions taken.\n\n* Effectively, there's no difference between \"code\" and \"programming\", and both can be reviewed as a time- (or ordered)-sequence of actions, with \"the past\" edited directly to see what the result is in different cases, etc. Effectively it's the same kind of stuff could do with a GIT history.\n\nSo the lines between code, data, programming, user interaction (with full undo\/redo history tree), and source control, are all blurred."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584218274.322500",
        "client_msg_id": "914a5afe-c9fa-48f8-ae46-f764dda832da",
        "text": "Lamdu does do something like this IIRC. They 'copy' the type signature of the function into every call site. When you modify the function definition signature, they know both - the old signature a call site was bound to, and the new one of the definition. Of course because it is projectional editing, the 'copy' is usually hidden when you look the call site.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "71=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu does do something like this IIRC. They 'copy' the type signature of the function into every call site. When you modify the function definition signature, they know both - the old signature a call site was bound to, and the new one of the definition. Of course because it is projectional editing, the 'copy' is usually hidden when you look the call site."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584218935.322700",
        "client_msg_id": "97fe0c20-53fe-448b-9a6c-af2eafbc9bf7",
        "text": "You maybe thinking of <https:\/\/www.unisonweb.org>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "attachments": [
            {
                "title": "The Unison language",
                "title_link": "https:\/\/www.unisonweb.org\/",
                "text": "A friendly programming language from the future.",
                "fallback": "The Unison language",
                "from_url": "https:\/\/www.unisonweb.org\/",
                "service_name": "unisonweb.org",
                "id": 1,
                "original_url": "https:\/\/www.unisonweb.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dcCma",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You maybe thinking of "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.unisonweb.org"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584219180.323000",
        "edited": {
            "user": "UD3AK9JRF",
            "ts": "1584219431.000000"
        },
        "client_msg_id": "40f4a4f9-880b-4c39-bde4-29e949ed501e",
        "text": "Following on to my earlier reply, Nikolas Göbel wrote a nice, if terse, round-up of ideas relevant to time (and divergence) in databases here: <https:\/\/www.nikolasgoebel.com\/2019\/12\/30\/perspectives-2019.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eZB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Following on to my earlier reply, Nikolas Göbel wrote a nice, if terse, round-up of ideas relevant to time (and divergence) in databases here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.nikolasgoebel.com\/2019\/12\/30\/perspectives-2019.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584219435.323400",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584219478.000000"
        },
        "client_msg_id": "289b1ee0-eb22-4e8f-af9b-8d685ab907c4",
        "text": "When I look at this space, I think of the discussions and approaches as within three *vague* categories.\n\nFirst is the 'essence' of the ideas - e.g. McCarthy's association of facts with pseudo\/logical time (and possibly place). This is really a variant of the meta idea \"make the implicit explicit\".\n\nSecond is 'data structure' oriented approaches. These are CRDTs, Datomic and such. We consider 'just data' flowing and persisted within the system and try to tag it with pseudo timestamps. We try to auto merge, query on a consistent 'view'. All data references have the psuedo timestamp. Even MVCC (and git) have this flavor - the git hash is the 'pseudo timestamp' of git data.\n\nThird is the 'system' oriented approaches - here it's not just about data but entire systems and subsystems have pseudo time. Examples are Reed's NAMOS, Jefferson's Virtual Time, the Croquet project, etc. The main difference I see here is *all messages* have the psuedo time attached. It's not just querying and modifying data, but any message between to nodes will have the pseudo time attached, which specifies which 'version' of the world the message comes from and refers to.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1fc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I look at this space, I think of the discussions and approaches as within three "
                            },
                            {
                                "type": "text",
                                "text": "vague",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " categories.\n\nFirst is the 'essence' of the ideas - e.g. McCarthy's association of facts with pseudo\/logical time (and possibly place). This is really a variant of the meta idea \"make the implicit explicit\".\n\nSecond is 'data structure' oriented approaches. These are CRDTs, Datomic and such. We consider 'just data' flowing and persisted within the system and try to tag it with pseudo timestamps. We try to auto merge, query on a consistent 'view'. All data references have the psuedo timestamp. Even MVCC (and git) have this flavor - the git hash is the 'pseudo timestamp' of git data.\n\nThird is the 'system' oriented approaches - here it's not just about data but entire systems and subsystems have pseudo time. Examples are Reed's NAMOS, Jefferson's Virtual Time, the Croquet project, etc. The main difference I see here is "
                            },
                            {
                                "type": "text",
                                "text": "all messages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have the psuedo time attached. It's not just querying and modifying data, but any message between to nodes will have the pseudo time attached, which specifies which 'version' of the world the message comes from and refers to."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "U85HCL7JP"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584219703.323700",
        "client_msg_id": "6533768a-8963-4a4c-9550-aa80a3c009d3",
        "text": "Sure. You could say: the development of concepts, the development of tools, and the coherent deployment of tools in the real world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzaRm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure. You could say: the development of concepts, the development of tools, and the coherent deployment of tools in the real world."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584220126.324000",
        "client_msg_id": "8f759b36-f4ca-493d-8e48-3e53d4bae18f",
        "text": "I’m interested in informing our concepts as well as we can by studying the way time is encoded, implicitly and explicitly, in our existing tools and practices. What concepts can you not encode directly in a system built on an append-only event log?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sruHy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m interested in informing our concepts as well as we can by studying the way time is encoded, implicitly and explicitly, in our existing tools and practices. What concepts can you not encode directly in a system built on an append-only event log?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1584235196.324400",
        "text": "Hey everyone, as someone who's new to language oriented programming (e.g. language workbenches, projectional editors, etc), are there any commonly used libraries or tooling?\nFor context, I'm trying to make a very simple projectional editor that has a 1-1 mapping between basic GLSL-esque language and a visual nodegraph representation. Normally I just reach for a handrolled parser &amp; LLVM and lots of scaffolding\/boilerplate making the visual editor. What I'm trying to do now is just make it be one editor",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584235196.324400",
        "reply_count": 45,
        "reply_users_count": 3,
        "latest_reply": "1586039519.136900",
        "reply_users": [
            "UAVCC2X70",
            "UD6EXQVM0",
            "U01003H81UM"
        ],
        "replies": [
            {
                "user": "UAVCC2X70",
                "ts": "1584499844.379300"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1584672264.423600"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584757194.466300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584764693.467400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584766787.468900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584767029.469300"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584829437.487200"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584829484.487400"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584829498.487600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584832188.487900"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584832495.488100"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584833717.488800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584849424.495300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584855908.495600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584926537.003200"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584926605.003400"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584926938.003800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584936184.004000"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584949436.004500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1584996497.009500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1585051254.011900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1585410542.011500"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585465775.017800"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1585539994.025900"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585559509.027100"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1585923314.091600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585935106.093300"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585935179.093500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1585947109.094000"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585954733.097000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1585966811.099700"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585971608.100300"
            },
            {
                "user": "U01003H81UM",
                "ts": "1585971646.100500"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1586009358.104600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586023268.114800"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586023416.115000"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586023628.115300"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1586038223.135000"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1586038296.135300"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586038313.135500"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1586038363.135700"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586038496.135900"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1586039133.136500"
            },
            {
                "user": "U01003H81UM",
                "ts": "1586039248.136700"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1586039519.136900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey everyone, as someone who's new to language oriented programming (e.g. language workbenches, projectional editors, etc), are there any commonly used libraries or tooling?\nFor context, I'm trying to make a very simple projectional editor that has a 1-1 mapping between basic GLSL-esque language and a visual nodegraph representation. Normally I just reach for a handrolled parser & LLVM and lots of scaffolding\/boilerplate making the visual editor. What I'm trying to do now is just make it be one editor"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584241624.324800",
        "client_msg_id": "60241537-50a9-406e-8b47-944407c70c83",
        "text": "It seems like pretty much everybody is working in a different environment?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4LV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like pretty much everybody is working in a different environment?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584241702.325100",
        "client_msg_id": "7b152b9c-4eb8-4e44-bff7-574b29c2d978",
        "text": "But I wonder if <https:\/\/gtoolkit.com> would work for you?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "reply_count": 31,
        "reply_users_count": 10,
        "latest_reply": "1585044181.011500",
        "reply_users": [
            "U01003H81UM",
            "UD3AK9JRF",
            "UEQ6M68H0",
            "UE1JQM9HQ",
            "ULM3U6275",
            "UJN1TAYEQ",
            "U8A5MS6R1",
            "UJBAJNFLK",
            "URKQXRCAC",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U01003H81UM",
                "ts": "1584241749.325400"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1584241776.325600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584241857.325800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1584246120.327600"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584246979.328100"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1584253461.328400"
            },
            {
                "user": "ULM3U6275",
                "ts": "1584296240.334800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1584305134.335800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584305820.336400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1584305927.336600"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1584306383.336800"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1584334653.337200"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584338489.337400"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584339242.337700"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584339325.337900"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584339585.338100"
            },
            {
                "user": "U01003H81UM",
                "ts": "1584339867.338300"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1584367248.343600"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1584367567.343800"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1584367628.344000"
            },
            {
                "user": "UE1JQM9HQ",
                "ts": "1584367715.344400"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1584438716.360300"
            },
            {
                "user": "URKQXRCAC",
                "ts": "1584560655.397800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1584834139.489800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1584835521.493900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1584837715.494100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1584839987.494600"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1584892057.001900"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1584894508.002500"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1584942983.004200"
            },
            {
                "user": "UJBAJNFLK",
                "ts": "1585044181.011500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Glamorous Toolkit",
                "title_link": "https:\/\/gtoolkit.com\/",
                "text": "Glamorous Toolkit is the moldable development environment",
                "fallback": "Glamorous Toolkit",
                "from_url": "https:\/\/gtoolkit.com\/",
                "service_icon": "https:\/\/gtoolkit.com\/favicon.ico",
                "service_name": "gtoolkit.com",
                "id": 1,
                "original_url": "https:\/\/gtoolkit.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eWW\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I wonder if "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gtoolkit.com"
                            },
                            {
                                "type": "text",
                                "text": " would work for you?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1584241749.325400",
        "text": "That looks super awesome",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=6gg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That looks super awesome"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UD3AK9JRF",
        "type": "message",
        "ts": "1584241776.325600",
        "client_msg_id": "4affcf4e-756e-46ed-8956-043757854b3c",
        "text": "It does, and the developers are on this Slack. I have no idea how easily it’ll plug into everything else you need to use.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35dfa49055c",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/235dfa49055c0a25f2ccfc667a7a6b77.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Peter",
            "real_name": "Peter Abrahamsen",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "rainhead",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=6T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does, and the developers are on this Slack. I have no idea how easily it’ll plug into everything else you need to use."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1584241857.325800",
        "edited": {
            "user": "U01003H81UM",
            "ts": "1584241876.000000"
        },
        "text": "Yeah, and even if it's not very moldable (ha ha), MIT license + opensource is a pretty close second best solution to having a library",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I8I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, and even if it's not very moldable (ha ha), MIT license + opensource is a pretty close second best solution to having a library"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1584244007.326100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584245457.000000"
        },
        "client_msg_id": "298e7cf1-535e-426c-a6cd-3fc2d1d9b94e",
        "text": "Hmm, I'd say that any \"mutable\" log can be recreated from an initial state and an append-only sequence of the mutations. So nothing, right?\n\nI think this is also called \"event sourcing\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rjb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I'd say that any \"mutable\" log can be recreated from an initial state and an append-only sequence of the mutations. So nothing, right?\n\nI think this is also called \"event sourcing\"?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584244853.326400",
        "client_msg_id": "e7b31ae4-1a78-4576-a9dc-aff2851094c3",
        "text": "I think 'append only' is a sound idea. You can encode everything in it. But then you can encode everything in any database. The question is what exactly is the information recorded in the log and where does it exist?\n\nTime is encoded implicitly in many places - any API call to a library, or message going to a service (assume both are stateful) has implicit time. The state itself has implicit time. Any copy of information has implicit time (e.g. a cache in front of a database implicitly refers to a specific time in the database (per entity)).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U=rF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think 'append only' is a sound idea. You can encode everything in it. But then you can encode everything in any database. The question is what exactly is the information recorded in the log and where does it exist?\n\nTime is encoded implicitly in many places - any API call to a library, or message going to a service (assume both are stateful) has implicit time. The state itself has implicit time. Any copy of information has implicit time (e.g. a cache in front of a database implicitly refers to a specific time in the database (per entity))."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584245036.326600",
        "client_msg_id": "b333d635-0985-421b-871e-cb4accc96c83",
        "text": "Another often overlooked place is the 'code version' itself refers to some time. When you roll out a new version to a part of the system, the code there is newer (~time) than the other code. The data\/information in dbs etc usually does not make the code time explicit - maybe it should.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h\/lWL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another often overlooked place is the 'code version' itself refers to some time. When you roll out a new version to a part of the system, the code there is newer (~time) than the other code. The data\/information in dbs etc usually does not make the code time explicit - maybe it should."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584245373.326800",
        "client_msg_id": "03b9b613-18ce-4497-a00d-80e8a9572797",
        "text": "Any information displayed to the user on any screen has implicit time (it represents the info at a specific time) - sometimes this is explicit as a version number. Essentially any projection of information has associated time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7e5Yt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any information displayed to the user on any screen has implicit time (it represents the info at a specific time) - sometimes this is explicit as a version number. Essentially any projection of information has associated time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1584245623.327100",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584245828.000000"
        },
        "client_msg_id": "b46c6b3b-d35c-414d-8333-dac9743b41b2",
        "text": "I suppose that's even true of the messages in this thread :)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rPi5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose that's even true of the messages in this thread :)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1584246120.327600",
        "client_msg_id": "1d145550-b343-4331-abd6-9f54e9f6b637",
        "text": "Glamorous toolkit is a smalltalk product built in Pharo to my knowledge. It is Tudor Girba's project, and he has spent years on this very complex system. Given Smalltalk's great age, Pharo is indeed one of the most sophisticated IDE's on the planet. However, I find smalltalk horrible, and although i tried learning it with the Adele Goldberg Smalltalk-80 book, it just seemed perverse to send the message \"plus\" to the number 2 along with a message content of 2 to add 2+2. I gave it a try, but after learning Assembler, PL\/1, FORTRAN, i must have been contaminated by the Algol family to the point where smalltalk is a no-go.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fo5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Glamorous toolkit is a smalltalk product built in Pharo to my knowledge. It is Tudor Girba's project, and he has spent years on this very complex system. Given Smalltalk's great age, Pharo is indeed one of the most sophisticated IDE's on the planet. However, I find smalltalk horrible, and although i tried learning it with the Adele Goldberg Smalltalk-80 book, it just seemed perverse to send the message \"plus\" to the number 2 along with a message content of 2 to add 2+2. I gave it a try, but after learning Assembler, PL\/1, FORTRAN, i must have been contaminated by the Algol family to the point where smalltalk is a no-go."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1584246206.327800",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584246223.000000"
        },
        "client_msg_id": "2acd889a-86b0-41c4-aee4-c75a613dd34a",
        "text": "Yeah. I think it's not just 'time' but also the information model. E.g. what is time associated with? Even pseudo time by itself it is pointless. What is useful is a 'fact' in some information schema. E.g. (property a, value b, time t) which is true at some time. Stuff usually put in the append only event logs. So what does the info model look like. Is it key\/value with global keys? How does adding a new key fit in? WHere do agents\/nodes fit in and how is intention encoded? E.g. how do we represent that the user clicked a button? They were looking at a version of some information (list of facts at time t) but there is lag and uncertainly until the fact is 'accepted' by the system. So I think we have to even make nodes explicit in our model. Then all messages become idempotent since everything is explicit (x said y at time t) - and can be replicated, distributed without issue.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E6iC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. I think it's not just 'time' but also the information model. E.g. what is time associated with? Even pseudo time by itself it is pointless. What is useful is a 'fact' in some information schema. E.g. (property a, value b, time t) which is true at some time. Stuff usually put in the append only event logs. So what does the info model look like. Is it key\/value with global keys? How does adding a new key fit in? WHere do agents\/nodes fit in and how is intention encoded? E.g. how do we represent that the user clicked a button? They were looking at a version of some information (list of facts at time t) but there is lag and uncertainly until the fact is 'accepted' by the system. So I think we have to even make nodes explicit in our model. Then all messages become idempotent since everything is explicit (x said y at time t) - and can be replicated, distributed without issue."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01003H81UM",
        "type": "message",
        "ts": "1584246979.328100",
        "text": "Yeah, after looking at it, unfortunately won't be too useful other than for architecture design inspiration. I have hard requirement around gamedev usecases  so i'm stuck to a C-like language",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bf5b5671ecea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-14\/1000271226192_bf5b5671eceac85250cf_72.png",
            "first_name": "",
            "real_name": "ikrima",
            "display_name": "ikrima",
            "team": "T5TCAFTA9",
            "name": "e228",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ltLV5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, after looking at it, unfortunately won't be too useful other than for architecture design inspiration. I have hard requirement around gamedev usecases  so i'm stuck to a C-like language"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1584253461.328400",
        "client_msg_id": "a26a63d7-2585-4bcf-8180-847d473ab29c",
        "text": "Thanks for the mention, <@UD3AK9JRF>.\n\n<@U01003H81UM>: Glamorous Toolkit has a rather extensive infrastructure for various languages, including C. The environment itself is implemented in Pharo, indeed. However, it is meant to be a platform for creating system-specific (not just language specific) environments. This also includes debugging and inspection, too, not just the editing part.\n\nGT comes with a dedicated graphical stack. The actual rendering is based on Skia (<https:\/\/skia.org>).\n\nIf you are looking at only editing, you might also want to take a look at MPS (<https:\/\/www.jetbrains.com\/mps>).\n\nIn any case, if you have questions about GT, I’d be happy to address them.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "attachments": [
            {
                "service_name": "JetBrains",
                "title": "MPS: The Domain-Specific Language Creator by JetBrains",
                "title_link": "https:\/\/www.jetbrains.com\/mps",
                "text": "Use the MPS platform to create your own domain-specific language that speaks to your business needs.",
                "fallback": "JetBrains: MPS: The Domain-Specific Language Creator by JetBrains",
                "image_url": "http:\/\/resources.jetbrains.com\/storage\/products\/mps\/img\/meta\/mps_1280x800.png",
                "fields": [
                    {
                        "title": "Platforms:",
                        "value": "Windows, macOS, Linux",
                        "short": true
                    }
                ],
                "from_url": "https:\/\/www.jetbrains.com\/mps",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 1632542,
                "service_icon": "https:\/\/www.jetbrains.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.jetbrains.com\/mps"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IpqOH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the mention, "
                            },
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U01003H81UM"
                            },
                            {
                                "type": "text",
                                "text": ": Glamorous Toolkit has a rather extensive infrastructure for various languages, including C. The environment itself is implemented in Pharo, indeed. However, it is meant to be a platform for creating system-specific (not just language specific) environments. This also includes debugging and inspection, too, not just the editing part.\n\nGT comes with a dedicated graphical stack. The actual rendering is based on Skia ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/skia.org"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nIf you are looking at only editing, you might also want to take a look at MPS ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.jetbrains.com\/mps"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nIn any case, if you have questions about GT, I’d be happy to address them."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "U01003H81UM"
                ],
                "count": 2
            }
        ]
    }
]