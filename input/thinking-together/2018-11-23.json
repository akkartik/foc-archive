[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1542984793.264900",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1542985952.000000"
        },
        "client_msg_id": "7c747476-126b-46d6-aae7-887cc8d1c0eb",
        "text": "Looks like it shares some aspects with my own work. Also similar to Red\/Rebol -- <@UCGR73CAY> .. any idea who is behind it? The website is a #fail!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541001965.051200",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "98coo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like it shares some aspects with my own work. Also similar to Red\/Rebol -- "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGR73CAY"
                            },
                            {
                                "type": "text",
                                "text": " .. any idea who is behind it? The website is a #fail!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1542985071.265100",
        "client_msg_id": "8a238593-45aa-429f-b359-0b95bbc7f257",
        "text": "found this: <https:\/\/dl.acm.org\/citation.cfm?id=3276949>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541001965.051200",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rPzSL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "found this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/dl.acm.org\/citation.cfm?id=3276949"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1542985080.265300",
        "client_msg_id": "8e8fe3aa-4088-4b85-a147-c4c106a83398",
        "text": "and: <https:\/\/conf.researchr.org\/event\/dls-2018\/dls-2018-query-based-object-oriented-programming>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541001965.051200",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/xG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/conf.researchr.org\/event\/dls-2018\/dls-2018-query-based-object-oriented-programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1542989678.278900",
        "client_msg_id": "5373C802-49B7-4C97-BA56-3646142B96A5",
        "text": "I found this article very insightful:\n<https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation>\n\nSome quotes to get you excited about reading it:\n\n&gt;Just as a falling apple doesn’t compute integrals — it just falls — so too Turing machines and any other machine model compute neither higher-order nor first-order functions; they compute bits.\n\n&gt;In fact, given a rich enough type system, we could burden an arbitrary portion of the computation on the type inferencer or on the collaborator (programmer) and the type checker.\n\n&gt;Viewing machine models and language models as competing is a mistake that confuses computation (the system) with programming (concerned with syntax and semantics), two fundamentally different activities.\n\n&gt;Machine models are far from ideal programming models when the programmer is a human.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542989678.278900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1543008230.308700",
        "reply_users": [
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1543008230.308700"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Ron Pressler",
                "title": "What We Talk About When We Talk About Computation",
                "title_link": "https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation",
                "text": "Machine and language models of computation differ so greatly in the computational complexity properties of their representation that they form two distinct classes that cannot be directly compared in a meaningful way. While machine models are self-contained, the properties of the language models indicate that they require a computationally powerful collaborator, and are better called models of programming.",
                "fallback": "Ron Pressler: What We Talk About When We Talk About Computation",
                "thumb_url": "http:\/\/www.gravatar.com\/avatar\/c69557151e2f8331f6b1865469b694dd?s=200",
                "ts": 1472540400,
                "from_url": "https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation",
                "thumb_width": 200,
                "thumb_height": 200,
                "service_icon": "https:\/\/pron.github.io\/fav\/favicon-152.png",
                "id": 1,
                "original_url": "https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dpaO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I found this article very insightful:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSome quotes to get you excited about reading it:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just as a falling apple doesn’t compute integrals — it just falls — so too Turing machines and any other machine model compute neither higher-order nor first-order functions; they compute bits."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In fact, given a rich enough type system, we could burden an arbitrary portion of the computation on the type inferencer or on the collaborator (programmer) and the type checker."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Viewing machine models and language models as competing is a mistake that confuses computation (the system) with programming (concerned with syntax and semantics), two fundamentally different activities."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Machine models are far from ideal programming models when the programmer is a human."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UCXR52MU2"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1542993591.279300",
        "client_msg_id": "54eb8a4c-05cb-45d6-8416-b136e7eedc30",
        "text": "thanks!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1541001965.051200",
        "parent_user_id": "UCGR73CAY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ISS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U85HCL7JP",
        "type": "message",
        "ts": "1542993783.280000",
        "client_msg_id": "852edf2e-1fe6-4830-9ba8-6f7b294a7912",
        "text": "Do you agree with the difference made in this article? <https:\/\/computinged.wordpress.com\/2018\/11\/23\/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c5d8f6a2266",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-25\/1286770110448_0c5d8f6a2266551a36f2_72.jpg",
            "first_name": "",
            "real_name": "Daniel Garcia",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "daniel.garcia.carmona",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "reply_count": 13,
        "reply_users_count": 3,
        "latest_reply": "1543023028.309400",
        "reply_users": [
            "U5STGTB3J",
            "UCUSW7WVD",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "U5STGTB3J",
                "ts": "1542994581.288400"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1542994966.292800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543000463.294000"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1543001288.302600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543001954.302800"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1543002173.305500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543002660.305800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543002788.306100"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1543003029.307600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543003074.307800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543003852.308000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1543008358.308900"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1543023028.309400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Computing Education Research Blog",
                "service_url": "http:\/\/computinged.wordpress.com",
                "title": "Literature is to Composition, as Computer Science is to Computational Literacy\/Thinking",
                "title_link": "https:\/\/computinged.wordpress.com\/2018\/11\/23\/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking\/",
                "author_name": "Mark Guzdial",
                "author_link": "https:\/\/computinged.wordpress.com\/author\/computinged\/",
                "thumb_url": "https:\/\/computinged.files.wordpress.com\/2018\/11\/coding_literacy___the_mit_press.png?fit=200%2C150",
                "thumb_width": 199,
                "thumb_height": 108,
                "text": "Annette Vee was visiting in Ann Arbor, and looked me up. We had coffee and a great conversation.&nbsp; Annette is an English Professor who teaches Composition at University of Pittsburgh (see website here). She published a book last year with MIT Press,&nbsp;Coding Literacy: How Computer Programming is Changing Writing. (I&rsquo;m part way through it and recommend it!)&nbsp;She knew me from this blog and my other writing about computational literacy. I was thrilled to meet someone who makes the argument for code-as-literacy with a real claim to understanding&nbsp;literacy.\nOne of the themes in our conversation was the distinction between literature and composition.&nbsp; (I&rsquo;m going to summarize something we were talking about &mdash; Annette is not responsible for me getting things wrong here.) Literature is about doing writing very&nbsp;well, about writing great works that stand the test of time. It&rsquo;s about understanding and emulating greater writers.&nbsp; Composition is about writing&nbsp;well for communication.&nbsp;It&rsquo;s about letters to Grandma, and office memos, and making your emails effective.&nbsp; Composition is about writing understandable prose, not great prose as in literature. People in literature sometimes look down on those in composition.\nThere&rsquo;s a similar distinction to be made between computer science as it&rsquo;s taught in Universities and what Annette and I are calling coding\/computational literacy (but which might be what Aman Yadav and Shuchi Grover are calling computational thinking).&nbsp; Computer science aims to prepare people to engineer complex, robust, and secure systems that work effectively for many users. Computational literacy is about people using code to communicate, to express thoughts, and to test ideas. This code doesn&rsquo;t have to be pretty or robust. It certainly shouldn&rsquo;t be complex, or nobody will do it. It should be secure, but that security should probably be built into the programming system rather than expecting to teach people about it (as Ben Herold recently talked about).&nbsp; People in computer science will likely look down on those teaching computational literacy or computational thinking. That&rsquo;s okay.\nFew people will write literature. Everyone will compose.",
                "fallback": "Computing Education Research Blog Link: Literature is to Composition, as Computer Science is to Computational Literacy\/Thinking",
                "from_url": "https:\/\/computinged.wordpress.com\/2018\/11\/23\/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking\/",
                "service_icon": "https:\/\/secure.gravatar.com\/blavatar\/cdf22afe2630f1473c2def7289f11fee?s=114",
                "id": 1,
                "original_url": "https:\/\/computinged.wordpress.com\/2018\/11\/23\/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2zwP3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you agree with the difference made in this article? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/computinged.wordpress.com\/2018\/11\/23\/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1542994581.288400",
        "client_msg_id": "826560C6-C961-465A-8B49-AB26B5115C1D",
        "text": "It's hard to not go meta on this… :-)\n\nI wasn’t aware of the term _composition_ used in writing.\nNot sure if the analogy is very useful or terribly important to make.\n\nThe main question is: What are you optimizing for? \nLet's throw yet another analogy in: Are you an architect building a house to serve your client's need for shelter, or are you trying to create a beautiful piece of art that will hopefully become an iconic part of your city's skyline?\n\nYou can’t argue that there's no difference between the two. It's important that you know which game you’re playing to have the impact you want.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HCy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's hard to not go meta on this… :-)\n\nI wasn’t aware of the term "
                            },
                            {
                                "type": "text",
                                "text": "composition",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " used in writing.\nNot sure if the analogy is very useful or terribly important to make.\n\nThe main question is: What are you optimizing for? \nLet's throw yet another analogy in: Are you an architect building a house to serve your client's need for shelter, or are you trying to create a beautiful piece of art that will hopefully become an iconic part of your city's skyline?\n\nYou can’t argue that there's no difference between the two. It's important that you know which game you’re playing to have the impact you want."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1542994966.292800",
        "client_msg_id": "EBEE7FC4-B9C6-4421-B50A-2F111433111B",
        "text": "Thinking about this a little more:\n\nAs with all things that come disguised as simple black\/white matters (which is just a way for humans to optimize for effective communication), reality is almost always more complex and more like a spectrum.\n\nFor all three domains (writing, architecture, and programming) a little knowledge of the other extreme on the spectrum you’re not currently optimizing for can go a long way in helping you achieve a better outcome.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/6P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about this a little more:\n\nAs with all things that come disguised as simple black\/white matters (which is just a way for humans to optimize for effective communication), reality is almost always more complex and more like a spectrum.\n\nFor all three domains (writing, architecture, and programming) a little knowledge of the other extreme on the spectrum you’re not currently optimizing for can go a long way in helping you achieve a better outcome."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543000463.294000",
        "client_msg_id": "a257e9e6-a2e3-490c-97a4-c462256ca0f4",
        "text": "Couple of citations:\n\n<https:\/\/en.wikipedia.org\/wiki\/How_Buildings_Learn> is a thinly veiled case for favoring function over aesthetics.\n\n<https:\/\/en.wikipedia.org\/wiki\/Notes_on_the_Synthesis_of_Form> tries to derive the ideal form given a function. Its key insight is to express the function not as a set of requirements that a building should obey, but as a set of _misfits_ that the building should _avoid_.\n\nI'm very influenced by these two books, and so I tend to be anti-aesthetic. Until, that is, somebody can tell me the reason for the aesthetic. A _concrete_ reason in the current situation. Over time I have also tended to grow anti-meta and anti-analogy. These two books are all the analogy a programmer needs. They're far better developed than anything we're likely to think up.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/en\/9\/91\/How_Buildings_Learn_%28Stewart_Brand_book%29_cover.jpg",
                "image_width": 340,
                "image_height": 274,
                "image_bytes": 30727,
                "title": "How Buildings Learn",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/How_Buildings_Learn",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/How_Buildings_Learn",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "How Buildings Learn: What Happens After They’re Built is an illustrated book on the evolution of buildings and how buildings adapt to changing requirements over long periods. It was written by Stewart Brand and published by Viking Press in 1994. In 1997 it was turned into a 6-part TV series on the BBC.",
                "fallback": "wikipedia: How Buildings Learn",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/How_Buildings_Learn"
            },
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/en\/1\/18\/Notes_on_the_Synthesis_of_Form_-_cover.jpg",
                "image_width": 257,
                "image_height": 388,
                "image_bytes": 16973,
                "title": "Notes on the Synthesis of Form",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Notes_on_the_Synthesis_of_Form",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Notes_on_the_Synthesis_of_Form",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Notes on the Synthesis of Form is a book by Christopher Alexander about the process of design.",
                "fallback": "wikipedia: Notes on the Synthesis of Form",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 2,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Notes_on_the_Synthesis_of_Form"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GCMsd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Couple of citations:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/How_Buildings_Learn"
                            },
                            {
                                "type": "text",
                                "text": " is a thinly veiled case for favoring function over aesthetics.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Notes_on_the_Synthesis_of_Form"
                            },
                            {
                                "type": "text",
                                "text": " tries to derive the ideal form given a function. Its key insight is to express the function not as a set of requirements that a building should obey, but as a set of "
                            },
                            {
                                "type": "text",
                                "text": "misfits",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that the building should "
                            },
                            {
                                "type": "text",
                                "text": "avoid",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI'm very influenced by these two books, and so I tend to be anti-aesthetic. Until, that is, somebody can tell me the reason for the aesthetic. A "
                            },
                            {
                                "type": "text",
                                "text": "concrete",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reason in the current situation. Over time I have also tended to grow anti-meta and anti-analogy. These two books are all the analogy a programmer needs. They're far better developed than anything we're likely to think up."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1543001288.302600",
        "client_msg_id": "23EAEF4A-64A7-4E08-B089-047EC452843C",
        "text": "<@UCUSW7WVD> I can totally see your point and value function over form and yet I can’t describe myself as “anti-aesthetic”. Mostly because I believe aesthetic can be a shortcut to describe something (functionally) useful without fully understanding why it is useful. Well, I subscribe to Steve Jobs’ “Design is how it works” definition of design too, so that might be important context. And as far as I can understand, that excludes all the cases where aesthetics don’t serve a higher purpose and have a contribution to form or usefulness.\n\nI guess what I’m saying is that as humans I hope were somehow wired to perceive greatness through aesthetics as a shortcut. But then just looking at the design of many products on the market it’s clearly a skill that is not evenly distributed…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TpqJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I can totally see your point and value function over form and yet I can’t describe myself as “anti-aesthetic”. Mostly because I believe aesthetic can be a shortcut to describe something (functionally) useful without fully understanding why it is useful. Well, I subscribe to Steve Jobs’ “Design is how it works” definition of design too, so that might be important context. And as far as I can understand, that excludes all the cases where aesthetics don’t serve a higher purpose and have a contribution to form or usefulness.\n\nI guess what I’m saying is that as humans I hope were somehow wired to perceive greatness through aesthetics as a shortcut. But then just looking at the design of many products on the market it’s clearly a skill that is not evenly distributed…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543001954.302800",
        "client_msg_id": "da86d5a1-9e76-4fa3-b2c1-2b3b1031de9e",
        "text": "Totally. But it's worth remembering that it's just a heuristic. It's often misleading, particularly when arrived at by analogy with other fields. Worth remembering that there's never been anything quite like programming.\n\nWe're often building things for lots of people, that may last a long time. Shortcuts need to be expanded in that situation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wxe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally. But it's worth remembering that it's just a heuristic. It's often misleading, particularly when arrived at by analogy with other fields. Worth remembering that there's never been anything quite like programming.\n\nWe're often building things for lots of people, that may last a long time. Shortcuts need to be expanded in that situation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1543002173.305500",
        "client_msg_id": "4A3C5085-4869-4A99-9C9F-3AEEC6C3AD7D",
        "text": "Oh, about the “analogy” part I’d like to recommend the book I’m reading right now: \n_Metaphors We Live By_ by George Lakoff (<https:\/\/www.goodreads.com\/book\/show\/34459.Metaphors_We_Live_By>)\n\nIt makes a (pretty compelling) case that we structure all our thinking by metaphors and basically all understanding is enabled by it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "title": "Metaphors We Live By by George Lakoff",
                "title_link": "https:\/\/www.goodreads.com\/book\/show\/34459.Metaphors_We_Live_By",
                "text": "Metaphors We Live By has 4,026 ratings and 313 reviews. Trevor said: I first read parts of this book nearly 20 years ago. I meant to get my hands on the ...",
                "fallback": "Metaphors We Live By by George Lakoff",
                "thumb_url": "https:\/\/i.gr-assets.com\/images\/S\/compressed.photo.goodreads.com\/books\/1388194058i\/34459._UX500_SS500_.jpg",
                "from_url": "https:\/\/www.goodreads.com\/book\/show\/34459.Metaphors_We_Live_By",
                "thumb_width": 500,
                "thumb_height": 500,
                "service_icon": "https:\/\/www.goodreads.com\/favicon.ico",
                "service_name": "goodreads.com",
                "id": 1,
                "original_url": "https:\/\/www.goodreads.com\/book\/show\/34459.Metaphors_We_Live_By"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pHJD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, about the “analogy” part I’d like to recommend the book I’m reading right now: \n"
                            },
                            {
                                "type": "text",
                                "text": "Metaphors We Live By",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by George Lakoff ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.goodreads.com\/book\/show\/34459.Metaphors_We_Live_By"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nIt makes a (pretty compelling) case that we structure all our thinking by metaphors and basically all understanding is enabled by it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543002660.305800",
        "client_msg_id": "e83a445b-bade-468f-a704-a677d03207ae",
        "text": "Oh I have no disagreement there. I haven't read this yet, but Hofstadter says similar things, and my all-time favorite AI project is Copycat from his research group: <https:\/\/en.wikipedia.org\/wiki\/Copycat_(software)>\n\nOoh, I just noticed it's been ported to Python! <https:\/\/github.com\/fargonauts\/copycat>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/en\/d\/d4\/Metacat_demo_abc_abd_mrrjjj_mrrjjjj.jpg",
                "image_width": 346,
                "image_height": 288,
                "image_bytes": 20310,
                "title": "Copycat (software)",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Copycat_(software)",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Copycat_(software)",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Copycat is a model of analogy making and human cognition based on the concept of the parallel terraced scan, developed in 1988 by Douglas Hofstadter, Melanie Mitchell, and others at the Center for Research on Concepts and Cognition, Indiana University Bloomington. The original Copycat was written in Common Lisp and is bitrotten (as it relies on now-outdated graphics libraries for Lucid Common Lisp); however,  Java and Python ports exist. The latest version in 2018 is a Python3 port by Lucas Saldyt and J. Alan Brogan.",
                "fallback": "wikipedia: Copycat (software)",
                "service_icon": "https:\/\/a.slack-edge.com\/bfaba\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Copycat_(software)"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dq4Dm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh I have no disagreement there. I haven't read this yet, but Hofstadter says similar things, and my all-time favorite AI project is Copycat from his research group: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Copycat_(software)"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOoh, I just noticed it's been ported to Python! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/fargonauts\/copycat"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543002788.306100",
        "client_msg_id": "e24bc785-2511-4060-879a-df7d2715a36d",
        "text": "_\/me clones the repo_\n\nBut to finish my comment, even if it's human nature to reason by analogy it's worth asking if programmers should go with or against the flow there.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "teoh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/me clones the repo",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut to finish my comment, even if it's human nature to reason by analogy it's worth asking if programmers should go with or against the flow there."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1543003029.307600",
        "client_msg_id": "18E85D6E-BAEF-4CDC-B83A-67728434748D",
        "text": "&gt;it's worth asking if programmers should go with or against the flow there.\n\n`s\/programmers\/humans\/`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=GjtD",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's worth asking if programmers should go with or against the flow there."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "s\/programmers\/humans\/",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543003074.307800",
        "client_msg_id": "7a3875f2-f795-46ff-bf53-2d32b43d757b",
        "text": ":slightly_smiling_face: True. I'd like all people programming. It's worth expanding all heuristics in general. But my meta-heuristic is to mistrust aesthetics _when programming in particular_.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6kS0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " True. I'd like all people programming. It's worth expanding all heuristics in general. But my meta-heuristic is to mistrust aesthetics "
                            },
                            {
                                "type": "text",
                                "text": "when programming in particular",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543003852.308000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1543003950.000000"
        },
        "client_msg_id": "f04969ad-e6ce-4549-95c9-ad2cd3e38211",
        "text": "<@U85HCL7JP> to answer your question, I like the analogy in your post. It's kinda similar to (though not subsumed by or isomorphic to) one I've been making for a couple of years:\n\nProgramming literacy is about being able to reason critically about an arbitrary program, and about being able to compare and contrast two programs (functions) that do similar things.\n\nThis analogy seems to work in a couple of ways:\n\nWe often learn to read by practicing writing. But that's just part of the process. _What_ you have written is irrelevant by the time you gain literacy.\n\nI'd like to live in a world where most people are literate by this definition. They can't write an OS (novel), but they do _read_ OSs every once in a while when they need to. (Unfortunately, I think _nobody_ is literate by this definition today. All some of us programmer-priests can do easily is read programs we ourselves wrote. Not too long ago. It's because we're writing in the equivalent of Roman numerals, and then struggling to read it back, tongues sticking out.)\n\n_(This builds on my earlier comment at <https:\/\/futureprogramming.slack.com\/archives\/C5U3SEW6A\/p1542223799068500?thread_ts=1542220667.062400.>)_",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cGQJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " to answer your question, I like the analogy in your post. It's kinda similar to (though not subsumed by or isomorphic to) one I've been making for a couple of years:\n\nProgramming literacy is about being able to reason critically about an arbitrary program, and about being able to compare and contrast two programs (functions) that do similar things.\n\nThis analogy seems to work in a couple of ways:\n\nWe often learn to read by practicing writing. But that's just part of the process. "
                            },
                            {
                                "type": "text",
                                "text": "What",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you have written is irrelevant by the time you gain literacy.\n\nI'd like to live in a world where most people are literate by this definition. They can't write an OS (novel), but they do "
                            },
                            {
                                "type": "text",
                                "text": "read",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " OSs every once in a while when they need to. (Unfortunately, I think "
                            },
                            {
                                "type": "text",
                                "text": "nobody",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is literate by this definition today. All some of us programmer-priests can do easily is read programs we ourselves wrote. Not too long ago. It's because we're writing in the equivalent of Roman numerals, and then struggling to read it back, tongues sticking out.)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(This builds on my earlier comment at ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureprogramming.slack.com\/archives\/C5U3SEW6A\/p1542223799068500?thread_ts=1542220667.062400.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1543008230.308700",
        "client_msg_id": "c960df41-fe7e-4f4d-9176-9fa8c69f0727",
        "text": "Great read! I definitely take a TOC perspective on computing (i.e. functions and types are imagined concepts and computation is a physical process.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542989678.278900",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IOIMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great read! I definitely take a TOC perspective on computing (i.e. functions and types are imagined concepts and computation is a physical process.)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1543008358.308900",
        "client_msg_id": "2ec9c337-5988-4202-953e-c58519366e52",
        "text": "<@U5STGTB3J> One addendum on analogies: analogies are great for quickly painting a picture to someone who's utterly new to something. Giving an analogy for programming to a non-programmer is useful, because it can get a lot communicated very quickly. If it's misleading in a few places that's fine. We can elaborate if we need to.\n\nHowever, I've found analogies to be poor ways to try to persuade people of something opposite their own beliefs. I've tried to justify the direction I take in my research by making analogies with past historical events, movements, etc. And they've all uniformly bombed.\n\nThis may be obvious, but it took me a certain amount of head-butting to realize..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fiYT+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " One addendum on analogies: analogies are great for quickly painting a picture to someone who's utterly new to something. Giving an analogy for programming to a non-programmer is useful, because it can get a lot communicated very quickly. If it's misleading in a few places that's fine. We can elaborate if we need to.\n\nHowever, I've found analogies to be poor ways to try to persuade people of something opposite their own beliefs. I've tried to justify the direction I take in my research by making analogies with past historical events, movements, etc. And they've all uniformly bombed.\n\nThis may be obvious, but it took me a certain amount of head-butting to realize.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1543023028.309400",
        "client_msg_id": "a02e2cc6-7e2d-455b-9f02-e0fb09a0902e",
        "text": "<@UCUSW7WVD> So analogies are a broad brush?  :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1542993783.280000",
        "parent_user_id": "U85HCL7JP",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "64cQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " So analogies are a broad brush?  "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]