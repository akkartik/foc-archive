[
    {
        "user": "UFD2JRE58",
        "type": "message",
        "ts": "1548155845.049600",
        "edited": {
            "user": "UFD2JRE58",
            "ts": "1548155867.000000"
        },
        "client_msg_id": "ab70eb0c-f377-45ac-8ea5-1a02866d0025",
        "text": "<@UC6997THT> and <@UFB8STN7K> really nailed my feedback.\n\n- :heart: the introduction -  it's easy and fun read, very human, discusses people, the process of learning and etymology. I would enjoy an article just on etymology!\n- code examples were tough going: too much effort to understand the point being made. I only have stamina for one or two in an article before I glaze and skip them unless they are really easy to grok.\n- trig triggers mathematical allergies - can they be even simpler e.g. just linear movement?\n- x2 <@UC6997THT>, side-by-side compare\/contrast to clarify the argument would really help\n\n\n- I haven't left the article understanding quite how my react-ish FRP conflicts with Conal's FRP\n- Continuous time seems easy\/obvious for continuous trig functions. Imperative code would likely use time arguments too. I don't know how it applies to stateful iterative things e.g. game of life or practical animation concerns like \"how much work can I fit in this frame to achieve 60fps\"?\n\nThe argument I take away is that FRP is\ni) easier to optimise\nii) nice because its a tree of mathematical expressions\n\nFor me, these are not the path to \"saving programming\", they are are in fact curses holding it back. They sacrifice human concerns for making the compiler's life easy and mathematical purity respectively. Like <@UFB8STN7K>, RPN came to my mind - it's cool to calculator geeks but a total UX fail for normies.\n\nIMHO there is nothing more user hostile and disenfranchising than formal mathematics. If anything, language design has more to learn from recipe sites than algebra e.g. simple lists of ingredients and equipment as well as the process instructions, photos of intermediate results, videos of the whole process, prediction of time taken, comment rolls for users to share feedback and improvements. They prioritize sharing understanding whereas algebra feels like compression\/encryption.\n\nCan the argument be made in terms of human concerns not mathematical ones? e.g. can you disprove the claim \"We naturally talk and think imperatively, therefore imperative style is the easiest way for us to instruct a computer to perform a task.\"?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ca63ca2aa38f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-01-20\/529811744742_ca63ca2aa38fa658cc4f_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Woods",
            "display_name": "duncanawoods",
            "team": "T5TCAFTA9",
            "name": "duncan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h9\/t6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " really nailed my feedback.\n\n- "
                            },
                            {
                                "type": "emoji",
                                "name": "heart",
                                "unicode": "2764-fe0f"
                            },
                            {
                                "type": "text",
                                "text": " the introduction -  it's easy and fun read, very human, discusses people, the process of learning and etymology. I would enjoy an article just on etymology!\n- code examples were tough going: too much effort to understand the point being made. I only have stamina for one or two in an article before I glaze and skip them unless they are really easy to grok.\n- trig triggers mathematical allergies - can they be even simpler e.g. just linear movement?\n- x2 "
                            },
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": ", side-by-side compare\/contrast to clarify the argument would really help\n\n\n\n- I haven't left the article understanding quite how my react-ish FRP conflicts with Conal's FRP\n- Continuous time seems easy\/obvious for continuous trig functions. Imperative code would likely use time arguments too. I don't know how it applies to stateful iterative things e.g. game of life or practical animation concerns like \"how much work can I fit in this frame to achieve 60fps\"?\n\nThe argument I take away is that FRP is\ni) easier to optimise\nii) nice because its a tree of mathematical expressions\n\nFor me, these are not the path to \"saving programming\", they are are in fact curses holding it back. They sacrifice human concerns for making the compiler's life easy and mathematical purity respectively. Like "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": ", RPN came to my mind - it's cool to calculator geeks but a total UX fail for normies.\n\nIMHO there is nothing more user hostile and disenfranchising than formal mathematics. If anything, language design has more to learn from recipe sites than algebra e.g. simple lists of ingredients and equipment as well as the process instructions, photos of intermediate results, videos of the whole process, prediction of time taken, comment rolls for users to share feedback and improvements. They prioritize sharing understanding whereas algebra feels like compression\/encryption.\n\nCan the argument be made in terms of human concerns not mathematical ones? e.g. can you disprove the claim \"We naturally talk and think imperatively, therefore imperative style is the easiest way for us to instruct a computer to perform a task.\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEH6T3RJB"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1548205068.050700",
        "client_msg_id": "86b8447d-7f4e-4887-a756-7a9b8af784f9",
        "text": "DCTP sounds like a network protocol :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rvl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DCTP sounds like a network protocol "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1548213012.051200",
        "client_msg_id": "5dcf28e4-9eb3-43cd-9c63-ff581ffec31b",
        "text": "It's a start, the beginnings of an essay I'd really like to share.  To add to others' good feedback, I'll reiterate that the DCTP body text doesn't match up with the introduction.  I expected to see React-inspired frameworks fall down in a way that DCTP does not.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pz+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a start, the beginnings of an essay I'd really like to share.  To add to others' good feedback, I'll reiterate that the DCTP body text doesn't match up with the introduction.  I expected to see React-inspired frameworks fall down in a way that DCTP does not."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1548213020.051400",
        "client_msg_id": "06eada0c-b610-4d2c-b5ee-242584cb9124",
        "text": "The Denotational bullets 1,2,3 come to a theme of untangling accidental dependencies of imperative state transitions.  Consider that every operator in an imperative program is a function from the world state to the world state where it's a bit hard to say how much of the world is being examined or updated by each operator.  (Though scope and encapsulation are about imposing limits.)\n\nBesides that, you do a fine job of pointing out that Denotational is treeish whereas control flow is linear.  (Though control flow does often have a subtask tree, but the subtasks either ordered or quickly become a concurrent tangle.)\n\nContinuity is a hard sell.  The story of SVG rasterization is a good start.  (Do we yet have a decent SVG editor yet?  There are too few of us who cling to the mosaic effect of pixel art – long live Deluxe Paint.)  Animation effects are good too because you want them to start and end on time with interpolation in the middle.  The Behaviors\/Events division has always rubbed me the wrong way.  (Similar with continuous and discrete probability distributions.)\n\nMoreover, \"infinity of points\" has become outright painful.  (I absolutely forgive it since most people talk this way, but it is *wrong* all the same.)  Continuity actually gives you the exact opposite of many points.  A circle *is* a point together with a radius that's a full description.  From those parameters you can construct or sample many points related to the circle, but those are more qualities of the space, of the \"mathematical functions\" available than of the circle by itself.  We don't \"store\" infinitely many points; we imply them!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aaP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Denotational bullets 1,2,3 come to a theme of untangling accidental dependencies of imperative state transitions.  Consider that every operator in an imperative program is a function from the world state to the world state where it's a bit hard to say how much of the world is being examined or updated by each operator.  (Though scope and encapsulation are about imposing limits.)\n\nBesides that, you do a fine job of pointing out that Denotational is treeish whereas control flow is linear.  (Though control flow does often have a subtask tree, but the subtasks either ordered or quickly become a concurrent tangle.)\n\nContinuity is a hard sell.  The story of SVG rasterization is a good start.  (Do we yet have a decent SVG editor yet?  There are too few of us who cling to the mosaic effect of pixel art – long live Deluxe Paint.)  Animation effects are good too because you want them to start and end on time with interpolation in the middle.  The Behaviors\/Events division has always rubbed me the wrong way.  (Similar with continuous and discrete probability distributions.)\n\nMoreover, \"infinity of points\" has become outright painful.  (I absolutely forgive it since most people talk this way, but it is "
                            },
                            {
                                "type": "text",
                                "text": "wrong",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " all the same.)  Continuity actually gives you the exact opposite of many points.  A circle "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a point together with a radius that's a full description.  From those parameters you can construct or sample many points related to the circle, but those are more qualities of the space, of the \"mathematical functions\" available than of the circle by itself.  We don't \"store\" infinitely many points; we imply them!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA",
                    "UD43R8ZFV"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1548213065.052000",
        "client_msg_id": "9d230af7-00aa-4a99-86a4-7b78e9f88ac3",
        "text": "In a round about way, it is.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gjXY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In a round about way, it is."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1548217597.052400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1548361908.000000"
        },
        "client_msg_id": "bf0a941e-7b42-46e0-87e5-2f225afc1b35",
        "text": "There are a lot of great points here, especially from Will and William. I made a few attempts to write up my thoughts, but they never converged on anything as helpful — I just kept going off the deep end ranting about sampling (which.. again, Will and William nailed).\n\nBest advice I can give is.. pay close attention to the fact that Conal's FRP was created to tell people how to make animations. Conal's FRP basically says, \"Use sampling of continuous functions, rather than sprite sequences, or code that assumes a fixed timestep — and write code in a compositional style so that you can build bigger animations by combining smaller animations.\" The nice dovetailing of those two ideas is what makes FRP great _for coding computer-generated animations._ If you want to stretch the definition of FRP to cover other problem domains (eg: GUIs), it's not worth spending a lot of time covering the motivating examples for the original FRP (continuous time and space), because that's just a history lesson. I'd suggest distilling the references to time and space down to a single sentence, or a paragraph at most, or make that stuff a separate post about the history of FRP as an addendum to your post about FRP for GUIs. Rather, figure out what it is about FRP that works so well for GUIs you can capture the gist of it in a sentence, the equivalent of, \"Use sampling of continuous functions, rather than sprite sequences, or code that assumes a fixed timestep — and write code in a compositional style so that you can build bigger animations by combining smaller animations.\"",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tb9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a lot of great points here, especially from Will and William. I made a few attempts to write up my thoughts, but they never converged on anything as helpful — I just kept going off the deep end ranting about sampling (which.. again, Will and William nailed).\n\nBest advice I can give is.. pay close attention to the fact that Conal's FRP was created to tell people how to make animations. Conal's FRP basically says, \"Use sampling of continuous functions, rather than sprite sequences, or code that assumes a fixed timestep — and write code in a compositional style so that you can build bigger animations by combining smaller animations.\" The nice dovetailing of those two ideas is what makes FRP great "
                            },
                            {
                                "type": "text",
                                "text": "for coding computer-generated animations.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " If you want to stretch the definition of FRP to cover other problem domains (eg: GUIs), it's not worth spending a lot of time covering the motivating examples for the original FRP (continuous time and space), because that's just a history lesson. I'd suggest distilling the references to time and space down to a single sentence, or a paragraph at most, or make that stuff a separate post about the history of FRP as an addendum to your post about FRP for GUIs. Rather, figure out what it is about FRP that works so well for GUIs you can capture the gist of it in a sentence, the equivalent of, \"Use sampling of continuous functions, rather than sprite sequences, or code that assumes a fixed timestep — and write code in a compositional style so that you can build bigger animations by combining smaller animations.\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1548218368.053100",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1548219783.000000"
        },
        "client_msg_id": "979597e3-bf86-4643-b0cb-9b93cf7c52af",
        "text": "&gt; The nice dovetailing of those two ideas is what makes FRP great _for coding computer-generated animations._\n\nAs an aside, it's worth noting that sprite sequences remain an _extremely_ popular form of animation in 2D games (and elsewhere). There are games that attempt to do generative animation but preserve the look of sprite animation, or a hybrid (eg: <http:\/\/joarportfolio.com\/rainWorld.html>), but they're the exception and the results have never been fantastic. Many games even write their physics assuming a fixed pixel-size, rather than going resolution independent. There are strong motivations for taking this approach, beyond just \"old games were like that so it's nostalgic\" or \"writing continuous time\/space stuff is hard\". So what we see in games is a world where both approaches — continuous and discrete — coexist, both for time and space.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KJGX",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The nice dovetailing of those two ideas is what makes FRP great "
                            },
                            {
                                "type": "text",
                                "text": "for coding computer-generated animations.",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAs an aside, it's worth noting that sprite sequences remain an "
                            },
                            {
                                "type": "text",
                                "text": "extremely",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " popular form of animation in 2D games (and elsewhere). There are games that attempt to do generative animation but preserve the look of sprite animation, or a hybrid (eg: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/joarportfolio.com\/rainWorld.html"
                            },
                            {
                                "type": "text",
                                "text": "), but they're the exception and the results have never been fantastic. Many games even write their physics assuming a fixed pixel-size, rather than going resolution independent. There are strong motivations for taking this approach, beyond just \"old games were like that so it's nostalgic\" or \"writing continuous time\/space stuff is hard\". So what we see in games is a world where both approaches — continuous and discrete — coexist, both for time and space."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1548219308.053300",
        "client_msg_id": "fb3b3f61-e656-45ca-b26e-c6f56f5eb654",
        "text": "Game physics is a good example a behavior (stuff moving) generating events (collisions) generating behavior (stuff moving in a new direction).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548087037.044600",
        "parent_user_id": "U5TCAFTD3",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XYMY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Game physics is a good example a behavior (stuff moving) generating events (collisions) generating behavior (stuff moving in a new direction)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA",
                    "UCXR52MU2"
                ],
                "count": 2
            }
        ]
    }
]