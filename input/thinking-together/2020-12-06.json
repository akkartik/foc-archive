[
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1607245145.202100",
        "client_msg_id": "6cb78572-c196-4339-855f-83c6549b1c01",
        "text": "People do this kind of thing in haskell\/other FP languages sometimes (although I don't have an example at hand right now).\n\nThe biggest question is: how do you support other operations than construction or membership? I.e. set size, or more generally, iteration?\n\nLists like you represent them have a similar problem. If you want to iterate, at what index will you start and end?\n\nRepresenting collections as functions is something that people tried to figure out in the lambda calculus a lot. You might be interested in e.g. fold lists.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Kr√ºger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Opqd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People do this kind of thing in haskell\/other FP languages sometimes (although I don't have an example at hand right now).\n\nThe biggest question is: how do you support other operations than construction or membership? I.e. set size, or more generally, iteration?\n\nLists like you represent them have a similar problem. If you want to iterate, at what index will you start and end?\n\nRepresenting collections as functions is something that people tried to figure out in the lambda calculus a lot. You might be interested in e.g. fold lists."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1607246234.202400",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607247126.000000"
        },
        "client_msg_id": "63ef22aa-300e-4f24-a15c-22449c49ea92",
        "text": "Yeah, figuring out how to do the operations is interesting! One possibility I'm considering is identifying classes of function where the codomain has some \"zero value\", and allowing the range of those functions to be summed if the domain maps to finitely-many non-zero values. These conditions are obeyed by finite sets, and by finite lists whose codomain is a \"Maybe\" type (sets of size 0 or 1). \"Safe\" functional languages already handle list indexing using Maybes, so it doesn't seem that bizarre.\n\nIt does seem a little bit hacky though!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VVZY1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, figuring out how to do the operations is interesting! One possibility I'm considering is identifying classes of function where the codomain has some \"zero value\", and allowing the range of those functions to be summed if the domain maps to finitely-many non-zero values. These conditions are obeyed by finite sets, and by finite lists whose codomain is a \"Maybe\" type (sets of size 0 or 1). \"Safe\" functional languages already handle list indexing using Maybes, so it doesn't seem that bizarre.\n\nIt does seem a little bit hacky though!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1607248137.203000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607248154.000000"
        },
        "client_msg_id": "64bf6728-4ed9-4627-b040-9130e5916fae",
        "text": "The above operation would allow us to encode vectors as multisets and compute their norm :slightly_smiling_face: (square each element, then sum the components)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0VA3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The above operation would allow us to encode vectors as multisets and compute their norm "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " (square each element, then sum the components)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263213.204500",
        "client_msg_id": "52619bbc-6eb3-41c6-a7fa-33bda9b25b0f",
        "text": "thinking about better auto completion (a wizard style of auto completion instead of the typical list of options)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "reply_count": 16,
        "reply_users_count": 4,
        "latest_reply": "1607304897.216900",
        "reply_users": [
            "UN9SCH5RD",
            "UHWC9PXBL",
            "U016LEA3J1H",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UN9SCH5RD",
                "ts": "1607263222.204600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263257.205200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263289.205800"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263308.206000"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263322.206200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263369.206400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607263386.206600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607264297.207000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1607278795.207400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1607278887.207700"
            },
            {
                "user": "U016LEA3J1H",
                "ts": "1607284117.207900"
            },
            {
                "user": "U016LEA3J1H",
                "ts": "1607284170.208100"
            },
            {
                "user": "U016LEA3J1H",
                "ts": "1607284189.208300"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607302195.216500"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1607302430.216700"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1607304897.216900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UJQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thinking about better auto completion (a wizard style of auto completion instead of the typical list of options)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263222.204600",
        "client_msg_id": "4f75cd53-9193-43ab-b82a-e23280d7e539",
        "text": "I‚Äôm reading some docs on indexedDb:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J0Bn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I‚Äôm reading some docs on indexedDb:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263257.205200",
        "client_msg_id": "ff50fe9a-31c6-4761-8243-2c0ecd24123a",
        "text": "Here‚Äôs what visual studio code does on autocomplete of a store object:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ii7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here‚Äôs what visual studio code does on autocomplete of a store object:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263289.205800",
        "client_msg_id": "cab6541d-b755-4f00-a7ae-25bb04698164",
        "text": "Pretty crappy no? I was thinking, what if in addition to the plain of list of methods, there was some wizard style completion?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1g2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pretty crappy no? I was thinking, what if in addition to the plain of list of methods, there was some wizard style completion?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263308.206000",
        "client_msg_id": "789bba83-6e8a-4218-a449-cd9cc92503e9",
        "text": "&gt; db.[CTRL-SPACE]: ‚ÄúWhat do you want to do:‚ÄùAdd, remove, list, etc‚Ä¶\n&gt; Add: ‚ÄúOk, you can *add* with 1) one argument (just the data) or 2) two arguments (data and primary key). Since you already specified an index key in line 53 of some_file.ts, we recommend option 1‚Äù\n&gt; 1: add(‚Äúplaceholder‚Äù);",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dm=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> db.[CTRL-SPACE]: ‚ÄúWhat do you want to do:‚ÄùAdd, remove, list, etc‚Ä¶\n> Add: ‚ÄúOk, you can "
                            },
                            {
                                "type": "text",
                                "text": "add",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with 1) one argument (just the data) or 2) two arguments (data and primary key). Since you already specified an index key in line 53 of some_file.ts, we recommend option 1‚Äù\n> 1: add(‚Äúplaceholder‚Äù);"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN",
                    "UHWC9PXBL",
                    "U8A5MS6R1"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263322.206200",
        "client_msg_id": "6d91d03b-ff07-44ac-988e-f04e3899ae9e",
        "text": "etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263369.206400",
        "client_msg_id": "9697f030-ad9e-4635-b85e-aa4030df6aa3",
        "text": "So the documentation would have to be written in a way that allows for rendering such wizard-dialogs. Also would need to have some way to tap into code analysis (\"has a method addIndex been called already on this `db` object? then display this message, etc)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "voUKi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So the documentation would have to be written in a way that allows for rendering such wizard-dialogs. Also would need to have some way to tap into code analysis (\"has a method addIndex been called already on this "
                            },
                            {
                                "type": "text",
                                "text": "db",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " object? then display this message, etc)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607263386.206600",
        "client_msg_id": "be621938-6166-49f8-b6dc-bfed2735ba8c",
        "text": "this could live alongside the traditional list-of-methods completion",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "shtz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this could live alongside the traditional list-of-methods completion"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607264297.207000",
        "client_msg_id": "cd441bb1-68cf-4214-8fb3-79623c610900",
        "text": "-- an alternative would be to have a code-lens like annotation \"warning: calling add with 2 params but you added an index on line 53\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PrW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- an alternative would be to have a code-lens like annotation \"warning: calling add with 2 params but you added an index on line 53\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1607277265.207200",
        "client_msg_id": "e1a23082-e4cf-4bfe-b2f2-b3f7ced611e2",
        "text": "You‚Äôre probably familiar with Conal Elliot? A lot of his work seems to focus on this idea (representing data &amp; operations as functions \/ combinators).\n\nI don‚Äôt know of many languages that do this, though, probably for efficiency reasons. Adding an element to a set means allocating a new closure.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "flJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You‚Äôre probably familiar with Conal Elliot? A lot of his work seems to focus on this idea (representing data & operations as functions \/ combinators).\n\nI don‚Äôt know of many languages that do this, though, probably for efficiency reasons. Adding an element to a set means allocating a new closure."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1607278795.207400",
        "client_msg_id": "ad9a8e28-444e-489f-96b3-3ebfe1cbdbd7",
        "text": "<@UP3FH4CLU> and I were just talking about this in a donut call",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DNaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP3FH4CLU"
                            },
                            {
                                "type": "text",
                                "text": " and I were just talking about this in a donut call"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1607278887.207700",
        "client_msg_id": "53b6647f-25f7-46ad-aeea-809807f6025a",
        "text": "I‚Äôll splat out some thoughts when i‚Äôm done with a family event thing this evening",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Os74Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I‚Äôll splat out some thoughts when i‚Äôm done with a family event thing this evening"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1607284117.207900",
        "client_msg_id": "c58fe968-b79f-44bf-9d1f-b0ee7a887dfd",
        "text": "fwiw in my experience with smart UX folks wizards tend to be poo-poo'd because they prescribe an order in which you need to work, which is cumbersome for the uninitiated and too slow for the experts",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "euFSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fwiw in my experience with smart UX folks wizards tend to be poo-poo'd because they prescribe an order in which you need to work, which is cumbersome for the uninitiated and too slow for the experts"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1607284170.208100",
        "client_msg_id": "700b6db4-cc1c-4fde-ac24-c6d585e21fe5",
        "text": "i think your general point makes a lot of sense and that the tools that already have an index of all the possible things you could choose to input could help you input the right one faster than just giving you a string search of the input, but, i am not sure that the prescriptive survey-style wizard would actually be any better",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L7TK6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think your general point makes a lot of sense and that the tools that already have an index of all the possible things you could choose to input could help you input the right one faster than just giving you a string search of the input, but, i am not sure that the prescriptive survey-style wizard would actually be any better"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1607284189.208300",
        "edited": {
            "user": "U016LEA3J1H",
            "ts": "1607284242.000000"
        },
        "client_msg_id": "bc98f4b2-2393-4da6-a78f-904038d6a1ea",
        "text": "wizards are kind of anti-direct-manipulation IMO because they invent\/require more interactions that are unrelated to the medium being manipulated",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z0Vy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wizards are kind of anti-direct-manipulation IMO because they invent\/require more interactions that are unrelated to the medium being manipulated"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1607293615.213000",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607301456.000000"
        },
        "client_msg_id": "CA40B317-FAE1-4E3B-ABAA-38F4DE8736F0",
        "text": "Yeah, I know some of Conal Elliot‚Äôs stuff. I‚Äôm not sure if he‚Äôs addressed the above ideas; I‚Äôve only seen his stuff on recursive algebraic data types, which these are not. I‚Äôm avoiding\/disowning ADTs in my language.\n\nAnd to be clear, I‚Äôm not interested in exploring mathematical curiosities and publishing a library or a paper, I‚Äôm interested in building a practical programming language, so the constraints of existing language implementations aren‚Äôt of concern to me. A language designed around data structures being encoded as functions isn‚Äôt going to be allocating millions of closures every second. Functions are just the interface; the implementation can do anything semantically equivalent!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9+At",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I know some of Conal Elliot‚Äôs stuff. I‚Äôm not sure if he‚Äôs addressed the above ideas; I‚Äôve only seen his stuff on recursive algebraic data types, which these are not. I‚Äôm avoiding\/disowning ADTs in my language.\n\nAnd to be clear, I‚Äôm not interested in exploring mathematical curiosities and publishing a library or a paper, I‚Äôm interested in building a practical programming language, so the constraints of existing language implementations aren‚Äôt of concern to me. A language designed around data structures being encoded as functions isn‚Äôt going to be allocating millions of closures every second. Functions are just the interface; the implementation can do anything semantically equivalent!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGAK10LS",
        "type": "message",
        "ts": "1607293817.215500",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607294388.000000"
        },
        "client_msg_id": "400045F2-D61C-44AD-B74E-3660294CF738",
        "text": "So I‚Äôm optimistic I can get things to compile efficiently :slightly_smiling_face:. The challenge is understanding if there‚Äôs a nice semantics to be found here. I‚Äôm hoping someone‚Äôs tried something similar before.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6402e9775ed7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-13\/5095853045814_6402e9775ed73b75334f_72.jpg",
            "first_name": "",
            "real_name": "Nick Smith",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "nmsmith65",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YLE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I‚Äôm optimistic I can get things to compile efficiently "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". The challenge is understanding if there‚Äôs a nice semantics to be found here. I‚Äôm hoping someone‚Äôs tried something similar before."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607302195.216500",
        "client_msg_id": "a1b47948-4392-434e-af54-1ac9532c5993",
        "text": "Yeah wizards have a bad reputation, perhaps the good old auto complete mechanic could be retained, but with better options and info",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mgr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah wizards have a bad reputation, perhaps the good old auto complete mechanic could be retained, but with better options and info"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1607302430.216700",
        "client_msg_id": "5b4f8e5e-a67c-4500-9cbd-27fe486533d9",
        "text": "Relevant to this discussion might be Smalltalk's find-by-example and Haskell's Hoogle (search by type).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K1du2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relevant to this discussion might be Smalltalk's find-by-example and Haskell's Hoogle (search by type)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "UA14TGLTC",
                    "UPVBV34EL",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1607304897.216900",
        "client_msg_id": "1c177e89-2eb3-417d-9283-cce7c4fc1749",
        "text": "good point, I think 90% of the time the examples are the most useful part of the docs",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vmMv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "good point, I think 90% of the time the examples are the most useful part of the docs"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1607320659.217200",
        "client_msg_id": "3df8dd3f-dab1-4040-82e4-1b2a9a58bf35",
        "text": "`set-size(my_set)`, where `set-size` is implemented by dynamic dispatch on its argument.\n\nThis also reminds me of the idea of records as (dependently typed) functions from a key type to whatever thing the struct was constructed with (or updated with? Hmm).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=yJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "set-size(my_set)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", where "
                            },
                            {
                                "type": "text",
                                "text": "set-size",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is implemented by dynamic dispatch on its argument.\n\nThis also reminds me of the idea of records as (dependently typed) functions from a key type to whatever thing the struct was constructed with (or updated with? Hmm)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1607326678.217400",
        "client_msg_id": "40328b6f-ed3f-4fa0-85f1-ef9ef18ee25d",
        "text": "I'm reminded of Barry Jay's Pattern Calculus.  If on the one hand a hash table is a bunch of key, value pairs and, on the other, a standard lambda takes anything and uses it to come up with something else, you can imagine a pattern as living somewhere between: takes some things and uses them to come up with a value.  Given two patterns you can glue them together.  The standard way is that if the first one matches you take it, otherwise check the second one.\n\nNot sure what he's been up to in the last while <https:\/\/scholar.google.com\/citations?hl=en&amp;user=eWreFm4AAAAJ&amp;view_op=list_works&amp;sortby=pubdate>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm reminded of Barry Jay's Pattern Calculus.  If on the one hand a hash table is a bunch of key, value pairs and, on the other, a standard lambda takes anything and uses it to come up with something else, you can imagine a pattern as living somewhere between: takes some things and uses them to come up with a value.  Given two patterns you can glue them together.  The standard way is that if the first one matches you take it, otherwise check the second one.\n\nNot sure what he's been up to in the last while "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/scholar.google.com\/citations?hl=en&user=eWreFm4AAAAJ&view_op=list_works&sortby=pubdate"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]