[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1659947175.612289",
        "client_msg_id": "189af4e2-191d-46a3-8292-766ae16571df",
        "text": "One important feature of a live system that I haven't seen done with \"just\" fast toolchains is that in-memory data objects survive code changes. Example: in Smalltalk, I can add a slot (aka instance variable) to a class without disturbing existing instances. They just acquire a new slot initialized to `nil`.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hqhl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One important feature of a live system that I haven't seen done with \"just\" fast toolchains is that in-memory data objects survive code changes. Example: in Smalltalk, I can add a slot (aka instance variable) to a class without disturbing existing instances. They just acquire a new slot initialized to "
                            },
                            {
                                "type": "text",
                                "text": "nil",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1659957829.878479",
        "client_msg_id": "0faadb17-ecaa-4d48-bb71-346c64b28ca1",
        "text": "<@U02028JHX37> I mean what I said: they can all be the same thing, using same interface, allowing the programmer a flow state as they go. I know this because I have been working this way for decades.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUGmS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " I mean what I said: they can all be the same thing, using same interface, allowing the programmer a flow state as they go. I know this because I have been working this way for decades."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02028JHX37",
        "type": "message",
        "ts": "1659963009.832109",
        "client_msg_id": "df38bbcd-75a5-4f19-ac6b-1791c82227fe",
        "text": "<@U013ZLJARC7> That something can be, doesn’t mean it should be :slightly_smiling_face:\n\nHowever, maybe we’re just using different words for the same idea. I can’t agree with the idea of making editing\/compiling\/running\/testing\/debugging a single _thing_ (= a single artefact), since that might not suit many people. It also tends to produce a monolith. What one should do is to design a common coherent mediating protocol around edit\/compile\/run\/test\/debug, which enables the flow, but which doesn’t limit the tooling decisions. Maybe this is what you had in mind.\n\nPS: In the monolith approach, if you want to change some tool, you can never do it drop-in style (you always have to integrate it by programming it yourself or by resolving a merge conflict). I don’t know how the Smalltalk community goes about this issue; if you were dealing with this, tell me your approach.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gdf13e3ce9df",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/df13e3ce9dfc39e2f387bd3d6e87b952.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0016-72.png",
            "first_name": "",
            "real_name": "Jan Ruzicka",
            "display_name": "Jan Ruzicka",
            "team": "T5TCAFTA9",
            "name": "jan.ruzicka01",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pugZz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " That something can be, doesn’t mean it should be "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHowever, maybe we’re just using different words for the same idea. I can’t agree with the idea of making editing\/compiling\/running\/testing\/debugging a single "
                            },
                            {
                                "type": "text",
                                "text": "thing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (= a single artefact), since that might not suit many people. It also tends to produce a monolith. What one should do is to design a common coherent mediating protocol around edit\/compile\/run\/test\/debug, which enables the flow, but which doesn’t limit the tooling decisions. Maybe this is what you had in mind.\n\nPS: In the monolith approach, if you want to change some tool, you can never do it drop-in style (you always have to integrate it by programming it yourself or by resolving a merge conflict). I don’t know how the Smalltalk community goes about this issue; if you were dealing with this, tell me your approach."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1659996549.287439",
        "client_msg_id": "3eeba3a2-14bb-4448-9ca9-b9f01a482bb9",
        "text": "<@U02028JHX37> and <@U013ZLJARC7> sounds like you're coming at the practice of programming from very different perspectives.  Jack's point, as I understand it, is that for him the activities \"editing\/compiling\/running\/testing\/debugging\" aren't really different things.  Then Jan's point, as I understand it, is a concern that if all the activities are one activity, then how do you deal with the resulting, single monolithic tool?  A fair question with a potentially interesting answer.  So let me phrase it this way...\n\nJack, having worked  \"this way for decades,\" where are the natural module lines with what you use?  What can be upgraded independently?  What's pluggable?  For parts of your process are there alternative\/multiple tool choices, and do you ever pick both?\n\nAn example: for Git, I sometimes use the command line but generally use Sourcetree.  Occasionally unstable, it went very, very wrong yesterday: constant crashing.  So I downloaded and finished with Sublime Merge in the middle of staging changes, with little interruption.  I didn't configure Sublime Merge.  I didn't read any documentation.  I commented to myself \"my, my, my, this looks hideous\" (read \"unfamiliar\"), and I was in no mood to learn anything about what might be better\/worse\/smoother about Sublime Merge.  One tool broke, I picked up another, kept working.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sf8q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " sounds like you're coming at the practice of programming from very different perspectives.  Jack's point, as I understand it, is that for him the activities \"editing\/compiling\/running\/testing\/debugging\" aren't really different things.  Then Jan's point, as I understand it, is a concern that if all the activities are one activity, then how do you deal with the resulting, single monolithic tool?  A fair question with a potentially interesting answer.  So let me phrase it this way...\n\nJack, having worked  \"this way for decades,\" where are the natural module lines with what you use?  What can be upgraded independently?  What's pluggable?  For parts of your process are there alternative\/multiple tool choices, and do you ever pick both?\n\nAn example: for Git, I sometimes use the command line but generally use Sourcetree.  Occasionally unstable, it went very, very wrong yesterday: constant crashing.  So I downloaded and finished with Sublime Merge in the middle of staging changes, with little interruption.  I didn't configure Sublime Merge.  I didn't read any documentation.  I commented to myself \"my, my, my, this looks hideous\" (read \"unfamiliar\"), and I was in no mood to learn anything about what might be better\/worse\/smoother about Sublime Merge.  One tool broke, I picked up another, kept working."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U02028JHX37"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02U0AS3J49",
        "type": "message",
        "ts": "1660020454.824929",
        "client_msg_id": "fae2e69a-6e6d-41d1-915f-c5e46875a9e7",
        "text": "What would live programming be in a declarative logic language? Would you watch search trees form and get resolved? Has anyone done that? I'd like to see it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5247a9c6cbb",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5247a9c6cbb943683c9e2e2cef6eba79.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0022-72.png",
            "first_name": "Jason",
            "real_name": "Jason Morris",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jason",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zyWm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What would live programming be in a declarative logic language? Would you watch search trees form and get resolved? Has anyone done that? I'd like to see it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U03LT7540HZ",
        "type": "message",
        "ts": "1660021105.121859",
        "edited": {
            "user": "U03LT7540HZ",
            "ts": "1660021136.000000"
        },
        "client_msg_id": "1bd39f2d-6deb-47e5-a274-a0a2c13a30a7",
        "text": "A guy I know started a REPL for CUE (<http:\/\/cuelang.org|cuelang.org> | <http:\/\/cuetorials.com|cuetorials.com>) a declarative, logical language. New kid on the block\n\nIt might be in here: <https:\/\/github.com\/philipdexter\/pycue>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "754abc97c5ce",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-22\/3731055996048_754abc97c5ce87f6c99f_72.jpg",
            "first_name": "Tony",
            "real_name": "Tony Worm",
            "display_name": "Tony Worm",
            "team": "T5TCAFTA9",
            "name": "tony066",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DNXU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A guy I know started a REPL for CUE ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cuelang.org",
                                "text": "cuelang.org"
                            },
                            {
                                "type": "text",
                                "text": " | "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cuetorials.com",
                                "text": "cuetorials.com"
                            },
                            {
                                "type": "text",
                                "text": ") a declarative, logical language. New kid on the block\n\nIt might be in here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/philipdexter\/pycue"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03LT7540HZ",
        "type": "message",
        "ts": "1660021188.587329",
        "client_msg_id": "848e9bf5-d0c2-4e29-8331-375c6260cabd",
        "text": "<@U02U0AS3J49> that's an interesting idea, to visualize the evaluator :thinking_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "754abc97c5ce",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-06-22\/3731055996048_754abc97c5ce87f6c99f_72.jpg",
            "first_name": "Tony",
            "real_name": "Tony Worm",
            "display_name": "Tony Worm",
            "team": "T5TCAFTA9",
            "name": "tony066",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1659731101.023949",
        "parent_user_id": "UAJKEBGP8",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fym",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02U0AS3J49"
                            },
                            {
                                "type": "text",
                                "text": " that's an interesting idea, to visualize the evaluator "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]