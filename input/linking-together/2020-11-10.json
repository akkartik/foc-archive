[
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1605011905.212900",
        "client_msg_id": "5fec219d-7d5d-46a6-8dfd-3138c25cf9d3",
        "text": "Adding interactive visual syntax to textual code: <https:\/\/youtu.be\/8htgAxJuK5c>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605011905.212900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1605137973.221200",
        "reply_users": [
            "U01EKU0UM24",
            "U017GNJM021"
        ],
        "replies": [
            {
                "user": "U01EKU0UM24",
                "ts": "1605031099.220000"
            },
            {
                "user": "U017GNJM021",
                "ts": "1605137973.221200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Adding Interactive Visual Syntax to Textual Code",
                "title_link": "https:\/\/youtu.be\/8htgAxJuK5c",
                "author_name": "Leif Andersen",
                "author_link": "https:\/\/www.youtube.com\/user\/AndersenLeif",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/8htgAxJuK5c\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Adding Interactive Visual Syntax to Textual Code",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/8htgAxJuK5c?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/youtu.be\/8htgAxJuK5c",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/youtu.be\/8htgAxJuK5c"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fb+H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Adding interactive visual syntax to textual code: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/youtu.be\/8htgAxJuK5c"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7",
                    "U01EHAE9D0W",
                    "UHWC9PXBL",
                    "UFQQ3P867"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UAHHWT22U",
                    "UD6EXQVM0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1605012497.213100",
        "client_msg_id": "e188cf79-1668-41d6-a176-09650a4d0b6a",
        "text": "The author seems to consider a rather specific sub-species of Turing-incomplete languages: those that try to be as close as possible to Turing-complete except for preventing non-termination. I haven't looked at any of those. What I am much more interested in is languages that reduce computational abilities in return for better reasoning about data and code. Something in between HTML and JavaScript, for example. Has anyone seen work on such languages?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "85yg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The author seems to consider a rather specific sub-species of Turing-incomplete languages: those that try to be as close as possible to Turing-complete except for preventing non-termination. I haven't looked at any of those. What I am much more interested in is languages that reduce computational abilities in return for better reasoning about data and code. Something in between HTML and JavaScript, for example. Has anyone seen work on such languages?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01DKR962S2",
                    "UA14TGLTC",
                    "UBKNXPBAB"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1605017947.213300",
        "client_msg_id": "642f84ee-900d-4230-98b4-89d26e538843",
        "text": "<@UJBAJNFLK> Dhall leverages non-TC for safety guarantees: <http:\/\/www.haskellforall.com\/2020\/01\/why-dhall-advertises-absence-of-turing.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "attachments": [
            {
                "title": "Why Dhall advertises the absence of Turing-completeness",
                "title_link": "http:\/\/www.haskellforall.com\/2020\/01\/why-dhall-advertises-absence-of-turing.html",
                "text": "total2 Several people have asked why I make a big deal out of the Dhall configuration language being “total” (i.e. n...",
                "fallback": "Why Dhall advertises the absence of Turing-completeness",
                "from_url": "http:\/\/www.haskellforall.com\/2020\/01\/why-dhall-advertises-absence-of-turing.html",
                "service_icon": "http:\/\/www.haskellforall.com\/favicon.ico",
                "service_name": "haskellforall.com",
                "id": 1,
                "original_url": "http:\/\/www.haskellforall.com\/2020\/01\/why-dhall-advertises-absence-of-turing.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tLI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Dhall leverages non-TC for safety guarantees: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.haskellforall.com\/2020\/01\/why-dhall-advertises-absence-of-turing.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DKR962S2",
        "type": "message",
        "ts": "1605023751.214600",
        "client_msg_id": "683F9DE1-6FA5-4A4F-BDDD-16F7574B80E2",
        "text": "Dhall is a cool use case for strong normalizing since most people feel uncomfortable with powerful languages for configuration",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5fae55cf900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fae55cf900c6577e6c3841a344015bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "",
            "real_name": "John Soo",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jsoo1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NIyDM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dhall is a cool use case for strong normalizing since most people feel uncomfortable with powerful languages for configuration"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1605024190.214800",
        "client_msg_id": "58772025-d8f8-48b6-a222-9ff1fc0aff44",
        "text": "<@UDKTZSD6H> Dhall looks interesting indeed, thanks for the pointer!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8rE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": " Dhall looks interesting indeed, thanks for the pointer!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DKR962S2",
        "type": "message",
        "ts": "1605025996.217100",
        "client_msg_id": "8DE2E812-4D5F-4E67-884F-A7CBCC4B8232",
        "text": "<@UJBAJNFLK> I worked with elm for a while. While it has general recursion, the elm architecture really limits what you can do with it. The only functions you can write that ever get executed by the runtime have pure signatures. Now I really hate elm",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5fae55cf900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fae55cf900c6577e6c3841a344015bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "",
            "real_name": "John Soo",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jsoo1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z3BEj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I worked with elm for a while. While it has general recursion, the elm architecture really limits what you can do with it. The only functions you can write that ever get executed by the runtime have pure signatures. Now I really hate elm"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DKR962S2",
        "type": "message",
        "ts": "1605026037.218000",
        "client_msg_id": "13F2FAF2-F68B-472C-9D61-30B25F471DFC",
        "text": "Maybe something closer to a prolog would be interesting though",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5fae55cf900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5fae55cf900c6577e6c3841a344015bd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0012-72.png",
            "first_name": "",
            "real_name": "John Soo",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jsoo1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "juS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe something closer to a prolog would be interesting though"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1605030260.219800",
        "client_msg_id": "4B71510F-A3D7-4DA7-9F4C-A0FED4754D84",
        "text": "Oh yeah, that makes me think that Datalog also has terminating guarantees because of lack of negation(?). So does SQL if one takes out recursion. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yz80S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh yeah, that makes me think that Datalog also has terminating guarantees because of lack of negation(?). So does SQL if one takes out recursion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01EKU0UM24",
        "type": "message",
        "ts": "1605031099.220000",
        "client_msg_id": "56e0cb31-fcd8-4c10-b999-2ef51a91952b",
        "text": "That's cool... Though in this example, it's not really needed to insert the visuals in the code, as the unit tests could have been written as data files, editable in an external editor outside of the development environment. The glue code bringing the test files together is probably always the same: start from this position, play this move, check that the result is correct. But for more complex examples, having IDE support might be a killer feature!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "88975cfbf194",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-02\/1478272687812_88975cfbf19475e5c6f0_72.png",
            "first_name": "",
            "real_name": "Eldritch Conundrum",
            "display_name": "Eldritch Conundrum",
            "team": "T5TCAFTA9",
            "name": "eldritchconundrum",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605011905.212900",
        "parent_user_id": "UDKTZSD6H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fFRu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's cool... Though in this example, it's not really needed to insert the visuals in the code, as the unit tests could have been written as data files, editable in an external editor outside of the development environment. The glue code bringing the test files together is probably always the same: start from this position, play this move, check that the result is correct. But for more complex examples, having IDE support might be a killer feature!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1605075904.220300",
        "client_msg_id": "8d3ea6fa-eefb-4593-8b6c-73c0584f0e06",
        "text": "Just wondering: why is everyone focusing so much on termination? In my personal debugging experience, endless loops are a rare issue and usually found and fixed quickly. As long as the OS allows interrupting a process... what's the problem?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sfus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just wondering: why is everyone focusing so much on termination? In my personal debugging experience, endless loops are a rare issue and usually found and fixed quickly. As long as the OS allows interrupting a process... what's the problem?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1605076079.220500",
        "client_msg_id": "80e3a038-c0c4-4783-9605-2df43ea96e71",
        "text": "What I hope to find in the space of Turing-incomplete languages is some form of robustness: ensure that small changes in the input (code + data) of a computation can only lead to small changes in the output. Robustness matters a lot in other forms of engineering - software should have access to it as well.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604952430.207700",
        "parent_user_id": "UPVBV34EL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9faU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What I hope to find in the space of Turing-incomplete languages is some form of robustness: ensure that small changes in the input (code + data) of a computation can only lead to small changes in the output. Robustness matters a lot in other forms of engineering - software should have access to it as well."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]