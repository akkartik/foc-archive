[
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1609244173.423500",
        "client_msg_id": "e055df6b-26af-46e3-8bff-341f8f4d54d9",
        "text": "I really like this paper which has a clear and simple reference counting system for a functional language, which ends up being surprisingly performant.\n\n<https:\/\/microsoft.com\/en-us\/research\/uploads\/prod\/2020\/11\/perceus-tr-v1.pdf|https:\/\/microsoft.com\/en-us\/research\/uploads\/prod\/2020\/11\/perceus-tr-v1.pdf>\n\nThe key point is that it is fairly easy for the programmer to anticipate when memory will be freed and then immediately refused, allowing for code that effectively mutates memory in place.\n\nFor example if you say;\n```X = f(10)\nY = f(X)\n```\nThen you know (assuming it fits) that Y will take the place of X in memory.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609244173.423500",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1609891998.448400",
        "reply_users": [
            "UCUSW7WVD",
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1609260569.423600"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1609890045.448200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1609891998.448400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NQmUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like this paper which has a clear and simple reference counting system for a functional language, which ends up being surprisingly performant.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/microsoft.com\/en-us\/research\/uploads\/prod\/2020\/11\/perceus-tr-v1.pdf",
                                "text": "https:\/\/microsoft.com\/en-us\/research\/uploads\/prod\/2020\/11\/perceus-tr-v1.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe key point is that it is fairly easy for the programmer to anticipate when memory will be freed and then immediately refused, allowing for code that effectively mutates memory in place.\n\nFor example if you say;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "X = f(10)\nY = f(X)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen you know (assuming it fits) that Y will take the place of X in memory."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "U01661S9F34",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1609260569.423600",
        "client_msg_id": "de73ee7a-03b9-4280-a1de-21c02aaeab06",
        "text": "Since they can make this guarantee, they can largely use immutable references without giving up performance. And it's clear to the programmer where any cycles could be: in the mutable references. Very cool paper!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1609244173.423500",
        "parent_user_id": "UDQBTJ211",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FXXM0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since they can make this guarantee, they can largely use immutable references without giving up performance. And it's clear to the programmer where any cycles could be: in the mutable references. Very cool paper!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1609286677.425300",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1609286702.000000"
        },
        "client_msg_id": "1c326756-b3fc-4f98-8200-a5bcb235aab4",
        "text": "I thought this article on pattern languages with (some) relevance to software, was worth sharing here:<https:\/\/patterns.architexturez.net\/doc\/az-cf-172831>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "service_name": "Architecture's New Scientific Foundations",
                "title": "Living Structure Comes from (Living) Patterns, Parts 1 and 2 | Architecture's New Scientific Foundations",
                "title_link": "https:\/\/patterns.architexturez.net\/doc\/az-cf-172831",
                "text": "What is a living pattern? Patterns describe essential relationships among the elements of systems, and provide a unique and useful tool for handling and organizing complexity. This truth, embodied for centuries in the practice of creating human habitation, has in recent years been dissected and catalogued by science. Computer researchers have adopted the pattern method both to understand and to manipulate complexity. Advances in our knowledge of how patterns reflect the ordered complexity of nature has led to breakthroughs in computer technology that continue to fuel economic growth and development not just in industry but in every realm of our society (Leitner, 2015; Mehaffy &amp; Salingaros, 2015). Patterns of behavior, and of practice in any field of human endeavor, evolve over time with constant repetition, each repetition embedded in and learning from its predecessors. Any pattern arising from such evolutionary selection over generations is irreducible; that is, it cannot be understood in terms of simpler components. It is not a multiplication of a prior component but an accretion to its complexity. It grows ever more subtle, ever more useful, and comes closer and closer to reflecting how nature works: It is a living pattern. Such a pattern can be combined with others into a system that reflects an ever-higher level of useful relationships (Salingaros, 2005: Chapter 8). We rely on techniques akin to genetic programming to discover evolved solutions as general methods for manipulating complexity without destroying its order. By examining an enormous number of possible small variations, a pattern is selected as the optimal configuration, the one that provides the most useful feedback. Direct simulated evolution is computationally very intensive, so the results, once obtained, are worth documenting in a pattern format. Twelve living patterns help define human spaces The key question in architecture is how to design a space that feels reassuring on at least an unconscious level. Incredibly, we have been producing hostile, anxiety-inducing spaces or dreary, depressing spaces for decades, at least as judged by their users. A dozen living patterns selected from Christopher Alexander’s A Pattern Language (Alexander et al., 1977) can help architects get beyond this deplorable practice. The following pattern summaries are my own, and they focus on spatial aspects. The reader is urged to consult the original, lengthier version of each numbered pattern, which includes research material giving detailed arguments and\/or scientific validation for the patterns. Pattern 61: Small Public Squares. Build public squares with a width of approximately 60 feet. Their length can vary. The walls enclosing the space, whether partially or wholly surrounding it, should make us feel as if we are in a large open public room. Pattern 106: Positive Outdoor Space. The built structures partially surrounding an outdoor space, be it rectangular or circular, must define, in its wall elements, a concave perimeter boundary, making the space itself convex overall. Pattern 115: Courtyards Which Live. The best courtyards have many entry points, a view to the streets beyond, and enclosing walls that are fenestrated, not blank. These are used most often. Pattern 124: Activity Pockets. The success of urban space depends on what can occur along its boundaries. A space will be lively only if there are pockets of activity all around its inner edges. Pattern 167: Six-Foot Balcony. The minimum depth of social space for a balcony is six feet, preferably with its space partly enclosed, either canopied, protected from nearby observers by side screens, or partly recessed into the facade. Recessed balconies provide an excellent sense of enclosure. But if balconies are narrower than six feet, are totally exposed or entirely cantilevered (sticking out), they are rarely used. Pattern 179: Alcoves. To heighten the sense of intimacy indoors, build a useful smaller space within a larger space, partially enclosed with concave boundaries and a lower ceiling. Its width and depth could both be approximately six feet. Pattern 180: Window Place. A concave boundary can incorporate windows. Examples range from (small) a window seat where the wall is deepened to create a space around the window, to (medium) a bay window where windows wrap around an extruded portion of the space, to (large) a glazed alcove where windows partially wrap around a room. Pattern 183: Workspace Enclosure. The best place for working has no more than 50 to 75 percent of its perimeter enclosed by walls or windows. A workspace needs at least 60 square feet of floor area for each person. Pattern 188: Bed Alcove. Give the bed its own partial enclosure. The space should feel comfortable, not too small, with a lower ceiling than the main part of the bedroom. Pattern 190: Ceiling Height Variety. Give a building’s rooms different ceiling heights to enhance comfort at every scale of activity. High ceilings contribute to formality, low ceilings to informality, with the lowest height for the greater intimacy of alcoves. Pattern 191: The Shape of Indoor Space. Indoor space should be roughly rectangular in plan with straight, vertical walls for practicality, but with concave wall portions where possible, and a roughly symmetrical vaulted ceiling. One-sided, sloped ceilings and sharp, slanted, or re-entrant angles in walls generate discomfort. Pattern 203: Child Caves. Create small “cave-like” spaces in a house, or outside, for children to experience and play in. Reading these living patterns should evoke a sense of human space that envelops and nourishes us; it goes far beyond strict mechanical utility. We need a new methodology for adaptive design, to re-awaken our lost spatial sensitivity and focus once again on creating “reassuring” spaces. These are vital for health and comfort in the built environment. If an architect expresses repulsion at the supposed “sentimentality” of these patterns, that is merely evidence of ideological conditioning to reject healing spaces. Recurring themes run throughout the above spatial pattern summaries, such as partial enclosure balanced between too little and too much, and the need for concave boundaries to create convex space — Alexander called it “positive” space. Like biophilic design patterns, spatial design patterns enjoy scientific support. First, the inherited memory from our ancestral evolutionary environment certainly includes clearings, tree canopies, and caves as prototypes (Salingaros, 2015). Those settings provided a reassuring sense of enclosure at the right dimension. Second, neurological responses that were developed for our general survival long ago act now to interpret a space’s geometry as either friendly or hostile. Experienced space and the principle of concavity Spaces that embrace us gently are spaces we find inviting. Such spaces formed from concave boundaries embody the “principle of concavity”, which determines at all scales how we experience space. It tells us that we prefer surfaces that enclose us in a more or less organic manner. Urban space must be partly surrounded by an enveloping perimeter if it is to be used with pleasure and reassurance. It cannot just be leftover space between stand-alone “look-at-me” buildings. Humans tend to feel exposed and threatened in those leftover spaces because they are not defined coherently (Salingaros, 2005: Chapter 2). They fail to fit into the expectations formed by our instinctive judgment of space, which is built up over time — over generations — by our experience and that passed down to us by generations of users of the built environment. So people avoid fractured and incoherent open spaces in obedience to perfectly rational psychological imperatives. Moreover, urban space is not two-dimensional. It is not enough to define it by means of a ground plan. Additional geometrical elements are needed to complete the sense of a three-dimensional envelop…",
                "fallback": "Architecture's New Scientific Foundations: Living Structure Comes from (Living) Patterns, Parts 1 and 2 | Architecture's New Scientific Foundations",
                "ts": 1445490217,
                "from_url": "https:\/\/patterns.architexturez.net\/doc\/az-cf-172831",
                "service_icon": "https:\/\/patterns.architexturez.net\/sites\/all\/themes\/az_cf_core\/apple-touch-icon-precomposed-114x114.png",
                "id": 1,
                "original_url": "https:\/\/patterns.architexturez.net\/doc\/az-cf-172831"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "okG8z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought this article on pattern languages with (some) relevance to software, was worth sharing here:"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/patterns.architexturez.net\/doc\/az-cf-172831"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]