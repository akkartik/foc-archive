[
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710502873.989569",
        "client_msg_id": "2d200491-f10b-4fe4-83f4-3cc72464b027",
        "text": "<@U03HC3XHZGW> Let me know if this is what you're looking for, but I believe the term is transclusion. This is having code in one place, and then referencing it in another. In that other reference, which is called a transclusion, it's possible to edit the original code. It's a bit like a portal to another location. And this transclusion can be viewed in different ways, for example just as a function name, or as a short preview, or even the entire piece of code. These are different levels of abstractions.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sbi79",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03HC3XHZGW"
                            },
                            {
                                "type": "text",
                                "text": " Let me know if this is what you're looking for, but I believe the term is transclusion. This is having code in one place, and then referencing it in another. In that other reference, which is called a transclusion, it's possible to edit the original code. It's a bit like a portal to another location. And this transclusion can be viewed in different ways, for example just as a function name, or as a short preview, or even the entire piece of code. These are different levels of abstractions."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710503282.789629",
        "client_msg_id": "e407f8d0-0800-446f-947e-574157d56496",
        "text": "<@UC2A2ARPT> I'm thinking something similar, I'd like to see a 4D programming environment where the activation of the program and its state is visualised in real time. And it directly maps to the 1.5D textual representation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qLEcK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I'm thinking something similar, I'd like to see a 4D programming environment where the activation of the program and its state is visualised in real time. And it directly maps to the 1.5D textual representation."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sparkle",
                "users": [
                    "U06H4766K42"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U05EREC3DCK",
        "thread_ts": "1707635992.054799",
        "root": {
            "user": "U03GBV8B58V",
            "type": "message",
            "ts": "1707635992.054799",
            "client_msg_id": "12ab9f7c-e9da-4446-8396-92aae182dd95",
            "text": "New visual programming languages don't fail as visual programming languages.\n\nThey fail as programming languages, which is what most new programming languages do.",
            "team": "T5TCAFTA9",
            "thread_ts": "1707635992.054799",
            "reply_count": 19,
            "reply_users_count": 7,
            "latest_reply": "1710632578.134659",
            "reply_users": [
                "UC2A2ARPT",
                "U03GBV8B58V",
                "U06H4766K42",
                "U02U0AS3J49",
                "U0378MDUG1Y",
                "U05EREC3DCK",
                "UE6EFEPTQ"
            ],
            "replies": [
                {
                    "user": "UC2A2ARPT",
                    "ts": "1707669968.876969"
                },
                {
                    "user": "U03GBV8B58V",
                    "ts": "1707676144.279789"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1707677498.321709"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1707677531.152649"
                },
                {
                    "user": "U06H4766K42",
                    "ts": "1707689733.252029"
                },
                {
                    "user": "U02U0AS3J49",
                    "ts": "1707696491.652039"
                },
                {
                    "user": "U06H4766K42",
                    "ts": "1707697086.715759"
                },
                {
                    "user": "U0378MDUG1Y",
                    "ts": "1707715641.842279"
                },
                {
                    "user": "U0378MDUG1Y",
                    "ts": "1707715671.010269"
                },
                {
                    "user": "UC2A2ARPT",
                    "ts": "1707716526.684649"
                },
                {
                    "user": "U0378MDUG1Y",
                    "ts": "1707848892.143399"
                },
                {
                    "user": "U05EREC3DCK",
                    "ts": "1710503282.789629"
                },
                {
                    "user": "U05EREC3DCK",
                    "ts": "1710503961.422659"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1710508795.840509"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1710509209.587249"
                },
                {
                    "user": "U05EREC3DCK",
                    "ts": "1710537104.761959"
                },
                {
                    "user": "U05EREC3DCK",
                    "ts": "1710537289.075369"
                },
                {
                    "user": "U05EREC3DCK",
                    "ts": "1710537664.767549"
                },
                {
                    "user": "UE6EFEPTQ",
                    "ts": "1710632578.134659"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "kLeJ4",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "New visual programming languages don't fail as visual programming languages.\n\nThey fail as programming languages, which is what most new programming languages do."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1710503961.422659",
        "client_msg_id": "f6e2b18f-251a-4de6-b065-a2828a820036",
        "text": "The best way I would describe it is like this. Let's say that reality is like a state computation machine. How would it be possible to create a more accurate model of reality than we have currently? It would have to go beyond words, and would have to include visual, kinaesthetic constructs. It would have to be a higher dimensional representation, to the extent that we as humans can perceive a higher dimensional representation. So this means, higher than the 1D text we have, or its 2D UI, single frame in time representation. This would look like some kind of 4D temporal model, where it's possible to see the execution of a program in its entirety, all at once.\n\nIt would not only show semantic relationships in a graph sense, but also model the data structures and their operation over time. So the idea of \"stocks\" of data, and \"flows\" of data (from Donella Meadows, Systems Thinking) would apply here. React.useState might be represented as a small orb of energy, and if we setState, then it would visually change. When we assign const a = b, then it would visually indicate a flow of information from b -&gt; a. I think this would be a much clearer representation of what a program is doing, and free up cognitive load to focus on more important tasks, as opposed to the programmer having to hold a mental model in their head. No matter how good a programmer is, if he or she possesses a better more accurate kinesthetic model of what is happening, their brain power is freed up to solve more problematic and relevant abstractions.\n\nI've been mocking up a prototype of how this would work, and the basic idea is overlaying a tool like VSCode with \"vibes\" as well as flow relations. It's like an annotation layer over existing code, but this is just the basic start of how it would look like. Ultimately, it would look like a mini universe.\n\n<http:\/\/www.eusaybia.com|www.eusaybia.com> for a non-programming context demonstration of what I'm talking about.",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EJah7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The best way I would describe it is like this. Let's say that reality is like a state computation machine. How would it be possible to create a more accurate model of reality than we have currently? It would have to go beyond words, and would have to include visual, kinaesthetic constructs. It would have to be a higher dimensional representation, to the extent that we as humans can perceive a higher dimensional representation. So this means, higher than the 1D text we have, or its 2D UI, single frame in time representation. This would look like some kind of 4D temporal model, where it's possible to see the execution of a program in its entirety, all at once.\n\nIt would not only show semantic relationships in a graph sense, but also model the data structures and their operation over time. So the idea of \"stocks\" of data, and \"flows\" of data (from Donella Meadows, Systems Thinking) would apply here. React.useState might be represented as a small orb of energy, and if we setState, then it would visually change. When we assign const a = b, then it would visually indicate a flow of information from b -> a. I think this would be a much clearer representation of what a program is doing, and free up cognitive load to focus on more important tasks, as opposed to the programmer having to hold a mental model in their head. No matter how good a programmer is, if he or she possesses a better more accurate kinesthetic model of what is happening, their brain power is freed up to solve more problematic and relevant abstractions.\n\nI've been mocking up a prototype of how this would work, and the basic idea is overlaying a tool like VSCode with \"vibes\" as well as flow relations. It's like an annotation layer over existing code, but this is just the basic start of how it would look like. Ultimately, it would look like a mini universe.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.eusaybia.com",
                                "text": "www.eusaybia.com"
                            },
                            {
                                "type": "text",
                                "text": " for a non-programming context demonstration of what I'm talking about."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U06H4766K42"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710504901.802799",
        "client_msg_id": "b0619ab2-3e33-4183-949f-c097c30bba50",
        "text": "Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:\n\n\/\/ TODO: Refactor this to use the revised approach\n\nIt instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.\n\nAnd added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710504901.802799",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1710885361.135999",
        "reply_users": [
            "U8A5MS6R1",
            "U05EREC3DCK",
            "U06M6J30PE3"
        ],
        "replies": [
            {
                "user": "U8A5MS6R1",
                "ts": "1710549309.108009"
            },
            {
                "user": "U05EREC3DCK",
                "ts": "1710654653.469789"
            },
            {
                "user": "U06M6J30PE3",
                "ts": "1710885361.135999"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5mNXw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:\n\n\/\/ TODO: Refactor this to use the revised approach\n\nIt instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.\n\nAnd added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "U06EU9S1Y68"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710505040.164099",
        "client_msg_id": "4d7905c4-1148-4ec1-951a-c7e3a9782fe8",
        "text": "Basically, this approach is powerful because instead of 1D strings of text, now you can have the power of rich text in your code. Including diagrams, and even embedding other programs through &lt;iframes&gt; would be possible. And when your code needs to be compiled, all these rich text snippets are simply removed.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OF5w7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basically, this approach is powerful because instead of 1D strings of text, now you can have the power of rich text in your code. Including diagrams, and even embedding other programs through <iframes> would be possible. And when your code needs to be compiled, all these rich text snippets are simply removed."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1710508795.840509",
        "client_msg_id": "dc139523-d577-4044-90a8-9e8e41b33524",
        "text": "<@U05EREC3DCK> your followup to that post went to the channel:\n\n<https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1710504901802799>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1710504901802799",
                "ts": "1710504901.802799",
                "author_id": "U05EREC3DCK",
                "channel_id": "C5T9GPWFL",
                "channel_team": "T5TCAFTA9",
                "is_msg_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5T9GPWFL",
                        "ts": "1710504901.802799",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "5mNXw",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:\n\n\/\/ TODO: Refactor this to use the revised approach\n\nIt instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.\n\nAnd added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page."
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1710504901802799",
                "fallback": "[March 15th, 2024 5:15 AM] kongwei: Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:\n\n\/\/ TODO: Refactor this to use the revised approach\n\nIt instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.\n\nAnd added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page.",
                "text": "Another concept I've been ideating about is how to bring Literate Programming, by Donald Knuth, into my daily work, which involves modern tools and stacks like VSCode and Node.js. I believe inline, rich text snippets which are integrated with some kind of personal knowledge management system is the way to go. This way, instead of having comments like this:\n\n\/\/ TODO: Refactor this to use the revised approach\n\nIt instead would look like using Notion or Obsidian inside VSCode. So above a function, would be a small window into a single page that describes a single function. You can do anything here, like linking references that are relevant to the design of the function. Or you could even have a lengthy design document that explains why a function was written a certain way. Going even further, you could have a page which describes the evolution of a function over time, why at the beginning it was written a certain way, why changes had to be made, and why it looks the way it looks right now.\n\nAnd added bonus of this approach is that now it's possible to have a single source of truth for docs and your code. So rather than maintaining a separate Docusaurus that has to be updated to sync it with evolution in code, you can just maintain documentation in line. And then to publish developer docs online, you merely just take all the little snippets above each function and then aggregate them onto a single page.",
                "author_name": "Kongwei Ying",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/U05EREC3DCK",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_48.png",
                "author_subname": "Kongwei Ying",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5c84Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U05EREC3DCK"
                            },
                            {
                                "type": "text",
                                "text": " your followup to that post went to the channel:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1710504901802799"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1710509209.587249",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1710509513.000000"
        },
        "client_msg_id": "0f97cd1e-d061-46d8-a610-9a0a3ab52080",
        "text": "There are some of us that see the whole \"computers and programming\" thing as being about simulating or modelling reality. In other words, the \"computer\" that _computes_ mathematics stuff or the \"office computer\" that just does paperwork are really just thin slices of a bigger conception of what we're all doing here. As is the \"gaming computer\" that is literally modelling realities in 3D. And on to \"Spatial Computing\"...\n\nA good programming language has to allow us to express our mental model of a live simulation\/model into the machine for it to manifest that, for us to check against the mental model and make adjustments. So it has to be able to represent human cognitive elements for building that, for converting the cognitive model into an external live one.\n\nSo to be humane it must not have _any_ elements that are machine-oriented, like disk, memory, network, CPU\/thread, etc. It has to have elements that are human-oriented, like property, identity, sequence, collection, evolution, adjacency, colour, size, words, sentences, sounds, animation, behaviour, ... (see Roget's Thesaurus for inspiration there) <https:\/\/www.gutenberg.org\/cache\/epub\/10681\/pg10681-images.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VSD2M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are some of us that see the whole \"computers and programming\" thing as being about simulating or modelling reality. In other words, the \"computer\" that "
                            },
                            {
                                "type": "text",
                                "text": "computes",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mathematics stuff or the \"office computer\" that just does paperwork are really just thin slices of a bigger conception of what we're all doing here. As is the \"gaming computer\" that is literally modelling realities in 3D. And on to \"Spatial Computing\"...\n\nA good programming language has to allow us to express our mental model of a live simulation\/model into the machine for it to manifest that, for us to check against the mental model and make adjustments. So it has to be able to represent human cognitive elements for building that, for converting the cognitive model into an external live one.\n\nSo to be humane it must not have "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " elements that are machine-oriented, like disk, memory, network, CPU\/thread, etc. It has to have elements that are human-oriented, like property, identity, sequence, collection, evolution, adjacency, colour, size, words, sentences, sounds, animation, behaviour, ... (see Roget's Thesaurus for inspiration there) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.gutenberg.org\/cache\/epub\/10681\/pg10681-images.html"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1710513463.259759",
        "client_msg_id": "ce0c8b84-a665-4225-a2af-a4699accedb7",
        "text": "Hm cool I’ve come across transclusion with reference to media, but haven’t thought about it with regards to code. Yeah that might be exactly what I’m thinking of, good transclusion tools in an IDE, mixed with some controls for editing transcluded code and forking it in-scope rather than editing the global source of the transcluded code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "675dd03f5d4b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-02\/3889194159300_675dd03f5d4baa904b88_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Sosebee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dnsosebee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8lPz7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hm cool I’ve come across transclusion with reference to media, but haven’t thought about it with regards to code. Yeah that might be exactly what I’m thinking of, good transclusion tools in an IDE, mixed with some controls for editing transcluded code and forking it in-scope rather than editing the global source of the transcluded code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1710515398.304859",
        "client_msg_id": "38f5e662-9165-4001-8779-f05b0fec6a5a",
        "text": "Glamorous Toolkit has transclusion. For example, you can reference a method of a class in a notebook, and get it shown there in a fully functional editor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hdIpi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Glamorous Toolkit has transclusion. For example, you can reference a method of a class in a notebook, and get it shown there in a fully functional editor."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1710515626.613389",
        "client_msg_id": "1856bbfb-b550-4cbd-9d9d-8b0e52b498a7",
        "text": "Wow yeah glamorous toolkit seems really cool. Do you use it \/ know of people who use it regularly?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "675dd03f5d4b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-02\/3889194159300_675dd03f5d4baa904b88_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Sosebee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dnsosebee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "99p9L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow yeah glamorous toolkit seems really cool. Do you use it \/ know of people who use it regularly?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE1JQM9HQ",
        "type": "message",
        "ts": "1710515975.374929",
        "client_msg_id": "177cc8d5-a4ea-4025-b33a-99de4c1cb3e2",
        "text": "<@U03HC3XHZGW> We use it regularly :slightly_smiling_face:. There is a community around it and there are a couple of companies that use it, too. If you are interested, I’d be happy to show you around.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g48924f215ef",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/f48924f215efa665f3c87affcdb14278.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "Tudor",
            "real_name": "Tudor Girba",
            "display_name": "Tudor Girba",
            "team": "T5TCAFTA9",
            "name": "tudor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YiFTM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03HC3XHZGW"
                            },
                            {
                                "type": "text",
                                "text": " We use it regularly "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": ". There is a community around it and there are a couple of companies that use it, too. If you are interested, I’d be happy to show you around."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U03HC3XHZGW",
        "type": "message",
        "ts": "1710516050.094349",
        "client_msg_id": "df1b30a4-93bb-4c91-8bb4-7e019e99c6bd",
        "text": "Yeah that would be awesome! Will DM you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "675dd03f5d4b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-08-02\/3889194159300_675dd03f5d4baa904b88_72.jpg",
            "first_name": "Daniel",
            "real_name": "Daniel Sosebee",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dnsosebee",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+brIb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah that would be awesome! Will DM you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06BUK2M2RH",
        "type": "message",
        "ts": "1710526503.791299",
        "edited": {
            "user": "U06BUK2M2RH",
            "ts": "1710526788.000000"
        },
        "client_msg_id": "107587e0-9ed8-4341-b4c2-dd73024eeb18",
        "text": "I have more quibble with the word programming just because it has such a strong connotation of 'instructions' or 'procedures'. Declaring a dynamical system doesn't necessitate either.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9eac202d45a2",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-28\/6396121022742_9eac202d45a2827e9fa6_72.jpg",
            "first_name": "Dennis",
            "real_name": "Dennis Hansen",
            "display_name": "Dennis Hansen",
            "team": "T5TCAFTA9",
            "name": "dhansen909",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1706450795.055409",
        "parent_user_id": "UMQ6LR9NZ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jRhV2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have more quibble with the word programming just because it has such a strong connotation of 'instructions' or 'procedures'. Declaring a dynamical system doesn't necessitate either."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U05SU27S1M2"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710537104.761959",
        "client_msg_id": "3d5af9f4-3a0b-4308-b0c1-0fe18ee4cb11",
        "text": "I think the best model to express computation would be something that resembles the human being, at all levels, from the spiritual, to the mental, emotional and finally physical. In our society and especially in technology there's a tendency to over emphasis the mental and physical and no where more is this prevalent than in STEM fields where everything is over abstracted into rigid, linear concepts. I also think that a good programming language would have very little to do with low level concepts but instead, would model aspects of being human. The problem I have with the Thesaurus you linked is that it's still overly conceptual. It's just a bunch of words, and while I get what he's hinting at, I find this frame of reference to be inadequate. Instead, I think that certain spiritual schools of thought have a much better vocabulary with which to explore this area.\n\nIn esoteric schools of spiritual thought, the human being is thought to have an underlying blueprint which describes its true nature. So in Daoist sects, there is something called Jingshen, which roughly translates to spirit. In some Hindu schools, there are models of this energetic blueprint that model the human not as atoms or quantum particles but as a conglomeration of energy that's distributed around the body and stored in chakras. While I'm not saying you should believe this, I'm merely saying that this model of the human being, is something that would be good to emulate in a programming language. Something that can model the human being at this level would be far more powerful and expressive than the logos based languages that we have today.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXcg9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the best model to express computation would be something that resembles the human being, at all levels, from the spiritual, to the mental, emotional and finally physical. In our society and especially in technology there's a tendency to over emphasis the mental and physical and no where more is this prevalent than in STEM fields where everything is over abstracted into rigid, linear concepts. I also think that a good programming language would have very little to do with low level concepts but instead, would model aspects of being human. The problem I have with the Thesaurus you linked is that it's still overly conceptual. It's just a bunch of words, and while I get what he's hinting at, I find this frame of reference to be inadequate. Instead, I think that certain spiritual schools of thought have a much better vocabulary with which to explore this area.\n\nIn esoteric schools of spiritual thought, the human being is thought to have an underlying blueprint which describes its true nature. So in Daoist sects, there is something called Jingshen, which roughly translates to spirit. In some Hindu schools, there are models of this energetic blueprint that model the human not as atoms or quantum particles but as a conglomeration of energy that's distributed around the body and stored in chakras. While I'm not saying you should believe this, I'm merely saying that this model of the human being, is something that would be good to emulate in a programming language. Something that can model the human being at this level would be far more powerful and expressive than the logos based languages that we have today."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710537289.075369",
        "client_msg_id": "711e1e61-e4ce-42e7-8bf8-4761597bdffc",
        "text": "So basically the idea is, humans have a spirit and this spirit is the blueprint for our lives, it's like a virtual container which simulates every aspect of our being at a mental, emotional and physical level. If we want to make a super powerful programming language and computation machine, it would resemble this spirit and be able to define everything that our spirit does.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tuf7i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So basically the idea is, humans have a spirit and this spirit is the blueprint for our lives, it's like a virtual container which simulates every aspect of our being at a mental, emotional and physical level. If we want to make a super powerful programming language and computation machine, it would resemble this spirit and be able to define everything that our spirit does."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U05EREC3DCK",
        "type": "message",
        "ts": "1710537664.767549",
        "client_msg_id": "fe35a5dd-30e6-4b93-b8e4-4a5661c4682d",
        "text": "The optimal programming language would be able to create an AI version of a human, down to all its smallest details. Anything less is just really primitive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "766cfa303a60",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-06-28\/5494950400022_766cfa303a60ec4d84aa_72.png",
            "first_name": "Kongwei",
            "real_name": "Kongwei Ying",
            "display_name": "Kongwei Ying",
            "team": "T5TCAFTA9",
            "name": "kongwei",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1707635992.054799",
        "parent_user_id": "U03GBV8B58V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aEIUR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The optimal programming language would be able to create an AI version of a human, down to all its smallest details. Anything less is just really primitive."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1710549309.108009",
        "client_msg_id": "68dda652-bd2e-41af-862f-79b885a567ba",
        "text": "To expand on this - can we also use hyperlinks to represent links within the code itself? Eg if you have a type annotation `a: TheType`, then `TheType` is not a piece of text but a hypertext link to the type definition. These would be resolved at edit time. Same with method calls that can be resolved. Dynamic dispatch \/ abstract classes can be represented by a link to the base definition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710504901.802799",
        "parent_user_id": "U05EREC3DCK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DOPkV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To expand on this - can we also use hyperlinks to represent links within the code itself? Eg if you have a type annotation "
                            },
                            {
                                "type": "text",
                                "text": "a: TheType",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", then "
                            },
                            {
                                "type": "text",
                                "text": "TheType",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not a piece of text but a hypertext link to the type definition. These would be resolved at edit time. Same with method calls that can be resolved. Dynamic dispatch \/ abstract classes can be represented by a link to the base definition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1710567436.897409",
        "client_msg_id": "B59133DE-6D98-4D40-B85C-6EF7DD6DF78E",
        "text": "I use it regularly as well. Be warned that it is addictive.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1710330019.429259",
        "parent_user_id": "UCS1K3QTH",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJXz+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use it regularly as well. Be warned that it is addictive."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UE1JQM9HQ",
                    "U03HC3XHZGW"
                ],
                "count": 2
            }
        ]
    }
]