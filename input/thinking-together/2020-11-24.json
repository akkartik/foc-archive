[
    {
        "user": "UV1CVSXGC",
        "type": "message",
        "ts": "1606238757.102100",
        "text": "",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bacfa5ca638a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-03-12\/985422980563_bacfa5ca638add1dd05e_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Martens",
            "display_name": "Chris Martens (they\/them)",
            "team": "T5TCAFTA9",
            "name": "contextadventure",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606238757.102100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1606239058.102200",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "replies": [
            {
                "user": "UC2A2ARPT",
                "ts": "1606239058.102200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "[November 24th, 2020 12:22 PM] contextadventure: anyone know of efforts to internationalize natural language programming languages?",
                "ts": "1606238576.036600",
                "author_id": "UV1CVSXGC",
                "author_subname": "Chris Martens",
                "channel_id": "CLYCGTCPL",
                "is_msg_unfurl": true,
                "text": "anyone know of efforts to internationalize natural language programming languages?",
                "author_name": "Chris Martens",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UV1CVSXGC",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2020-03-12\/985422980563_bacfa5ca638add1dd05e_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CLYCGTCPL\/p1606238576036600",
                "is_share": true,
                "footer": "Slack Conversation"
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1606239058.102200",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1606239078.000000"
        },
        "client_msg_id": "64753bc5-7602-430d-821d-c12ed6ee2495",
        "text": "(To anyone who might reply here – please add replies to <https:\/\/futureofcoding.slack.com\/archives\/CLYCGTCPL\/p1606238576036600|the thread> in <#CLYCGTCPL|of-end-user-programming>. Thanks!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606238757.102100",
        "parent_user_id": "UV1CVSXGC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6q6l5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(To anyone who might reply here – please add replies to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CLYCGTCPL\/p1606238576036600",
                                "text": "the thread"
                            },
                            {
                                "type": "text",
                                "text": " in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CLYCGTCPL"
                            },
                            {
                                "type": "text",
                                "text": ". Thanks!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1606263240.109700",
        "client_msg_id": "e1dca560-d05a-4356-98d3-ee0077ac46fc",
        "text": "Haven't read Object Thinking. Based on reviews, it's all about the OOP and Smalltalk philosophy of programming. I would instead be interested in reading a hypothetical book called Value Thinking, about a non-formalist, human-centred approach to pure functional programming. The first 30 years of FP research resulted in some lovely, simple, dynamically typed FP languages that could be summarized in a few pages of text. Then Haskell happened, and now FP has morphed into this monstrously complex subject that is all about formalism, higher order type theory and category theory. One way of looking at my research is: FP for humans. My interest in Alexander comes from this perspective. So I'm looking to see if David West has ideas I can repurpose for this.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I19",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haven't read Object Thinking. Based on reviews, it's all about the OOP and Smalltalk philosophy of programming. I would instead be interested in reading a hypothetical book called Value Thinking, about a non-formalist, human-centred approach to pure functional programming. The first 30 years of FP research resulted in some lovely, simple, dynamically typed FP languages that could be summarized in a few pages of text. Then Haskell happened, and now FP has morphed into this monstrously complex subject that is all about formalism, higher order type theory and category theory. One way of looking at my research is: FP for humans. My interest in Alexander comes from this perspective. So I'm looking to see if David West has ideas I can repurpose for this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1606263748.109900",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1606263880.000000"
        },
        "client_msg_id": "6a65bc73-853e-404a-88a6-89e011e25749",
        "text": "David West's web site looks like a good place to start: &lt;<http:\/\/davewest.us>&gt;. He is writing a book called \"The Design of Living Systems\" which sounds very Alexander-inspired (no summary is provided, just the title). The newer book \"Design Thinking\" also looks very Alexander inspired--table of contents mentions living systems, form, fit and unfolding. This book is also not available yet. However, there are online papers and videos, including \"Conversations with Alexander\". So I'm going to dive in now.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lyab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "David West's web site looks like a good place to start: <"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/davewest.us"
                            },
                            {
                                "type": "text",
                                "text": ">. He is writing a book called \"The Design of Living Systems\" which sounds very Alexander-inspired (no summary is provided, just the title). The newer book \"Design Thinking\" also looks very Alexander inspired--table of contents mentions living systems, form, fit and unfolding. This book is also not available yet. However, there are online papers and videos, including \"Conversations with Alexander\". So I'm going to dive in now."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "URKQXRCAC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UMVFWPZ36",
        "type": "message",
        "ts": "1606273035.110500",
        "client_msg_id": "208eccb5-a314-446b-9e40-2f95e75a910d",
        "text": "Anyone have a good algorithms for minimum 2-dimensional diff? Input is 2 trimmed and clean CSVs (files don’t end in \\n; lines don’t end in ,; no quotes or escaping). (one note: There often is a varying number of columns in rows)\nExample, given the 2 inputs below, write efficient diff and patch methods and a nice diff encoding.\n```rank,color\n1,blue\n2,red\n3,green \n\nrank,color\n1,blue\n2,orange\n3,purple ```\nA nice diff format would also be helpful. Can’t seem to find much on this yet, but there must be some stuff out there in the Spreadsheet\/Finance world.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cbd558604a21",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-22\/1871363334903_cbd558604a21b23211c3_72.png",
            "first_name": "",
            "real_name": "Breck Yunits",
            "display_name": "Breck Yunits",
            "team": "T5TCAFTA9",
            "name": "breck7",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606273035.110500",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1606355425.133500",
        "reply_users": [
            "UN9SCH5RD",
            "UMVFWPZ36"
        ],
        "replies": [
            {
                "user": "UN9SCH5RD",
                "ts": "1606279206.119300"
            },
            {
                "user": "UMVFWPZ36",
                "ts": "1606340892.132600"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606354526.133200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606355425.133500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uWU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone have a good algorithms for minimum 2-dimensional diff? Input is 2 trimmed and clean CSVs (files don’t end in \\n; lines don’t end in ,; no quotes or escaping). (one note: There often is a varying number of columns in rows)\nExample, given the 2 inputs below, write efficient diff and patch methods and a nice diff encoding.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rank,color\n1,blue\n2,red\n3,green \n\nrank,color\n1,blue\n2,orange\n3,purple "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A nice diff format would also be helpful. Can’t seem to find much on this yet, but there must be some stuff out there in the Spreadsheet\/Finance world."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606279206.119300",
        "client_msg_id": "8cb87e2f-54ba-4e6d-b220-ece2f60ea7ae",
        "text": "I don't know any csv diff algorithms but there are a bunch of \"CSV diff\" implementations on github, maybe one of them works for you?\n\nOther idea: here's a cool article about diffing here: <https:\/\/neil.fraser.name\/writing\/diff\/>:\n&gt; Any difference algorithm could theoretically process any input, regardless of whether it is split by characters, words or lines *(*)*. However, some difference algorithms are much more efficient at handling small tokens such as characters, others are much more efficient at handling large tokens such as lines.\n*: or rows?\n\nSo if you treat the grid as a sequence (cells instead of characters, using row width instead of line length, and having nth element at  Y * Width + X), perhaps one of the sequence diffs algos could yields better results than the others?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXVFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know any csv diff algorithms but there are a bunch of \"CSV diff\" implementations on github, maybe one of them works for you?\n\nOther idea: here's a cool article about diffing here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/neil.fraser.name\/writing\/diff\/"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any difference algorithm could theoretically process any input, regardless of whether it is split by characters, words or lines "
                            },
                            {
                                "type": "text",
                                "text": "(*)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". However, some difference algorithms are much more efficient at handling small tokens such as characters, others are much more efficient at handling large tokens such as lines."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*: or rows?\n\nSo if you treat the grid as a sequence (cells instead of characters, using row width instead of line length, and having nth element at  Y * Width + X), perhaps one of the sequence diffs algos could yields better results than the others?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606289697.124500",
        "client_msg_id": "cd386d29-c29d-49a7-a662-215765fdb443",
        "text": "What should the right notation be for the rotate (circular shift) operation?\n\nThis seems like an important question since the operation is common in cryptography, and since the ARM instruction set goes to great lengths to allow any instruction to perform it. But apparently there's never been a good notation for it:\n\n<https:\/\/stackoverflow.com\/questions\/32785998\/symbol-for-bitwise-circular-shifts>\n\nDesirable properties:\n* Stop thinking in terms of shift. Every rotation left can also be viewed as a rotation right. It feels most natural to think of rotate(X, n) to mean \"X rotated to start at bit n.\"\n* No distracting ambiguous usage anywhere. Luckily we've already discarded '&lt;&lt;&lt;' above. `&lt;&gt;` has distracting connotations of inequality. Maybe `&gt;&lt;`?\n* Ideally just ascii characters. Though I suppose we could use one of the circular unicode arrows at a pinch.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606289697.124500",
        "reply_count": 17,
        "reply_users_count": 7,
        "latest_reply": "1606364482.138400",
        "reply_users": [
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "UPX3PH28N",
            "U01EKU0UM24",
            "UJN1TAYEQ",
            "U015902ESJC",
            "UN9SCH5RD"
        ],
        "replies": [
            {
                "user": "U016VUZGUUQ",
                "ts": "1606294199.130000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606294268.130300"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606294626.130500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606294729.130700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606294785.130900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606294880.131100"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1606300326.131300"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1606300691.131500"
            },
            {
                "user": "U01EKU0UM24",
                "ts": "1606301051.131700"
            },
            {
                "user": "UPX3PH28N",
                "ts": "1606301345.131900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606327592.132300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1606348796.132800"
            },
            {
                "user": "U015902ESJC",
                "ts": "1606354193.133000"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606361032.137400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606361125.137800"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606361233.138000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606364482.138400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "Symbol for bitwise circular shifts",
                "title_link": "https:\/\/stackoverflow.com\/questions\/32785998\/symbol-for-bitwise-circular-shifts",
                "text": "C and some other languages have bitwise shifts. They usually have at least logical shifts (actually those are arithmetic when using them to signed integers and logical when integers are unsigned)[s...",
                "fallback": "Stack Overflow: Symbol for bitwise circular shifts",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https:\/\/stackoverflow.com\/questions\/32785998\/symbol-for-bitwise-circular-shifts",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon.png?v=c78bd457575a",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/32785998\/symbol-for-bitwise-circular-shifts"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VBesv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What should the right notation be for the rotate (circular shift) operation?\n\nThis seems like an important question since the operation is common in cryptography, and since the ARM instruction set goes to great lengths to allow any instruction to perform it. But apparently there's never been a good notation for it:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/32785998\/symbol-for-bitwise-circular-shifts"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDesirable properties:\n* Stop thinking in terms of shift. Every rotation left can also be viewed as a rotation right. It feels most natural to think of rotate(X, n) to mean \"X rotated to start at bit n.\"\n* No distracting ambiguous usage anywhere. Luckily we've already discarded '<<<' above. "
                            },
                            {
                                "type": "text",
                                "text": "<>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has distracting connotations of inequality. Maybe "
                            },
                            {
                                "type": "text",
                                "text": "><",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n* Ideally just ascii characters. Though I suppose we could use one of the circular unicode arrows at a pinch."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]