[
    {
        "user": "U017AAMDG3B",
        "type": "message",
        "ts": "1594729831.123400",
        "edited": {
            "user": "U017AAMDG3B",
            "ts": "1594729997.000000"
        },
        "client_msg_id": "11e619fe-f9d3-498d-aea5-deddc020aac6",
        "text": "Hey folks!\nRight now I explore an idea about bringing some of the ideas of Functional Relational Programming (“Out of the tar pit” paper, here is a <http:\/\/kmdouglass.github.io\/posts\/summary-out-of-the-tar-pit\/|quick summary>) to the mainstream development.\nI have a problem and thought maybe somebody could help me here :slightly_smiling_face:\n\nIn my app, I have two variables in state and they are somewhat connected: one can be changed programmatically and another one is changed by the underlying system when an event happens. If one of them changed, another one should be changed too to stay in sync. Right now each variable has its own place, its own change callback and basically there are 2 places where code should be written.\nWhat I want to do is to create some kind of “relation” between those two in a declarative manner and store it (or just have in code).\nSo, when one of the variables changes, other changes too automatically and in one place.\nAnd also, it’ll be nice to create an ability to subscribe to the relation (and not particular variable), maybe put some constrains on it, etc.\n\nBut I’m struggling with creating that “Relation” entity. What it should be? An object? A function? How can I create a declarative way for creating relations?\nDoes somebody have ideas or thoughts?\n\nThanks in advance!\n\n_P.S. I do UI development mainly (swift, kotlin, iOS, Andoid), but feel free to elaborate in any language or system, I think I could adapt_ :wink: ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ac71870b02",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-07\/1332132689671_50ac71870b024b2ae2ab_72.png",
            "first_name": "Tim",
            "real_name": "Tim Plotnikov",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kristoft.1329",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "reply_count": 13,
        "reply_users_count": 5,
        "latest_reply": "1594863258.133200",
        "reply_users": [
            "UFPPABQ7P",
            "U017AAMDG3B",
            "UEQ6M68H0",
            "UJN1TAYEQ",
            "U8A5MS6R1"
        ],
        "replies": [
            {
                "user": "UFPPABQ7P",
                "ts": "1594731059.123800"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1594731442.124000"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1594731592.124200"
            },
            {
                "user": "U017AAMDG3B",
                "ts": "1594732164.124400"
            },
            {
                "user": "UFPPABQ7P",
                "ts": "1594732319.124600"
            },
            {
                "user": "U017AAMDG3B",
                "ts": "1594732709.125300"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1594746526.127400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1594762190.127700"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1594791640.128000"
            },
            {
                "user": "U017AAMDG3B",
                "ts": "1594801167.128700"
            },
            {
                "user": "U017AAMDG3B",
                "ts": "1594801589.128900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1594859507.132900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1594863258.133200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "slk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey folks!\nRight now I explore an idea about bringing some of the ideas of Functional Relational Programming (“Out of the tar pit” paper, here is a "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/kmdouglass.github.io\/posts\/summary-out-of-the-tar-pit\/",
                                "text": "quick summary"
                            },
                            {
                                "type": "text",
                                "text": ") to the mainstream development.\nI have a problem and thought maybe somebody could help me here "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn my app, I have two variables in state and they are somewhat connected: one can be changed programmatically and another one is changed by the underlying system when an event happens. If one of them changed, another one should be changed too to stay in sync. Right now each variable has its own place, its own change callback and basically there are 2 places where code should be written.\nWhat I want to do is to create some kind of “relation” between those two in a declarative manner and store it (or just have in code).\nSo, when one of the variables changes, other changes too automatically and in one place.\nAnd also, it’ll be nice to create an ability to subscribe to the relation (and not particular variable), maybe put some constrains on it, etc.\n\nBut I’m struggling with creating that “Relation” entity. What it should be? An object? A function? How can I create a declarative way for creating relations?\nDoes somebody have ideas or thoughts?\n\nThanks in advance!\n\n"
                            },
                            {
                                "type": "text",
                                "text": "P.S. I do UI development mainly (swift, kotlin, iOS, Andoid), but feel free to elaborate in any language or system, I think I could adapt ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1594731059.123800",
        "client_msg_id": "711185a4-fc1f-4951-a29a-483541648255",
        "text": "This sounds like Rx observables",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oYUMT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This sounds like Rx observables"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1594731442.124000",
        "client_msg_id": "46434091-be28-4e9f-828a-56ffc7f25f3c",
        "text": "So, if you were building a product detail page, which shows the quantity left in stock, and the price of adding the selected quantity, you could set up a relationship like the following:\n```$quantityInStock = subscribeToItemQuantity(itemId)\n$currentPrice = subscribeToItemPrice(itemId)\n$quantitySelected = ReactiveValue(1)```\n```\/\/ shown in UI view\n$validSelected = minOfLatest($quantitySelected, $quantityInStock) \n\n$totalCostOfSelection = combineLatest($currentPrice, $validSelected).pipe(map(([price, selected]) =&gt; multiplyMoney(price, selected))\n$displayTotalCostOfSelection = $totalCostOfSelection.pipe(map(formatMoneyFn))```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "itC5o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, if you were building a product detail page, which shows the quantity left in stock, and the price of adding the selected quantity, you could set up a relationship like the following:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "$quantityInStock = subscribeToItemQuantity(itemId)\n$currentPrice = subscribeToItemPrice(itemId)\n$quantitySelected = ReactiveValue(1)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\/\/ shown in UI view\n$validSelected = minOfLatest($quantitySelected, $quantityInStock) \n\n$totalCostOfSelection = combineLatest($currentPrice, $validSelected).pipe(map(([price, selected]) => multiplyMoney(price, selected))\n$displayTotalCostOfSelection = $totalCostOfSelection.pipe(map(formatMoneyFn))"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1594731592.124200",
        "client_msg_id": "d038b63d-d043-41e5-ba10-c1066af35659",
        "text": "I believe the Swift community has been promoting parts of this pattern with the name Model-View View-Model (MVVM).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5DgR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I believe the Swift community has been promoting parts of this pattern with the name Model-View View-Model (MVVM)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017AAMDG3B",
        "type": "message",
        "ts": "1594732164.124400",
        "client_msg_id": "1acc7610-3d2a-4494-b723-ece4c7a13fff",
        "text": "Yeah, Rx is the way definitely, i’ll try that, thanks! Also, maybe I’ll find something in clojure’s atom, its also an interesting concept.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ac71870b02",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-07\/1332132689671_50ac71870b024b2ae2ab_72.png",
            "first_name": "Tim",
            "real_name": "Tim Plotnikov",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kristoft.1329",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dy1JU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, Rx is the way definitely, i’ll try that, thanks! Also, maybe I’ll find something in clojure’s atom, its also an interesting concept."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFPPABQ7P",
        "type": "message",
        "ts": "1594732319.124600",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1594732349.000000"
        },
        "client_msg_id": "aa320f89-9722-44af-850c-679597978da8",
        "text": "I have a few write-ups which talk about MVVM in a way which completely separates the \"View\" from the \"Business logic\". I've given a couple talks about it, and you can find some of the content here\n<https:\/\/refactorordie.com\/#todo-app-sample>\n<https:\/\/github.com\/RefactorOrDie\/refactorordie.com\/blob\/master\/storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js>\nIt's in JS\/React built on top of RxJS, but the concepts work well for many languages",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6d3ec7cc938b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-02-08\/8407560079991_6d3ec7cc938bc2e0cdb7_72.png",
            "first_name": "Cole",
            "real_name": "Cole Lawrence",
            "display_name": "Cole",
            "team": "T5TCAFTA9",
            "name": "colelawr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "attachments": [
            {
                "fallback": "[RefactorOrDie\/refactorordie.com] storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js",
                "text": "```\n\/\/@ts-check\nimport { Behavior, BehaviorList } from \"behavior-state\";\n\n\/**\n * @param {Todo[]} initialTodos\n *\/\nexport default function createTodoState(initialTodos = []) {\n  const $todos = new BehaviorList(initialTodos);\n  const $todoInput = new Behavior(\"\");\n\n  return {\n    $todos: $todos.asObservableList(),\n    $todoInput,\n    updateNewTodoInput(value) {\n      debug(\"updateNewTodoInput\", value);\n      $todoInput.next(value);\n    },\n    toggleTodo(id) {\n      debug(\"toggleTodo\", id);\n      $todos.nextUpdateItemsWhere(\n        todo =&gt; todo.id === id,\n        todo =&gt; ({ ...todo, done: !todo.done })\n      );\n    },\n    deleteTodo(id) {\n      debug(\"deleteTodo\", id);\n      $todos.nextRemoveItemsWhere(todo =&gt; todo.id === id);\n    },\n    addTodo() {\n      if ($todoInput.value) {\n        debug(\"addTodo\", $todoInput.value);\n        $todos.nextAppendItem({\n          id: Math.random(),\n          done: false,\n          title: $todoInput.value\n        });\n        $todoInput.next(\"\");\n      }\n    }\n  };\n}\n\nconst debug = console.log.bind(console, \"%cTodoState\", \"color: dodgerblue\");\n\n```",
                "title": "storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js",
                "footer": "<https:\/\/github.com\/RefactorOrDie\/refactorordie.com|RefactorOrDie\/refactorordie.com>",
                "id": 1,
                "title_link": "https:\/\/github.com\/RefactorOrDie\/refactorordie.com\/blob\/master\/storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js",
                "footer_icon": "https:\/\/github.githubassets.com\/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https:\/\/github.com\/RefactorOrDie\/refactorordie.com\/blob\/master\/storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a few write-ups which talk about MVVM in a way which completely separates the \"View\" from the \"Business logic\". I've given a couple talks about it, and you can find some of the content here\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/refactorordie.com\/#todo-app-sample"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/RefactorOrDie\/refactorordie.com\/blob\/master\/storybook\/stories\/writing\/presentations\/ObservableStateOct2019\/TodoApp\/src\/app\/TodoState.js"
                            },
                            {
                                "type": "text",
                                "text": "\nIt's in JS\/React built on top of RxJS, but the concepts work well for many languages"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017AAMDG3B",
        "type": "message",
        "ts": "1594732709.125300",
        "client_msg_id": "4AE4996D-6298-4B5A-99C9-B2469A322369",
        "text": "Thanks! I’ll do!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "50ac71870b02",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-07\/1332132689671_50ac71870b024b2ae2ab_72.png",
            "first_name": "Tim",
            "real_name": "Tim Plotnikov",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "kristoft.1329",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E5L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! I’ll do!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1594746526.127400",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1594746844.000000"
        },
        "client_msg_id": "2f40789e-cbc8-4ffc-bdcb-db72e70d128d",
        "text": "You didn't make the question clear enough to give an answer.  In Physics you have independent variables, like an XYZ coordinate, and they are somewhat connected in that the object that possesses those coordinates might be redrawn on the screen. So the screen re-render becomes a process that is activated by some mechanism when the X, Y, or Z (any of the 3) changes. And if you have other objects flying around, then collision detection must be performed. And maybe if the XYZ is past a boundary, then something has to happen; a sound effect or a deformation of the shape to prevent moving past a point, or it bounces. In interactive graphics you have perhaps 100 things on the screen, and depending on state changes, regeneration of some widget or visualization of the model has to change.\n\nIf you are talking about a derived quantity, it is an entirely different thing, and in a spreadsheet you have automatic natural order of recomputation, so that if B = A * 2, when A changes B is updated automatically.  Under the hood of every spreadsheet is a topological sort of the dependencies of each formula, and of course this means circularity can be detected and the user warned.\n\nSo if your variables have a single direction dependency, then the spreadsheet works well. TK\/Sover, which was Visicalc's sequel product, introduced bidirectional formula modification, so that if you changed B  in the above formula it would then fix A based on the mutual constraint. Once you have multiple variables and complicated formulae TK\/Solver got a bit gnarly, and so few people are doing reverse modeling the product is long forgotten. It was actually a far more clever product than Visicalc.\n\nIn the model\/view world you have the model generating visualizations, which are dependent on the model variables for how they are drawn, then the rendered visualizations are interacted with, and user clicks\/gestures feed back into the model, which then triggers the re-render of the visualization to track the input. When this happens at 60 frames per second, the user doesn't realize how much work is being done.\n\nAnyway it would be helpful if you gave a very specific example. The are only 6 permutations of 3 things, and 8 combinations of 3 things, so that is only 14 ways to think about 3 things. A concrete example would clarify which of the scenarios you are trying to encode. A subscription to a relation between A and B creates a third thing C which is watching.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3SG55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You didn't make the question clear enough to give an answer.  In Physics you have independent variables, like an XYZ coordinate, and they are somewhat connected in that the object that possesses those coordinates might be redrawn on the screen. So the screen re-render becomes a process that is activated by some mechanism when the X, Y, or Z (any of the 3) changes. And if you have other objects flying around, then collision detection must be performed. And maybe if the XYZ is past a boundary, then something has to happen; a sound effect or a deformation of the shape to prevent moving past a point, or it bounces. In interactive graphics you have perhaps 100 things on the screen, and depending on state changes, regeneration of some widget or visualization of the model has to change.\n\nIf you are talking about a derived quantity, it is an entirely different thing, and in a spreadsheet you have automatic natural order of recomputation, so that if B = A * 2, when A changes B is updated automatically.  Under the hood of every spreadsheet is a topological sort of the dependencies of each formula, and of course this means circularity can be detected and the user warned.\n\nSo if your variables have a single direction dependency, then the spreadsheet works well. TK\/Sover, which was Visicalc's sequel product, introduced bidirectional formula modification, so that if you changed B  in the above formula it would then fix A based on the mutual constraint. Once you have multiple variables and complicated formulae TK\/Solver got a bit gnarly, and so few people are doing reverse modeling the product is long forgotten. It was actually a far more clever product than Visicalc.\n\nIn the model\/view world you have the model generating visualizations, which are dependent on the model variables for how they are drawn, then the rendered visualizations are interacted with, and user clicks\/gestures feed back into the model, which then triggers the re-render of the visualization to track the input. When this happens at 60 frames per second, the user doesn't realize how much work is being done.\n\nAnyway it would be helpful if you gave a very specific example. The are only 6 permutations of 3 things, and 8 combinations of 3 things, so that is only 14 ways to think about 3 things. A concrete example would clarify which of the scenarios you are trying to encode. A subscription to a relation between A and B creates a third thing C which is watching."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1594762190.127700",
        "client_msg_id": "07943a55-3393-441e-ae00-78b2f334912c",
        "text": "The Cell programming language is a very interesting take on functional relational programming. I think there's a difference between expressing functional\/relational logic in a high level declarative language, as you can do in Cell, vs encoding that logic in a lower level language like Javascript + Rx using shared mutable state and callbacks. <http:\/\/cell-lang.net>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "attachments": [
            {
                "title": "The Cell Programming Language",
                "title_link": "http:\/\/cell-lang.net\/",
                "text": "The Cell Programming Language",
                "fallback": "The Cell Programming Language",
                "from_url": "http:\/\/cell-lang.net\/",
                "service_name": "cell-lang.net",
                "id": 1,
                "original_url": "http:\/\/cell-lang.net"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Cell programming language is a very interesting take on functional relational programming. I think there's a difference between expressing functional\/relational logic in a high level declarative language, as you can do in Cell, vs encoding that logic in a lower level language like Javascript + Rx using shared mutable state and callbacks. "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/cell-lang.net"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1594791640.128000",
        "client_msg_id": "1bb32991-fb91-4fff-9b6d-f2b61b032c65",
        "text": "Cell is kind of odd beast. It has some elements of Neo4J, in that it promotes using directed graphs instead of OOP (which is a superior way to do things IMHO). It wasn't clear whether he was building a whole new language or trying to augment existing ones.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1594729831.123400",
        "parent_user_id": "U017AAMDG3B",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cell is kind of odd beast. It has some elements of Neo4J, in that it promotes using directed graphs instead of OOP (which is a superior way to do things IMHO). It wasn't clear whether he was building a whole new language or trying to augment existing ones."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]