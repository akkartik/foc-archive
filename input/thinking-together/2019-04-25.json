[
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1556198662.187000",
        "client_msg_id": "CB054C3D-D729-452C-9C47-DF7539979E10",
        "text": "I’d love to hear more. I mentioned earlier in this thread how integral I think it is to my department’s functioning (~100s of engineers).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H97",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’d love to hear more. I mentioned earlier in this thread how integral I think it is to my department’s functioning (~100s of engineers)."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556201791.187300",
        "client_msg_id": "9b53cacb-f369-47ac-ad8a-443d9a033c0b",
        "text": "Let me go back and refresh my memory, thanks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+iZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me go back and refresh my memory, thanks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556223353.187600",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1556223635.000000"
        },
        "client_msg_id": "5a2c6fa2-7974-485a-a25b-8c2a3d5c6790",
        "text": "I reread back from <https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1548029205388800> (not sure what “conversation about collaboration” it was referring to at the start). Using microservices is definitely a great idea because of the operational isolation benefits. That part scales fine, as you say[1]. My disagreement is more with the way you describe how microservices are _created_. Here’s my preferred approach (from <https:\/\/news.ycombinator.com\/item?id=13908458#13917333>):\n\n&gt; When working with someone on a project don’t “design an interface” and then work alone on either side of it. Work together all over it.\n\nThis works just as well when the interface is an endpoint. And it tends to encourage more debate and discussion of what the interface should look like.\n\nNow, maybe the interface is obvious to you. Maybe you’re immersed in your domain or have tons of experience or are just preternaturally good at API design. But in my experience, while some people can be good all the time and all people can be good some of the time, everybody can’t be good at API design all the time. So you need some sort of escape hatch. What do you do when you realize the interface isn’t ideal? In that situation, things are a lot easier if you and your collaborators have experience with the internals of all the different microservices you’re creating. Negotiation can be more fluid, the space of alternatives gets more thoroughly explored.\n\n[1] Though it’s not a panacea. What do you do when one team wants another to add a feature to their API? Do you end up having 16 different models called ‘user’ for different microservices, each subtly different? (\/cc <@U8A5MS6R1>) The trouble with microservices is that Conway’s Law kicks in and the fluid movement of each programmer’s attention between interfaces stops.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7++J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I reread back from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1548029205388800"
                            },
                            {
                                "type": "text",
                                "text": " (not sure what “conversation about collaboration” it was referring to at the start). Using microservices is definitely a great idea because of the operational isolation benefits. That part scales fine, as you say[1]. My disagreement is more with the way you describe how microservices are "
                            },
                            {
                                "type": "text",
                                "text": "created",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Here’s my preferred approach (from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=13908458#13917333"
                            },
                            {
                                "type": "text",
                                "text": "):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When working with someone on a project don’t “design an interface” and then work alone on either side of it. Work together all over it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis works just as well when the interface is an endpoint. And it tends to encourage more debate and discussion of what the interface should look like.\n\nNow, maybe the interface is obvious to you. Maybe you’re immersed in your domain or have tons of experience or are just preternaturally good at API design. But in my experience, while some people can be good all the time and all people can be good some of the time, everybody can’t be good at API design all the time. So you need some sort of escape hatch. What do you do when you realize the interface isn’t ideal? In that situation, things are a lot easier if you and your collaborators have experience with the internals of all the different microservices you’re creating. Negotiation can be more fluid, the space of alternatives gets more thoroughly explored.\n\n[1] Though it’s not a panacea. What do you do when one team wants another to add a feature to their API? Do you end up having 16 different models called ‘user’ for different microservices, each subtly different? (\/cc "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": ") The trouble with microservices is that Conway’s Law kicks in and the fluid movement of each programmer’s attention between interfaces stops."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1556224036.188100",
        "client_msg_id": "641595ac-0c9f-4a54-b118-7c8938eb60bf",
        "text": "&gt; A big motivating force for young children is being around their family, working on a common goal. This motivation is lost if we divide up chores so everyone is working solo (or give kids mock work). So for example, if you’re doing laundry, be sure everyone is folding everyone’s clothes. If you have the children just fold their own clothes while you fold your own, the tasks becomes more about working independently.\n\n<https:\/\/www.npr.org\/sections\/goatsandsoda\/2018\/06\/09\/616928895\/how-to-get-your-kids-to-do-chores-without-resenting-it>\n\nMaybe my motivational structures just never grew up.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "attachments": [
            {
                "service_name": "NPR.org",
                "title": "How To Get Your Kids To Do Chores (Without Resenting It)",
                "title_link": "https:\/\/www.npr.org\/sections\/goatsandsoda\/2018\/06\/09\/616928895\/how-to-get-your-kids-to-do-chores-without-resenting-it",
                "text": "In villages in Mexico, parents have accomplished what every mom and dad dreams of: Figured out a way to get to their kids to be helpful around the house. What's their secret?",
                "fallback": "NPR.org: How To Get Your Kids To Do Chores (Without Resenting It)",
                "image_url": "https:\/\/media.npr.org\/assets\/img\/2018\/06\/07\/mex_azehbrauskas01-edit-2_wide-478131110d54a2d09b02ad4575c66731cc3b931c.jpg?s=1400",
                "from_url": "https:\/\/www.npr.org\/sections\/goatsandsoda\/2018\/06\/09\/616928895\/how-to-get-your-kids-to-do-chores-without-resenting-it",
                "image_width": 445,
                "image_height": 250,
                "image_bytes": 563051,
                "service_icon": "https:\/\/media.npr.org\/templates\/favicon\/favicon-180x180.png",
                "id": 1,
                "original_url": "https:\/\/www.npr.org\/sections\/goatsandsoda\/2018\/06\/09\/616928895\/how-to-get-your-kids-to-do-chores-without-resenting-it"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qNu4",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A big motivating force for young children is being around their family, working on a common goal. This motivation is lost if we divide up chores so everyone is working solo (or give kids mock work). So for example, if you’re doing laundry, be sure everyone is folding everyone’s clothes. If you have the children just fold their own clothes while you fold your own, the tasks becomes more about working independently."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.npr.org\/sections\/goatsandsoda\/2018\/06\/09\/616928895\/how-to-get-your-kids-to-do-chores-without-resenting-it"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMaybe my motivational structures just never grew up."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1556226543.188400",
        "client_msg_id": "6c59ac12-0dc7-4534-b5aa-6b79609d2d35",
        "text": "Yeah I'm generally disillusioned with all the system level composition methods we have. Libraries, services, microservices etc. We end up with a lot of model duplication and pervasive reimplementation. There's tight coupling between higher level and lower level processes. E.g. the higher level business logic is encoded in the topology, so if you're just changing an implementation detail, you still have to change the business logic code.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BWXrc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I'm generally disillusioned with all the system level composition methods we have. Libraries, services, microservices etc. We end up with a lot of model duplication and pervasive reimplementation. There's tight coupling between higher level and lower level processes. E.g. the higher level business logic is encoded in the topology, so if you're just changing an implementation detail, you still have to change the business logic code."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UFMD4TQMD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1556226832.188600",
        "client_msg_id": "dd3b4e8b-1e10-4dc2-8544-2c27349b28aa",
        "text": "The next blog post I'm writing is actually along this theme 'Pervasive Reimplementation'.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1548037741.399400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9caf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The next blog post I'm writing is actually along this theme 'Pervasive Reimplementation'."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]