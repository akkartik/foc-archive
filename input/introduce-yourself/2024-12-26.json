[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1735200999.473739",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1735201062.000000"
        },
        "client_msg_id": "66a1d7f1-042e-4e41-9254-026e31e4a3da",
        "text": "Welcome! Nice to see someone else from the Paris region!\n\nAs for CSS... I have been swearing a lot at it recently, as a newcomer to Web programming. But I am not sure yet if what I am angry at is CSS or the CSS tutorials I have come across. What I find difficult with CSS is to understand how different declarations interact to produce a final result. In particular when there are several techniques to do almost the same thing.\n\nRecent example: hiding elements. There's the \"hidden\" attribute in HTML but also \"display: none\" in CSS. The former is something I can add and remove dynamically. The latter is something that I declare once and for all, using classes to switch between different values. What if I mess around with both? Not out of malice, but because I use other people's code that may be opinionated about such issues.\n\nIn the end, my approach to CSS is \"for every problem, go through discussions on StackOverflow until I have something that works\". That's not satisfying, and not how I am used to interacting with computers.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wO\/tV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Welcome! Nice to see someone else from the Paris region!\n\nAs for CSS... I have been swearing a lot at it recently, as a newcomer to Web programming. But I am not sure yet if what I am angry at is CSS or the CSS tutorials I have come across. What I find difficult with CSS is to understand how different declarations interact to produce a final result. In particular when there are several techniques to do almost the same thing.\n\nRecent example: hiding elements. There's the \"hidden\" attribute in HTML but also \"display: none\" in CSS. The former is something I can add and remove dynamically. The latter is something that I declare once and for all, using classes to switch between different values. What if I mess around with both? Not out of malice, but because I use other people's code that may be opinionated about such issues.\n\nIn the end, my approach to CSS is \"for every problem, go through discussions on StackOverflow until I have something that works\". That's not satisfying, and not how I am used to interacting with computers."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U087592N6HE",
        "type": "message",
        "ts": "1735207420.731329",
        "client_msg_id": "d8b81af1-49ce-42ca-a9a4-873de2cab27b",
        "text": "CSS is not like other languages, for sure, even for a declarative one. The way I prefer to think about it: it has a relatively simple set of core rules: the syntax itself, how the cascade works, etc. But when it comes to properties, all the depth is there.\n\nI consider all the properties (and at-rules, and other constructs) in CSS to be something like an extensive standard library, where almost every function has side effects. All the beauty — and complexity — comes from all the interactions between all these properties.\n\nThe saving grace: CSS is visual! You're not required to know all the particularities of some interaction when you can just throw some things together and then look at the result in the browser and test it in a few scenarios (responsiveness and content-awareness). If the result is what is expected — great! If not — the best is to read about these properties and learn what exactly is happening. The best workflow today is to start by looking at the docs in MDN for the properties in question, and if they're not enough (do not cover the interaction you question), then go to the CSS specs. They're very well written and usually easier to understand compared to many other specifications I saw. Often, the main problem with CSS specs is that it might be difficult to find things there — that's why starting from MDN helps a lot, as almost every page there has a link to the original specs.\n\nI don't know what is the best place to start learning it today: I learned it by reading CSS2.0 specs and doing LiveJournal themes, haha. Learning by doing and analyzing the results works the best with CSS. I need to find time and gather some resources for how to start with the web platform — that's a rather common question.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35eb1f65506",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/35eb1f6550609cd1b42090b99e884578.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "Roma",
            "real_name": "Roma Komarov",
            "display_name": "kizu",
            "team": "T5TCAFTA9",
            "name": "kizmarh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tMhen",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CSS is not like other languages, for sure, even for a declarative one. The way I prefer to think about it: it has a relatively simple set of core rules: the syntax itself, how the cascade works, etc. But when it comes to properties, all the depth is there.\n\nI consider all the properties (and at-rules, and other constructs) in CSS to be something like an extensive standard library, where almost every function has side effects. All the beauty — and complexity — comes from all the interactions between all these properties.\n\nThe saving grace: CSS is visual! You're not required to know all the particularities of some interaction when you can just throw some things together and then look at the result in the browser and test it in a few scenarios (responsiveness and content-awareness). If the result is what is expected — great! If not — the best is to read about these properties and learn what exactly is happening. The best workflow today is to start by looking at the docs in MDN for the properties in question, and if they're not enough (do not cover the interaction you question), then go to the CSS specs. They're very well written and usually easier to understand compared to many other specifications I saw. Often, the main problem with CSS specs is that it might be difficult to find things there — that's why starting from MDN helps a lot, as almost every page there has a link to the original specs.\n\nI don't know what is the best place to start learning it today: I learned it by reading CSS2.0 specs and doing LiveJournal themes, haha. Learning by doing and analyzing the results works the best with CSS. I need to find time and gather some resources for how to start with the web platform — that's a rather common question."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "US370TRJA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1735213944.703109",
        "client_msg_id": "4F353C09-A7C7-4B70-808A-A74F65FF6524",
        "text": "Given your deep knowledge of CSS, what would you do if you were designing a new system for the same purpose without historical baggage ?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bI5K9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Given your deep knowledge of CSS, what would you do if you were designing a new system for the same purpose without historical baggage ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U087592N6HE",
        "type": "message",
        "ts": "1735216306.234089",
        "client_msg_id": "4b136472-dc68-44b1-a32f-7c6bdff9c27c",
        "text": "It’s a hard question! Especially given how CSS today is _so much_: not just for styling text documents as it began, but is used for UIs and so many other things.\n\nThis might require more thinking, but maybe one thing that I can name: make the language more self-sufficient and meta. I feel that because the language began as an extension of HTML, with a clear “separation of concerns” many features were locked away. It is like the thought was that we don't need to introduce any complex logic in the language, as there is HTML and JS for expressing different _other_ things.\n\nIf variables (custom properties), mixins, custom functions, conditions, etc. were in the language earlier, it could allow it to evolve even further. We're now at the step where we're adding all these things to the language, and in many ways we're shackled by the legacy — the unique nature of the Web Platform with all the backwards compatibility and “don't break the web” requirements. Which are good, but make it much harder to move forward and introduce new things, and almost impossible to change anything foundational.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35eb1f65506",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/35eb1f6550609cd1b42090b99e884578.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "Roma",
            "real_name": "Roma Komarov",
            "display_name": "kizu",
            "team": "T5TCAFTA9",
            "name": "kizmarh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "goK9c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s a hard question! Especially given how CSS today is "
                            },
                            {
                                "type": "text",
                                "text": "so much",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": not just for styling text documents as it began, but is used for UIs and so many other things.\n\nThis might require more thinking, but maybe one thing that I can name: make the language more self-sufficient and meta. I feel that because the language began as an extension of HTML, with a clear “separation of concerns” many features were locked away. It is like the thought was that we don't need to introduce any complex logic in the language, as there is HTML and JS for expressing different "
                            },
                            {
                                "type": "text",
                                "text": "other",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " things.\n\nIf variables (custom properties), mixins, custom functions, conditions, etc. were in the language earlier, it could allow it to evolve even further. We're now at the step where we're adding all these things to the language, and in many ways we're shackled by the legacy — the unique nature of the Web Platform with all the backwards compatibility and “don't break the web” requirements. Which are good, but make it much harder to move forward and introduce new things, and almost impossible to change anything foundational."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U08764LTDTJ",
        "type": "message",
        "ts": "1735242249.511319",
        "client_msg_id": "dddf29c1-bcbc-41b2-bc90-82923f6dca70",
        "text": "Hi all! I'm <https:\/\/www.andyta.ng\/|Andy>, a student currently studying robot learning and AI for real-world\/verifiable tasks. I've previously crossed paths with several (generally more experienced \/ into HCI) folks in circles like these, and given my interest in these subjects I thought I'd join and hopefully meet some cool people! In terms of experience, I've been coding all my life, previously interned at Replit---which really changes your perspective on the conventional idea of who is a coder---and generally spawn side projects fast enough that they get shoved in a document so I don't try to act on all of them at once and leave them all half-finished.\n\nTopics of interest include voice and physical interaction modalities, computer history (fun fact: according to _<http:\/\/friendlyorangeglow.com\/|Friendly Orange Glow>_ my high school was a significant source of programmers for the PLATO system), and generative software ideas. Excited to meet you all!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9d2aacdfbb2a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-12-25\/8221340506050_9d2aacdfbb2a85bc6c76_72.jpg",
            "first_name": "Andy",
            "real_name": "Andy Yilin Tang",
            "display_name": "Andy Yilin Tang",
            "team": "T5TCAFTA9",
            "name": "andyyt2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5GjEt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all! I'm "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.andyta.ng\/",
                                "text": "Andy"
                            },
                            {
                                "type": "text",
                                "text": ", a student currently studying robot learning and AI for real-world\/verifiable tasks. I've previously crossed paths with several (generally more experienced \/ into HCI) folks in circles like these, and given my interest in these subjects I thought I'd join and hopefully meet some cool people! In terms of experience, I've been coding all my life, previously interned at Replit---which really changes your perspective on the conventional idea of who is a coder---and generally spawn side projects fast enough that they get shoved in a document so I don't try to act on all of them at once and leave them all half-finished.\n\nTopics of interest include voice and physical interaction modalities, computer history (fun fact: according to "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/friendlyorangeglow.com\/",
                                "text": "Friendly Orange Glow",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " my high school was a significant source of programmers for the PLATO system), and generative software ideas. Excited to meet you all!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "wave::skin-tone-3",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "wave",
                "users": [
                    "U013ZLJARC7",
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "U06JCQL6ERJ",
                    "UA14TGLTC",
                    "U06SS0DHZD1"
                ],
                "count": 6
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1735243726.648419",
        "client_msg_id": "7dadd5ea-d8e5-42bc-8500-a14a39cd5506",
        "text": "It sounds like you think there should be a single integrated language for authoring web pages \/ configuring web browser tabs?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y\/\/e6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It sounds like you think there should be a single integrated language for authoring web pages \/ configuring web browser tabs?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U087592N6HE",
        "type": "message",
        "ts": "1735246175.177479",
        "client_msg_id": "7ae89cd4-f08f-421e-bd60-5712315cde43",
        "text": "Mmm, not exactly; I don't think we should really _mix_ the concerns, but we need to identify where the limitations make it harder to move forward. And how we must “cross-pollinate” the existing concepts.\n\nFor example, CSS would benefit from more abstractions that are in-language (<https:\/\/drafts.csswg.org\/css-mixins-1\/|mixins, functions>, states). HTML will benefit from more declarative template programming (see: <https:\/\/github.com\/WICG\/webcomponents\/issues\/1009|declarative custom elements>). JS will benefit from _knowing_ about the styles more: see <https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/CSS_Object_Model|CSSOM>, for example. And there are so many things in CSS that are not currently _exposed_ to scripting, like an ability to subscribe to the style changes, ability to query the container (similar to `.matchMedia`, not via observers), etc.\n\nI find the separation itself useful, but I welcome places where they slightly mix together, as we don't yet know all the use cases for everything we have. It is always possible to encounter some interaction or pattern that would benefit from that mix.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g35eb1f65506",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/35eb1f6550609cd1b42090b99e884578.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0023-72.png",
            "first_name": "Roma",
            "real_name": "Roma Komarov",
            "display_name": "kizu",
            "team": "T5TCAFTA9",
            "name": "kizmarh",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1735153724.401039",
        "parent_user_id": "U087592N6HE",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xb78E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mmm, not exactly; I don't think we should really "
                            },
                            {
                                "type": "text",
                                "text": "mix",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the concerns, but we need to identify where the limitations make it harder to move forward. And how we must “cross-pollinate” the existing concepts.\n\nFor example, CSS would benefit from more abstractions that are in-language ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/drafts.csswg.org\/css-mixins-1\/",
                                "text": "mixins, functions"
                            },
                            {
                                "type": "text",
                                "text": ", states). HTML will benefit from more declarative template programming (see: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/WICG\/webcomponents\/issues\/1009",
                                "text": "declarative custom elements"
                            },
                            {
                                "type": "text",
                                "text": "). JS will benefit from "
                            },
                            {
                                "type": "text",
                                "text": "knowing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about the styles more: see "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/CSS_Object_Model",
                                "text": "CSSOM"
                            },
                            {
                                "type": "text",
                                "text": ", for example. And there are so many things in CSS that are not currently "
                            },
                            {
                                "type": "text",
                                "text": "exposed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to scripting, like an ability to subscribe to the style changes, ability to query the container (similar to "
                            },
                            {
                                "type": "text",
                                "text": ".matchMedia",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", not via observers), etc.\n\nI find the separation itself useful, but I welcome places where they slightly mix together, as we don't yet know all the use cases for everything we have. It is always possible to encounter some interaction or pattern that would benefit from that mix."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]