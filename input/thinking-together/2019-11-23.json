[
    {
        "user": "ULM3U6275",
        "type": "message",
        "ts": "1574531934.113100",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1574557578.000000"
        },
        "client_msg_id": "e7e4a3a5-19a4-4c6f-b399-ee003f46ad0e",
        "text": "I’m bringing this up because I’ve been wondering what an FoC project focused on increasing global creator productivity would look like. When I say “creator”, I don’t mean just me or other developers. I mean everyone on the planet who wants to create things with computers.\n\nI’d guess most people’s common desires would be focused on communication and roughly be described as ways of creating and sharing professional quality interactive documents, which seems worlds apart from the typical FoC demos focused on helping existing developers with  code editor or debugger features.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g588e3d3aa94",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Steve",
            "real_name": "Steve Dekorte",
            "display_name": "Steve Dekorte",
            "team": "T5TCAFTA9",
            "name": "steve447",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574358709.093500",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=FhGw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m bringing this up because I’ve been wondering what an FoC project focused on increasing global creator productivity would look like. When I say “creator”, I don’t mean just me or other developers. I mean everyone on the planet who wants to create things with computers.\n\nI’d guess most people’s common desires would be focused on communication and roughly be described as ways of creating and sharing professional quality interactive documents, which seems worlds apart from the typical FoC demos focused on helping existing developers with  code editor or debugger features."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UD6EXQVM0",
        "type": "message",
        "ts": "1574546198.113900",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1574546269.000000"
        },
        "client_msg_id": "97f353fc-6a96-4bf6-b049-17d73053f909",
        "text": "It seems to me that we need both (1) better general-purpose languages, which is the popular thing to think about in here, and (2) a big library of functionality that can do a wide variety of stuff, like Wolfram Alpha but open-source. I have this idea of building a web site for crowdsourcing ideas about API design; the idea is to encourage standardization of APIs in various problem domains, both general and specific... I figure users could both submit API designs and reviews of designs. Rather than voting on APIs as merely \"good\" or \"bad\", I think they should be reviewed on several axes like \"easy to use?\", \"flexible?\", \"enables fast\/efficient implementations?\", \"adapts easily to many potential implementations?\"... really good designs are good across many axes.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4a9957508aa",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/e4a9957508aa1bdb16018793cfc1bb40.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0020-72.png",
            "first_name": "",
            "real_name": "David Piepgrass",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "qwertie256",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j1K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems to me that we need both (1) better general-purpose languages, which is the popular thing to think about in here, and (2) a big library of functionality that can do a wide variety of stuff, like Wolfram Alpha but open-source. I have this idea of building a web site for crowdsourcing ideas about API design; the idea is to encourage standardization of APIs in various problem domains, both general and specific... I figure users could both submit API designs and reviews of designs. Rather than voting on APIs as merely \"good\" or \"bad\", I think they should be reviewed on several axes like \"easy to use?\", \"flexible?\", \"enables fast\/efficient implementations?\", \"adapts easily to many potential implementations?\"... really good designs are good across many axes."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1574560133.114400",
        "client_msg_id": "c103fafc-9166-470d-9b2d-544b6ecdfac8",
        "text": "There is a 3rd alternative that was the original intention of the great John Backus, who invented FP after developing FORTRAN. In his original vision for his next general purpose language, he was seeking to enter into an era of interchangeable parts. In such a world programming is a great deal less troublesome; you just snap together components, and can build elaborate systems out of already-tested parts.  At present, the JS world uses npm as their package manager, and you can see the exponential \"drag-in\" where the dependencies grow exponentially and adding some little thing suddenly pulls an ungodly amount of code into your project. Since things depend on other things, there is always an exponential growth curve to a project as it grows, but what matters is the value of the exponent: if it is n^1.1 versus n^2, going to n=1000 means  2000 vs. 1 million, which is 50 times smaller.  In one project i converted a 100k line C program into Modula-2 and it cut the size in half. So much of the differences between languages only show up on larger projects. Just like in the movie Ferrari vs. Ford, in an endurance race of 24 hours the durability of the engine really shows up. It is exceptionally hard for new languages to get an honest evaluation because typically small projects are written in them. In this regard, the Jai project has a big advantage, because it is being tested on a huge game project.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is a 3rd alternative that was the original intention of the great John Backus, who invented FP after developing FORTRAN. In his original vision for his next general purpose language, he was seeking to enter into an era of interchangeable parts. In such a world programming is a great deal less troublesome; you just snap together components, and can build elaborate systems out of already-tested parts.  At present, the JS world uses npm as their package manager, and you can see the exponential \"drag-in\" where the dependencies grow exponentially and adding some little thing suddenly pulls an ungodly amount of code into your project. Since things depend on other things, there is always an exponential growth curve to a project as it grows, but what matters is the value of the exponent: if it is n^1.1 versus n^2, going to n=1000 means  2000 vs. 1 million, which is 50 times smaller.  In one project i converted a 100k line C program into Modula-2 and it cut the size in half. So much of the differences between languages only show up on larger projects. Just like in the movie Ferrari vs. Ford, in an endurance race of 24 hours the durability of the engine really shows up. It is exceptionally hard for new languages to get an honest evaluation because typically small projects are written in them. In this regard, the Jai project has a big advantage, because it is being tested on a huge game project."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBSMEUXAA",
        "type": "message",
        "ts": "1574577813.114800",
        "client_msg_id": "505cf52c-cea3-4e81-b694-f0c8ec645703",
        "text": "<https:\/\/raphlinus.github.io\/ui\/druid\/2019\/11\/22\/reactive-ui.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0edf98a60210",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-09-26\/774747080560_0edf98a60210d3ab07ea_72.jpg",
            "first_name": "",
            "real_name": "Scott Anderson",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "scottan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1574577813.114800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1574719230.175100",
        "reply_users": [
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1574719230.175100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Raph Levien’s blog",
                "title": "Towards a unified theory of reactive UI",
                "title_link": "https:\/\/raphlinus.github.io\/ui\/druid\/2019\/11\/22\/reactive-ui.html",
                "text": "In trying to figure out the best reactive structure for druid, as well as how to communicate that to the world, I’ve been studying a wide range of reactive UI systems. I’ve found an incredible diversity, even though they have fairly consistent goals. This post is an attempt to find common patterns, to characterize the design space as a whole. It will be rough, at some points almost a stream of consciousness. If I had the time and energy, I think it could be expanded into an academic paper. But, for now, perhaps these rough thoughts are interesting to some people working in the space.",
                "fallback": "Raph Levien’s blog: Towards a unified theory of reactive UI",
                "ts": 1574441082,
                "from_url": "https:\/\/raphlinus.github.io\/ui\/druid\/2019\/11\/22\/reactive-ui.html",
                "id": 1,
                "original_url": "https:\/\/raphlinus.github.io\/ui\/druid\/2019\/11\/22\/reactive-ui.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RWp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/raphlinus.github.io\/ui\/druid\/2019\/11\/22\/reactive-ui.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJUQESQ1Z",
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1574581430.115600",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574639740.000000"
        },
        "client_msg_id": "6fa5b1dc-bb34-4a01-b3ba-4ecbbc91c0c9",
        "text": "I retract my previous statement, and hold that sending a sequence of commands to be executed by an RC car is programing, but controlling it in real time (i.e. do what I say as I say it) is *not* programming.\n\nI originally conceded that the difference was too superficial to say they are different. But I think it was actually just a superficial *example* of programming.\n\nIt's not _necessarily_ about whether commands are \"prepared\" or \"batched\" (although that is what qualifies as \"code\"). It's about specifying or altering the the behavior of\/for something else, *rather* than being in direct control as it happens. Otherwise *you* are the one doing the behavior (albeit through some interface).\n\nIt just so happens that the most familiar form of programming (when thought of as such), is to \"script\" the behavior ahead of time, in which case that script is called \"code\".\n\nBut a person (or machine learning AI) can be programmed to behave a certain way through conditioning or +\/- reinforcement -- no \"code\" involved (for the programmer)\n\nAlthough if you go see a play or a musical, people follow a \"script\", and you are given a printout of \"the program\" (here's what will happen, here's who is involved, etc.)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zIB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I retract my previous statement, and hold that sending a sequence of commands to be executed by an RC car is programing, but controlling it in real time (i.e. do what I say as I say it) is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming.\n\nI originally conceded that the difference was too superficial to say they are different. But I think it was actually just a superficial "
                            },
                            {
                                "type": "text",
                                "text": "example",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of programming.\n\nIt's not "
                            },
                            {
                                "type": "text",
                                "text": "necessarily",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about whether commands are \"prepared\" or \"batched\" (although that is what qualifies as \"code\"). It's about specifying or altering the the behavior of\/for something else, "
                            },
                            {
                                "type": "text",
                                "text": "rather",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " than being in direct control as it happens. Otherwise "
                            },
                            {
                                "type": "text",
                                "text": "you",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are the one doing the behavior (albeit through some interface).\n\nIt just so happens that the most familiar form of programming (when thought of as such), is to \"script\" the behavior ahead of time, in which case that script is called \"code\".\n\nBut a person (or machine learning AI) can be programmed to behave a certain way through conditioning or +\/- reinforcement -- no \"code\" involved (for the programmer)\n\nAlthough if you go see a play or a musical, people follow a \"script\", and you are given a printout of \"the program\" (here's what will happen, here's who is involved, etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1574581969.116300",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574582128.000000"
        },
        "client_msg_id": "4c533d25-a18e-48bf-9245-061ad7aa22a0",
        "text": "Maybe that means that movie directors and choreographers are (in a sense) \"programmers\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y2vE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe that means that movie directors and choreographers are (in a sense) \"programmers\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    }
]