[
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564472631.053500",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1564472779.000000"
        },
        "client_msg_id": "594d2573-67ab-4014-b43c-b856136e0207",
        "text": "I am one of the lucky few people alive who got to see John Backus' (IBM inventor of FORTRAN) presentation of his Function language in 1973. The professors left the room shaking their heads saying he was crazy because not being able to update the state of a variable creates a mad hatter's tea party situation where memory is gobbled up while pretending you aren't updating a mutable state. In his case, you are using up a new memory slot and keeping all prior values which is a fairly expensive tradeoff. Crockford has some serious criticisms of FP. It isn't the panacea of the future, and for liberating from the Von Neumann style, one should study Chapel and Parasail languages, both of which handle automatic parallelization. In the case of Parasail it does it on one machine node only, while in the case of Chapel it can handle machine clusters which represents a doubly hard problem; you have a whole rack of multicore machines, how do you harness them? Chapel is like a super Fortran. It is from Cray who have a legacy of handling the toughest problems on the planet.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zYZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am one of the lucky few people alive who got to see John Backus' (IBM inventor of FORTRAN) presentation of his Function language in 1973. The professors left the room shaking their heads saying he was crazy because not being able to update the state of a variable creates a mad hatter's tea party situation where memory is gobbled up while pretending you aren't updating a mutable state. In his case, you are using up a new memory slot and keeping all prior values which is a fairly expensive tradeoff. Crockford has some serious criticisms of FP. It isn't the panacea of the future, and for liberating from the Von Neumann style, one should study Chapel and Parasail languages, both of which handle automatic parallelization. In the case of Parasail it does it on one machine node only, while in the case of Chapel it can handle machine clusters which represents a doubly hard problem; you have a whole rack of multicore machines, how do you harness them? Chapel is like a super Fortran. It is from Cray who have a legacy of handling the toughest problems on the planet."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564473195.053800",
        "client_msg_id": "a6787e7c-ca7b-446a-b1ba-55cc0234bf1b",
        "text": "Category theory and FP is full of obscure jargon which confers great solemnity on people, but from a readability point of view languages like Elm fall very short. They are very hard to understand, and Haskell is also terrible. In the commercial world if you can't transfer the code easily from one team member to another, it will have very poor acceptance. Look at the problems Boeing is having, trying to get their MCAS software accepted by the FAA and airlines. They are losing over a million dollars a day because other people can't verify a fairly simple program is accurate. The airplane has a constantly changing state, and the finite state machine they have programmed has to respond sensibly. Having software be robust is very important, and although the concept of pure functions is a fun one, and allows for easy composition, frankly very little of my code one has to write is composable. I don't take the output of a function and feed it to a long chain of functions very often. So the mathematical wonders of composition are just not that usable a great deal of the time. Most of the code in a graphical interactive product is devoted to handling input, and drawing things, none of which are heavily nested. Lots of graphical constraints, and heuristics for sizing and placement.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aa2j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Category theory and FP is full of obscure jargon which confers great solemnity on people, but from a readability point of view languages like Elm fall very short. They are very hard to understand, and Haskell is also terrible. In the commercial world if you can't transfer the code easily from one team member to another, it will have very poor acceptance. Look at the problems Boeing is having, trying to get their MCAS software accepted by the FAA and airlines. They are losing over a million dollars a day because other people can't verify a fairly simple program is accurate. The airplane has a constantly changing state, and the finite state machine they have programmed has to respond sensibly. Having software be robust is very important, and although the concept of pure functions is a fun one, and allows for easy composition, frankly very little of my code one has to write is composable. I don't take the output of a function and feed it to a long chain of functions very often. So the mathematical wonders of composition are just not that usable a great deal of the time. Most of the code in a graphical interactive product is devoted to handling input, and drawing things, none of which are heavily nested. Lots of graphical constraints, and heuristics for sizing and placement."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1564483972.058900",
        "client_msg_id": "DEE4C424-CEA9-4BD9-BE24-5C297F759033",
        "text": "<@UFB8STN7K> Another person I learned to turn to as a good resource for this kind of question is Kevlin Henney, who I heard first about in this forum. I recommend one of the variations of his talk “Functional Programming You Already Know”, perhaps this one: <https:\/\/www.infoq.com\/presentations\/functional-declarative-style\/>\n\nSlide 60 in this presentation seems like a good, powerful, and practical argument why we at least can't ignore functional programming, because it definitely solves a few problems we've been maneuvering ourselves into with imperative and OOP approaches:\n<https:\/\/www.slideshare.net\/Codemotion\/functional-programming-you-already-know-46496208>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Functional Programming You Already Know",
                "title_link": "https:\/\/www.infoq.com\/presentations\/functional-declarative-style\/",
                "text": "Kevlin Henney examines functional and declarative programming styles from the point of view of coding patterns, little languages and programming techniques already familiar to many programmers.",
                "fallback": "InfoQ: Functional Programming You Already Know",
                "thumb_url": "https:\/\/res.infoq.com\/presentations\/functional-declarative-style\/en\/mediumimage\/Kevbig.JPG",
                "from_url": "https:\/\/www.infoq.com\/presentations\/functional-declarative-style\/",
                "thumb_width": 270,
                "thumb_height": 200,
                "service_icon": "https:\/\/cdn.infoq.com\/statics_s1_20190730-0323\/apple-touch-icon.png",
                "id": 1,
                "original_url": "https:\/\/www.infoq.com\/presentations\/functional-declarative-style\/"
            },
            {
                "title": "Functional Programming You Already Know - Kevlin Henney - Codemotion …",
                "title_link": "https:\/\/www.slideshare.net\/Codemotion\/functional-programming-you-already-know-46496208",
                "text": "From JVM to .NET languages, from minor coding idioms to system-level architectures, functional programming is enjoying a long overdue surge in interest. Functi…",
                "fallback": "Functional Programming You Already Know - Kevlin Henney - Codemotion …",
                "thumb_url": "https:\/\/cdn.slidesharecdn.com\/ss_thumbnails\/functionalprogrammingyoualreadyknow-150331094154-conversion-gate01-thumbnail-4.jpg?cb=1427797881",
                "from_url": "https:\/\/www.slideshare.net\/Codemotion\/functional-programming-you-already-know-46496208",
                "thumb_width": 768,
                "thumb_height": 576,
                "service_icon": "https:\/\/public.slidesharecdn.com\/favicon.ico?d8e2a4ed15",
                "service_name": "slideshare.net",
                "id": 2,
                "original_url": "https:\/\/www.slideshare.net\/Codemotion\/functional-programming-you-already-know-46496208"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7=SS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " Another person I learned to turn to as a good resource for this kind of question is Kevlin Henney, who I heard first about in this forum. I recommend one of the variations of his talk “Functional Programming You Already Know”, perhaps this one: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.infoq.com\/presentations\/functional-declarative-style\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSlide 60 in this presentation seems like a good, powerful, and practical argument why we at least can't ignore functional programming, because it definitely solves a few problems we've been maneuvering ourselves into with imperative and OOP approaches:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.slideshare.net\/Codemotion\/functional-programming-you-already-know-46496208"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564484268.063900",
        "client_msg_id": "1bb60bfa-57ca-4468-9cf0-4d98fee57636",
        "text": "How would you render source code if you weren't tied to a 2D grid of monospace characters? I'd probably start by using a proportional font for all words in the code. I posted an example of this here: <https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688>\nAfter getting used to it, I feel like it's easier to scan the code in that representation. What do you think?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "reply_count": 34,
        "reply_users_count": 14,
        "latest_reply": "1565290057.244300",
        "reply_users": [
            "UJ6LDMMN0",
            "U5STGTB3J",
            "UJG7QQQJW",
            "UA14TGLTC",
            "UAL7940NM",
            "UFZFETUH1",
            "UE0ETTCG7",
            "UHWC9PXBL",
            "UEQ6M68H0",
            "UFEQUBNNT",
            "UGWUJUZHT",
            "ULM3U6275",
            "UD31LGQKB",
            "UKFSDUCH2"
        ],
        "replies": [
            {
                "user": "UJ6LDMMN0",
                "ts": "1564484502.064200"
            },
            {
                "user": "UJ6LDMMN0",
                "ts": "1564486903.064400"
            },
            {
                "user": "U5STGTB3J",
                "ts": "1564487137.066300"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564491534.066700"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1564492414.067200"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564495417.072300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1564496683.072900"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564497573.073100"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564497702.073300"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1564499400.074100"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564499435.074300"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564499472.074500"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564499508.074700"
            },
            {
                "user": "UFZFETUH1",
                "ts": "1564499680.075100"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564499781.075300"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564499864.075500"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1564500483.075700"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564500703.076100"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1564501677.076300"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564501755.076500"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564501848.076700"
            },
            {
                "user": "UE0ETTCG7",
                "ts": "1564502009.076900"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564504536.078000"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564504722.078300"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564520389.082500"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1564543995.098100"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1564546418.098500"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564554222.100700"
            },
            {
                "user": "UGWUJUZHT",
                "ts": "1564571488.112300"
            },
            {
                "user": "UAL7940NM",
                "ts": "1564575500.112600"
            },
            {
                "user": "ULM3U6275",
                "ts": "1564698550.146300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1564775137.169900"
            },
            {
                "user": "UD31LGQKB",
                "ts": "1564843769.202800"
            },
            {
                "user": "UKFSDUCH2",
                "ts": "1565290057.244300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/FKohlgrueber|@FKohlgrueber>: Challenge: Use HTML \/ CSS to make a random code sample more readable. My first experiment (see second screenshot): using a proportional font for \"words\" in the code.\nFont is <https:\/\/twitter.com\/FiraCode|@FiraCode> \/ Sans, experiment source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-8e1eh> <https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png>",
                "ts": 1564483318,
                "author_name": "Felix Kohlgrüber",
                "author_link": "https:\/\/twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/980166265372401664\/FgXL4PR5_normal.jpg",
                "author_subname": "@FKohlgrueber",
                "text": "Challenge: Use HTML \/ CSS to make a random code sample more readable. My first experiment (see second screenshot): using a proportional font for \"words\" in the code.\nFont is <https:\/\/twitter.com\/FiraCode|@FiraCode> \/ Sans, experiment source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-8e1eh> <https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png",
                "image_width": 1068,
                "image_height": 849,
                "image_bytes": 102384,
                "id": 1,
                "original_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            },
            {
                "text": "<https:\/\/pbs.twimg.com\/media\/EAt6-I7XYAIvhvW.jpg>",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EAt6-I7XYAIvhvW.jpg",
                "image_width": 1068,
                "image_height": 849,
                "image_bytes": 63629,
                "id": 2
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YkMJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How would you render source code if you weren't tied to a 2D grid of monospace characters? I'd probably start by using a proportional font for all words in the code. I posted an example of this here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688"
                            },
                            {
                                "type": "text",
                                "text": "\nAfter getting used to it, I feel like it's easier to scan the code in that representation. What do you think?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1564484502.064200",
        "client_msg_id": "fa14df4c-e213-4ba5-a4b9-de7b03a0368e",
        "text": "I agree with you, I find it more readable! In your example I find nothing that is better in monospace.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fqsv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with you, I find it more readable! In your example I find nothing that is better in monospace."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1564486903.064400",
        "client_msg_id": "6034028b-949a-4cef-b779-cdec9c2051a8",
        "text": "Here is my contribution: <https:\/\/twitter.com\/ogadaki\/status\/1156167536196640769>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/ogadaki|@ogadaki>: <https:\/\/twitter.com\/FKohlgrueber|@FKohlgrueber> <https:\/\/twitter.com\/FiraCode|@FiraCode> Here is my attempt: contrast comment contents to make them more visible. Use a \"sticky note\" visual metaphor as they are here to remind information to readers of the code. Also, shadow the \"\/\/\" as it no more conveys any useful information. Source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-sbdqj> <https:\/\/pbs.twimg.com\/media\/EAuIPm-WkAEj9zO.jpg>",
                "ts": 1564486795,
                "author_name": "nicolas decoster",
                "author_link": "https:\/\/twitter.com\/ogadaki\/status\/1156167536196640769",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/573162928913833986\/mNWlOcuk_normal.png",
                "author_subname": "@ogadaki",
                "text": "<https:\/\/twitter.com\/FKohlgrueber|@FKohlgrueber> <https:\/\/twitter.com\/FiraCode|@FiraCode> Here is my attempt: contrast comment contents to make them more visible. Use a \"sticky note\" visual metaphor as they are here to remind information to readers of the code. Also, shadow the \"\/\/\" as it no more conveys any useful information. Source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-sbdqj> <https:\/\/pbs.twimg.com\/media\/EAuIPm-WkAEj9zO.jpg>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/ogadaki\/status\/1156167536196640769",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EAuIPm-WkAEj9zO.jpg",
                "image_width": 834,
                "image_height": 914,
                "image_bytes": 61341,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/ogadaki\/status\/1156167536196640769",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+R0=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is my contribution: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/ogadaki\/status\/1156167536196640769"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1564487137.066300",
        "client_msg_id": "6F7C0D81-0876-49FA-85E9-2624244D11B7",
        "text": "Hey, are you two sneakily making the point that “textual” is just a subset of “visual” and we’ve been using visual programming languages all along…? :face_with_raised_eyebrow::laughing:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DX2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, are you two sneakily making the point that “textual” is just a subset of “visual” and we’ve been using visual programming languages all along…? "
                            },
                            {
                                "type": "emoji",
                                "name": "face_with_raised_eyebrow",
                                "unicode": "1f928"
                            },
                            {
                                "type": "emoji",
                                "name": "laughing",
                                "unicode": "1f606"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "ULADE0N0J",
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 4
            },
            {
                "name": "upside_down_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "<https:\/\/syvis.surge.sh\/ErZoPhsMTcDvGT9pZswo\/>\n\n:grin:",
        "files": [
            {
                "id": "FLW9QL0CD",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UJG7QQQJW",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kY8wD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/syvis.surge.sh\/ErZoPhsMTcDvGT9pZswo\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1564491534.066700",
        "client_msg_id": "4421ed30-286b-4f29-8b2f-04db31e85ade",
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "UCUSW7WVD"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1564492414.067200",
        "client_msg_id": "12ff0b46-15c1-4c00-a551-d7df34d4ea18",
        "text": "Verdana has been my programming font of choice for some time.  #what-is-Smalltalk-may-never-die",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kEzVr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Verdana has been my programming font of choice for some time.  #what-is-Smalltalk-may-never-die"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULCPYMFD2",
        "type": "message",
        "ts": "1564493997.072100",
        "client_msg_id": "176c8b88-38af-4762-97a5-295ec6a04cff",
        "text": "I was planning on posting this but <@UCUSW7WVD>  query for \"sourceless programming\" is a good reason.\nPlease check out (still in Beta) <http:\/\/www.kodou.io|www.kodou.io> for an example of an API-first programming model with no downloaded source or dependencies. The Documentation page describes it.\nWe are looking for feedback. Accounts only by request at this time.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bcd38f3e85ea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-12\/681890001923_bcd38f3e85ea890ae2bc_72.jpg",
            "first_name": "Yves",
            "real_name": "Yves Jean",
            "display_name": "Yves Jean",
            "team": "T5TCAFTA9",
            "name": "yves",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564493997.072100",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1564516211.081400",
        "reply_users": [
            "UCUSW7WVD",
            "ULCPYMFD2"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1564514348.080400"
            },
            {
                "user": "ULCPYMFD2",
                "ts": "1564516211.081400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+h3UR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was planning on posting this but "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "  query for \"sourceless programming\" is a good reason.\nPlease check out (still in Beta) "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.kodou.io",
                                "text": "www.kodou.io"
                            },
                            {
                                "type": "text",
                                "text": " for an example of an API-first programming model with no downloaded source or dependencies. The Documentation page describes it.\nWe are looking for feedback. Accounts only by request at this time."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564495417.072300",
        "client_msg_id": "c1494c42-67c8-4843-84e3-58d29bb8b568",
        "text": "My point is that \"textual\" is more than what our 70's terminals and text editors support currently. Websites and word processors have shown more advanced textual systems and it's time to make similar progress in programming tools.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rl+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My point is that \"textual\" is more than what our 70's terminals and text editors support currently. Websites and word processors have shown more advanced textual systems and it's time to make similar progress in programming tools."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1564496683.072900",
        "client_msg_id": "2c2c8adf-30b9-47ce-a3a0-a99425ec3d85",
        "text": "Though getting Word to not have weird hidden formatting oddities in a shared document?  It's not a thing I'm managed to accomplish.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+qy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though getting Word to not have weird hidden formatting oddities in a shared document?  It's not a thing I'm managed to accomplish."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564497573.073100",
        "client_msg_id": "2885d9b9-7645-44e1-9bca-7bcab6b5e658",
        "text": "<@UA14TGLTC> this could be solved by separating the view and edit representation (think LaTeX)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bt+dD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " this could be solved by separating the view and edit representation (think LaTeX)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564497702.073300",
        "client_msg_id": "295b1e57-f52c-4eff-9239-f0d4ce9a3c74",
        "text": "Or simply by doing formatting automatically using a code formatter like tool while editing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Sb3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or simply by doing formatting automatically using a code formatter like tool while editing"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1564498172.073500",
        "client_msg_id": "cb811876-95fa-493c-90dd-19e942924b45",
        "text": "According to the following secondary source, Chuck Moore invented sourceless programming as a simpler alternative to Forth, but later realized that it had been a mistake. <https:\/\/news.ycombinator.com\/item?id=2574271>\n\nHere's a primary source: \"A few years ago I gave up on Forth, it was too complicated. It was about the time of the work of the standard committee and I wanted something simple. I abandoned source and used a decompiler to view the object code. It did not really work.\" <http:\/\/www.ultratechnology.com\/color4th.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "attachments": [
            {
                "title": "Color Forth",
                "title_link": "http:\/\/www.ultratechnology.com\/color4th.html",
                "text": "Chuck Moore's presentation on his Color Forth from 1997.",
                "fallback": "Color Forth",
                "from_url": "http:\/\/www.ultratechnology.com\/color4th.html",
                "service_icon": "http:\/\/www.ultratechnology.com\/favicon.ico",
                "service_name": "ultratechnology.com",
                "id": 1,
                "original_url": "http:\/\/www.ultratechnology.com\/color4th.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U5=U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "According to the following secondary source, Chuck Moore invented sourceless programming as a simpler alternative to Forth, but later realized that it had been a mistake. "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/news.ycombinator.com\/item?id=2574271"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHere's a primary source: \"A few years ago I gave up on Forth, it was too complicated. It was about the time of the work of the standard committee and I wanted something simple. I abandoned source and used a decompiler to view the object code. It did not really work.\" "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.ultratechnology.com\/color4th.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564498228.073900",
        "client_msg_id": "8f33d567-b114-4a87-85f3-60f1453b52fa",
        "text": "Still a fascinating mistake to make :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kC7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Still a fascinating mistake to make "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1564499400.074100",
        "client_msg_id": "b77e86b9-7da0-4656-98c7-cf5a74c27bd2",
        "text": "<@UJG7QQQJW> Syvis looks interesting. Is it an open source project? I can't find any info about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "svXm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJG7QQQJW"
                            },
                            {
                                "type": "text",
                                "text": " Syvis looks interesting. Is it an open source project? I can't find any info about it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564499435.074300",
        "client_msg_id": "27fa640f-d161-4416-b5d5-5677b48319f8",
        "text": "It’s supposed to be open source. Haven’t found the time to release it yet",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/qQXb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’s supposed to be open source. Haven’t found the time to release it yet"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564499472.074500",
        "client_msg_id": "9dc8a370-33e5-41bb-999e-25c4cd0f4a3f",
        "text": "Will post it in <#CCL5VVBAN|share-your-work> when it’s published",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BR=d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will post it in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " when it’s published"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UFZFETUH1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564499508.074700",
        "client_msg_id": "01f6fb1b-8375-4f6b-807e-defa1d7ba38b",
        "text": "I already wrote a little about it there: <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1558257976057900>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "attachments": [
            {
                "from_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1558257976057900",
                "fallback": "[May 19th, 2019 2:26 AM] futureofcoding: Hi folks!\n\nI developed following webapp a few years ago and although I was (and still am) quite excited about the possibilities, I never released it. I couldn't imagine the programming community at large get excited about it. Also I was sick of preaching things nobody else seems to care about.\n\nBut now that I discovered this community, maybe a few of you might like it:\n\n<https:\/\/syvis.surge.sh\/ErZoPhsMTcDvGT9pZswo\/>\nFeel free to try it out with other JavaScript code. It completely runs in your Browser!\n\nMy thought process was that -- despite their flaws -- text editors are a quite powerful input method once you mastered the keyboard.\nConsuming \/ investigating code in a text editor, however, not so. Our syntax highlighting, code style guides, indentation based code, etc. are just a desperate attempt to mitigate this.\n\nWhat if coding was more like writing a LaTeX paper? The LaTeX code is good to build the document, and for reviewing and distributing it, the rendered PDF is much better suited.\n\nNext steps could be:\n\n- Custom themes, so that you can render the code to you liking\n- Enable interactive editing for minor things like changing a number or a  string, reordering parts, …\n\nHere is another abstract from a slightly different angle:\n\nIn most programming languages\nthe semantic meaning of a program is disconnected from\nthe formatting of the code and the naming of variables and keywords.\nThis means semantically equivalent code can be written in a vastly\ndifferent textual representations.\nThis poses problems in terms of readability and understandability\nof code.\nEven minor modifications of punctuation or formatting in comparison to\na developers familiar style can drastically decrease the performance.\nIn order to mitigate these problems I propose to visualize code\nin a graphical and deterministic way.\nInstead of relying on the author of the code to format it in a acceptable\nmanner, each developer can choose a visualization of their liking.\nThis has the potential to decrease the error rate and\nincrease the development speed of programmers.\n\nLooking foward to you feedback! :grin:",
                "ts": "1558257976.057900",
                "author_id": "UJG7QQQJW",
                "author_subname": "Adrian Sieber",
                "channel_id": "CCL5VVBAN",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Hi folks!\n\nI developed following webapp a few years ago and although I was (and still am) quite excited about the possibilities, I never released it. I couldn't imagine the programming community at large get excited about it. Also I was sick of preaching things nobody else seems to care about.\n\nBut now that I discovered this community, maybe a few of you might like it:\n\n<https:\/\/syvis.surge.sh\/ErZoPhsMTcDvGT9pZswo\/>\nFeel free to try it out with other JavaScript code. It completely runs in your Browser!\n\nMy thought process was that -- despite their flaws -- text editors are a quite powerful input method once you mastered the keyboard.\nConsuming \/ investigating code in a text editor, however, not so. Our syntax highlighting, code style guides, indentation based code, etc. are just a desperate attempt to mitigate this.\n\nWhat if coding was more like writing a LaTeX paper? The LaTeX code is good to build the document, and for reviewing and distributing it, the rendered PDF is much better suited.\n\nNext steps could be:\n\n- Custom themes, so that you can render the code to you liking\n- Enable interactive editing for minor things like changing a number or a  string, reordering parts, …\n\nHere is another abstract from a slightly different angle:\n\nIn most programming languages\nthe semantic meaning of a program is disconnected from\nthe formatting of the code and the naming of variables and keywords.\nThis means semantically equivalent code can be written in a vastly\ndifferent textual representations.\nThis poses problems in terms of readability and understandability\nof code.\nEven minor modifications of punctuation or formatting in comparison to\na developers familiar style can drastically decrease the performance.\nIn order to mitigate these problems I propose to visualize code\nin a graphical and deterministic way.\nInstead of relying on the author of the code to format it in a acceptable\nmanner, each developer can choose a visualization of their liking.\nThis has the potential to decrease the error rate and\nincrease the development speed of programmers.\n\nLooking foward to you feedback! :grin:",
                "author_name": "Adrian Sieber",
                "author_link": "https:\/\/futureofcoding.slack.com\/team\/UJG7QQQJW",
                "author_icon": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1558257976057900",
                "footer": "Thread in Slack Conversation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/VrDP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I already wrote a little about it there: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1558257976057900"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFZFETUH1",
        "type": "message",
        "ts": "1564499680.075100",
        "client_msg_id": "107b33fc-625f-44ab-8a3d-ef5affe12deb",
        "text": "Weirdly, perhaps, I'm especially interested in where you drew your inspiration from in terms of visual style, that's why I was looking for a project page :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ga72dfb84ee3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/8a72dfb84ee31009c2810f7f590d4ff8.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "",
            "real_name": "Philipp Krüger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "philipp.krueger1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7mW9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Weirdly, perhaps, I'm especially interested in where you drew your inspiration from in terms of visual style, that's why I was looking for a project page "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564499781.075300",
        "client_msg_id": "ba56b4fd-494f-406f-8d72-512b446ee009",
        "text": "The design is my own. Not sure If i was inspired by anything in particular…",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UwAU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The design is my own. Not sure If i was inspired by anything in particular…"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564499864.075500",
        "client_msg_id": "da9eda0e-8434-47c6-b66a-0c63a2ee8e45",
        "text": "Someone mentioned <https:\/\/www.greenfoot.org\/frames\/>, which looks eerily similar. But I hadn’t known it before, so it was definitely not an inspiration :sweat_smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g8e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Someone mentioned "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.greenfoot.org\/frames\/"
                            },
                            {
                                "type": "text",
                                "text": ", which looks eerily similar. But I hadn’t known it before, so it was definitely not an inspiration "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "TextMate uses mixing fonts to great effect in their Markdown rendering, one of their best tricks is using multiple font sizes for things like headers. Here's an image comparing TextMate and Atom's Markdown rendering",
        "files": [
            {
                "id": "FLK3W5803",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UE0ETTCG7",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZvE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "TextMate uses mixing fonts to great effect in their Markdown rendering, one of their best tricks is using multiple font sizes for things like headers. Here's an image comparing TextMate and Atom's Markdown rendering"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1564500483.075700",
        "client_msg_id": "6146558b-c350-4ce0-a663-f3c78a9bfc08",
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564500703.076100",
        "client_msg_id": "c5e2e0ef-9f2b-4f32-8eec-98d44d5e8661",
        "text": "I had been using that in the past, but I’m ambivalent. Markdown was explicitly designed to be readable as plain text. If people start formatting markdown shitty (e.g. more than 80 characters \/ line) just because it looked good in their editor, I get really annoyed ^^",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CN0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had been using that in the past, but I’m ambivalent. Markdown was explicitly designed to be readable as plain text. If people start formatting markdown shitty (e.g. more than 80 characters \/ line) just because it looked good in their editor, I get really annoyed ^^"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1564501677.076300",
        "client_msg_id": "26d8a780-73f1-4890-ab33-16da5d12f8ff",
        "text": "Ha, doesn't that apply to everything in this thread? :slightly_smiling_face: I'd consider plain text a file format, not a specific rendering (otherwise wouldn't syntax highlighted code not be plain text?) If you want to say \"Markdown was designed to look good in Monospace fonts without colors or weights\" then you can, but that seems awfully dogmatic to me personally. The beauty of plain text as a format everyone can use the tools they want, with the features they want, and we can all read and edit the same file!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "99HT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha, doesn't that apply to everything in this thread? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " I'd consider plain text a file format, not a specific rendering (otherwise wouldn't syntax highlighted code not be plain text?) If you want to say \"Markdown was designed to look good in Monospace fonts without colors or weights\" then you can, but that seems awfully dogmatic to me personally. The beauty of plain text as a format everyone can use the tools they want, with the features they want, and we can all read and edit the same file!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564501755.076500",
        "client_msg_id": "118c6413-bb24-4aff-be4b-1ef42ca8ceb1",
        "text": "Sorry, but I’m awfully dogmatic :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "70d+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, but I’m awfully dogmatic "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJG7QQQJW",
        "type": "message",
        "ts": "1564501848.076700",
        "client_msg_id": "6ca7f77b-c993-42b7-a60b-7849e1350294",
        "text": "That’s why I’m in favor of storing the AST. Then we can finally all agree that this is definitely not meant to be edited as is =P",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6028a1c7a821",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-05-19\/639818983280_6028a1c7a82161b81120_72.jpg",
            "first_name": "Adrian",
            "real_name": "Adrian Sieber",
            "display_name": "Adrian Sieber",
            "team": "T5TCAFTA9",
            "name": "futureofcoding",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V93+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That’s why I’m in favor of storing the AST. Then we can finally all agree that this is definitely not meant to be edited as is =P"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE0ETTCG7",
        "type": "message",
        "ts": "1564502009.076900",
        "client_msg_id": "b4525366-9bed-43eb-8c63-9186ec9bae70",
        "text": "Totally fair enough :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8d5fa305f272",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-09-24\/1392332871012_8d5fa305f272f9d0c9e3_72.jpg",
            "first_name": "Roben",
            "real_name": "Roben Kleene",
            "display_name": "robenkleene",
            "team": "T5TCAFTA9",
            "name": "services",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KA1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally fair enough "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1564503741.077100",
        "client_msg_id": "ced727f2-966d-458f-84e6-896f93f112de",
        "text": "there’s a (fairly confusing) connection here with a bunch of functional programming concepts like hylomorphisms\/recursion schemes and origami programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564439950.050500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vXj5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there’s a (fairly confusing) connection here with a bunch of functional programming concepts like hylomorphisms\/recursion schemes and origami programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1564503796.077300",
        "client_msg_id": "a948b642-d5b9-4071-9f3d-7181d2bf993e",
        "text": "eg <https:\/\/www.cs.ox.ac.uk\/jeremy.gibbons\/publications\/origami.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564439950.050500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hdp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "eg "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.cs.ox.ac.uk\/jeremy.gibbons\/publications\/origami.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1564504276.077500",
        "client_msg_id": "1f411b00-aaa5-49d5-8dc6-ad30bcc99c37",
        "text": "this looks like an ok historical account except for the horrendous formatting and contrast: <https:\/\/flagxor.com\/article\/source-code>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Q6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this looks like an ok historical account except for the horrendous formatting and contrast: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/flagxor.com\/article\/source-code"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1564504536.078000",
        "client_msg_id": "e4e63619-c614-4240-8135-3e4798e744bf",
        "text": "paging <@UD31LGQKB> since fructure takes this idea one step further: <https:\/\/www.youtube.com\/watch?v=CnbVCNIh1NA>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "(ninth RacketCon): Andrew Blinn – Fructure: A Structured Editing Engine in Racket",
                "title_link": "https:\/\/www.youtube.com\/watch?v=CnbVCNIh1NA",
                "author_name": "Racket Lang",
                "author_link": "https:\/\/www.youtube.com\/user\/racketlang",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/CnbVCNIh1NA\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: (ninth RacketCon): Andrew Blinn – Fructure: A Structured Editing Engine in Racket",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/CnbVCNIh1NA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=CnbVCNIh1NA",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=CnbVCNIh1NA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Coaus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "paging "
                            },
                            {
                                "type": "user",
                                "user_id": "UD31LGQKB"
                            },
                            {
                                "type": "text",
                                "text": " since fructure takes this idea one step further: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=CnbVCNIh1NA"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1564504722.078300",
        "client_msg_id": "b363b0d6-76f8-4719-ba17-397ef0691074",
        "text": "also see tiledtext: <http:\/\/www.tiledtext.com\/projects\/tiledtext>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zuphl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also see tiledtext: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.tiledtext.com\/projects\/tiledtext"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564507053.078600",
        "client_msg_id": "a156f17a-edf7-44d8-89ff-94deefedb9f9",
        "text": "From <@UAVCC2X70>'s link:\n\n&gt;Suppose the idea is to drop anything and start from scratch. Forth will be your friend in such a situation. Forth forces the programmer to invent everything.. And even [if] a library is available.  a real Forth developer will ignore it and writes his own library which is simpler.\n\nI said something similar a couple of years ago (<https:\/\/plforums.org\/practice\/minimal-features-required-for-an-extensible-language#post_65>):\n\n&gt;Forth doesn't seem to be a write-once language\/stack. But it does feel like a solipsistic stack, with everyone working in their own little private universe.\n\nThe tension we're both seeing is between two incompatible ways of programming:\n\n1. Rely on code from lots of strangers.\n2. Rely on nobody.\n\nMy synthesis: ignore both :smile: There's a third way, and it's the way that I think we should all pursue. Call it the _Amish_ way:\n\n3. Rely on code from a small number of very carefully curated people.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/DIQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": "'s link:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Suppose the idea is to drop anything and start from scratch. Forth will be your friend in such a situation. Forth forces the programmer to invent everything.. And even [if] a library is available.  a real Forth developer will ignore it and writes his own library which is simpler."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI said something similar a couple of years ago ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/plforums.org\/practice\/minimal-features-required-for-an-extensible-language#post_65"
                            },
                            {
                                "type": "text",
                                "text": "):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Forth doesn't seem to be a write-once language\/stack. But it does feel like a solipsistic stack, with everyone working in their own little private universe."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe tension we're both seeing is between two incompatible ways of programming:\n\n1. Rely on code from lots of strangers.\n2. Rely on nobody.\n\nMy synthesis: ignore both "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " There's a third way, and it's the way that I think we should all pursue. Call it the "
                            },
                            {
                                "type": "text",
                                "text": "Amish",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " way:\n\n3. Rely on code from a small number of very carefully curated people."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564514348.080400",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1564514697.000000"
        },
        "client_msg_id": "e8c2aaca-6176-4fa6-aaef-e9c8e3451ad3",
        "text": "How long have you been working on it? Has a certain baseline level of polish that is great.\n\nThis isn't quite what the \"sourceless programming\" discussion is about. Still separately interesting.\n\nI didn't find the initial carousel very illuminating. But <https:\/\/docs.kodou.io> was helpful.\n\nI have a philosophical objection to this whole endeavor. Code isn't some finite set of doors behind which you find great working functions. Code is more like Borges's infinite library (<https:\/\/maskofreason.files.wordpress.com\/2011\/02\/the-library-of-babel-by-jorge-luis-borges.pdf>), where 'good' functions are surrounded by all combinations of bugs, incoherence and malice. Don't worry about it for now, but maybe save my comment in a folder titled \"ideas to consider when planning the next pivot\" :slightly_smiling_face:\n\nEven if you managed somehow to focus only on 'good' functions, the value of a function depends on its environment. Based on <https:\/\/docs.kodou.io\/docs\/workflows>, it sounds like each of your functions lives in a hermetically sealed environment. That implies that they're pure functions without side effects. Do you have some way to ensure that the only functions you expose are pure ones?\n\nThe links at the bottom of the docs page are broken. Ah, I click on 'get started' (<https:\/\/docs.kodou.io\/docs\/home\/>) and then the links on the left work.\n\nI'm curious to see an example of a failed call. Say I call redis's `hex_to_int` with two arguments, or an argument of the wrong type. What does the response look like?\n\nFrom <https:\/\/docs.kodou.io\/docs\/code_samples> it looks like you can query not  just specific functions in specific codebases but also just run a REPL for arbitrary languages. But I don't see how it replaces DevOps, since I have to specify what dependencies I want. Don't I need to specify the version of `numpy` and so on? At that point this feels like just a different syntax for talking to Python.\n\nOne problem your customers will almost immediately run into is mismatches between functions from different codebases. Say you have a function that emits a list of points for a line, and another function that intersects lines. One may represent points as tuples and the other as structs. Similarly you will see code in different repos use arrays of structs vs structs of arrays for the same tasks.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564493997.072100",
        "parent_user_id": "ULCPYMFD2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WKb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How long have you been working on it? Has a certain baseline level of polish that is great.\n\nThis isn't quite what the \"sourceless programming\" discussion is about. Still separately interesting.\n\nI didn't find the initial carousel very illuminating. But "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.kodou.io"
                            },
                            {
                                "type": "text",
                                "text": " was helpful.\n\nI have a philosophical objection to this whole endeavor. Code isn't some finite set of doors behind which you find great working functions. Code is more like Borges's infinite library ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/maskofreason.files.wordpress.com\/2011\/02\/the-library-of-babel-by-jorge-luis-borges.pdf"
                            },
                            {
                                "type": "text",
                                "text": "), where 'good' functions are surrounded by all combinations of bugs, incoherence and malice. Don't worry about it for now, but maybe save my comment in a folder titled \"ideas to consider when planning the next pivot\" "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEven if you managed somehow to focus only on 'good' functions, the value of a function depends on its environment. Based on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.kodou.io\/docs\/workflows"
                            },
                            {
                                "type": "text",
                                "text": ", it sounds like each of your functions lives in a hermetically sealed environment. That implies that they're pure functions without side effects. Do you have some way to ensure that the only functions you expose are pure ones?\n\nThe links at the bottom of the docs page are broken. Ah, I click on 'get started' ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.kodou.io\/docs\/home\/"
                            },
                            {
                                "type": "text",
                                "text": ") and then the links on the left work.\n\nI'm curious to see an example of a failed call. Say I call redis's "
                            },
                            {
                                "type": "text",
                                "text": "hex_to_int",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with two arguments, or an argument of the wrong type. What does the response look like?\n\nFrom "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/docs.kodou.io\/docs\/code_samples"
                            },
                            {
                                "type": "text",
                                "text": " it looks like you can query not  just specific functions in specific codebases but also just run a REPL for arbitrary languages. But I don't see how it replaces DevOps, since I have to specify what dependencies I want. Don't I need to specify the version of "
                            },
                            {
                                "type": "text",
                                "text": "numpy",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and so on? At that point this feels like just a different syntax for talking to Python.\n\nOne problem your customers will almost immediately run into is mismatches between functions from different codebases. Say you have a function that emits a list of points for a line, and another function that intersects lines. One may represent points as tuples and the other as structs. Similarly you will see code in different repos use arrays of structs vs structs of arrays for the same tasks."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1564515330.081200",
        "client_msg_id": "4f28aa52-a6bf-4e53-9060-298e120812e0",
        "text": "Thanks for the responses everyone! I’ll link my course notes here once they’re done if anyone is interested.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mg0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the responses everyone! I’ll link my course notes here once they’re done if anyone is interested."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULCPYMFD2",
        "type": "message",
        "ts": "1564516211.081400",
        "edited": {
            "user": "ULCPYMFD2",
            "ts": "1564516535.000000"
        },
        "client_msg_id": "a6e698c2-791c-4d15-a5a1-18b20fc032f1",
        "text": "Hey, thanks for taking the time to look and give your feedback. Yes, this took a few years.\n\nThe <http:\/\/koduo.io|koduo.io> ideas extends our usual use of functions from the Operating System (better-be-excellent functions), common Libraries (again better-be-excellent), and APIs (excellent-but-sometimes things go wrong due to the network or something else).\n\nYes, you can find \"great\" functions but you still need to know that they do what you want. What makes this highly probable is we live in a post-open-source world where engineers have learned to write as if many people will look at it. Code is either documented at the source or through usage by others.\n\nSo you are right that users can't go only by the name and argument types. They must either check the documentation or follow what other used it for. This is just like using a Python\/whatever library.\n\nThe DevOps is replaced because you can compose whatever you want without thinking of the deployment or infrastructure. It complements your existing infrastructure, whether that is a web browser or server.\n\nAlso, it is useful to think of the functions as being disassembled from the repository and isolated, yet easily reassembled into the whole, if desired. Like a binaries level AST.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bcd38f3e85ea",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-12\/681890001923_bcd38f3e85ea890ae2bc_72.jpg",
            "first_name": "Yves",
            "real_name": "Yves Jean",
            "display_name": "Yves Jean",
            "team": "T5TCAFTA9",
            "name": "yves",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564493997.072100",
        "parent_user_id": "ULCPYMFD2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jssy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, thanks for taking the time to look and give your feedback. Yes, this took a few years.\n\nThe "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/koduo.io",
                                "text": "koduo.io"
                            },
                            {
                                "type": "text",
                                "text": " ideas extends our usual use of functions from the Operating System (better-be-excellent functions), common Libraries (again better-be-excellent), and APIs (excellent-but-sometimes things go wrong due to the network or something else).\n\nYes, you can find \"great\" functions but you still need to know that they do what you want. What makes this highly probable is we live in a post-open-source world where engineers have learned to write as if many people will look at it. Code is either documented at the source or through usage by others.\n\nSo you are right that users can't go only by the name and argument types. They must either check the documentation or follow what other used it for. This is just like using a Python\/whatever library.\n\nThe DevOps is replaced because you can compose whatever you want without thinking of the deployment or infrastructure. It complements your existing infrastructure, whether that is a web browser or server.\n\nAlso, it is useful to think of the functions as being disassembled from the repository and isolated, yet easily reassembled into the whole, if desired. Like a binaries level AST."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJPHQ8Z3N",
        "type": "message",
        "ts": "1564519351.082300",
        "client_msg_id": "4de04fdc-9bf2-4d8e-926c-b0f579a7f314",
        "text": "There's a lot to learn from audio applications in terms of interactive editing <https:\/\/www.youtube.com\/watch?time_continue=185&amp;v=mfwB3_oCumM>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "geb6636f344e",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/deb6636f344e6071fd9fe70724825ac6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Sébastien",
            "real_name": "Sébastien",
            "display_name": "Sébastien",
            "team": "T5TCAFTA9",
            "name": "sebastien.pierre",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564519351.082300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1564568611.101900",
        "reply_users": [
            "ULADE0N0J",
            "UJG7QQQJW"
        ],
        "replies": [
            {
                "user": "ULADE0N0J",
                "ts": "1564529262.092000"
            },
            {
                "user": "UJG7QQQJW",
                "ts": "1564568611.101900"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Phase III - Steps &amp; Crossfader - Modulat (Signal) by Chaos Culture",
                "title_link": "https:\/\/www.youtube.com\/watch?time_continue=185&amp;v=mfwB3_oCumM",
                "author_name": "Isotonik Studios",
                "author_link": "https:\/\/www.youtube.com\/user\/S4racen",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/mfwB3_oCumM\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Phase III - Steps & Crossfader - Modulat (Signal) by Chaos Culture",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/mfwB3_oCumM?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?time_continue=185&amp;v=mfwB3_oCumM",
                "service_icon": "https:\/\/a.slack-edge.com\/2089\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?time_continue=185&amp;v=mfwB3_oCumM"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W7SKu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a lot to learn from audio applications in terms of interactive editing "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?time_continue=185&amp;v=mfwB3_oCumM",
                                "text": "https:\/\/www.youtube.com\/watch?time_continue=185&v=mfwB3_oCumM"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULADE0N0J",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564520389.082500",
        "client_msg_id": "bf54afed-8f54-4273-adef-66540a8250d4",
        "text": "<@UHWC9PXBL> I know both projects and I'm interested to see where they'll go in the future. My current hypothesis is that standard text editing is actually a really powerful input method, both because it consists of only a few primitive operations and because people are used to it already. Generations of structure editors have failed to become mainstream and I think that a big factor for that is that the interaction (while being really clever and conforming to the inherent structure of the code) isn't intuitive \/ primitive enough to not stand in the programmer's way. That's why I'm currently exploring which features of structure editors (e.g. advanced rendering) can be used in an editor while keeping the interaction close to what users know already.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=+d7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I know both projects and I'm interested to see where they'll go in the future. My current hypothesis is that standard text editing is actually a really powerful input method, both because it consists of only a few primitive operations and because people are used to it already. Generations of structure editors have failed to become mainstream and I think that a big factor for that is that the interaction (while being really clever and conforming to the inherent structure of the code) isn't intuitive \/ primitive enough to not stand in the programmer's way. That's why I'm currently exploring which features of structure editors (e.g. advanced rendering) can be used in an editor while keeping the interaction close to what users know already."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564521516.083000",
        "client_msg_id": "4756F76F-790E-4D8D-8E19-0C529A05801F",
        "text": "Thanks! Will check out!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564439950.050500",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aeZFy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! Will check out!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564521956.083200",
        "client_msg_id": "d1a80f5f-6e64-4493-bbe9-97c70c7a9b47",
        "text": "The article I shared implies that \"sourceless\" means to not use any pre-existing code or runtime or anything.\n\nBut it sounds like Charles Moore used that to refer to working with FORTH code directly in its machine executable form, with no intermediate representation in between writing and running. ... I have a guess as to what he might have been up to with that, but I'll have to come back to this later.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uiX2V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The article I shared implies that \"sourceless\" means to not use any pre-existing code or runtime or anything.\n\nBut it sounds like Charles Moore used that to refer to working with FORTH code directly in its machine executable form, with no intermediate representation in between writing and running. ... I have a guess as to what he might have been up to with that, but I'll have to come back to this later."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1564522217.083600",
        "client_msg_id": "fd4e82d6-b850-4167-aa14-2a814d40ce46",
        "text": "You're right, the term only shows up in the title, and I don't think the author is aware of the other connotation.\n\n<@UHWC9PXBL>'s link is the winner so far.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lEzmU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You're right, the term only shows up in the title, and I don't think the author is aware of the other connotation.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": "'s link is the winner so far."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL3CJ7YKC",
        "type": "message",
        "ts": "1564527922.091900",
        "client_msg_id": "65165788-DA03-4F8A-AC42-BD4D92B3430B",
        "text": "Are you aware of a tool (I imagine something like a jest plugin) where you can specify a unit test with all the inputs and their possible values and add logical rules to be able to omit some of the input permutations based on the given logical rule. \n\nThe remaining set of permutations to test might be represented in a table (and I'd be prompted to fill in all these tests.)\n\nThat does not seem hard to do at all, but maybe there is something out there. \n\n+ is there any tool which does something similar under the hold? Maybe a proof assistant when we are specifying our types? Dunno it just seems there must be something and I can't join the dots.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5612322b81b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-11-14\/834114331988_5612322b81b6d142511b_72.jpg",
            "first_name": "Pezo",
            "real_name": "Pezo - Zoltan Peto",
            "display_name": "Pezo - Zoltan Peto",
            "team": "T5TCAFTA9",
            "name": "pezo1919",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564527922.091900",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1564591010.114300",
        "reply_users": [
            "UFEQUBNNT",
            "UAVCC2X70",
            "UL3CJ7YKC"
        ],
        "replies": [
            {
                "user": "UFEQUBNNT",
                "ts": "1564538963.097400"
            },
            {
                "user": "UAVCC2X70",
                "ts": "1564543452.097900"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1564567756.101400"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1564567818.101600"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1564586279.113200"
            },
            {
                "user": "UL3CJ7YKC",
                "ts": "1564591010.114300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bKt+R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you aware of a tool (I imagine something like a jest plugin) where you can specify a unit test with all the inputs and their possible values and add logical rules to be able to omit some of the input permutations based on the given logical rule. \n\nThe remaining set of permutations to test might be represented in a table (and I'd be prompted to fill in all these tests.)\n\nThat does not seem hard to do at all, but maybe there is something out there. \n\n+ is there any tool which does something similar under the hold? Maybe a proof assistant when we are specifying our types? Dunno it just seems there must be something and I can't join the dots."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULADE0N0J",
        "type": "message",
        "ts": "1564529262.092000",
        "client_msg_id": "249d291d-2e10-4782-92b9-4cb9d9439f5b",
        "text": "Nice how he clicks near the Crossfade node’s output port to see which values flow out of it (at 4:20).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7d86046c255c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-23\/692084499154_7d86046c255cf2735e1c_72.jpg",
            "first_name": "",
            "real_name": "Benjamin Gudehus",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "hastebrot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564519351.082300",
        "parent_user_id": "UJPHQ8Z3N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gJBRN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice how he clicks near the Crossfade node’s output port to see which values flow out of it (at 4:20)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1564538963.097400",
        "client_msg_id": "F1568B57-D2A1-4AC2-AE19-90D54F0D4203",
        "text": "I wrote something related… You define some dimensions and their ranges (logged in\/out, regular\/admin user, fetch succeeds\/fails) then you annotate each test with an expression for the contexts where it ought to pass. It’s missing the coverage chart you mentioned, though. That sounds nice, though our issue was having too many tests (at runtime) due to the combinatorial explosion, not too few. :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564527922.091900",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/PK92",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wrote something related… You define some dimensions and their ranges (logged in\/out, regular\/admin user, fetch succeeds\/fails) then you annotate each test with an expression for the contexts where it ought to pass. It’s missing the coverage chart you mentioned, though. That sounds nice, though our issue was having too many tests (at runtime) due to the combinatorial explosion, not too few. "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564542293.097600",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1564604753.000000"
        },
        "client_msg_id": "caac2ea8-bac1-4ee2-af70-494c77c55f79",
        "text": "Garth's article actually also covered what I was guessing, which is that by making the \"source\" code and execution code be the same thing (e.g. perhaps by picking a storage representation that works as both), you then have \"one source of truth\".\n\nThat idea is actually an integral part of my project(s) \/ vision. The point is to allow software to be inspected and modified in place by its users, so that one can control their own environment. It's also to allow a program to contain it's own editor and language, so that programming consists both of sculpting the program and the sculpting sculpting experience. I don't have an exact destination in mind, but the point is to make it possible and easy to experiment in that space by also sculpting the exploration as it happens :)\n\n... Also, I'm beginning to see that I'm not the only one with some form of that idea. Anyone else doing something that's \"sourceless\" in some sense (or by some stretch)?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564446042.052200",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVw+k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Garth's article actually also covered what I was guessing, which is that by making the \"source\" code and execution code be the same thing (e.g. perhaps by picking a storage representation that works as both), you then have \"one source of truth\".\n\nThat idea is actually an integral part of my project(s) \/ vision. The point is to allow software to be inspected and modified in place by its users, so that one can control their own environment. It's also to allow a program to contain it's own editor and language, so that programming consists both of sculpting the program and the sculpting sculpting experience. I don't have an exact destination in mind, but the point is to make it possible and easy to experiment in that space by also sculpting the exploration as it happens :)\n\n... Also, I'm beginning to see that I'm not the only one with some form of that idea. Anyone else doing something that's \"sourceless\" in some sense (or by some stretch)?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAVCC2X70",
        "type": "message",
        "ts": "1564543452.097900",
        "client_msg_id": "db73baa9-f0ad-40fd-893b-33c75c3f7a8f",
        "text": "I saw a video showing how to make a Sudoku solver in a logic language (I think it was prolog?) just by specifying the rules for a valid column, row, and box. Then you just feed it a puzzle and it gives back the valid answer(s)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ec35ac5b251f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-05-22\/369438371830_ec35ac5b251f37e26aca_72.jpg",
            "first_name": "",
            "real_name": "Dan Cook",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "dcook0819",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564527922.091900",
        "parent_user_id": "UL3CJ7YKC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qhqVk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I saw a video showing how to make a Sudoku solver in a logic language (I think it was prolog?) just by specifying the rules for a valid column, row, and box. Then you just feed it a puzzle and it gives back the valid answer(s)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564543995.098100",
        "client_msg_id": "b80c3b6d-f149-46b1-9da8-4515995f5898",
        "text": "Proportional fonts shrink the horizontal anywhere from 20 to 25 percent. This improves readability; however, most proportional fonts are not designed to highlight punctuation characters, which are incredibly meaningful in most languages. So that is a big drawback. Also, monospacing is much better for editing, as you often need to get to a specific point, and in proportional fonts some of the letters are optimized to be very close together; in fact, if your kerning is good, the letters will overlap quite a bit, and Apple is very good at kerning. So this works against you. You can fix the punctuation issue by forcing people to have a specific font, but that is not a recipe for acceptance. For this reason, although proportional fonts are a nicety and do increase readability significantly, during editing they are a drawback, and so i think a dual mode system will be necessary: proportional for printing, scanning, and monospaced during editing.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3f0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Proportional fonts shrink the horizontal anywhere from 20 to 25 percent. This improves readability; however, most proportional fonts are not designed to highlight punctuation characters, which are incredibly meaningful in most languages. So that is a big drawback. Also, monospacing is much better for editing, as you often need to get to a specific point, and in proportional fonts some of the letters are optimized to be very close together; in fact, if your kerning is good, the letters will overlap quite a bit, and Apple is very good at kerning. So this works against you. You can fix the punctuation issue by forcing people to have a specific font, but that is not a recipe for acceptance. For this reason, although proportional fonts are a nicety and do increase readability significantly, during editing they are a drawback, and so i think a dual mode system will be necessary: proportional for printing, scanning, and monospaced during editing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1564544351.098300",
        "client_msg_id": "43de74d7-9c94-481d-a5db-bd30a99a308e",
        "text": "Deductive programming is far more profitable an avenue to study than FP. It is one of the great tragedies of the past when the LISP crowd at MIT beat out the French team that was using PROLOG. PROLOG is not a very useful language, but the concepts inside are fantastic. Deduction allows the computer to do work that is very error-prone for programmers. The entire history of the evolution of programming languages consists of identifying common error patterns, and engineering a system that prevents them from happening entirely. We started with register clobberation, the most dangerous error of all, because it introduces a random result into a deterministic program, then moved on to memory management, function call parameter matching, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564418480.037900",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gvO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Deductive programming is far more profitable an avenue to study than FP. It is one of the great tragedies of the past when the LISP crowd at MIT beat out the French team that was using PROLOG. PROLOG is not a very useful language, but the concepts inside are fantastic. Deduction allows the computer to do work that is very error-prone for programmers. The entire history of the evolution of programming languages consists of identifying common error patterns, and engineering a system that prevents them from happening entirely. We started with register clobberation, the most dangerous error of all, because it introduces a random result into a deterministic program, then moved on to memory management, function call parameter matching, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "How about some literate programming, elastic tabstops, hyperlinks, and schematic tables?",
        "files": [
            {
                "id": "FLZ32K607",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=R91",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about some literate programming, elastic tabstops, hyperlinks, and schematic tables?"
                            }
                        ]
                    }
                ]
            }
        ],
        "subtype": "thread_broadcast",
        "root": {
            "user": "UAL7940NM",
            "type": "message",
            "ts": "1564484268.063900",
            "client_msg_id": "1bb60bfa-57ca-4468-9cf0-4d98fee57636",
            "text": "How would you render source code if you weren't tied to a 2D grid of monospace characters? I'd probably start by using a proportional font for all words in the code. I posted an example of this here: <https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688>\nAfter getting used to it, I feel like it's easier to scan the code in that representation. What do you think?",
            "team": "T5TCAFTA9",
            "thread_ts": "1564484268.063900",
            "reply_count": 34,
            "reply_users_count": 14,
            "latest_reply": "1565290057.244300",
            "reply_users": [
                "UJ6LDMMN0",
                "U5STGTB3J",
                "UJG7QQQJW",
                "UA14TGLTC",
                "UAL7940NM",
                "UFZFETUH1",
                "UE0ETTCG7",
                "UHWC9PXBL",
                "UEQ6M68H0",
                "UFEQUBNNT",
                "UGWUJUZHT",
                "ULM3U6275",
                "UD31LGQKB",
                "UKFSDUCH2"
            ],
            "replies": [
                {
                    "user": "UJ6LDMMN0",
                    "ts": "1564484502.064200"
                },
                {
                    "user": "UJ6LDMMN0",
                    "ts": "1564486903.064400"
                },
                {
                    "user": "U5STGTB3J",
                    "ts": "1564487137.066300"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564491534.066700"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1564492414.067200"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564495417.072300"
                },
                {
                    "user": "UA14TGLTC",
                    "ts": "1564496683.072900"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564497573.073100"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564497702.073300"
                },
                {
                    "user": "UFZFETUH1",
                    "ts": "1564499400.074100"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564499435.074300"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564499472.074500"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564499508.074700"
                },
                {
                    "user": "UFZFETUH1",
                    "ts": "1564499680.075100"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564499781.075300"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564499864.075500"
                },
                {
                    "user": "UE0ETTCG7",
                    "ts": "1564500483.075700"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564500703.076100"
                },
                {
                    "user": "UE0ETTCG7",
                    "ts": "1564501677.076300"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564501755.076500"
                },
                {
                    "user": "UJG7QQQJW",
                    "ts": "1564501848.076700"
                },
                {
                    "user": "UE0ETTCG7",
                    "ts": "1564502009.076900"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1564504536.078000"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1564504722.078300"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564520389.082500"
                },
                {
                    "user": "UEQ6M68H0",
                    "ts": "1564543995.098100"
                },
                {
                    "user": "UFEQUBNNT",
                    "ts": "1564546418.098500"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564554222.100700"
                },
                {
                    "user": "UGWUJUZHT",
                    "ts": "1564571488.112300"
                },
                {
                    "user": "UAL7940NM",
                    "ts": "1564575500.112600"
                },
                {
                    "user": "ULM3U6275",
                    "ts": "1564698550.146300"
                },
                {
                    "user": "UHWC9PXBL",
                    "ts": "1564775137.169900"
                },
                {
                    "user": "UD31LGQKB",
                    "ts": "1564843769.202800"
                },
                {
                    "user": "UKFSDUCH2",
                    "ts": "1565290057.244300"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "attachments": [
                {
                    "fallback": "<https:\/\/twitter.com\/FKohlgrueber|@FKohlgrueber>: Challenge: Use HTML \/ CSS to make a random code sample more readable. My first experiment (see second screenshot): using a proportional font for \"words\" in the code.\nFont is <https:\/\/twitter.com\/FiraCode|@FiraCode> \/ Sans, experiment source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-8e1eh> <https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png>",
                    "ts": 1564483318,
                    "author_name": "Felix Kohlgrüber",
                    "author_link": "https:\/\/twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                    "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/980166265372401664\/FgXL4PR5_normal.jpg",
                    "author_subname": "@FKohlgrueber",
                    "text": "Challenge: Use HTML \/ CSS to make a random code sample more readable. My first experiment (see second screenshot): using a proportional font for \"words\" in the code.\nFont is <https:\/\/twitter.com\/FiraCode|@FiraCode> \/ Sans, experiment source: <https:\/\/codesandbox.io\/s\/code-example-fira-mix-8e1eh> <https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png>",
                    "service_name": "twitter",
                    "service_url": "https:\/\/twitter.com\/",
                    "from_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                    "image_url": "https:\/\/pbs.twimg.com\/media\/EAt6-IVW4AMVDRF.png",
                    "image_width": 1068,
                    "image_height": 849,
                    "image_bytes": 102384,
                    "id": 1,
                    "original_url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688",
                    "footer": "Twitter",
                    "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
                },
                {
                    "text": "<https:\/\/pbs.twimg.com\/media\/EAt6-I7XYAIvhvW.jpg>",
                    "image_url": "https:\/\/pbs.twimg.com\/media\/EAt6-I7XYAIvhvW.jpg",
                    "image_width": 1068,
                    "image_height": 849,
                    "image_bytes": 63629,
                    "id": 2
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "JAE7N",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "How would you render source code if you weren't tied to a 2D grid of monospace characters? I'd probably start by using a proportional font for all words in the code. I posted an example of this here: "
                                },
                                {
                                    "type": "link",
                                    "url": "https:\/\/mobile.twitter.com\/FKohlgrueber\/status\/1156152950093426688"
                                },
                                {
                                    "type": "text",
                                    "text": "\nAfter getting used to it, I feel like it's easier to scan the code in that representation. What do you think?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1564546418.098500",
        "client_msg_id": "5d39bb1c-0936-4140-8d7d-8b30f37cdd82",
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJUQESQ1Z",
                    "U5TCAFTD3",
                    "UJ6LDMMN0",
                    "U6KQ2S410",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "text": "<@U5TCAFTD3> (or anyone more well read on this than me), I enjoyed <https:\/\/futureofcoding.org\/essays\/dctp.html> but I got tripped up on the part I snipped below. Is there any reason why you chose to sequence the buttons instead of expanding the domain of `button`?",
        "files": [
            {
                "id": "FLKRY2BB5",
                "mode": "tombstone"
            }
        ],
        "upload": true,
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pS8u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " (or anyone more well read on this than me), I enjoyed "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.org\/essays\/dctp.html"
                            },
                            {
                                "type": "text",
                                "text": " but I got tripped up on the part I snipped below. Is there any reason why you chose to sequence the buttons instead of expanding the domain of "
                            },
                            {
                                "type": "text",
                                "text": "button",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1564549784.099400",
        "client_msg_id": "5b2af140-0cc7-4179-93ed-7ab34ee67837",
        "thread_ts": "1564549784.099400",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1564619984.119900",
        "reply_users": [
            "UFEQUBNNT",
            "U5TCAFTD3"
        ],
        "replies": [
            {
                "user": "UFEQUBNNT",
                "ts": "1564549966.099700"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1564552796.100300"
            },
            {
                "user": "U5TCAFTD3",
                "ts": "1564553100.100500"
            },
            {
                "user": "UFEQUBNNT",
                "ts": "1564619984.119900"
            }
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1564619984.119900"
    },
    {
        "user": "UFEQUBNNT",
        "type": "message",
        "ts": "1564549966.099700",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1564550261.000000"
        },
        "client_msg_id": "49950d49-afd9-4848-bec3-cfe853bc8aa5",
        "text": "Like, if the buttons were presented on something like a _graphic_ then it might be `clicks1 = button(rect1); clicks2 = button(rect2)`. Or if there were a layout engine, maybe something like `clicks1, clicks2 = stacked((a, b) → (button(a), button(b)))`. Would that also resolve the issue?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "565c54a4fa91",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-09-13\/2508698086192_565c54a4fa91a0c8c75a_72.png",
            "first_name": "Tom",
            "real_name": "Tom Lieber",
            "display_name": "alltom",
            "team": "T5TCAFTA9",
            "name": "tom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564549784.099400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ODr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like, if the buttons were presented on something like a "
                            },
                            {
                                "type": "text",
                                "text": "graphic",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " then it might be "
                            },
                            {
                                "type": "text",
                                "text": "clicks1 = button(rect1); clicks2 = button(rect2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Or if there were a layout engine, maybe something like "
                            },
                            {
                                "type": "text",
                                "text": "clicks1, clicks2 = stacked((a, b) → (button(a), button(b)))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Would that also resolve the issue?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1564552796.100300",
        "client_msg_id": "3a229ba0-8fe4-4fe4-aa5a-3cad2bb9b4f5",
        "text": "Those solutions seem like a potentially better way to do it. I am copying the sequencing idea from two FRP lobraries for HTML: Reflex and Turbine.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564549784.099400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H29L8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Those solutions seem like a potentially better way to do it. I am copying the sequencing idea from two FRP lobraries for HTML: Reflex and Turbine."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5TCAFTD3",
        "type": "message",
        "ts": "1564553100.100500",
        "client_msg_id": "3e8844a9-79c6-445e-87fa-80b8b0dfe01b",
        "text": "So the main answer is that HTML is an ordered tree, that's why",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7c31dc735c6c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-09-11\/433781465829_7c31dc735c6c1257fe1f_72.jpg",
            "first_name": "Steve",
            "real_name": "Steve Krouse",
            "display_name": "stevekrouse",
            "team": "T5TCAFTA9",
            "name": "stevekrouse",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564549784.099400",
        "parent_user_id": "UFEQUBNNT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "awvfR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So the main answer is that HTML is an ordered tree, that's why"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UAL7940NM",
        "type": "message",
        "ts": "1564554222.100700",
        "client_msg_id": "f5875588-db6b-4741-88b1-3a68f125a4b3",
        "text": "<@UEQ6M68H0> That's why I've used a proportional font for words (keywords, variable names, ...) only. Punctuation characters and spaces are still monospace so that they're large enough. I don't see a problem in editing words displayed using a proportional font, I'm actually doing this right now to write this text. Using different fonts could easily be implemented in a code editor that supports syntax highlighting. In addition to color and weight, one would also specify a font for each token type.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "43873346f949",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-13\/399377633206_43873346f949174e340e_72.jpg",
            "first_name": "Felix",
            "real_name": "Felix Kohlgrüber",
            "display_name": "Felix Kohlgrüber",
            "team": "T5TCAFTA9",
            "name": "felix.kohlgrueber",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1564484268.063900",
        "parent_user_id": "UAL7940NM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZCcaP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " That's why I've used a proportional font for words (keywords, variable names, ...) only. Punctuation characters and spaces are still monospace so that they're large enough. I don't see a problem in editing words displayed using a proportional font, I'm actually doing this right now to write this text. Using different fonts could easily be implemented in a code editor that supports syntax highlighting. In addition to color and weight, one would also specify a font for each token type."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    }
]