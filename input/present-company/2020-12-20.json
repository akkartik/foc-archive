[
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608491424.130300",
        "client_msg_id": "c5d8ba15-838b-4dab-9fc5-f1743e2890c7",
        "text": "I'm looking for a format to add a bit of semantic meaning to JSON (as minimal as possible).\n<https:\/\/github.com\/cognitect\/transit-format#transit> is such a format, but I'd like to know if there are others.\n\nFor instance, imagine trying to represent JSON+Dates, and no other additional type.\nFrom: `[\"a\", 123, ..., \"whatever\", \"~#date:1929292929\"]` ...\n... a JS decoder would see `\"~#date:1929292929\"` and convert that to `[\"a\", 123, ..., \"whatever\", new Date(1929292929)]` .\nWhat if I wanted to encode the `\"~#date:1929292929\"` string verbatim? Now I have to come up with some escaping mechanism, say, `~~` : `\"~~~#date:1929292929\"` , etc.\n\nSo I could try to come up with a format to do what I need, but I wonder if there are already specs out there doing something similar other than transit.\n\nI want something a bit easier to implement than Transit... it has a bit more features than I need (for instance, I don't really need caching or user defined types).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "reply_count": 24,
        "reply_users_count": 11,
        "latest_reply": "1608722996.150500",
        "reply_users": [
            "UL5AX4G2H",
            "UCUSW7WVD",
            "UN9SCH5RD",
            "UA14TGLTC",
            "UHWC9PXBL",
            "USH01JEDQ",
            "U01DUNFS2N4",
            "UDQBTJ211",
            "U8A5MS6R1",
            "U013ZLJARC7",
            "U01GPPBDF7Z"
        ],
        "replies": [
            {
                "user": "UL5AX4G2H",
                "ts": "1608494780.130500"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1608501107.130700"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608507008.131300"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608507024.131500"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608507166.131700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1608507914.131900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1608508519.132300"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1608514525.132700"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1608520624.142500"
            },
            {
                "user": "USH01JEDQ",
                "ts": "1608520815.143000"
            },
            {
                "user": "U01DUNFS2N4",
                "ts": "1608523225.144200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608526138.144600"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1608532574.144900"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1608535588.145100"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1608539720.145300"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608539946.145600"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1608540176.145800"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1608571266.147400"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608589215.147900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608591454.148600"
            },
            {
                "user": "U01GPPBDF7Z",
                "ts": "1608654281.149200"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608675535.149900"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1608712469.150100"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1608722996.150500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "cognitect\/transit-format",
                "title_link": "https:\/\/github.com\/cognitect\/transit-format#transit",
                "text": "A data interchange format. Contribute to cognitect\/transit-format development by creating an account on GitHub.",
                "fallback": "GitHub: cognitect\/transit-format",
                "thumb_url": "https:\/\/avatars1.githubusercontent.com\/u\/5470150?s=400&v=4",
                "from_url": "https:\/\/github.com\/cognitect\/transit-format#transit",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/cognitect\/transit-format#transit"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=1s3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm looking for a format to add a bit of semantic meaning to JSON (as minimal as possible).\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/cognitect\/transit-format#transit"
                            },
                            {
                                "type": "text",
                                "text": " is such a format, but I'd like to know if there are others.\n\nFor instance, imagine trying to represent JSON+Dates, and no other additional type.\nFrom: "
                            },
                            {
                                "type": "text",
                                "text": "[\"a\", 123, ..., \"whatever\", \"~#date:1929292929\"]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ...\n... a JS decoder would see "
                            },
                            {
                                "type": "text",
                                "text": "\"~#date:1929292929\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and convert that to "
                            },
                            {
                                "type": "text",
                                "text": "[\"a\", 123, ..., \"whatever\", new Date(1929292929)]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " .\nWhat if I wanted to encode the "
                            },
                            {
                                "type": "text",
                                "text": "\"~#date:1929292929\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " string verbatim? Now I have to come up with some escaping mechanism, say, "
                            },
                            {
                                "type": "text",
                                "text": "~~",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " : "
                            },
                            {
                                "type": "text",
                                "text": "\"~~~#date:1929292929\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , etc.\n\nSo I could try to come up with a format to do what I need, but I wonder if there are already specs out there doing something similar other than transit.\n\nI want something a bit easier to implement than Transit... it has a bit more features than I need (for instance, I don't really need caching or user defined types)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1608494780.130500",
        "client_msg_id": "960fc681-5abf-4bd3-97ae-b12aad49c4cd",
        "text": "This is basically embedding type information into JSON, so use dicts, add a \"type\" field and be done with it. There might? be a standard, but don't worth about it. If there is and you find it later, converting whatever you write to their standard should be solvable with a short python program",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qul3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is basically embedding type information into JSON, so use dicts, add a \"type\" field and be done with it. There might? be a standard, but don't worth about it. If there is and you find it later, converting whatever you write to their standard should be solvable with a short python program"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1608501107.130700",
        "client_msg_id": "28bc9c03-3959-423d-987f-5b04b6076ead",
        "text": "Somebody correct me if I'm wrong, but YAML supports arbitrary Ruby types, and that's turned into a security morass and now considered a bad idea. So yeah, what <@UL5AX4G2H> said.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xn0+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Somebody correct me if I'm wrong, but YAML supports arbitrary Ruby types, and that's turned into a security morass and now considered a bad idea. So yeah, what "
                            },
                            {
                                "type": "user",
                                "user_id": "UL5AX4G2H"
                            },
                            {
                                "type": "text",
                                "text": " said."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608507008.131300",
        "client_msg_id": "0335f153-dd78-4c66-b33c-275f239b904c",
        "text": "guys, there's a spectrum ... I'm confused by the black and white answers I sometimes get from the \"Future of Coding\" forum. It seems the future is black and white...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "guys, there's a spectrum ... I'm confused by the black and white answers I sometimes get from the \"Future of Coding\" forum. It seems the future is black and white..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608507024.131500",
        "client_msg_id": "4a164fef-2aac-4c12-849e-ae68567b00de",
        "text": "at one side, there's \"just use maps\". At the other, there's Transit. What's in the middle?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nje5e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at one side, there's \"just use maps\". At the other, there's Transit. What's in the middle?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608507166.131700",
        "client_msg_id": "5574259a-e468-487e-b155-bcf4fc03746a",
        "text": "I'm just curious how other people solved this issue, seems like a problem a lot of people may have tackled. For instance, if I \"just use maps\", then if I want to encode that map verbatim, I need to escape somehow. I'm curious how other dealt with this problem. Maybe the answer is to not worry about that case, reversibility, etc.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ovo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm just curious how other people solved this issue, seems like a problem a lot of people may have tackled. For instance, if I \"just use maps\", then if I want to encode that map verbatim, I need to escape somehow. I'm curious how other dealt with this problem. Maybe the answer is to not worry about that case, reversibility, etc."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1608507914.131900",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1608508071.000000"
        },
        "client_msg_id": "8004efa6-e62c-420b-bc33-a409b8ce5c38",
        "text": "Didn't intend to sound black and white! Just trying to answer the question to my knowledge. I'm not an expert here, so it's hard to be dogmatic :smile:\n\nEncoding maps: just put them in quotes, use backslashes for escaping? I'm not familiar with Transit, unfortunately.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yyl7D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Didn't intend to sound black and white! Just trying to answer the question to my knowledge. I'm not an expert here, so it's hard to be dogmatic "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEncoding maps: just put them in quotes, use backslashes for escaping? I'm not familiar with Transit, unfortunately."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1608508519.132300",
        "client_msg_id": "99ba4054-7aa8-451b-a8ae-2af4681c410f",
        "text": "From the Transit page:\n\n&gt; Users of data formats without such facilities must rely on either schemas, convention, or context to convey elements not included in the base set, making application code much more complex. With Transit, schemas, convention, and context-sensitive logic are not required.\n\nI suppose conventions and schemas is what we're both reaching for. I just haven't felt this particular pain point yet..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vSu0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the Transit page:\n\n> Users of data formats without such facilities must rely on either schemas, convention, or context to convey elements not included in the base set, making application code much more complex. With Transit, schemas, convention, and context-sensitive logic are not required.\n\nI suppose conventions and schemas is what we're both reaching for. I just haven't felt this particular pain point yet.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1608514525.132700",
        "client_msg_id": "1a97b392-1ca6-4379-b788-ecbf6b2a6207",
        "text": "You'll always run into escaping issues in principle, the trick is finding the way to avoid them in practice.  Depending on your context, the \"~#\" prefix might be enough, you might not even ever need to escape them.  Not if \"~#\" doesn't occur naturally.\n\nUsing a hash with a \"type\" key or perhaps a \"~~type~~\" key for extra safety is perhaps a more versatile (and verbose) solution.\n\nThe only downer of using extra ~s to meta-escape is that it can get silly sometime.  I vaguely recall a system wherein to write backslash I had to use the string `\"\\\\\\\\\\\\\"`.   So having another way to say backslash would have worked out better.\n\nSee also Quining <https:\/\/en.wikipedia.org\/wiki\/Quine_%28computing%29>.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F2ac",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You'll always run into escaping issues in principle, the trick is finding the way to avoid them in practice.  Depending on your context, the \"~#\" prefix might be enough, you might not even ever need to escape them.  Not if \"~#\" doesn't occur naturally.\n\nUsing a hash with a \"type\" key or perhaps a \"~~type~~\" key for extra safety is perhaps a more versatile (and verbose) solution.\n\nThe only downer of using extra ~s to meta-escape is that it can get silly sometime.  I vaguely recall a system wherein to write backslash I had to use the string "
                            },
                            {
                                "type": "text",
                                "text": "\"\\\\\\\\\\\\\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".   So having another way to say backslash would have worked out better.\n\nSee also Quining "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Quine_%28computing%29"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1608520624.142500",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1608529590.000000"
        },
        "client_msg_id": "5A4296EB-8C29-401D-A832-32221CAFC4B2",
        "text": "here’s an off the wall idea: you could have a companion “types” array whose keys are access instructions and whose values are enums representing the type. eg `“person.birthday”: “date”`. you could make it ad-hoc with relative positioning with a jq-like syntax, eg `user: { createdAt: <tel:17261669|17261669>, “.createdAt”: “date” }`. idk if that’s too wacky ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rtg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "here’s an off the wall idea: you could have a companion “types” array whose keys are access instructions and whose values are enums representing the type. eg "
                            },
                            {
                                "type": "text",
                                "text": "“person.birthday”: “date”",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". you could make it ad-hoc with relative positioning with a jq-like syntax, eg "
                            },
                            {
                                "type": "text",
                                "text": "user: { createdAt: ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "tel:17261669",
                                "text": "17261669",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", “.createdAt”: “date” }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". idk if that’s too wacky "
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "USH01JEDQ",
        "type": "message",
        "ts": "1608520815.143000",
        "client_msg_id": "ADB70CC1-A025-4D59-824C-4F2E56E789CC",
        "text": "Hungarian notation for the key names",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "854f96b690f5",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-17\/6370745671793_854f96b690f51d1266ee_72.png",
            "first_name": "Christopher",
            "real_name": "Christopher Galtenberg",
            "display_name": "Chris G",
            "team": "T5TCAFTA9",
            "name": "galtenberg",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hungarian notation for the key names"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U01AD80KMLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1608523225.144200",
        "client_msg_id": "65D0CAF0-34A8-4D64-ABBB-D365AAD1D8F9",
        "text": "This may still be too heavy weight, but why not implement just a subset of transit? Iirc it should be possible",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bgj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This may still be too heavy weight, but why not implement just a subset of transit? Iirc it should be possible"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1608526138.144600",
        "client_msg_id": "d4024c92-9c5c-4465-807f-f677246c17ac",
        "text": "A subset of transit could work, I was just curious about other options.\nActual transit ends up looking like a lot of nested arrays, something like:\n `[\"~#array\", [1, 2, [~#date 1929292929], [~#json, [1, 2, 1929292929]]]`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h4b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A subset of transit could work, I was just curious about other options.\nActual transit ends up looking like a lot of nested arrays, something like:\n "
                            },
                            {
                                "type": "text",
                                "text": "[\"~#array\", [1, 2, [~#date 1929292929], [~#json, [1, 2, 1929292929]]]",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1608532574.144900",
        "client_msg_id": "4806fd9d-967c-4164-81b5-2ed10452818c",
        "text": "I like Garth's idea. Send complementary JSON with the same structure, with the type names in the place of the values (you can omit unnecessary parts)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like Garth's idea. Send complementary JSON with the same structure, with the type names in the place of the values (you can omit unnecessary parts)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1608535588.145100",
        "client_msg_id": "4d152732-e0e7-40f2-b9c7-7bbcbe99e24f",
        "text": "&gt; What if I wanted to encode the `\"~#date:1929292929\"` string verbatim? Now I have to come up with some escaping mechanism, say, `~~`\n\nOr you could use the same mechanism: `\"~#string:'~#date:...'\"`",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEwnk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> What if I wanted to encode the "
                            },
                            {
                                "type": "text",
                                "text": "\"~#date:1929292929\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " string verbatim? Now I have to come up with some escaping mechanism, say, "
                            },
                            {
                                "type": "text",
                                "text": "~~",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nOr you could use the same mechanism: "
                            },
                            {
                                "type": "text",
                                "text": "\"~#string:'~#date:...'\"",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    }
]