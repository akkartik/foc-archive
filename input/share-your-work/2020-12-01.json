[
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606811712.306500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606811831.000000"
        },
        "client_msg_id": "1f782ce4-8de6-4cca-8ca9-2eb5a33a5691",
        "text": "I just finished <https:\/\/adventofcode.com\/2020\/day\/1> in Mu. In the process I had to:\n* Fix a bug in reading lines from stdin into streams\n* Start skipping trailing newlines when parsing ints from streams\n* Implement `find` in an array\n\nSolution (spoiler alert): <http:\/\/akkartik.github.io\/mu\/html\/apps\/advent2020\/1a.mu.html>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "reply_count": 19,
        "reply_users_count": 3,
        "latest_reply": "1607216627.373600",
        "reply_users": [
            "UCUSW7WVD",
            "UUQ2EQW21",
            "U015902ESJC"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1606814617.306700"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1606822863.306900"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1606822976.307300"
            },
            {
                "user": "U015902ESJC",
                "ts": "1606874117.338900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606874467.339500"
            },
            {
                "user": "U015902ESJC",
                "ts": "1606889171.340600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606966813.347700"
            },
            {
                "user": "U015902ESJC",
                "ts": "1606969307.348100"
            },
            {
                "user": "U015902ESJC",
                "ts": "1606973743.348600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1606978850.349100"
            },
            {
                "user": "U015902ESJC",
                "ts": "1607014959.351100"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1607019078.354700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1607155738.371300"
            },
            {
                "user": "U015902ESJC",
                "ts": "1607204401.372000"
            },
            {
                "user": "U015902ESJC",
                "ts": "1607204934.372600"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1607205030.372800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1607205148.373000"
            },
            {
                "user": "U015902ESJC",
                "ts": "1607207033.373200"
            },
            {
                "user": "U015902ESJC",
                "ts": "1607216627.373600"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HRBNt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just finished "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/adventofcode.com\/2020\/day\/1"
                            },
                            {
                                "type": "text",
                                "text": " in Mu. In the process I had to:\n* Fix a bug in reading lines from stdin into streams\n* Start skipping trailing newlines when parsing ints from streams\n* Implement "
                            },
                            {
                                "type": "text",
                                "text": "find",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in an array\n\nSolution (spoiler alert): "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.github.io\/mu\/html\/apps\/advent2020\/1a.mu.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606814617.306700",
        "client_msg_id": "f38c01a5-79eb-4ad5-8162-dde525a7671f",
        "text": "Day 1 part 2 (same thing, just more brute force): <http:\/\/akkartik.github.io\/mu\/html\/apps\/advent2020\/1b.mu.html>\n\nPart 1 took 40 minutes and part 2 took 18.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/587",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Day 1 part 2 (same thing, just more brute force): "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.github.io\/mu\/html\/apps\/advent2020\/1b.mu.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPart 1 took 40 minutes and part 2 took 18."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1606822863.306900",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1606822868.000000"
        },
        "client_msg_id": "80269eea-5e3c-4fec-898a-c71b1bb7bffa",
        "text": "<https:\/\/www.reddit.com\/r\/adventofcode\/comments\/k4j803\/2020_day1_part1_as_a_scatter_plot\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pHW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.reddit.com\/r\/adventofcode\/comments\/k4j803\/2020_day1_part1_as_a_scatter_plot\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1606822976.307300",
        "client_msg_id": "311da13a-ff62-471e-bb15-7244d31db846",
        "text": "Mu sample looks clean; a lot more effort than my C++ one though :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oak",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mu sample looks clean; a lot more effort than my C++ one though "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "text": "I've been working on an educational programming environment for assessing student competencies with algorithms and data structures (thanks <@U01FW4XL01Z> for the attached video). One of my goals is to allow students to express their \"algorithmic thinking\" without having to work with textual syntax, starting with arrays and sorting algorithms. If this works out well, I would like to expand this to support other data structures and more varied computation.\n\n• For a tutorial of the basic operations, see <https:\/\/zagie.com\/sorting_foc> (note that this is the version from the end of the video)\n• To just play around with this, try <https:\/\/zagie.com\/sorting_foc\/bubblesort>",
        "files": [
            {
                "id": "F01FP7B94VC",
                "mode": "tombstone"
            }
        ],
        "upload": false,
        "user": "U0139HUPMQ9",
        "display_as_bot": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TGh7A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been working on an educational programming environment for assessing student competencies with algorithms and data structures (thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U01FW4XL01Z"
                            },
                            {
                                "type": "text",
                                "text": " for the attached video). One of my goals is to allow students to express their \"algorithmic thinking\" without having to work with textual syntax, starting with arrays and sorting algorithms. If this works out well, I would like to expand this to support other data structures and more varied computation.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For a tutorial of the basic operations, see "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/zagie.com\/sorting_foc"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (note that this is the version from the end of the video)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "To just play around with this, try "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https:\/\/zagie.com\/sorting_foc\/bubblesort"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "type": "message",
        "ts": "1606827121.315700",
        "thread_ts": "1606827121.315700",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1607098715.364300",
        "reply_users": [
            "U017GNJM021",
            "UEBG0NPDK",
            "U0139HUPMQ9",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "U017GNJM021",
                "ts": "1606831046.316700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606873703.338600"
            },
            {
                "user": "U0139HUPMQ9",
                "ts": "1607001269.350400"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1607098635.363300"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1607098715.364300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "U01LAJFKC2K"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "U01BSAKUDJQ",
        "type": "message",
        "ts": "1606827772.316000",
        "client_msg_id": "f9e8fcf6-2ba2-41f7-8cef-1f1e87826f1f",
        "text": "An idea for a more elaborate expressiveness task (the largest 7GUIs tasks is pretty non-trivial, too): manually implement a pivot operation in the DSL. This would exercise the DSL nicely, because it involves:\n\n1. add or remove columns\n2. remove or add rows\n3. move values from\/to column names and cells (and sometimes row names, too, if the DSL treats those differently than normal columns)\n4. handle missing or duplicate combinations\n\nA pivot_longer example adapted from <https:\/\/tidyr.tidyverse.org\/articles\/pivot.html|Tidyr's pivot vignette>:\n\n&gt; The `family` dataset contains one row per family, and columns `(family, dob_child1, dob_child2, gender_child1, gender_child2)`. Can you, without using your DSL's pivot function, transform this to a table with one row per child, and columns `(family, child, dob, gender)`?\nIllustration:\n```#&gt; # A tibble: 5 x 5\n#&gt;   family dob_child1 dob_child2 gender_child1 gender_child2\n#&gt;    &lt;int&gt; &lt;date&gt;     &lt;date&gt;             &lt;int&gt;         &lt;int&gt;\n#&gt; 1      1 1998-11-26 2000-01-29             1             2\n#&gt; 2      2 1996-06-22 NA                     2            NA\n#&gt; 3      3 2002-07-11 2004-04-05             2             2\n#&gt; 4      4 2004-10-10 2009-08-27             1             1\n#&gt; 5      5 2000-12-05 2005-02-28             2             1\n\nbecomes\n\n#&gt; # A tibble: 9 x 4\n#&gt;   family child  dob        gender\n#&gt;    &lt;int&gt; &lt;chr&gt;  &lt;date&gt;      &lt;int&gt;\n#&gt; 1      1 child1 1998-11-26      1\n#&gt; 2      1 child2 2000-01-29      2\n#&gt; 3      2 child1 1996-06-22      2\n#&gt; 4      3 child1 2002-07-11      2\n#&gt; 5      3 child2 2004-04-05      2\n[...]```\n",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1930c667fbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1930c667fbd3884fd581e95eb4d5b15c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sietse",
            "real_name": "Sietse Brouwer",
            "display_name": "Sietse Brouwer",
            "team": "T5TCAFTA9",
            "name": "sbbrouwer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604366257.141100",
        "parent_user_id": "UFB8STN7K",
        "attachments": [
            {
                "title": "Pivoting",
                "title_link": "https:\/\/tidyr.tidyverse.org\/articles\/pivot.html",
                "text": "Learn how use the new `pivot_longer()` and `pivot_wider()` functions which change the representation of a dataset without changing the data it contains.",
                "fallback": "Pivoting",
                "thumb_url": "https:\/\/tidyr.tidyverse.org\/logo.png",
                "from_url": "https:\/\/tidyr.tidyverse.org\/articles\/pivot.html",
                "thumb_width": 240,
                "thumb_height": 277,
                "service_icon": "https:\/\/tidyr.tidyverse.org\/apple-touch-icon.png",
                "service_name": "tidyr.tidyverse.org",
                "id": 1,
                "original_url": "https:\/\/tidyr.tidyverse.org\/articles\/pivot.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6eh4g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An idea for a more elaborate expressiveness task (the largest 7GUIs tasks is pretty non-trivial, too): manually implement a pivot operation in the DSL. This would exercise the DSL nicely, because it involves:\n\n1. add or remove columns\n2. remove or add rows\n3. move values from\/to column names and cells (and sometimes row names, too, if the DSL treats those differently than normal columns)\n4. handle missing or duplicate combinations\n\nA pivot_longer example adapted from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tidyr.tidyverse.org\/articles\/pivot.html",
                                "text": "Tidyr's pivot vignette"
                            },
                            {
                                "type": "text",
                                "text": ":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The `family` dataset contains one row per family, and columns `(family, dob_child1, dob_child2, gender_child1, gender_child2)`. Can you, without using your DSL's pivot function, transform this to a table with one row per child, and columns `(family, child, dob, gender)`?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIllustration:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "#> # A tibble: 5 x 5\n#>   family dob_child1 dob_child2 gender_child1 gender_child2\n#>    <int> <date>     <date>             <int>         <int>\n#> 1      1 1998-11-26 2000-01-29             1             2\n#> 2      2 1996-06-22 NA                     2            NA\n#> 3      3 2002-07-11 2004-04-05             2             2\n#> 4      4 2004-10-10 2009-08-27             1             1\n#> 5      5 2000-12-05 2005-02-28             2             1\n\nbecomes\n\n#> # A tibble: 9 x 4\n#>   family child  dob        gender\n#>    <int> <chr>  <date>      <int>\n#> 1      1 child1 1998-11-26      1\n#> 2      1 child2 2000-01-29      2\n#> 3      2 child1 1996-06-22      2\n#> 4      3 child1 2002-07-11      2\n#> 5      3 child2 2004-04-05      2\n[...]"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U01BSAKUDJQ",
        "type": "message",
        "ts": "1606827979.316300",
        "edited": {
            "user": "U01BSAKUDJQ",
            "ts": "1606832813.000000"
        },
        "client_msg_id": "ee3ddcc0-1c02-4d18-91aa-296f9a1b1f3b",
        "text": "Another interesting expressiveness dimension is reusing a transformation, i.e. applying a transformation to multiple columns\/tables\/column-name-schemes. You could ask how DSLs would express\n\n• Apply a transformation to all columns whose name ends with \"_date\". An interesting one would be the 'add 1 month' transformation where '2020-01-30' becomes '2020-02-28'.\n• Apply a transformation to multiple tables, given a list of table names.\n• Create a function that creates a column Z = {X - Y when both nonzero; missing value otherwise) --- but the column names X, Y, and Z are parameters, specified by the user at call time. (Harder in DSLs that expect column names as literals, such as SQL or dplyr).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g1930c667fbd",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/1930c667fbd3884fd581e95eb4d5b15c.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "Sietse",
            "real_name": "Sietse Brouwer",
            "display_name": "Sietse Brouwer",
            "team": "T5TCAFTA9",
            "name": "sbbrouwer",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604366257.141100",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ItpN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another interesting expressiveness dimension is reusing a transformation, i.e. applying a transformation to multiple columns\/tables\/column-name-schemes. You could ask how DSLs would express\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Apply a transformation to all columns whose name ends with \"_date\". An interesting one would be the 'add 1 month' transformation where '2020-01-30' becomes '2020-02-28'."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Apply a transformation to multiple tables, given a list of table names."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Create a function that creates a column Z = {X - Y when both nonzero; missing value otherwise) --- but the column names X, Y, and Z are parameters, specified by the user at call time. (Harder in DSLs that expect column names as literals, such as SQL or dplyr)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1606831046.316700",
        "client_msg_id": "778ddd2e-dae8-451a-b19d-0a94c78aa1d9",
        "text": "Quite interesting!\nI think your \"problem\" that the students would \"just sort the list instead of demonstrating the algorithm that they're meant to learn\" is a feature disguised as a bug. When someone says to you \"this list needs to be sorted\", it's natural to sort the list in an ad-hoc way. Personally I even do this when I'm programming: if I'm trying to write an alg for some tricky general case, I first try to do a case or two by hand.\nSo I'd say it might be good to allow people to start with the ad-hoc\/by-hand sorting, and then try to generalize slowly.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606827121.315700",
        "parent_user_id": "U0139HUPMQ9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1N2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quite interesting!\nI think your \"problem\" that the students would \"just sort the list instead of demonstrating the algorithm that they're meant to learn\" is a feature disguised as a bug. When someone says to you \"this list needs to be sorted\", it's natural to sort the list in an ad-hoc way. Personally I even do this when I'm programming: if I'm trying to write an alg for some tricky general case, I first try to do a case or two by hand.\nSo I'd say it might be good to allow people to start with the ad-hoc\/by-hand sorting, and then try to generalize slowly."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606840431.317400",
        "client_msg_id": "b4c1d55c-53fd-4630-8fe9-67b360fcbb66",
        "text": "Teaser #2 is up! <https:\/\/twitter.com\/ibdknox\/status\/1333810023256899584>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "reply_count": 20,
        "reply_users_count": 6,
        "latest_reply": "1607104557.366100",
        "reply_users": [
            "UEBG0NPDK",
            "UDQBTJ211",
            "U016VUZGUUQ",
            "UA14TGLTC",
            "U8A5MS6R1",
            "UHWC9PXBL"
        ],
        "replies": [
            {
                "user": "UEBG0NPDK",
                "ts": "1606840488.317600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606843452.323800"
            },
            {
                "user": "UDQBTJ211",
                "ts": "1606847195.328100"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606853542.328300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606871584.337400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606871803.337600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606871846.337800"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606871912.338000"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606871927.338200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606874190.339300"
            },
            {
                "user": "U016VUZGUUQ",
                "ts": "1606877591.340300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606950700.346300"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606950833.346500"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1606950878.346800"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1606954855.347200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606981511.349700"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1607014389.350600"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1607046604.357500"
            },
            {
                "user": "UHWC9PXBL",
                "ts": "1607099182.365600"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1607104557.366100"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/ibdknox|@ibdknox>: Peek #2 \n\nIf programs spoke our language, we could have a little fun telling them about the world... <https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1333807484591427585\/pu\/img\/UutCWzeobvRsfgmi.jpg>",
                "ts": 1606840065,
                "author_name": "Chris Granger",
                "author_link": "https:\/\/twitter.com\/ibdknox\/status\/1333810023256899584",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/515964179128143872\/KjpYt9xi_normal.jpeg",
                "author_subname": "@ibdknox",
                "text": "Peek #2 \n\nIf programs spoke our language, we could have a little fun telling them about the world...",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/ibdknox\/status\/1333810023256899584",
                "thumb_url": "https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1333807484591427585\/pu\/img\/UutCWzeobvRsfgmi.jpg",
                "thumb_width": 960,
                "thumb_height": 720,
                "video_html_width": 960,
                "video_html_height": 720,
                "video_html": "<video controls poster=\"https:\/\/pbs.twimg.com\/ext_tw_video_thumb\/1333807484591427585\/pu\/img\/UutCWzeobvRsfgmi.jpg\" width=\"960\" height=\"720\"><source type=\"video\/mp4\" src=\"https:\/\/video.twimg.com\/ext_tw_video\/1333807484591427585\/pu\/vid\/960x720\/BV1G6UdD9MqNnYMT.mp4?tag=10\"><\/video>",
                "id": 1,
                "original_url": "https:\/\/twitter.com\/ibdknox\/status\/1333810023256899584",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MmHFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Teaser #2 is up! "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/ibdknox\/status\/1333810023256899584"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U8A5MS6R1",
                    "U013ZLJARC7",
                    "UEQG5HC1W"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "thinking_face",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606840488.317600",
        "client_msg_id": "1e7d02d3-5bc3-4d00-a6aa-a996336da94d",
        "text": "<@UDZRT1962> also followed up with how flammable is defined: <https:\/\/twitter.com\/joshuafcole\/status\/1333810395694284801>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "attachments": [
            {
                "fallback": "<https:\/\/twitter.com\/joshuafcole|@joshuafcole>: <https:\/\/twitter.com\/ibdknox|@ibdknox> If you’re curious, this is how we defined flammable: <https:\/\/pbs.twimg.com\/media\/EoKlaowVgAA3DLX.png>",
                "ts": 1606840153,
                "author_name": "Joshua Cole",
                "author_link": "https:\/\/twitter.com\/joshuafcole\/status\/1333810395694284801",
                "author_icon": "https:\/\/pbs.twimg.com\/profile_images\/870398762245476355\/ymWIwkQn_normal.jpg",
                "author_subname": "@joshuafcole",
                "text": "<https:\/\/twitter.com\/ibdknox|@ibdknox> If you’re curious, this is how we defined flammable: <https:\/\/pbs.twimg.com\/media\/EoKlaowVgAA3DLX.png>",
                "service_name": "twitter",
                "service_url": "https:\/\/twitter.com\/",
                "from_url": "https:\/\/twitter.com\/joshuafcole\/status\/1333810395694284801",
                "image_url": "https:\/\/pbs.twimg.com\/media\/EoKlaowVgAA3DLX.png",
                "image_width": 830,
                "image_height": 268,
                "image_bytes": 11778,
                "id": 1,
                "original_url": "https:\/\/twitter.com\/joshuafcole\/status\/1333810395694284801",
                "footer": "Twitter",
                "footer_icon": "https:\/\/a.slack-edge.com\/80588\/img\/services\/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lBtq3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDZRT1962"
                            },
                            {
                                "type": "text",
                                "text": " also followed up with how flammable is defined: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/twitter.com\/joshuafcole\/status\/1333810395694284801"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1606841442.323000",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1606841585.000000"
        },
        "client_msg_id": "1D615DED-4A4C-437B-A5EB-FA839C501EA3",
        "text": "By the continuum I meant the live link between x -&gt; y-&gt; z. What I was wondering was, how will you store the live edits in a way that an end result gets stored statically and then proceeds with that value as the new starting point. Think breaking down x -&gt; y -&gt; z as x -&gt; y and then using the new y produced after some interaction as input to a new function that produces z. If this attempt fails to convey, I will whip up some codepen to illustrate what I mean.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606677847.281500",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=0t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By the continuum I meant the live link between x -> y-> z. What I was wondering was, how will you store the live edits in a way that an end result gets stored statically and then proceeds with that value as the new starting point. Think breaking down x -> y -> z as x -> y and then using the new y produced after some interaction as input to a new function that produces z. If this attempt fails to convey, I will whip up some codepen to illustrate what I mean."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606843452.323800",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1606843607.000000"
        },
        "client_msg_id": "56cec024-8cef-4f20-b4d6-21b9ee497b12",
        "text": "There are a couple of cool things happening here.\n1. We’re seeing declarative statements about the world “buttons are flammable.” We get to define concepts in the world and then apply them to things.\n2. There are contextual statements. We make a button and at the end say “show the count of clicks on it”\n3. The schematic has multiple steps here and slows down replay so you can see the whole thing execute correctly.\n4. This is the first glimpse of part nodes in the schematic and that parts can be marked as optional (which is why “on fire” has that toggle)\n5. This shows relationship wires (as attached to parts) and signal wires (as attached to processes). Signal wires “fire” when they’re activated.\n6. This process doesn’t just update a property value, it changes which parts are active\n7. By the end we’ve seen multiple types of logic compose into a single object without any effort.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BuG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a couple of cool things happening here.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We’re seeing declarative statements about the world “buttons are flammable.” We get to define concepts in the world and then apply them to things."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "There are contextual statements. We make a button and at the end say “show the count of clicks on it”"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The schematic has multiple steps here and slows down replay so you can see the whole thing execute correctly."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This is the first glimpse of part nodes in the schematic and that parts can be marked as optional (which is why “on fire” has that toggle)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This shows relationship wires (as attached to parts) and signal wires (as attached to processes). Signal wires “fire” when they’re activated."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This process doesn’t just update a property value, it changes which parts are active"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "By the end we’ve seen multiple types of logic compose into a single object without any effort."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DX39SB33",
        "type": "message",
        "ts": "1606844487.327800",
        "client_msg_id": "e9fe0c6a-6cd5-4dce-98e8-0994c4ba78ce",
        "text": "Hey everyone, my business partner <@U016LEA3J1H> and I have been chipping away at a new product called Gadget. It's basically a \"backend builder\" (hosted db, models, CRUD and custom API, Admin UI) that helps developers build feature rich backends quickly. It speeds up your work by reducing the need for boilerplate, glue code, or bits and pieces you've built a million times (auth, permissions, ...) and it leaves you to code the unique bits of the problem. The best way to think about Gadget is that it's LOW CODE FOR DEVELOPERS. We believe that there's a certain way of thinking, modelling and coding that's necessary to build scalable applications. As such, we're not necessarily huge fans of the no-code movement as a whole, but there are certain aspects we like and we've tried to bring that to a developer audience.\n\nThis demo is ten minutes long. And I build a real, live app in that time. The alpha is open to anyone who wants to give us feedback and totally free. DM me if you're interested. Tx for your time and feedback.\n\n<https:\/\/www.loom.com\/share\/75738fd721e6447d929ec3e9b8f7c0ea>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a91484b52662",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-28\/1460486128034_a91484b526620f0ec494_72.jpg",
            "first_name": "Mo",
            "real_name": "Mo",
            "display_name": "Mo",
            "team": "T5TCAFTA9",
            "name": "mo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606844487.327800",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1612301081.034500",
        "reply_users": [
            "U0123H7JRDM",
            "U01DX39SB33",
            "UUB7RA7PF",
            "UMYKGHYBA",
            "UD6EXQVM0"
        ],
        "replies": [
            {
                "user": "U0123H7JRDM",
                "ts": "1606855508.329500"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606856415.329700"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606856429.329900"
            },
            {
                "user": "U0123H7JRDM",
                "ts": "1606860338.330800"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1606899997.341500"
            },
            {
                "user": "UMYKGHYBA",
                "ts": "1606904984.342400"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1606905543.342800"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606922747.343900"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606922770.344100"
            },
            {
                "user": "UMYKGHYBA",
                "ts": "1606934188.345400"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606935703.345600"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606935704.345800"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1606935708.346000"
            },
            {
                "user": "UD6EXQVM0",
                "ts": "1612148852.022700"
            },
            {
                "user": "U01DX39SB33",
                "ts": "1612301081.034500"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "Loom",
                "service_url": "https:\/\/www.loom.com",
                "title": "Create a new App - Gadget",
                "title_link": "https:\/\/www.loom.com\/share\/75738fd721e6447d929ec3e9b8f7c0ea",
                "thumb_url": "https:\/\/cdn.loom.com\/sessions\/thumbnails\/75738fd721e6447d929ec3e9b8f7c0ea-00001.gif",
                "thumb_width": 1024,
                "thumb_height": 640,
                "fallback": "Loom Video: Create a new App - Gadget",
                "video_html": "<iframe src=\"https:\/\/www.loom.com\/embed\/75738fd721e6447d929ec3e9b8f7c0ea?autoplay=1\" frameborder=\"0\" width=\"1152\" height=\"864\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe>",
                "video_html_width": 1152,
                "video_html_height": 864,
                "from_url": "https:\/\/www.loom.com\/share\/75738fd721e6447d929ec3e9b8f7c0ea",
                "id": 1,
                "original_url": "https:\/\/www.loom.com\/share\/75738fd721e6447d929ec3e9b8f7c0ea"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4yOD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey everyone, my business partner "
                            },
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " and I have been chipping away at a new product called Gadget. It's basically a \"backend builder\" (hosted db, models, CRUD and custom API, Admin UI) that helps developers build feature rich backends quickly. It speeds up your work by reducing the need for boilerplate, glue code, or bits and pieces you've built a million times (auth, permissions, ...) and it leaves you to code the unique bits of the problem. The best way to think about Gadget is that it's LOW CODE FOR DEVELOPERS. We believe that there's a certain way of thinking, modelling and coding that's necessary to build scalable applications. As such, we're not necessarily huge fans of the no-code movement as a whole, but there are certain aspects we like and we've tried to bring that to a developer audience.\n\nThis demo is ten minutes long. And I build a real, live app in that time. The alpha is open to anyone who wants to give us feedback and totally free. DM me if you're interested. Tx for your time and feedback.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.loom.com\/share\/75738fd721e6447d929ec3e9b8f7c0ea"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U0123H7JRDM"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U01BAS8GU86",
                    "UUB7RA7PF",
                    "UMYKGHYBA",
                    "UD6EXQVM0"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1606847195.328100",
        "client_msg_id": "784951ad-695e-460f-bef1-5b93273cceb9",
        "text": "It seems like people are really getting thrown by the natural language. They are asking \"is this GPT-3?\" etc. But as I understand it it's sort of just a neat syntax for \"Button implements IFlammable\". Programmer brains seem to be happy with \"is_funny == true\" but confused by \"is funny\" - like, how does it know what \"funny\" means?? But these are just words that are explained to the computer elsewhere.\n\nHave you noticed a difference in reaction from coders vs non-coders?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MWVp+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like people are really getting thrown by the natural language. They are asking \"is this GPT-3?\" etc. But as I understand it it's sort of just a neat syntax for \"Button implements IFlammable\". Programmer brains seem to be happy with \"is_funny == true\" but confused by \"is funny\" - like, how does it know what \"funny\" means?? But these are just words that are explained to the computer elsewhere.\n\nHave you noticed a difference in reaction from coders vs non-coders?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U019PRL1BNU",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1606853542.328300",
        "client_msg_id": "eb20752c-8113-4d77-a15f-f676c120e646",
        "text": "As on example, the tokenization aspect of natural language interfaces feels sketchy to me. I would have to be really familiar with the system's grammar to be confident that it and I will parse a sentence the same way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iep0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As on example, the tokenization aspect of natural language interfaces feels sketchy to me. I would have to be really familiar with the system's grammar to be confident that it and I will parse a sentence the same way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1606855508.329500",
        "client_msg_id": "3734F0A5-5C00-40B9-8119-BB7C4DD92C0A",
        "text": "Impressive work! How long have you been developing your product so far?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606844487.327800",
        "parent_user_id": "U01DX39SB33",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JuPuK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Impressive work! How long have you been developing your product so far?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DX39SB33",
        "type": "message",
        "ts": "1606856415.329700",
        "client_msg_id": "f53e38db-05d0-4a7e-8768-47da98a68e44",
        "text": "six months'ish",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a91484b52662",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-28\/1460486128034_a91484b526620f0ec494_72.jpg",
            "first_name": "Mo",
            "real_name": "Mo",
            "display_name": "Mo",
            "team": "T5TCAFTA9",
            "name": "mo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606844487.327800",
        "parent_user_id": "U01DX39SB33",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q+y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "six months'ish"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DX39SB33",
        "type": "message",
        "ts": "1606856429.329900",
        "client_msg_id": "036c3af9-abb6-43b2-9686-66288ef36898",
        "text": "want to give it a twirl? Alpha is open to all, just need to set you up",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "a91484b52662",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-10-28\/1460486128034_a91484b526620f0ec494_72.jpg",
            "first_name": "Mo",
            "real_name": "Mo",
            "display_name": "Mo",
            "team": "T5TCAFTA9",
            "name": "mo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606844487.327800",
        "parent_user_id": "U01DX39SB33",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8JD0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "want to give it a twirl? Alpha is open to all, just need to set you up"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0123H7JRDM",
        "type": "message",
        "ts": "1606860338.330800",
        "client_msg_id": "51808B59-6437-4E3D-BD96-12F7ADB46DFC",
        "text": "Yes I want to give it a twirl",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "533c1a6943bf",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-03-16\/8613805779220_533c1a6943bfc0b7f150_72.jpg",
            "first_name": "Maikel",
            "real_name": "Maikel van de Lisdonk",
            "display_name": "Maikel",
            "team": "T5TCAFTA9",
            "name": "maikel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606844487.327800",
        "parent_user_id": "U01DX39SB33",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gvz6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes I want to give it a twirl"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1606862688.331100",
        "client_msg_id": "8dd76dcb-b1d5-48e5-aea1-b46408cf171d",
        "text": "Suppose you write f(g(x)). That gets compiled, essentially, to the following:\nlet temp1 = g(x)\nlet result2 = f(temp1)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606677847.281500",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e2jHq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Suppose you write f(g(x)). That gets compiled, essentially, to the following:\nlet temp1 = g(x)\nlet result2 = f(temp1)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1606862799.331300",
        "client_msg_id": "644bc71a-253a-43d5-b23b-3d3eeb5bb089",
        "text": "Do you forsee problems with that? :sweat_smile: let me know if so...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606677847.281500",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ouj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you forsee problems with that? "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile",
                                "unicode": "1f605"
                            },
                            {
                                "type": "text",
                                "text": " let me know if so..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U017GNJM021",
        "type": "message",
        "ts": "1606862846.331500",
        "client_msg_id": "3b811b82-10f9-4a2f-9cb4-007fc883364d",
        "text": "Apologies if I am continuing to be slow...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gada15ee32be",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ada15ee32bea73f6cfe00c7e36819a68.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "",
            "real_name": "hamish todd",
            "display_name": "hamish todd",
            "team": "T5TCAFTA9",
            "name": "hamish.todd1",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606677847.281500",
        "parent_user_id": "U017GNJM021",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pu6V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Apologies if I am continuing to be slow..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UL5AX4G2H",
        "type": "message",
        "ts": "1606863294.337100",
        "client_msg_id": "e83bbfb5-e6fb-49d8-9622-6294d1e7187a",
        "text": "Most of what I write about on Codefaster is useful, but not Future of Coding grad changing how people think about code, but my latest series definitely qualifies.\nIt's about a completely new testing methodology that doesn't use \"tests as functions with asserts\" like every other testing methodology I've seen, but tests as JSON data.\n\nThe coolest part about it? When tests are json data, the computer can generate the \"expected test output\" for you automatically, so all you need to do is specify the test and the computer fills out what it \"should be.\" Then as a human, you can just verify it with your eyeballs (and in many cases, another program) and not have to type it out or extract correct answers from assert messages.\n<https:\/\/codefaster.substack.com\/p\/wicked-fast-testing-part-1>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b05739c44158",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-12-05\/1552783044467_b05739c44158d860f3bd_72.png",
            "first_name": "",
            "real_name": "Tyler Adams",
            "display_name": "Tyler Adams",
            "team": "T5TCAFTA9",
            "name": "coppero1237",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606863294.337100",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1606918446.343300",
        "reply_users": [
            "U01DUNFS2N4",
            "UUB7RA7PF",
            "UL5AX4G2H"
        ],
        "replies": [
            {
                "user": "U01DUNFS2N4",
                "ts": "1606877423.340000"
            },
            {
                "user": "UUB7RA7PF",
                "ts": "1606898639.341000"
            },
            {
                "user": "UL5AX4G2H",
                "ts": "1606904389.342200"
            },
            {
                "user": "UL5AX4G2H",
                "ts": "1606918446.343300"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "title": "Wicked Fast Testing: Part 1",
                "title_link": "https:\/\/codefaster.substack.com\/p\/wicked-fast-testing-part-1",
                "text": "“1 hour each day was spent rewriting the code. 7 hours was spent rewriting the tests.” I’m really excited about this new series...",
                "fallback": "Wicked Fast Testing: Part 1",
                "thumb_url": "https:\/\/cdn.substack.com\/image\/fetch\/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep\/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc21d3e2d-bc9d-401f-bbe8-225d0d0643d9_256x256.png",
                "from_url": "https:\/\/codefaster.substack.com\/p\/wicked-fast-testing-part-1",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "https:\/\/bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com\/public\/images\/d8afe861-b0e8-49ce-b80e-2d642b648703\/apple-touch-icon-57x57.png",
                "service_name": "codefaster.substack.com",
                "id": 1,
                "original_url": "https:\/\/codefaster.substack.com\/p\/wicked-fast-testing-part-1"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MDBw8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of what I write about on Codefaster is useful, but not Future of Coding grad changing how people think about code, but my latest series definitely qualifies.\nIt's about a completely new testing methodology that doesn't use \"tests as functions with asserts\" like every other testing methodology I've seen, but tests as JSON data.\n\nThe coolest part about it? When tests are json data, the computer can generate the \"expected test output\" for you automatically, so all you need to do is specify the test and the computer fills out what it \"should be.\" Then as a human, you can just verify it with your eyeballs (and in many cases, another program) and not have to type it out or extract correct answers from assert messages.\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/codefaster.substack.com\/p\/wicked-fast-testing-part-1"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606871584.337400",
        "client_msg_id": "cde8ac96-99d3-485c-b452-0fd0db69f136",
        "text": "<@U016VUZGUUQ> Yeah, we’re being very deliberate to make sure you don’t guess at what the system understood. That box under the input shows our interpretation, which is completely without ambiguity. You can actually pop each of those steps open and see their implementations too if you’re unsure what those do.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BOt8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, we’re being very deliberate to make sure you don’t guess at what the system understood. That box under the input shows our interpretation, which is completely without ambiguity. You can actually pop each of those steps open and see their implementations too if you’re unsure what those do."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U016VUZGUUQ",
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606871803.337600",
        "client_msg_id": "b23c23f2-9a4b-4c08-9619-18abb20d085c",
        "text": "<@UDQBTJ211> Yeah, it is kind of interesting that while we understand the notion of recursive definition in tons of domains - including everyday programming - people seem to forget it here. :slightly_smiling_face: We haven’t explicitly spoken to a lot of non-coders since our original intent has been to build a system for more technical folks this time around. That being said, the response from both camps has been shockingly accepting. We’ve only had a few people be staunchly opposed. A lot of cautious skepticism, but I actually think that’s the right reaction to have. Traditionally systems like this have had a lot of really awful caveats and it’s up to us to show that’s not true this go around.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e1x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, it is kind of interesting that while we understand the notion of recursive definition in tons of domains - including everyday programming - people seem to forget it here. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " We haven’t explicitly spoken to a lot of non-coders since our original intent has been to build a system for more technical folks this time around. That being said, the response from both camps has been shockingly accepting. We’ve only had a few people be staunchly opposed. A lot of cautious skepticism, but I actually think that’s the right reaction to have. Traditionally systems like this have had a lot of really awful caveats and it’s up to us to show that’s not true this go around."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606871846.337800",
        "client_msg_id": "f06c0146-40ce-489f-9188-9dabb97eea3f",
        "text": "An interesting question to ask here from the coder\/non-coder perspective: is this code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fxnh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An interesting question to ask here from the coder\/non-coder perspective: is this code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606871912.338000",
        "client_msg_id": "1e487d56-fa3e-4f08-af12-c5cfa859d317",
        "text": "I would argue it unequivocally is, you can very nearly do a direct translation from our processes to an imperative language that has async\/await and some sort of reactive library, but a lot of folks seem to interpret this as “no code”",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/TeS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would argue it unequivocally is, you can very nearly do a direct translation from our processes to an imperative language that has async\/await and some sort of reactive library, but a lot of folks seem to interpret this as “no code”"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606871927.338200",
        "client_msg_id": "44959e8e-3d74-43dc-a6ec-22dc843956af",
        "text": "It’ll be interesting to see how that plays out as we go further.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jlnwQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It’ll be interesting to see how that plays out as we go further."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606873703.338600",
        "client_msg_id": "16901b27-c2ca-44cf-9421-7c8e794275fe",
        "text": "Reminds me a bit of human resource machine: <https:\/\/tomorrowcorporation.com\/humanresourcemachine>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606827121.315700",
        "parent_user_id": "U0139HUPMQ9",
        "attachments": [
            {
                "title": "Tomorrow Corporation  :  Human Resource Machine",
                "title_link": "https:\/\/tomorrowcorporation.com\/humanresourcemachine",
                "text": "Tomorrow Corporation is an independent game developer behind indie games Little Inferno and Human Resource Machine",
                "fallback": "Tomorrow Corporation  :  Human Resource Machine",
                "from_url": "https:\/\/tomorrowcorporation.com\/humanresourcemachine",
                "service_icon": "https:\/\/tomorrowcorporation.com\/blog\/wp-content\/themes\/tcTheme2\/images\/favicon.ico",
                "service_name": "tomorrowcorporation.com",
                "id": 1,
                "original_url": "https:\/\/tomorrowcorporation.com\/humanresourcemachine"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j1yI4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me a bit of human resource machine: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/tomorrowcorporation.com\/humanresourcemachine"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1606874117.338900",
        "client_msg_id": "69cd13d9-ec12-4519-8f28-cf4524075437",
        "text": "Question: What do you use to get nicely formatted HTML and links between methods for mu code?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g0E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question: What do you use to get nicely formatted HTML and links between methods for mu code?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFB8STN7K",
        "type": "message",
        "ts": "1606874121.339100",
        "client_msg_id": "3ed33c40-b1f8-468d-ad82-566d130f0e76",
        "text": "<@U01BSAKUDJQ> those are all great ideas! One weakness in the benchmark is that I don’t have many tasks that really stress the expressiveness of turing-incomplete langs like SQL\/datalog. I like “transform all columns with _date in the name” because there’s a level of reflection required that I think SQL\/datalog don’t have.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "ge240a8e5a8f",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/ce240a8e5a8fdc65e86bbb869975ccfe.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Will",
            "real_name": "Will Crichton",
            "display_name": "Will",
            "team": "T5TCAFTA9",
            "name": "wcrichto",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1604366257.141100",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vUiT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BSAKUDJQ"
                            },
                            {
                                "type": "text",
                                "text": " those are all great ideas! One weakness in the benchmark is that I don’t have many tasks that really stress the expressiveness of turing-incomplete langs like SQL\/datalog. I like “transform all columns with _date in the name” because there’s a level of reflection required that I think SQL\/datalog don’t have."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1606874190.339300",
        "client_msg_id": "d7c1757a-7695-4ec8-a93d-c874b6426827",
        "text": "I feel so Informed.  :joy:\n\nThough you haven't shown this yet, the main code-ish quality that I hope for in UIs like this is being able to get a sense of everything that has been said.  What is actually in this document?  With a lot of tools, inspector sniffing is the only way to find out and even then you don't know if a value is default, computed, or explicit.  Code, of course, answers the explicit part, but often thorough API knowledge is required to know even the most basic consequences.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nKRP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel so Informed.  "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThough you haven't shown this yet, the main code-ish quality that I hope for in UIs like this is being able to get a sense of everything that has been said.  What is actually in this document?  With a lot of tools, inspector sniffing is the only way to find out and even then you don't know if a value is default, computed, or explicit.  Code, of course, answers the explicit part, but often thorough API knowledge is required to know even the most basic consequences."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1606874467.339500",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606876654.000000"
        },
        "client_msg_id": "b6085760-e5ea-4caa-84c3-be428d6b5e5f",
        "text": "<https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/update_html|https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/update_html>\n\n<https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/linkify.cc|https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/linkify.cc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ypQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/update_html",
                                "text": "https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/update_html"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/linkify.cc",
                                "text": "https:\/\/github.com\/akkartik\/mu\/blob\/main\/tools\/linkify.cc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1606877423.340000",
        "edited": {
            "user": "U01DUNFS2N4",
            "ts": "1606877448.000000"
        },
        "client_msg_id": "7ac906de-02fb-4789-8ea2-95b1fd44e697",
        "text": "Dope. I love it. I've been thinking for a while that I should write an extension to  my repl capturing the previous statement and adding it + the result as an assert to my test suite. This is slightly different, but similar idea.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606863294.337100",
        "parent_user_id": "UL5AX4G2H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zHCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dope. I love it. I've been thinking for a while that I should write an extension to  my repl capturing the previous statement and adding it + the result as an assert to my test suite. This is slightly different, but similar idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL5AX4G2H"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1606877591.340300",
        "client_msg_id": "1de17f2f-fd90-4b6d-8ae0-b43d4d015517",
        "text": "It's absolutely, objectively code, in the same sense that a well-specified state machine diagram is code. But the common definition of \"code\" is specifically funny-looking text, so good luck getting non-CS people to grok our idea of what is and isn't code. I don't know how you deal with that from a marketing perspective.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lYJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's absolutely, objectively code, in the same sense that a well-specified state machine diagram is code. But the common definition of \"code\" is specifically funny-looking text, so good luck getting non-CS people to grok our idea of what is and isn't code. I don't know how you deal with that from a marketing perspective."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1606889171.340600",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1606930466.000000"
        },
        "client_msg_id": "81d1e730-ad31-4cb1-bf52-849df0ee76e4",
        "text": "Rather than do a new post, I thought I'd just pile on this one. AOC day 1 in uCISC: <https:\/\/github.com\/grokthis\/ucisc\/blob\/master\/examples\/aoc\/2020\/day_1.ucisc> (also needs the string and number libs in <https:\/\/github.com\/grokthis\/ucisc\/tree\/master\/app\/lib>). 133 instructions total after being compiled. We will see how far I can take this on my barely bootstrapped 16-bit processor :joy:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gic",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rather than do a new post, I thought I'd just pile on this one. AOC day 1 in uCISC: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/grokthis\/ucisc\/blob\/master\/examples\/aoc\/2020\/day_1.ucisc"
                            },
                            {
                                "type": "text",
                                "text": " (also needs the string and number libs in "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/grokthis\/ucisc\/tree\/master\/app\/lib"
                            },
                            {
                                "type": "text",
                                "text": "). 133 instructions total after being compiled. We will see how far I can take this on my barely bootstrapped 16-bit processor "
                            },
                            {
                                "type": "emoji",
                                "name": "joy",
                                "unicode": "1f602"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]