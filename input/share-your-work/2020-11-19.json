[
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1605777069.249100",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1605777167.000000"
        },
        "client_msg_id": "7c9b411e-5a5c-46fd-9401-755f7a8e13f8",
        "text": "Hey man, I like your thought here and definitely like how you guys have thought of it as a DSL with a compiler creating the output. One thing I have found out as these sort of websites grow in complexity is that it becomes really hard to reason about how components are wired together. Like if you have n number of pages referring m different components, you have n * m different components getting referred and with each layer of recursion on inclusion and cross referencing this really becomes an unwieldly graph. Have you thought about any way to control this kind of complexity? Curious because it is a problem I’m trying to reason about and solve as it reappears in many software engineering contexts.\n\nAnother way I might frame is that, have you thought of any visual ways to represent the dependency graph of the components that the compiler weaves.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605630429.212300",
        "parent_user_id": "UUB7RA7PF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gM2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey man, I like your thought here and definitely like how you guys have thought of it as a DSL with a compiler creating the output. One thing I have found out as these sort of websites grow in complexity is that it becomes really hard to reason about how components are wired together. Like if you have n number of pages referring m different components, you have n * m different components getting referred and with each layer of recursion on inclusion and cross referencing this really becomes an unwieldly graph. Have you thought about any way to control this kind of complexity? Curious because it is a problem I’m trying to reason about and solve as it reappears in many software engineering contexts.\n\nAnother way I might frame is that, have you thought of any visual ways to represent the dependency graph of the components that the compiler weaves."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605805498.249900",
        "client_msg_id": "d352e858-d697-4494-a82b-cf2d532dd675",
        "text": "Browser based at the moment.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8rP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Browser based at the moment."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605805741.250100",
        "client_msg_id": "1eb05987-bcf2-4705-9737-4d34b086b0ec",
        "text": "Yeah the original mad-lib version of Eve was fun :slightly_smiling_face: A big problem with it though is that while it read like english, it didn’t have the mental model that people actually have. As you pointed out, this definitely isn’t datalog, it’s basically just an imperative language (though with some interesting twists that we’ll see later). That change makes actually using these two things wildly different. As an example, we sat down to write a few larger programs, one of which was an implementation of the board game terraforming mars. The result was something that reads shockingly close to what you see in the game manual. The Eve version would’ve looked nothing like it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ijPgf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah the original mad-lib version of Eve was fun "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " A big problem with it though is that while it read like english, it didn’t have the mental model that people actually have. As you pointed out, this definitely isn’t datalog, it’s basically just an imperative language (though with some interesting twists that we’ll see later). That change makes actually using these two things wildly different. As an example, we sat down to write a few larger programs, one of which was an implementation of the board game terraforming mars. The result was something that reads shockingly close to what you see in the game manual. The Eve version would’ve looked nothing like it."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605806186.250300",
        "client_msg_id": "c4fbd3fa-5ade-4d16-b43b-33266cffe249",
        "text": "the other side of the equation is that the tooling itself is very different here. The schematic constantly adapts to what you’re focused on at the moment. This helps address the problem I bring up a few minutes after where you linked in that video. Datalog scatters logic all over the place and we never could really figure out good way to help you answer the question “what is this doing?” But we can with imperative English. For one, it’s largely self-summarizing, but even more importantly you are constructing intentional lines of execution rather than accidental ones. With some clever analysis and tooling on top, we can take advantage of that to tell you at any point in the system what’s important. What are the effects of what I’m looking at right now? If I change this what else will change? While it’s technically possible to know that in a datalog program, it’s hard to explain it to the user programmatically because there’s nothing that ties it together. Processes fix that for us and so our tools can do some really awesome things.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q5h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the other side of the equation is that the tooling itself is very different here. The schematic constantly adapts to what you’re focused on at the moment. This helps address the problem I bring up a few minutes after where you linked in that video. Datalog scatters logic all over the place and we never could really figure out good way to help you answer the question “what is this doing?” But we can with imperative English. For one, it’s largely self-summarizing, but even more importantly you are constructing intentional lines of execution rather than accidental ones. With some clever analysis and tooling on top, we can take advantage of that to tell you at any point in the system what’s important. What are the effects of what I’m looking at right now? If I change this what else will change? While it’s technically possible to know that in a datalog program, it’s hard to explain it to the user programmatically because there’s nothing that ties it together. Processes fix that for us and so our tools can do some really awesome things."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605806755.250500",
        "client_msg_id": "55979366-5a3c-4c13-b75e-6659f6147145",
        "text": "The other part of my argument against executable specifications (that they require knowing everything above where you’re currently reading) is helped by the schematic stuff I said above, but is also more fundamentally addressed by the semantics of gadgets and parts. Concepts are modeled as parts and you slot those into gadgets, which naturally turns monolithic specifications into small composable ones. To give an example, we could create a part for “wet” that has some specific behavior attached to it and then give that to any arbitrary thing in the system. This makes it truly behave like natural language where we don’t need to understand everything about “wet.” We can just take a dog and add the wet part to it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZX=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other part of my argument against executable specifications (that they require knowing everything above where you’re currently reading) is helped by the schematic stuff I said above, but is also more fundamentally addressed by the semantics of gadgets and parts. Concepts are modeled as parts and you slot those into gadgets, which naturally turns monolithic specifications into small composable ones. To give an example, we could create a part for “wet” that has some specific behavior attached to it and then give that to any arbitrary thing in the system. This makes it truly behave like natural language where we don’t need to understand everything about “wet.” We can just take a dog and add the wet part to it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605807969.250700",
        "client_msg_id": "74dea1c6-bddb-4f9c-a693-eda3c4e5e509",
        "text": "<@UK3LH8CF5> ^",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oIw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " ^"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1605811660.250900",
        "client_msg_id": "659700a5-1a45-4b87-be01-c2f4922bf2f6",
        "text": "Thanks, that's really instructive for understanding the difference. I am going to be really interested to see this play out. It seems like there is an interesting full circle going on here with the ECS system in light table (with some various obvious differences). But also interesting how you went from functional (aurora), to logical (eve), and now to imperative.\n\nDefinitely going to be interested to see how those twists and how the type system comes into play. I love the usage of a board game as an example. Seems like the right level of complexity, with clarity because it becomes really a translation problem. Can't wait to see more.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vgb4Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, that's really instructive for understanding the difference. I am going to be really interested to see this play out. It seems like there is an interesting full circle going on here with the ECS system in light table (with some various obvious differences). But also interesting how you went from functional (aurora), to logical (eve), and now to imperative.\n\nDefinitely going to be interested to see how those twists and how the type system comes into play. I love the usage of a board game as an example. Seems like the right level of complexity, with clarity because it becomes really a translation problem. Can't wait to see more."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1605837780.251500",
        "client_msg_id": "6f0360b0-a713-4b13-b991-ba69011bc675",
        "text": "Ah <@UEBG0NPDK>, what's the story with our old friend Scope?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nm9Nh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ", what's the story with our old friend Scope?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605839297.255600",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1605839396.000000"
        },
        "client_msg_id": "D6953C5C-B15D-4393-A00D-14D4980739F4",
        "text": "All gadgets exist in the global scope, locals use normal lexical scoping. Though we have been playing around on the tooling side to potentially make that feel like it’s stack scoped. Dunno if that’ll stick but it’s interesting. We’re explicitly shooting for a programmery crowd this time, so a little less worried about it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8e7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All gadgets exist in the global scope, locals use normal lexical scoping. Though we have been playing around on the tooling side to potentially make that feel like it’s stack scoped. Dunno if that’ll stick but it’s interesting. We’re explicitly shooting for a programmery crowd this time, so a little less worried about it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1605840374.255900",
        "client_msg_id": "534bd851-2d1f-4606-84ad-dfcd2fcc728a",
        "text": "\"Stack scoped\" like dynamically scoped?  Because dynamic scoping is totally underused in my honest opinion.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xr6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Stack scoped\" like dynamically scoped?  Because dynamic scoping is totally underused in my honest opinion."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605840501.256100",
        "client_msg_id": "12a0e253-a0f7-434d-ab1f-5232d23da1f3",
        "text": "Yeah, more or less. By using something outside of your scope you’re implicitly saying you require one of those, it’s then the job of the caller to ensure there’s one hanging around for you.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "91cO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, more or less. By using something outside of your scope you’re implicitly saying you require one of those, it’s then the job of the caller to ensure there’s one hanging around for you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605840613.256300",
        "client_msg_id": "4eaf73e6-a50d-43d9-833c-32b0586aea15",
        "text": "I think you can do it through tooling though, rather than taking on the downsides you normally end up with dynamic scope. You really are “passing all the way down”, you just don’t have to know about it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VOHig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you can do it through tooling though, rather than taking on the downsides you normally end up with dynamic scope. You really are “passing all the way down”, you just don’t have to know about it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1605841660.256500",
        "client_msg_id": "4b5fa0d9-867d-4e48-9b63-9773c9766d8d",
        "text": "<@UK3LH8CF5> fwiw, this ends up being a nice mixture of declarative and imperative. Sometimes you just make statements about the world, others you describe processes that mutate it. One of the biggest learning for us was that the real magic happens in the middle, not at any of the ends.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jc6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " fwiw, this ends up being a nice mixture of declarative and imperative. Sometimes you just make statements about the world, others you describe processes that mutate it. One of the biggest learning for us was that the real magic happens in the middle, not at any of the ends."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    }
]