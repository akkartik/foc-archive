[
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1736503783.713919",
        "client_msg_id": "F78FA714-63F3-4FF3-882A-A7A6F7D0CD7A",
        "text": "There are a few ways to interpret what’s going on with quantum mechanics.  I don’t know of a consensus on which one’s right or how to tell.  Others here will know better.  Roughly I think it breaks out this way.  Either quantum indeterminacy is…\n• genuinely random or\n• decided by hidden magic we don’t know understand or\n• preserved distributing over the environment giving rise to many worlds.\nI hear that the math is cleanest for many worlds.  For random resolution, it’s hard to tell when exactly it happens.  Hidden magic would be the most satisfying if the magic could be reduced to some mechanism.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736035914.973789",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mfy3r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a few ways to interpret what’s going on with quantum mechanics."
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "text",
                                "text": "I don’t know of a consensus on which one’s right or how to tell."
                            },
                            {
                                "type": "text",
                                "text": "  Others here will know better"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "text",
                                "text": "Roughly I think it breaks out this way.  Either quantum "
                            },
                            {
                                "type": "text",
                                "text": "indeterminacy "
                            },
                            {
                                "type": "text",
                                "text": "is…\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "genuinely random"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "or"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "decided by hidden magic we don’t know understand or"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "preserved"
                                    },
                                    {
                                        "type": "text",
                                        "text": " distributing over "
                                    },
                                    {
                                        "type": "text",
                                        "text": "the environment "
                                    },
                                    {
                                        "type": "text",
                                        "text": "giving rise to many worlds."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hear that the math is cleanest for many worlds"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "  For random resolution, it’s hard to tell when exactly it happens"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "  Hidden magic would be the most satisfying if the magic could be reduced to some mechanism"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U086XAU4F0F",
        "type": "message",
        "ts": "1736529457.735829",
        "client_msg_id": "896c12ac-8352-4bda-894c-1c273d3ed6e2",
        "text": "I would say that's a reasonably good description. Wikipedia seems to list quite a few additional interpretations for QM, most of which I hadn't heard of. But yeah, basically there is no consensus, which is kind of funny as the 100th anniversary of QM is celebrated this year.\n\nIn practice most people do math according to the Copenhagen interpretation, which would be the \"genuinely random\" option. I don't know much about many worlds, but I think it's not been ruled out basically because it's so simple and it does explain everything. Many people (myself included) find it pretty unsatisfying.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "40a13ae16332",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-06\/8275207345584_40a13ae163326f644089_72.jpg",
            "first_name": "Márton",
            "real_name": "Márton Gunyhó",
            "display_name": "Márton Gunyhó",
            "team": "T5TCAFTA9",
            "name": "marci",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736035914.973789",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lWlyV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would say that's a reasonably good description. Wikipedia seems to list quite a few additional interpretations for QM, most of which I hadn't heard of. But yeah, basically there is no consensus, which is kind of funny as the 100th anniversary of QM is celebrated this year.\n\nIn practice most people do math according to the Copenhagen interpretation, which would be the \"genuinely random\" option. I don't know much about many worlds, but I think it's not been ruled out basically because it's so simple and it does explain everything. Many people (myself included) find it pretty unsatisfying."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U066TQFTXFT",
        "type": "message",
        "ts": "1736533499.731259",
        "client_msg_id": "6b010fd3-c835-41ed-875b-9cf200333da1",
        "text": "I don't know whether it's still up to date, but <https:\/\/www.hup.harvard.edu\/books\/9780674741133|Quantum Mechanics and Experience> is (was?) a good exposition.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g134b8de0ace",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/134b8de0aceaba40d4b30757a3bffd48.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Josh",
            "real_name": "Josh Bleecher Snyder",
            "display_name": "josharian",
            "team": "T5TCAFTA9",
            "name": "josharian",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736035914.973789",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wTlCf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know whether it's still up to date, but "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.hup.harvard.edu\/books\/9780674741133",
                                "text": "Quantum Mechanics and Experience"
                            },
                            {
                                "type": "text",
                                "text": " is (was?) a good exposition."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736542812.339489",
        "client_msg_id": "5459c89a-f434-4052-9861-0398d1d6a470",
        "text": "Thank you so much to the three of you for taking a look! Your feedback is super useful. I just made these changes:\n\n- Add a link to the central point at the top, so you can skip the intro and jump there.\n- Add a link at the top to a Programmers' Preface, for those that want a sort of \"diff\" between what they already know and what they might get from the treatise.\n- Add links to each of the pillars just after the main thesis, so you can jump to them without scrolling.\n\nI'll reply to your specific points in three different messages, to keep things a bit more organized.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3O5Ja",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you so much to the three of you for taking a look! Your feedback is super useful. I just made these changes:\n\n- Add a link to the central point at the top, so you can skip the intro and jump there.\n- Add a link at the top to a Programmers' Preface, for those that want a sort of \"diff\" between what they already know and what they might get from the treatise.\n- Add links to each of the pillars just after the main thesis, so you can jump to them without scrolling.\n\nI'll reply to your specific points in three different messages, to keep things a bit more organized."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736542876.719309",
        "client_msg_id": "fb3b49cd-0b87-4ddb-9ac8-961766850a78",
        "text": "<@UK3LH8CF5>\n- Excellent observation about the 10x claim. I put it there to set the bar really high in terms of how much simplification I demand myself from this conceptual framework. My intent is to get people raising an eyebrow, rather than getting them drooling thinking of a payoff. But I acknowledge this is risky. Behind this (and I just put this in the Programmers' Preface) is that if many of us feel in our bones that easily 90% of software is pure accidental complexity (in the Brooks sense), then a 10x leap can come through by finding a way to drop this baggage with better tools (both conceptual and embodied).\n\n- Concerning your point about bottlenecks, I am referring to the conceptual burden of designing and implementing a system, where human brains (not computer performance) seem to be the limiting factor of the speed of development. My personal experience with several of these processes tells me that the use of the wrong abstractions, and a certain unfounded fear of concrete data, is what kept many smart people going in circles around something that ended up being quite trivial once understood. I'd really like your take on what are the human bottlenecks you've experienced, because it's very likely I'm oversimplifying things here.\n\n- Concerning consistency (and I'm grateful you made it all the way to the bottom!), I studied CAP and PACELC in detail as I wrote this section. Concerning your specific point, if X sends a message to Y and Y fails to process it without X knowing, this failure of consistency can be understood as an absence of stopping (or lack of transactionality). This is akin to the second non-parallel source of inconsistency I mention: `Not checking for errors in multi-step sequences.`; the lack of acknowledgment from Y to X is to me exactly equivalent to a sequence happening in a single node that doesn't stop when an error happens in the middle. But I'm open to more challenge in that example, and if you can find other counterexamples to my point I'd really appreciate them. The whole section was an exercise in trying to think the problem of parallelism and consistency from first principles; in every instance of the problem I found, I could always narrow it down to calls being expanded simultaneously (even concurrently by a single processor) that touch related data. What was liberating to me of understanding like this is that the concept doesn't require partitioning, parallelism or concurrency, but it describes the problem at the core of them all.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cweb0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": "\n- Excellent observation about the 10x claim. I put it there to set the bar really high in terms of how much simplification I demand myself from this conceptual framework. My intent is to get people raising an eyebrow, rather than getting them drooling thinking of a payoff. But I acknowledge this is risky. Behind this (and I just put this in the Programmers' Preface) is that if many of us feel in our bones that easily 90% of software is pure accidental complexity (in the Brooks sense), then a 10x leap can come through by finding a way to drop this baggage with better tools (both conceptual and embodied).\n\n- Concerning your point about bottlenecks, I am referring to the conceptual burden of designing and implementing a system, where human brains (not computer performance) seem to be the limiting factor of the speed of development. My personal experience with several of these processes tells me that the use of the wrong abstractions, and a certain unfounded fear of concrete data, is what kept many smart people going in circles around something that ended up being quite trivial once understood. I'd really like your take on what are the human bottlenecks you've experienced, because it's very likely I'm oversimplifying things here.\n\n- Concerning consistency (and I'm grateful you made it all the way to the bottom!), I studied CAP and PACELC in detail as I wrote this section. Concerning your specific point, if X sends a message to Y and Y fails to process it without X knowing, this failure of consistency can be understood as an absence of stopping (or lack of transactionality). This is akin to the second non-parallel source of inconsistency I mention: "
                            },
                            {
                                "type": "text",
                                "text": "Not checking for errors in multi-step sequences.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; the lack of acknowledgment from Y to X is to me exactly equivalent to a sequence happening in a single node that doesn't stop when an error happens in the middle. But I'm open to more challenge in that example, and if you can find other counterexamples to my point I'd really appreciate them. The whole section was an exercise in trying to think the problem of parallelism and consistency from first principles; in every instance of the problem I found, I could always narrow it down to calls being expanded simultaneously (even concurrently by a single processor) that touch related data. What was liberating to me of understanding like this is that the concept doesn't require partitioning, parallelism or concurrency, but it describes the problem at the core of them all."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736542922.775369",
        "edited": {
            "user": "U0887QU9G2V",
            "ts": "1736543260.000000"
        },
        "client_msg_id": "611b94ae-aa3f-49b7-ba5e-2a9f63eff5a3",
        "text": "<@U016VUZGUUQ>\n- I just put a link at the top, and even mention the core thesis in the link itself. Thank you for skimming past that long slog of an intro.\n\n- As for the applied cases, they are within each pillar. The pillars are alas quite lengthy, and I don't know how concrete they are. The most meaty one, in terms of solving concrete problems, is pillar 4 (logic), but probably 1 should come first.\n\n- I've been thinking about your point of the two flavors of manifesto (one to convince that there's a problem, another to tell the convinced how can we solve it). I realize that I'm basically writing this for those who already feel there's a problem. Guess I'm in the right community, after all!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+2HSQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": "\n- I just put a link at the top, and even mention the core thesis in the link itself. Thank you for skimming past that long slog of an intro.\n\n- As for the applied cases, they are within each pillar. The pillars are alas quite lengthy, and I don't know how concrete they are. The most meaty one, in terms of solving concrete problems, is pillar 4 (logic), but probably 1 should come first.\n\n- I've been thinking about your point of the two flavors of manifesto (one to convince that there's a problem, another to tell the convinced how can we solve it). I realize that I'm basically writing this for those who already feel there's a problem. Guess I'm in the right community, after all!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736542982.845539",
        "client_msg_id": "46e114a0-c586-4c22-adef-72562f35f9df",
        "text": "<@UE6EFEPTQ>\n- I wrote this over the last three months; previous technical writing I did was much more applied and definitely not an attempt at a complete conceptual framework. I got the idea for the main point and the five pillars in one go; the [first draft](<https:\/\/github.com\/altocodenl\/TODIS\/commit\/385d8934c4114ba2873270a12f85f34588139fec>), dated a couple of days after the original idea had different pillars but the embryonic core was there. While it may feel it's coming a bit out of nowhere, all of this was brewing in my head for a long time, and only made possible by myriad influences from others (for example, a lot of Rich Hickey and Joe Armstrong in the last few months).\n\n- As for how it'd look if these principles were made into a tool, you put me in the spot! What I'll work on next is [cell](<https:\/\/github.com\/altocodenl\/cell>), which is a programming system. I plan on building it based on the principles of TODIS, and fully expecting that I'll have to perform surgery of uncertain extent in TODIS based on my experiences inside the trenches of cell. I'll be very happy to share some progress in cell when I have something, but for now it's absolute vaporware. Your questions about how things would look like if these ideas were implemented, how would people be working differently with software, I'll have foremost in my mind when I design cell. I really appreciate you stating them.\n\n- As for calls being imperative, I'd love to analyze this further with you. In the framework, there's nothing inherently declarative or imperative about a call. If anything, a call, in the sense of communication with intent, it's really a \"what\". The \"how\" lies in the implementation of the call (the logic, pillar 4); whereas the outside part of the call is an \"interface\", pillar 5. At the very end of pillar 4 I spout:\n\n&gt;  Microcode could be seen as a declarative interface to a CPU (\"I tell the CPU what operation I want and let the CPU actually manage its own logic gates\"). Similarly, a line of a very high level program might be seen as imperative (\"give me all the rows from this database where the creation time is less than three seconds ago\"). I propose that we eliminate this distinction\n- In other words, at every level the outside of the call is declarative and its logic is imperative. There's no hard absolute line that says \"above this, it's all declarative\"; our understanding of it is self-similar, fractal, working at every scale in the same way.\n\n- Rather than try to convince you, I'd really like to understand why\/how you see that a model based on calls is inherently imperative; and perhaps more importantly, whether declarative operations (when they are requested, not when they are implemented) cannot be modelled themselves as calls. I promise to keep an open mind!\n\n- I just discovered your work on Onex. It seems we're both in love with the spreadsheet! Cell too is a programming model based on the spreadsheet. Really cool that you're working on that direction!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i\/Lv0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": "\n- I wrote this over the last three months; previous technical writing I did was much more applied and definitely not an attempt at a complete conceptual framework. I got the idea for the main point and the five pillars in one go; the [first draft]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/altocodenl\/TODIS\/commit\/385d8934c4114ba2873270a12f85f34588139fec"
                            },
                            {
                                "type": "text",
                                "text": "), dated a couple of days after the original idea had different pillars but the embryonic core was there. While it may feel it's coming a bit out of nowhere, all of this was brewing in my head for a long time, and only made possible by myriad influences from others (for example, a lot of Rich Hickey and Joe Armstrong in the last few months).\n\n- As for how it'd look if these principles were made into a tool, you put me in the spot! What I'll work on next is [cell]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/altocodenl\/cell"
                            },
                            {
                                "type": "text",
                                "text": "), which is a programming system. I plan on building it based on the principles of TODIS, and fully expecting that I'll have to perform surgery of uncertain extent in TODIS based on my experiences inside the trenches of cell. I'll be very happy to share some progress in cell when I have something, but for now it's absolute vaporware. Your questions about how things would look like if these ideas were implemented, how would people be working differently with software, I'll have foremost in my mind when I design cell. I really appreciate you stating them.\n\n- As for calls being imperative, I'd love to analyze this further with you. In the framework, there's nothing inherently declarative or imperative about a call. If anything, a call, in the sense of communication with intent, it's really a \"what\". The \"how\" lies in the implementation of the call (the logic, pillar 4); whereas the outside part of the call is an \"interface\", pillar 5. At the very end of pillar 4 I spout:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Microcode could be seen as a declarative interface to a CPU (\"I tell the CPU what operation I want and let the CPU actually manage its own logic gates\"). Similarly, a line of a very high level program might be seen as imperative (\"give me all the rows from this database where the creation time is less than three seconds ago\"). I propose that we eliminate this distinction"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n- In other words, at every level the outside of the call is declarative and its logic is imperative. There's no hard absolute line that says \"above this, it's all declarative\"; our understanding of it is self-similar, fractal, working at every scale in the same way.\n\n- Rather than try to convince you, I'd really like to understand why\/how you see that a model based on calls is inherently imperative; and perhaps more importantly, whether declarative operations (when they are requested, not when they are implemented) cannot be modelled themselves as calls. I promise to keep an open mind!\n\n- I just discovered your work on Onex. It seems we're both in love with the spreadsheet! Cell too is a programming model based on the spreadsheet. Really cool that you're working on that direction!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0887QU9G2V",
        "type": "message",
        "ts": "1736542992.920609",
        "client_msg_id": "5e2c2b0f-56a6-44a1-b0d9-59144e984c0f",
        "text": "Everyone who joined in this thread, thank you again for your brain cycles and kind words. They mean a lot.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6b9d24756ac1",
            "image_72": "https:\/\/avatars.slack-edge.com\/2025-01-08\/8269664865108_6b9d24756ac1aa304bb9_72.jpg",
            "first_name": "Federico",
            "real_name": "Federico Pereiro",
            "display_name": "Federico Pereiro",
            "team": "T5TCAFTA9",
            "name": "fpereiro",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JGb3m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Everyone who joined in this thread, thank you again for your brain cycles and kind words. They mean a lot."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UK3LH8CF5",
        "type": "message",
        "ts": "1736544426.151869",
        "client_msg_id": "4d7bebf1-cd4f-45ed-9390-06c097bcfa73",
        "text": "&gt; Concerning your point about bottlenecks, I am referring to the conceptual burden of designing and implementing a system, where human brains (not computer performance) seem to be the limiting factor of the speed of development.\nAll the systems I've worked on where human brains were the bottleneck, I don't think would get 10x faster with this (as far as I understand it process). But all the system I can think of where human brains are the bottleneck might not meet your definition of DIS (compilers for example).\n\n&gt; Behind this (and I just put this in the Programmers' Preface) is that if many of us feel in our bones that easily 90% of software is pure accidental complexity (in the Brooks sense), then a 10x leap can come through by finding a way to drop this baggage with better tools (both conceptual and embodied).\nMy reading of Brooks (see the episode for more) is that he was concerned with industrial scale 10x improvement. That companies can actually produce software 10x faster. I guess that's what I had in mind.\n\n\n&gt; This is akin to the second non-parallel source of inconsistency I mention: Not checking for errors in multi-step sequences.; the lack of acknowledgment from Y to X is to me exactly equivalent to a sequence happening in a single node that doesn't stop when an error happens in the middle.\nThe problem is, in a lossy communications channel, it is impossible to check for errors. Acknowledgements don't solve the problem. Because how do I know the person who sent me the message got my acknowledgement? <https:\/\/en.wikipedia.org\/wiki\/Two_Generals%27_Problem|The two generals problem> illustrates this well.\n\nBut it goes deeper than that two. Being distributed makes a huge difference in the kinds of failures you can have. For example, it has been proven that it is impossible to <https:\/\/www.the-paper-trail.org\/post\/2008-08-13-a-brief-tour-of-flp-impossibility\/|tell the difference between a node taking too long and a node that has crashed if you have even one faulty node>\n\n\n\nI don't want this all to come across as over negative. I love people creating these high minded general approaches. Even if I don't agree with any of them in particular, I think it is good to think through and have this kind of thinking for people to contrast with. If you haven't seen his work, I'd definitely recommend some talks from Peter Alvaro. He's got one on writing software with an order of magnitude less code using a datalog derivative. Shares some of the squashing of call vs remote that you are interesting in. (But with explicit time.) <https:\/\/www.youtube.com\/watch?v=R2Aa4PivG0g> and he's got another on persistent memory and a globally singular dataspace (The whole world has one dataspace) <https:\/\/www.youtube.com\/watch?v=aIqamaY5pzM>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "4377ee2417eb",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-25\/886144219253_4377ee2417eb9eaacd4b_72.jpg",
            "first_name": "Jimmy",
            "real_name": "Jimmy Miller",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "jimmyhmiller",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BEg6x",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Concerning your point about bottlenecks, I am referring to the conceptual burden of designing and implementing a system, where human brains (not computer performance) seem to be the limiting factor of the speed of development."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAll the systems I've worked on where human brains were the bottleneck, I don't think would get 10x faster with this (as far as I understand it process). But all the system I can think of where human brains are the bottleneck might not meet your definition of DIS (compilers for example).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Behind this (and I just put this in the Programmers' Preface) is that if many of us feel in our bones that easily 90% of software is pure accidental complexity (in the Brooks sense), then a 10x leap can come through by finding a way to drop this baggage with better tools (both conceptual and embodied)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMy reading of Brooks (see the episode for more) is that he was concerned with industrial scale 10x improvement. That companies can actually produce software 10x faster. I guess that's what I had in mind.\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is akin to the second non-parallel source of inconsistency I mention: Not checking for errors in multi-step sequences.; the lack of acknowledgment from Y to X is to me exactly equivalent to a sequence happening in a single node that doesn't stop when an error happens in the middle."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe problem is, in a lossy communications channel, it is impossible to check for errors. Acknowledgements don't solve the problem. Because how do I know the person who sent me the message got my acknowledgement? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Two_Generals%27_Problem",
                                "text": "The two generals problem"
                            },
                            {
                                "type": "text",
                                "text": " illustrates this well.\n\nBut it goes deeper than that two. Being distributed makes a huge difference in the kinds of failures you can have. For example, it has been proven that it is impossible to "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.the-paper-trail.org\/post\/2008-08-13-a-brief-tour-of-flp-impossibility\/",
                                "text": "tell the difference between a node taking too long and a node that has crashed if you have even one faulty node"
                            },
                            {
                                "type": "text",
                                "text": "\n\n\n\nI don't want this all to come across as over negative. I love people creating these high minded general approaches. Even if I don't agree with any of them in particular, I think it is good to think through and have this kind of thinking for people to contrast with. If you haven't seen his work, I'd definitely recommend some talks from Peter Alvaro. He's got one on writing software with an order of magnitude less code using a datalog derivative. Shares some of the squashing of call vs remote that you are interesting in. (But with explicit time.) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=R2Aa4PivG0g"
                            },
                            {
                                "type": "text",
                                "text": " and he's got another on persistent memory and a globally singular dataspace (The whole world has one dataspace) "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=aIqamaY5pzM"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016VUZGUUQ",
        "type": "message",
        "ts": "1736544439.202449",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1736544561.000000"
        },
        "client_msg_id": "43f2e537-3056-4b6d-8937-5c2ac72b31dc",
        "text": "Having the links definitely makes it little more manageable to find what I want to know. The \"Pillars\" are definitely the interesting part that makes the rest into something other than rehashing the same abstract problems we're all thinking about. (And they're pretty similar to a lot of my thoughts, so that's neat.) I would suggest putting a preview of what they are somewhere more prominent in the document, up with the thesis statement (which TBH I still think needs to be actually present above the fold, not just linked) so it's clear that there is some real technical meat there.\n\nFWIW my ideas for the common data format start the other way around, as a crystallization of what you might label call and response, more abstractly crystallization of control flow (something something algebraic data types and algebraic effects). But it's not even as concrete yet as your idea here, so...",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaee3c99144d",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aee3c99144dfc6644c6c1f1303683140.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "Andrew F",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "andrewflnr",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SbEYN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having the links definitely makes it little more manageable to find what I want to know. The \"Pillars\" are definitely the interesting part that makes the rest into something other than rehashing the same abstract problems we're all thinking about. (And they're pretty similar to a lot of my thoughts, so that's neat.) I would suggest putting a preview of what they are somewhere more prominent in the document, up with the thesis statement (which TBH I still think needs to be actually present above the fold, not just linked) so it's clear that there is some real technical meat there.\n\nFWIW my ideas for the common data format start the other way around, as a crystallization of what you might label call and response, more abstractly crystallization of control flow (something something algebraic data types and algebraic effects). But it's not even as concrete yet as your idea here, so..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736554219.455939",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1736554328.000000"
        },
        "client_msg_id": "6e6db5ef-9eb4-4149-9c83-e173402b9054",
        "text": "I think it may take a while to digest all the cell stuff and the other bits. (Also, I haven't actually _earned_ an <https:\/\/github.com\/altocodenl\/TODIS\/?tab=readme-ov-file#acknowledgments|acknowledgement> yet, but you do inspire me to contribute more!) :hugging_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DGMtT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it may take a while to digest all the cell stuff and the other bits. (Also, I haven't actually "
                            },
                            {
                                "type": "text",
                                "text": "earned",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " an "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/altocodenl\/TODIS\/?tab=readme-ov-file#acknowledgments",
                                "text": "acknowledgement"
                            },
                            {
                                "type": "text",
                                "text": " yet, but you do inspire me to contribute more!) "
                            },
                            {
                                "type": "emoji",
                                "name": "hugging_face",
                                "unicode": "1f917"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736554603.697639",
        "client_msg_id": "72b19809-4741-4dd8-8ba6-3c6bfbbed502",
        "text": "Initial thought: cell's \"<https:\/\/en.wikipedia.org\/wiki\/Quadrivium|quadrivium>: language, database, service and interface\" map onto my own ONR, ONN, ONP, ONT: language, core database, p2p networking, i\/o. Are you stealing my ideas??? :rolling_on_the_floor_laughing:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B2z24",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Initial thought: cell's \""
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Quadrivium",
                                "text": "quadrivium"
                            },
                            {
                                "type": "text",
                                "text": ": language, database, service and interface\" map onto my own ONR, ONN, ONP, ONT: language, core database, p2p networking, i\/o. Are you stealing my ideas??? "
                            },
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing",
                                "unicode": "1f923"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736554938.471679",
        "client_msg_id": "5b4725e9-0613-4390-b05c-a9be7516b737",
        "text": "Onex vs Cell: I don't have number as a separate type, just string or symbol representations of number. This is biting me a bit in my string interning algo, as each tiny change in a number creates a new string in the pool. I sketched out an alternative for numbers but binned it. Even so, this is all about non-functional requirements - efficiency - not about the higher level model.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UOGl1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Onex vs Cell: I don't have number as a separate type, just string or symbol representations of number. This is biting me a bit in my string interning algo, as each tiny change in a number creates a new string in the pool. I sketched out an alternative for numbers but binned it. Even so, this is all about non-functional requirements - efficiency - not about the higher level model."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1736555298.440849",
        "client_msg_id": "94fe1658-b913-4359-b306-89a127fbca59",
        "text": "still in the weeds, and feeling like I'm hijacking this thread so this will be my last comment for now: \"As for `null`, it can be represented by the _absence_ of a certain key in a hash; but inside a list, it has to be represented with something else, such as the text `null` or an empty string.\" - I have two special concepts for unspecified values: unknown (could be anything but isn't set yet) and nothing (known-to-be-absent or is definitely not going to be set). Or not available vs not applicable. Setting a hash or map property to nothing deletes that property. setting a list value to nothing deletes that entry in the list.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736460195.528239",
        "parent_user_id": "U0887QU9G2V",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QEUXR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "still in the weeds, and feeling like I'm hijacking this thread so this will be my last comment for now: \"As for "
                            },
                            {
                                "type": "text",
                                "text": "null",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it can be represented by the "
                            },
                            {
                                "type": "text",
                                "text": "absence",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of a certain key in a hash; but inside a list, it has to be represented with something else, such as the text "
                            },
                            {
                                "type": "text",
                                "text": "null",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or an empty string.\" - I have two special concepts for unspecified values: unknown (could be anything but isn't set yet) and nothing (known-to-be-absent or is definitely not going to be set). Or not available vs not applicable. Setting a hash or map property to nothing deletes that property. setting a list value to nothing deletes that entry in the list."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]