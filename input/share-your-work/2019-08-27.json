[
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566892249.244300",
        "client_msg_id": "de23f16f-7cd0-409d-a4e8-d073a503fb41",
        "text": "that will happen with any \"canonical\" representation that you choose, many will need to be converted",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K7p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that will happen with any \"canonical\" representation that you choose, many will need to be converted"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566892270.244800",
        "client_msg_id": "ae37693e-b172-42fc-8cf4-5f6d8b65aa8a",
        "text": "I don't think addition and substractions is the bottleneck of today's software",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w=K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think addition and substractions is the bottleneck of today's software"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1566893096.246400",
        "client_msg_id": "03160FBC-0242-4051-807A-D33133BEDEF6",
        "text": "&gt;why there has to be *one* representation?\n\nIsn’t all programming just the transformation of one representation into another? :nerd_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2oP",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "why there has to be "
                            },
                            {
                                "type": "text",
                                "text": "one",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " representation?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIsn’t all programming just the transformation of one representation into another? "
                            },
                            {
                                "type": "emoji",
                                "name": "nerd_face",
                                "unicode": "1f913"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE6EFEPTQ",
                    "UA14TGLTC",
                    "UJUQESQ1Z",
                    "UBSMEUXAA",
                    "UAVCC2X70"
                ],
                "count": 5
            },
            {
                "name": "-1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566893179.246600",
        "client_msg_id": "4f771353-85c9-40b4-82ad-23be0822aff1",
        "text": "yes :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcLC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566893985.246800",
        "client_msg_id": "2559a1c0-3c84-4442-925b-9f3af814596b",
        "text": "<@UCGR73CAY> each bit of the arm is positioned relative to the bit it's attached to.\nso .. this would be much better implemented with vectors!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wDQSC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGR73CAY"
                            },
                            {
                                "type": "text",
                                "text": " each bit of the arm is positioned relative to the bit it's attached to.\nso .. this would be much better implemented with vectors!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCGR73CAY",
        "type": "message",
        "ts": "1566894524.247000",
        "client_msg_id": "eea35453-5f4c-4422-b815-bb0a844d0066",
        "text": "Yeah, you can see from the code I posted how you could vectorize it. I have a new version around somewhere that did the same thing but with vectors... brought the line count down below 30 if I recall... but I seem to have lost it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bc46d9e86f7d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-26\/5176774456644_bc46d9e86f7dc3780301_72.jpg",
            "first_name": "Corey",
            "real_name": "Corey Montella",
            "display_name": "Corey",
            "team": "T5TCAFTA9",
            "name": "cmontella",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZZf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, you can see from the code I posted how you could vectorize it. I have a new version around somewhere that did the same thing but with vectors... brought the line count down below 30 if I recall... but I seem to have lost it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566895394.247200",
        "client_msg_id": "a94c9a04-3527-4c60-bf75-8ce9c857df86",
        "text": ":smile: oh well I'm sure you could re-create it",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wCWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " oh well I'm sure you could re-create it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566895410.247400",
        "client_msg_id": "835285d4-3ba3-44f4-8f21-f2eb151c54ed",
        "text": "if you needed\/wanted to",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E0oK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you needed\/wanted to"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1566895490.247600",
        "client_msg_id": "48ad5ad8-7959-48f8-abf8-66988c34f254",
        "text": "if it helped illustrate a point to <@UEQ6M68H0> for example :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566859005.231500",
        "parent_user_id": "UE6EFEPTQ",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GctU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if it helped illustrate a point to "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " for example "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1566914418.248800",
        "client_msg_id": "53367ec7-a14b-4855-8022-2ad90a4d6a56",
        "text": "<@UBN9AFS0N> part of the point of \"zero cost abstraction\" languages is to not have such costs (as much)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hiq\/1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " part of the point of \"zero cost abstraction\" languages is to not have such costs (as much)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566914678.251900",
        "client_msg_id": "75d6dbcb-f885-4bca-bf7c-3983e038f672",
        "text": "you app has a cannonical representation for a square, are you sure that all the layers up until the pixels are drawn on the screen share your repesentation? even if some share the representation, you can't pass a pointer to the data, because it crosses many boundaries and even if it did, the other layers don't know about the layout of your representation, that means that the quest to find the true canonical representation of a square to avoid 2 additions\/substractions will end up being transformed and copied N times until it ends on the screen",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Vw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you app has a cannonical representation for a square, are you sure that all the layers up until the pixels are drawn on the screen share your repesentation? even if some share the representation, you can't pass a pointer to the data, because it crosses many boundaries and even if it did, the other layers don't know about the layout of your representation, that means that the quest to find the true canonical representation of a square to avoid 2 additions\/substractions will end up being transformed and copied N times until it ends on the screen"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566914841.254100",
        "client_msg_id": "095a234a-c9f5-403d-bb40-6ffa438f97b6",
        "text": "now, say you find the canonical representation for a square and you really can share your representation, you may many times want to operate on a sequence of those squares, vectorized instructions on the cpu may be handy, but they expect arrays of points, now the best representation of a square is 4 arrays of points, should we? are we going to force all our abstractions to handle 4 arrays because we feel that's a better representation?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PI=Mi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "now, say you find the canonical representation for a square and you really can share your representation, you may many times want to operate on a sequence of those squares, vectorized instructions on the cpu may be handy, but they expect arrays of points, now the best representation of a square is 4 arrays of points, should we? are we going to force all our abstractions to handle 4 arrays because we feel that's a better representation?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566915317.256400",
        "client_msg_id": "6b64a2d0-a836-4029-b0f5-bc407fcfca6b",
        "text": "as far as I know most drawing pipelines (I'm not an expert here) go through different stages with different representations that make it easy to do the operations that are important at that stage, so the best representation depends on where you are and what you want to do, I don't think you can avoid going from one represenation to the other unless you want to operate in a represenation that is not the most adapted to the task at hand",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O5g7F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as far as I know most drawing pipelines (I'm not an expert here) go through different stages with different representations that make it easy to do the operations that are important at that stage, so the best representation depends on where you are and what you want to do, I don't think you can avoid going from one represenation to the other unless you want to operate in a represenation that is not the most adapted to the task at hand"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566915416.257900",
        "client_msg_id": "dd2bef68-4396-48c6-9a99-5f669f3aa91e",
        "text": "for a different perspective, what's the canonical representation of a program\/expression? a string? a sequence of tokens? an AST close to the syntax? an Intermediate represenation? an SSA\/CPS representation? a graph? assembly?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "56Hd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "for a different perspective, what's the canonical representation of a program\/expression? a string? a sequence of tokens? an AST close to the syntax? an Intermediate represenation? an SSA\/CPS representation? a graph? assembly?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566915794.260100",
        "client_msg_id": "25de8fae-83e3-4fe7-8405-3b850c4924bd",
        "text": "just a note, I'm not against finding good representations and trying to share them, for example <https:\/\/arrow.apache.org\/> and some shared IRs on ML\/AI are interesting, also a lot came out of LLVM sharing compiler representations, but trying to optimize one representation at a single level by forcing all code that uses it to adapt to that representation doesn't feel like a way to allow more expressivity, easier\/simpler\/higher level programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zsm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just a note, I'm not against finding good representations and trying to share them, for example "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/arrow.apache.org\/"
                            },
                            {
                                "type": "text",
                                "text": " and some shared IRs on ML\/AI are interesting, also a lot came out of LLVM sharing compiler representations, but trying to optimize one representation at a single level by forcing all code that uses it to adapt to that representation doesn't feel like a way to allow more expressivity, easier\/simpler\/higher level programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566915828.260700",
        "client_msg_id": "50472905-a29d-4ac5-837f-01ad58a237a7",
        "text": "I prefer to share interfaces\/contracts and then plug different implementations of that interface depending on what's best for each case",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pNV3Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I prefer to share interfaces\/contracts and then plug different implementations of that interface depending on what's best for each case"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1566918781.261300",
        "client_msg_id": "205F0710-3844-4F84-A0CE-ED49A11FC1E7",
        "text": "Just leaving this here, seems relevant: \n<http:\/\/grammarware.github.io\/parsing\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KpFS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just leaving this here, seems relevant: \n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/grammarware.github.io\/parsing\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UAL7940NM",
                    "UC0U8RM9A"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1566919314.261600",
        "client_msg_id": "07901a43-881d-4ae5-a304-262f1a68eeca",
        "text": "this represenation is really nice to write pretty printers: <http:\/\/belle.sourceforge.net\/doc\/hughes95design.pdf>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566919314.261600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1566923102.262000",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1566923102.262000"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BO+U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this represenation is really nice to write pretty printers: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/belle.sourceforge.net\/doc\/hughes95design.pdf"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1566923102.262000",
        "client_msg_id": "a9e201ab-290d-420b-a3c4-3430ae2dd83a",
        "text": "Not opening for me. Could you share the authors and title?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566919314.261600",
        "parent_user_id": "UBN9AFS0N",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "StuK\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not opening for me. Could you share the authors and title?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC21F8Q48",
        "type": "message",
        "ts": "1566929165.262400",
        "client_msg_id": "423045fe-4da4-4030-a591-a2aec109746b",
        "text": "&gt; the references. I’ll explore those over the coming days, and will absolutely ping you if I have questions.\nStart with the video. I probably shouldn’t nonchalantly drop PL papers here as if one can just glance at them and “get it”. I think the first time Mikael explained to me how to “undo” function calls it required a 2hr whiteboard session :smile: :smile: :smile:. After the video, you can ping me and I can walk through the important bits and save you from having to get the same information via the paper.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d79ba47b2952",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-08-03\/410049852848_d79ba47b2952e74a99d9_72.jpg",
            "first_name": "Brian",
            "real_name": "Brian Hempel",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "brianhempel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+QUx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the references. I’ll explore those over the coming days, and will absolutely ping you if I have questions."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Start with the video. I probably shouldn’t nonchalantly drop PL papers here as if one can just glance at them and “get it”. I think the first time Mikael explained to me how to “undo” function calls it required a 2hr whiteboard session "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            },
                            {
                                "type": "text",
                                "text": ". After the video, you can ping me and I can walk through the important bits and save you from having to get the same information via the paper."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "beers",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566935187.264500",
        "client_msg_id": "1019999A-85D9-4425-9964-198A0F09A16A",
        "text": "definitely clears it up for me (and thank you so much for your very in-depth replies!). what do functions that take multiple values look like? is it just currying?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "maqUA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "definitely clears it up for me (and thank you so much for your very in-depth replies!). what do functions that take multiple values look like? is it just currying?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566936382.265500",
        "client_msg_id": "bb6e084a-5550-4127-983c-8b5b918d1752",
        "text": "I haven't decided yet. I've tried a few different things, but nothing has felt great. My process is basically.. I have a whole bunch of principles from graphic design and geometry that are nicely controllable using artist tools, and a bunch of principles from computer science needed to create a workable programming system, and I'm playing with different combinations of them and listening to how I feel. Sort of like playing a big matchmaking game, guided by my experiences with other visual languages and art tools, text programming, games, and the body of academic research.\n\nIt could be that multi-arity functions require values delivered to them simultaneously from multiple inputs. Could be currying. Could be that edges take on the value of the last point that's travelled them, supplying that as a constant value to the function (this is sort of how Max\/MSP works, and sort of how FRP works) — in this approach, if the data points are like \"comets\" then the edges are sort of like.. lasers?\n\nWhat do you think? What might look cool, or be fun to use, or be (ugh)... _easy to reason about?_ (kill me).",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6=y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't decided yet. I've tried a few different things, but nothing has felt great. My process is basically.. I have a whole bunch of principles from graphic design and geometry that are nicely controllable using artist tools, and a bunch of principles from computer science needed to create a workable programming system, and I'm playing with different combinations of them and listening to how I feel. Sort of like playing a big matchmaking game, guided by my experiences with other visual languages and art tools, text programming, games, and the body of academic research.\n\nIt could be that multi-arity functions require values delivered to them simultaneously from multiple inputs. Could be currying. Could be that edges take on the value of the last point that's travelled them, supplying that as a constant value to the function (this is sort of how Max\/MSP works, and sort of how FRP works) — in this approach, if the data points are like \"comets\" then the edges are sort of like.. lasers?\n\nWhat do you think? What might look cool, or be fun to use, or be (ugh)... "
                            },
                            {
                                "type": "text",
                                "text": "easy to reason about?",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (kill me)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566937494.272300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1566937526.000000"
        },
        "client_msg_id": "7BD74B99-F53C-43A7-ADD6-308B94389C75",
        "text": "you keep referring to your discourse as cringey but to me this is the least cringey use of these often misused terms because it’s clear you’re really thinking deeply\/care a lot about this stuff! \n\ni’m trying to dredge up physical or game metaphors for different input—crafting games might be a good place to look. i also like thinking of woodworking—generally, i feel like you’re working with unary or binary operations on wood or tools. you cut wood to make a jig, clamp the jig to another piece of wood, and then apply a saw across the jigged wood. that feels kind of like currying to me but i’m really stretching some metaphors here. cooking might also be a good metaphor.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3xmd1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you keep referring to your discourse as cringey but to me this is the least cringey use of these often misused terms because it’s clear you’re really thinking deeply\/care a lot about this stuff! \n\ni’m trying to dredge up physical or game metaphors for different input—crafting games might be a good place to look. i also like thinking of woodworking—generally, i feel like you’re working with unary or binary operations on wood or tools. you cut wood to make a jig, clamp the jig to another piece of wood, and then apply a saw across the jigged wood. that feels kind of like currying to me but i’m really stretching some metaphors here. cooking might also be a good metaphor."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566937609.274300",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1566964313.000000"
        },
        "client_msg_id": "DFF3FC8A-2A2B-428D-A8E6-867FD38ED68D",
        "text": "idk id love it if i could come up with a consistent visual metaphor for visual or higher order programming —eg if a node could copy itself down another edge but that seems hairy and complicated",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vyVf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "idk id love it if i could come up with a consistent visual metaphor for visual or higher order programming —eg if a node could copy itself down another edge but that seems hairy and complicated"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566937642.275400",
        "client_msg_id": "48F4C522-75AE-4CBB-94D0-6047961F8956",
        "text": "this stuff is super interesting to me because i think we share word for word the same goal—programming should feel like a video game",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "smu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this stuff is super interesting to me because i think we share word for word the same goal—programming should feel like a video game"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566937873.278200",
        "client_msg_id": "277F8301-9793-4A3F-B822-645AEF217D29",
        "text": "right now i’m working on a hazy idea of using the concepts of cursors and selection in traditional gui’s to replace ‘this’ and variable names in computation. ie, i don’t have to give my space marine a name to tell him to go fight some aliens in starcraft, and i don’t have to tell the game that i still mean the same guy every time i issue a new command",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+bW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right now i’m working on a hazy idea of using the concepts of cursors and selection in traditional gui’s to replace ‘this’ and variable names in computation. ie, i don’t have to give my space marine a name to tell him to go fight some aliens in starcraft, and i don’t have to tell the game that i still mean the same guy every time i issue a new command"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1566938048.280400",
        "client_msg_id": "656E7E7C-D958-4F92-A2B3-7E2CB52E45A8",
        "text": "one confusing thing about currying would be that i might call the function once with one value (4) and then want to call a new copy of that function with another (3) and then pass the next second values to them later. tricky to communicate visually ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wGkLZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one confusing thing about currying would be that i might call the function once with one value (4) and then want to call a new copy of that function with another (3) and then pass the next second values to them later. tricky to communicate visually"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1566940094.280700",
        "client_msg_id": "3d571db2-abf5-40a3-9f6a-5fc05c979ae2",
        "text": "\"Edges represent function calls, not function signatures.\"\n\nIf function is called from multiple places (multiple inputs) this makes sense but returning from function call not. It's like whenever you call a function it will return with same value everywhere where that same function is used. Instead multiple outputs have semantic meaning of variable being used in multiple places.\n\nSo how do you return from functions?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aTnS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Edges represent function calls, not function signatures.\"\n\nIf function is called from multiple places (multiple inputs) this makes sense but returning from function call not. It's like whenever you call a function it will return with same value everywhere where that same function is used. Instead multiple outputs have semantic meaning of variable being used in multiple places.\n\nSo how do you return from functions?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U7C7B75R6",
        "type": "message",
        "ts": "1566941289.280900",
        "client_msg_id": "f2efa8da-9448-4221-99c6-8f5980dd1dfc",
        "text": "Idea about relative time:\nWhat if multiple inputs just require two inputs arriving at the same time (for different slots)?\n\nMany practical applications can be considered as single signal in and out. There might be other parameters like state but often there is clear signal which causes computation to happen. Computations can be split but we can make sure that for every signal merge (multi input function) there is a split. Therefore we can only adjust time of every branch to make sure signals will be merged nicely together one to one.\n\nSure if there is non-constant branches it will be more complicated and if signal can disappear or multiply, these assumptions will collapse.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "be27878783b4",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-04-10\/604262911488_be27878783b4b23a5ed4_72.png",
            "first_name": "",
            "real_name": "Niko Autio",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "niko.elmari",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Idea about relative time:\nWhat if multiple inputs just require two inputs arriving at the same time (for different slots)?\n\nMany practical applications can be considered as single signal in and out. There might be other parameters like state but often there is clear signal which causes computation to happen. Computations can be split but we can make sure that for every signal merge (multi input function) there is a split. Therefore we can only adjust time of every branch to make sure signals will be merged nicely together one to one.\n\nSure if there is non-constant branches it will be more complicated and if signal can disappear or multiply, these assumptions will collapse."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566941811.281100",
        "client_msg_id": "aa248b6f-c926-4a32-9f0d-208a0ba1fd06",
        "text": "&gt; how do you return from functions?\n\nThere's a bit of a conceptual mismatch between what I'm doing (heavily inspired by dataflow languages, hydraulic and electrical schematics, etc) and what you do when calling a function in a Fortran-inspired language (where, I believe, the notion of \"calling\" and \"returning\" a function come from). In the Fortran-inspired lot, code forms a tree (the AST), but execution forms a graph (the call graph, the cyclomatic graph, etc, which I believe are all DAGs). In Hest, Max\/MSP, schematics, etc, code and execution form a graph (and not even a DAG — a totally free graph). So in the former, a function call travels down a tree branch from call site to function, and the return comes back up the same tree branch. In Hest (etc), the call and the return are separate, so you're responsible for setting up both.\n\nIt might also help to know that... in Hest, when you have a point acting as a function, that point isn't itself the function — it's a reference to the function (which is defined elsewhere). You can make as many such references as you want.\n\n&gt; It's like whenever you call a function it will return with same value everywhere where that same function is used.\n\nYep, exactly. If you don't want that, you just don't do it — make a separate copy of the function point everywhere you need it, and only have 1 inbound edge and 1 outbound edge.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W1y",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how do you return from functions?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThere's a bit of a conceptual mismatch between what I'm doing (heavily inspired by dataflow languages, hydraulic and electrical schematics, etc) and what you do when calling a function in a Fortran-inspired language (where, I believe, the notion of \"calling\" and \"returning\" a function come from). In the Fortran-inspired lot, code forms a tree (the AST), but execution forms a graph (the call graph, the cyclomatic graph, etc, which I believe are all DAGs). In Hest, Max\/MSP, schematics, etc, code and execution form a graph (and not even a DAG — a totally free graph). So in the former, a function call travels down a tree branch from call site to function, and the return comes back up the same tree branch. In Hest (etc), the call and the return are separate, so you're responsible for setting up both.\n\nIt might also help to know that... in Hest, when you have a point acting as a function, that point isn't itself the function — it's a reference to the function (which is defined elsewhere). You can make as many such references as you want.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's like whenever you call a function it will return with same value everywhere where that same function is used."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYep, exactly. If you don't want that, you just don't do it — make a separate copy of the function point everywhere you need it, and only have 1 inbound edge and 1 outbound edge."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1566942139.281300",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1566942149.000000"
        },
        "client_msg_id": "7c6e2e3a-03a9-4bfc-a504-fdef1dbe3827",
        "text": "&gt; What if multiple inputs just require two inputs arriving at the same time (for different slots)?\n\nYep, that's actually how I currently have it implemented. The problem with this approach is that you can't have ordered\/positional arguments, since the incoming data forms a set, not a list. That is a really harsh restriction. I know that I can overcome this limitation when creating more advanced functions within Hest (which involves drawing an icon to represent the function, and choosing one or more spots in the icon to act as input ports), but I think that might not be sufficient.\n\n&gt; Computations can be split but we can make sure that for every signal merge (multi input function) there is a split. Therefore we can only adjust time of every branch to make sure signals will be merged nicely together one to one.\n\nI don't understand this. But I do like the idea of \"signals\" and am probably going to implement something like that. (See: <https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1566936382265500?thread_ts=1566801692.212900&amp;cid=CCL5VVBAN>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1566801692.212900",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NmNQq",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if multiple inputs just require two inputs arriving at the same time (for different slots)?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nYep, that's actually how I currently have it implemented. The problem with this approach is that you can't have ordered\/positional arguments, since the incoming data forms a set, not a list. That is a really harsh restriction. I know that I can overcome this limitation when creating more advanced functions within Hest (which involves drawing an icon to represent the function, and choosing one or more spots in the icon to act as input ports), but I think that might not be sufficient.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Computations can be split but we can make sure that for every signal merge (multi input function) there is a split. Therefore we can only adjust time of every branch to make sure signals will be merged nicely together one to one."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI don't understand this. But I do like the idea of \"signals\" and am probably going to implement something like that. (See: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1566936382265500?thread_ts=1566801692.212900&amp;cid=CCL5VVBAN",
                                "text": "https:\/\/futureofcoding.slack.com\/archives\/CCL5VVBAN\/p1566936382265500?thread_ts=1566801692.212900&cid=CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "ULADE0N0J",
        "type": "message",
        "ts": "1566946729.282600",
        "client_msg_id": "80a8101d-b8d8-4c85-9ef4-a7b1f6dea244",
        "text": "Also worth mentioning the huge unifiedjs ecosystem by wooorm and friends.\n&gt; unified is an interface for processing text with syntax trees and transforming between them.\n- <https:\/\/github.com\/syntax-tree\/unist>\n- <https:\/\/unifiedjs.com\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7d86046c255c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-23\/692084499154_7d86046c255cf2735e1c_72.jpg",
            "first_name": "",
            "real_name": "Benjamin Gudehus",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "hastebrot",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Geh3c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also worth mentioning the huge unifiedjs ecosystem by wooorm and friends."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "unified is an interface for processing text with syntax trees and transforming between them."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/syntax-tree\/unist"
                            },
                            {
                                "type": "text",
                                "text": "\n- "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/unifiedjs.com\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]