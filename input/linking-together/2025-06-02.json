[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1748864169.162749",
        "client_msg_id": "fcdc6ad2-3b5c-40d7-8b15-da0b4b1153e2",
        "text": "Thanks <@UDCLA1HU4>, that's indeed what I want to do, at least as a first step.\n\nIt would help to add some instructions for how to run something. I had to look at `main.js` to figure out that I need to (1) select a box to evaluate and (2) press alt-e to single-step or alt-r to run all steps. Except that even that doesn't work: nothing happens. I ended up calling `evalStep()` and `evalAll()` from the console.\n\nBut from then on, it's fun to play with this!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748595816.078859",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BRzZL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UDCLA1HU4"
                            },
                            {
                                "type": "text",
                                "text": ", that's indeed what I want to do, at least as a first step.\n\nIt would help to add some instructions for how to run something. I had to look at "
                            },
                            {
                                "type": "text",
                                "text": "main.js",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to figure out that I need to (1) select a box to evaluate and (2) press alt-e to single-step or alt-r to run all steps. Except that even that doesn't work: nothing happens. I ended up calling "
                            },
                            {
                                "type": "text",
                                "text": "evalStep()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "evalAll()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the console.\n\nBut from then on, it's fun to play with this!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDCLA1HU4",
        "type": "message",
        "ts": "1748864347.727829",
        "client_msg_id": "edea84b5-49e9-4a25-a44c-f5967b355cdc",
        "text": "It seems to break with some keyboard layouts",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "bcf86f2e207e",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-09-25\/7807695316512_bcf86f2e207ef54d3bda_72.jpg",
            "first_name": "",
            "real_name": "Tomas Petricek",
            "display_name": "tomasp",
            "team": "T5TCAFTA9",
            "name": "tomas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748595816.078859",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SOiTD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems to break with some keyboard layouts"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "astonished",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1748864890.149819",
        "client_msg_id": "dfeac7a8-aae2-4a7b-b941-fd2d81a149b7",
        "text": "Some quick debugging suggests that one of my extensions gets the keydown event. The joy of malleable systems :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748595816.078859",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "evV4h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some quick debugging suggests that one of my extensions gets the keydown event. The joy of malleable systems "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1748864982.652899",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1748865009.000000"
        },
        "client_msg_id": "7f22226d-8966-4e90-ba2b-7d8a12e3cc27",
        "text": "I replaced alt by ctrl and now it works for me! The joy of malleable systems :smile:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748595816.078859",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JvHUo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I replaced alt by ctrl and now it works for me! The joy of malleable systems "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UGWUJUZHT",
        "type": "message",
        "ts": "1748870937.239109",
        "client_msg_id": "28c16179-6111-4d0e-a912-3df68287e5d2",
        "text": "FWIW - I see some interesting similarities \/ observations wrt re-using stuff we've already got. Tiny-boxer uses DOM and makes something else of it. DaS re-uses .drawio and makes something else of it. T2t re-uses Python and JS and make something else of them (they become assembly languages). [I happen to think that OhmJS makes it extra easy to re-use text-based already-existing things] [DaS and t2t are little things I made]",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "41a8bada7812",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-02-06\/4754627914258_41a8bada781281751d07_72.jpg",
            "first_name": "",
            "real_name": "Paul Tarvydas",
            "display_name": "guitarvydas",
            "team": "T5TCAFTA9",
            "name": "paultarvydas",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748595816.078859",
        "parent_user_id": "UJBAJNFLK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uz+tt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW - I see some interesting similarities \/ observations wrt re-using stuff we've already got. Tiny-boxer uses DOM and makes something else of it. DaS re-uses .drawio and makes something else of it. T2t re-uses Python and JS and make something else of them (they become assembly languages). [I happen to think that OhmJS makes it extra easy to re-use text-based already-existing things] [DaS and t2t are little things I made]"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1748874027.673649",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1748879631.000000"
        },
        "client_msg_id": "b9eb0478-db16-47b8-908a-7ded9cac73d8",
        "text": "by \"semantics\" I guess I mean several things, all steaming from \"what do I need to be able to extract from sexpr to implement usual IDE features?\", which are at least:\n• scope: which tokens are visible for particular expression, eg in `(let [x 1] (+ x 1))` – `(+ x 1)` sees `x` from the previous vector, note that `[x 1]` and `(+ x 1)` are siblings, same level, yet one can see the other, but not vise versa. We (at least me) by default think of `(+ x 1)` as \"being inside of let, nested\" but syntactic reality – expression dictating scope is sibling, not parent.\n• control flow branches: which sexprs are sequential, and which are parallel: in `(if foo bar baz)` bar and baz a parallel = \"within single eval of this if - either bar or baz would be evaled but not both.\"\n• \"special\" places, eg `foo` after evaling `(def foo 1)`  is made available as global var (in clojure terminology); `(let [x 1] )`  - x is now local  \"var\" available for anything \"later\" inside `let` .\n• maybe rendering hints (which is just one case of prev bullet-point, I guess), eg. in `(cond pred1 foo pred666 bar)` - `pred1` and `pred666` are predicates, and `foo` , `bar` – are branches, and maybe I'd like for autoformatter to render those as 2 columns:\n```(cond\n  pred1   foo\n  pred666 bar)```\nbut if first symbol is not cond, then it' would be just a list, where \"items are interleaved columns\" no longer applies, and maybe you want to pack-tile them, or render as a single column, or single row:\n```(kek pred1 foo pred666 bar)\n(kek pred1 foo\n pred666 bar)\n(kek\n pred1\n foo\n pred666\n bar)```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1747153874.428279",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uAp6S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "by \"semantics\" I guess I mean several things, all steaming from \"what do I need to be able to extract from sexpr to implement usual IDE features?\", which are at least:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "scope: which tokens are visible for particular expression, eg in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(let [x 1] (+ x 1))",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " – "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(+ x 1)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " sees "
                                    },
                                    {
                                        "type": "text",
                                        "text": "x",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " from the previous vector, note that "
                                    },
                                    {
                                        "type": "text",
                                        "text": "[x 1]",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(+ x 1)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " are siblings, same level, yet one can see the other, but not vise versa. We (at least me) by default think of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(+ x 1)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " as \"being inside of let, nested\" but syntactic reality – expression dictating scope is sibling, not parent."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "control flow branches: which sexprs are sequential, and which are parallel: in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(if foo bar baz)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " bar and baz a parallel = \"within single eval of this if - either bar or baz would be evaled but not both.\""
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"special\" places, eg "
                                    },
                                    {
                                        "type": "text",
                                        "text": "foo",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " after evaling "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(def foo 1)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  is made available as global var (in clojure terminology); "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(let [x 1] )",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  - x is now local  \"var\" available for anything \"later\" inside "
                                    },
                                    {
                                        "type": "text",
                                        "text": "let",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " ."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "maybe rendering hints (which is just one case of prev bullet-point, I guess), eg. in "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(cond pred1 foo pred666 bar)",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - "
                                    },
                                    {
                                        "type": "text",
                                        "text": "pred1",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "pred666",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " are predicates, and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "foo",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " , "
                                    },
                                    {
                                        "type": "text",
                                        "text": "bar",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " – are branches, and maybe I'd like for autoformatter to render those as 2 columns:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(cond\n  pred1   foo\n  pred666 bar)"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but if first symbol is not cond, then it' would be just a list, where \"items are interleaved columns\" no longer applies, and maybe you want to pack-tile them, or render as a single column, or single row:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(kek pred1 foo pred666 bar)\n(kek pred1 foo\n pred666 bar)\n(kek\n pred1\n foo\n pred666\n bar)"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1748874314.983139",
        "edited": {
            "user": "U07BD7U4S4R",
            "ts": "1748931121.000000"
        },
        "client_msg_id": "5feaec2c-66b5-4e1b-8e85-4acc7197d2bf",
        "text": "I disagree that lispers do this for 50 years.\n(I am sure someone had it in some systems (smalltalk? some say inter-lisp too?), but now it is not even a common knowledge that this is not only a possibility, but is actual reality somewhere)\nOn the scale from lineoriented to treeoriented I see lisp (again, my main lisp is clojure) somewhere slightly rightwar of everything else, like python:\n```|----*--*------------------------|\n^    ^  ^                        ^ \nline py lisp                     tree```\nJust because if you are:\n- writing lisp in vim\/emacs\/ms code\/idea\/notepad as text (allows parse errors, like imbalanced parens)\n- looking at diffs in terminal as `git diff` output\n- even if you are using paredit-like thingy which does not allow invalid trees, *but* it knows nothing about semantics I listed above (basically to syntax highlight you parse \"tree\" you just wrote with another thingy *again*)\n- not to mention you can just open a file elsewhere and put unparsable junk there. I realize you can corrupt any file\/format, but think of it as \"another coworker edits your paredit-crafted-tree in notepad (usual situation, not a rare act of sabotage)\" :slightly_smiling_face:\n\n– means you are writing lines of text = doing line oriented programming",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1747153874.428279",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SQQDk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I disagree that lispers do this for 50 years.\n(I am sure someone had it in some systems (smalltalk? some say inter-lisp too?), but now it is not even a common knowledge that this is not only a possibility, but is actual reality somewhere)\nOn the scale from lineoriented to treeoriented I see lisp (again, my main lisp is clojure) somewhere slightly rightwar of everything else, like python:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "|----*--*------------------------|\n^    ^  ^                        ^ \nline py lisp                     tree"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just because if you are:\n- writing lisp in vim\/emacs\/ms code\/idea\/notepad as text (allows parse errors, like imbalanced parens)\n- looking at diffs in terminal as "
                            },
                            {
                                "type": "text",
                                "text": "git diff",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " output\n- even if you are using paredit-like thingy which does not allow invalid trees, "
                            },
                            {
                                "type": "text",
                                "text": "but",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it knows nothing about semantics I listed above (basically to syntax highlight you parse \"tree\" you just wrote with another thingy "
                            },
                            {
                                "type": "text",
                                "text": "again",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")\n- not to mention you can just open a file elsewhere and put unparsable junk there. I realize you can corrupt any file\/format, but think of it as \"another coworker edits your paredit-crafted-tree in notepad (usual situation, not a rare act of sabotage)\" "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\n– means you are writing lines of text = doing line oriented programming"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07BD7U4S4R",
        "type": "message",
        "ts": "1748889011.752469",
        "client_msg_id": "b765fb2b-73c2-4c9b-9392-0bb387d544d4",
        "text": "re: smalltalk ENVY: going through these: <https:\/\/www.youtube.com\/@jarober\/search?query=envy>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "d0343f70ca57",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-07-04\/7377091009748_d0343f70ca57c18eeb41_72.png",
            "first_name": "misha",
            "real_name": "misha",
            "display_name": "misha",
            "team": "T5TCAFTA9",
            "name": "misha.akovantsev",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1747153874.428279",
        "parent_user_id": "ULM3U6275",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "42BB7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: smalltalk ENVY: going through these: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/@jarober\/search?query=envy"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1748897182.780299",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1748897271.000000"
        },
        "client_msg_id": "e45d0e49-baf6-45c5-873d-7f73a7a060a5",
        "text": "One of my favourite recent youtube findings is Cat Graffam, who uses all sorts of \"wrong\" tools to do fine art. Every one of these videos is a combination of esoterica, hilarity, software design misery, and art theory. Good to put on in the background while you spend 20 minutes making fancy coffee, for instance.\n\nA few favs:\n• <https:\/\/www.youtube.com\/watch?v=HKBdhm8_hIQ|Da Vinci's Lady with an Ermine in the iPhone Notes app> (a real nail-biter for anyone who has ever made a drawing canvas app, especially if you consider that Notes is backed by a CRDT)\n• <https:\/\/www.youtube.com\/watch?v=jJSx7q-Mt0c&t=159s|Goya's \"Saturn Devouring His Son\" in Mario Paint>\n• <https:\/\/www.youtube.com\/watch?v=J67oA_FL1Nc|Caravaggio's \"Judith Beheading Holofornes\" in Kid Pix>\n• <https:\/\/www.youtube.com\/watch?v=PkDrdkUO9aI|Hopper's \"Nighthawks\" with a weird Nintendo Wii drawing tablet> (the save-load UI is baffling)\n(This might be less FoC-relevant for folks who aren't working on programmable drawing canvases, but… (A) there are dozens of us!, and (B) it's good software craft catharsis)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "attachments": [
            {
                "from_url": "https:\/\/www.youtube.com\/watch?v=jJSx7q-Mt0c&amp;t=159s",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/jJSx7q-Mt0c\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/jJSx7q-Mt0c?feature=oembed&start=159&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Recreating Goya&#39;s &quot;Saturn Devouring His Son&quot; in Mario Paint\"><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=jJSx7q-Mt0c&amp;t=159s",
                "fallback": "YouTube Video: Recreating Goya's \"Saturn Devouring His Son\" in Mario Paint",
                "title": "Recreating Goya's \"Saturn Devouring His Son\" in Mario Paint",
                "title_link": "https:\/\/www.youtube.com\/watch?v=jJSx7q-Mt0c&amp;t=159s",
                "author_name": "Cat Graffam",
                "author_link": "https:\/\/www.youtube.com\/@CatherineGraffam",
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yA+dL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of my favourite recent youtube findings is Cat Graffam, who uses all sorts of \"wrong\" tools to do fine art. Every one of these videos is a combination of esoterica, hilarity, software design misery, and art theory. Good to put on in the background while you spend 20 minutes making fancy coffee, for instance.\n\nA few favs:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=HKBdhm8_hIQ",
                                        "text": "Da Vinci's Lady with an Ermine in the iPhone Notes app"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (a real nail-biter for anyone who has ever made a drawing canvas app, especially if you consider that Notes is backed by a CRDT)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=jJSx7q-Mt0c&t=159s",
                                        "text": "Goya's \"Saturn Devouring His Son\" in Mario Paint"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=J67oA_FL1Nc",
                                        "text": "Caravaggio's \"Judith Beheading Holofornes\" in Kid Pix"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https:\/\/www.youtube.com\/watch?v=PkDrdkUO9aI",
                                        "text": "Hopper's \"Nighthawks\" with a weird Nintendo Wii drawing tablet"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (the save-load UI is baffling)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(This might be less FoC-relevant for folks who aren't working on programmable drawing canvases, but… (A) there are dozens of us!, and (B) it's good software craft catharsis)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06MJU6LBN3",
                    "UMQ6LR9NZ",
                    "U023V63MF6V",
                    "U075Q2WP3UK",
                    "U07PYD02V2S",
                    "U05UF5P8PT8",
                    "UA14TGLTC",
                    "U08MLKM89K7",
                    "UML4ZEKDK"
                ],
                "count": 9
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1748901322.160649",
        "client_msg_id": "fa88e5ae-c34b-47a2-ac89-b0740c7f2877",
        "text": "<https:\/\/blog.muni.town\/roomy-deep-dive|Roomy chat looks interesting.> In addition to various levels of nerding out we can do over it, it provides an interesting looking workflow for a community to go from ephemeral chat to slightly persistent threads to more timeless long-form writing.\n\n<https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1748876629638399|Related thread.> <https:\/\/roomy.chat\/leaf:yb3x1x863ynzpty4v4d2km7qpc71b23drqxbq6c82aennjcmfjjg\/leaf:hq49zgw2n92z1v8w154jds4v73mzgvbxmh2pt0xzfqw2mkmhyqv0|FoC-esque test group.> You need to authenticate using a Bsky\/ATproto account.\n\nBe aware it's all alpha software so far and might get torn down at any time. But in principle even if that happens we will all have the data or the group in our browser storage :exploding_head:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748901322.160649",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1752224873.190599",
        "reply_users": [
            "UCUSW7WVD",
            "UJFN50C00"
        ],
        "replies": [
            {
                "user": "UCUSW7WVD",
                "ts": "1748901635.981869"
            },
            {
                "user": "UJFN50C00",
                "ts": "1752224536.958969"
            },
            {
                "user": "UJFN50C00",
                "ts": "1752224873.190599"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6bYzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/blog.muni.town\/roomy-deep-dive",
                                "text": "Roomy chat looks interesting."
                            },
                            {
                                "type": "text",
                                "text": " In addition to various levels of nerding out we can do over it, it provides an interesting looking workflow for a community to go from ephemeral chat to slightly persistent threads to more timeless long-form writing.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/futureofcoding.slack.com\/archives\/C5T9GPWFL\/p1748876629638399",
                                "text": "Related thread."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/roomy.chat\/leaf:yb3x1x863ynzpty4v4d2km7qpc71b23drqxbq6c82aennjcmfjjg\/leaf:hq49zgw2n92z1v8w154jds4v73mzgvbxmh2pt0xzfqw2mkmhyqv0",
                                "text": "FoC-esque test group."
                            },
                            {
                                "type": "text",
                                "text": " You need to authenticate using a Bsky\/ATproto account.\n\nBe aware it's all alpha software so far and might get torn down at any time. But in principle even if that happens we will all have the data or the group in our browser storage "
                            },
                            {
                                "type": "emoji",
                                "name": "shocked_face_with_exploding_head",
                                "unicode": "1f92f"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U06SS0DHZD1"
                ],
                "count": 1
            },
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1748901635.981869",
        "client_msg_id": "947a96ca-f4dc-444a-883e-c73130e9db6f",
        "text": "Oh yeah, there's a link right in the UI that lets _anyone_ download a zip file containing the whole group's data _at any time!_",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1748901322.160649",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/skip",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh yeah, there's a link right in the UI that lets "
                            },
                            {
                                "type": "text",
                                "text": "anyone",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " download a zip file containing the whole group's data "
                            },
                            {
                                "type": "text",
                                "text": "at any time!",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "scream",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    }
]