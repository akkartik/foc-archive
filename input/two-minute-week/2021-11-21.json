[
    {
        "user": "UPX3PH28N",
        "type": "message",
        "ts": "1637514717.060300",
        "client_msg_id": "f21f3773-5a7e-46db-8b69-a553258ef783",
        "text": ":wave: Hi, all! This is my first post on Alpha here, so I want to establish a little bit of context. (The next posts will be shorter.)\n\nAlpha—a programming language for extensible systems (and hopefully malleable ones in the future). I imagine it as something in between of Julia, Emacs Lisp, and Smalltalk.\n\nI’ve been working on it for a month now, so it’s still an infant. It has REPL, user-defined types, multi-methods, and a print function, but not much else :grin:\n\nSo far it serves two purposes:\n• it is a playground for me to experiment with PLT ideas (multi-methods, JIT, gradual typing, etc)\n• it allows me to gain actual experience implementing languages (my problem is that I have too much knowledge and too little practice)\nThis week I was adding a garbage collector. It was tougher than I expected, but I got it working with the host language. The compiler still needs to be modified to produce the compatible code, so that’s the focus of the next week.\n\nHere is a larger update for this week with memory layout images and some tips on debugging GC:\n<https:\/\/www.alexeyshmalko.com\/alpha-3\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g58ad4af42f7",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58ad4af42f7cff8698951a7befb26f0f.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-72.png",
            "first_name": "Oleksii",
            "real_name": "Oleksii Shmalko",
            "display_name": "Oleksii Shmalko",
            "team": "T5TCAFTA9",
            "name": "rasen.dubi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c=1da",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "wave",
                                "unicode": "1f44b"
                            },
                            {
                                "type": "text",
                                "text": " Hi, all! This is my first post on Alpha here, so I want to establish a little bit of context. (The next posts will be shorter.)\n\nAlpha—a programming language for extensible systems (and hopefully malleable ones in the future). I imagine it as something in between of Julia, Emacs Lisp, and Smalltalk.\n\nI’ve been working on it for a month now, so it’s still an infant. It has REPL, user-defined types, multi-methods, and a print function, but not much else "
                            },
                            {
                                "type": "emoji",
                                "name": "grin",
                                "unicode": "1f601"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSo far it serves two purposes:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "it is a playground for me to experiment with PLT ideas (multi-methods, JIT, gradual typing, etc)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "it allows me to gain actual experience implementing languages (my problem is that I have too much knowledge and too little practice)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis week I was adding a garbage collector. It was tougher than I expected, but I got it working with the host language. The compiler still needs to be modified to produce the compatible code, so that’s the focus of the next week.\n\nHere is a larger update for this week with memory layout images and some tips on debugging GC:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.alexeyshmalko.com\/alpha-3\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U0123H7JRDM",
                    "UC2A2ARPT",
                    "UML4ZEKDK"
                ],
                "count": 4
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1637519286.061000",
        "client_msg_id": "12830f99-d415-43dd-911a-36550a539152",
        "text": "In spite of my concerns that what is saved to disk may diverge from the state when building the program, I'm starting to realize that constantly rebooting the environment is a non-starter when the reboot includes edit state. Currently if I make a mistake when editing one function, running the program causes the whole environment to forget which function I was editing. So I end up back at the top-level hierarchy view.\n\nSo the current architecture has some fundamental problems. Rebooting programs from scratch only works in Unix because the editor is in a separate process that isn't rebooted.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1636928453.051600",
        "parent_user_id": "UCUSW7WVD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iVzpk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In spite of my concerns that what is saved to disk may diverge from the state when building the program, I'm starting to realize that constantly rebooting the environment is a non-starter when the reboot includes edit state. Currently if I make a mistake when editing one function, running the program causes the whole environment to forget which function I was editing. So I end up back at the top-level hierarchy view.\n\nSo the current architecture has some fundamental problems. Rebooting programs from scratch only works in Unix because the editor is in a separate process that isn't rebooted."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]