[
    {
        "user": "UKDM3GLAJ",
        "type": "message",
        "ts": "1586444340.201400",
        "client_msg_id": "2678661c-3561-4879-b51c-d864c029ea38",
        "text": "Great read. Found this particularly interesting wrt this community:\n&gt; In software construction, we often start by _reinventing the form_ and, consequently, we have to face a very wide range of design problems. Are there cases of software construction that are more akin to the vernacular or unselfconscious design? One possible area of interest might be how people solve problems in spreadsheet systems like Excel. Spreadsheets define a relatively fixed form and allow the user to focus on skilful solutions to specific problems.\nMake me wonder if Excel is special, not so much because of its spreadsheet properties, but just because it’s constrained. Perhaps we can “discover” other excels simply by exploring other constrained forms of programming, rather than assuming Excel “gets it right” in some way.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "34e7a55348e8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-01-04\/893378739792_34e7a55348e8c86c1901_72.jpg",
            "first_name": "",
            "real_name": "Jared Windover",
            "display_name": "Jared Windover",
            "team": "T5TCAFTA9",
            "name": "jaredwindover",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586372344.197200",
        "parent_user_id": "U8A5MS6R1",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "imq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great read. Found this particularly interesting wrt this community:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In software construction, we often start by "
                            },
                            {
                                "type": "text",
                                "text": "reinventing the form",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and, consequently, we have to face a very wide range of design problems. Are there cases of software construction that are more akin to the vernacular or unselfconscious design? One possible area of interest might be how people solve problems in spreadsheet systems like Excel. Spreadsheets define a relatively fixed form and allow the user to focus on skilful solutions to specific problems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Make me wonder if Excel is special, not so much because of its spreadsheet properties, but just because it’s constrained. Perhaps we can “discover” other excels simply by exploring other constrained forms of programming, rather than assuming Excel “gets it right” in some way."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1586452234.203100",
        "client_msg_id": "a80a18b1-0a59-4501-a88d-feb42e0cf1a7",
        "text": "Really good read on language design and community management. Sometimes the principled design approach takes a toll on everyone when it's iterative <https:\/\/lukeplant.me.uk\/blog\/posts\/why-im-leaving-elm\/|https:\/\/lukeplant.me.uk\/blog\/posts\/why-im-leaving-elm\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "reply_count": 24,
        "reply_users_count": 6,
        "latest_reply": "1586552946.220200",
        "reply_users": [
            "UJN1TAYEQ",
            "UFQQ3P867",
            "UEQ6M68H0",
            "UHDQ62M4P",
            "UCUSW7WVD",
            "UEBG0NPDK"
        ],
        "replies": [
            {
                "user": "UJN1TAYEQ",
                "ts": "1586454402.203800"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586454628.204000"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586454731.204200"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586454918.204400"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1586456550.204700"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1586456776.204900"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1586457462.205500"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1586458014.205800"
            },
            {
                "user": "UFQQ3P867",
                "ts": "1586458084.206000"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1586458093.206200"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586480105.213600"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586480477.213800"
            },
            {
                "user": "UEQ6M68H0",
                "ts": "1586494070.214800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586533563.217300"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1586533695.217500"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586535156.217700"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1586535253.217900"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1586546055.218200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1586546949.218400"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1586547966.218700"
            },
            {
                "user": "UEBG0NPDK",
                "ts": "1586548362.219100"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586550648.219800"
            },
            {
                "user": "UHDQ62M4P",
                "ts": "1586550819.220000"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1586552946.220200"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "axuj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really good read on language design and community management. Sometimes the principled design approach takes a toll on everyone when it's iterative "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/lukeplant.me.uk\/blog\/posts\/why-im-leaving-elm\/",
                                "text": "https:\/\/lukeplant.me.uk\/blog\/posts\/why-im-leaving-elm\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UDKTZSD6H"
                ],
                "count": 2
            },
            {
                "name": "open_mouth",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1586453469.203400",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1586453516.000000"
        },
        "client_msg_id": "84324934-eec3-46a5-b630-f1cade461e09",
        "text": "How does this meaningfully differ from Zappier or IFTTT or their army of derivatives?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7i236",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How does this meaningfully differ from Zappier or IFTTT or their army of derivatives?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1586454402.203800",
        "client_msg_id": "8b2fa426-6704-4942-8bb4-c8df5a3ed0f5",
        "text": "I don't follow Elm, so it's the first I heard of this controversy. Nevertheless, I understand why Elm 0.19 needed to impose these restrictions. Elm is a pure functional language. Functions cannot have side effects. It's the same for my language, Curv, so I'm dealing with similar issues. I don't see any discussion on the internet explaining the Elm 0.19 restrictions from the language maintainers perspective, so I'll give my take.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mz0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow Elm, so it's the first I heard of this controversy. Nevertheless, I understand why Elm 0.19 needed to impose these restrictions. Elm is a pure functional language. Functions cannot have side effects. It's the same for my language, Curv, so I'm dealing with similar issues. I don't see any discussion on the internet explaining the Elm 0.19 restrictions from the language maintainers perspective, so I'll give my take."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1586454628.204000",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1586454993.000000"
        },
        "client_msg_id": "c1a4da96-d5ce-48a8-8da9-6b98b5b44589",
        "text": "I have considered adding native modules to Curv. I think it would be a big mistake, because people would use that as an escape hatch for adding impure functions to Curv. The problem is: this would break the compiler and the runtime. The assumption that functions are pure is baked in to the design of the language and its implementation at a fundamental level. If there were impure native modules, then standard pure-function compiler optimizations would break everybodies code using these native modules, and that would be reported as bugs. Users would take the position that these \"bugs\" need to be fixed, which from my perspective would mean redesigning the language, the compiler and the runtime along entirely different lines, so that Curv is now an impure functional language. I don't want to put myself in that position.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3u8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have considered adding native modules to Curv. I think it would be a big mistake, because people would use that as an escape hatch for adding impure functions to Curv. The problem is: this would break the compiler and the runtime. The assumption that functions are pure is baked in to the design of the language and its implementation at a fundamental level. If there were impure native modules, then standard pure-function compiler optimizations would break everybodies code using these native modules, and that would be reported as bugs. Users would take the position that these \"bugs\" need to be fixed, which from my perspective would mean redesigning the language, the compiler and the runtime along entirely different lines, so that Curv is now an impure functional language. I don't want to put myself in that position."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1586454731.204200",
        "client_msg_id": "122b6c24-868b-493f-a168-3bcfe64d9216",
        "text": "Turns out that Elm 0.18 had support for native modules. And Elm 0.19 added compiler optimizations that are incompatible with existing native modules, which I assume contained impure functions. So Elm 0.19 now only supports native modules that are approved by the core implementation team.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "enGdm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Turns out that Elm 0.18 had support for native modules. And Elm 0.19 added compiler optimizations that are incompatible with existing native modules, which I assume contained impure functions. So Elm 0.19 now only supports native modules that are approved by the core implementation team."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1586454918.204400",
        "client_msg_id": "4eff8027-60f7-4aab-a337-28805c9762d1",
        "text": "And there is a big outcry about the authoritarian, non-open-source attitude of the Elm team. Sounds like a bad situation.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ATN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And there is a big outcry about the authoritarian, non-open-source attitude of the Elm team. Sounds like a bad situation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1586456550.204700",
        "client_msg_id": "6b2e4fef-ce35-4e9d-9aae-0386e16b82c2",
        "text": "This post focuses on what he sees as hypocrisy: many non-essential modules _owned by the maintainers and their friends_ are impure (eg Evan's markdown module). So the whole purity transition is inviable if the maintainers themselves can't adapt to their own pure standards.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H8M=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This post focuses on what he sees as hypocrisy: many non-essential modules "
                            },
                            {
                                "type": "text",
                                "text": "owned by the maintainers and their friends",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are impure (eg Evan's markdown module). So the whole purity transition is inviable if the maintainers themselves can't adapt to their own pure standards."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1586456776.204900",
        "edited": {
            "user": "UFQQ3P867",
            "ts": "1586456961.000000"
        },
        "client_msg_id": "4f5fb48e-9150-404f-bd76-37842fb0cf30",
        "text": "If Elm was strictly pure from the beginning, those who needed impurity wouldn't have become invested in the project. The problem is that there's now a lot of broken deeply-vested production projects due to the opaque and unilateral decision of 0.19. If your product is built in Elm and relies on impurity with no clear path forward, you've gotten completely burned by this switch.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8DEbA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If Elm was strictly pure from the beginning, those who needed impurity wouldn't have become invested in the project. The problem is that there's now a lot of broken deeply-vested production projects due to the opaque and unilateral decision of 0.19. If your product is built in Elm and relies on impurity with no clear path forward, you've gotten completely burned by this switch."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U8A5MS6R1",
        "type": "message",
        "ts": "1586457048.205300",
        "client_msg_id": "2ccc43e7-9d49-4640-806b-cb47a9cc1bf9",
        "text": "<@UFLN9JFRT> - I have nothing of depth, just the idea that tuplespace like architectures also seem like a good foundation for cross service coordination.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "b7c63cc07373",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-21\/584465935395_b7c63cc07373326ec6ea_72.jpg",
            "first_name": "Shalabh",
            "real_name": "Shalabh",
            "display_name": "shalabh",
            "team": "T5TCAFTA9",
            "name": "shalabh.chaturvedi",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yroc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " - I have nothing of depth, just the idea that tuplespace like architectures also seem like a good foundation for cross service coordination."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1586457462.205500",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1586493815.000000"
        },
        "client_msg_id": "fb2b938f-cbf9-46e6-8037-bd46a91df7f5",
        "text": "Some people can't handle the _*benevolent dictator for life*_ control that language authors can have. It certainly didn't hurt Python, which reached up into the top 3 languages, with benevolent dictator Van Rossum just stepping down recently. Evan Czaplicki is a smart guy, and he is doing a first class job on Elm. However, with the limited resources available, the features people want (and Mr. Plant wanted native modules and a localization system) may not happen in a timely fashion, and in that case you have to bail. It is after all still before version 1.0, so one has to give them some slack. Mr. Plant has a 7000 line program he doesn't want to rewrite, so i understand the pain, but luckily 7000 is a small program. Elm doesn't have magic dust so it can be converted, the effort can be measured in days of work.\n\nThere is a lesson here for all language designers; it is much less painful for the users if you only add to the feature set; subtracting a previously available feature may cause agony among the user base.\n\nBut there is a weakness in the additive language evolution process, because if you avoid pain in the user base by only adding (C++ are you listening?), if you keep up that process, you end up with a kitchen sink type of language mess after a few decades, and the whole thing should be be thrown out.\n\nIf your original design is clean, hopefully you won't need to add much. I used Modula-2 and it only needed adding a preprocessor for conditional compilation, and some unicode string markers in its evolution. It was so simple it was complete from the start.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=is6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some people can't handle the "
                            },
                            {
                                "type": "text",
                                "text": "benevolent dictator for life",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " control that language authors can have. It certainly didn't hurt Python, which reached up into the top 3 languages, with benevolent dictator Van Rossum just stepping down recently. Evan Czaplicki is a smart guy, and he is doing a first class job on Elm. However, with the limited resources available, the features people want (and Mr. Plant wanted native modules and a localization system) may not happen in a timely fashion, and in that case you have to bail. It is after all still before version 1.0, so one has to give them some slack. Mr. Plant has a 7000 line program he doesn't want to rewrite, so i understand the pain, but luckily 7000 is a small program. Elm doesn't have magic dust so it can be converted, the effort can be measured in days of work.\n\nThere is a lesson here for all language designers; it is much less painful for the users if you only add to the feature set; subtracting a previously available feature may cause agony among the user base.\n\nBut there is a weakness in the additive language evolution process, because if you avoid pain in the user base by only adding (C++ are you listening?), if you keep up that process, you end up with a kitchen sink type of language mess after a few decades, and the whole thing should be be thrown out.\n\nIf your original design is clean, hopefully you won't need to add much. I used Modula-2 and it only needed adding a preprocessor for conditional compilation, and some unicode string markers in its evolution. It was so simple it was complete from the start."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UFQQ3P867"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1586458014.205800",
        "client_msg_id": "9d41cd11-aacc-4f2b-bf2c-a44b1f086dff",
        "text": "<@UEQ6M68H0> agree with all of that -- one thing I'll add though is that the \"1.0=production\" distinction is far more complicated than you make it. Plenty of companies use Elm in production (which the team does evangelize), and plenty of other projects haven't hit 1.0 and it's been years (eg React Native)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MIojd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " agree with all of that -- one thing I'll add though is that the \"1.0=production\" distinction is far more complicated than you make it. Plenty of companies use Elm in production (which the team does evangelize), and plenty of other projects haven't hit 1.0 and it's been years (eg React Native)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UFQQ3P867",
        "type": "message",
        "ts": "1586458084.206000",
        "client_msg_id": "06885c78-85e9-4a6c-a1a1-89170e216e93",
        "text": "I do still agree with the overall point that you get what you sign up for and 1.0+ is a sign of a language's age",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "75bc4f5fbeed",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-12-20\/882734188373_75bc4f5fbeedc5a2213e_72.jpg",
            "first_name": "",
            "real_name": "Max Krieger",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "photos482",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gyQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do still agree with the overall point that you get what you sign up for and 1.0+ is a sign of a language's age"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1586458093.206200",
        "client_msg_id": "2c4a2d01-37a3-4241-bf3c-3ad0402044e6",
        "text": "In my first job after college i worked for a consulting firm that made a decision support system for Fortune-50 companies. It was a terrific product, but when a user wanted a feature, they would throw serious money at the company and they got it. If they put enough money on the project it got bumped up to #1. It is an honest system, money is voting; in open source you have an economy of feelings, where people think their devotion to a product and evangelism somehow give them more votes. In many ways i prefer the clarity of the commercial world. A language is a tool, and its value is created by users accomplishing something else. It is a crucial part of a project, but just like a hammer or saw, it is not the final product. The one area where software tools have a flaw is that  when you construct a house the hammer and saws used to build the house are not left inside the house; while in software, there is usually some runtime system that is permanently embedded in the product and if that runtime gets broken the whole thing stops functioning.  This is a key reason the software industry has been like building sandcastles.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Xm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my first job after college i worked for a consulting firm that made a decision support system for Fortune-50 companies. It was a terrific product, but when a user wanted a feature, they would throw serious money at the company and they got it. If they put enough money on the project it got bumped up to #1. It is an honest system, money is voting; in open source you have an economy of feelings, where people think their devotion to a product and evangelism somehow give them more votes. In many ways i prefer the clarity of the commercial world. A language is a tool, and its value is created by users accomplishing something else. It is a crucial part of a project, but just like a hammer or saw, it is not the final product. The one area where software tools have a flaw is that  when you construct a house the hammer and saws used to build the house are not left inside the house; while in software, there is usually some runtime system that is permanently embedded in the product and if that runtime gets broken the whole thing stops functioning.  This is a key reason the software industry has been like building sandcastles."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1586462800.208000",
        "client_msg_id": "0aee7644-afea-4a7b-98d0-d84933b8457a",
        "text": "Help me fill in this _spectrum of models of computation_.\n\n• [Mechanical — designed to be built]\n•\n• Analytical Engine\n• Turing Machine\n• von Neumann\n• Rule 110\n• Lambda Calculus\n• SKI Combinator Calculus\n•\n• [Theoretical — difficult, but of course possible, to make a physical machine for]\n\nAre these in the correct order? What other models exist that I should add here, and where should they go?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "reply_count": 25,
        "reply_users_count": 9,
        "latest_reply": "1586673988.336400",
        "reply_users": [
            "UBN9AFS0N",
            "UC2A2ARPT",
            "UUQ2EQW21",
            "U6FKVSVCK",
            "UJN1TAYEQ",
            "UDKTZSD6H",
            "UD3AK9JRF",
            "U8A5MS6R1",
            "UP6G25H35"
        ],
        "replies": [
            {
                "user": "UBN9AFS0N",
                "ts": "1586463993.208100"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1586464634.208300"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1586465201.208500"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1586465260.208800"
            },
            {
                "user": "UBN9AFS0N",
                "ts": "1586465315.209100"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1586466212.211600"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1586468734.212000"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1586475528.212200"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1586475599.212400"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586476336.212700"
            },
            {
                "user": "U6FKVSVCK",
                "ts": "1586476582.212900"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1586489578.214200"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1586489578.214400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1586554768.220400"
            },
            {
                "user": "UC2A2ARPT",
                "ts": "1586554991.220700"
            },
            {
                "user": "UD3AK9JRF",
                "ts": "1586570996.221100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586571391.221300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586572568.221500"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586573390.221800"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1586573564.222100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586610324.279100"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1586611415.279300"
            },
            {
                "user": "U8A5MS6R1",
                "ts": "1586634209.321100"
            },
            {
                "user": "UDKTZSD6H",
                "ts": "1586658972.335400"
            },
            {
                "user": "UP6G25H35",
                "ts": "1586673988.336400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "psB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Help me fill in this "
                            },
                            {
                                "type": "text",
                                "text": "spectrum of models of computation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n• [Mechanical — designed to be built]\n•\n• Analytical Engine\n• Turing Machine\n• von Neumann\n• Rule 110\n• Lambda Calculus\n• SKI Combinator Calculus\n•\n• [Theoretical — difficult, but of course possible, to make a physical machine for]\n\nAre these in the correct order? What other models exist that I should add here, and where should they go?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1586463993.208100",
        "client_msg_id": "18185560-3840-48af-8db6-a63821b46df1",
        "text": "are biological systems are fork in the sequence?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vaNU0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are biological systems are fork in the sequence?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1586464634.208300",
        "client_msg_id": "0843d4cc-70c0-4175-bdac-b833af0f413c",
        "text": "Give me an example.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gx6PP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Give me an example."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1586465201.208500",
        "client_msg_id": "1fc3bb67-caee-4d6a-85db-31e556c69249",
        "text": "<https:\/\/en.wikipedia.org\/wiki\/Ant_colony_optimization_algorithms>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/34\/Safari_ants.jpg\/1200px-Safari_ants.jpg",
                "image_width": 1200,
                "image_height": 796,
                "image_bytes": 289860,
                "title": "Ant colony optimization algorithms",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Ant_colony_optimization_algorithms",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Ant_colony_optimization_algorithms",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "In computer science and operations research, the ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. Artificial Ants stand for multi-agent methods inspired by the behavior of real ants. \nThe pheromone-based communication of biological ants is often the predominant paradigm used.   Combinations of Artificial Ants and local search algorithms have become a method of choice for numerous optimization tasks involving some sort of graph, e.g., vehicle routing and internet routing. The burgeoning activity in this field has led to conferences dedicated solely to Artificial Ants, and to numerous commercial applications by specialized companies such as AntOptima.\nAs an example, Ant colony optimization  is a class of optimization algorithms modeled on the actions of an ant colony.  Artificial 'ants' (e.g. simulation agents) locate optimal solutions by moving through a parameter space representing all possible solutions.  Real ants lay down pheromones directing each other to resources while exploring their environment.  The simulated 'ants' similarly record their positions and the quality of their solutions, so that in later simulation iterations more ants locate better solutions.  One variation on this approach is the bees algorithm, which is more analogous to the foraging patterns of the honey bee, another social insect.\nThis algorithm is a member of the ant colony algorithms family, in swarm intelligence methods, and it constitutes some metaheuristic optimizations. Initially proposed by Marco Dorigo in 1992 in his PhD thesis, the first algorithm was aiming to search for an optimal path in a graph, based on the behavior of ants seeking a path between their colony and a source of food. The original idea has since diversified to solve a wider class of numerical problems, and as a result, several problems have emerged, drawing on various aspects of the behavior of ants. From a broader perspective, ACO performs a model-based search and shares some similarities with estimation of distribution algorithms.",
                "fallback": "wikipedia: Ant colony optimization algorithms",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Ant_colony_optimization_algorithms"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6oq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Ant_colony_optimization_algorithms"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1586465260.208800",
        "client_msg_id": "5ab8cbfd-797e-4682-ab7a-ed7444f6b8da",
        "text": "<https:\/\/www.wired.com\/2010\/01\/slime-mold-grows-network-just-like-tokyo-rail-system\/>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "WIRED",
                "title": "Slime Mold Grows Network Just Like Tokyo Rail System",
                "title_link": "https:\/\/www.wired.com\/2010\/01\/slime-mold-grows-network-just-like-tokyo-rail-system\/",
                "text": "Talented and dedicated engineers spent countless hours designing Japan’s rail system to be one of the world’s most efficient. Could have just asked a slime mold. When presented with oat flakes arranged in the pattern of Japanese cities around Tokyo, brainless, single-celled slime molds construct networks of nutrient-channeling tubes that are strikingly similar to the \\[…\\]",
                "fallback": "WIRED: Slime Mold Grows Network Just Like Tokyo Rail System",
                "image_url": "https:\/\/media.wired.com\/photos\/59346eb5d80dd005b42b4404\/2:1\/w_2500,c_limit\/slime_mold_21.jpg",
                "image_width": 400,
                "image_height": 200,
                "from_url": "https:\/\/www.wired.com\/2010\/01\/slime-mold-grows-network-just-like-tokyo-rail-system\/",
                "image_bytes": 17836,
                "service_icon": "https:\/\/www.wired.com\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/www.wired.com\/2010\/01\/slime-mold-grows-network-just-like-tokyo-rail-system\/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BD+SW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https:\/\/www.wired.com\/2010\/01\/slime-mold-grows-network-just-like-tokyo-rail-system\/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBN9AFS0N",
        "type": "message",
        "ts": "1586465315.209100",
        "client_msg_id": "d665cfaa-2fb2-4c49-ba11-d8d87f50816c",
        "text": "in general: <https:\/\/en.wikipedia.org\/wiki\/Swarm_intelligence>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7f0f1c0238ec",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-07-09\/395086754178_7f0f1c0238ec02befdab_72.jpg",
            "first_name": "Mariano",
            "real_name": "Mariano Guerra",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "mariano",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "image_url": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/5e\/Auklet_flock_Shumagins_1986.jpg",
                "image_width": 3756,
                "image_height": 2561,
                "image_bytes": 1977269,
                "title": "Swarm intelligence",
                "title_link": "https:\/\/en.wikipedia.org\/wiki\/Swarm_intelligence",
                "from_url": "https:\/\/en.wikipedia.org\/wiki\/Swarm_intelligence",
                "author_name": "Wikipedia",
                "author_link": "https:\/\/en.wikipedia.org\/",
                "text": "Swarm intelligence (SI) is the collective behavior of decentralized, self-organized systems, natural or artificial. The concept is employed in work on artificial intelligence. The expression was introduced by Gerardo Beni and Jing Wang in 1989, in the context of cellular robotic <http:\/\/systems.SI|systems.SI> systems consist typically of a population of simple agents or boids interacting locally with one another and with their environment. The inspiration often comes from nature, especially biological systems. The agents follow very simple rules, and although there is no centralized control structure dictating how individual agents should behave, local, and to a certain degree random, interactions between such agents lead to the emergence of \"intelligent\" global behavior, unknown to the individual agents. Examples of swarm intelligence in natural systems include ant colonies, bird flocking, hawks hunting, animal herding, bacterial growth, fish schooling and microbial intelligence.\nThe application of swarm principles to robots is called swarm robotics, while 'swarm intelligence' refers to the more general set of algorithms. 'Swarm prediction' has been used in the context of forecasting problems. Similar approaches to those proposed for swarm robotics are considered for genetically modified organisms in synthetic collective intelligence.",
                "fallback": "wikipedia: Swarm intelligence",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/wikipedia.png",
                "id": 1,
                "original_url": "https:\/\/en.wikipedia.org\/wiki\/Swarm_intelligence"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5PMZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in general: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Swarm_intelligence"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1586466212.211600",
        "client_msg_id": "49371222-0F56-46D0-BD71-D25C75736581",
        "text": "Was going to suggest Wolfram &amp; others cellular automata- but hadn’t heard of Rule 110, and that covers it I think! What about Rube Goldberg near the mechanical end?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uVe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Was going to suggest Wolfram & others cellular automata- but hadn’t heard of Rule 110, and that covers it I think! What about Rube Goldberg near the mechanical end?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U0119RRB1MK",
        "type": "message",
        "ts": "1586468413.211800",
        "client_msg_id": "0f8fad02-3d06-4708-aafa-38ae326c01d9",
        "text": "Thanks for that Tom, interesting",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g5231a4183b4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/5231a4183b420b2f43a0acdf4330550d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "",
            "real_name": "Samuel Squire",
            "display_name": "Samuel Squire",
            "team": "T5TCAFTA9",
            "name": "sam717",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586346043.180000",
        "parent_user_id": "U0119RRB1MK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aOt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for that Tom, interesting"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UC2A2ARPT",
        "type": "message",
        "ts": "1586468734.212000",
        "client_msg_id": "45a78993-d3e8-4567-8da2-c7054e003eb4",
        "text": "The common thread among all the things I listed is that they're Turing complete. I think that's a minimum requirement for this exercise.\n\nThis raises a question — do we have models of computation that cannot be implemented using a physical machine? I bet we do. These things would go below the bottom end of the spectrum. And the biological examples \/ Rube Goldberg variations (:wink:) would probably go above the top (or on an entirely different axis)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gf94d2ed5e18",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/6f94d2ed5e188be9865a531021b0afcd.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0013-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Reese",
            "display_name": "Ivan Reese",
            "team": "T5TCAFTA9",
            "name": "ivanreese",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oz8Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The common thread among all the things I listed is that they're Turing complete. I think that's a minimum requirement for this exercise.\n\nThis raises a question — do we have models of computation that cannot be implemented using a physical machine? I bet we do. These things would go below the bottom end of the spectrum. And the biological examples \/ Rube Goldberg variations ("
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            },
                            {
                                "type": "text",
                                "text": ") would probably go above the top (or on an entirely different axis)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1586475528.212200",
        "client_msg_id": "8d2d486b-6e46-4873-b245-4d8e5faa2c97",
        "text": "Not sure if the order in the initial list is relevant— if so, I'd put Turing Machine just above lambda calculus. it's definitely more abstract than a Von Neumann machine",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "75pK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if the order in the initial list is relevant— if so, I'd put Turing Machine just above lambda calculus. it's definitely more abstract than a Von Neumann machine"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1586475599.212400",
        "client_msg_id": "534c667e-d622-4f33-ba65-888bd40a0534",
        "text": "also a bit of a tangent, but if biological computation is of interest, this talk will surely blow your mind: <https:\/\/www.youtube.com\/watch?v=RjD1aLm4Thg>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "What Bodies Think About: Bioelectric Computation Outside the Nervous System - NeurIPS 2018",
                "title_link": "https:\/\/www.youtube.com\/watch?v=RjD1aLm4Thg",
                "author_name": "The Artificial Intelligence Channel",
                "author_link": "https:\/\/www.youtube.com\/user\/Maaaarth",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/RjD1aLm4Thg\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: What Bodies Think About: Bioelectric Computation Outside the Nervous System - NeurIPS 2018",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/RjD1aLm4Thg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=RjD1aLm4Thg",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=RjD1aLm4Thg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also a bit of a tangent, but if biological computation is of interest, this talk will surely blow your mind: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=RjD1aLm4Thg"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJN1TAYEQ",
        "type": "message",
        "ts": "1586476336.212700",
        "client_msg_id": "7d9ae91e-47a1-4d4a-8aa1-689907053b2f",
        "text": "quantum computing",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g4185a542241",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/34185a5422416f82b3e4a62964f2866b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0008-72.png",
            "first_name": "",
            "real_name": "Doug Moen",
            "display_name": "Doug Moen",
            "team": "T5TCAFTA9",
            "name": "doug",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Js3wz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "quantum computing"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U6FKVSVCK",
        "type": "message",
        "ts": "1586476582.212900",
        "client_msg_id": "7d0ef136-fa7f-41dd-813b-1b7fe5fe9a0c",
        "text": "I might group things like this:\n```physical systems which compute:\n  - actual computers (almost always implementations of a Von Neumann architecture)\n  - certain biological systems\n    - brains\n    - intracellular chemical networks (linked video)\n    - DNA\n  - Babbage's Analytical Engine\n\nabstractions of physical machines:\n  - Von Neumann architecture\n  - hardware description languages\n\nabstract \/ mathematical systems which compute:\n  - rule 110 (&amp; other CA rules, like Conway's)\n  - recurrent neural networks\n  - any programming language\n\nabstractions of computation:\n  - Turing machine\n  - lambda calculus\n  - universal function```",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "cad501b70b26",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-07\/786673147216_cad501b70b26e7666ed0_72.png",
            "first_name": "Tim",
            "real_name": "Tim Babb",
            "display_name": "tbabb",
            "team": "T5TCAFTA9",
            "name": "tbabb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WiHLQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I might group things like this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "physical systems which compute:\n  - actual computers (almost always implementations of a Von Neumann architecture)\n  - certain biological systems\n    - brains\n    - intracellular chemical networks (linked video)\n    - DNA\n  - Babbage's Analytical Engine\n\nabstractions of physical machines:\n  - Von Neumann architecture\n  - hardware description languages\n\nabstract \/ mathematical systems which compute:\n  - rule 110 (& other CA rules, like Conway's)\n  - recurrent neural networks\n  - any programming language\n\nabstractions of computation:\n  - Turing machine\n  - lambda calculus\n  - universal function"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1586480105.213600",
        "client_msg_id": "e110d467-5ecc-4402-bb62-610c46a89ca0",
        "text": "\"I'm well aware how entitled people can be in OSS\".. followed by a gigantic wall of text that doesn't manage to disguise just how entitled he is..",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KeQMC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"I'm well aware how entitled people can be in OSS\".. followed by a gigantic wall of text that doesn't manage to disguise just how entitled he is.."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "-1",
                "users": [
                    "UCUSW7WVD",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UHDQ62M4P",
        "type": "message",
        "ts": "1586480477.213800",
        "client_msg_id": "cf4ce258-d4b2-4f78-bead-45ddee9fc7db",
        "text": "the reason why something like Elm is good is exactly because it consistently follows the vision of one or few people.. going along with everything the community asks for would be the death of it.. it's not a \"bazaar\" style project",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "465336060ae8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-03-27\/582042668721_465336060ae83dc74288_72.jpg",
            "first_name": "Wouter",
            "real_name": "Wouter van Oortmerssen",
            "display_name": "Wouter",
            "team": "T5TCAFTA9",
            "name": "aardappel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "24HCv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the reason why something like Elm is good is exactly because it consistently follows the vision of one or few people.. going along with everything the community asks for would be the death of it.. it's not a \"bazaar\" style project"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1586489578.214200",
        "client_msg_id": "df4d41e7-02c8-4a0a-8488-522ac384665d",
        "text": "This is a rabbit hole that I have gone to something like 1% (0.01%?) depth into. I popped up way before getting a blueprint of the lay of the land. So, taking a disclaimer here that the structure of ideas on this might be incoherent as I don't have enough clarity as I didn't go deep enough into the thick of these things and then zoom out to get the birds view picture. Most of the stuff that I list here are the ones that I have either bookmarked or found to be interesting during my spelunking. But I emphasis that I haven't personally chased down to comprehend their proper form, function and\/or how they relate with each other.\n\nFirst up there seems to be a wikipedia article here: <https:\/\/en.wikipedia.org\/wiki\/Model_of_computation> which has some interesting models and a related section with further ones.\n\nBut using the structure you have provided as a baseline, one thing missing there is rewriting ideas used by Post \/ Semi-Thue systems (which I think comes under the abstract rewriting systems category in Wiki's classification).\n\nHere are some links:\n1\/ <https:\/\/en.wikipedia.org\/wiki\/Post_canonical_system>\n2\/ <https:\/\/en.wikipedia.org\/wiki\/Semi-Thue_system>\n3\/ This looks like a good paper to read about this: <https:\/\/core.ac.uk\/download\/pdf\/82345385.pdf>\n\nNext up is the idea of formalizing what computation is. Most of my understanding comes from this well written blogpost by Ron Pressler: <https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation>\nIf you are academically inclined and willing to dig down, there is some deeply funny stuff happening with Chomsky hierarchy of formal grammars, automata, data structures (chain, tree, lattice, graphs), algorithms and their complexity classes. There are some non-trivial highly regular deep structure there.\n\nThere are these books if you want to chase this rabbit holes:\n1\/ Computation: Finite and Infinite Models — <https:\/\/www.goodreads.com\/book\/show\/326791.Computation>\n2\/ Understanding Computation: <https:\/\/computationbook.com\/>\n3\/ Nature of Computation: <http:\/\/nature-of-computation.org\/>\n4\/ Computability and Complexity: <http:\/\/hjemmesider.diku.dk\/~neil\/comp2book2007\/book-whole.pdf>\n5\/ Models of Computation: <https:\/\/cs.brown.edu\/people\/jsavage\/book\/pdfs\/ModelsOfComputation.pdf>\n6\/ Models of Computation and Formal Languages: <https:\/\/www.amazon.com\/Models-Computation-Formal-Languages-R-Gregory\/dp\/019510983X\/>\n\nOne thing (I could be wrong here) about the above books I think is that they operate under the mainstream consensus of agreeing that Church-Turing Thesis formalizes what computation is. Though Alan Turing and Church's hypothesis is said to have given a bounded form to the mechanism of computation, there are ideas like that of Robert Rosen proposing that Church Turing Thesis is wrong and can't possibly stand as a model for all computation physically realizable. There is something called epistemic cut and other ideas which I haven't been able to unbundle yet.\n\nHere are some relevant reading materials if these rabbit holes intrigue you:\nRobert Rosen's paper: <https:\/\/link.springer.com\/content\/pdf\/10.1007\/BF02477996.pdf>\nIs Church-Turing thesis true? <https:\/\/link.springer.com\/article\/10.1007\/BF00976283>\nSurvey on these ideas: <https:\/\/users.dcc.uchile.cl\/~cgutierr\/papers\/computabilityLife.pdf>\nEpistemic cut: <https:\/\/www.edge.org\/response-detail\/27049>\n\nSignificant idea about Pattee’s work seems to be the interplay of duals like adjoints in Category Theory (I am punching above my weight class here):\n&gt; _\"There are two realities to this thing. Just like light is a wave and a particle at the same time. Information and construction, structure and function, are irreducible properties of the same physical object that exist in different layers with different protocols.\"_",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQlo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a rabbit hole that I have gone to something like 1% (0.01%?) depth into. I popped up way before getting a blueprint of the lay of the land. So, taking a disclaimer here that the structure of ideas on this might be incoherent as I don't have enough clarity as I didn't go deep enough into the thick of these things and then zoom out to get the birds view picture. Most of the stuff that I list here are the ones that I have either bookmarked or found to be interesting during my spelunking. But I emphasis that I haven't personally chased down to comprehend their proper form, function and\/or how they relate with each other.\n\nFirst up there seems to be a wikipedia article here: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Model_of_computation"
                            },
                            {
                                "type": "text",
                                "text": " which has some interesting models and a related section with further ones.\n\nBut using the structure you have provided as a baseline, one thing missing there is rewriting ideas used by Post \/ Semi-Thue systems (which I think comes under the abstract rewriting systems category in Wiki's classification).\n\nHere are some links:\n1\/ "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Post_canonical_system"
                            },
                            {
                                "type": "text",
                                "text": "\n2\/ "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Semi-Thue_system"
                            },
                            {
                                "type": "text",
                                "text": "\n3\/ This looks like a good paper to read about this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/core.ac.uk\/download\/pdf\/82345385.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNext up is the idea of formalizing what computation is. Most of my understanding comes from this well written blogpost by Ron Pressler: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/pron.github.io\/posts\/what-we-talk-about-when-we-talk-about-computation"
                            },
                            {
                                "type": "text",
                                "text": "\nIf you are academically inclined and willing to dig down, there is some deeply funny stuff happening with Chomsky hierarchy of formal grammars, automata, data structures (chain, tree, lattice, graphs), algorithms and their complexity classes. There are some non-trivial highly regular deep structure there.\n\nThere are these books if you want to chase this rabbit holes:\n1\/ Computation: Finite and Infinite Models — "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.goodreads.com\/book\/show\/326791.Computation"
                            },
                            {
                                "type": "text",
                                "text": "\n2\/ Understanding Computation: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/computationbook.com\/"
                            },
                            {
                                "type": "text",
                                "text": "\n3\/ Nature of Computation: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/nature-of-computation.org\/"
                            },
                            {
                                "type": "text",
                                "text": "\n4\/ Computability and Complexity: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/hjemmesider.diku.dk\/~neil\/comp2book2007\/book-whole.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n5\/ Models of Computation: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cs.brown.edu\/people\/jsavage\/book\/pdfs\/ModelsOfComputation.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n6\/ Models of Computation and Formal Languages: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.amazon.com\/Models-Computation-Formal-Languages-R-Gregory\/dp\/019510983X\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne thing (I could be wrong here) about the above books I think is that they operate under the mainstream consensus of agreeing that Church-Turing Thesis formalizes what computation is. Though Alan Turing and Church's hypothesis is said to have given a bounded form to the mechanism of computation, there are ideas like that of Robert Rosen proposing that Church Turing Thesis is wrong and can't possibly stand as a model for all computation physically realizable. There is something called epistemic cut and other ideas which I haven't been able to unbundle yet.\n\nHere are some relevant reading materials if these rabbit holes intrigue you:\nRobert Rosen's paper: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/content\/pdf\/10.1007\/BF02477996.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\nIs Church-Turing thesis true? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/link.springer.com\/article\/10.1007\/BF00976283"
                            },
                            {
                                "type": "text",
                                "text": "\nSurvey on these ideas: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/users.dcc.uchile.cl\/~cgutierr\/papers\/computabilityLife.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\nEpistemic cut: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.edge.org\/response-detail\/27049"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSignificant idea about Pattee’s work seems to be the interplay of duals like adjoints in Category Theory (I am punching above my weight class here):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"There are two realities to this thing. Just like light is a wave and a particle at the same time. Information and construction, structure and function, are irreducible properties of the same physical object that exist in different layers with different protocols.\"",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U8A5MS6R1",
                    "ULM3U6275"
                ],
                "count": 3
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1586489578.214400",
        "client_msg_id": "df4d41e7-02c8-4a0a-8488-522ac384665d",
        "text": "\nComplexity science books like that of Varela, Christopher Alexander, some of the stuff in cybernetics and biosemiotics also I think dovetail with Rosen's ideas in some way I am not able to articulate due to my epistemic cut :P If you dig in these places there are ways to move out from the current conceptual mould of mechanistic computation and get introduced to ideas like circularity, effective causation and indeterminism, (M,R) models, wholeness etc. and push the envelope of human understanding on these ideas: \n\n1\/ Paper reviewing these concepts:\n<https:\/\/users.dcc.uchile.cl\/~cgutierr\/papers\/computabilityLife.pdf>\n2\/ Christopher Alexander oeuvre: <http:\/\/www.natureoforder.com\/overview.htm>\n3\/ Embodied Mind: <https:\/\/mitpress.mit.edu\/books\/embodied-mind>\nThis I think could be supplied with ideas like Umwelt (<https:\/\/en.wikipedia.org\/wiki\/Umwelt>) \/ Biosemiotics (<https:\/\/en.wikipedia.org\/wiki\/Biosemiotics>) etc.\n4\/ Physics of Symbols: <https:\/\/homes.luddy.indiana.edu\/rocha\/publications\/pattee\/pattee.html>\n\nGuess that gave an idea of the soup in my head right now. I'll try to follow up when I have a better model of this in the future. Would also love to see what you are about to do with your classification up next. Hope that helped!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQlo-2AbW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nComplexity science books like that of Varela, Christopher Alexander, some of the stuff in cybernetics and biosemiotics also I think dovetail with Rosen's ideas in some way I am not able to articulate due to my epistemic cut :P If you dig in these places there are ways to move out from the current conceptual mould of mechanistic computation and get introduced to ideas like circularity, effective causation and indeterminism, (M,R) models, wholeness etc. and push the envelope of human understanding on these ideas: \n\n1\/ Paper reviewing these concepts:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/users.dcc.uchile.cl\/~cgutierr\/papers\/computabilityLife.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n2\/ Christopher Alexander oeuvre: "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.natureoforder.com\/overview.htm"
                            },
                            {
                                "type": "text",
                                "text": "\n3\/ Embodied Mind: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/mitpress.mit.edu\/books\/embodied-mind"
                            },
                            {
                                "type": "text",
                                "text": "\nThis I think could be supplied with ideas like Umwelt ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Umwelt"
                            },
                            {
                                "type": "text",
                                "text": ") \/ Biosemiotics ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/en.wikipedia.org\/wiki\/Biosemiotics"
                            },
                            {
                                "type": "text",
                                "text": ") etc.\n4\/ Physics of Symbols: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/homes.luddy.indiana.edu\/rocha\/publications\/pattee\/pattee.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nGuess that gave an idea of the soup in my head right now. I'll try to follow up when I have a better model of this in the future. Would also love to see what you are about to do with your classification up next. Hope that helped!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEQ6M68H0",
        "type": "message",
        "ts": "1586494070.214800",
        "client_msg_id": "b4be5fd0-2e11-482b-aa34-7347fd04f13e",
        "text": "One thing that made Modula-2's simplicity survivable was that there was a way to call external functions which might be in assembler or C. When you encounter a very high cost area of computation, like bitmap masking and rotation, you occasionally need to dip into lower level languages, and having an \"escape hatch\" can be very helpful. However in modern high-runtime environment languages like Elm or Beads this isn't really feasible for the most part. The more dramatic the improvements the language offers, the less it will connect with the existing systems. This is an intrinsic tradeoff i believe. In",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "326328f75c3f",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-05\/542651515888_326328f75c3f2a08544c_72.jpg",
            "first_name": "Edward",
            "real_name": "Edward de Jong",
            "display_name": "Edward de Jong \/ Beads Project",
            "team": "T5TCAFTA9",
            "name": "magicmouse94937",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3\/jz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing that made Modula-2's simplicity survivable was that there was a way to call external functions which might be in assembler or C. When you encounter a very high cost area of computation, like bitmap masking and rotation, you occasionally need to dip into lower level languages, and having an \"escape hatch\" can be very helpful. However in modern high-runtime environment languages like Elm or Beads this isn't really feasible for the most part. The more dramatic the improvements the language offers, the less it will connect with the existing systems. This is an intrinsic tradeoff i believe. In"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]