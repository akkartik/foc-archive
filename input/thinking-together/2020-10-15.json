[
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1602748517.215700",
        "client_msg_id": "603bc08d-c90e-4a8d-b756-e74b237382ce",
        "text": "Negative points for the rather invasive on-boarding of superhuman.  They want loads of personal details before you get anywhere.  I was put off by the 'fill in a load of details and a questionnaire, and then later we'll let you in for 30$ approach....'",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gov",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Negative points for the rather invasive on-boarding of superhuman.  They want loads of personal details before you get anywhere.  I was put off by the 'fill in a load of details and a questionnaire, and then later we'll let you in for 30$ approach....'"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1602753581.215900",
        "client_msg_id": "714daa29-b7c6-4aa4-801c-dc3fdf51785c",
        "text": "<@UMWF81HTP> Keyboard shortcuts are like learning a musical instrument: there are pluses and minuses.  Is this particular instrument worth mastering?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "icz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " Keyboard shortcuts are like learning a musical instrument: there are pluses and minuses.  Is this particular instrument worth mastering?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U013ZLJARC7",
        "type": "message",
        "ts": "1602753749.216400",
        "client_msg_id": "eb75dafe-e993-48f6-9822-b164ef5471f6",
        "text": "<@UMWF81HTP> a nice example of that sort of \"jump to it\" keyboard interface (that I use all the time) is `ace-jump-mode`:\n<https:\/\/www.youtube.com\/watch?v=UZkpmegySnc>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8ea58fc41bd6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-13\/6057269405632_8ea58fc41bd6baa7dda6_72.png",
            "first_name": "",
            "real_name": "Jack Rusher",
            "display_name": "Jack Rusher",
            "team": "T5TCAFTA9",
            "name": "jack529",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https:\/\/www.youtube.com\/",
                "title": "Emacs Rocks! Episode 10: Jumping around",
                "title_link": "https:\/\/www.youtube.com\/watch?v=UZkpmegySnc",
                "author_name": "emacsrocks",
                "author_link": "https:\/\/www.youtube.com\/user\/emacsrocks",
                "thumb_url": "https:\/\/i.ytimg.com\/vi\/UZkpmegySnc\/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Emacs Rocks! Episode 10: Jumping around",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https:\/\/www.youtube.com\/embed\/UZkpmegySnc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https:\/\/www.youtube.com\/watch?v=UZkpmegySnc",
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/youtube.png",
                "id": 1,
                "original_url": "https:\/\/www.youtube.com\/watch?v=UZkpmegySnc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZOts",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " a nice example of that sort of \"jump to it\" keyboard interface (that I use all the time) is "
                            },
                            {
                                "type": "text",
                                "text": "ace-jump-mode",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.youtube.com\/watch?v=UZkpmegySnc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UUQ2EQW21",
        "type": "message",
        "ts": "1602754573.216700",
        "client_msg_id": "3edda24f-885c-47ea-99e5-fa8cb08998c5",
        "text": "FWIW, I use <https:\/\/github.com\/easymotion\/vim-easymotion> for the same thing in Vim.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g2266cacc8f3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-72.png",
            "first_name": "Chris",
            "real_name": "Chris Maughan",
            "display_name": "Chris Maughan",
            "team": "T5TCAFTA9",
            "name": "mornymorny",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v6I\/g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW, I use "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/easymotion\/vim-easymotion"
                            },
                            {
                                "type": "text",
                                "text": " for the same thing in Vim."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1602780943.217000",
        "client_msg_id": "f0172b36-2658-4412-86bf-61c7db837897",
        "text": "i was reading about Kakoune the other day (<https:\/\/cosine.blue\/2019-09-06-kakoune.html>) and they made a really interesting insight into the vim motion commands that i really like\n&gt;  Whereas vi’s keystroke language follows *verb-object* order, Kakoune inverts that by following *object-verb* order. In real terms, that means you make a selection (object) before deciding what to do (verb) with it. The object might be a character, word, sentence, paragraph, parenthetical, regular expression, you name it; the verb might be *delete*, *yank* (copy), *change*, *indent*, or even transformative operations like *lint*, *format*, *uppercase*, etc. In Kakoune, it is with this reversed grammar, this postfix notation, that you interactively sweep up a group or groups of characters before acting on them. That way if your object isn’t quite right, you can immediately correct it without having to undo and redo your verb.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AUtS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i was reading about Kakoune the other day ("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/cosine.blue\/2019-09-06-kakoune.html"
                            },
                            {
                                "type": "text",
                                "text": ") and they made a really interesting insight into the vim motion commands that i really like\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Whereas vi’s keystroke language follows "
                            },
                            {
                                "type": "text",
                                "text": "verb-object",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " order, Kakoune inverts that by following "
                            },
                            {
                                "type": "text",
                                "text": "object-verb",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " order. In real terms, that means you make a selection (object) before deciding what to do (verb) with it. The object might be a character, word, sentence, paragraph, parenthetical, regular expression, you name it; the verb might be "
                            },
                            {
                                "type": "text",
                                "text": "delete",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "yank",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (copy), "
                            },
                            {
                                "type": "text",
                                "text": "change",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "indent",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or even transformative operations like "
                            },
                            {
                                "type": "text",
                                "text": "lint",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "format",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "uppercase",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", etc. In Kakoune, it is with this reversed grammar, this postfix notation, that you interactively sweep up a group or groups of characters before acting on them. That way if your object isn’t quite right, you can immediately correct it without having to undo and redo your verb."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U016LEA3J1H",
        "type": "message",
        "ts": "1602780985.217200",
        "client_msg_id": "134f8092-4a42-4635-bc85-da3906f45771",
        "text": "it makes a lot of sense that the selecting and operating-on processes are two different ones where the second is a lot more likely to fail than the first, so better to latch progress and have the user's selection remain so they can try a failed operation again",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "7082261f477c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-07-06\/1225163496802_7082261f477cd8a85548_72.jpg",
            "first_name": "Harry",
            "real_name": "Harry Brundage",
            "display_name": "Harry Brundage",
            "team": "T5TCAFTA9",
            "name": "harry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Km3vq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it makes a lot of sense that the selecting and operating-on processes are two different ones where the second is a lot more likely to fail than the first, so better to latch progress and have the user's selection remain so they can try a failed operation again"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UBM0S2AN4",
        "type": "message",
        "ts": "1602826560.240200",
        "edited": {
            "user": "UBM0S2AN4",
            "ts": "1602826694.000000"
        },
        "client_msg_id": "4F6C7E37-78A3-466C-A733-91D9AF19A1E7",
        "text": "Totally agree with the above point about difficulty navigating layout you don’t control with the keyboard. In general navigation seems to be the trickiest bit of making an application keyboard centric. On the keyboard the basic movement is really only (up, down, left, right) and if the layout makes it unclear where those directions will take you it’s hard to make it feel really good\/be usable. Fixed layout ui’s can get away with some navigation that doesn’t make as much sense since the user can gain familiarity.\n\nFluid layouts like a flowchart editor inherently dont have natural up\/down\/left\/right navigation that will be quick and intuitive. I think the interaction model of jumping around to the nodes and edges of the flowchart is just not well suited to the keyboard as an input device. \n\nFor flowcharts + keyboard maybe the right approach is going with the ‘grain’ of the keyboard and build a really good graphviz (or graphviz like language) editor with augmented text as the primary interaction mode. And then have mouse manipulation as a secondary interaction for smaller layout tweaks. That way you could assemble graphs as fast as you can type. Another route would be to build on a different input device better suited to the task of flowchart construction like ipad",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "51fa9d9a15c7",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-10-04\/783621221861_51fa9d9a15c7c36a4a28_72.png",
            "first_name": "",
            "real_name": "Brian Zindler",
            "display_name": "zindlurb",
            "team": "T5TCAFTA9",
            "name": "zindlerb",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lizg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally agree with the above point about difficulty navigating layout you don’t control with the keyboard. In general navigation seems to be the trickiest bit of making an application keyboard centric. On the keyboard the basic movement is really only (up, down, left, right) and if the layout makes it unclear where those directions will take you it’s hard to make it feel really good\/be usable. Fixed layout ui’s can get away with some navigation that doesn’t make as much sense since the user can gain familiarity.\n\nFluid layouts like a flowchart editor inherently dont have natural up\/down\/left\/right navigation that will be quick and intuitive. I think the interaction model of jumping around to the nodes and edges of the flowchart is just not well suited to the keyboard as an input device. \n\nFor flowcharts + keyboard maybe the right approach is going with the ‘grain’ of the keyboard and build a really good graphviz (or graphviz like language) editor with augmented text as the primary interaction mode. And then have mouse manipulation as a secondary interaction for smaller layout tweaks. That way you could assemble graphs as fast as you can type. Another route would be to build on a different input device better suited to the task of flowchart construction like ipad"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602828387.247700",
        "client_msg_id": "a4a921ee-41c8-4fb3-8c2a-7cf7657bda36",
        "text": "I'm in the middle of writing an assembler for uCISC in uCISC assembly (bootstrapping a language is fun). I'm happy with the progress I'm making, but a few things are standing out. 1) structuring the code is challenging since I don't yet have the higher level language paradigms (don't even have function syntax sugar at the level I'm at right now). 2) stack counting is tedious and I constantly get it wrong. I'm wondering if there are any resources, techniques or ideas on how to structure assembly code effectively. I feel like this may be a bit of a lost art.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1602873028.260400",
        "reply_users": [
            "U015902ESJC",
            "UCUSW7WVD",
            "UUQ2EQW21",
            "UJN1TAYEQ"
        ],
        "replies": [
            {
                "user": "U015902ESJC",
                "ts": "1602828417.247800"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602832945.248100"
            },
            {
                "user": "UUQ2EQW21",
                "ts": "1602833461.248300"
            },
            {
                "user": "UJN1TAYEQ",
                "ts": "1602866455.249200"
            },
            {
                "user": "UCUSW7WVD",
                "ts": "1602867094.249400"
            },
            {
                "user": "U015902ESJC",
                "ts": "1602872638.256900"
            },
            {
                "user": "U015902ESJC",
                "ts": "1602873028.260400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o6aJp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm in the middle of writing an assembler for uCISC in uCISC assembly (bootstrapping a language is fun). I'm happy with the progress I'm making, but a few things are standing out. 1) structuring the code is challenging since I don't yet have the higher level language paradigms (don't even have function syntax sugar at the level I'm at right now). 2) stack counting is tedious and I constantly get it wrong. I'm wondering if there are any resources, techniques or ideas on how to structure assembly code effectively. I feel like this may be a bit of a lost art."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U015902ESJC",
        "type": "message",
        "ts": "1602828417.247800",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1602828488.000000"
        },
        "client_msg_id": "533c0f6c-9d23-41d5-b5b5-70e2f5e78074",
        "text": "Taking it a step further, I also realize that large computer systems need large complex structures to manage them. I'm wondering if, at some level, the complex structures in our higher level languages are only needed because of the large systems they were designed to enable.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "5446491963e3",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-05-30\/1167794177073_5446491963e3446625b7_72.png",
            "first_name": "Robert",
            "real_name": "Robert Butler",
            "display_name": "Robert Butler",
            "team": "T5TCAFTA9",
            "name": "robert",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1602828387.247700",
        "parent_user_id": "U015902ESJC",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Dea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Taking it a step further, I also realize that large computer systems need large complex structures to manage them. I'm wondering if, at some level, the complex structures in our higher level languages are only needed because of the large systems they were designed to enable."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]