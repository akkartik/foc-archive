[
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1599472452.122500",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1599472479.000000"
        },
        "client_msg_id": "be0d48b9-8e7b-4d9c-82b5-dc56e9d7912e",
        "text": "I think there are increasing levels of end-user programmability:\n\n• adjusting an app's configurations and settings, customising in your settings\n• simple rules: email filters, IFTTT\n• spreadsheet formulae; box-n-wire dataflow through function boxes\n• copying someone else's code and changing the obvious parameters, etc\n• doing lots of the above and realising it's become a massive program, then panic!\nSo I think we're talking about the latter here? Where an EUP system is very easy to get into, but then as a result it's very easy to create a huge blob of dense, opaque programming?\n\nI think it's important that the EUP system offers a model that is structured from the start, and where the normie programmer can draw on the work of others in a structured way, not just copy-pasting.\n\nThey should be able to build a complex system incrementally and safely because the structure enables them to see how both their own constructions come alive and also how the work of others operates, and to see the effects of their changes immediately.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5cnl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there are increasing levels of end-user programmability:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "adjusting an app's configurations and settings, customising in your settings"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "simple rules: email filters, IFTTT"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "spreadsheet formulae; box-n-wire dataflow through function boxes"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "copying someone else's code and changing the obvious parameters, etc"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "doing lots of the above and realising it's become a massive program, then panic!"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo I think we're talking about the latter here? Where an EUP system is very easy to get into, but then as a result it's very easy to create a huge blob of dense, opaque programming?\n\nI think it's important that the EUP system offers a model that is structured from the start, and where the normie programmer can draw on the work of others in a structured way, not just copy-pasting.\n\nThey should be able to build a complex system incrementally and safely because the structure enables them to see how both their own constructions come alive and also how the work of others operates, and to see the effects of their changes immediately."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UJ6LDMMN0",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1599472528.122800",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1599472535.000000"
        },
        "client_msg_id": "93e21050-de4c-41ac-b1d6-c6bba7bd04a0",
        "text": "(needless to say, I'm designing Onex this way, in the hope of addressing this issue!)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bwcb1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(needless to say, I'm designing Onex this way, in the hope of addressing this issue!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1599473993.124800",
        "client_msg_id": "558106b0-93b8-4de6-9ef3-1f789fa9b403",
        "text": "Of course, all this tech is irrelevant if you can't nurture a vibrant open source community that is willing to create examples and to help normies!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IKZg7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, all this tech is irrelevant if you can't nurture a vibrant open source community that is willing to create examples and to help normies!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1599485397.125400",
        "client_msg_id": "e00b40c9-a6fd-4f7d-a7b2-31591afe93b8",
        "text": "Thanks <@UE6EFEPTQ> for your comment! You are right: an important thing I want to address is how to design a system that can manage the \"panic\" step. And you point that one way to do it, is to try to propose tools that limit the risk of occurrence of the panic, by offering a safe environment where complexity doesn't \"hit\" the programmer to late.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oGp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " for your comment! You are right: an important thing I want to address is how to design a system that can manage the \"panic\" step. And you point that one way to do it, is to try to propose tools that limit the risk of occurrence of the panic, by offering a safe environment where complexity doesn't \"hit\" the programmer to late."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1599485830.125600",
        "client_msg_id": "5000053f-4b04-40bd-aef0-8b815a3aaad7",
        "text": "But what I also want to address, is even if the programmer doesn't panic, there will be some points where obviously he misses some knowledge\/experience\/etc. that prevent him to go forward. And to keep going, some external help is needed.\n\nSo I would like to take this into account in the design of programming environments. This situations will always happen and how to improve the experience for both the one(s) that need\/get help and the one(s) that give it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lwQG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But what I also want to address, is even if the programmer doesn't panic, there will be some points where obviously he misses some knowledge\/experience\/etc. that prevent him to go forward. And to keep going, some external help is needed.\n\nSo I would like to take this into account in the design of programming environments. This situations will always happen and how to improve the experience for both the one(s) that need\/get help and the one(s) that give it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UJ6LDMMN0",
        "type": "message",
        "ts": "1599486029.125900",
        "client_msg_id": "8f495bcd-8dd9-43a0-bd12-b876b627c9a5",
        "text": "<@UA14TGLTC>:\n&gt; You can choose to assist them in getting help, or you can hope that users will self-organize a forum for helping each other.\nHere, I have already \"choose to assist them in getting help\", and moreover, the environment must be \"between-users-help aware\".",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "0c210ee2df74",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-11-13\/2722434855730_0c210ee2df74838f8683_72.png",
            "first_name": "nicolas",
            "real_name": "nicolas decoster",
            "display_name": "ogadaki",
            "team": "T5TCAFTA9",
            "name": "nicolas.decoster",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jANd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can choose to assist them in getting help, or you can hope that users will self-organize a forum for helping each other."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here, I have already \"choose to assist them in getting help\", and moreover, the environment must be \"between-users-help aware\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UE6EFEPTQ",
        "type": "message",
        "ts": "1599486049.126100",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1599486060.000000"
        },
        "client_msg_id": "5ba4420c-c2b6-4d49-871d-381407fbfc25",
        "text": "Well that is perhaps leading to an idea of a distributed, semantic (AST not text) IDE?",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "8073c43d5d8d",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-12-18\/508431502471_8073c43d5d8dd3d3b4b2_72.jpg",
            "first_name": "Duncan",
            "real_name": "Duncan Cragg",
            "display_name": "Duncan Cragg",
            "team": "T5TCAFTA9",
            "name": "fp",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599412033.118600",
        "parent_user_id": "UJ6LDMMN0",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HB5Ao",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well that is perhaps leading to an idea of a distributed, semantic (AST not text) IDE?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "thread_broadcast",
        "user": "U01286RNB70",
        "thread_ts": "1599070210.092100",
        "root": {
            "user": "UE0H4170F",
            "type": "message",
            "ts": "1599070210.092100",
            "client_msg_id": "d8a9c603-77ce-4210-950d-112638e9a634",
            "text": "Does anyone have tools \/ processes to recommend for rapidly iterating the design of a language? I’m looking for strategies to produce a document that captures the design, evolution, and potential variations of a language interface separate from implementation concerns. Good examples of this would also be very much appreciated!",
            "team": "T5TCAFTA9",
            "thread_ts": "1599070210.092100",
            "reply_count": 13,
            "reply_users_count": 8,
            "latest_reply": "1599511554.134100",
            "reply_users": [
                "U01A0KANUUU",
                "U016VUZGUUQ",
                "UE0H4170F",
                "UCGAK10LS",
                "U01A1C2K8MP",
                "U01286RNB70",
                "UCUSW7WVD",
                "U5STGTB3J"
            ],
            "replies": [
                {
                    "user": "U01A0KANUUU",
                    "ts": "1599072310.092200"
                },
                {
                    "user": "U016VUZGUUQ",
                    "ts": "1599097905.093800"
                },
                {
                    "user": "UE0H4170F",
                    "ts": "1599112150.094600"
                },
                {
                    "user": "UCGAK10LS",
                    "ts": "1599117516.094900"
                },
                {
                    "user": "UCGAK10LS",
                    "ts": "1599117777.095100"
                },
                {
                    "user": "U01A1C2K8MP",
                    "ts": "1599172042.103300"
                },
                {
                    "user": "U01286RNB70",
                    "ts": "1599494618.126700"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1599495354.127000"
                },
                {
                    "user": "U01286RNB70",
                    "ts": "1599495700.127400"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1599498830.127900"
                },
                {
                    "user": "U5STGTB3J",
                    "ts": "1599510512.130200"
                },
                {
                    "user": "UCUSW7WVD",
                    "ts": "1599510952.130400"
                },
                {
                    "user": "U5STGTB3J",
                    "ts": "1599511554.134100"
                }
            ],
            "is_locked": false,
            "subscribed": false,
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "VQqu",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Does anyone have tools \/ processes to recommend for rapidly iterating the design of a language? I’m looking for strategies to produce a document that captures the design, evolution, and potential variations of a language interface separate from implementation concerns. Good examples of this would also be very much appreciated!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "message",
        "ts": "1599494618.126700",
        "client_msg_id": "260d3eaa-d5d1-49dd-a079-8d1866a18c91",
        "text": "Reviving this thread :wave:\n\nOne thing I’ve found helpful is to consider: What sorts of things do you want people to be able to do with your system? What goals can they accomplish? How will their thinking be changed by using your system? Why should they turn to it, instead of something else? Don’t think about _how_ you’ll do this yet, just *focus on human needs* that need meeting.\n\nFrom there, you can start to sketch out ideas (I’d start on paper, as it’s the most free form). Remember the needs and contexts of the people you’re trying to help! Are they best met with text files (and things like git, other source code tools) or are they better met with something more graphical? (Or really far out: are they best met with an entirely new kind of computer??)\n\nAt this point, I like to move into something more like a drawing tool (I use Sketch on the Mac) that lets me mock things up and write notes, spatially. I like to imagine different kinds of UIs for solving issues, and then I can write notes along side them, etc.\n\nAs far as actually prototyping these things, that’s where I struggle to do so rapidly (as far as real working systems go). But I think there’s something very powerful (and cheap!) about mocking things up in a drawing tool (or in a text file — but beware, if you do everything in a text file, you’ll probably narrow your ability to work on programming UX things provided by your environment)",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z2yH\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reviving this thread "
                            },
                            {
                                "type": "emoji",
                                "name": "wave",
                                "unicode": "1f44b"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne thing I’ve found helpful is to consider: What sorts of things do you want people to be able to do with your system? What goals can they accomplish? How will their thinking be changed by using your system? Why should they turn to it, instead of something else? Don’t think about "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you’ll do this yet, just "
                            },
                            {
                                "type": "text",
                                "text": "focus on human needs",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that need meeting.\n\nFrom there, you can start to sketch out ideas (I’d start on paper, as it’s the most free form). Remember the needs and contexts of the people you’re trying to help! Are they best met with text files (and things like git, other source code tools) or are they better met with something more graphical? (Or really far out: are they best met with an entirely new kind of computer??)\n\nAt this point, I like to move into something more like a drawing tool (I use Sketch on the Mac) that lets me mock things up and write notes, spatially. I like to imagine different kinds of UIs for solving issues, and then I can write notes along side them, etc.\n\nAs far as actually prototyping these things, that’s where I struggle to do so rapidly (as far as real working systems go). But I think there’s something very powerful (and cheap!) about mocking things up in a drawing tool (or in a text file — but beware, if you do everything in a text file, you’ll probably narrow your ability to work on programming UX things provided by your environment)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1599495354.127000",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1599495516.000000"
        },
        "client_msg_id": "3fc3cd2f-78ca-497c-bc83-988a87d2c52f",
        "text": "<@U01286RNB70> the original thread seems to be about designing languages. I interpret that as about designing textual programming languages. Does prototyping those still have a limitation with text files? (Earlier phases certainly benefit from the ability to draw lines and boxes and so on.)\n\nIn general I'm a bit bemused by this thread. As a programmer it all feels quite waterfall-y. If you try to \"mock up\" a language before giving it a grammar you're quite likely to end up introducing ambiguities that need modifying the language to resolve. Similarly with many other aspects of the activity. If an activity eventually needs to be mapped on non-linear primitives (as computer programs do), it seems to me that it benefits from lots of feedback loops.\n\nFunny story: the original waterfall diagram [1] had feedback loops between phases, so even waterfall _practiced right_ can be quite effective. Of course, that's not what anybody means by the term anymore..\n\n[1] <http:\/\/www-scf.usc.edu\/~csci201\/lectures\/Lecture11\/royce1970.pdf>, figure 3",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "703",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01286RNB70"
                            },
                            {
                                "type": "text",
                                "text": " the original thread seems to be about designing languages. I interpret that as about designing textual programming languages. Does prototyping those still have a limitation with text files? (Earlier phases certainly benefit from the ability to draw lines and boxes and so on.)\n\nIn general I'm a bit bemused by this thread. As a programmer it all feels quite waterfall-y. If you try to \"mock up\" a language before giving it a grammar you're quite likely to end up introducing ambiguities that need modifying the language to resolve. Similarly with many other aspects of the activity. If an activity eventually needs to be mapped on non-linear primitives (as computer programs do), it seems to me that it benefits from lots of feedback loops.\n\nFunny story: the original waterfall diagram [1] had feedback loops between phases, so even waterfall "
                            },
                            {
                                "type": "text",
                                "text": "practiced right",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can be quite effective. Of course, that's not what anybody means by the term anymore..\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www-scf.usc.edu\/~csci201\/lectures\/Lecture11\/royce1970.pdf"
                            },
                            {
                                "type": "text",
                                "text": ", figure 3"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01286RNB70",
        "type": "message",
        "ts": "1599495700.127400",
        "client_msg_id": "e06133c9-2161-4d20-8c30-8900c6fb59ff",
        "text": "Yep! I still think there’s a ton of benefit to mocking this stuff up in a drawing of some kind, even if you’re doing a textual language.\n\nThere’s lots of “programming experience” I hope everyone in here aims to include for their languages, like auto-complete, debugging tools, visualizations, etc. In my view, it’s better to design these things along with the language itself (not as goodies added on later), as they’ll help you steer how you want the language to work.\n\nOf course, as you say, it’s still important to have a somewhat working implementation to know the limits of what can be reasonably expressed in your language, but I look at that more as a limitation than a guiding tool",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2c414c16d5ae",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-04-23\/1106809317360_2c414c16d5ae9b211257_72.jpg",
            "first_name": "",
            "real_name": "Jason Brennan",
            "display_name": "Jason Brennan",
            "team": "T5TCAFTA9",
            "name": "jbrennan",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "li0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep! I still think there’s a ton of benefit to mocking this stuff up in a drawing of some kind, even if you’re doing a textual language.\n\nThere’s lots of “programming experience” I hope everyone in here aims to include for their languages, like auto-complete, debugging tools, visualizations, etc. In my view, it’s better to design these things along with the language itself (not as goodies added on later), as they’ll help you steer how you want the language to work.\n\nOf course, as you say, it’s still important to have a somewhat working implementation to know the limits of what can be reasonably expressed in your language, but I look at that more as a limitation than a guiding tool"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1599498830.127900",
        "client_msg_id": "9c040edd-beb3-4fad-b8a6-ab686ed6e646",
        "text": "The tendency of grammars to become ambiguous is not a limitation of some single tool, it's more like a limitation of the universe you live in. It's a little bit like the speed of light. I suppose you could see it as a technical limitation of current technology rather than a property of the universe, but either way it seems as unfair as asking a carmaker why they haven't managed to add a fusion drive yet to their creation. If you create an ambiguous grammar, all your tools like autocomplete, visualizations, etc. have to now deal with the grammar. And the drag (amount of implementation needed) compounds over time.\n\nPerhaps this is getting off-topic. I'll just reiterate that programming isn't just something you do once you know what you want. It's a tool in the toolbox for _arriving at good designs_.\n\n\"Writing doesn't just communicate ideas. It generates them.\" -- Paul Graham (<http:\/\/www.paulgraham.com\/writing44.html>)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8HRc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The tendency of grammars to become ambiguous is not a limitation of some single tool, it's more like a limitation of the universe you live in. It's a little bit like the speed of light. I suppose you could see it as a technical limitation of current technology rather than a property of the universe, but either way it seems as unfair as asking a carmaker why they haven't managed to add a fusion drive yet to their creation. If you create an ambiguous grammar, all your tools like autocomplete, visualizations, etc. have to now deal with the grammar. And the drag (amount of implementation needed) compounds over time.\n\nPerhaps this is getting off-topic. I'll just reiterate that programming isn't just something you do once you know what you want. It's a tool in the toolbox for "
                            },
                            {
                                "type": "text",
                                "text": "arriving at good designs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n\"Writing doesn't just communicate ideas. It generates them.\" -- Paul Graham ("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/www.paulgraham.com\/writing44.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U71PMQ1V0",
        "type": "message",
        "ts": "1599502258.128100",
        "client_msg_id": "b2a5f55a-847a-4d9b-8103-ea2b0f99fb0c",
        "text": "I think differential dataflows loops might be useful here. They allow having lexically scoped areas of ordered time, rather than having to try to mash everything into a single global timestep.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "acf65c259768",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-12-09\/6320751143555_acf65c259768ce3a90a4_72.jpg",
            "first_name": "",
            "real_name": "Jamie Brandon",
            "display_name": "jamii",
            "team": "T5TCAFTA9",
            "name": "jamie",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "92Mgr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think differential dataflows loops might be useful here. They allow having lexically scoped areas of ordered time, rather than having to try to mash everything into a single global timestep."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1599503878.128300",
        "client_msg_id": "931e8622-736b-4f8d-a261-2f193a86678b",
        "text": "Yeah with DD, you’re bringing more imperative control to the declarative-ness so you can try to manually resolve some of the semantic issues that arise (via a combination of careful ordering and explicit branching)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0VaBh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah with DD, you’re bringing more imperative control to the declarative-ness so you can try to manually resolve some of the semantic issues that arise (via a combination of careful ordering and explicit branching)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1599510512.130200",
        "client_msg_id": "598444A7-1E80-4BB3-9B9E-54550C91D0D5",
        "text": "Ohhh, <@UCUSW7WVD>, have you read _A Timeless Way of Building_? If you haven’t, you’d probably enjoy it.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W1h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ohhh, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ", have you read "
                            },
                            {
                                "type": "text",
                                "text": "A Timeless Way of Building",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? If you haven’t, you’d probably enjoy it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UCUSW7WVD",
        "type": "message",
        "ts": "1599510952.130400",
        "client_msg_id": "16936746-6809-4fd9-a934-c1db87ea27f9",
        "text": "I've read bits and pieces of it as others have pointed them out. But I really ought to. Particularly since I cited it in <http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf> :confused:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "6e649a383cf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-07-14\/687915485201_6e649a383cf8f9e366e3_72.png",
            "first_name": "Kartik",
            "real_name": "Kartik Agaram",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "ak",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KIIz4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've read bits and pieces of it as others have pointed them out. But I really ought to. Particularly since I cited it in "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/akkartik.name\/akkartik-convivial-20200607.pdf"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "confused",
                                "unicode": "1f615"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U5STGTB3J",
        "type": "message",
        "ts": "1599511554.134100",
        "client_msg_id": "D2AC5277-6D3E-4C0A-A8C0-8E59C331E143",
        "text": "I never really got that Alexander had generative grammars in mind for what he calls pattern language. But that becomes quite clear in ATWoB. That elevates the concept to pretty much your description above. \n\nObviously, I can’t make you read a 500 page book, but please do and then tell me (us) what you think. :-)",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "649181907e06",
            "image_72": "https:\/\/avatars.slack-edge.com\/2017-08-20\/228447816352_649181907e06ec450c64_72.jpg",
            "first_name": "Stefan",
            "real_name": "Stefan Lesser",
            "display_name": "Stefan",
            "team": "T5TCAFTA9",
            "name": "stefanlesser",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1599070210.092100",
        "parent_user_id": "UE0H4170F",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jdup",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I never really got that Alexander had generative grammars in mind for what he calls pattern language. But that becomes quite clear in ATWoB. That elevates the concept to pretty much your description above. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Obviously, I can’t make you read a 500 page book, but please do and then tell me (us) what you think. :-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]