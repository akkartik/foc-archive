[
    {
        "user": "UHWC9PXBL",
        "type": "message",
        "ts": "1620572486.201900",
        "client_msg_id": "1416E04C-8103-4804-9B6C-E81640D50A9A",
        "text": "i had seen HPI but not promnesia somehow—it’s definitely up my alley!",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "g0d754210ed4",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/10d754210ed4e4706eba3d063cdf99f0.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-72.png",
            "first_name": "Garth",
            "real_name": "Garth Goldwater",
            "display_name": "garth",
            "team": "T5TCAFTA9",
            "name": "garth",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619589064.129200",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wnr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i had seen HPI but not promnesia somehow—it’s definitely up my alley!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "Better queries in Promnesia is something that I'd love to have\/add :) Currently it's only simple search, mainly because I didn't want to reinvent the wheel.\nIdeally there would be an existing JS component which allows to interact with an sqlite database (so it'd have autocomplete\/pagination\/etc).\nRegarding \"full text search on pages you have open\" -- TabFs <https:\/\/omar.website\/tabfs> might approximate it",
        "username": "karlicoss",
        "attachments": [
            {
                "title": "TabFS",
                "title_link": "https:\/\/omar.website\/tabfs",
                "text": "A browser extension that mounts your browser tabs as a filesystem on your computer.",
                "fallback": "TabFS",
                "image_url": "https:\/\/omar.website\/projects\/tabfs.png",
                "from_url": "https:\/\/omar.website\/tabfs",
                "image_width": 686,
                "image_height": 241,
                "image_bytes": 80639,
                "service_icon": "https:\/\/omar.website\/favicon-96x96.png",
                "service_name": "omar.website",
                "id": 1,
                "original_url": "https:\/\/omar.website\/tabfs"
            }
        ],
        "type": "message",
        "ts": "1620589436.202200",
        "edited": {
            "user": "BEYLABLRH",
            "ts": "1620589438.000000"
        },
        "bot_id": "BEYLABLRH",
        "thread_ts": "1619589064.129200",
        "parent_user_id": "UBSMEUXAA",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JQqur",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Better queries in Promnesia is something that I'd love to have\/add :) Currently it's only simple search, mainly because I didn't want to reinvent the wheel.\nIdeally there would be an existing JS component which allows to interact with an sqlite database (so it'd have autocomplete\/pagination\/etc).\nRegarding \"full text search on pages you have open\" -- TabFs "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/omar.website\/tabfs"
                            },
                            {
                                "type": "text",
                                "text": " might approximate it"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1620617117.202600",
        "client_msg_id": "e8e7288f-20e5-4c8e-9d12-d317395c9cf8",
        "text": "I was just writing a little about Forth vs Factor other day.  Let me copy here as there's a cute comparison...\n\nThere's an insightful tutorial &lt;<https:\/\/skilldrick.github.io\/easyforth\/>&gt;. Shows some dubious limitations.\n\nTake a look at this FizzBuzz implementation:\n\n\t: fizz? 3 mod 0 = dup if .\" Fizz\" then ;\n\t: buzz? 5 mod 0 = dup if .\" Buzz\" then ;\n\t: fizz-buzz? dup fizz? swap buzz? or invert ;\n\t: do-fizz-buzz 100 1 do cr i fizz-buzz? if i . then loop ;\n\tdo-fizz-buzz\n\nYou have to have a custom `do-fizz-buzz` word because do\/loop and if\/then only work within definitions. Factor might be a better Forth &lt;<https:\/\/wiki.c2.com\/?FizzBuzzTest>&gt;:\n\n\t: is3 ( n -- n ) [ 3 mod ] keep [ drop \"fizz\" ] unless ;\n\t: is5 ( n -- n ) [ 5 mod ] keep [ drop \"buzz\" ] unless ;\n\t: is15 ( n -- n ) [ 15 mod ] keep [ drop \"fizzbuzz\" ] unless ;\n\t100 iota [ is15 [ print ] [ is5 [ print ] [ is3 [ print ] [ . ] if ] if ] if ] each\n\nOh, and next to that they have a code golf Ruby version:\n\n\tputs (1..100).map{|i|r=[\"Fizz\"][i%3];r=\"#{r}Buzz\"if i%5==0;r||i}\n\nOf course my favorite FizzBuzz is the kind that uses a random number sort of like this &lt;<https:\/\/stackoverflow.com\/questions\/20957693\/fizzbuzz-in-python-using-random-how-does-it-work>&gt;:\n\n\timport random\n\tfor i in range(0, 100):\n\t  if not i % 15:\n\t    random.seed(<tel:1178741599|1178741599>)\n   \t  print [i+1, \"Fizz\", \"Buzz\", \"FizzBuzz\"][random.randint(0,3)]\n\nWould be better if you only call `random.seed` once. :wink:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1619602565.130500",
        "parent_user_id": "UBN9AFS0N",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "fizzbuzz in Python using random, how does it work?",
                "title_link": "https:\/\/stackoverflow.com\/questions\/20957693\/fizzbuzz-in-python-using-random-how-does-it-work",
                "text": "I am having a hard time figuring out how the code below works: import random for i in range(0, 100): if not i % 15: random.seed(1178741599) print [i+1, \"Fizz\", \"Buzz\", \"FizzBuzz\"][",
                "fallback": "Stack Overflow: fizzbuzz in Python using random, how does it work?",
                "thumb_url": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https:\/\/stackoverflow.com\/questions\/20957693\/fizzbuzz-in-python-using-random-how-does-it-work",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/Img\/apple-touch-icon.png?v=c78bd457575a",
                "id": 1,
                "original_url": "https:\/\/stackoverflow.com\/questions\/20957693\/fizzbuzz-in-python-using-random-how-does-it-work"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fyc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was just writing a little about Forth vs Factor other day.  Let me copy here as there's a cute comparison...\n\nThere's an insightful tutorial <"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/skilldrick.github.io\/easyforth\/"
                            },
                            {
                                "type": "text",
                                "text": ">. Shows some dubious limitations.\n\nTake a look at this FizzBuzz implementation:\n\n\t: fizz? 3 mod 0 = dup if .\" Fizz\" then ;\n\t: buzz? 5 mod 0 = dup if .\" Buzz\" then ;\n\t: fizz-buzz? dup fizz? swap buzz? or invert ;\n\t: do-fizz-buzz 100 1 do cr i fizz-buzz? if i . then loop ;\n\tdo-fizz-buzz\n\nYou have to have a custom `do-fizz-buzz` word because do\/loop and if\/then only work within definitions. Factor might be a better Forth <"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/wiki.c2.com\/?FizzBuzzTest"
                            },
                            {
                                "type": "text",
                                "text": ">:\n\n\t: is3 ( n -- n ) [ 3 mod ] keep [ drop \"fizz\" ] unless ;\n\t: is5 ( n -- n ) [ 5 mod ] keep [ drop \"buzz\" ] unless ;\n\t: is15 ( n -- n ) [ 15 mod ] keep [ drop \"fizzbuzz\" ] unless ;\n\t100 iota [ is15 [ print ] [ is5 [ print ] [ is3 [ print ] [ . ] if ] if ] if ] each\n\nOh, and next to that they have a code golf Ruby version:\n\n\tputs (1..100).map{|i|r=[\"Fizz\"][i%3];r=\"#{r}Buzz\"if i%5==0;r||i}\n\nOf course my favorite FizzBuzz is the kind that uses a random number sort of like this <"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stackoverflow.com\/questions\/20957693\/fizzbuzz-in-python-using-random-how-does-it-work"
                            },
                            {
                                "type": "text",
                                "text": ">:\n\n\timport random\n\tfor i in range(0, 100):\n\t  if not i % 15:\n\t    random.seed("
                            },
                            {
                                "type": "link",
                                "url": "tel:1178741599",
                                "text": "1178741599"
                            },
                            {
                                "type": "text",
                                "text": ")\n   \t  print [i+1, \"Fizz\", \"Buzz\", \"FizzBuzz\"][random.randint(0,3)]\n\nWould be better if you only call `random.seed` once. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]