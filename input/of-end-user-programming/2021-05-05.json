[
    {
        "user": "UJBAJNFLK",
        "type": "message",
        "ts": "1620198038.017200",
        "client_msg_id": "697a4232-2737-4046-bd25-424b399489b3",
        "text": "The REPL goes a long way, I agree. It starts to become insufficient when you are debugging code that's a few layers down from the surface. Which is exactly when stack traces start to matter. So for me, the transition from bad to good debugging support is the presence of a debugger that lets me inspect stack traces at the level of my language: access to local bindings by name, moving up and down the stack, etc.  Unfortunately, among the languages I know, that's a rare feature: Smalltalk, Common Lisp, Python, and nothing else.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "e169f54bbaf8",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-03-12\/1859691333940_e169f54bbaf8b9b36b12_72.png",
            "first_name": "Konrad",
            "real_name": "Konrad Hinsen",
            "display_name": "Konrad Hinsen",
            "team": "T5TCAFTA9",
            "name": "konrad.hinsen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617934373.001800",
        "parent_user_id": "U01R76LELBT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/oCp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The REPL goes a long way, I agree. It starts to become insufficient when you are debugging code that's a few layers down from the surface. Which is exactly when stack traces start to matter. So for me, the transition from bad to good debugging support is the presence of a debugger that lets me inspect stack traces at the level of my language: access to local bindings by name, moving up and down the stack, etc.  Unfortunately, among the languages I know, that's a rare feature: Smalltalk, Common Lisp, Python, and nothing else."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1620217103.024000",
        "client_msg_id": "C91853A0-4B7D-41B0-AC80-2D3D1DD15217",
        "text": "Ah, I see. Yes, I pretty much agree. I’ve found lots of shortcuts to use the REPL for different instances of long stacks, but sometimes it would be be great to look all the way down. I think getting a really good debugger in clojure might be possible if your editor played along and made some configurable transformation to the code that is invisible to the user - e.g. adding spyscope (or some specialized cousin), and collecting the relevant details for online display.  ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617934373.001800",
        "parent_user_id": "U01R76LELBT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6AUw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I see. Yes, I pretty much agree. I’ve found lots of shortcuts to use the REPL for different instances of long stacks, but sometimes it would be be great to look all the way down. I think getting a really good debugger in clojure might be possible if your editor played along and made some configurable transformation to the code that is invisible to the user - e.g. adding spyscope (or some specialized cousin), and collecting the relevant details for online display.  "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01DUNFS2N4",
        "type": "message",
        "ts": "1620217503.025700",
        "client_msg_id": "BA16112D-5019-4480-B70C-7BCD7BBAABEA",
        "text": "Basically, I think it’s possible to do most (if not all) of the debuggers job in an immutable language in user land. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "487dc9587476",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-11-16\/1517848162945_487dc95874762ac0e044_72.jpg",
            "first_name": "Jarrett",
            "real_name": "Jarrett Atkinson",
            "display_name": "jatkins",
            "team": "T5TCAFTA9",
            "name": "jj_atkinson",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1617934373.001800",
        "parent_user_id": "U01R76LELBT",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jnyuo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basically, I think it’s possible to do most (if not all) of the debuggers job in an immutable language in user land. "
                            }
                        ]
                    }
                ]
            }
        ]
    }
]