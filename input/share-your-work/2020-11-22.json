[
    {
        "user": "UUB7RA7PF",
        "type": "message",
        "ts": "1606057854.259200",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1606057874.000000"
        },
        "client_msg_id": "bdc5d8a9-1750-4235-a10a-6aa4d0e9d03a",
        "text": "Hey <@UDKTZSD6H>, thanks for nice words! We haven't thought about that specific problem so far, we are now more focusing on the general \"overview\" logic, gluing stuff together in the app.\nRegarding view logic, we are sticking with React, which I didn't feel much problems with so far -&gt; it composes really nicely and it is very simple. Hard part is state management, especially using server state on the client, so that is something we are focusing more on (via Queries\/Actions).\n\nRegarding having a graph of visual components, I can imagine it being complicated in some apps (although I would expect it to look more or less like a tree, in most cases), but how does that manifest as a problem when writing a project? If each, let's say React component, has clearly defined responsibilities, it does not matter where it is used, right? I mean, its usage in various places should not increase complexity.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2fdcf29b225b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2020-02-26\/971836171367_2fdcf29b225b02e66825_72.png",
            "first_name": "Martin",
            "real_name": "Martin Sosic",
            "display_name": "Martin",
            "team": "T5TCAFTA9",
            "name": "sosic.martin",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605630429.212300",
        "parent_user_id": "UUB7RA7PF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qCh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": ", thanks for nice words! We haven't thought about that specific problem so far, we are now more focusing on the general \"overview\" logic, gluing stuff together in the app.\nRegarding view logic, we are sticking with React, which I didn't feel much problems with so far -> it composes really nicely and it is very simple. Hard part is state management, especially using server state on the client, so that is something we are focusing more on (via Queries\/Actions).\n\nRegarding having a graph of visual components, I can imagine it being complicated in some apps (although I would expect it to look more or less like a tree, in most cases), but how does that manifest as a problem when writing a project? If each, let's say React component, has clearly defined responsibilities, it does not matter where it is used, right? I mean, its usage in various places should not increase complexity."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UA14TGLTC",
        "type": "message",
        "ts": "1606063190.259500",
        "client_msg_id": "d850c2a0-617e-4ddc-8cd0-5484bff7f85b",
        "text": "<@UFB8STN7K> glad to see the dynamic variable \/ exception connection explored a little.  Not to entirely derail the conversation having contemplated the Diamond Problem for some time, I feel, ultimately, explicit is better than any sort of CSS specificity.  Since we end up with `!important` in the end.  And that was one of the challenges of Eve: hard to get rules to match at the right time.  With <@UEBG0NPDK>’s new thing, I guess the answer is to be unapologetically imperative when a step-by-step recipe is what you genuinely want.\n\nCard games make a good test case for imperative\/statey constructs.  Because the primary hand\/turn\/round flow of game is interrupted by players simultaneously inspecting their cards and occasionally interrupting each other.  In fact, Nerts <https:\/\/playingcarddecks.com\/blogs\/how-to-play\/nerts-game-rules> is probably the best possible example.  Start with solitaire — good old fashioned.  Now, instead of each player having their own four foundations, the foundations are shared.  Once you put out an ace of spades, I can play a two of spades on that.  There you go Chris.  Show that demo: solitaire is converted into Nerts in five minutes.  Collect Series A and a million FoC fans at once.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gae6d55db9d1",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/3ae6d55db9d15b79bc683a8031fc2588.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "",
            "real_name": "William Taysom",
            "display_name": "wtaysom",
            "team": "T5TCAFTA9",
            "name": "wtaysom",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "attachments": [
            {
                "service_name": "PlayingCardDecks.com",
                "title": "Nerts Game Rules",
                "title_link": "https:\/\/playingcarddecks.com\/blogs\/how-to-play\/nerts-game-rules",
                "text": "(Above is the traditional set up of a Nerts game for three players) Card Game Rules Nerts, or Peanuts, is a multiple person solitaire game played with a standard 52 playing card deck for each player. Each deck must have a unique design on its back as it will be easier to calculate players’ points. In Nerts, Kings are high and Aces are low. The objective of the game is to win the most points and to play all of the cards in the Nerts pile. For more classic card games, check out our guides for Go Fish and War. If you are looking for cards to play Nerts with, check out a standard deck here or on of our newest arrivals here.   Set Up Each player is given a full deck with a unique design on its back. Players must shuffle the deck first before they form the Tableau and Nerts pile. To form their Tableau, players place four cards up right in a row. To form the Nerts pile, players deal thirteen cards face down. The remaining cards form the Stock pile.   How to Play Foundations Like regular Solitaire, players can lose cards by building up the Foundations. In Nerts, the Foundations are community piles. A Foundation pile begins when someone places an Ace in the middle of the gameplay area. Foundations can be built upon by cards of the same suit and in increasing order. When a Foundation reaches the King, the pile is turned over and placed to the side. Tableau Players may also play cards onto their own Tableau. Cards can be placed on the Tableau if the cards are in decreasing order and of alternating color. The top card of a Tableau pile may be used for a Foundation pile. Stock Pile If a player cannot move any of their cards in play, they may deal themselves cards from their Stock pile. Stock pile cards are dealt in groups of three with players only able to use the top card. When the Stock pile runs out, players may form a new Stock pile out of the dealt cards. Nerts Pile The top card of the Nerts pile is flipped up and may be played on either the Tableau or the Foundation piles. When someone plays all of their Nerts cards they shout “Nerts!”, gameplay ends, and scores are tallied.   Keeping Score After someone plays all of the cards in their Nerts pile, the Foundations are collected and counted. A player receives 1 point for every card they played on the Foundations and loses 2 points for every card still in their Nerts pile. The first player to 150 points wins. For more information about Nerts, check out pagat's article here and The National Nerts Association's website here. Variations Spite and Malice Spite and Malice is a two player variation of Nerts. It is played with two decks. Nerts piles are made of 20 cards. Each player gets four tableau piles. The players share one stock pile. After the Nerts piles are made, the top cards are flipped up. The player with the highest card goes first. Players then take turns trying to build up the communal foundation piles.  For more information on Spite and Malice, check out Pagat's article here.   Looking for more card games to play?  Check out this article: 40+ Great Card Games For All Occasions About the author: John Taylor is a content writer and freelancer through the company <http:\/\/Upwork.com|Upwork.com>. You may view his freelancing profile here. He has a B. A. in English, with a specialty in technical writing, from Texas A&amp;M University and a M. A. in English from the University of Glasgow. You may view his previous articles about card games here and his LinkedIn profile here. Last update date: 08\/30\/20                              ",
                "fallback": "PlayingCardDecks.com: Nerts Game Rules",
                "from_url": "https:\/\/playingcarddecks.com\/blogs\/how-to-play\/nerts-game-rules",
                "thumb_url": "http:\/\/cdn.shopify.com\/s\/files\/1\/1788\/4029\/articles\/ner_1024x1024.jpg?v=1569755336",
                "thumb_width": 180,
                "thumb_height": 180,
                "service_icon": "http:\/\/cdn.shopify.com\/s\/files\/1\/1788\/4029\/t\/22\/assets\/favicon.png?v=11948264278751531157",
                "id": 1,
                "original_url": "https:\/\/playingcarddecks.com\/blogs\/how-to-play\/nerts-game-rules"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7opRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " glad to see the dynamic variable \/ exception connection explored a little.  Not to entirely derail the conversation having contemplated the Diamond Problem for some time, I feel, ultimately, explicit is better than any sort of CSS specificity.  Since we end up with "
                            },
                            {
                                "type": "text",
                                "text": "!important",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the end.  And that was one of the challenges of Eve: hard to get rules to match at the right time.  With "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "’s new thing, I guess the answer is to be unapologetically imperative when a step-by-step recipe is what you genuinely want.\n\nCard games make a good test case for imperative\/statey constructs.  Because the primary hand\/turn\/round flow of game is interrupted by players simultaneously inspecting their cards and occasionally interrupting each other.  In fact, Nerts "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/playingcarddecks.com\/blogs\/how-to-play\/nerts-game-rules"
                            },
                            {
                                "type": "text",
                                "text": " is probably the best possible example.  Start with solitaire — good old fashioned.  Now, instead of each player having their own four foundations, the foundations are shared.  Once you put out an ace of spades, I can play a two of spades on that.  There you go Chris.  Show that demo: solitaire is converted into Nerts in five minutes.  Collect Series A and a million FoC fans at once."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606064424.264200",
        "client_msg_id": "79D45B8F-99F3-4373-8948-D8F95E4EB8D2",
        "text": "Ooh that’d be a fun one, particularly showing it as a conversion from one to the other. I’m sure we could do something like that once the editor’s a bit further along. :slightly_smiling_face: One of <@UDZRT1962>’s favorite moments from Eve was when someone converted our tic-tac-toe into the super version in just a few lines of code. ",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kHL=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ooh that’d be a fun one, particularly showing it as a conversion from one to the other. I’m sure we could do something like that once the editor’s a bit further along. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " One of "
                            },
                            {
                                "type": "user",
                                "user_id": "UDZRT1962"
                            },
                            {
                                "type": "text",
                                "text": "’s favorite moments from Eve was when someone converted our tic-tac-toe into the super version in just a few lines of code. "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1606065090.264400",
        "client_msg_id": "37cb0fc2-8c2b-4cff-857f-863d70e04ccf",
        "text": "I would like to see the Celsius-Fahrenheit converter. I can't find it now but someone posted a month or so ago, a set of about 6 standard applications that can be used to compare the clarity\/expressiveness of different programming languages",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xJxS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to see the Celsius-Fahrenheit converter. I can't find it now but someone posted a month or so ago, a set of about 6 standard applications that can be used to compare the clarity\/expressiveness of different programming languages"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UEBG0NPDK",
        "type": "message",
        "ts": "1606065636.265100",
        "client_msg_id": "09AADB48-2F4F-4C56-BADF-550990E4F612",
        "text": "I think you’re talking about 7guis? <https:\/\/eugenkiss.github.io\/7guis\/tasks|https:\/\/eugenkiss.github.io\/7guis\/tasks>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "9e85c7bdd45b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2018-11-25\/487455880658_9e85c7bdd45b1d2d4721_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Granger",
            "display_name": "ibdknox",
            "team": "T5TCAFTA9",
            "name": "ibdknox",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YeK9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you’re talking about 7guis? "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/eugenkiss.github.io\/7guis\/tasks",
                                "text": "https:\/\/eugenkiss.github.io\/7guis\/tasks"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDQBTJ211",
        "type": "message",
        "ts": "1606065657.265300",
        "client_msg_id": "25b6502e-cbe6-48f9-bae4-5c6902720e46",
        "text": "Yep that's the one :+1:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2624b1e78c0a",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-02-14\/551655871797_2624b1e78c0a9eaed529_72.jpg",
            "first_name": "Chris",
            "real_name": "Chris Knott",
            "display_name": "",
            "team": "T5TCAFTA9",
            "name": "chrisknott",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hzv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep that's the one "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "unicode": "1f44d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606107649.267700",
        "client_msg_id": "9da636ed-e2ba-4e3c-a7e0-2fdbbd1ef118",
        "text": "I've been experimenting with RDF and graph databases. I think RDF is a great basis for content management systems. I recently found about TerminusDB which on top of the RDF model provides a git-like storage system (so data can be branched and merged, reverted, etc.). I came up with a little proof of concept for rendering content snippets embedding triple data <https:\/\/github.com\/EmmanuelOga\/NeonTetra>",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606107649.267700",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1606444842.278400",
        "reply_users": [
            "UN9SCH5RD",
            "U013ZLJARC7",
            "UA14TGLTC"
        ],
        "replies": [
            {
                "user": "UN9SCH5RD",
                "ts": "1606107910.267900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606107935.268100"
            },
            {
                "user": "U013ZLJARC7",
                "ts": "1606123324.268800"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606188816.269700"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606194411.269900"
            },
            {
                "user": "UN9SCH5RD",
                "ts": "1606194554.270200"
            },
            {
                "user": "UA14TGLTC",
                "ts": "1606444842.278400"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "EmmanuelOga\/NeonTetra",
                "title_link": "https:\/\/github.com\/EmmanuelOga\/NeonTetra",
                "text": "A simple proof of concept of storing content on TerminusDB for a CMS-like system. - EmmanuelOga\/NeonTetra",
                "fallback": "GitHub: EmmanuelOga\/NeonTetra",
                "thumb_url": "https:\/\/avatars3.githubusercontent.com\/u\/13634?s=400&v=4",
                "from_url": "https:\/\/github.com\/EmmanuelOga\/NeonTetra",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https:\/\/a.slack-edge.com\/80588\/img\/unfurl_icons\/github.png",
                "id": 1,
                "original_url": "https:\/\/github.com\/EmmanuelOga\/NeonTetra"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y7G7r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been experimenting with RDF and graph databases. I think RDF is a great basis for content management systems. I recently found about TerminusDB which on top of the RDF model provides a git-like storage system (so data can be branched and merged, reverted, etc.). I came up with a little proof of concept for rendering content snippets embedding triple data "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/EmmanuelOga\/NeonTetra"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UJBAJNFLK",
                    "UHWC9PXBL",
                    "UPX3PH28N"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606107910.267900",
        "client_msg_id": "1e749f36-3f70-4899-ab17-578239ecbd13",
        "text": "been thinking a little of what an `\/admin` ui for a system like this could work... the two options I came up with is a form-heavy UI allowing users to create new structures and then fill them. This is what a lot of the newish \"Headless CMS\"s do I think. The other option I came up with is to write some special widgets for a Notebook like Jupyter. Given I'm doing this for Personal Information Management I would probably adopt the Notebook UI for a start :slightly_smiling_face:",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606107649.267700",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Yr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "been thinking a little of what an "
                            },
                            {
                                "type": "text",
                                "text": "\/admin",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ui for a system like this could work... the two options I came up with is a form-heavy UI allowing users to create new structures and then fill them. This is what a lot of the newish \"Headless CMS\"s do I think. The other option I came up with is to write some special widgets for a Notebook like Jupyter. Given I'm doing this for Personal Information Management I would probably adopt the Notebook UI for a start "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UN9SCH5RD",
        "type": "message",
        "ts": "1606107935.268100",
        "client_msg_id": "42b6a3fa-3fe7-4461-869f-51221c152cf9",
        "text": "Will probably start exploring Jupyter-Lab",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "gaa31b79aded",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/aa31b79adedc3f60547769f1a8971ba6.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0015-72.png",
            "first_name": "",
            "real_name": "Emmanuel Oga",
            "display_name": "Emmanuel Oga",
            "team": "T5TCAFTA9",
            "name": "emmanueloga",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1606107649.267700",
        "parent_user_id": "UN9SCH5RD",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iuu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Will probably start exploring Jupyter-Lab"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "UDKTZSD6H",
        "type": "message",
        "ts": "1606117029.268500",
        "client_msg_id": "9e6b4348-533a-45c8-ae02-b94b3c5e1449",
        "text": "<@UUB7RA7PF> Your tool will go a long way towards removing some pain points when doing web page creation. The problem I was trying to get at is that when the hierarchies start forming, things become really hard to instrument without reaching in through a lot of levels. Like there would be a need to put data in and take it out by going through a lot of cycles. That aspect also spawns this other related idea that things will become polymorphic in the presence of particular contexts. These two then gets braided together and it becomes a bit too hard to instrument with text based programming. I’m probably not making myself particularly clear there unless you have bumped into the problem.\n\nTree like hierarchies alleviate this problem to a certain level except when the cyclicality becomes a dominant mode in the interface. What I find cool with your start is that you have a ground where you can have the compiler generate the dependency graph and make it a first class entity to understand the (cyclomatic) complexity of your codebase.",
        "team": "T5TCAFTA9",
        "user_team": "T5TCAFTA9",
        "source_team": "T5TCAFTA9",
        "user_profile": {
            "avatar_hash": "2b4594ccf61c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2019-06-03\/652459184852_2b4594ccf61c401763eb_72.png",
            "first_name": "",
            "real_name": "Prathyush",
            "display_name": "Prathyush",
            "team": "T5TCAFTA9",
            "name": "prax08",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1605630429.212300",
        "parent_user_id": "UUB7RA7PF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " Your tool will go a long way towards removing some pain points when doing web page creation. The problem I was trying to get at is that when the hierarchies start forming, things become really hard to instrument without reaching in through a lot of levels. Like there would be a need to put data in and take it out by going through a lot of cycles. That aspect also spawns this other related idea that things will become polymorphic in the presence of particular contexts. These two then gets braided together and it becomes a bit too hard to instrument with text based programming. I’m probably not making myself particularly clear there unless you have bumped into the problem.\n\nTree like hierarchies alleviate this problem to a certain level except when the cyclicality becomes a dominant mode in the interface. What I find cool with your start is that you have a ground where you can have the compiler generate the dependency graph and make it a first class entity to understand the (cyclomatic) complexity of your codebase."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]